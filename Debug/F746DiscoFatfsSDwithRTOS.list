
F746DiscoFatfsSDwithRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015a8c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08015c5c  08015c5c  00025c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015e00  08015e00  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  08015e00  08015e00  00025e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015e08  08015e08  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015e08  08015e08  00025e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015e0c  08015e0c  00025e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08015e10  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009fa8  20000094  08015ea4  00030094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a03c  08015ea4  0003a03c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00040edf  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007f1f  00000000  00000000  00070fa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003120  00000000  00000000  00078ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002d80  00000000  00000000  0007bfe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035d24  00000000  00000000  0007ed68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00030f2a  00000000  00000000  000b4a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011cfa5  00000000  00000000  000e59b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0020295b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d0c4  00000000  00000000  002029d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000094 	.word	0x20000094
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015c44 	.word	0x08015c44

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000098 	.word	0x20000098
 800020c:	08015c44 	.word	0x08015c44

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000514:	2003      	movs	r0, #3
 8000516:	f000 fb6a 	bl	8000bee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800051a:	2000      	movs	r0, #0
 800051c:	f014 fe50 	bl	80151c0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000520:	f013 febe 	bl	80142a0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000524:	2300      	movs	r3, #0
}
 8000526:	4618      	mov	r0, r3
 8000528:	bd80      	pop	{r7, pc}
	...

0800052c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <HAL_IncTick+0x20>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	461a      	mov	r2, r3
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <HAL_IncTick+0x24>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4413      	add	r3, r2
 800053c:	4a04      	ldr	r2, [pc, #16]	; (8000550 <HAL_IncTick+0x24>)
 800053e:	6013      	str	r3, [r2, #0]
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	20000000 	.word	0x20000000
 8000550:	20008450 	.word	0x20008450

08000554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  return uwTick;
 8000558:	4b03      	ldr	r3, [pc, #12]	; (8000568 <HAL_GetTick+0x14>)
 800055a:	681b      	ldr	r3, [r3, #0]
}
 800055c:	4618      	mov	r0, r3
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	20008450 	.word	0x20008450

0800056c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000574:	f7ff ffee 	bl	8000554 <HAL_GetTick>
 8000578:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000584:	d005      	beq.n	8000592 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <HAL_Delay+0x40>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	461a      	mov	r2, r3
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4413      	add	r3, r2
 8000590:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000592:	bf00      	nop
 8000594:	f7ff ffde 	bl	8000554 <HAL_GetTick>
 8000598:	4602      	mov	r2, r0
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	1ad3      	subs	r3, r2, r3
 800059e:	68fa      	ldr	r2, [r7, #12]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d8f7      	bhi.n	8000594 <HAL_Delay+0x28>
  {
  }
}
 80005a4:	bf00      	nop
 80005a6:	3710      	adds	r7, #16
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000000 	.word	0x20000000

080005b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005b8:	2300      	movs	r3, #0
 80005ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d101      	bne.n	80005c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80005c2:	2301      	movs	r3, #1
 80005c4:	e031      	b.n	800062a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d109      	bne.n	80005e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f013 fe8e 	bl	80142f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2200      	movs	r2, #0
 80005d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2200      	movs	r2, #0
 80005de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e6:	f003 0310 	and.w	r3, r3, #16
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d116      	bne.n	800061c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005f2:	4b10      	ldr	r3, [pc, #64]	; (8000634 <HAL_ADC_Init+0x84>)
 80005f4:	4013      	ands	r3, r2
 80005f6:	f043 0202 	orr.w	r2, r3, #2
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f000 f94e 	bl	80008a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2200      	movs	r2, #0
 8000608:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060e:	f023 0303 	bic.w	r3, r3, #3
 8000612:	f043 0201 	orr.w	r2, r3, #1
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	641a      	str	r2, [r3, #64]	; 0x40
 800061a:	e001      	b.n	8000620 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800061c:	2301      	movs	r3, #1
 800061e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2200      	movs	r2, #0
 8000624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000628:	7bfb      	ldrb	r3, [r7, #15]
}
 800062a:	4618      	mov	r0, r3
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	ffffeefd 	.word	0xffffeefd

08000638 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800064c:	2b01      	cmp	r3, #1
 800064e:	d101      	bne.n	8000654 <HAL_ADC_ConfigChannel+0x1c>
 8000650:	2302      	movs	r3, #2
 8000652:	e115      	b.n	8000880 <HAL_ADC_ConfigChannel+0x248>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2201      	movs	r2, #1
 8000658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b09      	cmp	r3, #9
 8000662:	d935      	bls.n	80006d0 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	68d9      	ldr	r1, [r3, #12]
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	b29b      	uxth	r3, r3
 8000670:	461a      	mov	r2, r3
 8000672:	4613      	mov	r3, r2
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	4413      	add	r3, r2
 8000678:	3b1e      	subs	r3, #30
 800067a:	2207      	movs	r2, #7
 800067c:	fa02 f303 	lsl.w	r3, r2, r3
 8000680:	43da      	mvns	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	400a      	ands	r2, r1
 8000688:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a7f      	ldr	r2, [pc, #508]	; (800088c <HAL_ADC_ConfigChannel+0x254>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d10a      	bne.n	80006aa <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	68d9      	ldr	r1, [r3, #12]
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	689b      	ldr	r3, [r3, #8]
 800069e:	061a      	lsls	r2, r3, #24
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	430a      	orrs	r2, r1
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	e035      	b.n	8000716 <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	68d9      	ldr	r1, [r3, #12]
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	689a      	ldr	r2, [r3, #8]
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	4618      	mov	r0, r3
 80006bc:	4603      	mov	r3, r0
 80006be:	005b      	lsls	r3, r3, #1
 80006c0:	4403      	add	r3, r0
 80006c2:	3b1e      	subs	r3, #30
 80006c4:	409a      	lsls	r2, r3
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	430a      	orrs	r2, r1
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	e022      	b.n	8000716 <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	6919      	ldr	r1, [r3, #16]
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	b29b      	uxth	r3, r3
 80006dc:	461a      	mov	r2, r3
 80006de:	4613      	mov	r3, r2
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	4413      	add	r3, r2
 80006e4:	2207      	movs	r2, #7
 80006e6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ea:	43da      	mvns	r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	400a      	ands	r2, r1
 80006f2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	6919      	ldr	r1, [r3, #16]
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	689a      	ldr	r2, [r3, #8]
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	b29b      	uxth	r3, r3
 8000704:	4618      	mov	r0, r3
 8000706:	4603      	mov	r3, r0
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	4403      	add	r3, r0
 800070c:	409a      	lsls	r2, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	430a      	orrs	r2, r1
 8000714:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	685b      	ldr	r3, [r3, #4]
 800071a:	2b06      	cmp	r3, #6
 800071c:	d824      	bhi.n	8000768 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	685a      	ldr	r2, [r3, #4]
 8000728:	4613      	mov	r3, r2
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	4413      	add	r3, r2
 800072e:	3b05      	subs	r3, #5
 8000730:	221f      	movs	r2, #31
 8000732:	fa02 f303 	lsl.w	r3, r2, r3
 8000736:	43da      	mvns	r2, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	400a      	ands	r2, r1
 800073e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	b29b      	uxth	r3, r3
 800074c:	4618      	mov	r0, r3
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	685a      	ldr	r2, [r3, #4]
 8000752:	4613      	mov	r3, r2
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	4413      	add	r3, r2
 8000758:	3b05      	subs	r3, #5
 800075a:	fa00 f203 	lsl.w	r2, r0, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	430a      	orrs	r2, r1
 8000764:	635a      	str	r2, [r3, #52]	; 0x34
 8000766:	e04c      	b.n	8000802 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	2b0c      	cmp	r3, #12
 800076e:	d824      	bhi.n	80007ba <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	685a      	ldr	r2, [r3, #4]
 800077a:	4613      	mov	r3, r2
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	4413      	add	r3, r2
 8000780:	3b23      	subs	r3, #35	; 0x23
 8000782:	221f      	movs	r2, #31
 8000784:	fa02 f303 	lsl.w	r3, r2, r3
 8000788:	43da      	mvns	r2, r3
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	400a      	ands	r2, r1
 8000790:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	b29b      	uxth	r3, r3
 800079e:	4618      	mov	r0, r3
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	685a      	ldr	r2, [r3, #4]
 80007a4:	4613      	mov	r3, r2
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	4413      	add	r3, r2
 80007aa:	3b23      	subs	r3, #35	; 0x23
 80007ac:	fa00 f203 	lsl.w	r2, r0, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	430a      	orrs	r2, r1
 80007b6:	631a      	str	r2, [r3, #48]	; 0x30
 80007b8:	e023      	b.n	8000802 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	685a      	ldr	r2, [r3, #4]
 80007c4:	4613      	mov	r3, r2
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	4413      	add	r3, r2
 80007ca:	3b41      	subs	r3, #65	; 0x41
 80007cc:	221f      	movs	r2, #31
 80007ce:	fa02 f303 	lsl.w	r3, r2, r3
 80007d2:	43da      	mvns	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	400a      	ands	r2, r1
 80007da:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	4618      	mov	r0, r3
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	685a      	ldr	r2, [r3, #4]
 80007ee:	4613      	mov	r3, r2
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	4413      	add	r3, r2
 80007f4:	3b41      	subs	r3, #65	; 0x41
 80007f6:	fa00 f203 	lsl.w	r2, r0, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	430a      	orrs	r2, r1
 8000800:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a22      	ldr	r2, [pc, #136]	; (8000890 <HAL_ADC_ConfigChannel+0x258>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d109      	bne.n	8000820 <HAL_ADC_ConfigChannel+0x1e8>
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2b12      	cmp	r3, #18
 8000812:	d105      	bne.n	8000820 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8000814:	4b1f      	ldr	r3, [pc, #124]	; (8000894 <HAL_ADC_ConfigChannel+0x25c>)
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	4a1e      	ldr	r2, [pc, #120]	; (8000894 <HAL_ADC_ConfigChannel+0x25c>)
 800081a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800081e:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a1a      	ldr	r2, [pc, #104]	; (8000890 <HAL_ADC_ConfigChannel+0x258>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d125      	bne.n	8000876 <HAL_ADC_ConfigChannel+0x23e>
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a17      	ldr	r2, [pc, #92]	; (800088c <HAL_ADC_ConfigChannel+0x254>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d003      	beq.n	800083c <HAL_ADC_ConfigChannel+0x204>
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b11      	cmp	r3, #17
 800083a:	d11c      	bne.n	8000876 <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800083c:	4b15      	ldr	r3, [pc, #84]	; (8000894 <HAL_ADC_ConfigChannel+0x25c>)
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	4a14      	ldr	r2, [pc, #80]	; (8000894 <HAL_ADC_ConfigChannel+0x25c>)
 8000842:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000846:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a0f      	ldr	r2, [pc, #60]	; (800088c <HAL_ADC_ConfigChannel+0x254>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d111      	bne.n	8000876 <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <HAL_ADC_ConfigChannel+0x260>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a11      	ldr	r2, [pc, #68]	; (800089c <HAL_ADC_ConfigChannel+0x264>)
 8000858:	fba2 2303 	umull	r2, r3, r2, r3
 800085c:	0c9a      	lsrs	r2, r3, #18
 800085e:	4613      	mov	r3, r2
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	4413      	add	r3, r2
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000868:	e002      	b.n	8000870 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	3b01      	subs	r3, #1
 800086e:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d1f9      	bne.n	800086a <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2200      	movs	r2, #0
 800087a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800087e:	2300      	movs	r3, #0
}
 8000880:	4618      	mov	r0, r3
 8000882:	3714      	adds	r7, #20
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	10000012 	.word	0x10000012
 8000890:	40012000 	.word	0x40012000
 8000894:	40012300 	.word	0x40012300
 8000898:	2000002c 	.word	0x2000002c
 800089c:	431bde83 	.word	0x431bde83

080008a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80008a8:	4b78      	ldr	r3, [pc, #480]	; (8000a8c <ADC_Init+0x1ec>)
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	4a77      	ldr	r2, [pc, #476]	; (8000a8c <ADC_Init+0x1ec>)
 80008ae:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80008b2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80008b4:	4b75      	ldr	r3, [pc, #468]	; (8000a8c <ADC_Init+0x1ec>)
 80008b6:	685a      	ldr	r2, [r3, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	4973      	ldr	r1, [pc, #460]	; (8000a8c <ADC_Init+0x1ec>)
 80008be:	4313      	orrs	r3, r2
 80008c0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	685a      	ldr	r2, [r3, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80008d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	6859      	ldr	r1, [r3, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	691b      	ldr	r3, [r3, #16]
 80008dc:	021a      	lsls	r2, r3, #8
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	430a      	orrs	r2, r1
 80008e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	685a      	ldr	r2, [r3, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80008f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	6859      	ldr	r1, [r3, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	689a      	ldr	r2, [r3, #8]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	430a      	orrs	r2, r1
 8000906:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	689a      	ldr	r2, [r3, #8]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000916:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	6899      	ldr	r1, [r3, #8]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	68da      	ldr	r2, [r3, #12]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	430a      	orrs	r2, r1
 8000928:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800092e:	4a58      	ldr	r2, [pc, #352]	; (8000a90 <ADC_Init+0x1f0>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d022      	beq.n	800097a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	689a      	ldr	r2, [r3, #8]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000942:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	6899      	ldr	r1, [r3, #8]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	430a      	orrs	r2, r1
 8000954:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	689a      	ldr	r2, [r3, #8]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000964:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	6899      	ldr	r1, [r3, #8]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	430a      	orrs	r2, r1
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	e00f      	b.n	800099a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	689a      	ldr	r2, [r3, #8]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000988:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	689a      	ldr	r2, [r3, #8]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000998:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	689a      	ldr	r2, [r3, #8]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f022 0202 	bic.w	r2, r2, #2
 80009a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	6899      	ldr	r1, [r3, #8]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	005a      	lsls	r2, r3, #1
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	430a      	orrs	r2, r1
 80009bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d01b      	beq.n	8000a00 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	685a      	ldr	r2, [r3, #4]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80009d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	685a      	ldr	r2, [r3, #4]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80009e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	6859      	ldr	r1, [r3, #4]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009f2:	3b01      	subs	r3, #1
 80009f4:	035a      	lsls	r2, r3, #13
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	430a      	orrs	r2, r1
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	e007      	b.n	8000a10 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	685a      	ldr	r2, [r3, #4]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000a0e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000a1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	69db      	ldr	r3, [r3, #28]
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	051a      	lsls	r2, r3, #20
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	430a      	orrs	r2, r1
 8000a34:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	689a      	ldr	r2, [r3, #8]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	6899      	ldr	r1, [r3, #8]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000a52:	025a      	lsls	r2, r3, #9
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	430a      	orrs	r2, r1
 8000a5a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	689a      	ldr	r2, [r3, #8]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	6899      	ldr	r1, [r3, #8]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	029a      	lsls	r2, r3, #10
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	609a      	str	r2, [r3, #8]
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	40012300 	.word	0x40012300
 8000a90:	0f000001 	.word	0x0f000001

08000a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa4:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <__NVIC_SetPriorityGrouping+0x40>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ac2:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <__NVIC_SetPriorityGrouping+0x40>)
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	60d3      	str	r3, [r2, #12]
}
 8000ac8:	bf00      	nop
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000ed00 	.word	0xe000ed00
 8000ad8:	05fa0000 	.word	0x05fa0000

08000adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae0:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	0a1b      	lsrs	r3, r3, #8
 8000ae6:	f003 0307 	and.w	r3, r3, #7
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	db0b      	blt.n	8000b22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	f003 021f 	and.w	r2, r3, #31
 8000b10:	4907      	ldr	r1, [pc, #28]	; (8000b30 <__NVIC_EnableIRQ+0x38>)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	095b      	lsrs	r3, r3, #5
 8000b18:	2001      	movs	r0, #1
 8000b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000e100 	.word	0xe000e100

08000b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	6039      	str	r1, [r7, #0]
 8000b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	db0a      	blt.n	8000b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	490c      	ldr	r1, [pc, #48]	; (8000b80 <__NVIC_SetPriority+0x4c>)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	0112      	lsls	r2, r2, #4
 8000b54:	b2d2      	uxtb	r2, r2
 8000b56:	440b      	add	r3, r1
 8000b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b5c:	e00a      	b.n	8000b74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4908      	ldr	r1, [pc, #32]	; (8000b84 <__NVIC_SetPriority+0x50>)
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	3b04      	subs	r3, #4
 8000b6c:	0112      	lsls	r2, r2, #4
 8000b6e:	b2d2      	uxtb	r2, r2
 8000b70:	440b      	add	r3, r1
 8000b72:	761a      	strb	r2, [r3, #24]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000e100 	.word	0xe000e100
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b089      	sub	sp, #36	; 0x24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ba2:	2b04      	cmp	r3, #4
 8000ba4:	bf28      	it	cs
 8000ba6:	2304      	movcs	r3, #4
 8000ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3304      	adds	r3, #4
 8000bae:	2b06      	cmp	r3, #6
 8000bb0:	d902      	bls.n	8000bb8 <NVIC_EncodePriority+0x30>
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3b03      	subs	r3, #3
 8000bb6:	e000      	b.n	8000bba <NVIC_EncodePriority+0x32>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43da      	mvns	r2, r3
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	401a      	ands	r2, r3
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bda:	43d9      	mvns	r1, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be0:	4313      	orrs	r3, r2
         );
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3724      	adds	r7, #36	; 0x24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b082      	sub	sp, #8
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f7ff ff4c 	bl	8000a94 <__NVIC_SetPriorityGrouping>
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
 8000c10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c16:	f7ff ff61 	bl	8000adc <__NVIC_GetPriorityGrouping>
 8000c1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	68b9      	ldr	r1, [r7, #8]
 8000c20:	6978      	ldr	r0, [r7, #20]
 8000c22:	f7ff ffb1 	bl	8000b88 <NVIC_EncodePriority>
 8000c26:	4602      	mov	r2, r0
 8000c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c2c:	4611      	mov	r1, r2
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff ff80 	bl	8000b34 <__NVIC_SetPriority>
}
 8000c34:	bf00      	nop
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff ff54 	bl	8000af8 <__NVIC_EnableIRQ>
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d101      	bne.n	8000c6a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e054      	b.n	8000d14 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	7f5b      	ldrb	r3, [r3, #29]
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d105      	bne.n	8000c80 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2200      	movs	r2, #0
 8000c78:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f013 fb92 	bl	80143a4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2202      	movs	r2, #2
 8000c84:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	791b      	ldrb	r3, [r3, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d10c      	bne.n	8000ca8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a22      	ldr	r2, [pc, #136]	; (8000d1c <HAL_CRC_Init+0xc4>)
 8000c94:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	689a      	ldr	r2, [r3, #8]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f022 0218 	bic.w	r2, r2, #24
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	e00c      	b.n	8000cc2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6899      	ldr	r1, [r3, #8]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f000 f834 	bl	8000d20 <HAL_CRCEx_Polynomial_Set>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e028      	b.n	8000d14 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	795b      	ldrb	r3, [r3, #5]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d105      	bne.n	8000cd6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd2:	611a      	str	r2, [r3, #16]
 8000cd4:	e004      	b.n	8000ce0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	6912      	ldr	r2, [r2, #16]
 8000cde:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	695a      	ldr	r2, [r3, #20]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	699a      	ldr	r2, [r3, #24]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2201      	movs	r2, #1
 8000d10:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000d12:	2300      	movs	r3, #0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	04c11db7 	.word	0x04c11db7

08000d20 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b087      	sub	sp, #28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000d30:	231f      	movs	r3, #31
 8000d32:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000d34:	bf00      	nop
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	1e5a      	subs	r2, r3, #1
 8000d3a:	613a      	str	r2, [r7, #16]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d009      	beq.n	8000d54 <HAL_CRCEx_Polynomial_Set+0x34>
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	f003 031f 	and.w	r3, r3, #31
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	fa22 f303 	lsr.w	r3, r2, r3
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d0f0      	beq.n	8000d36 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b18      	cmp	r3, #24
 8000d58:	d846      	bhi.n	8000de8 <HAL_CRCEx_Polynomial_Set+0xc8>
 8000d5a:	a201      	add	r2, pc, #4	; (adr r2, 8000d60 <HAL_CRCEx_Polynomial_Set+0x40>)
 8000d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d60:	08000def 	.word	0x08000def
 8000d64:	08000de9 	.word	0x08000de9
 8000d68:	08000de9 	.word	0x08000de9
 8000d6c:	08000de9 	.word	0x08000de9
 8000d70:	08000de9 	.word	0x08000de9
 8000d74:	08000de9 	.word	0x08000de9
 8000d78:	08000de9 	.word	0x08000de9
 8000d7c:	08000de9 	.word	0x08000de9
 8000d80:	08000ddd 	.word	0x08000ddd
 8000d84:	08000de9 	.word	0x08000de9
 8000d88:	08000de9 	.word	0x08000de9
 8000d8c:	08000de9 	.word	0x08000de9
 8000d90:	08000de9 	.word	0x08000de9
 8000d94:	08000de9 	.word	0x08000de9
 8000d98:	08000de9 	.word	0x08000de9
 8000d9c:	08000de9 	.word	0x08000de9
 8000da0:	08000dd1 	.word	0x08000dd1
 8000da4:	08000de9 	.word	0x08000de9
 8000da8:	08000de9 	.word	0x08000de9
 8000dac:	08000de9 	.word	0x08000de9
 8000db0:	08000de9 	.word	0x08000de9
 8000db4:	08000de9 	.word	0x08000de9
 8000db8:	08000de9 	.word	0x08000de9
 8000dbc:	08000de9 	.word	0x08000de9
 8000dc0:	08000dc5 	.word	0x08000dc5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	2b06      	cmp	r3, #6
 8000dc8:	d913      	bls.n	8000df2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000dce:	e010      	b.n	8000df2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	2b07      	cmp	r3, #7
 8000dd4:	d90f      	bls.n	8000df6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000dda:	e00c      	b.n	8000df6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	2b0f      	cmp	r3, #15
 8000de0:	d90b      	bls.n	8000dfa <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000de6:	e008      	b.n	8000dfa <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	75fb      	strb	r3, [r7, #23]
      break;
 8000dec:	e006      	b.n	8000dfc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000dee:	bf00      	nop
 8000df0:	e004      	b.n	8000dfc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000df2:	bf00      	nop
 8000df4:	e002      	b.n	8000dfc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000df6:	bf00      	nop
 8000df8:	e000      	b.n	8000dfc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000dfa:	bf00      	nop
  }
  if (status == HAL_OK)
 8000dfc:	7dfb      	ldrb	r3, [r7, #23]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d10d      	bne.n	8000e1e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	f023 0118 	bic.w	r1, r3, #24
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	371c      	adds	r7, #28
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{     
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d101      	bne.n	8000e3e <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e062      	b.n	8000f04 <HAL_DCMI_Init+0xd8>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
                
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d102      	bne.n	8000e50 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else  
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f013 faca 	bl	80143e4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  } 
  
  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2202      	movs	r2, #2
 8000e54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	6819      	ldr	r1, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	4b2a      	ldr	r3, [pc, #168]	; (8000f0c <HAL_DCMI_Init+0xe0>)
 8000e64:	400b      	ands	r3, r1
 8000e66:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	6819      	ldr	r1, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	685a      	ldr	r2, [r3, #4]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000e7c:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	691b      	ldr	r3, [r3, #16]
 8000e82:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000e88:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8000e94:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9a:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8000ea0:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea6:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8000eac:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	601a      	str	r2, [r3, #0]
                                     
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	2b10      	cmp	r3, #16
 8000ebc:	d112      	bne.n	8000ee4 <HAL_DCMI_Init+0xb8>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	7f1b      	ldrb	r3, [r3, #28]
 8000ec2:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	7f5b      	ldrb	r3, [r3, #29]
 8000ec8:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8000eca:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	7f9b      	ldrb	r3, [r3, #30]
 8000ed0:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8000ed2:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	7fdb      	ldrb	r3, [r3, #31]
 8000eda:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8000ee0:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8000ee2:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	68da      	ldr	r2, [r3, #12]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f042 021e 	orr.w	r2, r2, #30
 8000ef2:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2201      	movs	r2, #1
 8000efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000f02:	2300      	movs	r3, #0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	ffe0f007 	.word	0xffe0f007

08000f10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f1c:	f7ff fb1a 	bl	8000554 <HAL_GetTick>
 8000f20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d101      	bne.n	8000f2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e099      	b.n	8001060 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2202      	movs	r2, #2
 8000f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f022 0201 	bic.w	r2, r2, #1
 8000f4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f4c:	e00f      	b.n	8000f6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f4e:	f7ff fb01 	bl	8000554 <HAL_GetTick>
 8000f52:	4602      	mov	r2, r0
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	2b05      	cmp	r3, #5
 8000f5a:	d908      	bls.n	8000f6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2220      	movs	r2, #32
 8000f60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2203      	movs	r2, #3
 8000f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e078      	b.n	8001060 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d1e8      	bne.n	8000f4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f84:	697a      	ldr	r2, [r7, #20]
 8000f86:	4b38      	ldr	r3, [pc, #224]	; (8001068 <HAL_DMA_Init+0x158>)
 8000f88:	4013      	ands	r3, r2
 8000f8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685a      	ldr	r2, [r3, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	691b      	ldr	r3, [r3, #16]
 8000fa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6a1b      	ldr	r3, [r3, #32]
 8000fb8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fba:	697a      	ldr	r2, [r7, #20]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc4:	2b04      	cmp	r3, #4
 8000fc6:	d107      	bne.n	8000fd8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	f023 0307 	bic.w	r3, r3, #7
 8000fee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff4:	697a      	ldr	r2, [r7, #20]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	d117      	bne.n	8001032 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	4313      	orrs	r3, r2
 800100a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001010:	2b00      	cmp	r3, #0
 8001012:	d00e      	beq.n	8001032 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f000 faa5 	bl	8001564 <DMA_CheckFifoParam>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d008      	beq.n	8001032 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2240      	movs	r2, #64	; 0x40
 8001024:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2201      	movs	r2, #1
 800102a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800102e:	2301      	movs	r3, #1
 8001030:	e016      	b.n	8001060 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f000 fa5c 	bl	80014f8 <DMA_CalcBaseAndBitshift>
 8001040:	4603      	mov	r3, r0
 8001042:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001048:	223f      	movs	r2, #63	; 0x3f
 800104a:	409a      	lsls	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2201      	movs	r2, #1
 800105a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	f010803f 	.word	0xf010803f

0800106c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
 8001078:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800107a:	2300      	movs	r3, #0
 800107c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001082:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800108a:	2b01      	cmp	r3, #1
 800108c:	d101      	bne.n	8001092 <HAL_DMA_Start_IT+0x26>
 800108e:	2302      	movs	r3, #2
 8001090:	e048      	b.n	8001124 <HAL_DMA_Start_IT+0xb8>
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2201      	movs	r2, #1
 8001096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d137      	bne.n	8001116 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	2202      	movs	r2, #2
 80010aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	2200      	movs	r2, #0
 80010b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	68b9      	ldr	r1, [r7, #8]
 80010ba:	68f8      	ldr	r0, [r7, #12]
 80010bc:	f000 f9ee 	bl	800149c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010c4:	223f      	movs	r2, #63	; 0x3f
 80010c6:	409a      	lsls	r2, r3
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f042 0216 	orr.w	r2, r2, #22
 80010da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	695a      	ldr	r2, [r3, #20]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010ea:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d007      	beq.n	8001104 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f042 0208 	orr.w	r2, r2, #8
 8001102:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f042 0201 	orr.w	r2, r2, #1
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	e005      	b.n	8001122 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800111e:	2302      	movs	r3, #2
 8001120:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001122:	7dfb      	ldrb	r3, [r7, #23]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d004      	beq.n	800114a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2280      	movs	r2, #128	; 0x80
 8001144:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e00c      	b.n	8001164 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2205      	movs	r2, #5
 800114e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f022 0201 	bic.w	r2, r2, #1
 8001160:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001162:	2300      	movs	r3, #0
}
 8001164:	4618      	mov	r0, r3
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800117c:	4b92      	ldr	r3, [pc, #584]	; (80013c8 <HAL_DMA_IRQHandler+0x258>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a92      	ldr	r2, [pc, #584]	; (80013cc <HAL_DMA_IRQHandler+0x25c>)
 8001182:	fba2 2303 	umull	r2, r3, r2, r3
 8001186:	0a9b      	lsrs	r3, r3, #10
 8001188:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800119a:	2208      	movs	r2, #8
 800119c:	409a      	lsls	r2, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	4013      	ands	r3, r2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d01a      	beq.n	80011dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d013      	beq.n	80011dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f022 0204 	bic.w	r2, r2, #4
 80011c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011c8:	2208      	movs	r2, #8
 80011ca:	409a      	lsls	r2, r3
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d4:	f043 0201 	orr.w	r2, r3, #1
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011e0:	2201      	movs	r2, #1
 80011e2:	409a      	lsls	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4013      	ands	r3, r2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d012      	beq.n	8001212 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00b      	beq.n	8001212 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011fe:	2201      	movs	r2, #1
 8001200:	409a      	lsls	r2, r3
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800120a:	f043 0202 	orr.w	r2, r3, #2
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001216:	2204      	movs	r2, #4
 8001218:	409a      	lsls	r2, r3
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	4013      	ands	r3, r2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d012      	beq.n	8001248 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d00b      	beq.n	8001248 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001234:	2204      	movs	r2, #4
 8001236:	409a      	lsls	r2, r3
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001240:	f043 0204 	orr.w	r2, r3, #4
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800124c:	2210      	movs	r2, #16
 800124e:	409a      	lsls	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4013      	ands	r3, r2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d043      	beq.n	80012e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0308 	and.w	r3, r3, #8
 8001262:	2b00      	cmp	r3, #0
 8001264:	d03c      	beq.n	80012e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800126a:	2210      	movs	r2, #16
 800126c:	409a      	lsls	r2, r3
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d018      	beq.n	80012b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d108      	bne.n	80012a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	2b00      	cmp	r3, #0
 8001294:	d024      	beq.n	80012e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	4798      	blx	r3
 800129e:	e01f      	b.n	80012e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d01b      	beq.n	80012e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	4798      	blx	r3
 80012b0:	e016      	b.n	80012e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d107      	bne.n	80012d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f022 0208 	bic.w	r2, r2, #8
 80012ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012e4:	2220      	movs	r2, #32
 80012e6:	409a      	lsls	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4013      	ands	r3, r2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 808e 	beq.w	800140e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0310 	and.w	r3, r3, #16
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 8086 	beq.w	800140e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001306:	2220      	movs	r2, #32
 8001308:	409a      	lsls	r2, r3
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b05      	cmp	r3, #5
 8001318:	d136      	bne.n	8001388 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f022 0216 	bic.w	r2, r2, #22
 8001328:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	695a      	ldr	r2, [r3, #20]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001338:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	2b00      	cmp	r3, #0
 8001340:	d103      	bne.n	800134a <HAL_DMA_IRQHandler+0x1da>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001346:	2b00      	cmp	r3, #0
 8001348:	d007      	beq.n	800135a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f022 0208 	bic.w	r2, r2, #8
 8001358:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800135e:	223f      	movs	r2, #63	; 0x3f
 8001360:	409a      	lsls	r2, r3
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2201      	movs	r2, #1
 8001372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800137a:	2b00      	cmp	r3, #0
 800137c:	d07d      	beq.n	800147a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	4798      	blx	r3
        }
        return;
 8001386:	e078      	b.n	800147a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d01c      	beq.n	80013d0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d108      	bne.n	80013b6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d030      	beq.n	800140e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	4798      	blx	r3
 80013b4:	e02b      	b.n	800140e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d027      	beq.n	800140e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	4798      	blx	r3
 80013c6:	e022      	b.n	800140e <HAL_DMA_IRQHandler+0x29e>
 80013c8:	2000002c 	.word	0x2000002c
 80013cc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d10f      	bne.n	80013fe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 0210 	bic.w	r2, r2, #16
 80013ec:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2201      	movs	r2, #1
 80013fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001412:	2b00      	cmp	r3, #0
 8001414:	d032      	beq.n	800147c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	2b00      	cmp	r3, #0
 8001420:	d022      	beq.n	8001468 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2205      	movs	r2, #5
 8001426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f022 0201 	bic.w	r2, r2, #1
 8001438:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	3301      	adds	r3, #1
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	697a      	ldr	r2, [r7, #20]
 8001442:	429a      	cmp	r2, r3
 8001444:	d307      	bcc.n	8001456 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1f2      	bne.n	800143a <HAL_DMA_IRQHandler+0x2ca>
 8001454:	e000      	b.n	8001458 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001456:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2201      	movs	r2, #1
 8001464:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146c:	2b00      	cmp	r3, #0
 800146e:	d005      	beq.n	800147c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	4798      	blx	r3
 8001478:	e000      	b.n	800147c <HAL_DMA_IRQHandler+0x30c>
        return;
 800147a:	bf00      	nop
    }
  }
}
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop

08001484 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001490:	4618      	mov	r0, r3
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
 80014a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80014b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	2b40      	cmp	r3, #64	; 0x40
 80014c8:	d108      	bne.n	80014dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68ba      	ldr	r2, [r7, #8]
 80014d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80014da:	e007      	b.n	80014ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	68ba      	ldr	r2, [r7, #8]
 80014e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	60da      	str	r2, [r3, #12]
}
 80014ec:	bf00      	nop
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	3b10      	subs	r3, #16
 8001508:	4a13      	ldr	r2, [pc, #76]	; (8001558 <DMA_CalcBaseAndBitshift+0x60>)
 800150a:	fba2 2303 	umull	r2, r3, r2, r3
 800150e:	091b      	lsrs	r3, r3, #4
 8001510:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001512:	4a12      	ldr	r2, [pc, #72]	; (800155c <DMA_CalcBaseAndBitshift+0x64>)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4413      	add	r3, r2
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	461a      	mov	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2b03      	cmp	r3, #3
 8001524:	d908      	bls.n	8001538 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	461a      	mov	r2, r3
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <DMA_CalcBaseAndBitshift+0x68>)
 800152e:	4013      	ands	r3, r2
 8001530:	1d1a      	adds	r2, r3, #4
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	659a      	str	r2, [r3, #88]	; 0x58
 8001536:	e006      	b.n	8001546 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	461a      	mov	r2, r3
 800153e:	4b08      	ldr	r3, [pc, #32]	; (8001560 <DMA_CalcBaseAndBitshift+0x68>)
 8001540:	4013      	ands	r3, r2
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800154a:	4618      	mov	r0, r3
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	aaaaaaab 	.word	0xaaaaaaab
 800155c:	08015d2c 	.word	0x08015d2c
 8001560:	fffffc00 	.word	0xfffffc00

08001564 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001574:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d11f      	bne.n	80015be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	2b03      	cmp	r3, #3
 8001582:	d855      	bhi.n	8001630 <DMA_CheckFifoParam+0xcc>
 8001584:	a201      	add	r2, pc, #4	; (adr r2, 800158c <DMA_CheckFifoParam+0x28>)
 8001586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800158a:	bf00      	nop
 800158c:	0800159d 	.word	0x0800159d
 8001590:	080015af 	.word	0x080015af
 8001594:	0800159d 	.word	0x0800159d
 8001598:	08001631 	.word	0x08001631
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d045      	beq.n	8001634 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015ac:	e042      	b.n	8001634 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015b6:	d13f      	bne.n	8001638 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015bc:	e03c      	b.n	8001638 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015c6:	d121      	bne.n	800160c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	2b03      	cmp	r3, #3
 80015cc:	d836      	bhi.n	800163c <DMA_CheckFifoParam+0xd8>
 80015ce:	a201      	add	r2, pc, #4	; (adr r2, 80015d4 <DMA_CheckFifoParam+0x70>)
 80015d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d4:	080015e5 	.word	0x080015e5
 80015d8:	080015eb 	.word	0x080015eb
 80015dc:	080015e5 	.word	0x080015e5
 80015e0:	080015fd 	.word	0x080015fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	73fb      	strb	r3, [r7, #15]
      break;
 80015e8:	e02f      	b.n	800164a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d024      	beq.n	8001640 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015fa:	e021      	b.n	8001640 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001600:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001604:	d11e      	bne.n	8001644 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800160a:	e01b      	b.n	8001644 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	2b02      	cmp	r3, #2
 8001610:	d902      	bls.n	8001618 <DMA_CheckFifoParam+0xb4>
 8001612:	2b03      	cmp	r3, #3
 8001614:	d003      	beq.n	800161e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001616:	e018      	b.n	800164a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	73fb      	strb	r3, [r7, #15]
      break;
 800161c:	e015      	b.n	800164a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001622:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00e      	beq.n	8001648 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	73fb      	strb	r3, [r7, #15]
      break;
 800162e:	e00b      	b.n	8001648 <DMA_CheckFifoParam+0xe4>
      break;
 8001630:	bf00      	nop
 8001632:	e00a      	b.n	800164a <DMA_CheckFifoParam+0xe6>
      break;
 8001634:	bf00      	nop
 8001636:	e008      	b.n	800164a <DMA_CheckFifoParam+0xe6>
      break;
 8001638:	bf00      	nop
 800163a:	e006      	b.n	800164a <DMA_CheckFifoParam+0xe6>
      break;
 800163c:	bf00      	nop
 800163e:	e004      	b.n	800164a <DMA_CheckFifoParam+0xe6>
      break;
 8001640:	bf00      	nop
 8001642:	e002      	b.n	800164a <DMA_CheckFifoParam+0xe6>
      break;   
 8001644:	bf00      	nop
 8001646:	e000      	b.n	800164a <DMA_CheckFifoParam+0xe6>
      break;
 8001648:	bf00      	nop
    }
  } 
  
  return status; 
 800164a:	7bfb      	ldrb	r3, [r7, #15]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e039      	b.n	80016de <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d106      	bne.n	8001684 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f012 ff6e 	bl	8014560 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2202      	movs	r2, #2
 8001688:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	430a      	orrs	r2, r1
 80016a0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016a8:	f023 0107 	bic.w	r1, r3, #7
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016be:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <HAL_DMA2D_Init+0x90>)
 80016c0:	4013      	ands	r3, r2
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	68d1      	ldr	r1, [r2, #12]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	6812      	ldr	r2, [r2, #0]
 80016ca:	430b      	orrs	r3, r1
 80016cc:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2201      	movs	r2, #1
 80016d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	ffffc000 	.word	0xffffc000

080016ec <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b00      	cmp	r3, #0
 800170c:	d026      	beq.n	800175c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001714:	2b00      	cmp	r3, #0
 8001716:	d021      	beq.n	800175c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001726:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800172c:	f043 0201 	orr.w	r2, r3, #1
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2201      	movs	r2, #1
 800173a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2204      	movs	r2, #4
 8001740:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 0320 	and.w	r3, r3, #32
 8001762:	2b00      	cmp	r3, #0
 8001764:	d026      	beq.n	80017b4 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d021      	beq.n	80017b4 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800177e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2220      	movs	r2, #32
 8001786:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800178c:	f043 0202 	orr.w	r2, r3, #2
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2204      	movs	r2, #4
 8001798:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	695b      	ldr	r3, [r3, #20]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f003 0308 	and.w	r3, r3, #8
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d026      	beq.n	800180c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d021      	beq.n	800180c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017d6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2208      	movs	r2, #8
 80017de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017e4:	f043 0204 	orr.w	r2, r3, #4
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2204      	movs	r2, #4
 80017f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	695b      	ldr	r3, [r3, #20]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f003 0304 	and.w	r3, r3, #4
 8001812:	2b00      	cmp	r3, #0
 8001814:	d013      	beq.n	800183e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800181c:	2b00      	cmp	r3, #0
 800181e:	d00e      	beq.n	800183e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800182e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2204      	movs	r2, #4
 8001836:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f000 f853 	bl	80018e4 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d024      	beq.n	8001892 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800184e:	2b00      	cmp	r3, #0
 8001850:	d01f      	beq.n	8001892 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001860:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2202      	movs	r2, #2
 8001868:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f003 0310 	and.w	r3, r3, #16
 8001898:	2b00      	cmp	r3, #0
 800189a:	d01f      	beq.n	80018dc <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d01a      	beq.n	80018dc <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018b4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2210      	movs	r2, #16
 80018bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 f80e 	bl	80018f8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80018dc:	bf00      	nop
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800190c:	b480      	push	{r7}
 800190e:	b087      	sub	sp, #28
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001924:	2b01      	cmp	r3, #1
 8001926:	d101      	bne.n	800192c <HAL_DMA2D_ConfigLayer+0x20>
 8001928:	2302      	movs	r3, #2
 800192a:	e079      	b.n	8001a20 <HAL_DMA2D_ConfigLayer+0x114>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2202      	movs	r2, #2
 8001938:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	011b      	lsls	r3, r3, #4
 8001940:	3318      	adds	r3, #24
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	041b      	lsls	r3, r3, #16
 8001952:	4313      	orrs	r3, r2
 8001954:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001956:	4b35      	ldr	r3, [pc, #212]	; (8001a2c <HAL_DMA2D_ConfigLayer+0x120>)
 8001958:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b0a      	cmp	r3, #10
 8001960:	d003      	beq.n	800196a <HAL_DMA2D_ConfigLayer+0x5e>
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b09      	cmp	r3, #9
 8001968:	d107      	bne.n	800197a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	4313      	orrs	r3, r2
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	e005      	b.n	8001986 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	061b      	lsls	r3, r3, #24
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	4313      	orrs	r3, r2
 8001984:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d120      	bne.n	80019ce <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	43db      	mvns	r3, r3
 8001996:	ea02 0103 	and.w	r1, r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	430a      	orrs	r2, r1
 80019a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	6812      	ldr	r2, [r2, #0]
 80019ac:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b0a      	cmp	r3, #10
 80019b4:	d003      	beq.n	80019be <HAL_DMA2D_ConfigLayer+0xb2>
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b09      	cmp	r3, #9
 80019bc:	d127      	bne.n	8001a0e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	68da      	ldr	r2, [r3, #12]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80019ca:	629a      	str	r2, [r3, #40]	; 0x28
 80019cc:	e01f      	b.n	8001a0e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	69da      	ldr	r2, [r3, #28]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	43db      	mvns	r3, r3
 80019d8:	ea02 0103 	and.w	r1, r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	430a      	orrs	r2, r1
 80019e4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	6812      	ldr	r2, [r2, #0]
 80019ee:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	2b0a      	cmp	r3, #10
 80019f6:	d003      	beq.n	8001a00 <HAL_DMA2D_ConfigLayer+0xf4>
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b09      	cmp	r3, #9
 80019fe:	d106      	bne.n	8001a0e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	68da      	ldr	r2, [r3, #12]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001a0c:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2201      	movs	r2, #1
 8001a12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	371c      	adds	r7, #28
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	ff03000f 	.word	0xff03000f

08001a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b089      	sub	sp, #36	; 0x24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
 8001a4e:	e175      	b.n	8001d3c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a50:	2201      	movs	r2, #1
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	4013      	ands	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	f040 8164 	bne.w	8001d36 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d003      	beq.n	8001a7e <HAL_GPIO_Init+0x4e>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b12      	cmp	r3, #18
 8001a7c:	d123      	bne.n	8001ac6 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	08da      	lsrs	r2, r3, #3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3208      	adds	r2, #8
 8001a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	220f      	movs	r2, #15
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	691a      	ldr	r2, [r3, #16]
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	08da      	lsrs	r2, r3, #3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3208      	adds	r2, #8
 8001ac0:	69b9      	ldr	r1, [r7, #24]
 8001ac2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4013      	ands	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 0203 	and.w	r2, r3, #3
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d00b      	beq.n	8001b1a <HAL_GPIO_Init+0xea>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d007      	beq.n	8001b1a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b0e:	2b11      	cmp	r3, #17
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b12      	cmp	r3, #18
 8001b18:	d130      	bne.n	8001b7c <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	2203      	movs	r2, #3
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b50:	2201      	movs	r2, #1
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	091b      	lsrs	r3, r3, #4
 8001b66:	f003 0201 	and.w	r2, r3, #1
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	2203      	movs	r2, #3
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 80be 	beq.w	8001d36 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bba:	4b65      	ldr	r3, [pc, #404]	; (8001d50 <HAL_GPIO_Init+0x320>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	4a64      	ldr	r2, [pc, #400]	; (8001d50 <HAL_GPIO_Init+0x320>)
 8001bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bc6:	4b62      	ldr	r3, [pc, #392]	; (8001d50 <HAL_GPIO_Init+0x320>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001bd2:	4a60      	ldr	r2, [pc, #384]	; (8001d54 <HAL_GPIO_Init+0x324>)
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	089b      	lsrs	r3, r3, #2
 8001bd8:	3302      	adds	r3, #2
 8001bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	220f      	movs	r2, #15
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a57      	ldr	r2, [pc, #348]	; (8001d58 <HAL_GPIO_Init+0x328>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d037      	beq.n	8001c6e <HAL_GPIO_Init+0x23e>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a56      	ldr	r2, [pc, #344]	; (8001d5c <HAL_GPIO_Init+0x32c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d031      	beq.n	8001c6a <HAL_GPIO_Init+0x23a>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a55      	ldr	r2, [pc, #340]	; (8001d60 <HAL_GPIO_Init+0x330>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d02b      	beq.n	8001c66 <HAL_GPIO_Init+0x236>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a54      	ldr	r2, [pc, #336]	; (8001d64 <HAL_GPIO_Init+0x334>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d025      	beq.n	8001c62 <HAL_GPIO_Init+0x232>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a53      	ldr	r2, [pc, #332]	; (8001d68 <HAL_GPIO_Init+0x338>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d01f      	beq.n	8001c5e <HAL_GPIO_Init+0x22e>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a52      	ldr	r2, [pc, #328]	; (8001d6c <HAL_GPIO_Init+0x33c>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d019      	beq.n	8001c5a <HAL_GPIO_Init+0x22a>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a51      	ldr	r2, [pc, #324]	; (8001d70 <HAL_GPIO_Init+0x340>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d013      	beq.n	8001c56 <HAL_GPIO_Init+0x226>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a50      	ldr	r2, [pc, #320]	; (8001d74 <HAL_GPIO_Init+0x344>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d00d      	beq.n	8001c52 <HAL_GPIO_Init+0x222>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a4f      	ldr	r2, [pc, #316]	; (8001d78 <HAL_GPIO_Init+0x348>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d007      	beq.n	8001c4e <HAL_GPIO_Init+0x21e>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a4e      	ldr	r2, [pc, #312]	; (8001d7c <HAL_GPIO_Init+0x34c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d101      	bne.n	8001c4a <HAL_GPIO_Init+0x21a>
 8001c46:	2309      	movs	r3, #9
 8001c48:	e012      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c4a:	230a      	movs	r3, #10
 8001c4c:	e010      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c4e:	2308      	movs	r3, #8
 8001c50:	e00e      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c52:	2307      	movs	r3, #7
 8001c54:	e00c      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c56:	2306      	movs	r3, #6
 8001c58:	e00a      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c5a:	2305      	movs	r3, #5
 8001c5c:	e008      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c5e:	2304      	movs	r3, #4
 8001c60:	e006      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c62:	2303      	movs	r3, #3
 8001c64:	e004      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c66:	2302      	movs	r3, #2
 8001c68:	e002      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c6e:	2300      	movs	r3, #0
 8001c70:	69fa      	ldr	r2, [r7, #28]
 8001c72:	f002 0203 	and.w	r2, r2, #3
 8001c76:	0092      	lsls	r2, r2, #2
 8001c78:	4093      	lsls	r3, r2
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c80:	4934      	ldr	r1, [pc, #208]	; (8001d54 <HAL_GPIO_Init+0x324>)
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	089b      	lsrs	r3, r3, #2
 8001c86:	3302      	adds	r3, #2
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c8e:	4b3c      	ldr	r3, [pc, #240]	; (8001d80 <HAL_GPIO_Init+0x350>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	43db      	mvns	r3, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cb2:	4a33      	ldr	r2, [pc, #204]	; (8001d80 <HAL_GPIO_Init+0x350>)
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cb8:	4b31      	ldr	r3, [pc, #196]	; (8001d80 <HAL_GPIO_Init+0x350>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cdc:	4a28      	ldr	r2, [pc, #160]	; (8001d80 <HAL_GPIO_Init+0x350>)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ce2:	4b27      	ldr	r3, [pc, #156]	; (8001d80 <HAL_GPIO_Init+0x350>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	43db      	mvns	r3, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d06:	4a1e      	ldr	r2, [pc, #120]	; (8001d80 <HAL_GPIO_Init+0x350>)
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d0c:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <HAL_GPIO_Init+0x350>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d30:	4a13      	ldr	r2, [pc, #76]	; (8001d80 <HAL_GPIO_Init+0x350>)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	61fb      	str	r3, [r7, #28]
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	2b0f      	cmp	r3, #15
 8001d40:	f67f ae86 	bls.w	8001a50 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d44:	bf00      	nop
 8001d46:	3724      	adds	r7, #36	; 0x24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40013800 	.word	0x40013800
 8001d58:	40020000 	.word	0x40020000
 8001d5c:	40020400 	.word	0x40020400
 8001d60:	40020800 	.word	0x40020800
 8001d64:	40020c00 	.word	0x40020c00
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	40021400 	.word	0x40021400
 8001d70:	40021800 	.word	0x40021800
 8001d74:	40021c00 	.word	0x40021c00
 8001d78:	40022000 	.word	0x40022000
 8001d7c:	40022400 	.word	0x40022400
 8001d80:	40013c00 	.word	0x40013c00

08001d84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691a      	ldr	r2, [r3, #16]
 8001d94:	887b      	ldrh	r3, [r7, #2]
 8001d96:	4013      	ands	r3, r2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d002      	beq.n	8001da2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	73fb      	strb	r3, [r7, #15]
 8001da0:	e001      	b.n	8001da6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001da2:	2300      	movs	r3, #0
 8001da4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	807b      	strh	r3, [r7, #2]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dc4:	787b      	ldrb	r3, [r7, #1]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dca:	887a      	ldrh	r2, [r7, #2]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001dd0:	e003      	b.n	8001dda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001dd2:	887b      	ldrh	r3, [r7, #2]
 8001dd4:	041a      	lsls	r2, r3, #16
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	619a      	str	r2, [r3, #24]
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001de6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001de8:	b08d      	sub	sp, #52	; 0x34
 8001dea:	af0a      	add	r7, sp, #40	; 0x28
 8001dec:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e048      	b.n	8001e8a <HAL_HCD_Init+0xa4>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d106      	bne.n	8001e12 <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f013 fb45 	bl	801549c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2203      	movs	r2, #3
 8001e16:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f007 ff5b 	bl	8009cda <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	603b      	str	r3, [r7, #0]
 8001e2a:	687e      	ldr	r6, [r7, #4]
 8001e2c:	466d      	mov	r5, sp
 8001e2e:	f106 0410 	add.w	r4, r6, #16
 8001e32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e3e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e42:	1d33      	adds	r3, r6, #4
 8001e44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e46:	6838      	ldr	r0, [r7, #0]
 8001e48:	f007 fede 	bl	8009c08 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2101      	movs	r1, #1
 8001e52:	4618      	mov	r0, r3
 8001e54:	f007 ff52 	bl	8009cfc <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	603b      	str	r3, [r7, #0]
 8001e5e:	687e      	ldr	r6, [r7, #4]
 8001e60:	466d      	mov	r5, sp
 8001e62:	f106 0410 	add.w	r4, r6, #16
 8001e66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e72:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e76:	1d33      	adds	r3, r6, #4
 8001e78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e7a:	6838      	ldr	r0, [r7, #0]
 8001e7c:	f008 f864 	bl	8009f48 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e92 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001e92:	b590      	push	{r4, r7, lr}
 8001e94:	b089      	sub	sp, #36	; 0x24
 8001e96:	af04      	add	r7, sp, #16
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	4608      	mov	r0, r1
 8001e9c:	4611      	mov	r1, r2
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	70fb      	strb	r3, [r7, #3]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	70bb      	strb	r3, [r7, #2]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d101      	bne.n	8001eba <HAL_HCD_HC_Init+0x28>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e07f      	b.n	8001fba <HAL_HCD_HC_Init+0x128>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001ec2:	78fa      	ldrb	r2, [r7, #3]
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	440b      	add	r3, r1
 8001ed0:	333d      	adds	r3, #61	; 0x3d
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001ed6:	78fa      	ldrb	r2, [r7, #3]
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	4613      	mov	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	440b      	add	r3, r1
 8001ee4:	3338      	adds	r3, #56	; 0x38
 8001ee6:	787a      	ldrb	r2, [r7, #1]
 8001ee8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001eea:	78fa      	ldrb	r2, [r7, #3]
 8001eec:	6879      	ldr	r1, [r7, #4]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	440b      	add	r3, r1
 8001ef8:	3340      	adds	r3, #64	; 0x40
 8001efa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001efc:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001efe:	78fa      	ldrb	r2, [r7, #3]
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	440b      	add	r3, r1
 8001f0c:	3339      	adds	r3, #57	; 0x39
 8001f0e:	78fa      	ldrb	r2, [r7, #3]
 8001f10:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001f12:	78fa      	ldrb	r2, [r7, #3]
 8001f14:	6879      	ldr	r1, [r7, #4]
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	440b      	add	r3, r1
 8001f20:	333f      	adds	r3, #63	; 0x3f
 8001f22:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001f26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001f28:	78fa      	ldrb	r2, [r7, #3]
 8001f2a:	78bb      	ldrb	r3, [r7, #2]
 8001f2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f30:	b2d8      	uxtb	r0, r3
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	4613      	mov	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	440b      	add	r3, r1
 8001f3e:	333a      	adds	r3, #58	; 0x3a
 8001f40:	4602      	mov	r2, r0
 8001f42:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001f44:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	da0a      	bge.n	8001f62 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001f4c:	78fa      	ldrb	r2, [r7, #3]
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	440b      	add	r3, r1
 8001f5a:	333b      	adds	r3, #59	; 0x3b
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	701a      	strb	r2, [r3, #0]
 8001f60:	e009      	b.n	8001f76 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001f62:	78fa      	ldrb	r2, [r7, #3]
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	440b      	add	r3, r1
 8001f70:	333b      	adds	r3, #59	; 0x3b
 8001f72:	2200      	movs	r2, #0
 8001f74:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001f76:	78fa      	ldrb	r2, [r7, #3]
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4413      	add	r3, r2
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	440b      	add	r3, r1
 8001f84:	333c      	adds	r3, #60	; 0x3c
 8001f86:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001f8a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6818      	ldr	r0, [r3, #0]
 8001f90:	787c      	ldrb	r4, [r7, #1]
 8001f92:	78ba      	ldrb	r2, [r7, #2]
 8001f94:	78f9      	ldrb	r1, [r7, #3]
 8001f96:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f98:	9302      	str	r3, [sp, #8]
 8001f9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001f9e:	9301      	str	r3, [sp, #4]
 8001fa0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	4623      	mov	r3, r4
 8001fa8:	f008 f944 	bl	800a234 <USB_HC_Init>
 8001fac:	4603      	mov	r3, r0
 8001fae:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd90      	pop	{r4, r7, pc}

08001fc2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b084      	sub	sp, #16
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	460b      	mov	r3, r1
 8001fcc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d101      	bne.n	8001fe0 <HAL_HCD_HC_Halt+0x1e>
 8001fdc:	2302      	movs	r3, #2
 8001fde:	e00f      	b.n	8002000 <HAL_HCD_HC_Halt+0x3e>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	78fa      	ldrb	r2, [r7, #3]
 8001fee:	4611      	mov	r1, r2
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f008 fb7e 	bl	800a6f2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3710      	adds	r7, #16
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	4608      	mov	r0, r1
 8002012:	4611      	mov	r1, r2
 8002014:	461a      	mov	r2, r3
 8002016:	4603      	mov	r3, r0
 8002018:	70fb      	strb	r3, [r7, #3]
 800201a:	460b      	mov	r3, r1
 800201c:	70bb      	strb	r3, [r7, #2]
 800201e:	4613      	mov	r3, r2
 8002020:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8002022:	78fa      	ldrb	r2, [r7, #3]
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	440b      	add	r3, r1
 8002030:	333b      	adds	r3, #59	; 0x3b
 8002032:	78ba      	ldrb	r2, [r7, #2]
 8002034:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002036:	78fa      	ldrb	r2, [r7, #3]
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	440b      	add	r3, r1
 8002044:	333f      	adds	r3, #63	; 0x3f
 8002046:	787a      	ldrb	r2, [r7, #1]
 8002048:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800204a:	7c3b      	ldrb	r3, [r7, #16]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10a      	bne.n	8002066 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002050:	78fa      	ldrb	r2, [r7, #3]
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	440b      	add	r3, r1
 800205e:	3342      	adds	r3, #66	; 0x42
 8002060:	2203      	movs	r2, #3
 8002062:	701a      	strb	r2, [r3, #0]
 8002064:	e009      	b.n	800207a <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002066:	78fa      	ldrb	r2, [r7, #3]
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	440b      	add	r3, r1
 8002074:	3342      	adds	r3, #66	; 0x42
 8002076:	2202      	movs	r2, #2
 8002078:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800207a:	787b      	ldrb	r3, [r7, #1]
 800207c:	2b03      	cmp	r3, #3
 800207e:	f200 80d6 	bhi.w	800222e <HAL_HCD_HC_SubmitRequest+0x226>
 8002082:	a201      	add	r2, pc, #4	; (adr r2, 8002088 <HAL_HCD_HC_SubmitRequest+0x80>)
 8002084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002088:	08002099 	.word	0x08002099
 800208c:	08002219 	.word	0x08002219
 8002090:	08002105 	.word	0x08002105
 8002094:	0800218f 	.word	0x0800218f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002098:	7c3b      	ldrb	r3, [r7, #16]
 800209a:	2b01      	cmp	r3, #1
 800209c:	f040 80c9 	bne.w	8002232 <HAL_HCD_HC_SubmitRequest+0x22a>
 80020a0:	78bb      	ldrb	r3, [r7, #2]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f040 80c5 	bne.w	8002232 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 80020a8:	8b3b      	ldrh	r3, [r7, #24]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d109      	bne.n	80020c2 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80020ae:	78fa      	ldrb	r2, [r7, #3]
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	440b      	add	r3, r1
 80020bc:	3351      	adds	r3, #81	; 0x51
 80020be:	2201      	movs	r2, #1
 80020c0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80020c2:	78fa      	ldrb	r2, [r7, #3]
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	440b      	add	r3, r1
 80020d0:	3351      	adds	r3, #81	; 0x51
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10a      	bne.n	80020ee <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020d8:	78fa      	ldrb	r2, [r7, #3]
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	440b      	add	r3, r1
 80020e6:	3342      	adds	r3, #66	; 0x42
 80020e8:	2200      	movs	r2, #0
 80020ea:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80020ec:	e0a1      	b.n	8002232 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020ee:	78fa      	ldrb	r2, [r7, #3]
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	440b      	add	r3, r1
 80020fc:	3342      	adds	r3, #66	; 0x42
 80020fe:	2202      	movs	r2, #2
 8002100:	701a      	strb	r2, [r3, #0]
      break;
 8002102:	e096      	b.n	8002232 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002104:	78bb      	ldrb	r3, [r7, #2]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d120      	bne.n	800214c <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800210a:	78fa      	ldrb	r2, [r7, #3]
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	4613      	mov	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	440b      	add	r3, r1
 8002118:	3351      	adds	r3, #81	; 0x51
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10a      	bne.n	8002136 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002120:	78fa      	ldrb	r2, [r7, #3]
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	440b      	add	r3, r1
 800212e:	3342      	adds	r3, #66	; 0x42
 8002130:	2200      	movs	r2, #0
 8002132:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002134:	e07e      	b.n	8002234 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002136:	78fa      	ldrb	r2, [r7, #3]
 8002138:	6879      	ldr	r1, [r7, #4]
 800213a:	4613      	mov	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	440b      	add	r3, r1
 8002144:	3342      	adds	r3, #66	; 0x42
 8002146:	2202      	movs	r2, #2
 8002148:	701a      	strb	r2, [r3, #0]
      break;
 800214a:	e073      	b.n	8002234 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800214c:	78fa      	ldrb	r2, [r7, #3]
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	440b      	add	r3, r1
 800215a:	3350      	adds	r3, #80	; 0x50
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10a      	bne.n	8002178 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002162:	78fa      	ldrb	r2, [r7, #3]
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	440b      	add	r3, r1
 8002170:	3342      	adds	r3, #66	; 0x42
 8002172:	2200      	movs	r2, #0
 8002174:	701a      	strb	r2, [r3, #0]
      break;
 8002176:	e05d      	b.n	8002234 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002178:	78fa      	ldrb	r2, [r7, #3]
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	440b      	add	r3, r1
 8002186:	3342      	adds	r3, #66	; 0x42
 8002188:	2202      	movs	r2, #2
 800218a:	701a      	strb	r2, [r3, #0]
      break;
 800218c:	e052      	b.n	8002234 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800218e:	78bb      	ldrb	r3, [r7, #2]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d120      	bne.n	80021d6 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002194:	78fa      	ldrb	r2, [r7, #3]
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	440b      	add	r3, r1
 80021a2:	3351      	adds	r3, #81	; 0x51
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10a      	bne.n	80021c0 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021aa:	78fa      	ldrb	r2, [r7, #3]
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	440b      	add	r3, r1
 80021b8:	3342      	adds	r3, #66	; 0x42
 80021ba:	2200      	movs	r2, #0
 80021bc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80021be:	e039      	b.n	8002234 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021c0:	78fa      	ldrb	r2, [r7, #3]
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	440b      	add	r3, r1
 80021ce:	3342      	adds	r3, #66	; 0x42
 80021d0:	2202      	movs	r2, #2
 80021d2:	701a      	strb	r2, [r3, #0]
      break;
 80021d4:	e02e      	b.n	8002234 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80021d6:	78fa      	ldrb	r2, [r7, #3]
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	440b      	add	r3, r1
 80021e4:	3350      	adds	r3, #80	; 0x50
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10a      	bne.n	8002202 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021ec:	78fa      	ldrb	r2, [r7, #3]
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	440b      	add	r3, r1
 80021fa:	3342      	adds	r3, #66	; 0x42
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]
      break;
 8002200:	e018      	b.n	8002234 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002202:	78fa      	ldrb	r2, [r7, #3]
 8002204:	6879      	ldr	r1, [r7, #4]
 8002206:	4613      	mov	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	440b      	add	r3, r1
 8002210:	3342      	adds	r3, #66	; 0x42
 8002212:	2202      	movs	r2, #2
 8002214:	701a      	strb	r2, [r3, #0]
      break;
 8002216:	e00d      	b.n	8002234 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002218:	78fa      	ldrb	r2, [r7, #3]
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	440b      	add	r3, r1
 8002226:	3342      	adds	r3, #66	; 0x42
 8002228:	2200      	movs	r2, #0
 800222a:	701a      	strb	r2, [r3, #0]
      break;
 800222c:	e002      	b.n	8002234 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 800222e:	bf00      	nop
 8002230:	e000      	b.n	8002234 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8002232:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002234:	78fa      	ldrb	r2, [r7, #3]
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	4613      	mov	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	440b      	add	r3, r1
 8002242:	3344      	adds	r3, #68	; 0x44
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002248:	78fa      	ldrb	r2, [r7, #3]
 800224a:	8b39      	ldrh	r1, [r7, #24]
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	4403      	add	r3, r0
 8002258:	3348      	adds	r3, #72	; 0x48
 800225a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800225c:	78fa      	ldrb	r2, [r7, #3]
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	4613      	mov	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	440b      	add	r3, r1
 800226a:	335c      	adds	r3, #92	; 0x5c
 800226c:	2200      	movs	r2, #0
 800226e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002270:	78fa      	ldrb	r2, [r7, #3]
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	440b      	add	r3, r1
 800227e:	334c      	adds	r3, #76	; 0x4c
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002284:	78fa      	ldrb	r2, [r7, #3]
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	440b      	add	r3, r1
 8002292:	3339      	adds	r3, #57	; 0x39
 8002294:	78fa      	ldrb	r2, [r7, #3]
 8002296:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002298:	78fa      	ldrb	r2, [r7, #3]
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	440b      	add	r3, r1
 80022a6:	335d      	adds	r3, #93	; 0x5d
 80022a8:	2200      	movs	r2, #0
 80022aa:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6818      	ldr	r0, [r3, #0]
 80022b0:	78fa      	ldrb	r2, [r7, #3]
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	3338      	adds	r3, #56	; 0x38
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	18d1      	adds	r1, r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	461a      	mov	r2, r3
 80022c8:	f008 f8be 	bl	800a448 <USB_HC_StartXfer>
 80022cc:	4603      	mov	r3, r0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop

080022d8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f007 fde7 	bl	8009ec2 <USB_GetMode>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	f040 80f1 	bne.w	80024de <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f007 fdcb 	bl	8009e9c <USB_ReadInterrupts>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 80e7 	beq.w	80024dc <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f007 fdc2 	bl	8009e9c <USB_ReadInterrupts>
 8002318:	4603      	mov	r3, r0
 800231a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800231e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002322:	d104      	bne.n	800232e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800232c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f007 fdb2 	bl	8009e9c <USB_ReadInterrupts>
 8002338:	4603      	mov	r3, r0
 800233a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800233e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002342:	d104      	bne.n	800234e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800234c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f007 fda2 	bl	8009e9c <USB_ReadInterrupts>
 8002358:	4603      	mov	r3, r0
 800235a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800235e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002362:	d104      	bne.n	800236e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800236c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f007 fd92 	bl	8009e9c <USB_ReadInterrupts>
 8002378:	4603      	mov	r3, r0
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b02      	cmp	r3, #2
 8002380:	d103      	bne.n	800238a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2202      	movs	r2, #2
 8002388:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f007 fd84 	bl	8009e9c <USB_ReadInterrupts>
 8002394:	4603      	mov	r3, r0
 8002396:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800239a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800239e:	d117      	bne.n	80023d0 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80023ae:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80023b2:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f013 f8e3 	bl	8015580 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2101      	movs	r1, #1
 80023c0:	4618      	mov	r0, r3
 80023c2:	f007 fe71 	bl	800a0a8 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80023ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f007 fd61 	bl	8009e9c <USB_ReadInterrupts>
 80023da:	4603      	mov	r3, r0
 80023dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023e4:	d102      	bne.n	80023ec <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f001 f8c8 	bl	800357c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f007 fd53 	bl	8009e9c <USB_ReadInterrupts>
 80023f6:	4603      	mov	r3, r0
 80023f8:	f003 0308 	and.w	r3, r3, #8
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	d106      	bne.n	800240e <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f013 f8a1 	bl	8015548 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2208      	movs	r2, #8
 800240c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f007 fd42 	bl	8009e9c <USB_ReadInterrupts>
 8002418:	4603      	mov	r3, r0
 800241a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002422:	d138      	bne.n	8002496 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f008 f951 	bl	800a6d0 <USB_HC_ReadInterrupt>
 800242e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	e025      	b.n	8002482 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f003 030f 	and.w	r3, r3, #15
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	fa22 f303 	lsr.w	r3, r2, r3
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d018      	beq.n	800247c <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	015a      	lsls	r2, r3, #5
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4413      	add	r3, r2
 8002452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800245c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002460:	d106      	bne.n	8002470 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	b2db      	uxtb	r3, r3
 8002466:	4619      	mov	r1, r3
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 f8cf 	bl	800260c <HCD_HC_IN_IRQHandler>
 800246e:	e005      	b.n	800247c <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	b2db      	uxtb	r3, r3
 8002474:	4619      	mov	r1, r3
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 fc5f 	bl	8002d3a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	3301      	adds	r3, #1
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	429a      	cmp	r2, r3
 800248a:	d3d4      	bcc.n	8002436 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002494:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f007 fcfe 	bl	8009e9c <USB_ReadInterrupts>
 80024a0:	4603      	mov	r3, r0
 80024a2:	f003 0310 	and.w	r3, r3, #16
 80024a6:	2b10      	cmp	r3, #16
 80024a8:	d101      	bne.n	80024ae <HAL_HCD_IRQHandler+0x1d6>
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <HAL_HCD_IRQHandler+0x1d8>
 80024ae:	2300      	movs	r3, #0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d014      	beq.n	80024de <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	699a      	ldr	r2, [r3, #24]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0210 	bic.w	r2, r2, #16
 80024c2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 ffad 	bl	8003424 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	699a      	ldr	r2, [r3, #24]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f042 0210 	orr.w	r2, r2, #16
 80024d8:	619a      	str	r2, [r3, #24]
 80024da:	e000      	b.n	80024de <HAL_HCD_IRQHandler+0x206>
      return;
 80024dc:	bf00      	nop
    }
  }
}
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d101      	bne.n	80024fa <HAL_HCD_Start+0x16>
 80024f6:	2302      	movs	r3, #2
 80024f8:	e013      	b.n	8002522 <HAL_HCD_Start+0x3e>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f007 fbd6 	bl	8009cb8 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2101      	movs	r1, #1
 8002512:	4618      	mov	r0, r3
 8002514:	f007 fe2c 	bl	800a170 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002538:	2b01      	cmp	r3, #1
 800253a:	d101      	bne.n	8002540 <HAL_HCD_Stop+0x16>
 800253c:	2302      	movs	r3, #2
 800253e:	e00d      	b.n	800255c <HAL_HCD_Stop+0x32>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f008 fa0b 	bl	800a968 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f007 fdd3 	bl	800a11c <USB_ResetPort>
 8002576:	4603      	mov	r3, r0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800258c:	78fa      	ldrb	r2, [r7, #3]
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	440b      	add	r3, r1
 800259a:	335c      	adds	r3, #92	; 0x5c
 800259c:	781b      	ldrb	r3, [r3, #0]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
 80025b2:	460b      	mov	r3, r1
 80025b4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80025b6:	78fa      	ldrb	r2, [r7, #3]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	440b      	add	r3, r1
 80025c4:	334c      	adds	r3, #76	; 0x4c
 80025c6:	681b      	ldr	r3, [r3, #0]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f007 fe15 	bl	800a210 <USB_GetCurrentFrame>
 80025e6:	4603      	mov	r3, r0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f007 fdf0 	bl	800a1e2 <USB_GetHostSpeed>
 8002602:	4603      	mov	r3, r0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	460b      	mov	r3, r1
 8002616:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002622:	78fb      	ldrb	r3, [r7, #3]
 8002624:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	015a      	lsls	r2, r3, #5
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	4413      	add	r3, r2
 800262e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b04      	cmp	r3, #4
 800263a:	d119      	bne.n	8002670 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	015a      	lsls	r2, r3, #5
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	4413      	add	r3, r2
 8002644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002648:	461a      	mov	r2, r3
 800264a:	2304      	movs	r3, #4
 800264c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	015a      	lsls	r2, r3, #5
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4413      	add	r3, r2
 8002656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	0151      	lsls	r1, r2, #5
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	440a      	add	r2, r1
 8002664:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002668:	f043 0302 	orr.w	r3, r3, #2
 800266c:	60d3      	str	r3, [r2, #12]
 800266e:	e095      	b.n	800279c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4413      	add	r3, r2
 8002678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 0320 	and.w	r3, r3, #32
 8002682:	2b20      	cmp	r3, #32
 8002684:	d109      	bne.n	800269a <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	015a      	lsls	r2, r3, #5
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4413      	add	r3, r2
 800268e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002692:	461a      	mov	r2, r3
 8002694:	2320      	movs	r3, #32
 8002696:	6093      	str	r3, [r2, #8]
 8002698:	e080      	b.n	800279c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	015a      	lsls	r2, r3, #5
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	4413      	add	r3, r2
 80026a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 0308 	and.w	r3, r3, #8
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	d134      	bne.n	800271a <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	0151      	lsls	r1, r2, #5
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	440a      	add	r2, r1
 80026c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026ca:	f043 0302 	orr.w	r3, r3, #2
 80026ce:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	4613      	mov	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	4413      	add	r3, r2
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	440b      	add	r3, r1
 80026de:	335d      	adds	r3, #93	; 0x5d
 80026e0:	2205      	movs	r2, #5
 80026e2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	015a      	lsls	r2, r3, #5
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f0:	461a      	mov	r2, r3
 80026f2:	2310      	movs	r3, #16
 80026f4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	015a      	lsls	r2, r3, #5
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	4413      	add	r3, r2
 80026fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002702:	461a      	mov	r2, r3
 8002704:	2308      	movs	r3, #8
 8002706:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	4611      	mov	r1, r2
 8002712:	4618      	mov	r0, r3
 8002714:	f007 ffed 	bl	800a6f2 <USB_HC_Halt>
 8002718:	e040      	b.n	800279c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	015a      	lsls	r2, r3, #5
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	4413      	add	r3, r2
 8002722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800272c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002730:	d134      	bne.n	800279c <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	015a      	lsls	r2, r3, #5
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	4413      	add	r3, r2
 800273a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	0151      	lsls	r1, r2, #5
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	440a      	add	r2, r1
 8002748:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800274c:	f043 0302 	orr.w	r3, r3, #2
 8002750:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	4611      	mov	r1, r2
 800275c:	4618      	mov	r0, r3
 800275e:	f007 ffc8 	bl	800a6f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	015a      	lsls	r2, r3, #5
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	4413      	add	r3, r2
 800276a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276e:	461a      	mov	r2, r3
 8002770:	2310      	movs	r3, #16
 8002772:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	4613      	mov	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	440b      	add	r3, r1
 8002782:	335d      	adds	r3, #93	; 0x5d
 8002784:	2208      	movs	r2, #8
 8002786:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	015a      	lsls	r2, r3, #5
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	4413      	add	r3, r2
 8002790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002794:	461a      	mov	r2, r3
 8002796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800279a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	015a      	lsls	r2, r3, #5
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	4413      	add	r3, r2
 80027a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027b2:	d122      	bne.n	80027fa <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	015a      	lsls	r2, r3, #5
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	0151      	lsls	r1, r2, #5
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	440a      	add	r2, r1
 80027ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027ce:	f043 0302 	orr.w	r3, r3, #2
 80027d2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	4611      	mov	r1, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	f007 ff87 	bl	800a6f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	015a      	lsls	r2, r3, #5
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	4413      	add	r3, r2
 80027ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f0:	461a      	mov	r2, r3
 80027f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027f6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80027f8:	e29b      	b.n	8002d32 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	015a      	lsls	r2, r3, #5
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	4413      	add	r3, r2
 8002802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b01      	cmp	r3, #1
 800280e:	f040 80c1 	bne.w	8002994 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d01b      	beq.n	8002852 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	4613      	mov	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	440b      	add	r3, r1
 8002828:	3348      	adds	r3, #72	; 0x48
 800282a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	0159      	lsls	r1, r3, #5
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	440b      	add	r3, r1
 8002834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800283e:	1ad1      	subs	r1, r2, r3
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	4403      	add	r3, r0
 800284e:	334c      	adds	r3, #76	; 0x4c
 8002850:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	440b      	add	r3, r1
 8002860:	335d      	adds	r3, #93	; 0x5d
 8002862:	2201      	movs	r2, #1
 8002864:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	4613      	mov	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	440b      	add	r3, r1
 8002874:	3358      	adds	r3, #88	; 0x58
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	015a      	lsls	r2, r3, #5
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4413      	add	r3, r2
 8002882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002886:	461a      	mov	r2, r3
 8002888:	2301      	movs	r3, #1
 800288a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800288c:	6879      	ldr	r1, [r7, #4]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	440b      	add	r3, r1
 800289a:	333f      	adds	r3, #63	; 0x3f
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00a      	beq.n	80028b8 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	4613      	mov	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	440b      	add	r3, r1
 80028b0:	333f      	adds	r3, #63	; 0x3f
 80028b2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d121      	bne.n	80028fc <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	015a      	lsls	r2, r3, #5
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	4413      	add	r3, r2
 80028c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	0151      	lsls	r1, r2, #5
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	440a      	add	r2, r1
 80028ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028d2:	f043 0302 	orr.w	r3, r3, #2
 80028d6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	4611      	mov	r1, r2
 80028e2:	4618      	mov	r0, r3
 80028e4:	f007 ff05 	bl	800a6f2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	015a      	lsls	r2, r3, #5
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	4413      	add	r3, r2
 80028f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f4:	461a      	mov	r2, r3
 80028f6:	2310      	movs	r3, #16
 80028f8:	6093      	str	r3, [r2, #8]
 80028fa:	e034      	b.n	8002966 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	4613      	mov	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	440b      	add	r3, r1
 800290a:	333f      	adds	r3, #63	; 0x3f
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b03      	cmp	r3, #3
 8002910:	d129      	bne.n	8002966 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	015a      	lsls	r2, r3, #5
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	4413      	add	r3, r2
 800291a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	0151      	lsls	r1, r2, #5
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	440a      	add	r2, r1
 8002928:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800292c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002930:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	4613      	mov	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	440b      	add	r3, r1
 8002940:	335c      	adds	r3, #92	; 0x5c
 8002942:	2201      	movs	r2, #1
 8002944:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	b2d8      	uxtb	r0, r3
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	4613      	mov	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	440b      	add	r3, r1
 8002958:	335c      	adds	r3, #92	; 0x5c
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	4601      	mov	r1, r0
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f012 fe1b 	bl	801559c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4613      	mov	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	440b      	add	r3, r1
 8002974:	3350      	adds	r3, #80	; 0x50
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	f083 0301 	eor.w	r3, r3, #1
 800297c:	b2d8      	uxtb	r0, r3
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	4613      	mov	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	440b      	add	r3, r1
 800298c:	3350      	adds	r3, #80	; 0x50
 800298e:	4602      	mov	r2, r0
 8002990:	701a      	strb	r2, [r3, #0]
}
 8002992:	e1ce      	b.n	8002d32 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	015a      	lsls	r2, r3, #5
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	4413      	add	r3, r2
 800299c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	f040 80f1 	bne.w	8002b8e <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	015a      	lsls	r2, r3, #5
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	4413      	add	r3, r2
 80029b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	0151      	lsls	r1, r2, #5
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	440a      	add	r2, r1
 80029c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029c6:	f023 0302 	bic.w	r3, r3, #2
 80029ca:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	4613      	mov	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	440b      	add	r3, r1
 80029da:	335d      	adds	r3, #93	; 0x5d
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d10a      	bne.n	80029f8 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	440b      	add	r3, r1
 80029f0:	335c      	adds	r3, #92	; 0x5c
 80029f2:	2201      	movs	r2, #1
 80029f4:	701a      	strb	r2, [r3, #0]
 80029f6:	e0b0      	b.n	8002b5a <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	4613      	mov	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	440b      	add	r3, r1
 8002a06:	335d      	adds	r3, #93	; 0x5d
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b05      	cmp	r3, #5
 8002a0c:	d10a      	bne.n	8002a24 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	4613      	mov	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	440b      	add	r3, r1
 8002a1c:	335c      	adds	r3, #92	; 0x5c
 8002a1e:	2205      	movs	r2, #5
 8002a20:	701a      	strb	r2, [r3, #0]
 8002a22:	e09a      	b.n	8002b5a <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	440b      	add	r3, r1
 8002a32:	335d      	adds	r3, #93	; 0x5d
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b06      	cmp	r3, #6
 8002a38:	d00a      	beq.n	8002a50 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	440b      	add	r3, r1
 8002a48:	335d      	adds	r3, #93	; 0x5d
 8002a4a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d156      	bne.n	8002afe <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	440b      	add	r3, r1
 8002a5e:	3358      	adds	r3, #88	; 0x58
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	1c59      	adds	r1, r3, #1
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	4403      	add	r3, r0
 8002a72:	3358      	adds	r3, #88	; 0x58
 8002a74:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4413      	add	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	440b      	add	r3, r1
 8002a84:	3358      	adds	r3, #88	; 0x58
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	d914      	bls.n	8002ab6 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	440b      	add	r3, r1
 8002a9a:	3358      	adds	r3, #88	; 0x58
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	440b      	add	r3, r1
 8002aae:	335c      	adds	r3, #92	; 0x5c
 8002ab0:	2204      	movs	r2, #4
 8002ab2:	701a      	strb	r2, [r3, #0]
 8002ab4:	e009      	b.n	8002aca <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	4613      	mov	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4413      	add	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	440b      	add	r3, r1
 8002ac4:	335c      	adds	r3, #92	; 0x5c
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	015a      	lsls	r2, r3, #5
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ae0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ae8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	015a      	lsls	r2, r3, #5
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	4413      	add	r3, r2
 8002af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af6:	461a      	mov	r2, r3
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	6013      	str	r3, [r2, #0]
 8002afc:	e02d      	b.n	8002b5a <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	4613      	mov	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	440b      	add	r3, r1
 8002b0c:	335d      	adds	r3, #93	; 0x5d
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d122      	bne.n	8002b5a <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	440b      	add	r3, r1
 8002b22:	335c      	adds	r3, #92	; 0x5c
 8002b24:	2202      	movs	r2, #2
 8002b26:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	015a      	lsls	r2, r3, #5
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	4413      	add	r3, r2
 8002b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b3e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b46:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	015a      	lsls	r2, r3, #5
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b54:	461a      	mov	r2, r3
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	015a      	lsls	r2, r3, #5
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	4413      	add	r3, r2
 8002b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b66:	461a      	mov	r2, r3
 8002b68:	2302      	movs	r3, #2
 8002b6a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	b2d8      	uxtb	r0, r3
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	4613      	mov	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	440b      	add	r3, r1
 8002b7e:	335c      	adds	r3, #92	; 0x5c
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	461a      	mov	r2, r3
 8002b84:	4601      	mov	r1, r0
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f012 fd08 	bl	801559c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b8c:	e0d1      	b.n	8002d32 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	015a      	lsls	r2, r3, #5
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	4413      	add	r3, r2
 8002b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba0:	2b80      	cmp	r3, #128	; 0x80
 8002ba2:	d13e      	bne.n	8002c22 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	015a      	lsls	r2, r3, #5
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	4413      	add	r3, r2
 8002bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	0151      	lsls	r1, r2, #5
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	440a      	add	r2, r1
 8002bba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bbe:	f043 0302 	orr.w	r3, r3, #2
 8002bc2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	440b      	add	r3, r1
 8002bd2:	3358      	adds	r3, #88	; 0x58
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	1c59      	adds	r1, r3, #1
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	4403      	add	r3, r0
 8002be6:	3358      	adds	r3, #88	; 0x58
 8002be8:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	440b      	add	r3, r1
 8002bf8:	335d      	adds	r3, #93	; 0x5d
 8002bfa:	2206      	movs	r2, #6
 8002bfc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	4611      	mov	r1, r2
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f007 fd72 	bl	800a6f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	015a      	lsls	r2, r3, #5
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	4413      	add	r3, r2
 8002c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	2380      	movs	r3, #128	; 0x80
 8002c1e:	6093      	str	r3, [r2, #8]
}
 8002c20:	e087      	b.n	8002d32 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	015a      	lsls	r2, r3, #5
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	4413      	add	r3, r2
 8002c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 0310 	and.w	r3, r3, #16
 8002c34:	2b10      	cmp	r3, #16
 8002c36:	d17c      	bne.n	8002d32 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	440b      	add	r3, r1
 8002c46:	333f      	adds	r3, #63	; 0x3f
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b03      	cmp	r3, #3
 8002c4c:	d122      	bne.n	8002c94 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	4613      	mov	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	440b      	add	r3, r1
 8002c5c:	3358      	adds	r3, #88	; 0x58
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	015a      	lsls	r2, r3, #5
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	4413      	add	r3, r2
 8002c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	0151      	lsls	r1, r2, #5
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	440a      	add	r2, r1
 8002c78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c7c:	f043 0302 	orr.w	r3, r3, #2
 8002c80:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	b2d2      	uxtb	r2, r2
 8002c8a:	4611      	mov	r1, r2
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f007 fd30 	bl	800a6f2 <USB_HC_Halt>
 8002c92:	e045      	b.n	8002d20 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	440b      	add	r3, r1
 8002ca2:	333f      	adds	r3, #63	; 0x3f
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00a      	beq.n	8002cc0 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	440b      	add	r3, r1
 8002cb8:	333f      	adds	r3, #63	; 0x3f
 8002cba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d12f      	bne.n	8002d20 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	440b      	add	r3, r1
 8002cce:	3358      	adds	r3, #88	; 0x58
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d121      	bne.n	8002d20 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	440b      	add	r3, r1
 8002cea:	335d      	adds	r3, #93	; 0x5d
 8002cec:	2203      	movs	r2, #3
 8002cee:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	015a      	lsls	r2, r3, #5
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	0151      	lsls	r1, r2, #5
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	440a      	add	r2, r1
 8002d06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d0a:	f043 0302 	orr.w	r3, r3, #2
 8002d0e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	4611      	mov	r1, r2
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f007 fce9 	bl	800a6f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	015a      	lsls	r2, r3, #5
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	4413      	add	r3, r2
 8002d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	2310      	movs	r3, #16
 8002d30:	6093      	str	r3, [r2, #8]
}
 8002d32:	bf00      	nop
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b086      	sub	sp, #24
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
 8002d42:	460b      	mov	r3, r1
 8002d44:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002d50:	78fb      	ldrb	r3, [r7, #3]
 8002d52:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	015a      	lsls	r2, r3, #5
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 0304 	and.w	r3, r3, #4
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d119      	bne.n	8002d9e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	015a      	lsls	r2, r3, #5
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	4413      	add	r3, r2
 8002d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d76:	461a      	mov	r2, r3
 8002d78:	2304      	movs	r3, #4
 8002d7a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	015a      	lsls	r2, r3, #5
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	4413      	add	r3, r2
 8002d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	0151      	lsls	r1, r2, #5
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	440a      	add	r2, r1
 8002d92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d96:	f043 0302 	orr.w	r3, r3, #2
 8002d9a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002d9c:	e33e      	b.n	800341c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	015a      	lsls	r2, r3, #5
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4413      	add	r3, r2
 8002da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 0320 	and.w	r3, r3, #32
 8002db0:	2b20      	cmp	r3, #32
 8002db2:	d141      	bne.n	8002e38 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	015a      	lsls	r2, r3, #5
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	2320      	movs	r3, #32
 8002dc4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	440b      	add	r3, r1
 8002dd4:	333d      	adds	r3, #61	; 0x3d
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	f040 831f 	bne.w	800341c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	4613      	mov	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	440b      	add	r3, r1
 8002dec:	333d      	adds	r3, #61	; 0x3d
 8002dee:	2200      	movs	r2, #0
 8002df0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	4613      	mov	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	440b      	add	r3, r1
 8002e00:	335c      	adds	r3, #92	; 0x5c
 8002e02:	2202      	movs	r2, #2
 8002e04:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	015a      	lsls	r2, r3, #5
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	0151      	lsls	r1, r2, #5
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	440a      	add	r2, r1
 8002e1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e20:	f043 0302 	orr.w	r3, r3, #2
 8002e24:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	b2d2      	uxtb	r2, r2
 8002e2e:	4611      	mov	r1, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f007 fc5e 	bl	800a6f2 <USB_HC_Halt>
}
 8002e36:	e2f1      	b.n	800341c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	015a      	lsls	r2, r3, #5
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	4413      	add	r3, r2
 8002e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4a:	2b40      	cmp	r3, #64	; 0x40
 8002e4c:	d13f      	bne.n	8002ece <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	4613      	mov	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4413      	add	r3, r2
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	440b      	add	r3, r1
 8002e5c:	335d      	adds	r3, #93	; 0x5d
 8002e5e:	2204      	movs	r2, #4
 8002e60:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4613      	mov	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	440b      	add	r3, r1
 8002e70:	333d      	adds	r3, #61	; 0x3d
 8002e72:	2201      	movs	r2, #1
 8002e74:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	440b      	add	r3, r1
 8002e84:	3358      	adds	r3, #88	; 0x58
 8002e86:	2200      	movs	r2, #0
 8002e88:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	015a      	lsls	r2, r3, #5
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	0151      	lsls	r1, r2, #5
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	440a      	add	r2, r1
 8002ea0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ea4:	f043 0302 	orr.w	r3, r3, #2
 8002ea8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f007 fc1c 	bl	800a6f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	2340      	movs	r3, #64	; 0x40
 8002eca:	6093      	str	r3, [r2, #8]
}
 8002ecc:	e2a6      	b.n	800341c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	015a      	lsls	r2, r3, #5
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ee4:	d122      	bne.n	8002f2c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	015a      	lsls	r2, r3, #5
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	4413      	add	r3, r2
 8002eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	0151      	lsls	r1, r2, #5
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	440a      	add	r2, r1
 8002efc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f00:	f043 0302 	orr.w	r3, r3, #2
 8002f04:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	b2d2      	uxtb	r2, r2
 8002f0e:	4611      	mov	r1, r2
 8002f10:	4618      	mov	r0, r3
 8002f12:	f007 fbee 	bl	800a6f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	015a      	lsls	r2, r3, #5
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f22:	461a      	mov	r2, r3
 8002f24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f28:	6093      	str	r3, [r2, #8]
}
 8002f2a:	e277      	b.n	800341c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	015a      	lsls	r2, r3, #5
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	4413      	add	r3, r2
 8002f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d135      	bne.n	8002fae <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	4613      	mov	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	440b      	add	r3, r1
 8002f50:	3358      	adds	r3, #88	; 0x58
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	015a      	lsls	r2, r3, #5
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	0151      	lsls	r1, r2, #5
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	440a      	add	r2, r1
 8002f6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f70:	f043 0302 	orr.w	r3, r3, #2
 8002f74:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	b2d2      	uxtb	r2, r2
 8002f7e:	4611      	mov	r1, r2
 8002f80:	4618      	mov	r0, r3
 8002f82:	f007 fbb6 	bl	800a6f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	015a      	lsls	r2, r3, #5
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f92:	461a      	mov	r2, r3
 8002f94:	2301      	movs	r3, #1
 8002f96:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	440b      	add	r3, r1
 8002fa6:	335d      	adds	r3, #93	; 0x5d
 8002fa8:	2201      	movs	r2, #1
 8002faa:	701a      	strb	r2, [r3, #0]
}
 8002fac:	e236      	b.n	800341c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	015a      	lsls	r2, r3, #5
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f003 0308 	and.w	r3, r3, #8
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d12b      	bne.n	800301c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	2308      	movs	r3, #8
 8002fd4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	015a      	lsls	r2, r3, #5
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	4413      	add	r3, r2
 8002fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	0151      	lsls	r1, r2, #5
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	440a      	add	r2, r1
 8002fec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ff0:	f043 0302 	orr.w	r3, r3, #2
 8002ff4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	b2d2      	uxtb	r2, r2
 8002ffe:	4611      	mov	r1, r2
 8003000:	4618      	mov	r0, r3
 8003002:	f007 fb76 	bl	800a6f2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	4613      	mov	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	440b      	add	r3, r1
 8003014:	335d      	adds	r3, #93	; 0x5d
 8003016:	2205      	movs	r2, #5
 8003018:	701a      	strb	r2, [r3, #0]
}
 800301a:	e1ff      	b.n	800341c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	015a      	lsls	r2, r3, #5
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	4413      	add	r3, r2
 8003024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 0310 	and.w	r3, r3, #16
 800302e:	2b10      	cmp	r3, #16
 8003030:	d155      	bne.n	80030de <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	4613      	mov	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	440b      	add	r3, r1
 8003040:	3358      	adds	r3, #88	; 0x58
 8003042:	2200      	movs	r2, #0
 8003044:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	440b      	add	r3, r1
 8003054:	335d      	adds	r3, #93	; 0x5d
 8003056:	2203      	movs	r2, #3
 8003058:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	4613      	mov	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	440b      	add	r3, r1
 8003068:	333d      	adds	r3, #61	; 0x3d
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d114      	bne.n	800309a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	4613      	mov	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4413      	add	r3, r2
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	440b      	add	r3, r1
 800307e:	333c      	adds	r3, #60	; 0x3c
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d109      	bne.n	800309a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	4613      	mov	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	440b      	add	r3, r1
 8003094:	333d      	adds	r3, #61	; 0x3d
 8003096:	2201      	movs	r2, #1
 8003098:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	015a      	lsls	r2, r3, #5
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	4413      	add	r3, r2
 80030a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	0151      	lsls	r1, r2, #5
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	440a      	add	r2, r1
 80030b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030b4:	f043 0302 	orr.w	r3, r3, #2
 80030b8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	b2d2      	uxtb	r2, r2
 80030c2:	4611      	mov	r1, r2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f007 fb14 	bl	800a6f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	015a      	lsls	r2, r3, #5
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	4413      	add	r3, r2
 80030d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d6:	461a      	mov	r2, r3
 80030d8:	2310      	movs	r3, #16
 80030da:	6093      	str	r3, [r2, #8]
}
 80030dc:	e19e      	b.n	800341c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	015a      	lsls	r2, r3, #5
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	4413      	add	r3, r2
 80030e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f0:	2b80      	cmp	r3, #128	; 0x80
 80030f2:	d12b      	bne.n	800314c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	015a      	lsls	r2, r3, #5
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	4413      	add	r3, r2
 80030fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	0151      	lsls	r1, r2, #5
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	440a      	add	r2, r1
 800310a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800310e:	f043 0302 	orr.w	r3, r3, #2
 8003112:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	4611      	mov	r1, r2
 800311e:	4618      	mov	r0, r3
 8003120:	f007 fae7 	bl	800a6f2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	4613      	mov	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	440b      	add	r3, r1
 8003132:	335d      	adds	r3, #93	; 0x5d
 8003134:	2206      	movs	r2, #6
 8003136:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	015a      	lsls	r2, r3, #5
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	4413      	add	r3, r2
 8003140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003144:	461a      	mov	r2, r3
 8003146:	2380      	movs	r3, #128	; 0x80
 8003148:	6093      	str	r3, [r2, #8]
}
 800314a:	e167      	b.n	800341c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	015a      	lsls	r2, r3, #5
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	4413      	add	r3, r2
 8003154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003162:	d135      	bne.n	80031d0 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	015a      	lsls	r2, r3, #5
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	4413      	add	r3, r2
 800316c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	0151      	lsls	r1, r2, #5
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	440a      	add	r2, r1
 800317a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800317e:	f043 0302 	orr.w	r3, r3, #2
 8003182:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	4611      	mov	r1, r2
 800318e:	4618      	mov	r0, r3
 8003190:	f007 faaf 	bl	800a6f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	015a      	lsls	r2, r3, #5
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	4413      	add	r3, r2
 800319c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a0:	461a      	mov	r2, r3
 80031a2:	2310      	movs	r3, #16
 80031a4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	015a      	lsls	r2, r3, #5
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	4413      	add	r3, r2
 80031ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b2:	461a      	mov	r2, r3
 80031b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	4613      	mov	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4413      	add	r3, r2
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	440b      	add	r3, r1
 80031c8:	335d      	adds	r3, #93	; 0x5d
 80031ca:	2208      	movs	r2, #8
 80031cc:	701a      	strb	r2, [r3, #0]
}
 80031ce:	e125      	b.n	800341c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	015a      	lsls	r2, r3, #5
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	4413      	add	r3, r2
 80031d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	f040 811a 	bne.w	800341c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	015a      	lsls	r2, r3, #5
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	4413      	add	r3, r2
 80031f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	0151      	lsls	r1, r2, #5
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	440a      	add	r2, r1
 80031fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003202:	f023 0302 	bic.w	r3, r3, #2
 8003206:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	440b      	add	r3, r1
 8003216:	335d      	adds	r3, #93	; 0x5d
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d137      	bne.n	800328e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	4613      	mov	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	440b      	add	r3, r1
 800322c:	335c      	adds	r3, #92	; 0x5c
 800322e:	2201      	movs	r2, #1
 8003230:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003232:	6879      	ldr	r1, [r7, #4]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	4613      	mov	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	440b      	add	r3, r1
 8003240:	333f      	adds	r3, #63	; 0x3f
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	2b02      	cmp	r3, #2
 8003246:	d00b      	beq.n	8003260 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	440b      	add	r3, r1
 8003256:	333f      	adds	r3, #63	; 0x3f
 8003258:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800325a:	2b03      	cmp	r3, #3
 800325c:	f040 80c5 	bne.w	80033ea <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	4613      	mov	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	440b      	add	r3, r1
 800326e:	3351      	adds	r3, #81	; 0x51
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	f083 0301 	eor.w	r3, r3, #1
 8003276:	b2d8      	uxtb	r0, r3
 8003278:	6879      	ldr	r1, [r7, #4]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	4613      	mov	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	440b      	add	r3, r1
 8003286:	3351      	adds	r3, #81	; 0x51
 8003288:	4602      	mov	r2, r0
 800328a:	701a      	strb	r2, [r3, #0]
 800328c:	e0ad      	b.n	80033ea <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	4613      	mov	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	00db      	lsls	r3, r3, #3
 800329a:	440b      	add	r3, r1
 800329c:	335d      	adds	r3, #93	; 0x5d
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	d10a      	bne.n	80032ba <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	4613      	mov	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	440b      	add	r3, r1
 80032b2:	335c      	adds	r3, #92	; 0x5c
 80032b4:	2202      	movs	r2, #2
 80032b6:	701a      	strb	r2, [r3, #0]
 80032b8:	e097      	b.n	80033ea <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	4613      	mov	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	440b      	add	r3, r1
 80032c8:	335d      	adds	r3, #93	; 0x5d
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d10a      	bne.n	80032e6 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	4613      	mov	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	440b      	add	r3, r1
 80032de:	335c      	adds	r3, #92	; 0x5c
 80032e0:	2202      	movs	r2, #2
 80032e2:	701a      	strb	r2, [r3, #0]
 80032e4:	e081      	b.n	80033ea <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	440b      	add	r3, r1
 80032f4:	335d      	adds	r3, #93	; 0x5d
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b05      	cmp	r3, #5
 80032fa:	d10a      	bne.n	8003312 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4613      	mov	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	440b      	add	r3, r1
 800330a:	335c      	adds	r3, #92	; 0x5c
 800330c:	2205      	movs	r2, #5
 800330e:	701a      	strb	r2, [r3, #0]
 8003310:	e06b      	b.n	80033ea <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	440b      	add	r3, r1
 8003320:	335d      	adds	r3, #93	; 0x5d
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2b06      	cmp	r3, #6
 8003326:	d00a      	beq.n	800333e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4613      	mov	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	440b      	add	r3, r1
 8003336:	335d      	adds	r3, #93	; 0x5d
 8003338:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800333a:	2b08      	cmp	r3, #8
 800333c:	d155      	bne.n	80033ea <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	4613      	mov	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	440b      	add	r3, r1
 800334c:	3358      	adds	r3, #88	; 0x58
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	1c59      	adds	r1, r3, #1
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	4613      	mov	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	4403      	add	r3, r0
 8003360:	3358      	adds	r3, #88	; 0x58
 8003362:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4613      	mov	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	440b      	add	r3, r1
 8003372:	3358      	adds	r3, #88	; 0x58
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b03      	cmp	r3, #3
 8003378:	d914      	bls.n	80033a4 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	440b      	add	r3, r1
 8003388:	3358      	adds	r3, #88	; 0x58
 800338a:	2200      	movs	r2, #0
 800338c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	4613      	mov	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	440b      	add	r3, r1
 800339c:	335c      	adds	r3, #92	; 0x5c
 800339e:	2204      	movs	r2, #4
 80033a0:	701a      	strb	r2, [r3, #0]
 80033a2:	e009      	b.n	80033b8 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	4613      	mov	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4413      	add	r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	440b      	add	r3, r1
 80033b2:	335c      	adds	r3, #92	; 0x5c
 80033b4:	2202      	movs	r2, #2
 80033b6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	015a      	lsls	r2, r3, #5
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	4413      	add	r3, r2
 80033c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033ce:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033d6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	015a      	lsls	r2, r3, #5
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e4:	461a      	mov	r2, r3
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	015a      	lsls	r2, r3, #5
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f6:	461a      	mov	r2, r3
 80033f8:	2302      	movs	r3, #2
 80033fa:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	b2d8      	uxtb	r0, r3
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	4613      	mov	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	4413      	add	r3, r2
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	440b      	add	r3, r1
 800340e:	335c      	adds	r3, #92	; 0x5c
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	461a      	mov	r2, r3
 8003414:	4601      	mov	r1, r0
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f012 f8c0 	bl	801559c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800341c:	bf00      	nop
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b08a      	sub	sp, #40	; 0x28
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	f003 030f 	and.w	r3, r3, #15
 8003444:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	0c5b      	lsrs	r3, r3, #17
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	091b      	lsrs	r3, r3, #4
 8003454:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003458:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2b02      	cmp	r3, #2
 800345e:	d003      	beq.n	8003468 <HCD_RXQLVL_IRQHandler+0x44>
 8003460:	2b05      	cmp	r3, #5
 8003462:	f000 8082 	beq.w	800356a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003466:	e083      	b.n	8003570 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d07f      	beq.n	800356e <HCD_RXQLVL_IRQHandler+0x14a>
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	4613      	mov	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	440b      	add	r3, r1
 800347c:	3344      	adds	r3, #68	; 0x44
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d074      	beq.n	800356e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6818      	ldr	r0, [r3, #0]
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4613      	mov	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	440b      	add	r3, r1
 8003496:	3344      	adds	r3, #68	; 0x44
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	b292      	uxth	r2, r2
 800349e:	4619      	mov	r1, r3
 80034a0:	f006 fcd3 	bl	8009e4a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	4613      	mov	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	440b      	add	r3, r1
 80034b2:	3344      	adds	r3, #68	; 0x44
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	18d1      	adds	r1, r2, r3
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	4613      	mov	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	4403      	add	r3, r0
 80034c8:	3344      	adds	r3, #68	; 0x44
 80034ca:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4613      	mov	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	440b      	add	r3, r1
 80034da:	334c      	adds	r3, #76	; 0x4c
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	18d1      	adds	r1, r2, r3
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4613      	mov	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	4403      	add	r3, r0
 80034f0:	334c      	adds	r3, #76	; 0x4c
 80034f2:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	015a      	lsls	r2, r3, #5
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003500:	691a      	ldr	r2, [r3, #16]
 8003502:	4b1d      	ldr	r3, [pc, #116]	; (8003578 <HCD_RXQLVL_IRQHandler+0x154>)
 8003504:	4013      	ands	r3, r2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d031      	beq.n	800356e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	015a      	lsls	r2, r3, #5
 800350e:	6a3b      	ldr	r3, [r7, #32]
 8003510:	4413      	add	r3, r2
 8003512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003520:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003528:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	015a      	lsls	r2, r3, #5
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	4413      	add	r3, r2
 8003532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003536:	461a      	mov	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	4613      	mov	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	440b      	add	r3, r1
 800354a:	3350      	adds	r3, #80	; 0x50
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	f083 0301 	eor.w	r3, r3, #1
 8003552:	b2d8      	uxtb	r0, r3
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	4613      	mov	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	440b      	add	r3, r1
 8003562:	3350      	adds	r3, #80	; 0x50
 8003564:	4602      	mov	r2, r0
 8003566:	701a      	strb	r2, [r3, #0]
      break;
 8003568:	e001      	b.n	800356e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800356a:	bf00      	nop
 800356c:	e000      	b.n	8003570 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800356e:	bf00      	nop
  }
}
 8003570:	bf00      	nop
 8003572:	3728      	adds	r7, #40	; 0x28
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	1ff80000 	.word	0x1ff80000

0800357c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80035a8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d113      	bne.n	80035dc <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d10a      	bne.n	80035d4 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	699a      	ldr	r2, [r3, #24]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80035cc:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f011 ffc8 	bl	8015564 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	f043 0302 	orr.w	r3, r3, #2
 80035da:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	2b08      	cmp	r3, #8
 80035e4:	d147      	bne.n	8003676 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	f043 0308 	orr.w	r3, r3, #8
 80035ec:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	d129      	bne.n	800364c <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d113      	bne.n	8003628 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003606:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800360a:	d106      	bne.n	800361a <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2102      	movs	r1, #2
 8003612:	4618      	mov	r0, r3
 8003614:	f006 fd48 	bl	800a0a8 <USB_InitFSLSPClkSel>
 8003618:	e011      	b.n	800363e <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2101      	movs	r1, #1
 8003620:	4618      	mov	r0, r3
 8003622:	f006 fd41 	bl	800a0a8 <USB_InitFSLSPClkSel>
 8003626:	e00a      	b.n	800363e <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	2b03      	cmp	r3, #3
 800362e:	d106      	bne.n	800363e <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003636:	461a      	mov	r2, r3
 8003638:	f64e 2360 	movw	r3, #60000	; 0xea60
 800363c:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f011 ffbe 	bl	80155c0 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f011 ff8d 	bl	8015564 <HAL_HCD_Connect_Callback>
 800364a:	e014      	b.n	8003676 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f011 ffc5 	bl	80155dc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003660:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003664:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	699a      	ldr	r2, [r3, #24]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003674:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f003 0320 	and.w	r3, r3, #32
 800367c:	2b20      	cmp	r3, #32
 800367e:	d103      	bne.n	8003688 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	f043 0320 	orr.w	r3, r3, #32
 8003686:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800368e:	461a      	mov	r2, r3
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	6013      	str	r3, [r2, #0]
}
 8003694:	bf00      	nop
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e07f      	b.n	80037ae <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d106      	bne.n	80036c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f010 ff72 	bl	80145ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2224      	movs	r2, #36	; 0x24
 80036cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 0201 	bic.w	r2, r2, #1
 80036de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d107      	bne.n	8003716 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	689a      	ldr	r2, [r3, #8]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003712:	609a      	str	r2, [r3, #8]
 8003714:	e006      	b.n	8003724 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689a      	ldr	r2, [r3, #8]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003722:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	2b02      	cmp	r3, #2
 800372a:	d104      	bne.n	8003736 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003734:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6859      	ldr	r1, [r3, #4]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	4b1d      	ldr	r3, [pc, #116]	; (80037b8 <HAL_I2C_Init+0x11c>)
 8003742:	430b      	orrs	r3, r1
 8003744:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68da      	ldr	r2, [r3, #12]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003754:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	691a      	ldr	r2, [r3, #16]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	ea42 0103 	orr.w	r1, r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	021a      	lsls	r2, r3, #8
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	69d9      	ldr	r1, [r3, #28]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a1a      	ldr	r2, [r3, #32]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0201 	orr.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2220      	movs	r2, #32
 800379a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	02008000 	.word	0x02008000

080037bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b20      	cmp	r3, #32
 80037d0:	d138      	bne.n	8003844 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d101      	bne.n	80037e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037dc:	2302      	movs	r3, #2
 80037de:	e032      	b.n	8003846 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2224      	movs	r2, #36	; 0x24
 80037ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0201 	bic.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800380e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6819      	ldr	r1, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0201 	orr.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003840:	2300      	movs	r3, #0
 8003842:	e000      	b.n	8003846 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003844:	2302      	movs	r3, #2
  }
}
 8003846:	4618      	mov	r0, r3
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003852:	b480      	push	{r7}
 8003854:	b085      	sub	sp, #20
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
 800385a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b20      	cmp	r3, #32
 8003866:	d139      	bne.n	80038dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800386e:	2b01      	cmp	r3, #1
 8003870:	d101      	bne.n	8003876 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003872:	2302      	movs	r3, #2
 8003874:	e033      	b.n	80038de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2224      	movs	r2, #36	; 0x24
 8003882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0201 	bic.w	r2, r2, #1
 8003894:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	021b      	lsls	r3, r3, #8
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0201 	orr.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2220      	movs	r2, #32
 80038cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038d8:	2300      	movs	r3, #0
 80038da:	e000      	b.n	80038de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038dc:	2302      	movs	r3, #2
  }
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3714      	adds	r7, #20
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
	...

080038ec <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e0bf      	b.n	8003a7e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d106      	bne.n	8003918 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f010 fec2 	bl	801469c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2202      	movs	r2, #2
 800391c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	699a      	ldr	r2, [r3, #24]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800392e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6999      	ldr	r1, [r3, #24]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003944:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6899      	ldr	r1, [r3, #8]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	4b4a      	ldr	r3, [pc, #296]	; (8003a88 <HAL_LTDC_Init+0x19c>)
 8003960:	400b      	ands	r3, r1
 8003962:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	041b      	lsls	r3, r3, #16
 800396a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6899      	ldr	r1, [r3, #8]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699a      	ldr	r2, [r3, #24]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	431a      	orrs	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	430a      	orrs	r2, r1
 8003980:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68d9      	ldr	r1, [r3, #12]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	4b3e      	ldr	r3, [pc, #248]	; (8003a88 <HAL_LTDC_Init+0x19c>)
 800398e:	400b      	ands	r3, r1
 8003990:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	041b      	lsls	r3, r3, #16
 8003998:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68d9      	ldr	r1, [r3, #12]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a1a      	ldr	r2, [r3, #32]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6919      	ldr	r1, [r3, #16]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	4b33      	ldr	r3, [pc, #204]	; (8003a88 <HAL_LTDC_Init+0x19c>)
 80039bc:	400b      	ands	r3, r1
 80039be:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	041b      	lsls	r3, r3, #16
 80039c6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6919      	ldr	r1, [r3, #16]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	431a      	orrs	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6959      	ldr	r1, [r3, #20]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	4b27      	ldr	r3, [pc, #156]	; (8003a88 <HAL_LTDC_Init+0x19c>)
 80039ea:	400b      	ands	r3, r1
 80039ec:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f2:	041b      	lsls	r3, r3, #16
 80039f4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6959      	ldr	r1, [r3, #20]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a12:	021b      	lsls	r3, r3, #8
 8003a14:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003a1c:	041b      	lsls	r3, r3, #16
 8003a1e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003a2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0206 	orr.w	r2, r2, #6
 8003a5a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	699a      	ldr	r2, [r3, #24]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0201 	orr.w	r2, r2, #1
 8003a6a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	f000f800 	.word	0xf000f800

08003a8c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f003 0304 	and.w	r3, r3, #4
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d023      	beq.n	8003af6 <HAL_LTDC_IRQHandler+0x6a>
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d01e      	beq.n	8003af6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0204 	bic.w	r2, r2, #4
 8003ac6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2204      	movs	r2, #4
 8003ace:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ad6:	f043 0201 	orr.w	r2, r3, #1
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2204      	movs	r2, #4
 8003ae4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 f86f 	bl	8003bd4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d023      	beq.n	8003b48 <HAL_LTDC_IRQHandler+0xbc>
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d01e      	beq.n	8003b48 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0202 	bic.w	r2, r2, #2
 8003b18:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2202      	movs	r2, #2
 8003b20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b28:	f043 0202 	orr.w	r2, r3, #2
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2204      	movs	r2, #4
 8003b36:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f846 	bl	8003bd4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d01b      	beq.n	8003b8a <HAL_LTDC_IRQHandler+0xfe>
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d016      	beq.n	8003b8a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 0201 	bic.w	r2, r2, #1
 8003b6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2201      	movs	r2, #1
 8003b72:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 f82f 	bl	8003be8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f003 0308 	and.w	r3, r3, #8
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d01b      	beq.n	8003bcc <HAL_LTDC_IRQHandler+0x140>
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	f003 0308 	and.w	r3, r3, #8
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d016      	beq.n	8003bcc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0208 	bic.w	r2, r2, #8
 8003bac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2208      	movs	r2, #8
 8003bb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f818 	bl	8003bfc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003bcc:	bf00      	nop
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003c10:	b5b0      	push	{r4, r5, r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d101      	bne.n	8003c2a <HAL_LTDC_ConfigLayer+0x1a>
 8003c26:	2302      	movs	r3, #2
 8003c28:	e02c      	b.n	8003c84 <HAL_LTDC_ConfigLayer+0x74>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2202      	movs	r2, #2
 8003c36:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2134      	movs	r1, #52	; 0x34
 8003c40:	fb01 f303 	mul.w	r3, r1, r3
 8003c44:	4413      	add	r3, r2
 8003c46:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	4614      	mov	r4, r2
 8003c4e:	461d      	mov	r5, r3
 8003c50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c5c:	682b      	ldr	r3, [r5, #0]
 8003c5e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	68b9      	ldr	r1, [r7, #8]
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 f811 	bl	8003c8c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bdb0      	pop	{r4, r5, r7, pc}

08003c8c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b089      	sub	sp, #36	; 0x24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	0c1b      	lsrs	r3, r3, #16
 8003ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ca8:	4413      	add	r3, r2
 8003caa:	041b      	lsls	r3, r3, #16
 8003cac:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	01db      	lsls	r3, r3, #7
 8003cb8:	4413      	add	r3, r2
 8003cba:	3384      	adds	r3, #132	; 0x84
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	6812      	ldr	r2, [r2, #0]
 8003cc2:	4611      	mov	r1, r2
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	01d2      	lsls	r2, r2, #7
 8003cc8:	440a      	add	r2, r1
 8003cca:	3284      	adds	r2, #132	; 0x84
 8003ccc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003cd0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	0c1b      	lsrs	r3, r3, #16
 8003cde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ce2:	4413      	add	r3, r2
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4619      	mov	r1, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	01db      	lsls	r3, r3, #7
 8003cf0:	440b      	add	r3, r1
 8003cf2:	3384      	adds	r3, #132	; 0x84
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	68da      	ldr	r2, [r3, #12]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d0a:	4413      	add	r3, r2
 8003d0c:	041b      	lsls	r3, r3, #16
 8003d0e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	461a      	mov	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	01db      	lsls	r3, r3, #7
 8003d1a:	4413      	add	r3, r2
 8003d1c:	3384      	adds	r3, #132	; 0x84
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	6812      	ldr	r2, [r2, #0]
 8003d24:	4611      	mov	r1, r2
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	01d2      	lsls	r2, r2, #7
 8003d2a:	440a      	add	r2, r1
 8003d2c:	3284      	adds	r2, #132	; 0x84
 8003d2e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003d32:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d42:	4413      	add	r3, r2
 8003d44:	1c5a      	adds	r2, r3, #1
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	01db      	lsls	r3, r3, #7
 8003d50:	440b      	add	r3, r1
 8003d52:	3384      	adds	r3, #132	; 0x84
 8003d54:	4619      	mov	r1, r3
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	461a      	mov	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	01db      	lsls	r3, r3, #7
 8003d66:	4413      	add	r3, r2
 8003d68:	3384      	adds	r3, #132	; 0x84
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	6812      	ldr	r2, [r2, #0]
 8003d70:	4611      	mov	r1, r2
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	01d2      	lsls	r2, r2, #7
 8003d76:	440a      	add	r2, r1
 8003d78:	3284      	adds	r2, #132	; 0x84
 8003d7a:	f023 0307 	bic.w	r3, r3, #7
 8003d7e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	461a      	mov	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	01db      	lsls	r3, r3, #7
 8003d8a:	4413      	add	r3, r2
 8003d8c:	3384      	adds	r3, #132	; 0x84
 8003d8e:	461a      	mov	r2, r3
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003d9c:	021b      	lsls	r3, r3, #8
 8003d9e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003da6:	041b      	lsls	r3, r3, #16
 8003da8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	061b      	lsls	r3, r3, #24
 8003db0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	461a      	mov	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	01db      	lsls	r3, r3, #7
 8003dbc:	4413      	add	r3, r2
 8003dbe:	3384      	adds	r3, #132	; 0x84
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	01db      	lsls	r3, r3, #7
 8003dcc:	4413      	add	r3, r2
 8003dce:	3384      	adds	r3, #132	; 0x84
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ddc:	461a      	mov	r2, r3
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	431a      	orrs	r2, r3
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	431a      	orrs	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4619      	mov	r1, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	01db      	lsls	r3, r3, #7
 8003df0:	440b      	add	r3, r1
 8003df2:	3384      	adds	r3, #132	; 0x84
 8003df4:	4619      	mov	r1, r3
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	461a      	mov	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	01db      	lsls	r3, r3, #7
 8003e06:	4413      	add	r3, r2
 8003e08:	3384      	adds	r3, #132	; 0x84
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	6812      	ldr	r2, [r2, #0]
 8003e10:	4611      	mov	r1, r2
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	01d2      	lsls	r2, r2, #7
 8003e16:	440a      	add	r2, r1
 8003e18:	3284      	adds	r2, #132	; 0x84
 8003e1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e1e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	461a      	mov	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	01db      	lsls	r3, r3, #7
 8003e2a:	4413      	add	r3, r2
 8003e2c:	3384      	adds	r3, #132	; 0x84
 8003e2e:	461a      	mov	r2, r3
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	01db      	lsls	r3, r3, #7
 8003e40:	4413      	add	r3, r2
 8003e42:	3384      	adds	r3, #132	; 0x84
 8003e44:	69da      	ldr	r2, [r3, #28]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	01db      	lsls	r3, r3, #7
 8003e50:	440b      	add	r3, r1
 8003e52:	3384      	adds	r3, #132	; 0x84
 8003e54:	4619      	mov	r1, r3
 8003e56:	4b58      	ldr	r3, [pc, #352]	; (8003fb8 <LTDC_SetConfig+0x32c>)
 8003e58:	4013      	ands	r3, r2
 8003e5a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	69da      	ldr	r2, [r3, #28]
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	68f9      	ldr	r1, [r7, #12]
 8003e66:	6809      	ldr	r1, [r1, #0]
 8003e68:	4608      	mov	r0, r1
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	01c9      	lsls	r1, r1, #7
 8003e6e:	4401      	add	r1, r0
 8003e70:	3184      	adds	r1, #132	; 0x84
 8003e72:	4313      	orrs	r3, r2
 8003e74:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	01db      	lsls	r3, r3, #7
 8003e80:	4413      	add	r3, r2
 8003e82:	3384      	adds	r3, #132	; 0x84
 8003e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	01db      	lsls	r3, r3, #7
 8003e90:	4413      	add	r3, r2
 8003e92:	3384      	adds	r3, #132	; 0x84
 8003e94:	461a      	mov	r2, r3
 8003e96:	2300      	movs	r3, #0
 8003e98:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	01db      	lsls	r3, r3, #7
 8003ea4:	4413      	add	r3, r2
 8003ea6:	3384      	adds	r3, #132	; 0x84
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d102      	bne.n	8003ebe <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8003eb8:	2304      	movs	r3, #4
 8003eba:	61fb      	str	r3, [r7, #28]
 8003ebc:	e01b      	b.n	8003ef6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d102      	bne.n	8003ecc <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	61fb      	str	r3, [r7, #28]
 8003eca:	e014      	b.n	8003ef6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	2b04      	cmp	r3, #4
 8003ed2:	d00b      	beq.n	8003eec <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d007      	beq.n	8003eec <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003ee0:	2b03      	cmp	r3, #3
 8003ee2:	d003      	beq.n	8003eec <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003ee8:	2b07      	cmp	r3, #7
 8003eea:	d102      	bne.n	8003ef2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8003eec:	2302      	movs	r3, #2
 8003eee:	61fb      	str	r3, [r7, #28]
 8003ef0:	e001      	b.n	8003ef6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	461a      	mov	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	01db      	lsls	r3, r3, #7
 8003f00:	4413      	add	r3, r2
 8003f02:	3384      	adds	r3, #132	; 0x84
 8003f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	6812      	ldr	r2, [r2, #0]
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	01d2      	lsls	r2, r2, #7
 8003f10:	440a      	add	r2, r1
 8003f12:	3284      	adds	r2, #132	; 0x84
 8003f14:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003f18:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1e:	69fa      	ldr	r2, [r7, #28]
 8003f20:	fb02 f303 	mul.w	r3, r2, r3
 8003f24:	041a      	lsls	r2, r3, #16
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	6859      	ldr	r1, [r3, #4]
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	1acb      	subs	r3, r1, r3
 8003f30:	69f9      	ldr	r1, [r7, #28]
 8003f32:	fb01 f303 	mul.w	r3, r1, r3
 8003f36:	3303      	adds	r3, #3
 8003f38:	68f9      	ldr	r1, [r7, #12]
 8003f3a:	6809      	ldr	r1, [r1, #0]
 8003f3c:	4608      	mov	r0, r1
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	01c9      	lsls	r1, r1, #7
 8003f42:	4401      	add	r1, r0
 8003f44:	3184      	adds	r1, #132	; 0x84
 8003f46:	4313      	orrs	r3, r2
 8003f48:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	01db      	lsls	r3, r3, #7
 8003f54:	4413      	add	r3, r2
 8003f56:	3384      	adds	r3, #132	; 0x84
 8003f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4619      	mov	r1, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	01db      	lsls	r3, r3, #7
 8003f64:	440b      	add	r3, r1
 8003f66:	3384      	adds	r3, #132	; 0x84
 8003f68:	4619      	mov	r1, r3
 8003f6a:	4b14      	ldr	r3, [pc, #80]	; (8003fbc <LTDC_SetConfig+0x330>)
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	461a      	mov	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	01db      	lsls	r3, r3, #7
 8003f7a:	4413      	add	r3, r2
 8003f7c:	3384      	adds	r3, #132	; 0x84
 8003f7e:	461a      	mov	r2, r3
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f84:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	01db      	lsls	r3, r3, #7
 8003f90:	4413      	add	r3, r2
 8003f92:	3384      	adds	r3, #132	; 0x84
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	6812      	ldr	r2, [r2, #0]
 8003f9a:	4611      	mov	r1, r2
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	01d2      	lsls	r2, r2, #7
 8003fa0:	440a      	add	r2, r1
 8003fa2:	3284      	adds	r2, #132	; 0x84
 8003fa4:	f043 0301 	orr.w	r3, r3, #1
 8003fa8:	6013      	str	r3, [r2, #0]
}
 8003faa:	bf00      	nop
 8003fac:	3724      	adds	r7, #36	; 0x24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	fffff8f8 	.word	0xfffff8f8
 8003fbc:	fffff800 	.word	0xfffff800

08003fc0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fc4:	4b05      	ldr	r3, [pc, #20]	; (8003fdc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a04      	ldr	r2, [pc, #16]	; (8003fdc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fce:	6013      	str	r3, [r2, #0]
}
 8003fd0:	bf00      	nop
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	40007000 	.word	0x40007000

08003fe0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003fea:	4b23      	ldr	r3, [pc, #140]	; (8004078 <HAL_PWREx_EnableOverDrive+0x98>)
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	4a22      	ldr	r2, [pc, #136]	; (8004078 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ff6:	4b20      	ldr	r3, [pc, #128]	; (8004078 <HAL_PWREx_EnableOverDrive+0x98>)
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ffe:	603b      	str	r3, [r7, #0]
 8004000:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004002:	4b1e      	ldr	r3, [pc, #120]	; (800407c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a1d      	ldr	r2, [pc, #116]	; (800407c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800400c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800400e:	f7fc faa1 	bl	8000554 <HAL_GetTick>
 8004012:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004014:	e009      	b.n	800402a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004016:	f7fc fa9d 	bl	8000554 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004024:	d901      	bls.n	800402a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e022      	b.n	8004070 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800402a:	4b14      	ldr	r3, [pc, #80]	; (800407c <HAL_PWREx_EnableOverDrive+0x9c>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004036:	d1ee      	bne.n	8004016 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004038:	4b10      	ldr	r3, [pc, #64]	; (800407c <HAL_PWREx_EnableOverDrive+0x9c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a0f      	ldr	r2, [pc, #60]	; (800407c <HAL_PWREx_EnableOverDrive+0x9c>)
 800403e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004042:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004044:	f7fc fa86 	bl	8000554 <HAL_GetTick>
 8004048:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800404a:	e009      	b.n	8004060 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800404c:	f7fc fa82 	bl	8000554 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800405a:	d901      	bls.n	8004060 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e007      	b.n	8004070 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004060:	4b06      	ldr	r3, [pc, #24]	; (800407c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004068:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800406c:	d1ee      	bne.n	800404c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	40023800 	.word	0x40023800
 800407c:	40007000 	.word	0x40007000

08004080 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af02      	add	r7, sp, #8
 8004086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800408c:	f7fc fa62 	bl	8000554 <HAL_GetTick>
 8004090:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e073      	b.n	8004184 <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d101      	bne.n	80040ac <HAL_QSPI_Init+0x2c>
 80040a8:	2302      	movs	r3, #2
 80040aa:	e06b      	b.n	8004184 <HAL_QSPI_Init+0x104>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10b      	bne.n	80040d8 <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f010 fbaf 	bl	801482c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 80040ce:	f241 3188 	movw	r1, #5000	; 0x1388
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f85e 	bl	8004194 <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	3b01      	subs	r3, #1
 80040e8:	021a      	lsls	r2, r3, #8
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	2200      	movs	r2, #0
 80040fc:	2120      	movs	r1, #32
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f856 	bl	80041b0 <QSPI_WaitFlagStateUntilTimeout>
 8004104:	4603      	mov	r3, r0
 8004106:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8004108:	7bfb      	ldrb	r3, [r7, #15]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d135      	bne.n	800417a <HAL_QSPI_Init+0xfa>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	4b1d      	ldr	r3, [pc, #116]	; (800418c <HAL_QSPI_Init+0x10c>)
 8004116:	4013      	ands	r3, r2
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6852      	ldr	r2, [r2, #4]
 800411c:	0611      	lsls	r1, r2, #24
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	68d2      	ldr	r2, [r2, #12]
 8004122:	4311      	orrs	r1, r2
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	69d2      	ldr	r2, [r2, #28]
 8004128:	4311      	orrs	r1, r2
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	6a12      	ldr	r2, [r2, #32]
 800412e:	4311      	orrs	r1, r2
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	6812      	ldr	r2, [r2, #0]
 8004134:	430b      	orrs	r3, r1
 8004136:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	4b14      	ldr	r3, [pc, #80]	; (8004190 <HAL_QSPI_Init+0x110>)
 8004140:	4013      	ands	r3, r2
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	6912      	ldr	r2, [r2, #16]
 8004146:	0411      	lsls	r1, r2, #16
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6952      	ldr	r2, [r2, #20]
 800414c:	4311      	orrs	r1, r2
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	6992      	ldr	r2, [r2, #24]
 8004152:	4311      	orrs	r1, r2
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	6812      	ldr	r2, [r2, #0]
 8004158:	430b      	orrs	r3, r1
 800415a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0201 	orr.w	r2, r2, #1
 800416a:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8004182:	7bfb      	ldrb	r3, [r7, #15]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	00ffff2f 	.word	0x00ffff2f
 8004190:	ffe0f8fe 	.word	0xffe0f8fe

08004194 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	649a      	str	r2, [r3, #72]	; 0x48
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	603b      	str	r3, [r7, #0]
 80041bc:	4613      	mov	r3, r2
 80041be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80041c0:	e01a      	b.n	80041f8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c8:	d016      	beq.n	80041f8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d007      	beq.n	80041e0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80041d0:	f7fc f9c0 	bl	8000554 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d20b      	bcs.n	80041f8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2204      	movs	r2, #4
 80041e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ec:	f043 0201 	orr.w	r2, r3, #1
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e00e      	b.n	8004216 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	4013      	ands	r3, r2
 8004202:	2b00      	cmp	r3, #0
 8004204:	bf14      	ite	ne
 8004206:	2301      	movne	r3, #1
 8004208:	2300      	moveq	r3, #0
 800420a:	b2db      	uxtb	r3, r3
 800420c:	461a      	mov	r2, r3
 800420e:	79fb      	ldrb	r3, [r7, #7]
 8004210:	429a      	cmp	r2, r3
 8004212:	d1d6      	bne.n	80041c2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
	...

08004220 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8004228:	2300      	movs	r3, #0
 800422a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e25c      	b.n	80046f0 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 8087 	beq.w	8004352 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004244:	4b96      	ldr	r3, [pc, #600]	; (80044a0 <HAL_RCC_OscConfig+0x280>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f003 030c 	and.w	r3, r3, #12
 800424c:	2b04      	cmp	r3, #4
 800424e:	d00c      	beq.n	800426a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004250:	4b93      	ldr	r3, [pc, #588]	; (80044a0 <HAL_RCC_OscConfig+0x280>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f003 030c 	and.w	r3, r3, #12
 8004258:	2b08      	cmp	r3, #8
 800425a:	d112      	bne.n	8004282 <HAL_RCC_OscConfig+0x62>
 800425c:	4b90      	ldr	r3, [pc, #576]	; (80044a0 <HAL_RCC_OscConfig+0x280>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004264:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004268:	d10b      	bne.n	8004282 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800426a:	4b8d      	ldr	r3, [pc, #564]	; (80044a0 <HAL_RCC_OscConfig+0x280>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d06c      	beq.n	8004350 <HAL_RCC_OscConfig+0x130>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d168      	bne.n	8004350 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e236      	b.n	80046f0 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800428a:	d106      	bne.n	800429a <HAL_RCC_OscConfig+0x7a>
 800428c:	4b84      	ldr	r3, [pc, #528]	; (80044a0 <HAL_RCC_OscConfig+0x280>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a83      	ldr	r2, [pc, #524]	; (80044a0 <HAL_RCC_OscConfig+0x280>)
 8004292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004296:	6013      	str	r3, [r2, #0]
 8004298:	e02e      	b.n	80042f8 <HAL_RCC_OscConfig+0xd8>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10c      	bne.n	80042bc <HAL_RCC_OscConfig+0x9c>
 80042a2:	4b7f      	ldr	r3, [pc, #508]	; (80044a0 <HAL_RCC_OscConfig+0x280>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a7e      	ldr	r2, [pc, #504]	; (80044a0 <HAL_RCC_OscConfig+0x280>)
 80042a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	4b7c      	ldr	r3, [pc, #496]	; (80044a0 <HAL_RCC_OscConfig+0x280>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a7b      	ldr	r2, [pc, #492]	; (80044a0 <HAL_RCC_OscConfig+0x280>)
 80042b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	e01d      	b.n	80042f8 <HAL_RCC_OscConfig+0xd8>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042c4:	d10c      	bne.n	80042e0 <HAL_RCC_OscConfig+0xc0>
 80042c6:	4b76      	ldr	r3, [pc, #472]	; (80044a0 <HAL_RCC_OscConfig+0x280>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a75      	ldr	r2, [pc, #468]	; (80044a0 <HAL_RCC_OscConfig+0x280>)
 80042cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	4b73      	ldr	r3, [pc, #460]	; (80044a0 <HAL_RCC_OscConfig+0x280>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a72      	ldr	r2, [pc, #456]	; (80044a0 <HAL_RCC_OscConfig+0x280>)
 80042d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042dc:	6013      	str	r3, [r2, #0]
 80042de:	e00b      	b.n	80042f8 <HAL_RCC_OscConfig+0xd8>
 80042e0:	4b6f      	ldr	r3, [pc, #444]	; (80044a0 <HAL_RCC_OscConfig+0x280>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a6e      	ldr	r2, [pc, #440]	; (80044a0 <HAL_RCC_OscConfig+0x280>)
 80042e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ea:	6013      	str	r3, [r2, #0]
 80042ec:	4b6c      	ldr	r3, [pc, #432]	; (80044a0 <HAL_RCC_OscConfig+0x280>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a6b      	ldr	r2, [pc, #428]	; (80044a0 <HAL_RCC_OscConfig+0x280>)
 80042f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d013      	beq.n	8004328 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004300:	f7fc f928 	bl	8000554 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004308:	f7fc f924 	bl	8000554 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b64      	cmp	r3, #100	; 0x64
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e1ea      	b.n	80046f0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800431a:	4b61      	ldr	r3, [pc, #388]	; (80044a0 <HAL_RCC_OscConfig+0x280>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0f0      	beq.n	8004308 <HAL_RCC_OscConfig+0xe8>
 8004326:	e014      	b.n	8004352 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004328:	f7fc f914 	bl	8000554 <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004330:	f7fc f910 	bl	8000554 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b64      	cmp	r3, #100	; 0x64
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e1d6      	b.n	80046f0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004342:	4b57      	ldr	r3, [pc, #348]	; (80044a0 <HAL_RCC_OscConfig+0x280>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1f0      	bne.n	8004330 <HAL_RCC_OscConfig+0x110>
 800434e:	e000      	b.n	8004352 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d069      	beq.n	8004432 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800435e:	4b50      	ldr	r3, [pc, #320]	; (80044a0 <HAL_RCC_OscConfig+0x280>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 030c 	and.w	r3, r3, #12
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00b      	beq.n	8004382 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800436a:	4b4d      	ldr	r3, [pc, #308]	; (80044a0 <HAL_RCC_OscConfig+0x280>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 030c 	and.w	r3, r3, #12
 8004372:	2b08      	cmp	r3, #8
 8004374:	d11c      	bne.n	80043b0 <HAL_RCC_OscConfig+0x190>
 8004376:	4b4a      	ldr	r3, [pc, #296]	; (80044a0 <HAL_RCC_OscConfig+0x280>)
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d116      	bne.n	80043b0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004382:	4b47      	ldr	r3, [pc, #284]	; (80044a0 <HAL_RCC_OscConfig+0x280>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d005      	beq.n	800439a <HAL_RCC_OscConfig+0x17a>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d001      	beq.n	800439a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e1aa      	b.n	80046f0 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800439a:	4b41      	ldr	r3, [pc, #260]	; (80044a0 <HAL_RCC_OscConfig+0x280>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	493d      	ldr	r1, [pc, #244]	; (80044a0 <HAL_RCC_OscConfig+0x280>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ae:	e040      	b.n	8004432 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d023      	beq.n	8004400 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043b8:	4b39      	ldr	r3, [pc, #228]	; (80044a0 <HAL_RCC_OscConfig+0x280>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a38      	ldr	r2, [pc, #224]	; (80044a0 <HAL_RCC_OscConfig+0x280>)
 80043be:	f043 0301 	orr.w	r3, r3, #1
 80043c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c4:	f7fc f8c6 	bl	8000554 <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043cc:	f7fc f8c2 	bl	8000554 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e188      	b.n	80046f0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043de:	4b30      	ldr	r3, [pc, #192]	; (80044a0 <HAL_RCC_OscConfig+0x280>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0f0      	beq.n	80043cc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ea:	4b2d      	ldr	r3, [pc, #180]	; (80044a0 <HAL_RCC_OscConfig+0x280>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	4929      	ldr	r1, [pc, #164]	; (80044a0 <HAL_RCC_OscConfig+0x280>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	600b      	str	r3, [r1, #0]
 80043fe:	e018      	b.n	8004432 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004400:	4b27      	ldr	r3, [pc, #156]	; (80044a0 <HAL_RCC_OscConfig+0x280>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a26      	ldr	r2, [pc, #152]	; (80044a0 <HAL_RCC_OscConfig+0x280>)
 8004406:	f023 0301 	bic.w	r3, r3, #1
 800440a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440c:	f7fc f8a2 	bl	8000554 <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004414:	f7fc f89e 	bl	8000554 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e164      	b.n	80046f0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004426:	4b1e      	ldr	r3, [pc, #120]	; (80044a0 <HAL_RCC_OscConfig+0x280>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f0      	bne.n	8004414 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0308 	and.w	r3, r3, #8
 800443a:	2b00      	cmp	r3, #0
 800443c:	d038      	beq.n	80044b0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d019      	beq.n	800447a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004446:	4b16      	ldr	r3, [pc, #88]	; (80044a0 <HAL_RCC_OscConfig+0x280>)
 8004448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800444a:	4a15      	ldr	r2, [pc, #84]	; (80044a0 <HAL_RCC_OscConfig+0x280>)
 800444c:	f043 0301 	orr.w	r3, r3, #1
 8004450:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004452:	f7fc f87f 	bl	8000554 <HAL_GetTick>
 8004456:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004458:	e008      	b.n	800446c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800445a:	f7fc f87b 	bl	8000554 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e141      	b.n	80046f0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800446c:	4b0c      	ldr	r3, [pc, #48]	; (80044a0 <HAL_RCC_OscConfig+0x280>)
 800446e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d0f0      	beq.n	800445a <HAL_RCC_OscConfig+0x23a>
 8004478:	e01a      	b.n	80044b0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800447a:	4b09      	ldr	r3, [pc, #36]	; (80044a0 <HAL_RCC_OscConfig+0x280>)
 800447c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800447e:	4a08      	ldr	r2, [pc, #32]	; (80044a0 <HAL_RCC_OscConfig+0x280>)
 8004480:	f023 0301 	bic.w	r3, r3, #1
 8004484:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004486:	f7fc f865 	bl	8000554 <HAL_GetTick>
 800448a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800448c:	e00a      	b.n	80044a4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800448e:	f7fc f861 	bl	8000554 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d903      	bls.n	80044a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e127      	b.n	80046f0 <HAL_RCC_OscConfig+0x4d0>
 80044a0:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044a4:	4b94      	ldr	r3, [pc, #592]	; (80046f8 <HAL_RCC_OscConfig+0x4d8>)
 80044a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1ee      	bne.n	800448e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0304 	and.w	r3, r3, #4
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 80a4 	beq.w	8004606 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044be:	4b8e      	ldr	r3, [pc, #568]	; (80046f8 <HAL_RCC_OscConfig+0x4d8>)
 80044c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10d      	bne.n	80044e6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ca:	4b8b      	ldr	r3, [pc, #556]	; (80046f8 <HAL_RCC_OscConfig+0x4d8>)
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ce:	4a8a      	ldr	r2, [pc, #552]	; (80046f8 <HAL_RCC_OscConfig+0x4d8>)
 80044d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d4:	6413      	str	r3, [r2, #64]	; 0x40
 80044d6:	4b88      	ldr	r3, [pc, #544]	; (80046f8 <HAL_RCC_OscConfig+0x4d8>)
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80044e2:	2301      	movs	r3, #1
 80044e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044e6:	4b85      	ldr	r3, [pc, #532]	; (80046fc <HAL_RCC_OscConfig+0x4dc>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d118      	bne.n	8004524 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80044f2:	4b82      	ldr	r3, [pc, #520]	; (80046fc <HAL_RCC_OscConfig+0x4dc>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a81      	ldr	r2, [pc, #516]	; (80046fc <HAL_RCC_OscConfig+0x4dc>)
 80044f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044fe:	f7fc f829 	bl	8000554 <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004506:	f7fc f825 	bl	8000554 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b64      	cmp	r3, #100	; 0x64
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e0eb      	b.n	80046f0 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004518:	4b78      	ldr	r3, [pc, #480]	; (80046fc <HAL_RCC_OscConfig+0x4dc>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0f0      	beq.n	8004506 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d106      	bne.n	800453a <HAL_RCC_OscConfig+0x31a>
 800452c:	4b72      	ldr	r3, [pc, #456]	; (80046f8 <HAL_RCC_OscConfig+0x4d8>)
 800452e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004530:	4a71      	ldr	r2, [pc, #452]	; (80046f8 <HAL_RCC_OscConfig+0x4d8>)
 8004532:	f043 0301 	orr.w	r3, r3, #1
 8004536:	6713      	str	r3, [r2, #112]	; 0x70
 8004538:	e02d      	b.n	8004596 <HAL_RCC_OscConfig+0x376>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10c      	bne.n	800455c <HAL_RCC_OscConfig+0x33c>
 8004542:	4b6d      	ldr	r3, [pc, #436]	; (80046f8 <HAL_RCC_OscConfig+0x4d8>)
 8004544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004546:	4a6c      	ldr	r2, [pc, #432]	; (80046f8 <HAL_RCC_OscConfig+0x4d8>)
 8004548:	f023 0301 	bic.w	r3, r3, #1
 800454c:	6713      	str	r3, [r2, #112]	; 0x70
 800454e:	4b6a      	ldr	r3, [pc, #424]	; (80046f8 <HAL_RCC_OscConfig+0x4d8>)
 8004550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004552:	4a69      	ldr	r2, [pc, #420]	; (80046f8 <HAL_RCC_OscConfig+0x4d8>)
 8004554:	f023 0304 	bic.w	r3, r3, #4
 8004558:	6713      	str	r3, [r2, #112]	; 0x70
 800455a:	e01c      	b.n	8004596 <HAL_RCC_OscConfig+0x376>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	2b05      	cmp	r3, #5
 8004562:	d10c      	bne.n	800457e <HAL_RCC_OscConfig+0x35e>
 8004564:	4b64      	ldr	r3, [pc, #400]	; (80046f8 <HAL_RCC_OscConfig+0x4d8>)
 8004566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004568:	4a63      	ldr	r2, [pc, #396]	; (80046f8 <HAL_RCC_OscConfig+0x4d8>)
 800456a:	f043 0304 	orr.w	r3, r3, #4
 800456e:	6713      	str	r3, [r2, #112]	; 0x70
 8004570:	4b61      	ldr	r3, [pc, #388]	; (80046f8 <HAL_RCC_OscConfig+0x4d8>)
 8004572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004574:	4a60      	ldr	r2, [pc, #384]	; (80046f8 <HAL_RCC_OscConfig+0x4d8>)
 8004576:	f043 0301 	orr.w	r3, r3, #1
 800457a:	6713      	str	r3, [r2, #112]	; 0x70
 800457c:	e00b      	b.n	8004596 <HAL_RCC_OscConfig+0x376>
 800457e:	4b5e      	ldr	r3, [pc, #376]	; (80046f8 <HAL_RCC_OscConfig+0x4d8>)
 8004580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004582:	4a5d      	ldr	r2, [pc, #372]	; (80046f8 <HAL_RCC_OscConfig+0x4d8>)
 8004584:	f023 0301 	bic.w	r3, r3, #1
 8004588:	6713      	str	r3, [r2, #112]	; 0x70
 800458a:	4b5b      	ldr	r3, [pc, #364]	; (80046f8 <HAL_RCC_OscConfig+0x4d8>)
 800458c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458e:	4a5a      	ldr	r2, [pc, #360]	; (80046f8 <HAL_RCC_OscConfig+0x4d8>)
 8004590:	f023 0304 	bic.w	r3, r3, #4
 8004594:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d015      	beq.n	80045ca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800459e:	f7fb ffd9 	bl	8000554 <HAL_GetTick>
 80045a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a4:	e00a      	b.n	80045bc <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045a6:	f7fb ffd5 	bl	8000554 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e099      	b.n	80046f0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045bc:	4b4e      	ldr	r3, [pc, #312]	; (80046f8 <HAL_RCC_OscConfig+0x4d8>)
 80045be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0ee      	beq.n	80045a6 <HAL_RCC_OscConfig+0x386>
 80045c8:	e014      	b.n	80045f4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ca:	f7fb ffc3 	bl	8000554 <HAL_GetTick>
 80045ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045d0:	e00a      	b.n	80045e8 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045d2:	f7fb ffbf 	bl	8000554 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e083      	b.n	80046f0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045e8:	4b43      	ldr	r3, [pc, #268]	; (80046f8 <HAL_RCC_OscConfig+0x4d8>)
 80045ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1ee      	bne.n	80045d2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045f4:	7dfb      	ldrb	r3, [r7, #23]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d105      	bne.n	8004606 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045fa:	4b3f      	ldr	r3, [pc, #252]	; (80046f8 <HAL_RCC_OscConfig+0x4d8>)
 80045fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fe:	4a3e      	ldr	r2, [pc, #248]	; (80046f8 <HAL_RCC_OscConfig+0x4d8>)
 8004600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004604:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d06f      	beq.n	80046ee <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800460e:	4b3a      	ldr	r3, [pc, #232]	; (80046f8 <HAL_RCC_OscConfig+0x4d8>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f003 030c 	and.w	r3, r3, #12
 8004616:	2b08      	cmp	r3, #8
 8004618:	d067      	beq.n	80046ea <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	2b02      	cmp	r3, #2
 8004620:	d149      	bne.n	80046b6 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004622:	4b35      	ldr	r3, [pc, #212]	; (80046f8 <HAL_RCC_OscConfig+0x4d8>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a34      	ldr	r2, [pc, #208]	; (80046f8 <HAL_RCC_OscConfig+0x4d8>)
 8004628:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800462c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462e:	f7fb ff91 	bl	8000554 <HAL_GetTick>
 8004632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004634:	e008      	b.n	8004648 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004636:	f7fb ff8d 	bl	8000554 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e053      	b.n	80046f0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004648:	4b2b      	ldr	r3, [pc, #172]	; (80046f8 <HAL_RCC_OscConfig+0x4d8>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1f0      	bne.n	8004636 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	69da      	ldr	r2, [r3, #28]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	431a      	orrs	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	019b      	lsls	r3, r3, #6
 8004664:	431a      	orrs	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466a:	085b      	lsrs	r3, r3, #1
 800466c:	3b01      	subs	r3, #1
 800466e:	041b      	lsls	r3, r3, #16
 8004670:	431a      	orrs	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004676:	061b      	lsls	r3, r3, #24
 8004678:	4313      	orrs	r3, r2
 800467a:	4a1f      	ldr	r2, [pc, #124]	; (80046f8 <HAL_RCC_OscConfig+0x4d8>)
 800467c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004680:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004682:	4b1d      	ldr	r3, [pc, #116]	; (80046f8 <HAL_RCC_OscConfig+0x4d8>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a1c      	ldr	r2, [pc, #112]	; (80046f8 <HAL_RCC_OscConfig+0x4d8>)
 8004688:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800468c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468e:	f7fb ff61 	bl	8000554 <HAL_GetTick>
 8004692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004694:	e008      	b.n	80046a8 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004696:	f7fb ff5d 	bl	8000554 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e023      	b.n	80046f0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046a8:	4b13      	ldr	r3, [pc, #76]	; (80046f8 <HAL_RCC_OscConfig+0x4d8>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d0f0      	beq.n	8004696 <HAL_RCC_OscConfig+0x476>
 80046b4:	e01b      	b.n	80046ee <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046b6:	4b10      	ldr	r3, [pc, #64]	; (80046f8 <HAL_RCC_OscConfig+0x4d8>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a0f      	ldr	r2, [pc, #60]	; (80046f8 <HAL_RCC_OscConfig+0x4d8>)
 80046bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c2:	f7fb ff47 	bl	8000554 <HAL_GetTick>
 80046c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046c8:	e008      	b.n	80046dc <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ca:	f7fb ff43 	bl	8000554 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e009      	b.n	80046f0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046dc:	4b06      	ldr	r3, [pc, #24]	; (80046f8 <HAL_RCC_OscConfig+0x4d8>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1f0      	bne.n	80046ca <HAL_RCC_OscConfig+0x4aa>
 80046e8:	e001      	b.n	80046ee <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e000      	b.n	80046f0 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3718      	adds	r7, #24
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40023800 	.word	0x40023800
 80046fc:	40007000 	.word	0x40007000

08004700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800470a:	2300      	movs	r3, #0
 800470c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e0ce      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004718:	4b69      	ldr	r3, [pc, #420]	; (80048c0 <HAL_RCC_ClockConfig+0x1c0>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 030f 	and.w	r3, r3, #15
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	429a      	cmp	r2, r3
 8004724:	d910      	bls.n	8004748 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004726:	4b66      	ldr	r3, [pc, #408]	; (80048c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f023 020f 	bic.w	r2, r3, #15
 800472e:	4964      	ldr	r1, [pc, #400]	; (80048c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	4313      	orrs	r3, r2
 8004734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004736:	4b62      	ldr	r3, [pc, #392]	; (80048c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	683a      	ldr	r2, [r7, #0]
 8004740:	429a      	cmp	r2, r3
 8004742:	d001      	beq.n	8004748 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e0b6      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d020      	beq.n	8004796 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0304 	and.w	r3, r3, #4
 800475c:	2b00      	cmp	r3, #0
 800475e:	d005      	beq.n	800476c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004760:	4b58      	ldr	r3, [pc, #352]	; (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	4a57      	ldr	r2, [pc, #348]	; (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004766:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800476a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0308 	and.w	r3, r3, #8
 8004774:	2b00      	cmp	r3, #0
 8004776:	d005      	beq.n	8004784 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004778:	4b52      	ldr	r3, [pc, #328]	; (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	4a51      	ldr	r2, [pc, #324]	; (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 800477e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004782:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004784:	4b4f      	ldr	r3, [pc, #316]	; (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	494c      	ldr	r1, [pc, #304]	; (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004792:	4313      	orrs	r3, r2
 8004794:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d040      	beq.n	8004824 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d107      	bne.n	80047ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047aa:	4b46      	ldr	r3, [pc, #280]	; (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d115      	bne.n	80047e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e07d      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d107      	bne.n	80047d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047c2:	4b40      	ldr	r3, [pc, #256]	; (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d109      	bne.n	80047e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e071      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047d2:	4b3c      	ldr	r3, [pc, #240]	; (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e069      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047e2:	4b38      	ldr	r3, [pc, #224]	; (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f023 0203 	bic.w	r2, r3, #3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	4935      	ldr	r1, [pc, #212]	; (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047f4:	f7fb feae 	bl	8000554 <HAL_GetTick>
 80047f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047fa:	e00a      	b.n	8004812 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047fc:	f7fb feaa 	bl	8000554 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	f241 3288 	movw	r2, #5000	; 0x1388
 800480a:	4293      	cmp	r3, r2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e051      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004812:	4b2c      	ldr	r3, [pc, #176]	; (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 020c 	and.w	r2, r3, #12
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	429a      	cmp	r2, r3
 8004822:	d1eb      	bne.n	80047fc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004824:	4b26      	ldr	r3, [pc, #152]	; (80048c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 030f 	and.w	r3, r3, #15
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	429a      	cmp	r2, r3
 8004830:	d210      	bcs.n	8004854 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004832:	4b23      	ldr	r3, [pc, #140]	; (80048c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f023 020f 	bic.w	r2, r3, #15
 800483a:	4921      	ldr	r1, [pc, #132]	; (80048c0 <HAL_RCC_ClockConfig+0x1c0>)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	4313      	orrs	r3, r2
 8004840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004842:	4b1f      	ldr	r3, [pc, #124]	; (80048c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	429a      	cmp	r2, r3
 800484e:	d001      	beq.n	8004854 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e030      	b.n	80048b6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b00      	cmp	r3, #0
 800485e:	d008      	beq.n	8004872 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004860:	4b18      	ldr	r3, [pc, #96]	; (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	4915      	ldr	r1, [pc, #84]	; (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 800486e:	4313      	orrs	r3, r2
 8004870:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0308 	and.w	r3, r3, #8
 800487a:	2b00      	cmp	r3, #0
 800487c:	d009      	beq.n	8004892 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800487e:	4b11      	ldr	r3, [pc, #68]	; (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	490d      	ldr	r1, [pc, #52]	; (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 800488e:	4313      	orrs	r3, r2
 8004890:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004892:	f000 f81d 	bl	80048d0 <HAL_RCC_GetSysClockFreq>
 8004896:	4601      	mov	r1, r0
 8004898:	4b0a      	ldr	r3, [pc, #40]	; (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	091b      	lsrs	r3, r3, #4
 800489e:	f003 030f 	and.w	r3, r3, #15
 80048a2:	4a09      	ldr	r2, [pc, #36]	; (80048c8 <HAL_RCC_ClockConfig+0x1c8>)
 80048a4:	5cd3      	ldrb	r3, [r2, r3]
 80048a6:	fa21 f303 	lsr.w	r3, r1, r3
 80048aa:	4a08      	ldr	r2, [pc, #32]	; (80048cc <HAL_RCC_ClockConfig+0x1cc>)
 80048ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80048ae:	2000      	movs	r0, #0
 80048b0:	f010 fc86 	bl	80151c0 <HAL_InitTick>

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	40023c00 	.word	0x40023c00
 80048c4:	40023800 	.word	0x40023800
 80048c8:	08015de8 	.word	0x08015de8
 80048cc:	2000002c 	.word	0x2000002c

080048d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80048d6:	2300      	movs	r3, #0
 80048d8:	607b      	str	r3, [r7, #4]
 80048da:	2300      	movs	r3, #0
 80048dc:	60fb      	str	r3, [r7, #12]
 80048de:	2300      	movs	r3, #0
 80048e0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80048e2:	2300      	movs	r3, #0
 80048e4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048e6:	4b50      	ldr	r3, [pc, #320]	; (8004a28 <HAL_RCC_GetSysClockFreq+0x158>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 030c 	and.w	r3, r3, #12
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	d007      	beq.n	8004902 <HAL_RCC_GetSysClockFreq+0x32>
 80048f2:	2b08      	cmp	r3, #8
 80048f4:	d008      	beq.n	8004908 <HAL_RCC_GetSysClockFreq+0x38>
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f040 808d 	bne.w	8004a16 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048fc:	4b4b      	ldr	r3, [pc, #300]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x15c>)
 80048fe:	60bb      	str	r3, [r7, #8]
       break;
 8004900:	e08c      	b.n	8004a1c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004902:	4b4b      	ldr	r3, [pc, #300]	; (8004a30 <HAL_RCC_GetSysClockFreq+0x160>)
 8004904:	60bb      	str	r3, [r7, #8]
      break;
 8004906:	e089      	b.n	8004a1c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004908:	4b47      	ldr	r3, [pc, #284]	; (8004a28 <HAL_RCC_GetSysClockFreq+0x158>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004910:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004912:	4b45      	ldr	r3, [pc, #276]	; (8004a28 <HAL_RCC_GetSysClockFreq+0x158>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d023      	beq.n	8004966 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800491e:	4b42      	ldr	r3, [pc, #264]	; (8004a28 <HAL_RCC_GetSysClockFreq+0x158>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	099b      	lsrs	r3, r3, #6
 8004924:	f04f 0400 	mov.w	r4, #0
 8004928:	f240 11ff 	movw	r1, #511	; 0x1ff
 800492c:	f04f 0200 	mov.w	r2, #0
 8004930:	ea03 0501 	and.w	r5, r3, r1
 8004934:	ea04 0602 	and.w	r6, r4, r2
 8004938:	4a3d      	ldr	r2, [pc, #244]	; (8004a30 <HAL_RCC_GetSysClockFreq+0x160>)
 800493a:	fb02 f106 	mul.w	r1, r2, r6
 800493e:	2200      	movs	r2, #0
 8004940:	fb02 f205 	mul.w	r2, r2, r5
 8004944:	440a      	add	r2, r1
 8004946:	493a      	ldr	r1, [pc, #232]	; (8004a30 <HAL_RCC_GetSysClockFreq+0x160>)
 8004948:	fba5 0101 	umull	r0, r1, r5, r1
 800494c:	1853      	adds	r3, r2, r1
 800494e:	4619      	mov	r1, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f04f 0400 	mov.w	r4, #0
 8004956:	461a      	mov	r2, r3
 8004958:	4623      	mov	r3, r4
 800495a:	f7fb fc59 	bl	8000210 <__aeabi_uldivmod>
 800495e:	4603      	mov	r3, r0
 8004960:	460c      	mov	r4, r1
 8004962:	60fb      	str	r3, [r7, #12]
 8004964:	e049      	b.n	80049fa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004966:	4b30      	ldr	r3, [pc, #192]	; (8004a28 <HAL_RCC_GetSysClockFreq+0x158>)
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	099b      	lsrs	r3, r3, #6
 800496c:	f04f 0400 	mov.w	r4, #0
 8004970:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004974:	f04f 0200 	mov.w	r2, #0
 8004978:	ea03 0501 	and.w	r5, r3, r1
 800497c:	ea04 0602 	and.w	r6, r4, r2
 8004980:	4629      	mov	r1, r5
 8004982:	4632      	mov	r2, r6
 8004984:	f04f 0300 	mov.w	r3, #0
 8004988:	f04f 0400 	mov.w	r4, #0
 800498c:	0154      	lsls	r4, r2, #5
 800498e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004992:	014b      	lsls	r3, r1, #5
 8004994:	4619      	mov	r1, r3
 8004996:	4622      	mov	r2, r4
 8004998:	1b49      	subs	r1, r1, r5
 800499a:	eb62 0206 	sbc.w	r2, r2, r6
 800499e:	f04f 0300 	mov.w	r3, #0
 80049a2:	f04f 0400 	mov.w	r4, #0
 80049a6:	0194      	lsls	r4, r2, #6
 80049a8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80049ac:	018b      	lsls	r3, r1, #6
 80049ae:	1a5b      	subs	r3, r3, r1
 80049b0:	eb64 0402 	sbc.w	r4, r4, r2
 80049b4:	f04f 0100 	mov.w	r1, #0
 80049b8:	f04f 0200 	mov.w	r2, #0
 80049bc:	00e2      	lsls	r2, r4, #3
 80049be:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80049c2:	00d9      	lsls	r1, r3, #3
 80049c4:	460b      	mov	r3, r1
 80049c6:	4614      	mov	r4, r2
 80049c8:	195b      	adds	r3, r3, r5
 80049ca:	eb44 0406 	adc.w	r4, r4, r6
 80049ce:	f04f 0100 	mov.w	r1, #0
 80049d2:	f04f 0200 	mov.w	r2, #0
 80049d6:	02a2      	lsls	r2, r4, #10
 80049d8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80049dc:	0299      	lsls	r1, r3, #10
 80049de:	460b      	mov	r3, r1
 80049e0:	4614      	mov	r4, r2
 80049e2:	4618      	mov	r0, r3
 80049e4:	4621      	mov	r1, r4
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f04f 0400 	mov.w	r4, #0
 80049ec:	461a      	mov	r2, r3
 80049ee:	4623      	mov	r3, r4
 80049f0:	f7fb fc0e 	bl	8000210 <__aeabi_uldivmod>
 80049f4:	4603      	mov	r3, r0
 80049f6:	460c      	mov	r4, r1
 80049f8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80049fa:	4b0b      	ldr	r3, [pc, #44]	; (8004a28 <HAL_RCC_GetSysClockFreq+0x158>)
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	0c1b      	lsrs	r3, r3, #16
 8004a00:	f003 0303 	and.w	r3, r3, #3
 8004a04:	3301      	adds	r3, #1
 8004a06:	005b      	lsls	r3, r3, #1
 8004a08:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a12:	60bb      	str	r3, [r7, #8]
      break;
 8004a14:	e002      	b.n	8004a1c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a16:	4b05      	ldr	r3, [pc, #20]	; (8004a2c <HAL_RCC_GetSysClockFreq+0x15c>)
 8004a18:	60bb      	str	r3, [r7, #8]
      break;
 8004a1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a1c:	68bb      	ldr	r3, [r7, #8]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a26:	bf00      	nop
 8004a28:	40023800 	.word	0x40023800
 8004a2c:	00f42400 	.word	0x00f42400
 8004a30:	017d7840 	.word	0x017d7840

08004a34 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a34:	b480      	push	{r7}
 8004a36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a38:	4b03      	ldr	r3, [pc, #12]	; (8004a48 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	2000002c 	.word	0x2000002c

08004a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a50:	f7ff fff0 	bl	8004a34 <HAL_RCC_GetHCLKFreq>
 8004a54:	4601      	mov	r1, r0
 8004a56:	4b05      	ldr	r3, [pc, #20]	; (8004a6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	0a9b      	lsrs	r3, r3, #10
 8004a5c:	f003 0307 	and.w	r3, r3, #7
 8004a60:	4a03      	ldr	r2, [pc, #12]	; (8004a70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a62:	5cd3      	ldrb	r3, [r2, r3]
 8004a64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	40023800 	.word	0x40023800
 8004a70:	08015df8 	.word	0x08015df8

08004a74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a78:	f7ff ffdc 	bl	8004a34 <HAL_RCC_GetHCLKFreq>
 8004a7c:	4601      	mov	r1, r0
 8004a7e:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	0b5b      	lsrs	r3, r3, #13
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	4a03      	ldr	r2, [pc, #12]	; (8004a98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a8a:	5cd3      	ldrb	r3, [r2, r3]
 8004a8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	40023800 	.word	0x40023800
 8004a98:	08015df8 	.word	0x08015df8

08004a9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	220f      	movs	r2, #15
 8004aaa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004aac:	4b12      	ldr	r3, [pc, #72]	; (8004af8 <HAL_RCC_GetClockConfig+0x5c>)
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f003 0203 	and.w	r2, r3, #3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ab8:	4b0f      	ldr	r3, [pc, #60]	; (8004af8 <HAL_RCC_GetClockConfig+0x5c>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ac4:	4b0c      	ldr	r3, [pc, #48]	; (8004af8 <HAL_RCC_GetClockConfig+0x5c>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004ad0:	4b09      	ldr	r3, [pc, #36]	; (8004af8 <HAL_RCC_GetClockConfig+0x5c>)
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	08db      	lsrs	r3, r3, #3
 8004ad6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004ade:	4b07      	ldr	r3, [pc, #28]	; (8004afc <HAL_RCC_GetClockConfig+0x60>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 020f 	and.w	r2, r3, #15
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	601a      	str	r2, [r3, #0]
}
 8004aea:	bf00      	nop
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	40023800 	.word	0x40023800
 8004afc:	40023c00 	.word	0x40023c00

08004b00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b088      	sub	sp, #32
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004b10:	2300      	movs	r3, #0
 8004b12:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004b14:	2300      	movs	r3, #0
 8004b16:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d012      	beq.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b28:	4b69      	ldr	r3, [pc, #420]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	4a68      	ldr	r2, [pc, #416]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b2e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004b32:	6093      	str	r3, [r2, #8]
 8004b34:	4b66      	ldr	r3, [pc, #408]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b3c:	4964      	ldr	r1, [pc, #400]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d017      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b5a:	4b5d      	ldr	r3, [pc, #372]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b68:	4959      	ldr	r1, [pc, #356]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b78:	d101      	bne.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004b86:	2301      	movs	r3, #1
 8004b88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d017      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b96:	4b4e      	ldr	r3, [pc, #312]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba4:	494a      	ldr	r1, [pc, #296]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bb4:	d101      	bne.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0320 	and.w	r3, r3, #32
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f000 808b 	beq.w	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004be4:	4b3a      	ldr	r3, [pc, #232]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	4a39      	ldr	r2, [pc, #228]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bee:	6413      	str	r3, [r2, #64]	; 0x40
 8004bf0:	4b37      	ldr	r3, [pc, #220]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bf8:	60bb      	str	r3, [r7, #8]
 8004bfa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004bfc:	4b35      	ldr	r3, [pc, #212]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a34      	ldr	r2, [pc, #208]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c08:	f7fb fca4 	bl	8000554 <HAL_GetTick>
 8004c0c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c10:	f7fb fca0 	bl	8000554 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b64      	cmp	r3, #100	; 0x64
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e355      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c22:	4b2c      	ldr	r3, [pc, #176]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0f0      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c2e:	4b28      	ldr	r3, [pc, #160]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c36:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d035      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d02e      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c4c:	4b20      	ldr	r3, [pc, #128]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c54:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c56:	4b1e      	ldr	r3, [pc, #120]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5a:	4a1d      	ldr	r2, [pc, #116]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c60:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c62:	4b1b      	ldr	r3, [pc, #108]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c66:	4a1a      	ldr	r2, [pc, #104]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c6c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004c6e:	4a18      	ldr	r2, [pc, #96]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c74:	4b16      	ldr	r3, [pc, #88]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d114      	bne.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c80:	f7fb fc68 	bl	8000554 <HAL_GetTick>
 8004c84:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c86:	e00a      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c88:	f7fb fc64 	bl	8000554 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d901      	bls.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e317      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c9e:	4b0c      	ldr	r3, [pc, #48]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d0ee      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cb6:	d111      	bne.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004cb8:	4b05      	ldr	r3, [pc, #20]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004cc4:	4b04      	ldr	r3, [pc, #16]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004cc6:	400b      	ands	r3, r1
 8004cc8:	4901      	ldr	r1, [pc, #4]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	608b      	str	r3, [r1, #8]
 8004cce:	e00b      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004cd0:	40023800 	.word	0x40023800
 8004cd4:	40007000 	.word	0x40007000
 8004cd8:	0ffffcff 	.word	0x0ffffcff
 8004cdc:	4bb0      	ldr	r3, [pc, #704]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	4aaf      	ldr	r2, [pc, #700]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004ce2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004ce6:	6093      	str	r3, [r2, #8]
 8004ce8:	4bad      	ldr	r3, [pc, #692]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004cea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cf4:	49aa      	ldr	r1, [pc, #680]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0310 	and.w	r3, r3, #16
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d010      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d06:	4ba6      	ldr	r3, [pc, #664]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d0c:	4aa4      	ldr	r2, [pc, #656]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d12:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004d16:	4ba2      	ldr	r3, [pc, #648]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d18:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d20:	499f      	ldr	r1, [pc, #636]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00a      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d34:	4b9a      	ldr	r3, [pc, #616]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d42:	4997      	ldr	r1, [pc, #604]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00a      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d56:	4b92      	ldr	r3, [pc, #584]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d64:	498e      	ldr	r1, [pc, #568]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00a      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d78:	4b89      	ldr	r3, [pc, #548]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d86:	4986      	ldr	r1, [pc, #536]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00a      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d9a:	4b81      	ldr	r3, [pc, #516]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da8:	497d      	ldr	r1, [pc, #500]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00a      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dbc:	4b78      	ldr	r3, [pc, #480]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc2:	f023 0203 	bic.w	r2, r3, #3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dca:	4975      	ldr	r1, [pc, #468]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00a      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004dde:	4b70      	ldr	r3, [pc, #448]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de4:	f023 020c 	bic.w	r2, r3, #12
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dec:	496c      	ldr	r1, [pc, #432]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00a      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e00:	4b67      	ldr	r3, [pc, #412]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e06:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e0e:	4964      	ldr	r1, [pc, #400]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00a      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e22:	4b5f      	ldr	r3, [pc, #380]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e28:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e30:	495b      	ldr	r1, [pc, #364]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00a      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e44:	4b56      	ldr	r3, [pc, #344]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e52:	4953      	ldr	r1, [pc, #332]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00a      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004e66:	4b4e      	ldr	r3, [pc, #312]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e6c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e74:	494a      	ldr	r1, [pc, #296]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00a      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004e88:	4b45      	ldr	r3, [pc, #276]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e8e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e96:	4942      	ldr	r1, [pc, #264]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00a      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004eaa:	4b3d      	ldr	r3, [pc, #244]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eb8:	4939      	ldr	r1, [pc, #228]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00a      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ecc:	4b34      	ldr	r3, [pc, #208]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004eda:	4931      	ldr	r1, [pc, #196]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d011      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004eee:	4b2c      	ldr	r3, [pc, #176]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004efc:	4928      	ldr	r1, [pc, #160]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f0c:	d101      	bne.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0308 	and.w	r3, r3, #8
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00a      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f2e:	4b1c      	ldr	r3, [pc, #112]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f34:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f3c:	4918      	ldr	r1, [pc, #96]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00b      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f50:	4b13      	ldr	r3, [pc, #76]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f56:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f60:	490f      	ldr	r1, [pc, #60]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d005      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f76:	f040 80d8 	bne.w	800512a <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f7a:	4b09      	ldr	r3, [pc, #36]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a08      	ldr	r2, [pc, #32]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f80:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f86:	f7fb fae5 	bl	8000554 <HAL_GetTick>
 8004f8a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f8c:	e00a      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f8e:	f7fb fae1 	bl	8000554 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	2b64      	cmp	r3, #100	; 0x64
 8004f9a:	d903      	bls.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e196      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8004fa0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fa4:	4b6c      	ldr	r3, [pc, #432]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1ee      	bne.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0301 	and.w	r3, r3, #1
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d021      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d11d      	bne.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004fc4:	4b64      	ldr	r3, [pc, #400]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004fc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fca:	0c1b      	lsrs	r3, r3, #16
 8004fcc:	f003 0303 	and.w	r3, r3, #3
 8004fd0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004fd2:	4b61      	ldr	r3, [pc, #388]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004fd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fd8:	0e1b      	lsrs	r3, r3, #24
 8004fda:	f003 030f 	and.w	r3, r3, #15
 8004fde:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	019a      	lsls	r2, r3, #6
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	041b      	lsls	r3, r3, #16
 8004fea:	431a      	orrs	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	061b      	lsls	r3, r3, #24
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	071b      	lsls	r3, r3, #28
 8004ff8:	4957      	ldr	r1, [pc, #348]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d004      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x516>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005010:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005014:	d00a      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800501e:	2b00      	cmp	r3, #0
 8005020:	d02e      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005026:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800502a:	d129      	bne.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800502c:	4b4a      	ldr	r3, [pc, #296]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800502e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005032:	0c1b      	lsrs	r3, r3, #16
 8005034:	f003 0303 	and.w	r3, r3, #3
 8005038:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800503a:	4b47      	ldr	r3, [pc, #284]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800503c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005040:	0f1b      	lsrs	r3, r3, #28
 8005042:	f003 0307 	and.w	r3, r3, #7
 8005046:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	019a      	lsls	r2, r3, #6
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	041b      	lsls	r3, r3, #16
 8005052:	431a      	orrs	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	061b      	lsls	r3, r3, #24
 800505a:	431a      	orrs	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	071b      	lsls	r3, r3, #28
 8005060:	493d      	ldr	r1, [pc, #244]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005062:	4313      	orrs	r3, r2
 8005064:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005068:	4b3b      	ldr	r3, [pc, #236]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800506a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800506e:	f023 021f 	bic.w	r2, r3, #31
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	3b01      	subs	r3, #1
 8005078:	4937      	ldr	r1, [pc, #220]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800507a:	4313      	orrs	r3, r2
 800507c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d01d      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800508c:	4b32      	ldr	r3, [pc, #200]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800508e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005092:	0e1b      	lsrs	r3, r3, #24
 8005094:	f003 030f 	and.w	r3, r3, #15
 8005098:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800509a:	4b2f      	ldr	r3, [pc, #188]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800509c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050a0:	0f1b      	lsrs	r3, r3, #28
 80050a2:	f003 0307 	and.w	r3, r3, #7
 80050a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	019a      	lsls	r2, r3, #6
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	041b      	lsls	r3, r3, #16
 80050b4:	431a      	orrs	r2, r3
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	061b      	lsls	r3, r3, #24
 80050ba:	431a      	orrs	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	071b      	lsls	r3, r3, #28
 80050c0:	4925      	ldr	r1, [pc, #148]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d011      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	019a      	lsls	r2, r3, #6
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	041b      	lsls	r3, r3, #16
 80050e0:	431a      	orrs	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	061b      	lsls	r3, r3, #24
 80050e8:	431a      	orrs	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	071b      	lsls	r3, r3, #28
 80050f0:	4919      	ldr	r1, [pc, #100]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80050f8:	4b17      	ldr	r3, [pc, #92]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a16      	ldr	r2, [pc, #88]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80050fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005102:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005104:	f7fb fa26 	bl	8000554 <HAL_GetTick>
 8005108:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800510a:	e008      	b.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800510c:	f7fb fa22 	bl	8000554 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b64      	cmp	r3, #100	; 0x64
 8005118:	d901      	bls.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e0d7      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800511e:	4b0e      	ldr	r3, [pc, #56]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d0f0      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	2b01      	cmp	r3, #1
 800512e:	f040 80cd 	bne.w	80052cc <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005132:	4b09      	ldr	r3, [pc, #36]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a08      	ldr	r2, [pc, #32]	; (8005158 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005138:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800513c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800513e:	f7fb fa09 	bl	8000554 <HAL_GetTick>
 8005142:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005144:	e00a      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005146:	f7fb fa05 	bl	8000554 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	2b64      	cmp	r3, #100	; 0x64
 8005152:	d903      	bls.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e0ba      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8005158:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800515c:	4b5e      	ldr	r3, [pc, #376]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005164:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005168:	d0ed      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800517a:	2b00      	cmp	r3, #0
 800517c:	d009      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005186:	2b00      	cmp	r3, #0
 8005188:	d02e      	beq.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	2b00      	cmp	r3, #0
 8005190:	d12a      	bne.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005192:	4b51      	ldr	r3, [pc, #324]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005198:	0c1b      	lsrs	r3, r3, #16
 800519a:	f003 0303 	and.w	r3, r3, #3
 800519e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80051a0:	4b4d      	ldr	r3, [pc, #308]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80051a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a6:	0f1b      	lsrs	r3, r3, #28
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	019a      	lsls	r2, r3, #6
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	041b      	lsls	r3, r3, #16
 80051b8:	431a      	orrs	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	061b      	lsls	r3, r3, #24
 80051c0:	431a      	orrs	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	071b      	lsls	r3, r3, #28
 80051c6:	4944      	ldr	r1, [pc, #272]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80051ce:	4b42      	ldr	r3, [pc, #264]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80051d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051dc:	3b01      	subs	r3, #1
 80051de:	021b      	lsls	r3, r3, #8
 80051e0:	493d      	ldr	r1, [pc, #244]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80051e2:	4313      	orrs	r3, r2
 80051e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d022      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051fc:	d11d      	bne.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80051fe:	4b36      	ldr	r3, [pc, #216]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005204:	0e1b      	lsrs	r3, r3, #24
 8005206:	f003 030f 	and.w	r3, r3, #15
 800520a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800520c:	4b32      	ldr	r3, [pc, #200]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800520e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005212:	0f1b      	lsrs	r3, r3, #28
 8005214:	f003 0307 	and.w	r3, r3, #7
 8005218:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	019a      	lsls	r2, r3, #6
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	041b      	lsls	r3, r3, #16
 8005226:	431a      	orrs	r2, r3
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	061b      	lsls	r3, r3, #24
 800522c:	431a      	orrs	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	071b      	lsls	r3, r3, #28
 8005232:	4929      	ldr	r1, [pc, #164]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005234:	4313      	orrs	r3, r2
 8005236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0308 	and.w	r3, r3, #8
 8005242:	2b00      	cmp	r3, #0
 8005244:	d028      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005246:	4b24      	ldr	r3, [pc, #144]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524c:	0e1b      	lsrs	r3, r3, #24
 800524e:	f003 030f 	and.w	r3, r3, #15
 8005252:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005254:	4b20      	ldr	r3, [pc, #128]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800525a:	0c1b      	lsrs	r3, r3, #16
 800525c:	f003 0303 	and.w	r3, r3, #3
 8005260:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	019a      	lsls	r2, r3, #6
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	041b      	lsls	r3, r3, #16
 800526c:	431a      	orrs	r2, r3
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	061b      	lsls	r3, r3, #24
 8005272:	431a      	orrs	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	071b      	lsls	r3, r3, #28
 800527a:	4917      	ldr	r1, [pc, #92]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800527c:	4313      	orrs	r3, r2
 800527e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005282:	4b15      	ldr	r3, [pc, #84]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005284:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005288:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005290:	4911      	ldr	r1, [pc, #68]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005292:	4313      	orrs	r3, r2
 8005294:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005298:	4b0f      	ldr	r3, [pc, #60]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a0e      	ldr	r2, [pc, #56]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800529e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052a4:	f7fb f956 	bl	8000554 <HAL_GetTick>
 80052a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052aa:	e008      	b.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80052ac:	f7fb f952 	bl	8000554 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b64      	cmp	r3, #100	; 0x64
 80052b8:	d901      	bls.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e007      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052be:	4b06      	ldr	r3, [pc, #24]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052ca:	d1ef      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3720      	adds	r7, #32
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	40023800 	.word	0x40023800

080052dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80052dc:	b480      	push	{r7}
 80052de:	b087      	sub	sp, #28
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80052e4:	2300      	movs	r3, #0
 80052e6:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80052e8:	2300      	movs	r3, #0
 80052ea:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80052ec:	2300      	movs	r3, #0
 80052ee:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80052f0:	2300      	movs	r3, #0
 80052f2:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80052fa:	f040 8086 	bne.w	800540a <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 80052fe:	4b8d      	ldr	r3, [pc, #564]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005304:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800530c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005314:	d03e      	beq.n	8005394 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8005316:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800531a:	d073      	beq.n	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 800531c:	2b00      	cmp	r3, #0
 800531e:	d000      	beq.n	8005322 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8005320:	e074      	b.n	800540c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005322:	4b84      	ldr	r3, [pc, #528]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d108      	bne.n	8005340 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800532e:	4b81      	ldr	r3, [pc, #516]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005336:	4a80      	ldr	r2, [pc, #512]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8005338:	fbb2 f3f3 	udiv	r3, r2, r3
 800533c:	613b      	str	r3, [r7, #16]
 800533e:	e007      	b.n	8005350 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005340:	4b7c      	ldr	r3, [pc, #496]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005348:	4a7c      	ldr	r2, [pc, #496]	; (800553c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800534a:	fbb2 f3f3 	udiv	r3, r2, r3
 800534e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005350:	4b78      	ldr	r3, [pc, #480]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005356:	0e1b      	lsrs	r3, r3, #24
 8005358:	f003 030f 	and.w	r3, r3, #15
 800535c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800535e:	4b75      	ldr	r3, [pc, #468]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005364:	099b      	lsrs	r3, r3, #6
 8005366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	fb02 f203 	mul.w	r2, r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	fbb2 f3f3 	udiv	r3, r2, r3
 8005376:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005378:	4b6e      	ldr	r3, [pc, #440]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800537a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800537e:	0a1b      	lsrs	r3, r3, #8
 8005380:	f003 031f 	and.w	r3, r3, #31
 8005384:	3301      	adds	r3, #1
 8005386:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005388:	697a      	ldr	r2, [r7, #20]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005390:	617b      	str	r3, [r7, #20]
        break;
 8005392:	e03b      	b.n	800540c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005394:	4b67      	ldr	r3, [pc, #412]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d108      	bne.n	80053b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80053a0:	4b64      	ldr	r3, [pc, #400]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053a8:	4a63      	ldr	r2, [pc, #396]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80053aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ae:	613b      	str	r3, [r7, #16]
 80053b0:	e007      	b.n	80053c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80053b2:	4b60      	ldr	r3, [pc, #384]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053ba:	4a60      	ldr	r2, [pc, #384]	; (800553c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80053bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80053c2:	4b5c      	ldr	r3, [pc, #368]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80053c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053c8:	0e1b      	lsrs	r3, r3, #24
 80053ca:	f003 030f 	and.w	r3, r3, #15
 80053ce:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80053d0:	4b58      	ldr	r3, [pc, #352]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80053d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053d6:	099b      	lsrs	r3, r3, #6
 80053d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	fb02 f203 	mul.w	r2, r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80053ea:	4b52      	ldr	r3, [pc, #328]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80053ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053f0:	f003 031f 	and.w	r3, r3, #31
 80053f4:	3301      	adds	r3, #1
 80053f6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005400:	617b      	str	r3, [r7, #20]
        break;
 8005402:	e003      	b.n	800540c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005404:	4b4e      	ldr	r3, [pc, #312]	; (8005540 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8005406:	617b      	str	r3, [r7, #20]
        break;
 8005408:	e000      	b.n	800540c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 800540a:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005412:	f040 8086 	bne.w	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8005416:	4b47      	ldr	r3, [pc, #284]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005418:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800541c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005424:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800542c:	d03e      	beq.n	80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800542e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005432:	d073      	beq.n	800551c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8005434:	2b00      	cmp	r3, #0
 8005436:	d000      	beq.n	800543a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8005438:	e074      	b.n	8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800543a:	4b3e      	ldr	r3, [pc, #248]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d108      	bne.n	8005458 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005446:	4b3b      	ldr	r3, [pc, #236]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800544e:	4a3a      	ldr	r2, [pc, #232]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8005450:	fbb2 f3f3 	udiv	r3, r2, r3
 8005454:	613b      	str	r3, [r7, #16]
 8005456:	e007      	b.n	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005458:	4b36      	ldr	r3, [pc, #216]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005460:	4a36      	ldr	r2, [pc, #216]	; (800553c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005462:	fbb2 f3f3 	udiv	r3, r2, r3
 8005466:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005468:	4b32      	ldr	r3, [pc, #200]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800546a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800546e:	0e1b      	lsrs	r3, r3, #24
 8005470:	f003 030f 	and.w	r3, r3, #15
 8005474:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005476:	4b2f      	ldr	r3, [pc, #188]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547c:	099b      	lsrs	r3, r3, #6
 800547e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	fb02 f203 	mul.w	r2, r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	fbb2 f3f3 	udiv	r3, r2, r3
 800548e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8005490:	4b28      	ldr	r3, [pc, #160]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005492:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005496:	0a1b      	lsrs	r3, r3, #8
 8005498:	f003 031f 	and.w	r3, r3, #31
 800549c:	3301      	adds	r3, #1
 800549e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a8:	617b      	str	r3, [r7, #20]
        break;
 80054aa:	e03b      	b.n	8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80054ac:	4b21      	ldr	r3, [pc, #132]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d108      	bne.n	80054ca <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80054b8:	4b1e      	ldr	r3, [pc, #120]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054c0:	4a1d      	ldr	r2, [pc, #116]	; (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80054c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c6:	613b      	str	r3, [r7, #16]
 80054c8:	e007      	b.n	80054da <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80054ca:	4b1a      	ldr	r3, [pc, #104]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054d2:	4a1a      	ldr	r2, [pc, #104]	; (800553c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80054d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80054da:	4b16      	ldr	r3, [pc, #88]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80054dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054e0:	0e1b      	lsrs	r3, r3, #24
 80054e2:	f003 030f 	and.w	r3, r3, #15
 80054e6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80054e8:	4b12      	ldr	r3, [pc, #72]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80054ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054ee:	099b      	lsrs	r3, r3, #6
 80054f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	fb02 f203 	mul.w	r2, r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005500:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8005502:	4b0c      	ldr	r3, [pc, #48]	; (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005508:	f003 031f 	and.w	r3, r3, #31
 800550c:	3301      	adds	r3, #1
 800550e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	fbb2 f3f3 	udiv	r3, r2, r3
 8005518:	617b      	str	r3, [r7, #20]
        break;
 800551a:	e003      	b.n	8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 800551c:	4b08      	ldr	r3, [pc, #32]	; (8005540 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800551e:	617b      	str	r3, [r7, #20]
        break;
 8005520:	e000      	b.n	8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 8005522:	bf00      	nop

  return frequency;
 8005524:	697b      	ldr	r3, [r7, #20]
}
 8005526:	4618      	mov	r0, r3
 8005528:	371c      	adds	r7, #28
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	40023800 	.word	0x40023800
 8005538:	00f42400 	.word	0x00f42400
 800553c:	017d7840 	.word	0x017d7840
 8005540:	00bb8000 	.word	0x00bb8000

08005544 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e06b      	b.n	800562e <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	7f5b      	ldrb	r3, [r3, #29]
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	d105      	bne.n	800556c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f00f f9f0 	bl	801494c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2202      	movs	r2, #2
 8005570:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	22ca      	movs	r2, #202	; 0xca
 8005578:	625a      	str	r2, [r3, #36]	; 0x24
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2253      	movs	r2, #83	; 0x53
 8005580:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 fb00 	bl	8005b88 <RTC_EnterInitMode>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d008      	beq.n	80055a0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	22ff      	movs	r2, #255	; 0xff
 8005594:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2204      	movs	r2, #4
 800559a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e046      	b.n	800562e <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6899      	ldr	r1, [r3, #8]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	4b23      	ldr	r3, [pc, #140]	; (8005638 <HAL_RTC_Init+0xf4>)
 80055ac:	400b      	ands	r3, r1
 80055ae:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6899      	ldr	r1, [r3, #8]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	431a      	orrs	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	431a      	orrs	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	68d2      	ldr	r2, [r2, #12]
 80055d6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6919      	ldr	r1, [r3, #16]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	041a      	lsls	r2, r3, #16
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68da      	ldr	r2, [r3, #12]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055fa:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 0208 	bic.w	r2, r2, #8
 800560a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	699a      	ldr	r2, [r3, #24]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	430a      	orrs	r2, r1
 800561c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	22ff      	movs	r2, #255	; 0xff
 8005624:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800562c:	2300      	movs	r3, #0
  }
}
 800562e:	4618      	mov	r0, r3
 8005630:	3708      	adds	r7, #8
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	ff8fffbf 	.word	0xff8fffbf

0800563c <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800563c:	b590      	push	{r4, r7, lr}
 800563e:	b087      	sub	sp, #28
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8005648:	2300      	movs	r3, #0
 800564a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	7f1b      	ldrb	r3, [r3, #28]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d101      	bne.n	8005658 <HAL_RTC_SetTime+0x1c>
 8005654:	2302      	movs	r3, #2
 8005656:	e0a8      	b.n	80057aa <HAL_RTC_SetTime+0x16e>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2201      	movs	r2, #1
 800565c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2202      	movs	r2, #2
 8005662:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d126      	bne.n	80056b8 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005674:	2b00      	cmp	r3, #0
 8005676:	d102      	bne.n	800567e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	2200      	movs	r2, #0
 800567c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	4618      	mov	r0, r3
 8005684:	f000 faac 	bl	8005be0 <RTC_ByteToBcd2>
 8005688:	4603      	mov	r3, r0
 800568a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	785b      	ldrb	r3, [r3, #1]
 8005690:	4618      	mov	r0, r3
 8005692:	f000 faa5 	bl	8005be0 <RTC_ByteToBcd2>
 8005696:	4603      	mov	r3, r0
 8005698:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800569a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	789b      	ldrb	r3, [r3, #2]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f000 fa9d 	bl	8005be0 <RTC_ByteToBcd2>
 80056a6:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80056a8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	7b1b      	ldrb	r3, [r3, #12]
 80056b0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80056b2:	4313      	orrs	r3, r2
 80056b4:	617b      	str	r3, [r7, #20]
 80056b6:	e018      	b.n	80056ea <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d102      	bne.n	80056cc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	2200      	movs	r2, #0
 80056ca:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	785b      	ldrb	r3, [r3, #1]
 80056d6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80056d8:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80056de:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	7b1b      	ldrb	r3, [r3, #12]
 80056e4:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80056e6:	4313      	orrs	r3, r2
 80056e8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	22ca      	movs	r2, #202	; 0xca
 80056f0:	625a      	str	r2, [r3, #36]	; 0x24
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2253      	movs	r2, #83	; 0x53
 80056f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f000 fa44 	bl	8005b88 <RTC_EnterInitMode>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00b      	beq.n	800571e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	22ff      	movs	r2, #255	; 0xff
 800570c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2204      	movs	r2, #4
 8005712:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e045      	b.n	80057aa <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	6979      	ldr	r1, [r7, #20]
 8005724:	4b23      	ldr	r3, [pc, #140]	; (80057b4 <HAL_RTC_SetTime+0x178>)
 8005726:	400b      	ands	r3, r1
 8005728:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689a      	ldr	r2, [r3, #8]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005738:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	6899      	ldr	r1, [r3, #8]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	691a      	ldr	r2, [r3, #16]
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	431a      	orrs	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68da      	ldr	r2, [r3, #12]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005760:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f003 0320 	and.w	r3, r3, #32
 800576c:	2b00      	cmp	r3, #0
 800576e:	d111      	bne.n	8005794 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f000 f9e1 	bl	8005b38 <HAL_RTC_WaitForSynchro>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00b      	beq.n	8005794 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	22ff      	movs	r2, #255	; 0xff
 8005782:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2204      	movs	r2, #4
 8005788:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e00a      	b.n	80057aa <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	22ff      	movs	r2, #255	; 0xff
 800579a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2201      	movs	r2, #1
 80057a0:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80057a8:	2300      	movs	r3, #0
  }
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	371c      	adds	r7, #28
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd90      	pop	{r4, r7, pc}
 80057b2:	bf00      	nop
 80057b4:	007f7f7f 	.word	0x007f7f7f

080057b8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80057b8:	b590      	push	{r4, r7, lr}
 80057ba:	b087      	sub	sp, #28
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80057c4:	2300      	movs	r3, #0
 80057c6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	7f1b      	ldrb	r3, [r3, #28]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d101      	bne.n	80057d4 <HAL_RTC_SetDate+0x1c>
 80057d0:	2302      	movs	r3, #2
 80057d2:	e092      	b.n	80058fa <HAL_RTC_SetDate+0x142>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2201      	movs	r2, #1
 80057d8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2202      	movs	r2, #2
 80057de:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10e      	bne.n	8005804 <HAL_RTC_SetDate+0x4c>
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	785b      	ldrb	r3, [r3, #1]
 80057ea:	f003 0310 	and.w	r3, r3, #16
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d008      	beq.n	8005804 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	785b      	ldrb	r3, [r3, #1]
 80057f6:	f023 0310 	bic.w	r3, r3, #16
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	330a      	adds	r3, #10
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d11c      	bne.n	8005844 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	78db      	ldrb	r3, [r3, #3]
 800580e:	4618      	mov	r0, r3
 8005810:	f000 f9e6 	bl	8005be0 <RTC_ByteToBcd2>
 8005814:	4603      	mov	r3, r0
 8005816:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	785b      	ldrb	r3, [r3, #1]
 800581c:	4618      	mov	r0, r3
 800581e:	f000 f9df 	bl	8005be0 <RTC_ByteToBcd2>
 8005822:	4603      	mov	r3, r0
 8005824:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005826:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	789b      	ldrb	r3, [r3, #2]
 800582c:	4618      	mov	r0, r3
 800582e:	f000 f9d7 	bl	8005be0 <RTC_ByteToBcd2>
 8005832:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8005834:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800583e:	4313      	orrs	r3, r2
 8005840:	617b      	str	r3, [r7, #20]
 8005842:	e00e      	b.n	8005862 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	78db      	ldrb	r3, [r3, #3]
 8005848:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	785b      	ldrb	r3, [r3, #1]
 800584e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005850:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8005856:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800585e:	4313      	orrs	r3, r2
 8005860:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	22ca      	movs	r2, #202	; 0xca
 8005868:	625a      	str	r2, [r3, #36]	; 0x24
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2253      	movs	r2, #83	; 0x53
 8005870:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f000 f988 	bl	8005b88 <RTC_EnterInitMode>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00b      	beq.n	8005896 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	22ff      	movs	r2, #255	; 0xff
 8005884:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2204      	movs	r2, #4
 800588a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e031      	b.n	80058fa <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	6979      	ldr	r1, [r7, #20]
 800589c:	4b19      	ldr	r3, [pc, #100]	; (8005904 <HAL_RTC_SetDate+0x14c>)
 800589e:	400b      	ands	r3, r1
 80058a0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68da      	ldr	r2, [r3, #12]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058b0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f003 0320 	and.w	r3, r3, #32
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d111      	bne.n	80058e4 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f000 f939 	bl	8005b38 <HAL_RTC_WaitForSynchro>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00b      	beq.n	80058e4 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	22ff      	movs	r2, #255	; 0xff
 80058d2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2204      	movs	r2, #4
 80058d8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e00a      	b.n	80058fa <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	22ff      	movs	r2, #255	; 0xff
 80058ea:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2201      	movs	r2, #1
 80058f0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80058f8:	2300      	movs	r3, #0
  }
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	371c      	adds	r7, #28
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd90      	pop	{r4, r7, pc}
 8005902:	bf00      	nop
 8005904:	00ffff3f 	.word	0x00ffff3f

08005908 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005908:	b590      	push	{r4, r7, lr}
 800590a:	b089      	sub	sp, #36	; 0x24
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8005914:	2300      	movs	r3, #0
 8005916:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8005918:	2300      	movs	r3, #0
 800591a:	61fb      	str	r3, [r7, #28]
 800591c:	2300      	movs	r3, #0
 800591e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	7f1b      	ldrb	r3, [r3, #28]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d101      	bne.n	800592c <HAL_RTC_SetAlarm+0x24>
 8005928:	2302      	movs	r3, #2
 800592a:	e101      	b.n	8005b30 <HAL_RTC_SetAlarm+0x228>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2201      	movs	r2, #1
 8005930:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2202      	movs	r2, #2
 8005936:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d137      	bne.n	80059ae <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005948:	2b00      	cmp	r3, #0
 800594a:	d102      	bne.n	8005952 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	2200      	movs	r2, #0
 8005950:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	4618      	mov	r0, r3
 8005958:	f000 f942 	bl	8005be0 <RTC_ByteToBcd2>
 800595c:	4603      	mov	r3, r0
 800595e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	785b      	ldrb	r3, [r3, #1]
 8005964:	4618      	mov	r0, r3
 8005966:	f000 f93b 	bl	8005be0 <RTC_ByteToBcd2>
 800596a:	4603      	mov	r3, r0
 800596c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800596e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	789b      	ldrb	r3, [r3, #2]
 8005974:	4618      	mov	r0, r3
 8005976:	f000 f933 	bl	8005be0 <RTC_ByteToBcd2>
 800597a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800597c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	7b1b      	ldrb	r3, [r3, #12]
 8005984:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005986:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005990:	4618      	mov	r0, r3
 8005992:	f000 f925 	bl	8005be0 <RTC_ByteToBcd2>
 8005996:	4603      	mov	r3, r0
 8005998:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800599a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80059a2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80059a8:	4313      	orrs	r3, r2
 80059aa:	61fb      	str	r3, [r7, #28]
 80059ac:	e023      	b.n	80059f6 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d102      	bne.n	80059c2 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	2200      	movs	r2, #0
 80059c0:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	785b      	ldrb	r3, [r3, #1]
 80059cc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80059ce:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80059d4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	7b1b      	ldrb	r3, [r3, #12]
 80059da:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80059dc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80059e4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80059e6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80059ec:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80059f2:	4313      	orrs	r3, r2
 80059f4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	685a      	ldr	r2, [r3, #4]
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	69db      	ldr	r3, [r3, #28]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	22ca      	movs	r2, #202	; 0xca
 8005a08:	625a      	str	r2, [r3, #36]	; 0x24
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2253      	movs	r2, #83	; 0x53
 8005a10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a1a:	d13f      	bne.n	8005a9c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689a      	ldr	r2, [r3, #8]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a2a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	689a      	ldr	r2, [r3, #8]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a3a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a3c:	f7fa fd8a 	bl	8000554 <HAL_GetTick>
 8005a40:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005a42:	e013      	b.n	8005a6c <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005a44:	f7fa fd86 	bl	8000554 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a52:	d90b      	bls.n	8005a6c <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	22ff      	movs	r2, #255	; 0xff
 8005a5a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2203      	movs	r2, #3
 8005a60:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e061      	b.n	8005b30 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d0e4      	beq.n	8005a44 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	69fa      	ldr	r2, [r7, #28]
 8005a80:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	689a      	ldr	r2, [r3, #8]
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a98:	609a      	str	r2, [r3, #8]
 8005a9a:	e03e      	b.n	8005b1a <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689a      	ldr	r2, [r3, #8]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005aaa:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689a      	ldr	r2, [r3, #8]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005aba:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005abc:	f7fa fd4a 	bl	8000554 <HAL_GetTick>
 8005ac0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8005ac2:	e013      	b.n	8005aec <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005ac4:	f7fa fd46 	bl	8000554 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ad2:	d90b      	bls.n	8005aec <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	22ff      	movs	r2, #255	; 0xff
 8005ada:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2203      	movs	r2, #3
 8005ae0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e021      	b.n	8005b30 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d0e4      	beq.n	8005ac4 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	69fa      	ldr	r2, [r7, #28]
 8005b00:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	689a      	ldr	r2, [r3, #8]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b18:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	22ff      	movs	r2, #255	; 0xff
 8005b20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2201      	movs	r2, #1
 8005b26:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3724      	adds	r7, #36	; 0x24
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd90      	pop	{r4, r7, pc}

08005b38 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005b40:	2300      	movs	r3, #0
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b52:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b54:	f7fa fcfe 	bl	8000554 <HAL_GetTick>
 8005b58:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005b5a:	e009      	b.n	8005b70 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005b5c:	f7fa fcfa 	bl	8000554 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b6a:	d901      	bls.n	8005b70 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e007      	b.n	8005b80 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	f003 0320 	and.w	r3, r3, #32
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d0ee      	beq.n	8005b5c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005b90:	2300      	movs	r3, #0
 8005b92:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d119      	bne.n	8005bd6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8005baa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005bac:	f7fa fcd2 	bl	8000554 <HAL_GetTick>
 8005bb0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005bb2:	e009      	b.n	8005bc8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005bb4:	f7fa fcce 	bl	8000554 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bc2:	d901      	bls.n	8005bc8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e007      	b.n	8005bd8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d0ee      	beq.n	8005bb4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	4603      	mov	r3, r0
 8005be8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8005bea:	2300      	movs	r3, #0
 8005bec:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8005bee:	e005      	b.n	8005bfc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8005bf6:	79fb      	ldrb	r3, [r7, #7]
 8005bf8:	3b0a      	subs	r3, #10
 8005bfa:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8005bfc:	79fb      	ldrb	r3, [r7, #7]
 8005bfe:	2b09      	cmp	r3, #9
 8005c00:	d8f6      	bhi.n	8005bf0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	011b      	lsls	r3, r3, #4
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	79fb      	ldrb	r3, [r7, #7]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	b2db      	uxtb	r3, r3
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3714      	adds	r7, #20
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b087      	sub	sp, #28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	7f1b      	ldrb	r3, [r3, #28]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d101      	bne.n	8005c38 <HAL_RTCEx_SetTimeStamp+0x1c>
 8005c34:	2302      	movs	r3, #2
 8005c36:	e03e      	b.n	8005cb6 <HAL_RTCEx_SetTimeStamp+0x9a>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2202      	movs	r2, #2
 8005c42:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	689a      	ldr	r2, [r3, #8]
 8005c4a:	4b1e      	ldr	r3, [pc, #120]	; (8005cc4 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8005c50:	697a      	ldr	r2, [r7, #20]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	22ca      	movs	r2, #202	; 0xca
 8005c5e:	625a      	str	r2, [r3, #36]	; 0x24
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2253      	movs	r2, #83	; 0x53
 8005c66:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 0206 	bic.w	r2, r2, #6
 8005c76:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	430a      	orrs	r2, r1
 8005c86:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689a      	ldr	r2, [r3, #8]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c9e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	22ff      	movs	r2, #255	; 0xff
 8005ca6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2201      	movs	r2, #1
 8005cac:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	371c      	adds	r7, #28
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	fffff7f7 	.word	0xfffff7f7

08005cc8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b088      	sub	sp, #32
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e149      	b.n	8005f7a <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d106      	bne.n	8005d00 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f00f f9f6 	bl	80150ec <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2202      	movs	r2, #2
 8005d04:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 f94f 	bl	8005fac <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d007      	beq.n	8005d26 <HAL_SAI_Init+0x5e>
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d302      	bcc.n	8005d20 <HAL_SAI_Init+0x58>
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d006      	beq.n	8005d2c <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8005d1e:	e008      	b.n	8005d32 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 8005d20:	2300      	movs	r3, #0
 8005d22:	61fb      	str	r3, [r7, #28]
      break;
 8005d24:	e005      	b.n	8005d32 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005d26:	2310      	movs	r3, #16
 8005d28:	61fb      	str	r3, [r7, #28]
      break;
 8005d2a:	e002      	b.n	8005d32 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005d2c:	2320      	movs	r3, #32
 8005d2e:	61fb      	str	r3, [r7, #28]
      break;
 8005d30:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	2b03      	cmp	r3, #3
 8005d38:	d81d      	bhi.n	8005d76 <HAL_SAI_Init+0xae>
 8005d3a:	a201      	add	r2, pc, #4	; (adr r2, 8005d40 <HAL_SAI_Init+0x78>)
 8005d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d40:	08005d51 	.word	0x08005d51
 8005d44:	08005d57 	.word	0x08005d57
 8005d48:	08005d5f 	.word	0x08005d5f
 8005d4c:	08005d67 	.word	0x08005d67
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8005d50:	2300      	movs	r3, #0
 8005d52:	617b      	str	r3, [r7, #20]
      }
      break;
 8005d54:	e010      	b.n	8005d78 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8005d56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d5a:	617b      	str	r3, [r7, #20]
      }
      break;
 8005d5c:	e00c      	b.n	8005d78 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8005d5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d62:	617b      	str	r3, [r7, #20]
      }
      break;
 8005d64:	e008      	b.n	8005d78 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8005d66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d6a:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	f043 0301 	orr.w	r3, r3, #1
 8005d72:	61fb      	str	r3, [r7, #28]
      }
      break;
 8005d74:	e000      	b.n	8005d78 <HAL_SAI_Init+0xb0>
  default:
    break;
 8005d76:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a81      	ldr	r2, [pc, #516]	; (8005f84 <HAL_SAI_Init+0x2bc>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d004      	beq.n	8005d8c <HAL_SAI_Init+0xc4>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a80      	ldr	r2, [pc, #512]	; (8005f88 <HAL_SAI_Init+0x2c0>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d103      	bne.n	8005d94 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8005d8c:	4a7f      	ldr	r2, [pc, #508]	; (8005f8c <HAL_SAI_Init+0x2c4>)
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	6013      	str	r3, [r2, #0]
 8005d92:	e002      	b.n	8005d9a <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005d94:	4a7e      	ldr	r2, [pc, #504]	; (8005f90 <HAL_SAI_Init+0x2c8>)
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	69db      	ldr	r3, [r3, #28]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d043      	beq.n	8005e2a <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 8005da2:	2300      	movs	r3, #0
 8005da4:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a76      	ldr	r2, [pc, #472]	; (8005f84 <HAL_SAI_Init+0x2bc>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d004      	beq.n	8005dba <HAL_SAI_Init+0xf2>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a74      	ldr	r2, [pc, #464]	; (8005f88 <HAL_SAI_Init+0x2c0>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d104      	bne.n	8005dc4 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005dba:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005dbe:	f7ff fa8d 	bl	80052dc <HAL_RCCEx_GetPeriphCLKFreq>
 8005dc2:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a72      	ldr	r2, [pc, #456]	; (8005f94 <HAL_SAI_Init+0x2cc>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d004      	beq.n	8005dd8 <HAL_SAI_Init+0x110>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a71      	ldr	r2, [pc, #452]	; (8005f98 <HAL_SAI_Init+0x2d0>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d104      	bne.n	8005de2 <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005dd8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005ddc:	f7ff fa7e 	bl	80052dc <HAL_RCCEx_GetPeriphCLKFreq>
 8005de0:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	4613      	mov	r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	005b      	lsls	r3, r3, #1
 8005dec:	461a      	mov	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	025b      	lsls	r3, r3, #9
 8005df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df8:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	4a67      	ldr	r2, [pc, #412]	; (8005f9c <HAL_SAI_Init+0x2d4>)
 8005dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8005e02:	08da      	lsrs	r2, r3, #3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8005e08:	68f9      	ldr	r1, [r7, #12]
 8005e0a:	4b64      	ldr	r3, [pc, #400]	; (8005f9c <HAL_SAI_Init+0x2d4>)
 8005e0c:	fba3 2301 	umull	r2, r3, r3, r1
 8005e10:	08da      	lsrs	r2, r3, #3
 8005e12:	4613      	mov	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4413      	add	r3, r2
 8005e18:	005b      	lsls	r3, r3, #1
 8005e1a:	1aca      	subs	r2, r1, r3
 8005e1c:	2a08      	cmp	r2, #8
 8005e1e:	d904      	bls.n	8005e2a <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a1b      	ldr	r3, [r3, #32]
 8005e24:	1c5a      	adds	r2, r3, #1
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	621a      	str	r2, [r3, #32]
    }
  }

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d003      	beq.n	8005e3a <HAL_SAI_Init+0x172>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d109      	bne.n	8005e4e <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d101      	bne.n	8005e46 <HAL_SAI_Init+0x17e>
 8005e42:	2300      	movs	r3, #0
 8005e44:	e001      	b.n	8005e4a <HAL_SAI_Init+0x182>
 8005e46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e4a:	61bb      	str	r3, [r7, #24]
 8005e4c:	e008      	b.n	8005e60 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d102      	bne.n	8005e5c <HAL_SAI_Init+0x194>
 8005e56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e5a:	e000      	b.n	8005e5e <HAL_SAI_Init+0x196>
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6819      	ldr	r1, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	4b4d      	ldr	r3, [pc, #308]	; (8005fa0 <HAL_SAI_Init+0x2d8>)
 8005e6c:	400b      	ands	r3, r1
 8005e6e:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6819      	ldr	r1, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	685a      	ldr	r2, [r3, #4]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7e:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005e84:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8a:	431a      	orrs	r2, r3
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8005e98:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005ea4:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	051b      	lsls	r3, r3, #20
 8005eac:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	6859      	ldr	r1, [r3, #4]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	4b38      	ldr	r3, [pc, #224]	; (8005fa4 <HAL_SAI_Init+0x2dc>)
 8005ec2:	400b      	ands	r3, r1
 8005ec4:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	6859      	ldr	r1, [r3, #4]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	699a      	ldr	r2, [r3, #24]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed4:	431a      	orrs	r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eda:	431a      	orrs	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6899      	ldr	r1, [r3, #8]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	4b2e      	ldr	r3, [pc, #184]	; (8005fa8 <HAL_SAI_Init+0x2e0>)
 8005ef0:	400b      	ands	r3, r1
 8005ef2:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6899      	ldr	r1, [r3, #8]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efe:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8005f04:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8005f0a:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8005f10:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f16:	3b01      	subs	r3, #1
 8005f18:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8005f1a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	430a      	orrs	r2, r1
 8005f22:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68d9      	ldr	r1, [r3, #12]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	f24f 0320 	movw	r3, #61472	; 0xf020
 8005f32:	400b      	ands	r3, r1
 8005f34:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68d9      	ldr	r1, [r3, #12]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f44:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f4a:	041b      	lsls	r3, r3, #16
 8005f4c:	431a      	orrs	r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f52:	3b01      	subs	r3, #1
 8005f54:	021b      	lsls	r3, r3, #8
 8005f56:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3720      	adds	r7, #32
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	40015804 	.word	0x40015804
 8005f88:	40015824 	.word	0x40015824
 8005f8c:	40015800 	.word	0x40015800
 8005f90:	40015c00 	.word	0x40015c00
 8005f94:	40015c04 	.word	0x40015c04
 8005f98:	40015c24 	.word	0x40015c24
 8005f9c:	cccccccd 	.word	0xcccccccd
 8005fa0:	ff05c010 	.word	0xff05c010
 8005fa4:	ffff1ff0 	.word	0xffff1ff0
 8005fa8:	fff88000 	.word	0xfff88000

08005fac <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005fac:	b490      	push	{r4, r7}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8005fb4:	4b16      	ldr	r3, [pc, #88]	; (8006010 <SAI_Disable+0x64>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a16      	ldr	r2, [pc, #88]	; (8006014 <SAI_Disable+0x68>)
 8005fba:	fba2 2303 	umull	r2, r3, r2, r3
 8005fbe:	0b1b      	lsrs	r3, r3, #12
 8005fc0:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005fd4:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8005fd6:	4623      	mov	r3, r4
 8005fd8:	1e5c      	subs	r4, r3, #1
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10a      	bne.n	8005ff4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fe4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	73fb      	strb	r3, [r7, #15]
      break;
 8005ff2:	e006      	b.n	8006002 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1e9      	bne.n	8005fd6 <SAI_Disable+0x2a>

  return status;
 8006002:	7bfb      	ldrb	r3, [r7, #15]
}
 8006004:	4618      	mov	r0, r3
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bc90      	pop	{r4, r7}
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	2000002c 	.word	0x2000002c
 8006014:	95cbec1b 	.word	0x95cbec1b

08006018 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d101      	bne.n	800602a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e01d      	b.n	8006066 <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b00      	cmp	r3, #0
 8006034:	d105      	bne.n	8006042 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f00e fc9f 	bl	8014980 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2203      	movs	r2, #3
 8006046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 f80f 	bl	800606e <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3708      	adds	r7, #8
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800606e:	b5b0      	push	{r4, r5, r7, lr}
 8006070:	b08e      	sub	sp, #56	; 0x38
 8006072:	af04      	add	r7, sp, #16
 8006074:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006076:	2300      	movs	r3, #0
 8006078:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800607a:	2300      	movs	r3, #0
 800607c:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800607e:	2300      	movs	r3, #0
 8006080:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006082:	2300      	movs	r3, #0
 8006084:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006086:	2300      	movs	r3, #0
 8006088:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800608a:	2300      	movs	r3, #0
 800608c:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800608e:	2376      	movs	r3, #118	; 0x76
 8006090:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681d      	ldr	r5, [r3, #0]
 8006096:	466c      	mov	r4, sp
 8006098:	f107 0318 	add.w	r3, r7, #24
 800609c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80060a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80060a4:	f107 030c 	add.w	r3, r7, #12
 80060a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060aa:	4628      	mov	r0, r5
 80060ac:	f003 f84a 	bl	8009144 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	685a      	ldr	r2, [r3, #4]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060be:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f003 f887 	bl	80091d8 <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	685a      	ldr	r2, [r3, #4]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060d8:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 80060da:	2002      	movs	r0, #2
 80060dc:	f7fa fa46 	bl	800056c <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 fff4 	bl	80070ce <SD_PowerON>
 80060e6:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80060e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00b      	beq.n	8006106 <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	431a      	orrs	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e013      	b.n	800612e <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 ff18 	bl	8006f3c <SD_InitCard>
 800610c:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800610e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00b      	beq.n	800612c <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006122:	431a      	orrs	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e000      	b.n	800612e <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3728      	adds	r7, #40	; 0x28
 8006132:	46bd      	mov	sp, r7
 8006134:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006138 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read  
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b08c      	sub	sp, #48	; 0x30
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
 8006144:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006146:	2300      	movs	r3, #0
 8006148:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d107      	bne.n	8006160 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006154:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e0b0      	b.n	80062c2 <HAL_SD_ReadBlocks_DMA+0x18a>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006166:	b2db      	uxtb	r3, r3
 8006168:	2b01      	cmp	r3, #1
 800616a:	f040 80a9 	bne.w	80062c0 <HAL_SD_ReadBlocks_DMA+0x188>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	441a      	add	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800617e:	429a      	cmp	r2, r3
 8006180:	d907      	bls.n	8006192 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006186:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e097      	b.n	80062c2 <HAL_SD_ReadBlocks_DMA+0x18a>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2203      	movs	r2, #3
 8006196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2200      	movs	r2, #0
 80061a0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80061b0:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b6:	4a45      	ldr	r2, [pc, #276]	; (80062cc <HAL_SD_ReadBlocks_DMA+0x194>)
 80061b8:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061be:	4a44      	ldr	r2, [pc, #272]	; (80062d0 <HAL_SD_ReadBlocks_DMA+0x198>)
 80061c0:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c6:	2200      	movs	r2, #0
 80061c8:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	3380      	adds	r3, #128	; 0x80
 80061d4:	4619      	mov	r1, r3
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	025b      	lsls	r3, r3, #9
 80061dc:	089b      	lsrs	r3, r3, #2
 80061de:	f7fa ff45 	bl	800106c <HAL_DMA_Start_IT>
    
    /* Enable SD DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f042 0208 	orr.w	r2, r2, #8
 80061f0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d002      	beq.n	8006200 <HAL_SD_ReadBlocks_DMA+0xc8>
    {
      BlockAdd *= 512U;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	025b      	lsls	r3, r3, #9
 80061fe:	607b      	str	r3, [r7, #4]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006200:	f04f 33ff 	mov.w	r3, #4294967295
 8006204:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	025b      	lsls	r3, r3, #9
 800620a:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800620c:	2390      	movs	r3, #144	; 0x90
 800620e:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006210:	2302      	movs	r3, #2
 8006212:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006214:	2300      	movs	r3, #0
 8006216:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8006218:	2301      	movs	r3, #1
 800621a:	62bb      	str	r3, [r7, #40]	; 0x28
    SDMMC_ConfigData(hsd->Instance, &config);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f107 0214 	add.w	r2, r7, #20
 8006224:	4611      	mov	r1, r2
 8006226:	4618      	mov	r0, r3
 8006228:	f003 f83e 	bl	80092a8 <SDMMC_ConfigData>

    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006234:	4618      	mov	r0, r3
 8006236:	f003 f863 	bl	8009300 <SDMMC_CmdBlockLength>
 800623a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800623c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623e:	2b00      	cmp	r3, #0
 8006240:	d010      	beq.n	8006264 <HAL_SD_ReadBlocks_DMA+0x12c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800624a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006252:	431a      	orrs	r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e02e      	b.n	80062c2 <HAL_SD_ReadBlocks_DMA+0x18a>
    }
        
    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d90a      	bls.n	8006280 <HAL_SD_ReadBlocks_DMA+0x148>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2282      	movs	r2, #130	; 0x82
 800626e:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6879      	ldr	r1, [r7, #4]
 8006276:	4618      	mov	r0, r3
 8006278:	f003 f88a 	bl	8009390 <SDMMC_CmdReadMultiBlock>
 800627c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800627e:	e009      	b.n	8006294 <HAL_SD_ReadBlocks_DMA+0x15c>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2281      	movs	r2, #129	; 0x81
 8006284:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */ 
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	6879      	ldr	r1, [r7, #4]
 800628c:	4618      	mov	r0, r3
 800628e:	f003 f85b 	bl	8009348 <SDMMC_CmdReadSingleBlock>
 8006292:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006296:	2b00      	cmp	r3, #0
 8006298:	d010      	beq.n	80062bc <HAL_SD_ReadBlocks_DMA+0x184>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80062a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062aa:	431a      	orrs	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e002      	b.n	80062c2 <HAL_SD_ReadBlocks_DMA+0x18a>
    }

    return HAL_OK;
 80062bc:	2300      	movs	r3, #0
 80062be:	e000      	b.n	80062c2 <HAL_SD_ReadBlocks_DMA+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80062c0:	2302      	movs	r3, #2
  }
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3730      	adds	r7, #48	; 0x30
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	08006d41 	.word	0x08006d41
 80062d0:	08006daf 	.word	0x08006daf

080062d4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b08c      	sub	sp, #48	; 0x30
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
 80062e0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80062e2:	2300      	movs	r3, #0
 80062e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d107      	bne.n	80062fc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e0b0      	b.n	800645e <HAL_SD_WriteBlocks_DMA+0x18a>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006302:	b2db      	uxtb	r3, r3
 8006304:	2b01      	cmp	r3, #1
 8006306:	f040 80a9 	bne.w	800645c <HAL_SD_WriteBlocks_DMA+0x188>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	441a      	add	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800631a:	429a      	cmp	r2, r3
 800631c:	d907      	bls.n	800632e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006322:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e097      	b.n	800645e <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2203      	movs	r2, #3
 8006332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2200      	movs	r2, #0
 800633c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));    
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f042 021a 	orr.w	r2, r2, #26
 800634c:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006352:	4a45      	ldr	r2, [pc, #276]	; (8006468 <HAL_SD_WriteBlocks_DMA+0x194>)
 8006354:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635a:	4a44      	ldr	r2, [pc, #272]	; (800646c <HAL_SD_WriteBlocks_DMA+0x198>)
 800635c:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006362:	2200      	movs	r2, #0
 8006364:	651a      	str	r2, [r3, #80]	; 0x50
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800636a:	2b01      	cmp	r3, #1
 800636c:	d002      	beq.n	8006374 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      BlockAdd *= 512U;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	025b      	lsls	r3, r3, #9
 8006372:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f44f 7100 	mov.w	r1, #512	; 0x200
 800637c:	4618      	mov	r0, r3
 800637e:	f002 ffbf 	bl	8009300 <SDMMC_CmdBlockLength>
 8006382:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006386:	2b00      	cmp	r3, #0
 8006388:	d010      	beq.n	80063ac <HAL_SD_WriteBlocks_DMA+0xd8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006392:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639a:	431a      	orrs	r2, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e058      	b.n	800645e <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d90a      	bls.n	80063c8 <HAL_SD_WriteBlocks_DMA+0xf4>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	22a0      	movs	r2, #160	; 0xa0
 80063b6:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6879      	ldr	r1, [r7, #4]
 80063be:	4618      	mov	r0, r3
 80063c0:	f003 f82e 	bl	8009420 <SDMMC_CmdWriteMultiBlock>
 80063c4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80063c6:	e009      	b.n	80063dc <HAL_SD_WriteBlocks_DMA+0x108>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2290      	movs	r2, #144	; 0x90
 80063cc:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	6879      	ldr	r1, [r7, #4]
 80063d4:	4618      	mov	r0, r3
 80063d6:	f002 ffff 	bl	80093d8 <SDMMC_CmdWriteSingleBlock>
 80063da:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80063dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d010      	beq.n	8006404 <HAL_SD_WriteBlocks_DMA+0x130>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80063ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f2:	431a      	orrs	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e02c      	b.n	800645e <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f042 0208 	orr.w	r2, r2, #8
 8006412:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006418:	68b9      	ldr	r1, [r7, #8]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	3380      	adds	r3, #128	; 0x80
 8006420:	461a      	mov	r2, r3
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	025b      	lsls	r3, r3, #9
 8006426:	089b      	lsrs	r3, r3, #2
 8006428:	f7fa fe20 	bl	800106c <HAL_DMA_Start_IT>
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800642c:	f04f 33ff 	mov.w	r3, #4294967295
 8006430:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	025b      	lsls	r3, r3, #9
 8006436:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006438:	2390      	movs	r3, #144	; 0x90
 800643a:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800643c:	2300      	movs	r3, #0
 800643e:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006440:	2300      	movs	r3, #0
 8006442:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8006444:	2301      	movs	r3, #1
 8006446:	62bb      	str	r3, [r7, #40]	; 0x28
    SDMMC_ConfigData(hsd->Instance, &config);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f107 0214 	add.w	r2, r7, #20
 8006450:	4611      	mov	r1, r2
 8006452:	4618      	mov	r0, r3
 8006454:	f002 ff28 	bl	80092a8 <SDMMC_ConfigData>
    
    return HAL_OK;
 8006458:	2300      	movs	r3, #0
 800645a:	e000      	b.n	800645e <HAL_SD_WriteBlocks_DMA+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800645c:	2302      	movs	r3, #2
  }
}
 800645e:	4618      	mov	r0, r3
 8006460:	3730      	adds	r7, #48	; 0x30
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	08006d17 	.word	0x08006d17
 800646c:	08006daf 	.word	0x08006daf

08006470 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006478:	2300      	movs	r3, #0
 800647a:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDMMC interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DATAEND) != RESET)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006486:	2b00      	cmp	r3, #0
 8006488:	f000 808b 	beq.w	80065a2 <HAL_SD_IRQHandler+0x132>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND); 
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006494:	639a      	str	r2, [r3, #56]	; 0x38
    
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80064a4:	63da      	str	r2, [r3, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064aa:	f003 0308 	and.w	r3, r3, #8
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d03a      	beq.n	8006528 <HAL_SD_IRQHandler+0xb8>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d105      	bne.n	80064ca <HAL_SD_IRQHandler+0x5a>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c2:	f003 0320 	and.w	r3, r3, #32
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d011      	beq.n	80064ee <HAL_SD_IRQHandler+0x7e>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f002 ffca 	bl	8009468 <SDMMC_CmdStopTransfer>
 80064d4:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d008      	beq.n	80064ee <HAL_SD_IRQHandler+0x7e>
        {
          hsd->ErrorCode |= errorstate;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	431a      	orrs	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 f915 	bl	8006718 <HAL_SD_ErrorCallback>
#endif
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80064f6:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006504:	f003 0301 	and.w	r3, r3, #1
 8006508:	2b00      	cmp	r3, #0
 800650a:	d105      	bne.n	8006518 <HAL_SD_IRQHandler+0xa8>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006510:	f003 0302 	and.w	r3, r3, #2
 8006514:	2b00      	cmp	r3, #0
 8006516:	d003      	beq.n	8006520 <HAL_SD_IRQHandler+0xb0>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f00c f94f 	bl	80127bc <HAL_SD_RxCpltCallback>
#else
      HAL_SD_ErrorCallback(hsd);
#endif
    }
  }
}
 800651e:	e0f3      	b.n	8006708 <HAL_SD_IRQHandler+0x298>
        HAL_SD_TxCpltCallback(hsd);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f00c f941 	bl	80127a8 <HAL_SD_TxCpltCallback>
}
 8006526:	e0ef      	b.n	8006708 <HAL_SD_IRQHandler+0x298>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006530:	2b00      	cmp	r3, #0
 8006532:	f000 80e9 	beq.w	8006708 <HAL_SD_IRQHandler+0x298>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653a:	f003 0320 	and.w	r3, r3, #32
 800653e:	2b00      	cmp	r3, #0
 8006540:	d011      	beq.n	8006566 <HAL_SD_IRQHandler+0xf6>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4618      	mov	r0, r3
 8006548:	f002 ff8e 	bl	8009468 <SDMMC_CmdStopTransfer>
 800654c:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d008      	beq.n	8006566 <HAL_SD_IRQHandler+0xf6>
          hsd->ErrorCode |= errorstate;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	431a      	orrs	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 f8d9 	bl	8006718 <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656a:	f003 0301 	and.w	r3, r3, #1
 800656e:	2b00      	cmp	r3, #0
 8006570:	f040 80ca 	bne.w	8006708 <HAL_SD_IRQHandler+0x298>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006578:	f003 0302 	and.w	r3, r3, #2
 800657c:	2b00      	cmp	r3, #0
 800657e:	f040 80c3 	bne.w	8006708 <HAL_SD_IRQHandler+0x298>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f022 0208 	bic.w	r2, r2, #8
 8006590:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f00c f904 	bl	80127a8 <HAL_SD_TxCpltCallback>
}
 80065a0:	e0b2      	b.n	8006708 <HAL_SD_IRQHandler+0x298>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXFIFOHE) != RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d008      	beq.n	80065c2 <HAL_SD_IRQHandler+0x152>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_TXFIFOHE);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80065b8:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 ffe4 	bl	8007588 <SD_Write_IT>
}
 80065c0:	e0a2      	b.n	8006708 <HAL_SD_IRQHandler+0x298>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXFIFOHF) != RESET)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d008      	beq.n	80065e2 <HAL_SD_IRQHandler+0x172>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXFIFOHF);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80065d8:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 ffac 	bl	8007538 <SD_Read_IT>
}
 80065e0:	e092      	b.n	8006708 <HAL_SD_IRQHandler+0x298>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_TXUNDERR) != RESET)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e8:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f000 808b 	beq.w	8006708 <HAL_SD_IRQHandler+0x298>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f8:	f003 0302 	and.w	r3, r3, #2
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d005      	beq.n	800660c <HAL_SD_IRQHandler+0x19c>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006604:	f043 0202 	orr.w	r2, r3, #2
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006612:	f003 0308 	and.w	r3, r3, #8
 8006616:	2b00      	cmp	r3, #0
 8006618:	d005      	beq.n	8006626 <HAL_SD_IRQHandler+0x1b6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661e:	f043 0208 	orr.w	r2, r3, #8
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800662c:	f003 0320 	and.w	r3, r3, #32
 8006630:	2b00      	cmp	r3, #0
 8006632:	d005      	beq.n	8006640 <HAL_SD_IRQHandler+0x1d0>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006638:	f043 0220 	orr.w	r2, r3, #32
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006646:	f003 0310 	and.w	r3, r3, #16
 800664a:	2b00      	cmp	r3, #0
 800664c:	d005      	beq.n	800665a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006652:	f043 0210 	orr.w	r2, r3, #16
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006662:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006672:	63da      	str	r2, [r3, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800667c:	2b00      	cmp	r3, #0
 800667e:	d036      	beq.n	80066ee <HAL_SD_IRQHandler+0x27e>
      if(hsd->hdmatx != NULL)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006684:	2b00      	cmp	r3, #0
 8006686:	d011      	beq.n	80066ac <HAL_SD_IRQHandler+0x23c>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668c:	4a20      	ldr	r2, [pc, #128]	; (8006710 <HAL_SD_IRQHandler+0x2a0>)
 800668e:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006694:	4618      	mov	r0, r3
 8006696:	f7fa fd49 	bl	800112c <HAL_DMA_Abort_IT>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d033      	beq.n	8006708 <HAL_SD_IRQHandler+0x298>
          SD_DMATxAbort(hsd->hdmatx);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a4:	4618      	mov	r0, r3
 80066a6:	f000 fbcd 	bl	8006e44 <SD_DMATxAbort>
}
 80066aa:	e02d      	b.n	8006708 <HAL_SD_IRQHandler+0x298>
      else if(hsd->hdmarx != NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d011      	beq.n	80066d8 <HAL_SD_IRQHandler+0x268>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b8:	4a16      	ldr	r2, [pc, #88]	; (8006714 <HAL_SD_IRQHandler+0x2a4>)
 80066ba:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7fa fd33 	bl	800112c <HAL_DMA_Abort_IT>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d01d      	beq.n	8006708 <HAL_SD_IRQHandler+0x298>
          SD_DMARxAbort(hsd->hdmarx);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066d0:	4618      	mov	r0, r3
 80066d2:	f000 fbf5 	bl	8006ec0 <SD_DMARxAbort>
}
 80066d6:	e017      	b.n	8006708 <HAL_SD_IRQHandler+0x298>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f00c f854 	bl	8012794 <HAL_SD_AbortCallback>
}
 80066ec:	e00c      	b.n	8006708 <HAL_SD_IRQHandler+0x298>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f2:	f003 0308 	and.w	r3, r3, #8
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d006      	beq.n	8006708 <HAL_SD_IRQHandler+0x298>
      hsd->State = HAL_SD_STATE_READY;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f808 	bl	8006718 <HAL_SD_ErrorCallback>
}
 8006708:	bf00      	nop
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	08006e45 	.word	0x08006e45
 8006714:	08006ec1 	.word	0x08006ec1

08006718 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 8006736:	2300      	movs	r3, #0
 8006738:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800673e:	0e1b      	lsrs	r3, r3, #24
 8006740:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	099b      	lsrs	r3, r3, #6
 8006746:	b2db      	uxtb	r3, r3
 8006748:	f003 0303 	and.w	r3, r3, #3
 800674c:	b2da      	uxtb	r2, r3
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	089b      	lsrs	r3, r3, #2
 8006756:	b2db      	uxtb	r3, r3
 8006758:	f003 030f 	and.w	r3, r3, #15
 800675c:	b2da      	uxtb	r2, r3
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	b2db      	uxtb	r3, r3
 8006766:	f003 0303 	and.w	r3, r3, #3
 800676a:	b2da      	uxtb	r2, r3
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006774:	0c1b      	lsrs	r3, r3, #16
 8006776:	b2db      	uxtb	r3, r3
 8006778:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	b2da      	uxtb	r2, r3
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006786:	0a1b      	lsrs	r3, r3, #8
 8006788:	b2db      	uxtb	r3, r3
 800678a:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	b2da      	uxtb	r2, r3
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006798:	b2db      	uxtb	r3, r3
 800679a:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	b2da      	uxtb	r2, r3
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067a8:	0e1b      	lsrs	r3, r3, #24
 80067aa:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	011b      	lsls	r3, r3, #4
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067bc:	0c1b      	lsrs	r3, r3, #16
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	88db      	ldrh	r3, [r3, #6]
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	091b      	lsrs	r3, r3, #4
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	f003 030f 	and.w	r3, r3, #15
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	4313      	orrs	r3, r2
 80067d6:	b29a      	uxth	r2, r3
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	f003 030f 	and.w	r3, r3, #15
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067ee:	0a1b      	lsrs	r3, r3, #8
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	09db      	lsrs	r3, r3, #7
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	099b      	lsrs	r3, r3, #6
 8006808:	b2db      	uxtb	r3, r3
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	b2da      	uxtb	r2, r3
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	095b      	lsrs	r3, r3, #5
 8006818:	b2db      	uxtb	r3, r3
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	b2da      	uxtb	r2, r3
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	091b      	lsrs	r3, r3, #4
 8006828:	b2db      	uxtb	r3, r3
 800682a:	f003 0301 	and.w	r3, r3, #1
 800682e:	b2da      	uxtb	r2, r3
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	2200      	movs	r2, #0
 8006838:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800683e:	2b00      	cmp	r3, #0
 8006840:	f040 8086 	bne.w	8006950 <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	029b      	lsls	r3, r3, #10
 8006848:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006854:	b2db      	uxtb	r3, r3
 8006856:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	691a      	ldr	r2, [r3, #16]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	431a      	orrs	r2, r3
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800686a:	0e1b      	lsrs	r3, r3, #24
 800686c:	b2db      	uxtb	r3, r3
 800686e:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	691a      	ldr	r2, [r3, #16]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	099b      	lsrs	r3, r3, #6
 8006878:	f003 0303 	and.w	r3, r3, #3
 800687c:	431a      	orrs	r2, r3
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	08db      	lsrs	r3, r3, #3
 8006886:	b2db      	uxtb	r3, r3
 8006888:	f003 0307 	and.w	r3, r3, #7
 800688c:	b2da      	uxtb	r2, r3
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	b2db      	uxtb	r3, r3
 8006896:	f003 0307 	and.w	r3, r3, #7
 800689a:	b2da      	uxtb	r2, r3
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068a4:	0c1b      	lsrs	r3, r3, #16
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	095b      	lsrs	r3, r3, #5
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	f003 0307 	and.w	r3, r3, #7
 80068b4:	b2da      	uxtb	r2, r3
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	089b      	lsrs	r3, r3, #2
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	f003 0307 	and.w	r3, r3, #7
 80068c4:	b2da      	uxtb	r2, r3
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	005b      	lsls	r3, r3, #1
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	f003 0306 	and.w	r3, r3, #6
 80068d6:	b2da      	uxtb	r2, r3
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068e0:	0a1b      	lsrs	r3, r3, #8
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	7e1b      	ldrb	r3, [r3, #24]
 80068ea:	b2da      	uxtb	r2, r3
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	09db      	lsrs	r3, r3, #7
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	4313      	orrs	r3, r2
 80068fa:	b2da      	uxtb	r2, r3
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	1c5a      	adds	r2, r3, #1
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	7e1b      	ldrb	r3, [r3, #24]
 800690e:	b2db      	uxtb	r3, r3
 8006910:	3302      	adds	r3, #2
 8006912:	2201      	movs	r2, #1
 8006914:	409a      	lsls	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800691a:	fb02 f203 	mul.w	r2, r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	7a1b      	ldrb	r3, [r3, #8]
 8006926:	b2db      	uxtb	r3, r3
 8006928:	461a      	mov	r2, r3
 800692a:	2301      	movs	r3, #1
 800692c:	4093      	lsls	r3, r2
 800692e:	461a      	mov	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800693c:	0a52      	lsrs	r2, r2, #9
 800693e:	fb02 f203 	mul.w	r2, r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f44f 7200 	mov.w	r2, #512	; 0x200
 800694c:	661a      	str	r2, [r3, #96]	; 0x60
 800694e:	e04d      	b.n	80069ec <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006954:	2b01      	cmp	r3, #1
 8006956:	d138      	bne.n	80069ca <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800695c:	b2db      	uxtb	r3, r3
 800695e:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	041b      	lsls	r3, r3, #16
 8006964:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006970:	0e1b      	lsrs	r3, r3, #24
 8006972:	b2db      	uxtb	r3, r3
 8006974:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	691a      	ldr	r2, [r3, #16]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	021b      	lsls	r3, r3, #8
 800697e:	431a      	orrs	r2, r3
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006988:	0c1b      	lsrs	r3, r3, #16
 800698a:	b2db      	uxtb	r3, r3
 800698c:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	691a      	ldr	r2, [r3, #16]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	431a      	orrs	r2, r3
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800699e:	0a1b      	lsrs	r3, r3, #8
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	3301      	adds	r3, #1
 80069aa:	029a      	lsls	r2, r3, #10
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	655a      	str	r2, [r3, #84]	; 0x54
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069be:	659a      	str	r2, [r3, #88]	; 0x58
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	661a      	str	r2, [r3, #96]	; 0x60
 80069c8:	e010      	b.n	80069ec <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80069d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e0c1      	b.n	8006b70 <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	099b      	lsrs	r3, r3, #6
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	b2da      	uxtb	r2, r3
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	005b      	lsls	r3, r3, #1
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006a08:	b2da      	uxtb	r2, r3
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	7e9b      	ldrb	r3, [r3, #26]
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	09db      	lsrs	r3, r3, #7
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	b2da      	uxtb	r2, r3
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a38:	b2da      	uxtb	r2, r3
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a42:	0e1b      	lsrs	r3, r3, #24
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	09db      	lsrs	r3, r3, #7
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	b2da      	uxtb	r2, r3
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	095b      	lsrs	r3, r3, #5
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	f003 0303 	and.w	r3, r3, #3
 8006a62:	b2da      	uxtb	r2, r3
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	089b      	lsrs	r3, r3, #2
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	f003 0307 	and.w	r3, r3, #7
 8006a72:	b2da      	uxtb	r2, r3
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	f003 030c 	and.w	r3, r3, #12
 8006a84:	b2da      	uxtb	r2, r3
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a8e:	0c1b      	lsrs	r3, r3, #16
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	7fdb      	ldrb	r3, [r3, #31]
 8006a98:	b2da      	uxtb	r2, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	099b      	lsrs	r3, r3, #6
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	f003 0303 	and.w	r3, r3, #3
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	b2da      	uxtb	r2, r3
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	095b      	lsrs	r3, r3, #5
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	f003 0301 	and.w	r3, r3, #1
 8006ab8:	b2da      	uxtb	r2, r3
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	f003 0301 	and.w	r3, r3, #1
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006adc:	0a1b      	lsrs	r3, r3, #8
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	09db      	lsrs	r3, r3, #7
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	f003 0301 	and.w	r3, r3, #1
 8006aec:	b2da      	uxtb	r2, r3
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	099b      	lsrs	r3, r3, #6
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	f003 0301 	and.w	r3, r3, #1
 8006afe:	b2da      	uxtb	r2, r3
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	095b      	lsrs	r3, r3, #5
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	f003 0301 	and.w	r3, r3, #1
 8006b10:	b2da      	uxtb	r2, r3
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	091b      	lsrs	r3, r3, #4
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	f003 0301 	and.w	r3, r3, #1
 8006b22:	b2da      	uxtb	r2, r3
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	089b      	lsrs	r3, r3, #2
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	f003 0303 	and.w	r3, r3, #3
 8006b34:	b2da      	uxtb	r2, r3
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	f003 0303 	and.w	r3, r3, #3
 8006b44:	b2da      	uxtb	r2, r3
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	085b      	lsrs	r3, r3, #1
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b5e:	b2da      	uxtb	r2, r3
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3714      	adds	r7, #20
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006bd4:	b5b0      	push	{r4, r5, r7, lr}
 8006bd6:	b08e      	sub	sp, #56	; 0x38
 8006bd8:	af04      	add	r7, sp, #16
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006bde:	2300      	movs	r3, #0
 8006be0:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2203      	movs	r2, #3
 8006be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bee:	2b03      	cmp	r3, #3
 8006bf0:	d02e      	beq.n	8006c50 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bf8:	d106      	bne.n	8006c08 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	639a      	str	r2, [r3, #56]	; 0x38
 8006c06:	e029      	b.n	8006c5c <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c0e:	d10a      	bne.n	8006c26 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fb2e 	bl	8007272 <SD_WideBus_Enable>
 8006c16:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	639a      	str	r2, [r3, #56]	; 0x38
 8006c24:	e01a      	b.n	8006c5c <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d10a      	bne.n	8006c42 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 fb6d 	bl	800730c <SD_WideBus_Disable>
 8006c32:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	639a      	str	r2, [r3, #56]	; 0x38
 8006c40:	e00c      	b.n	8006c5c <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c46:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	639a      	str	r2, [r3, #56]	; 0x38
 8006c4e:	e005      	b.n	8006c5c <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d00a      	beq.n	8006c7a <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006c6c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e024      	b.n	8006cc4 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	695b      	ldr	r3, [r3, #20]
 8006c94:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	623b      	str	r3, [r7, #32]
    SDMMC_Init(hsd->Instance, Init);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681d      	ldr	r5, [r3, #0]
 8006ca0:	466c      	mov	r4, sp
 8006ca2:	f107 0318 	add.w	r3, r7, #24
 8006ca6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006caa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006cae:	f107 030c 	add.w	r3, r7, #12
 8006cb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	f002 fa45 	bl	8009144 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3728      	adds	r7, #40	; 0x28
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bdb0      	pop	{r4, r5, r7, pc}

08006ccc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b086      	sub	sp, #24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 8006cd4:	2304      	movs	r3, #4
 8006cd6:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8006ce0:	f107 030c 	add.w	r3, r7, #12
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fa99 	bl	800721e <SD_SendStatus>
 8006cec:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d005      	beq.n	8006d00 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	431a      	orrs	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	0a5b      	lsrs	r3, r3, #9
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	f003 030f 	and.w	r3, r3, #15
 8006d0a:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8006d0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3718      	adds	r7, #24
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 8006d16:	b480      	push	{r7}
 8006d18:	b085      	sub	sp, #20
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d22:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d32:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006d34:	bf00      	nop
 8006d36:	3714      	adds	r7, #20
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d4c:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	60bb      	str	r3, [r7, #8]
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d56:	2b82      	cmp	r3, #130	; 0x82
 8006d58:	d111      	bne.n	8006d7e <SD_DMAReceiveCplt+0x3e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f002 fb82 	bl	8009468 <SDMMC_CmdStopTransfer>
 8006d64:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d008      	beq.n	8006d7e <SD_DMAReceiveCplt+0x3e>
    {
      hsd->ErrorCode |= errorstate;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	431a      	orrs	r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	f7ff fccd 	bl	8006718 <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f022 0208 	bic.w	r2, r2, #8
 8006d8c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006d96:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f00b fd0b 	bl	80127bc <HAL_SD_RxCpltCallback>
#endif
}
 8006da6:	bf00      	nop
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <SD_DMAError>:
* @brief  DMA SD communication error callback 
* @param  hdma DMA handle
* @retval None
*/
static void SD_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b084      	sub	sp, #16
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dba:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f7fa fb61 	bl	8001484 <HAL_DMA_GetError>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d039      	beq.n	8006e3c <SD_DMAError+0x8e>
  {
    if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d004      	beq.n	8006ddc <SD_DMAError+0x2e>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d12c      	bne.n	8006e36 <SD_DMAError+0x88>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006de4:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006df4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);
      
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f7ff ff62 	bl	8006ccc <HAL_SD_GetCardState>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	72fb      	strb	r3, [r7, #11]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006e0c:	7afb      	ldrb	r3, [r7, #11]
 8006e0e:	2b06      	cmp	r3, #6
 8006e10:	d002      	beq.n	8006e18 <SD_DMAError+0x6a>
 8006e12:	7afb      	ldrb	r3, [r7, #11]
 8006e14:	2b05      	cmp	r3, #5
 8006e16:	d10a      	bne.n	8006e2e <SD_DMAError+0x80>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f002 fb23 	bl	8009468 <SDMMC_CmdStopTransfer>
 8006e22:	4602      	mov	r2, r0
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e28:	431a      	orrs	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	639a      	str	r2, [r3, #56]	; 0x38
      }
      
      hsd->State= HAL_SD_STATE_READY;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	f7ff fc6e 	bl	8006718 <HAL_SD_ErrorCallback>
#endif
  }
}
 8006e3c:	bf00      	nop
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e50:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d002      	beq.n	8006e60 <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d127      	bne.n	8006eb8 <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f7ff ff2f 	bl	8006ccc <HAL_SD_GetCardState>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2200      	movs	r2, #0
 8006e76:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006e80:	7afb      	ldrb	r3, [r7, #11]
 8006e82:	2b06      	cmp	r3, #6
 8006e84:	d002      	beq.n	8006e8c <SD_DMATxAbort+0x48>
 8006e86:	7afb      	ldrb	r3, [r7, #11]
 8006e88:	2b05      	cmp	r3, #5
 8006e8a:	d115      	bne.n	8006eb8 <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4618      	mov	r0, r3
 8006e92:	f002 fae9 	bl	8009468 <SDMMC_CmdStopTransfer>
 8006e96:	4602      	mov	r2, r0
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9c:	431a      	orrs	r2, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d003      	beq.n	8006eb2 <SD_DMATxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f00b fc72 	bl	8012794 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 8006eb0:	e002      	b.n	8006eb8 <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f7ff fc30 	bl	8006718 <HAL_SD_ErrorCallback>
}
 8006eb8:	bf00      	nop
 8006eba:	3710      	adds	r7, #16
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ecc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d002      	beq.n	8006edc <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d127      	bne.n	8006f34 <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f7ff fef1 	bl	8006ccc <HAL_SD_GetCardState>
 8006eea:	4603      	mov	r3, r0
 8006eec:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006efc:	7afb      	ldrb	r3, [r7, #11]
 8006efe:	2b06      	cmp	r3, #6
 8006f00:	d002      	beq.n	8006f08 <SD_DMARxAbort+0x48>
 8006f02:	7afb      	ldrb	r3, [r7, #11]
 8006f04:	2b05      	cmp	r3, #5
 8006f06:	d115      	bne.n	8006f34 <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f002 faab 	bl	8009468 <SDMMC_CmdStopTransfer>
 8006f12:	4602      	mov	r2, r0
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f18:	431a      	orrs	r2, r3
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d003      	beq.n	8006f2e <SD_DMARxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 8006f26:	68f8      	ldr	r0, [r7, #12]
 8006f28:	f00b fc34 	bl	8012794 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 8006f2c:	e002      	b.n	8006f34 <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f7ff fbf2 	bl	8006718 <HAL_SD_ErrorCallback>
}
 8006f34:	bf00      	nop
 8006f36:	3710      	adds	r7, #16
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006f3c:	b5b0      	push	{r4, r5, r7, lr}
 8006f3e:	b094      	sub	sp, #80	; 0x50
 8006f40:	af04      	add	r7, sp, #16
 8006f42:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006f44:	2300      	movs	r3, #0
 8006f46:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4618      	mov	r0, r3
 8006f52:	f002 f94f 	bl	80091f4 <SDMMC_GetPowerState>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d102      	bne.n	8006f62 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006f5c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006f60:	e0b1      	b.n	80070c6 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f66:	2b03      	cmp	r3, #3
 8006f68:	d02f      	beq.n	8006fca <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f002 fb95 	bl	800969e <SDMMC_CmdSendCID>
 8006f74:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d001      	beq.n	8006f80 <SD_InitCard+0x44>
    {
      return errorstate;
 8006f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f7e:	e0a2      	b.n	80070c6 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2100      	movs	r1, #0
 8006f86:	4618      	mov	r0, r3
 8006f88:	f002 f979 	bl	800927e <SDMMC_GetResponse>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2104      	movs	r1, #4
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f002 f970 	bl	800927e <SDMMC_GetResponse>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2108      	movs	r1, #8
 8006faa:	4618      	mov	r0, r3
 8006fac:	f002 f967 	bl	800927e <SDMMC_GetResponse>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	210c      	movs	r1, #12
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f002 f95e 	bl	800927e <SDMMC_GetResponse>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fce:	2b03      	cmp	r3, #3
 8006fd0:	d00d      	beq.n	8006fee <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f107 020e 	add.w	r2, r7, #14
 8006fda:	4611      	mov	r1, r2
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f002 fb9f 	bl	8009720 <SDMMC_CmdSetRelAdd>
 8006fe2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d001      	beq.n	8006fee <SD_InitCard+0xb2>
    {
      return errorstate;
 8006fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fec:	e06b      	b.n	80070c6 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ff2:	2b03      	cmp	r3, #3
 8006ff4:	d036      	beq.n	8007064 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006ff6:	89fb      	ldrh	r3, [r7, #14]
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007006:	041b      	lsls	r3, r3, #16
 8007008:	4619      	mov	r1, r3
 800700a:	4610      	mov	r0, r2
 800700c:	f002 fb67 	bl	80096de <SDMMC_CmdSendCSD>
 8007010:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007014:	2b00      	cmp	r3, #0
 8007016:	d001      	beq.n	800701c <SD_InitCard+0xe0>
    {
      return errorstate;
 8007018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800701a:	e054      	b.n	80070c6 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2100      	movs	r1, #0
 8007022:	4618      	mov	r0, r3
 8007024:	f002 f92b 	bl	800927e <SDMMC_GetResponse>
 8007028:	4602      	mov	r2, r0
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2104      	movs	r1, #4
 8007034:	4618      	mov	r0, r3
 8007036:	f002 f922 	bl	800927e <SDMMC_GetResponse>
 800703a:	4602      	mov	r2, r0
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2108      	movs	r1, #8
 8007046:	4618      	mov	r0, r3
 8007048:	f002 f919 	bl	800927e <SDMMC_GetResponse>
 800704c:	4602      	mov	r2, r0
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	210c      	movs	r1, #12
 8007058:	4618      	mov	r0, r3
 800705a:	f002 f910 	bl	800927e <SDMMC_GetResponse>
 800705e:	4602      	mov	r2, r0
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2104      	movs	r1, #4
 800706a:	4618      	mov	r0, r3
 800706c:	f002 f907 	bl	800927e <SDMMC_GetResponse>
 8007070:	4603      	mov	r3, r0
 8007072:	0d1a      	lsrs	r2, r3, #20
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8007078:	f107 0310 	add.w	r3, r7, #16
 800707c:	4619      	mov	r1, r3
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f7ff fb54 	bl	800672c <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6819      	ldr	r1, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800708c:	041b      	lsls	r3, r3, #16
 800708e:	f04f 0400 	mov.w	r4, #0
 8007092:	461a      	mov	r2, r3
 8007094:	4623      	mov	r3, r4
 8007096:	4608      	mov	r0, r1
 8007098:	f002 fa0a 	bl	80094b0 <SDMMC_CmdSelDesel>
 800709c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800709e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d001      	beq.n	80070a8 <SD_InitCard+0x16c>
  {
    return errorstate;
 80070a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070a6:	e00e      	b.n	80070c6 <SD_InitCard+0x18a>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681d      	ldr	r5, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	466c      	mov	r4, sp
 80070b0:	f103 0210 	add.w	r2, r3, #16
 80070b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80070b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80070ba:	3304      	adds	r3, #4
 80070bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80070be:	4628      	mov	r0, r5
 80070c0:	f002 f840 	bl	8009144 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3740      	adds	r7, #64	; 0x40
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bdb0      	pop	{r4, r5, r7, pc}

080070ce <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b086      	sub	sp, #24
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 80070d6:	2300      	movs	r3, #0
 80070d8:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 80070da:	2300      	movs	r3, #0
 80070dc:	617b      	str	r3, [r7, #20]
 80070de:	2300      	movs	r3, #0
 80070e0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80070e2:	2300      	movs	r3, #0
 80070e4:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f002 fa05 	bl	80094fa <SDMMC_CmdGoIdleState>
 80070f0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d001      	beq.n	80070fc <SD_PowerON+0x2e>
  {
    return errorstate;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	e08c      	b.n	8007216 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4618      	mov	r0, r3
 8007102:	f002 fa1a 	bl	800953a <SDMMC_CmdOperCond>
 8007106:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d03d      	beq.n	800718a <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8007114:	e032      	b.n	800717c <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	1c5a      	adds	r2, r3, #1
 800711a:	60ba      	str	r2, [r7, #8]
 800711c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007120:	4293      	cmp	r3, r2
 8007122:	d102      	bne.n	800712a <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007124:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007128:	e075      	b.n	8007216 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2100      	movs	r1, #0
 8007130:	4618      	mov	r0, r3
 8007132:	f002 fa23 	bl	800957c <SDMMC_CmdAppCommand>
 8007136:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d002      	beq.n	8007144 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800713e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007142:	e068      	b.n	8007216 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2100      	movs	r1, #0
 800714a:	4618      	mov	r0, r3
 800714c:	f002 fa3a 	bl	80095c4 <SDMMC_CmdAppOperCommand>
 8007150:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d002      	beq.n	800715e <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007158:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800715c:	e05b      	b.n	8007216 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2100      	movs	r1, #0
 8007164:	4618      	mov	r0, r3
 8007166:	f002 f88a 	bl	800927e <SDMMC_GetResponse>
 800716a:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	0fdb      	lsrs	r3, r3, #31
 8007170:	2b01      	cmp	r3, #1
 8007172:	bf0c      	ite	eq
 8007174:	2301      	moveq	r3, #1
 8007176:	2300      	movne	r3, #0
 8007178:	b2db      	uxtb	r3, r3
 800717a:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d0c9      	beq.n	8007116 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	645a      	str	r2, [r3, #68]	; 0x44
 8007188:	e044      	b.n	8007214 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2201      	movs	r2, #1
 800718e:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8007190:	e031      	b.n	80071f6 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	1c5a      	adds	r2, r3, #1
 8007196:	60ba      	str	r2, [r7, #8]
 8007198:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800719c:	4293      	cmp	r3, r2
 800719e:	d102      	bne.n	80071a6 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80071a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80071a4:	e037      	b.n	8007216 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2100      	movs	r1, #0
 80071ac:	4618      	mov	r0, r3
 80071ae:	f002 f9e5 	bl	800957c <SDMMC_CmdAppCommand>
 80071b2:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d001      	beq.n	80071be <SD_PowerON+0xf0>
      {
        return errorstate;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	e02b      	b.n	8007216 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80071c6:	4618      	mov	r0, r3
 80071c8:	f002 f9fc 	bl	80095c4 <SDMMC_CmdAppOperCommand>
 80071cc:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d001      	beq.n	80071d8 <SD_PowerON+0x10a>
      {
        return errorstate;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	e01e      	b.n	8007216 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2100      	movs	r1, #0
 80071de:	4618      	mov	r0, r3
 80071e0:	f002 f84d 	bl	800927e <SDMMC_GetResponse>
 80071e4:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	0fdb      	lsrs	r3, r3, #31
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	bf0c      	ite	eq
 80071ee:	2301      	moveq	r3, #1
 80071f0:	2300      	movne	r3, #0
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d0ca      	beq.n	8007192 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007202:	2b00      	cmp	r3, #0
 8007204:	d003      	beq.n	800720e <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	645a      	str	r2, [r3, #68]	; 0x44
 800720c:	e002      	b.n	8007214 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3718      	adds	r7, #24
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b084      	sub	sp, #16
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
 8007226:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007228:	2300      	movs	r3, #0
 800722a:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d102      	bne.n	8007238 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8007232:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007236:	e018      	b.n	800726a <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007240:	041b      	lsls	r3, r3, #16
 8007242:	4619      	mov	r1, r3
 8007244:	4610      	mov	r0, r2
 8007246:	f002 fa8e 	bl	8009766 <SDMMC_CmdSendStatus>
 800724a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d001      	beq.n	8007256 <SD_SendStatus+0x38>
  {
    return errorstate;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	e009      	b.n	800726a <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2100      	movs	r1, #0
 800725c:	4618      	mov	r0, r3
 800725e:	f002 f80e 	bl	800927e <SDMMC_GetResponse>
 8007262:	4602      	mov	r2, r0
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b086      	sub	sp, #24
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 800727a:	2300      	movs	r3, #0
 800727c:	60fb      	str	r3, [r7, #12]
 800727e:	2300      	movs	r3, #0
 8007280:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007282:	2300      	movs	r3, #0
 8007284:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2100      	movs	r1, #0
 800728c:	4618      	mov	r0, r3
 800728e:	f001 fff6 	bl	800927e <SDMMC_GetResponse>
 8007292:	4603      	mov	r3, r0
 8007294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007298:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800729c:	d102      	bne.n	80072a4 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800729e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80072a2:	e02f      	b.n	8007304 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80072a4:	f107 030c 	add.w	r3, r7, #12
 80072a8:	4619      	mov	r1, r3
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 f87b 	bl	80073a6 <SD_FindSCR>
 80072b0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d001      	beq.n	80072bc <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	e023      	b.n	8007304 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d01c      	beq.n	8007300 <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ce:	041b      	lsls	r3, r3, #16
 80072d0:	4619      	mov	r1, r3
 80072d2:	4610      	mov	r0, r2
 80072d4:	f002 f952 	bl	800957c <SDMMC_CmdAppCommand>
 80072d8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d001      	beq.n	80072e4 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	e00f      	b.n	8007304 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2102      	movs	r1, #2
 80072ea:	4618      	mov	r0, r3
 80072ec:	f002 f990 	bl	8009610 <SDMMC_CmdBusWidth>
 80072f0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d001      	beq.n	80072fc <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	e003      	b.n	8007304 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 80072fc:	2300      	movs	r3, #0
 80072fe:	e001      	b.n	8007304 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007300:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007304:	4618      	mov	r0, r3
 8007306:	3718      	adds	r7, #24
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 8007314:	2300      	movs	r3, #0
 8007316:	60fb      	str	r3, [r7, #12]
 8007318:	2300      	movs	r3, #0
 800731a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800731c:	2300      	movs	r3, #0
 800731e:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2100      	movs	r1, #0
 8007326:	4618      	mov	r0, r3
 8007328:	f001 ffa9 	bl	800927e <SDMMC_GetResponse>
 800732c:	4603      	mov	r3, r0
 800732e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007332:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007336:	d102      	bne.n	800733e <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007338:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800733c:	e02f      	b.n	800739e <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800733e:	f107 030c 	add.w	r3, r7, #12
 8007342:	4619      	mov	r1, r3
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 f82e 	bl	80073a6 <SD_FindSCR>
 800734a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d001      	beq.n	8007356 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	e023      	b.n	800739e <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d01c      	beq.n	800739a <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007368:	041b      	lsls	r3, r3, #16
 800736a:	4619      	mov	r1, r3
 800736c:	4610      	mov	r0, r2
 800736e:	f002 f905 	bl	800957c <SDMMC_CmdAppCommand>
 8007372:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d001      	beq.n	800737e <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	e00f      	b.n	800739e <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2100      	movs	r1, #0
 8007384:	4618      	mov	r0, r3
 8007386:	f002 f943 	bl	8009610 <SDMMC_CmdBusWidth>
 800738a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d001      	beq.n	8007396 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	e003      	b.n	800739e <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8007396:	2300      	movs	r3, #0
 8007398:	e001      	b.n	800739e <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800739a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3718      	adds	r7, #24
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80073a6:	b590      	push	{r4, r7, lr}
 80073a8:	b08f      	sub	sp, #60	; 0x3c
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
 80073ae:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80073b0:	2300      	movs	r3, #0
 80073b2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80073b4:	f7f9 f8ce 	bl	8000554 <HAL_GetTick>
 80073b8:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0;
 80073ba:	2300      	movs	r3, #0
 80073bc:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2] = {0, 0};
 80073be:	2300      	movs	r3, #0
 80073c0:	60fb      	str	r3, [r7, #12]
 80073c2:	2300      	movs	r3, #0
 80073c4:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2108      	movs	r1, #8
 80073cc:	4618      	mov	r0, r3
 80073ce:	f001 ff97 	bl	8009300 <SDMMC_CmdBlockLength>
 80073d2:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 80073d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d001      	beq.n	80073de <SD_FindSCR+0x38>
  {
    return errorstate;
 80073da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073dc:	e0a8      	b.n	8007530 <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073e6:	041b      	lsls	r3, r3, #16
 80073e8:	4619      	mov	r1, r3
 80073ea:	4610      	mov	r0, r2
 80073ec:	f002 f8c6 	bl	800957c <SDMMC_CmdAppCommand>
 80073f0:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 80073f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d001      	beq.n	80073fc <SD_FindSCR+0x56>
  {
    return errorstate;
 80073f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fa:	e099      	b.n	8007530 <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80073fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007400:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8;
 8007402:	2308      	movs	r3, #8
 8007404:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007406:	2330      	movs	r3, #48	; 0x30
 8007408:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800740a:	2302      	movs	r3, #2
 800740c:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800740e:	2300      	movs	r3, #0
 8007410:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007412:	2301      	movs	r3, #1
 8007414:	62bb      	str	r3, [r7, #40]	; 0x28
  SDMMC_ConfigData(hsd->Instance, &config);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f107 0214 	add.w	r2, r7, #20
 800741e:	4611      	mov	r1, r2
 8007420:	4618      	mov	r0, r3
 8007422:	f001 ff41 	bl	80092a8 <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4618      	mov	r0, r3
 800742c:	f002 f914 	bl	8009658 <SDMMC_CmdSendSCR>
 8007430:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8007432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007434:	2b00      	cmp	r3, #0
 8007436:	d022      	beq.n	800747e <SD_FindSCR+0xd8>
  {
    return errorstate;
 8007438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743a:	e079      	b.n	8007530 <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007442:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00e      	beq.n	8007468 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6819      	ldr	r1, [r3, #0]
 800744e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	f107 020c 	add.w	r2, r7, #12
 8007456:	18d4      	adds	r4, r2, r3
 8007458:	4608      	mov	r0, r1
 800745a:	f001 fe9f 	bl	800919c <SDMMC_ReadFIFO>
 800745e:	4603      	mov	r3, r0
 8007460:	6023      	str	r3, [r4, #0]
      index++;
 8007462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007464:	3301      	adds	r3, #1
 8007466:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007468:	f7f9 f874 	bl	8000554 <HAL_GetTick>
 800746c:	4602      	mov	r2, r0
 800746e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007476:	d102      	bne.n	800747e <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007478:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800747c:	e058      	b.n	8007530 <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007484:	f240 432a 	movw	r3, #1066	; 0x42a
 8007488:	4013      	ands	r3, r2
 800748a:	2b00      	cmp	r3, #0
 800748c:	d0d6      	beq.n	800743c <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007494:	f003 0308 	and.w	r3, r3, #8
 8007498:	2b00      	cmp	r3, #0
 800749a:	d005      	beq.n	80074a8 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2208      	movs	r2, #8
 80074a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80074a4:	2308      	movs	r3, #8
 80074a6:	e043      	b.n	8007530 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ae:	f003 0302 	and.w	r3, r3, #2
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d005      	beq.n	80074c2 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2202      	movs	r2, #2
 80074bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80074be:	2302      	movs	r3, #2
 80074c0:	e036      	b.n	8007530 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074c8:	f003 0320 	and.w	r3, r3, #32
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d005      	beq.n	80074dc <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2220      	movs	r2, #32
 80074d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 80074d8:	2320      	movs	r3, #32
 80074da:	e029      	b.n	8007530 <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80074e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	061a      	lsls	r2, r3, #24
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	021b      	lsls	r3, r3, #8
 80074ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80074f2:	431a      	orrs	r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	0a1b      	lsrs	r3, r3, #8
 80074f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80074fc:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	3304      	adds	r3, #4
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8007508:	430a      	orrs	r2, r1
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800750a:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	061a      	lsls	r2, r3, #24
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	021b      	lsls	r3, r3, #8
 8007514:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007518:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	0a1b      	lsrs	r3, r3, #8
 800751e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007522:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	0e1b      	lsrs	r3, r3, #24
 8007528:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	373c      	adds	r7, #60	; 0x3c
 8007534:	46bd      	mov	sp, r7
 8007536:	bd90      	pop	{r4, r7, pc}

08007538 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007538:	b590      	push	{r4, r7, lr}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007540:	2300      	movs	r3, #0
 8007542:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007548:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDMMC Rx FIFO */
  for(count = 0; count < 8; count++)
 800754a:	2300      	movs	r3, #0
 800754c:	60fb      	str	r3, [r7, #12]
 800754e:	e00d      	b.n	800756c <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDMMC_ReadFIFO(hsd->Instance);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6819      	ldr	r1, [r3, #0]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	18d4      	adds	r4, r2, r3
 800755c:	4608      	mov	r0, r1
 800755e:	f001 fe1d 	bl	800919c <SDMMC_ReadFIFO>
 8007562:	4603      	mov	r3, r0
 8007564:	6023      	str	r3, [r4, #0]
  for(count = 0; count < 8; count++)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	3301      	adds	r3, #1
 800756a:	60fb      	str	r3, [r7, #12]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2b07      	cmp	r3, #7
 8007570:	d9ee      	bls.n	8007550 <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007576:	f103 0220 	add.w	r2, r3, #32
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3714      	adds	r7, #20
 8007584:	46bd      	mov	sp, r7
 8007586:	bd90      	pop	{r4, r7, pc}

08007588 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007590:	2300      	movs	r3, #0
 8007592:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a1b      	ldr	r3, [r3, #32]
 8007598:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDMMC Tx FIFO */
  for(count = 0; count < 8; count++)
 800759a:	2300      	movs	r3, #0
 800759c:	60fb      	str	r3, [r7, #12]
 800759e:	e00b      	b.n	80075b8 <SD_Write_IT+0x30>
  {
    SDMMC_WriteFIFO(hsd->Instance, (tmp + count));
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6818      	ldr	r0, [r3, #0]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	68ba      	ldr	r2, [r7, #8]
 80075aa:	4413      	add	r3, r2
 80075ac:	4619      	mov	r1, r3
 80075ae:	f001 fe02 	bl	80091b6 <SDMMC_WriteFIFO>
  for(count = 0; count < 8; count++)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	3301      	adds	r3, #1
 80075b6:	60fb      	str	r3, [r7, #12]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2b07      	cmp	r3, #7
 80075bc:	d9f0      	bls.n	80075a0 <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a1b      	ldr	r3, [r3, #32]
 80075c2:	f103 0220 	add.w	r2, r3, #32
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 80075ca:	2300      	movs	r3, #0
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3710      	adds	r7, #16
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d101      	bne.n	80075e8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e025      	b.n	8007634 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d106      	bne.n	8007602 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f00d fd6b 	bl	80150d8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2202      	movs	r2, #2
 8007606:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	3304      	adds	r3, #4
 8007612:	4619      	mov	r1, r3
 8007614:	4610      	mov	r0, r2
 8007616:	f001 fca3 	bl	8008f60 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6818      	ldr	r0, [r3, #0]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	461a      	mov	r2, r3
 8007624:	6839      	ldr	r1, [r7, #0]
 8007626:	f001 fd0d 	bl	8009044 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2201      	movs	r2, #1
 800762e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3708      	adds	r7, #8
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d101      	bne.n	800764e <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	e04c      	b.n	80076e8 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007654:	b2db      	uxtb	r3, r3
 8007656:	2b00      	cmp	r3, #0
 8007658:	d106      	bne.n	8007668 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f00d fa76 	bl	8014b54 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2202      	movs	r2, #2
 800766c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f022 0203 	bic.w	r2, r2, #3
 800767e:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	4b19      	ldr	r3, [pc, #100]	; (80076f0 <HAL_SPDIFRX_Init+0xb4>)
 800768c:	4013      	ands	r3, r2
 800768e:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8007698:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800769e:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 80076a4:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 80076aa:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 80076b0:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 80076b6:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 80076bc:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 80076c2:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 80076c8:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3710      	adds	r7, #16
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	fff88407 	.word	0xfff88407

080076f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d101      	bne.n	8007706 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e01d      	b.n	8007742 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800770c:	b2db      	uxtb	r3, r3
 800770e:	2b00      	cmp	r3, #0
 8007710:	d106      	bne.n	8007720 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f00d fa5c 	bl	8014bd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2202      	movs	r2, #2
 8007724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	3304      	adds	r3, #4
 8007730:	4619      	mov	r1, r3
 8007732:	4610      	mov	r0, r2
 8007734:	f000 fb78 	bl	8007e28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3708      	adds	r7, #8
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
	...

0800774c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	68da      	ldr	r2, [r3, #12]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f042 0201 	orr.w	r2, r2, #1
 8007762:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	689a      	ldr	r2, [r3, #8]
 800776a:	4b0c      	ldr	r3, [pc, #48]	; (800779c <HAL_TIM_Base_Start_IT+0x50>)
 800776c:	4013      	ands	r3, r2
 800776e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2b06      	cmp	r3, #6
 8007774:	d00b      	beq.n	800778e <HAL_TIM_Base_Start_IT+0x42>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800777c:	d007      	beq.n	800778e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f042 0201 	orr.w	r2, r2, #1
 800778c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	3714      	adds	r7, #20
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr
 800779c:	00010007 	.word	0x00010007

080077a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d101      	bne.n	80077b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e01d      	b.n	80077ee <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d106      	bne.n	80077cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f00d fa74 	bl	8014cb4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2202      	movs	r2, #2
 80077d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	3304      	adds	r3, #4
 80077dc:	4619      	mov	r1, r3
 80077de:	4610      	mov	r0, r2
 80077e0:	f000 fb22 	bl	8007e28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3708      	adds	r7, #8
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b082      	sub	sp, #8
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	f003 0302 	and.w	r3, r3, #2
 8007808:	2b02      	cmp	r3, #2
 800780a:	d122      	bne.n	8007852 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	f003 0302 	and.w	r3, r3, #2
 8007816:	2b02      	cmp	r3, #2
 8007818:	d11b      	bne.n	8007852 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f06f 0202 	mvn.w	r2, #2
 8007822:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	f003 0303 	and.w	r3, r3, #3
 8007834:	2b00      	cmp	r3, #0
 8007836:	d003      	beq.n	8007840 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 fad7 	bl	8007dec <HAL_TIM_IC_CaptureCallback>
 800783e:	e005      	b.n	800784c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 fac9 	bl	8007dd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 fada 	bl	8007e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	691b      	ldr	r3, [r3, #16]
 8007858:	f003 0304 	and.w	r3, r3, #4
 800785c:	2b04      	cmp	r3, #4
 800785e:	d122      	bne.n	80078a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	f003 0304 	and.w	r3, r3, #4
 800786a:	2b04      	cmp	r3, #4
 800786c:	d11b      	bne.n	80078a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f06f 0204 	mvn.w	r2, #4
 8007876:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2202      	movs	r2, #2
 800787c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007888:	2b00      	cmp	r3, #0
 800788a:	d003      	beq.n	8007894 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 faad 	bl	8007dec <HAL_TIM_IC_CaptureCallback>
 8007892:	e005      	b.n	80078a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 fa9f 	bl	8007dd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fab0 	bl	8007e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	691b      	ldr	r3, [r3, #16]
 80078ac:	f003 0308 	and.w	r3, r3, #8
 80078b0:	2b08      	cmp	r3, #8
 80078b2:	d122      	bne.n	80078fa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	f003 0308 	and.w	r3, r3, #8
 80078be:	2b08      	cmp	r3, #8
 80078c0:	d11b      	bne.n	80078fa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f06f 0208 	mvn.w	r2, #8
 80078ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2204      	movs	r2, #4
 80078d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	69db      	ldr	r3, [r3, #28]
 80078d8:	f003 0303 	and.w	r3, r3, #3
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d003      	beq.n	80078e8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 fa83 	bl	8007dec <HAL_TIM_IC_CaptureCallback>
 80078e6:	e005      	b.n	80078f4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 fa75 	bl	8007dd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 fa86 	bl	8007e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	f003 0310 	and.w	r3, r3, #16
 8007904:	2b10      	cmp	r3, #16
 8007906:	d122      	bne.n	800794e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	f003 0310 	and.w	r3, r3, #16
 8007912:	2b10      	cmp	r3, #16
 8007914:	d11b      	bne.n	800794e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f06f 0210 	mvn.w	r2, #16
 800791e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2208      	movs	r2, #8
 8007924:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	69db      	ldr	r3, [r3, #28]
 800792c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007930:	2b00      	cmp	r3, #0
 8007932:	d003      	beq.n	800793c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 fa59 	bl	8007dec <HAL_TIM_IC_CaptureCallback>
 800793a:	e005      	b.n	8007948 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fa4b 	bl	8007dd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 fa5c 	bl	8007e00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	691b      	ldr	r3, [r3, #16]
 8007954:	f003 0301 	and.w	r3, r3, #1
 8007958:	2b01      	cmp	r3, #1
 800795a:	d10e      	bne.n	800797a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	f003 0301 	and.w	r3, r3, #1
 8007966:	2b01      	cmp	r3, #1
 8007968:	d107      	bne.n	800797a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f06f 0201 	mvn.w	r2, #1
 8007972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f00c fa59 	bl	8013e2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007984:	2b80      	cmp	r3, #128	; 0x80
 8007986:	d10e      	bne.n	80079a6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007992:	2b80      	cmp	r3, #128	; 0x80
 8007994:	d107      	bne.n	80079a6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800799e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 febd 	bl	8008720 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079b4:	d10e      	bne.n	80079d4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c0:	2b80      	cmp	r3, #128	; 0x80
 80079c2:	d107      	bne.n	80079d4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80079cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 feb0 	bl	8008734 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079de:	2b40      	cmp	r3, #64	; 0x40
 80079e0:	d10e      	bne.n	8007a00 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ec:	2b40      	cmp	r3, #64	; 0x40
 80079ee:	d107      	bne.n	8007a00 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80079f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 fa0a 	bl	8007e14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	f003 0320 	and.w	r3, r3, #32
 8007a0a:	2b20      	cmp	r3, #32
 8007a0c:	d10e      	bne.n	8007a2c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	f003 0320 	and.w	r3, r3, #32
 8007a18:	2b20      	cmp	r3, #32
 8007a1a:	d107      	bne.n	8007a2c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f06f 0220 	mvn.w	r2, #32
 8007a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fe70 	bl	800870c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a2c:	bf00      	nop
 8007a2e:	3708      	adds	r7, #8
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d101      	bne.n	8007a4e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007a4a:	2302      	movs	r3, #2
 8007a4c:	e105      	b.n	8007c5a <HAL_TIM_PWM_ConfigChannel+0x226>
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2201      	movs	r2, #1
 8007a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2202      	movs	r2, #2
 8007a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2b14      	cmp	r3, #20
 8007a62:	f200 80f0 	bhi.w	8007c46 <HAL_TIM_PWM_ConfigChannel+0x212>
 8007a66:	a201      	add	r2, pc, #4	; (adr r2, 8007a6c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a6c:	08007ac1 	.word	0x08007ac1
 8007a70:	08007c47 	.word	0x08007c47
 8007a74:	08007c47 	.word	0x08007c47
 8007a78:	08007c47 	.word	0x08007c47
 8007a7c:	08007b01 	.word	0x08007b01
 8007a80:	08007c47 	.word	0x08007c47
 8007a84:	08007c47 	.word	0x08007c47
 8007a88:	08007c47 	.word	0x08007c47
 8007a8c:	08007b43 	.word	0x08007b43
 8007a90:	08007c47 	.word	0x08007c47
 8007a94:	08007c47 	.word	0x08007c47
 8007a98:	08007c47 	.word	0x08007c47
 8007a9c:	08007b83 	.word	0x08007b83
 8007aa0:	08007c47 	.word	0x08007c47
 8007aa4:	08007c47 	.word	0x08007c47
 8007aa8:	08007c47 	.word	0x08007c47
 8007aac:	08007bc5 	.word	0x08007bc5
 8007ab0:	08007c47 	.word	0x08007c47
 8007ab4:	08007c47 	.word	0x08007c47
 8007ab8:	08007c47 	.word	0x08007c47
 8007abc:	08007c05 	.word	0x08007c05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	68b9      	ldr	r1, [r7, #8]
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f000 fa4e 	bl	8007f68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	699a      	ldr	r2, [r3, #24]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f042 0208 	orr.w	r2, r2, #8
 8007ada:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	699a      	ldr	r2, [r3, #24]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f022 0204 	bic.w	r2, r2, #4
 8007aea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6999      	ldr	r1, [r3, #24]
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	691a      	ldr	r2, [r3, #16]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	430a      	orrs	r2, r1
 8007afc:	619a      	str	r2, [r3, #24]
      break;
 8007afe:	e0a3      	b.n	8007c48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	68b9      	ldr	r1, [r7, #8]
 8007b06:	4618      	mov	r0, r3
 8007b08:	f000 faa0 	bl	800804c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	699a      	ldr	r2, [r3, #24]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	699a      	ldr	r2, [r3, #24]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	6999      	ldr	r1, [r3, #24]
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	021a      	lsls	r2, r3, #8
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	430a      	orrs	r2, r1
 8007b3e:	619a      	str	r2, [r3, #24]
      break;
 8007b40:	e082      	b.n	8007c48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	68b9      	ldr	r1, [r7, #8]
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f000 faf7 	bl	800813c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	69da      	ldr	r2, [r3, #28]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f042 0208 	orr.w	r2, r2, #8
 8007b5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	69da      	ldr	r2, [r3, #28]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f022 0204 	bic.w	r2, r2, #4
 8007b6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	69d9      	ldr	r1, [r3, #28]
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	691a      	ldr	r2, [r3, #16]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	430a      	orrs	r2, r1
 8007b7e:	61da      	str	r2, [r3, #28]
      break;
 8007b80:	e062      	b.n	8007c48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68b9      	ldr	r1, [r7, #8]
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f000 fb4d 	bl	8008228 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	69da      	ldr	r2, [r3, #28]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	69da      	ldr	r2, [r3, #28]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	69d9      	ldr	r1, [r3, #28]
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	021a      	lsls	r2, r3, #8
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	430a      	orrs	r2, r1
 8007bc0:	61da      	str	r2, [r3, #28]
      break;
 8007bc2:	e041      	b.n	8007c48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68b9      	ldr	r1, [r7, #8]
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f000 fb84 	bl	80082d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f042 0208 	orr.w	r2, r2, #8
 8007bde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f022 0204 	bic.w	r2, r2, #4
 8007bee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	691a      	ldr	r2, [r3, #16]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	430a      	orrs	r2, r1
 8007c00:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007c02:	e021      	b.n	8007c48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68b9      	ldr	r1, [r7, #8]
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f000 fbb6 	bl	800837c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	021a      	lsls	r2, r3, #8
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	430a      	orrs	r2, r1
 8007c42:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007c44:	e000      	b.n	8007c48 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8007c46:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop

08007c64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d101      	bne.n	8007c7c <HAL_TIM_ConfigClockSource+0x18>
 8007c78:	2302      	movs	r3, #2
 8007c7a:	e0a6      	b.n	8007dca <HAL_TIM_ConfigClockSource+0x166>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2202      	movs	r2, #2
 8007c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	4b4f      	ldr	r3, [pc, #316]	; (8007dd4 <HAL_TIM_ConfigClockSource+0x170>)
 8007c98:	4013      	ands	r3, r2
 8007c9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ca2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2b40      	cmp	r3, #64	; 0x40
 8007cb2:	d067      	beq.n	8007d84 <HAL_TIM_ConfigClockSource+0x120>
 8007cb4:	2b40      	cmp	r3, #64	; 0x40
 8007cb6:	d80b      	bhi.n	8007cd0 <HAL_TIM_ConfigClockSource+0x6c>
 8007cb8:	2b10      	cmp	r3, #16
 8007cba:	d073      	beq.n	8007da4 <HAL_TIM_ConfigClockSource+0x140>
 8007cbc:	2b10      	cmp	r3, #16
 8007cbe:	d802      	bhi.n	8007cc6 <HAL_TIM_ConfigClockSource+0x62>
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d06f      	beq.n	8007da4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007cc4:	e078      	b.n	8007db8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007cc6:	2b20      	cmp	r3, #32
 8007cc8:	d06c      	beq.n	8007da4 <HAL_TIM_ConfigClockSource+0x140>
 8007cca:	2b30      	cmp	r3, #48	; 0x30
 8007ccc:	d06a      	beq.n	8007da4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007cce:	e073      	b.n	8007db8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007cd0:	2b70      	cmp	r3, #112	; 0x70
 8007cd2:	d00d      	beq.n	8007cf0 <HAL_TIM_ConfigClockSource+0x8c>
 8007cd4:	2b70      	cmp	r3, #112	; 0x70
 8007cd6:	d804      	bhi.n	8007ce2 <HAL_TIM_ConfigClockSource+0x7e>
 8007cd8:	2b50      	cmp	r3, #80	; 0x50
 8007cda:	d033      	beq.n	8007d44 <HAL_TIM_ConfigClockSource+0xe0>
 8007cdc:	2b60      	cmp	r3, #96	; 0x60
 8007cde:	d041      	beq.n	8007d64 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007ce0:	e06a      	b.n	8007db8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ce6:	d066      	beq.n	8007db6 <HAL_TIM_ConfigClockSource+0x152>
 8007ce8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cec:	d017      	beq.n	8007d1e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007cee:	e063      	b.n	8007db8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6818      	ldr	r0, [r3, #0]
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	6899      	ldr	r1, [r3, #8]
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	685a      	ldr	r2, [r3, #4]
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	f000 fc0a 	bl	8008518 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007d12:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	609a      	str	r2, [r3, #8]
      break;
 8007d1c:	e04c      	b.n	8007db8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6818      	ldr	r0, [r3, #0]
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	6899      	ldr	r1, [r3, #8]
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	685a      	ldr	r2, [r3, #4]
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	f000 fbf3 	bl	8008518 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	689a      	ldr	r2, [r3, #8]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d40:	609a      	str	r2, [r3, #8]
      break;
 8007d42:	e039      	b.n	8007db8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6818      	ldr	r0, [r3, #0]
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	6859      	ldr	r1, [r3, #4]
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	461a      	mov	r2, r3
 8007d52:	f000 fb67 	bl	8008424 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2150      	movs	r1, #80	; 0x50
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f000 fbc0 	bl	80084e2 <TIM_ITRx_SetConfig>
      break;
 8007d62:	e029      	b.n	8007db8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6818      	ldr	r0, [r3, #0]
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	6859      	ldr	r1, [r3, #4]
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	461a      	mov	r2, r3
 8007d72:	f000 fb86 	bl	8008482 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2160      	movs	r1, #96	; 0x60
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f000 fbb0 	bl	80084e2 <TIM_ITRx_SetConfig>
      break;
 8007d82:	e019      	b.n	8007db8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6818      	ldr	r0, [r3, #0]
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	6859      	ldr	r1, [r3, #4]
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	461a      	mov	r2, r3
 8007d92:	f000 fb47 	bl	8008424 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2140      	movs	r1, #64	; 0x40
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f000 fba0 	bl	80084e2 <TIM_ITRx_SetConfig>
      break;
 8007da2:	e009      	b.n	8007db8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4619      	mov	r1, r3
 8007dae:	4610      	mov	r0, r2
 8007db0:	f000 fb97 	bl	80084e2 <TIM_ITRx_SetConfig>
      break;
 8007db4:	e000      	b.n	8007db8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007db6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	fffeff88 	.word	0xfffeff88

08007dd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007de0:	bf00      	nop
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007df4:	bf00      	nop
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e08:	bf00      	nop
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e1c:	bf00      	nop
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4a40      	ldr	r2, [pc, #256]	; (8007f3c <TIM_Base_SetConfig+0x114>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d013      	beq.n	8007e68 <TIM_Base_SetConfig+0x40>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e46:	d00f      	beq.n	8007e68 <TIM_Base_SetConfig+0x40>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4a3d      	ldr	r2, [pc, #244]	; (8007f40 <TIM_Base_SetConfig+0x118>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d00b      	beq.n	8007e68 <TIM_Base_SetConfig+0x40>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4a3c      	ldr	r2, [pc, #240]	; (8007f44 <TIM_Base_SetConfig+0x11c>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d007      	beq.n	8007e68 <TIM_Base_SetConfig+0x40>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4a3b      	ldr	r2, [pc, #236]	; (8007f48 <TIM_Base_SetConfig+0x120>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d003      	beq.n	8007e68 <TIM_Base_SetConfig+0x40>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a3a      	ldr	r2, [pc, #232]	; (8007f4c <TIM_Base_SetConfig+0x124>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d108      	bne.n	8007e7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a2f      	ldr	r2, [pc, #188]	; (8007f3c <TIM_Base_SetConfig+0x114>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d02b      	beq.n	8007eda <TIM_Base_SetConfig+0xb2>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e88:	d027      	beq.n	8007eda <TIM_Base_SetConfig+0xb2>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a2c      	ldr	r2, [pc, #176]	; (8007f40 <TIM_Base_SetConfig+0x118>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d023      	beq.n	8007eda <TIM_Base_SetConfig+0xb2>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a2b      	ldr	r2, [pc, #172]	; (8007f44 <TIM_Base_SetConfig+0x11c>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d01f      	beq.n	8007eda <TIM_Base_SetConfig+0xb2>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a2a      	ldr	r2, [pc, #168]	; (8007f48 <TIM_Base_SetConfig+0x120>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d01b      	beq.n	8007eda <TIM_Base_SetConfig+0xb2>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a29      	ldr	r2, [pc, #164]	; (8007f4c <TIM_Base_SetConfig+0x124>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d017      	beq.n	8007eda <TIM_Base_SetConfig+0xb2>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a28      	ldr	r2, [pc, #160]	; (8007f50 <TIM_Base_SetConfig+0x128>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d013      	beq.n	8007eda <TIM_Base_SetConfig+0xb2>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a27      	ldr	r2, [pc, #156]	; (8007f54 <TIM_Base_SetConfig+0x12c>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d00f      	beq.n	8007eda <TIM_Base_SetConfig+0xb2>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a26      	ldr	r2, [pc, #152]	; (8007f58 <TIM_Base_SetConfig+0x130>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d00b      	beq.n	8007eda <TIM_Base_SetConfig+0xb2>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4a25      	ldr	r2, [pc, #148]	; (8007f5c <TIM_Base_SetConfig+0x134>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d007      	beq.n	8007eda <TIM_Base_SetConfig+0xb2>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a24      	ldr	r2, [pc, #144]	; (8007f60 <TIM_Base_SetConfig+0x138>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d003      	beq.n	8007eda <TIM_Base_SetConfig+0xb2>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a23      	ldr	r2, [pc, #140]	; (8007f64 <TIM_Base_SetConfig+0x13c>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d108      	bne.n	8007eec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ee0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	68fa      	ldr	r2, [r7, #12]
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	695b      	ldr	r3, [r3, #20]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	68fa      	ldr	r2, [r7, #12]
 8007efe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	689a      	ldr	r2, [r3, #8]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a0a      	ldr	r2, [pc, #40]	; (8007f3c <TIM_Base_SetConfig+0x114>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d003      	beq.n	8007f20 <TIM_Base_SetConfig+0xf8>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a0c      	ldr	r2, [pc, #48]	; (8007f4c <TIM_Base_SetConfig+0x124>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d103      	bne.n	8007f28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	691a      	ldr	r2, [r3, #16]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	615a      	str	r2, [r3, #20]
}
 8007f2e:	bf00      	nop
 8007f30:	3714      	adds	r7, #20
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	40010000 	.word	0x40010000
 8007f40:	40000400 	.word	0x40000400
 8007f44:	40000800 	.word	0x40000800
 8007f48:	40000c00 	.word	0x40000c00
 8007f4c:	40010400 	.word	0x40010400
 8007f50:	40014000 	.word	0x40014000
 8007f54:	40014400 	.word	0x40014400
 8007f58:	40014800 	.word	0x40014800
 8007f5c:	40001800 	.word	0x40001800
 8007f60:	40001c00 	.word	0x40001c00
 8007f64:	40002000 	.word	0x40002000

08007f68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b087      	sub	sp, #28
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6a1b      	ldr	r3, [r3, #32]
 8007f76:	f023 0201 	bic.w	r2, r3, #1
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a1b      	ldr	r3, [r3, #32]
 8007f82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	699b      	ldr	r3, [r3, #24]
 8007f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	4b2b      	ldr	r3, [pc, #172]	; (8008040 <TIM_OC1_SetConfig+0xd8>)
 8007f94:	4013      	ands	r3, r2
 8007f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f023 0303 	bic.w	r3, r3, #3
 8007f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	f023 0302 	bic.w	r3, r3, #2
 8007fb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a21      	ldr	r2, [pc, #132]	; (8008044 <TIM_OC1_SetConfig+0xdc>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d003      	beq.n	8007fcc <TIM_OC1_SetConfig+0x64>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a20      	ldr	r2, [pc, #128]	; (8008048 <TIM_OC1_SetConfig+0xe0>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d10c      	bne.n	8007fe6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	f023 0308 	bic.w	r3, r3, #8
 8007fd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	697a      	ldr	r2, [r7, #20]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	f023 0304 	bic.w	r3, r3, #4
 8007fe4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a16      	ldr	r2, [pc, #88]	; (8008044 <TIM_OC1_SetConfig+0xdc>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d003      	beq.n	8007ff6 <TIM_OC1_SetConfig+0x8e>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a15      	ldr	r2, [pc, #84]	; (8008048 <TIM_OC1_SetConfig+0xe0>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d111      	bne.n	800801a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ffc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008004:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	695b      	ldr	r3, [r3, #20]
 800800a:	693a      	ldr	r2, [r7, #16]
 800800c:	4313      	orrs	r3, r2
 800800e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	699b      	ldr	r3, [r3, #24]
 8008014:	693a      	ldr	r2, [r7, #16]
 8008016:	4313      	orrs	r3, r2
 8008018:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	693a      	ldr	r2, [r7, #16]
 800801e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	685a      	ldr	r2, [r3, #4]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	697a      	ldr	r2, [r7, #20]
 8008032:	621a      	str	r2, [r3, #32]
}
 8008034:	bf00      	nop
 8008036:	371c      	adds	r7, #28
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr
 8008040:	fffeff8f 	.word	0xfffeff8f
 8008044:	40010000 	.word	0x40010000
 8008048:	40010400 	.word	0x40010400

0800804c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800804c:	b480      	push	{r7}
 800804e:	b087      	sub	sp, #28
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6a1b      	ldr	r3, [r3, #32]
 800805a:	f023 0210 	bic.w	r2, r3, #16
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a1b      	ldr	r3, [r3, #32]
 8008066:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	699b      	ldr	r3, [r3, #24]
 8008072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	4b2e      	ldr	r3, [pc, #184]	; (8008130 <TIM_OC2_SetConfig+0xe4>)
 8008078:	4013      	ands	r3, r2
 800807a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008082:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	021b      	lsls	r3, r3, #8
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	4313      	orrs	r3, r2
 800808e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	f023 0320 	bic.w	r3, r3, #32
 8008096:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	011b      	lsls	r3, r3, #4
 800809e:	697a      	ldr	r2, [r7, #20]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a23      	ldr	r2, [pc, #140]	; (8008134 <TIM_OC2_SetConfig+0xe8>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d003      	beq.n	80080b4 <TIM_OC2_SetConfig+0x68>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a22      	ldr	r2, [pc, #136]	; (8008138 <TIM_OC2_SetConfig+0xec>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d10d      	bne.n	80080d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	011b      	lsls	r3, r3, #4
 80080c2:	697a      	ldr	r2, [r7, #20]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4a18      	ldr	r2, [pc, #96]	; (8008134 <TIM_OC2_SetConfig+0xe8>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d003      	beq.n	80080e0 <TIM_OC2_SetConfig+0x94>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a17      	ldr	r2, [pc, #92]	; (8008138 <TIM_OC2_SetConfig+0xec>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d113      	bne.n	8008108 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80080e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80080ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	695b      	ldr	r3, [r3, #20]
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	693a      	ldr	r2, [r7, #16]
 80080f8:	4313      	orrs	r3, r2
 80080fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	699b      	ldr	r3, [r3, #24]
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	693a      	ldr	r2, [r7, #16]
 8008104:	4313      	orrs	r3, r2
 8008106:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	693a      	ldr	r2, [r7, #16]
 800810c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	68fa      	ldr	r2, [r7, #12]
 8008112:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	685a      	ldr	r2, [r3, #4]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	697a      	ldr	r2, [r7, #20]
 8008120:	621a      	str	r2, [r3, #32]
}
 8008122:	bf00      	nop
 8008124:	371c      	adds	r7, #28
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	feff8fff 	.word	0xfeff8fff
 8008134:	40010000 	.word	0x40010000
 8008138:	40010400 	.word	0x40010400

0800813c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800813c:	b480      	push	{r7}
 800813e:	b087      	sub	sp, #28
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a1b      	ldr	r3, [r3, #32]
 800814a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6a1b      	ldr	r3, [r3, #32]
 8008156:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	69db      	ldr	r3, [r3, #28]
 8008162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	4b2d      	ldr	r3, [pc, #180]	; (800821c <TIM_OC3_SetConfig+0xe0>)
 8008168:	4013      	ands	r3, r2
 800816a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f023 0303 	bic.w	r3, r3, #3
 8008172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	4313      	orrs	r3, r2
 800817c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008184:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	021b      	lsls	r3, r3, #8
 800818c:	697a      	ldr	r2, [r7, #20]
 800818e:	4313      	orrs	r3, r2
 8008190:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a22      	ldr	r2, [pc, #136]	; (8008220 <TIM_OC3_SetConfig+0xe4>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d003      	beq.n	80081a2 <TIM_OC3_SetConfig+0x66>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a21      	ldr	r2, [pc, #132]	; (8008224 <TIM_OC3_SetConfig+0xe8>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d10d      	bne.n	80081be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	68db      	ldr	r3, [r3, #12]
 80081ae:	021b      	lsls	r3, r3, #8
 80081b0:	697a      	ldr	r2, [r7, #20]
 80081b2:	4313      	orrs	r3, r2
 80081b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a17      	ldr	r2, [pc, #92]	; (8008220 <TIM_OC3_SetConfig+0xe4>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d003      	beq.n	80081ce <TIM_OC3_SetConfig+0x92>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a16      	ldr	r2, [pc, #88]	; (8008224 <TIM_OC3_SetConfig+0xe8>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d113      	bne.n	80081f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	695b      	ldr	r3, [r3, #20]
 80081e2:	011b      	lsls	r3, r3, #4
 80081e4:	693a      	ldr	r2, [r7, #16]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	011b      	lsls	r3, r3, #4
 80081f0:	693a      	ldr	r2, [r7, #16]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	693a      	ldr	r2, [r7, #16]
 80081fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	685a      	ldr	r2, [r3, #4]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	697a      	ldr	r2, [r7, #20]
 800820e:	621a      	str	r2, [r3, #32]
}
 8008210:	bf00      	nop
 8008212:	371c      	adds	r7, #28
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr
 800821c:	fffeff8f 	.word	0xfffeff8f
 8008220:	40010000 	.word	0x40010000
 8008224:	40010400 	.word	0x40010400

08008228 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008228:	b480      	push	{r7}
 800822a:	b087      	sub	sp, #28
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a1b      	ldr	r3, [r3, #32]
 8008236:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a1b      	ldr	r3, [r3, #32]
 8008242:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	69db      	ldr	r3, [r3, #28]
 800824e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008250:	68fa      	ldr	r2, [r7, #12]
 8008252:	4b1e      	ldr	r3, [pc, #120]	; (80082cc <TIM_OC4_SetConfig+0xa4>)
 8008254:	4013      	ands	r3, r2
 8008256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800825e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	021b      	lsls	r3, r3, #8
 8008266:	68fa      	ldr	r2, [r7, #12]
 8008268:	4313      	orrs	r3, r2
 800826a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008272:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	031b      	lsls	r3, r3, #12
 800827a:	693a      	ldr	r2, [r7, #16]
 800827c:	4313      	orrs	r3, r2
 800827e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4a13      	ldr	r2, [pc, #76]	; (80082d0 <TIM_OC4_SetConfig+0xa8>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d003      	beq.n	8008290 <TIM_OC4_SetConfig+0x68>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4a12      	ldr	r2, [pc, #72]	; (80082d4 <TIM_OC4_SetConfig+0xac>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d109      	bne.n	80082a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008296:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	695b      	ldr	r3, [r3, #20]
 800829c:	019b      	lsls	r3, r3, #6
 800829e:	697a      	ldr	r2, [r7, #20]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	697a      	ldr	r2, [r7, #20]
 80082a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	685a      	ldr	r2, [r3, #4]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	693a      	ldr	r2, [r7, #16]
 80082bc:	621a      	str	r2, [r3, #32]
}
 80082be:	bf00      	nop
 80082c0:	371c      	adds	r7, #28
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr
 80082ca:	bf00      	nop
 80082cc:	feff8fff 	.word	0xfeff8fff
 80082d0:	40010000 	.word	0x40010000
 80082d4:	40010400 	.word	0x40010400

080082d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80082d8:	b480      	push	{r7}
 80082da:	b087      	sub	sp, #28
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a1b      	ldr	r3, [r3, #32]
 80082e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a1b      	ldr	r3, [r3, #32]
 80082f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008300:	68fa      	ldr	r2, [r7, #12]
 8008302:	4b1b      	ldr	r3, [pc, #108]	; (8008370 <TIM_OC5_SetConfig+0x98>)
 8008304:	4013      	ands	r3, r2
 8008306:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	4313      	orrs	r3, r2
 8008310:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008318:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	041b      	lsls	r3, r3, #16
 8008320:	693a      	ldr	r2, [r7, #16]
 8008322:	4313      	orrs	r3, r2
 8008324:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	4a12      	ldr	r2, [pc, #72]	; (8008374 <TIM_OC5_SetConfig+0x9c>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d003      	beq.n	8008336 <TIM_OC5_SetConfig+0x5e>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	4a11      	ldr	r2, [pc, #68]	; (8008378 <TIM_OC5_SetConfig+0xa0>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d109      	bne.n	800834a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800833c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	695b      	ldr	r3, [r3, #20]
 8008342:	021b      	lsls	r3, r3, #8
 8008344:	697a      	ldr	r2, [r7, #20]
 8008346:	4313      	orrs	r3, r2
 8008348:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	697a      	ldr	r2, [r7, #20]
 800834e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	685a      	ldr	r2, [r3, #4]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	693a      	ldr	r2, [r7, #16]
 8008362:	621a      	str	r2, [r3, #32]
}
 8008364:	bf00      	nop
 8008366:	371c      	adds	r7, #28
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr
 8008370:	fffeff8f 	.word	0xfffeff8f
 8008374:	40010000 	.word	0x40010000
 8008378:	40010400 	.word	0x40010400

0800837c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800837c:	b480      	push	{r7}
 800837e:	b087      	sub	sp, #28
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a1b      	ldr	r3, [r3, #32]
 800838a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6a1b      	ldr	r3, [r3, #32]
 8008396:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80083a4:	68fa      	ldr	r2, [r7, #12]
 80083a6:	4b1c      	ldr	r3, [pc, #112]	; (8008418 <TIM_OC6_SetConfig+0x9c>)
 80083a8:	4013      	ands	r3, r2
 80083aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	021b      	lsls	r3, r3, #8
 80083b2:	68fa      	ldr	r2, [r7, #12]
 80083b4:	4313      	orrs	r3, r2
 80083b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80083be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	051b      	lsls	r3, r3, #20
 80083c6:	693a      	ldr	r2, [r7, #16]
 80083c8:	4313      	orrs	r3, r2
 80083ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	4a13      	ldr	r2, [pc, #76]	; (800841c <TIM_OC6_SetConfig+0xa0>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d003      	beq.n	80083dc <TIM_OC6_SetConfig+0x60>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a12      	ldr	r2, [pc, #72]	; (8008420 <TIM_OC6_SetConfig+0xa4>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d109      	bne.n	80083f0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	695b      	ldr	r3, [r3, #20]
 80083e8:	029b      	lsls	r3, r3, #10
 80083ea:	697a      	ldr	r2, [r7, #20]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	697a      	ldr	r2, [r7, #20]
 80083f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	68fa      	ldr	r2, [r7, #12]
 80083fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	685a      	ldr	r2, [r3, #4]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	693a      	ldr	r2, [r7, #16]
 8008408:	621a      	str	r2, [r3, #32]
}
 800840a:	bf00      	nop
 800840c:	371c      	adds	r7, #28
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	feff8fff 	.word	0xfeff8fff
 800841c:	40010000 	.word	0x40010000
 8008420:	40010400 	.word	0x40010400

08008424 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008424:	b480      	push	{r7}
 8008426:	b087      	sub	sp, #28
 8008428:	af00      	add	r7, sp, #0
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6a1b      	ldr	r3, [r3, #32]
 8008434:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6a1b      	ldr	r3, [r3, #32]
 800843a:	f023 0201 	bic.w	r2, r3, #1
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	699b      	ldr	r3, [r3, #24]
 8008446:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800844e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	011b      	lsls	r3, r3, #4
 8008454:	693a      	ldr	r2, [r7, #16]
 8008456:	4313      	orrs	r3, r2
 8008458:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	f023 030a 	bic.w	r3, r3, #10
 8008460:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008462:	697a      	ldr	r2, [r7, #20]
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	4313      	orrs	r3, r2
 8008468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	693a      	ldr	r2, [r7, #16]
 800846e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	697a      	ldr	r2, [r7, #20]
 8008474:	621a      	str	r2, [r3, #32]
}
 8008476:	bf00      	nop
 8008478:	371c      	adds	r7, #28
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008482:	b480      	push	{r7}
 8008484:	b087      	sub	sp, #28
 8008486:	af00      	add	r7, sp, #0
 8008488:	60f8      	str	r0, [r7, #12]
 800848a:	60b9      	str	r1, [r7, #8]
 800848c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6a1b      	ldr	r3, [r3, #32]
 8008492:	f023 0210 	bic.w	r2, r3, #16
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	699b      	ldr	r3, [r3, #24]
 800849e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6a1b      	ldr	r3, [r3, #32]
 80084a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80084ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	031b      	lsls	r3, r3, #12
 80084b2:	697a      	ldr	r2, [r7, #20]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80084be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	011b      	lsls	r3, r3, #4
 80084c4:	693a      	ldr	r2, [r7, #16]
 80084c6:	4313      	orrs	r3, r2
 80084c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	697a      	ldr	r2, [r7, #20]
 80084ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	693a      	ldr	r2, [r7, #16]
 80084d4:	621a      	str	r2, [r3, #32]
}
 80084d6:	bf00      	nop
 80084d8:	371c      	adds	r7, #28
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr

080084e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80084e2:	b480      	push	{r7}
 80084e4:	b085      	sub	sp, #20
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
 80084ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80084fa:	683a      	ldr	r2, [r7, #0]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	4313      	orrs	r3, r2
 8008500:	f043 0307 	orr.w	r3, r3, #7
 8008504:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	609a      	str	r2, [r3, #8]
}
 800850c:	bf00      	nop
 800850e:	3714      	adds	r7, #20
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008518:	b480      	push	{r7}
 800851a:	b087      	sub	sp, #28
 800851c:	af00      	add	r7, sp, #0
 800851e:	60f8      	str	r0, [r7, #12]
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	607a      	str	r2, [r7, #4]
 8008524:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008532:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	021a      	lsls	r2, r3, #8
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	431a      	orrs	r2, r3
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	4313      	orrs	r3, r2
 8008540:	697a      	ldr	r2, [r7, #20]
 8008542:	4313      	orrs	r3, r2
 8008544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	697a      	ldr	r2, [r7, #20]
 800854a:	609a      	str	r2, [r3, #8]
}
 800854c:	bf00      	nop
 800854e:	371c      	adds	r7, #28
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008568:	2b01      	cmp	r3, #1
 800856a:	d101      	bne.n	8008570 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800856c:	2302      	movs	r3, #2
 800856e:	e045      	b.n	80085fc <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2201      	movs	r2, #1
 8008574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2202      	movs	r2, #2
 800857c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a1c      	ldr	r2, [pc, #112]	; (8008608 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d004      	beq.n	80085a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a1b      	ldr	r2, [pc, #108]	; (800860c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d108      	bne.n	80085b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80085aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	68fa      	ldr	r2, [r7, #12]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	68fa      	ldr	r2, [r7, #12]
 80085c4:	4313      	orrs	r3, r2
 80085c6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085ce:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	68ba      	ldr	r2, [r7, #8]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	68fa      	ldr	r2, [r7, #12]
 80085e0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	68ba      	ldr	r2, [r7, #8]
 80085e8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2201      	movs	r2, #1
 80085ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2200      	movs	r2, #0
 80085f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085fa:	2300      	movs	r3, #0
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3714      	adds	r7, #20
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr
 8008608:	40010000 	.word	0x40010000
 800860c:	40010400 	.word	0x40010400

08008610 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008610:	b480      	push	{r7}
 8008612:	b085      	sub	sp, #20
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800861a:	2300      	movs	r3, #0
 800861c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008624:	2b01      	cmp	r3, #1
 8008626:	d101      	bne.n	800862c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008628:	2302      	movs	r3, #2
 800862a:	e065      	b.n	80086f8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2201      	movs	r2, #1
 8008630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	4313      	orrs	r3, r2
 8008640:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	4313      	orrs	r3, r2
 800864e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	4313      	orrs	r3, r2
 800865c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4313      	orrs	r3, r2
 800866a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	691b      	ldr	r3, [r3, #16]
 8008676:	4313      	orrs	r3, r2
 8008678:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	695b      	ldr	r3, [r3, #20]
 8008684:	4313      	orrs	r3, r2
 8008686:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008692:	4313      	orrs	r3, r2
 8008694:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	699b      	ldr	r3, [r3, #24]
 80086a0:	041b      	lsls	r3, r3, #16
 80086a2:	4313      	orrs	r3, r2
 80086a4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a16      	ldr	r2, [pc, #88]	; (8008704 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d004      	beq.n	80086ba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a14      	ldr	r2, [pc, #80]	; (8008708 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d115      	bne.n	80086e6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c4:	051b      	lsls	r3, r3, #20
 80086c6:	4313      	orrs	r3, r2
 80086c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	69db      	ldr	r3, [r3, #28]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	6a1b      	ldr	r3, [r3, #32]
 80086e2:	4313      	orrs	r3, r2
 80086e4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	68fa      	ldr	r2, [r7, #12]
 80086ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086f6:	2300      	movs	r3, #0
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3714      	adds	r7, #20
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr
 8008704:	40010000 	.word	0x40010000
 8008708:	40010400 	.word	0x40010400

0800870c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008714:	bf00      	nop
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008728:	bf00      	nop
 800872a:	370c      	adds	r7, #12
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr

08008734 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800873c:	bf00      	nop
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d101      	bne.n	800875a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008756:	2301      	movs	r3, #1
 8008758:	e040      	b.n	80087dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800875e:	2b00      	cmp	r3, #0
 8008760:	d106      	bne.n	8008770 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f00c fb90 	bl	8014e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2224      	movs	r2, #36	; 0x24
 8008774:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f022 0201 	bic.w	r2, r2, #1
 8008784:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 f82c 	bl	80087e4 <UART_SetConfig>
 800878c:	4603      	mov	r3, r0
 800878e:	2b01      	cmp	r3, #1
 8008790:	d101      	bne.n	8008796 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	e022      	b.n	80087dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879a:	2b00      	cmp	r3, #0
 800879c:	d002      	beq.n	80087a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 fac4 	bl	8008d2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	685a      	ldr	r2, [r3, #4]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80087b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	689a      	ldr	r2, [r3, #8]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80087c2:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f042 0201 	orr.w	r2, r2, #1
 80087d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 fb4b 	bl	8008e70 <UART_CheckIdleState>
 80087da:	4603      	mov	r3, r0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3708      	adds	r7, #8
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b088      	sub	sp, #32
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80087ec:	2300      	movs	r3, #0
 80087ee:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80087f0:	2300      	movs	r3, #0
 80087f2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	689a      	ldr	r2, [r3, #8]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	431a      	orrs	r2, r3
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	695b      	ldr	r3, [r3, #20]
 8008802:	431a      	orrs	r2, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	69db      	ldr	r3, [r3, #28]
 8008808:	4313      	orrs	r3, r2
 800880a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	4bb1      	ldr	r3, [pc, #708]	; (8008ad8 <UART_SetConfig+0x2f4>)
 8008814:	4013      	ands	r3, r2
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	6812      	ldr	r2, [r2, #0]
 800881a:	6939      	ldr	r1, [r7, #16]
 800881c:	430b      	orrs	r3, r1
 800881e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	68da      	ldr	r2, [r3, #12]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	430a      	orrs	r2, r1
 8008834:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	699b      	ldr	r3, [r3, #24]
 800883a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6a1b      	ldr	r3, [r3, #32]
 8008840:	693a      	ldr	r2, [r7, #16]
 8008842:	4313      	orrs	r3, r2
 8008844:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	693a      	ldr	r2, [r7, #16]
 8008856:	430a      	orrs	r2, r1
 8008858:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a9f      	ldr	r2, [pc, #636]	; (8008adc <UART_SetConfig+0x2f8>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d121      	bne.n	80088a8 <UART_SetConfig+0xc4>
 8008864:	4b9e      	ldr	r3, [pc, #632]	; (8008ae0 <UART_SetConfig+0x2fc>)
 8008866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800886a:	f003 0303 	and.w	r3, r3, #3
 800886e:	2b03      	cmp	r3, #3
 8008870:	d816      	bhi.n	80088a0 <UART_SetConfig+0xbc>
 8008872:	a201      	add	r2, pc, #4	; (adr r2, 8008878 <UART_SetConfig+0x94>)
 8008874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008878:	08008889 	.word	0x08008889
 800887c:	08008895 	.word	0x08008895
 8008880:	0800888f 	.word	0x0800888f
 8008884:	0800889b 	.word	0x0800889b
 8008888:	2301      	movs	r3, #1
 800888a:	77fb      	strb	r3, [r7, #31]
 800888c:	e151      	b.n	8008b32 <UART_SetConfig+0x34e>
 800888e:	2302      	movs	r3, #2
 8008890:	77fb      	strb	r3, [r7, #31]
 8008892:	e14e      	b.n	8008b32 <UART_SetConfig+0x34e>
 8008894:	2304      	movs	r3, #4
 8008896:	77fb      	strb	r3, [r7, #31]
 8008898:	e14b      	b.n	8008b32 <UART_SetConfig+0x34e>
 800889a:	2308      	movs	r3, #8
 800889c:	77fb      	strb	r3, [r7, #31]
 800889e:	e148      	b.n	8008b32 <UART_SetConfig+0x34e>
 80088a0:	2310      	movs	r3, #16
 80088a2:	77fb      	strb	r3, [r7, #31]
 80088a4:	bf00      	nop
 80088a6:	e144      	b.n	8008b32 <UART_SetConfig+0x34e>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a8d      	ldr	r2, [pc, #564]	; (8008ae4 <UART_SetConfig+0x300>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d134      	bne.n	800891c <UART_SetConfig+0x138>
 80088b2:	4b8b      	ldr	r3, [pc, #556]	; (8008ae0 <UART_SetConfig+0x2fc>)
 80088b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088b8:	f003 030c 	and.w	r3, r3, #12
 80088bc:	2b0c      	cmp	r3, #12
 80088be:	d829      	bhi.n	8008914 <UART_SetConfig+0x130>
 80088c0:	a201      	add	r2, pc, #4	; (adr r2, 80088c8 <UART_SetConfig+0xe4>)
 80088c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c6:	bf00      	nop
 80088c8:	080088fd 	.word	0x080088fd
 80088cc:	08008915 	.word	0x08008915
 80088d0:	08008915 	.word	0x08008915
 80088d4:	08008915 	.word	0x08008915
 80088d8:	08008909 	.word	0x08008909
 80088dc:	08008915 	.word	0x08008915
 80088e0:	08008915 	.word	0x08008915
 80088e4:	08008915 	.word	0x08008915
 80088e8:	08008903 	.word	0x08008903
 80088ec:	08008915 	.word	0x08008915
 80088f0:	08008915 	.word	0x08008915
 80088f4:	08008915 	.word	0x08008915
 80088f8:	0800890f 	.word	0x0800890f
 80088fc:	2300      	movs	r3, #0
 80088fe:	77fb      	strb	r3, [r7, #31]
 8008900:	e117      	b.n	8008b32 <UART_SetConfig+0x34e>
 8008902:	2302      	movs	r3, #2
 8008904:	77fb      	strb	r3, [r7, #31]
 8008906:	e114      	b.n	8008b32 <UART_SetConfig+0x34e>
 8008908:	2304      	movs	r3, #4
 800890a:	77fb      	strb	r3, [r7, #31]
 800890c:	e111      	b.n	8008b32 <UART_SetConfig+0x34e>
 800890e:	2308      	movs	r3, #8
 8008910:	77fb      	strb	r3, [r7, #31]
 8008912:	e10e      	b.n	8008b32 <UART_SetConfig+0x34e>
 8008914:	2310      	movs	r3, #16
 8008916:	77fb      	strb	r3, [r7, #31]
 8008918:	bf00      	nop
 800891a:	e10a      	b.n	8008b32 <UART_SetConfig+0x34e>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a71      	ldr	r2, [pc, #452]	; (8008ae8 <UART_SetConfig+0x304>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d120      	bne.n	8008968 <UART_SetConfig+0x184>
 8008926:	4b6e      	ldr	r3, [pc, #440]	; (8008ae0 <UART_SetConfig+0x2fc>)
 8008928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800892c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008930:	2b10      	cmp	r3, #16
 8008932:	d00f      	beq.n	8008954 <UART_SetConfig+0x170>
 8008934:	2b10      	cmp	r3, #16
 8008936:	d802      	bhi.n	800893e <UART_SetConfig+0x15a>
 8008938:	2b00      	cmp	r3, #0
 800893a:	d005      	beq.n	8008948 <UART_SetConfig+0x164>
 800893c:	e010      	b.n	8008960 <UART_SetConfig+0x17c>
 800893e:	2b20      	cmp	r3, #32
 8008940:	d005      	beq.n	800894e <UART_SetConfig+0x16a>
 8008942:	2b30      	cmp	r3, #48	; 0x30
 8008944:	d009      	beq.n	800895a <UART_SetConfig+0x176>
 8008946:	e00b      	b.n	8008960 <UART_SetConfig+0x17c>
 8008948:	2300      	movs	r3, #0
 800894a:	77fb      	strb	r3, [r7, #31]
 800894c:	e0f1      	b.n	8008b32 <UART_SetConfig+0x34e>
 800894e:	2302      	movs	r3, #2
 8008950:	77fb      	strb	r3, [r7, #31]
 8008952:	e0ee      	b.n	8008b32 <UART_SetConfig+0x34e>
 8008954:	2304      	movs	r3, #4
 8008956:	77fb      	strb	r3, [r7, #31]
 8008958:	e0eb      	b.n	8008b32 <UART_SetConfig+0x34e>
 800895a:	2308      	movs	r3, #8
 800895c:	77fb      	strb	r3, [r7, #31]
 800895e:	e0e8      	b.n	8008b32 <UART_SetConfig+0x34e>
 8008960:	2310      	movs	r3, #16
 8008962:	77fb      	strb	r3, [r7, #31]
 8008964:	bf00      	nop
 8008966:	e0e4      	b.n	8008b32 <UART_SetConfig+0x34e>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a5f      	ldr	r2, [pc, #380]	; (8008aec <UART_SetConfig+0x308>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d120      	bne.n	80089b4 <UART_SetConfig+0x1d0>
 8008972:	4b5b      	ldr	r3, [pc, #364]	; (8008ae0 <UART_SetConfig+0x2fc>)
 8008974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008978:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800897c:	2b40      	cmp	r3, #64	; 0x40
 800897e:	d00f      	beq.n	80089a0 <UART_SetConfig+0x1bc>
 8008980:	2b40      	cmp	r3, #64	; 0x40
 8008982:	d802      	bhi.n	800898a <UART_SetConfig+0x1a6>
 8008984:	2b00      	cmp	r3, #0
 8008986:	d005      	beq.n	8008994 <UART_SetConfig+0x1b0>
 8008988:	e010      	b.n	80089ac <UART_SetConfig+0x1c8>
 800898a:	2b80      	cmp	r3, #128	; 0x80
 800898c:	d005      	beq.n	800899a <UART_SetConfig+0x1b6>
 800898e:	2bc0      	cmp	r3, #192	; 0xc0
 8008990:	d009      	beq.n	80089a6 <UART_SetConfig+0x1c2>
 8008992:	e00b      	b.n	80089ac <UART_SetConfig+0x1c8>
 8008994:	2300      	movs	r3, #0
 8008996:	77fb      	strb	r3, [r7, #31]
 8008998:	e0cb      	b.n	8008b32 <UART_SetConfig+0x34e>
 800899a:	2302      	movs	r3, #2
 800899c:	77fb      	strb	r3, [r7, #31]
 800899e:	e0c8      	b.n	8008b32 <UART_SetConfig+0x34e>
 80089a0:	2304      	movs	r3, #4
 80089a2:	77fb      	strb	r3, [r7, #31]
 80089a4:	e0c5      	b.n	8008b32 <UART_SetConfig+0x34e>
 80089a6:	2308      	movs	r3, #8
 80089a8:	77fb      	strb	r3, [r7, #31]
 80089aa:	e0c2      	b.n	8008b32 <UART_SetConfig+0x34e>
 80089ac:	2310      	movs	r3, #16
 80089ae:	77fb      	strb	r3, [r7, #31]
 80089b0:	bf00      	nop
 80089b2:	e0be      	b.n	8008b32 <UART_SetConfig+0x34e>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a4d      	ldr	r2, [pc, #308]	; (8008af0 <UART_SetConfig+0x30c>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d124      	bne.n	8008a08 <UART_SetConfig+0x224>
 80089be:	4b48      	ldr	r3, [pc, #288]	; (8008ae0 <UART_SetConfig+0x2fc>)
 80089c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089cc:	d012      	beq.n	80089f4 <UART_SetConfig+0x210>
 80089ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089d2:	d802      	bhi.n	80089da <UART_SetConfig+0x1f6>
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d007      	beq.n	80089e8 <UART_SetConfig+0x204>
 80089d8:	e012      	b.n	8008a00 <UART_SetConfig+0x21c>
 80089da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089de:	d006      	beq.n	80089ee <UART_SetConfig+0x20a>
 80089e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089e4:	d009      	beq.n	80089fa <UART_SetConfig+0x216>
 80089e6:	e00b      	b.n	8008a00 <UART_SetConfig+0x21c>
 80089e8:	2300      	movs	r3, #0
 80089ea:	77fb      	strb	r3, [r7, #31]
 80089ec:	e0a1      	b.n	8008b32 <UART_SetConfig+0x34e>
 80089ee:	2302      	movs	r3, #2
 80089f0:	77fb      	strb	r3, [r7, #31]
 80089f2:	e09e      	b.n	8008b32 <UART_SetConfig+0x34e>
 80089f4:	2304      	movs	r3, #4
 80089f6:	77fb      	strb	r3, [r7, #31]
 80089f8:	e09b      	b.n	8008b32 <UART_SetConfig+0x34e>
 80089fa:	2308      	movs	r3, #8
 80089fc:	77fb      	strb	r3, [r7, #31]
 80089fe:	e098      	b.n	8008b32 <UART_SetConfig+0x34e>
 8008a00:	2310      	movs	r3, #16
 8008a02:	77fb      	strb	r3, [r7, #31]
 8008a04:	bf00      	nop
 8008a06:	e094      	b.n	8008b32 <UART_SetConfig+0x34e>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a39      	ldr	r2, [pc, #228]	; (8008af4 <UART_SetConfig+0x310>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d124      	bne.n	8008a5c <UART_SetConfig+0x278>
 8008a12:	4b33      	ldr	r3, [pc, #204]	; (8008ae0 <UART_SetConfig+0x2fc>)
 8008a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a20:	d012      	beq.n	8008a48 <UART_SetConfig+0x264>
 8008a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a26:	d802      	bhi.n	8008a2e <UART_SetConfig+0x24a>
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d007      	beq.n	8008a3c <UART_SetConfig+0x258>
 8008a2c:	e012      	b.n	8008a54 <UART_SetConfig+0x270>
 8008a2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a32:	d006      	beq.n	8008a42 <UART_SetConfig+0x25e>
 8008a34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a38:	d009      	beq.n	8008a4e <UART_SetConfig+0x26a>
 8008a3a:	e00b      	b.n	8008a54 <UART_SetConfig+0x270>
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	77fb      	strb	r3, [r7, #31]
 8008a40:	e077      	b.n	8008b32 <UART_SetConfig+0x34e>
 8008a42:	2302      	movs	r3, #2
 8008a44:	77fb      	strb	r3, [r7, #31]
 8008a46:	e074      	b.n	8008b32 <UART_SetConfig+0x34e>
 8008a48:	2304      	movs	r3, #4
 8008a4a:	77fb      	strb	r3, [r7, #31]
 8008a4c:	e071      	b.n	8008b32 <UART_SetConfig+0x34e>
 8008a4e:	2308      	movs	r3, #8
 8008a50:	77fb      	strb	r3, [r7, #31]
 8008a52:	e06e      	b.n	8008b32 <UART_SetConfig+0x34e>
 8008a54:	2310      	movs	r3, #16
 8008a56:	77fb      	strb	r3, [r7, #31]
 8008a58:	bf00      	nop
 8008a5a:	e06a      	b.n	8008b32 <UART_SetConfig+0x34e>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a25      	ldr	r2, [pc, #148]	; (8008af8 <UART_SetConfig+0x314>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d124      	bne.n	8008ab0 <UART_SetConfig+0x2cc>
 8008a66:	4b1e      	ldr	r3, [pc, #120]	; (8008ae0 <UART_SetConfig+0x2fc>)
 8008a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a6c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a74:	d012      	beq.n	8008a9c <UART_SetConfig+0x2b8>
 8008a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a7a:	d802      	bhi.n	8008a82 <UART_SetConfig+0x29e>
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d007      	beq.n	8008a90 <UART_SetConfig+0x2ac>
 8008a80:	e012      	b.n	8008aa8 <UART_SetConfig+0x2c4>
 8008a82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a86:	d006      	beq.n	8008a96 <UART_SetConfig+0x2b2>
 8008a88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a8c:	d009      	beq.n	8008aa2 <UART_SetConfig+0x2be>
 8008a8e:	e00b      	b.n	8008aa8 <UART_SetConfig+0x2c4>
 8008a90:	2300      	movs	r3, #0
 8008a92:	77fb      	strb	r3, [r7, #31]
 8008a94:	e04d      	b.n	8008b32 <UART_SetConfig+0x34e>
 8008a96:	2302      	movs	r3, #2
 8008a98:	77fb      	strb	r3, [r7, #31]
 8008a9a:	e04a      	b.n	8008b32 <UART_SetConfig+0x34e>
 8008a9c:	2304      	movs	r3, #4
 8008a9e:	77fb      	strb	r3, [r7, #31]
 8008aa0:	e047      	b.n	8008b32 <UART_SetConfig+0x34e>
 8008aa2:	2308      	movs	r3, #8
 8008aa4:	77fb      	strb	r3, [r7, #31]
 8008aa6:	e044      	b.n	8008b32 <UART_SetConfig+0x34e>
 8008aa8:	2310      	movs	r3, #16
 8008aaa:	77fb      	strb	r3, [r7, #31]
 8008aac:	bf00      	nop
 8008aae:	e040      	b.n	8008b32 <UART_SetConfig+0x34e>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a11      	ldr	r2, [pc, #68]	; (8008afc <UART_SetConfig+0x318>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d139      	bne.n	8008b2e <UART_SetConfig+0x34a>
 8008aba:	4b09      	ldr	r3, [pc, #36]	; (8008ae0 <UART_SetConfig+0x2fc>)
 8008abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ac0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008ac4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ac8:	d027      	beq.n	8008b1a <UART_SetConfig+0x336>
 8008aca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ace:	d817      	bhi.n	8008b00 <UART_SetConfig+0x31c>
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d01c      	beq.n	8008b0e <UART_SetConfig+0x32a>
 8008ad4:	e027      	b.n	8008b26 <UART_SetConfig+0x342>
 8008ad6:	bf00      	nop
 8008ad8:	efff69f3 	.word	0xefff69f3
 8008adc:	40011000 	.word	0x40011000
 8008ae0:	40023800 	.word	0x40023800
 8008ae4:	40004400 	.word	0x40004400
 8008ae8:	40004800 	.word	0x40004800
 8008aec:	40004c00 	.word	0x40004c00
 8008af0:	40005000 	.word	0x40005000
 8008af4:	40011400 	.word	0x40011400
 8008af8:	40007800 	.word	0x40007800
 8008afc:	40007c00 	.word	0x40007c00
 8008b00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b04:	d006      	beq.n	8008b14 <UART_SetConfig+0x330>
 8008b06:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008b0a:	d009      	beq.n	8008b20 <UART_SetConfig+0x33c>
 8008b0c:	e00b      	b.n	8008b26 <UART_SetConfig+0x342>
 8008b0e:	2300      	movs	r3, #0
 8008b10:	77fb      	strb	r3, [r7, #31]
 8008b12:	e00e      	b.n	8008b32 <UART_SetConfig+0x34e>
 8008b14:	2302      	movs	r3, #2
 8008b16:	77fb      	strb	r3, [r7, #31]
 8008b18:	e00b      	b.n	8008b32 <UART_SetConfig+0x34e>
 8008b1a:	2304      	movs	r3, #4
 8008b1c:	77fb      	strb	r3, [r7, #31]
 8008b1e:	e008      	b.n	8008b32 <UART_SetConfig+0x34e>
 8008b20:	2308      	movs	r3, #8
 8008b22:	77fb      	strb	r3, [r7, #31]
 8008b24:	e005      	b.n	8008b32 <UART_SetConfig+0x34e>
 8008b26:	2310      	movs	r3, #16
 8008b28:	77fb      	strb	r3, [r7, #31]
 8008b2a:	bf00      	nop
 8008b2c:	e001      	b.n	8008b32 <UART_SetConfig+0x34e>
 8008b2e:	2310      	movs	r3, #16
 8008b30:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	69db      	ldr	r3, [r3, #28]
 8008b36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b3a:	d17c      	bne.n	8008c36 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8008b3c:	7ffb      	ldrb	r3, [r7, #31]
 8008b3e:	2b08      	cmp	r3, #8
 8008b40:	d859      	bhi.n	8008bf6 <UART_SetConfig+0x412>
 8008b42:	a201      	add	r2, pc, #4	; (adr r2, 8008b48 <UART_SetConfig+0x364>)
 8008b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b48:	08008b6d 	.word	0x08008b6d
 8008b4c:	08008b8b 	.word	0x08008b8b
 8008b50:	08008ba9 	.word	0x08008ba9
 8008b54:	08008bf7 	.word	0x08008bf7
 8008b58:	08008bc1 	.word	0x08008bc1
 8008b5c:	08008bf7 	.word	0x08008bf7
 8008b60:	08008bf7 	.word	0x08008bf7
 8008b64:	08008bf7 	.word	0x08008bf7
 8008b68:	08008bdf 	.word	0x08008bdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8008b6c:	f7fb ff6e 	bl	8004a4c <HAL_RCC_GetPCLK1Freq>
 8008b70:	4603      	mov	r3, r0
 8008b72:	005a      	lsls	r2, r3, #1
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	085b      	lsrs	r3, r3, #1
 8008b7a:	441a      	add	r2, r3
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	61bb      	str	r3, [r7, #24]
        break;
 8008b88:	e038      	b.n	8008bfc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8008b8a:	f7fb ff73 	bl	8004a74 <HAL_RCC_GetPCLK2Freq>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	005a      	lsls	r2, r3, #1
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	085b      	lsrs	r3, r3, #1
 8008b98:	441a      	add	r2, r3
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	61bb      	str	r3, [r7, #24]
        break;
 8008ba6:	e029      	b.n	8008bfc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	085a      	lsrs	r2, r3, #1
 8008bae:	4b5d      	ldr	r3, [pc, #372]	; (8008d24 <UART_SetConfig+0x540>)
 8008bb0:	4413      	add	r3, r2
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	6852      	ldr	r2, [r2, #4]
 8008bb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	61bb      	str	r3, [r7, #24]
        break;
 8008bbe:	e01d      	b.n	8008bfc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8008bc0:	f7fb fe86 	bl	80048d0 <HAL_RCC_GetSysClockFreq>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	005a      	lsls	r2, r3, #1
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	085b      	lsrs	r3, r3, #1
 8008bce:	441a      	add	r2, r3
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	61bb      	str	r3, [r7, #24]
        break;
 8008bdc:	e00e      	b.n	8008bfc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	085b      	lsrs	r3, r3, #1
 8008be4:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	61bb      	str	r3, [r7, #24]
        break;
 8008bf4:	e002      	b.n	8008bfc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	75fb      	strb	r3, [r7, #23]
        break;
 8008bfa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	2b0f      	cmp	r3, #15
 8008c00:	d916      	bls.n	8008c30 <UART_SetConfig+0x44c>
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c08:	d212      	bcs.n	8008c30 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	f023 030f 	bic.w	r3, r3, #15
 8008c12:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c14:	69bb      	ldr	r3, [r7, #24]
 8008c16:	085b      	lsrs	r3, r3, #1
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	f003 0307 	and.w	r3, r3, #7
 8008c1e:	b29a      	uxth	r2, r3
 8008c20:	89fb      	ldrh	r3, [r7, #14]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	89fa      	ldrh	r2, [r7, #14]
 8008c2c:	60da      	str	r2, [r3, #12]
 8008c2e:	e06e      	b.n	8008d0e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	75fb      	strb	r3, [r7, #23]
 8008c34:	e06b      	b.n	8008d0e <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8008c36:	7ffb      	ldrb	r3, [r7, #31]
 8008c38:	2b08      	cmp	r3, #8
 8008c3a:	d857      	bhi.n	8008cec <UART_SetConfig+0x508>
 8008c3c:	a201      	add	r2, pc, #4	; (adr r2, 8008c44 <UART_SetConfig+0x460>)
 8008c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c42:	bf00      	nop
 8008c44:	08008c69 	.word	0x08008c69
 8008c48:	08008c85 	.word	0x08008c85
 8008c4c:	08008ca1 	.word	0x08008ca1
 8008c50:	08008ced 	.word	0x08008ced
 8008c54:	08008cb9 	.word	0x08008cb9
 8008c58:	08008ced 	.word	0x08008ced
 8008c5c:	08008ced 	.word	0x08008ced
 8008c60:	08008ced 	.word	0x08008ced
 8008c64:	08008cd5 	.word	0x08008cd5
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8008c68:	f7fb fef0 	bl	8004a4c <HAL_RCC_GetPCLK1Freq>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	085b      	lsrs	r3, r3, #1
 8008c74:	441a      	add	r2, r3
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	61bb      	str	r3, [r7, #24]
        break;
 8008c82:	e036      	b.n	8008cf2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8008c84:	f7fb fef6 	bl	8004a74 <HAL_RCC_GetPCLK2Freq>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	085b      	lsrs	r3, r3, #1
 8008c90:	441a      	add	r2, r3
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	61bb      	str	r3, [r7, #24]
        break;
 8008c9e:	e028      	b.n	8008cf2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	085a      	lsrs	r2, r3, #1
 8008ca6:	4b20      	ldr	r3, [pc, #128]	; (8008d28 <UART_SetConfig+0x544>)
 8008ca8:	4413      	add	r3, r2
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	6852      	ldr	r2, [r2, #4]
 8008cae:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	61bb      	str	r3, [r7, #24]
        break;
 8008cb6:	e01c      	b.n	8008cf2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8008cb8:	f7fb fe0a 	bl	80048d0 <HAL_RCC_GetSysClockFreq>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	085b      	lsrs	r3, r3, #1
 8008cc4:	441a      	add	r2, r3
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	61bb      	str	r3, [r7, #24]
        break;
 8008cd2:	e00e      	b.n	8008cf2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	085b      	lsrs	r3, r3, #1
 8008cda:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	61bb      	str	r3, [r7, #24]
        break;
 8008cea:	e002      	b.n	8008cf2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	75fb      	strb	r3, [r7, #23]
        break;
 8008cf0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cf2:	69bb      	ldr	r3, [r7, #24]
 8008cf4:	2b0f      	cmp	r3, #15
 8008cf6:	d908      	bls.n	8008d0a <UART_SetConfig+0x526>
 8008cf8:	69bb      	ldr	r3, [r7, #24]
 8008cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cfe:	d204      	bcs.n	8008d0a <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	69ba      	ldr	r2, [r7, #24]
 8008d06:	60da      	str	r2, [r3, #12]
 8008d08:	e001      	b.n	8008d0e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2200      	movs	r2, #0
 8008d18:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3720      	adds	r7, #32
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	01e84800 	.word	0x01e84800
 8008d28:	00f42400 	.word	0x00f42400

08008d2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d38:	f003 0301 	and.w	r3, r3, #1
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00a      	beq.n	8008d56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	430a      	orrs	r2, r1
 8008d54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5a:	f003 0302 	and.w	r3, r3, #2
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d00a      	beq.n	8008d78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	430a      	orrs	r2, r1
 8008d76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7c:	f003 0304 	and.w	r3, r3, #4
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d00a      	beq.n	8008d9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	430a      	orrs	r2, r1
 8008d98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9e:	f003 0308 	and.w	r3, r3, #8
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d00a      	beq.n	8008dbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	430a      	orrs	r2, r1
 8008dba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc0:	f003 0310 	and.w	r3, r3, #16
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d00a      	beq.n	8008dde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	430a      	orrs	r2, r1
 8008ddc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de2:	f003 0320 	and.w	r3, r3, #32
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d00a      	beq.n	8008e00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	430a      	orrs	r2, r1
 8008dfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d01a      	beq.n	8008e42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	430a      	orrs	r2, r1
 8008e20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e2a:	d10a      	bne.n	8008e42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	430a      	orrs	r2, r1
 8008e40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d00a      	beq.n	8008e64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	430a      	orrs	r2, r1
 8008e62:	605a      	str	r2, [r3, #4]
  }
}
 8008e64:	bf00      	nop
 8008e66:	370c      	adds	r7, #12
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b086      	sub	sp, #24
 8008e74:	af02      	add	r7, sp, #8
 8008e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008e7e:	f7f7 fb69 	bl	8000554 <HAL_GetTick>
 8008e82:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f003 0308 	and.w	r3, r3, #8
 8008e8e:	2b08      	cmp	r3, #8
 8008e90:	d10e      	bne.n	8008eb0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e96:	9300      	str	r3, [sp, #0]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 f814 	bl	8008ece <UART_WaitOnFlagUntilTimeout>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d001      	beq.n	8008eb0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008eac:	2303      	movs	r3, #3
 8008eae:	e00a      	b.n	8008ec6 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2220      	movs	r2, #32
 8008eb4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2220      	movs	r2, #32
 8008eba:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008ec4:	2300      	movs	r3, #0
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3710      	adds	r7, #16
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008ece:	b580      	push	{r7, lr}
 8008ed0:	b084      	sub	sp, #16
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	60f8      	str	r0, [r7, #12]
 8008ed6:	60b9      	str	r1, [r7, #8]
 8008ed8:	603b      	str	r3, [r7, #0]
 8008eda:	4613      	mov	r3, r2
 8008edc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ede:	e02a      	b.n	8008f36 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ee6:	d026      	beq.n	8008f36 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ee8:	f7f7 fb34 	bl	8000554 <HAL_GetTick>
 8008eec:	4602      	mov	r2, r0
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	1ad3      	subs	r3, r2, r3
 8008ef2:	69ba      	ldr	r2, [r7, #24]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d302      	bcc.n	8008efe <UART_WaitOnFlagUntilTimeout+0x30>
 8008ef8:	69bb      	ldr	r3, [r7, #24]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d11b      	bne.n	8008f36 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008f0c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	689a      	ldr	r2, [r3, #8]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f022 0201 	bic.w	r2, r2, #1
 8008f1c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2220      	movs	r2, #32
 8008f22:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2220      	movs	r2, #32
 8008f28:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008f32:	2303      	movs	r3, #3
 8008f34:	e00f      	b.n	8008f56 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	69da      	ldr	r2, [r3, #28]
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	4013      	ands	r3, r2
 8008f40:	68ba      	ldr	r2, [r7, #8]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	bf0c      	ite	eq
 8008f46:	2301      	moveq	r3, #1
 8008f48:	2300      	movne	r3, #0
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	79fb      	ldrb	r3, [r7, #7]
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d0c5      	beq.n	8008ee0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008f54:	2300      	movs	r3, #0
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
	...

08008f60 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b085      	sub	sp, #20
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d027      	beq.n	8008fca <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008f80:	68fa      	ldr	r2, [r7, #12]
 8008f82:	4b2f      	ldr	r3, [pc, #188]	; (8009040 <FMC_SDRAM_Init+0xe0>)
 8008f84:	4013      	ands	r3, r2
 8008f86:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008f90:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8008f96:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8008f9c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8008fa2:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8008fa8:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8008fae:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8008fb4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008fba:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008fbc:	68fa      	ldr	r2, [r7, #12]
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	68fa      	ldr	r2, [r7, #12]
 8008fc6:	601a      	str	r2, [r3, #0]
 8008fc8:	e032      	b.n	8009030 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008fd6:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008fe0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008fe6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008ff4:	68ba      	ldr	r2, [r7, #8]
 8008ff6:	4b12      	ldr	r3, [pc, #72]	; (8009040 <FMC_SDRAM_Init+0xe0>)
 8008ff8:	4013      	ands	r3, r2
 8008ffa:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009004:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800900a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8009010:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8009016:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800901c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800901e:	68ba      	ldr	r2, [r7, #8]
 8009020:	4313      	orrs	r3, r2
 8009022:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	68fa      	ldr	r2, [r7, #12]
 8009028:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	68ba      	ldr	r2, [r7, #8]
 800902e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	3714      	adds	r7, #20
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr
 800903e:	bf00      	nop
 8009040:	ffff8000 	.word	0xffff8000

08009044 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009044:	b480      	push	{r7}
 8009046:	b087      	sub	sp, #28
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8009050:	2300      	movs	r3, #0
 8009052:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8009054:	2300      	movs	r3, #0
 8009056:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2b01      	cmp	r3, #1
 800905c:	d02e      	beq.n	80090bc <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800906a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	3b01      	subs	r3, #1
 8009078:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800907a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	3b01      	subs	r3, #1
 8009082:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8009084:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	3b01      	subs	r3, #1
 800908c:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800908e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	691b      	ldr	r3, [r3, #16]
 8009094:	3b01      	subs	r3, #1
 8009096:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8009098:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	695b      	ldr	r3, [r3, #20]
 800909e:	3b01      	subs	r3, #1
 80090a0:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80090a2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	699b      	ldr	r3, [r3, #24]
 80090a8:	3b01      	subs	r3, #1
 80090aa:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80090ac:	4313      	orrs	r3, r2
 80090ae:	697a      	ldr	r2, [r7, #20]
 80090b0:	4313      	orrs	r3, r2
 80090b2:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	697a      	ldr	r2, [r7, #20]
 80090b8:	609a      	str	r2, [r3, #8]
 80090ba:	e039      	b.n	8009130 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80090c2:	697a      	ldr	r2, [r7, #20]
 80090c4:	4b1e      	ldr	r3, [pc, #120]	; (8009140 <FMC_SDRAM_Timing_Init+0xfc>)
 80090c6:	4013      	ands	r3, r2
 80090c8:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	3b01      	subs	r3, #1
 80090d0:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	695b      	ldr	r3, [r3, #20]
 80090d6:	3b01      	subs	r3, #1
 80090d8:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80090da:	4313      	orrs	r3, r2
 80090dc:	697a      	ldr	r2, [r7, #20]
 80090de:	4313      	orrs	r3, r2
 80090e0:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80090ee:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	3b01      	subs	r3, #1
 80090fc:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80090fe:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	3b01      	subs	r3, #1
 8009106:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8009108:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	691b      	ldr	r3, [r3, #16]
 800910e:	3b01      	subs	r3, #1
 8009110:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8009112:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	699b      	ldr	r3, [r3, #24]
 8009118:	3b01      	subs	r3, #1
 800911a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800911c:	4313      	orrs	r3, r2
 800911e:	693a      	ldr	r2, [r7, #16]
 8009120:	4313      	orrs	r3, r2
 8009122:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	697a      	ldr	r2, [r7, #20]
 8009128:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	693a      	ldr	r2, [r7, #16]
 800912e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8009130:	2300      	movs	r3, #0
}
 8009132:	4618      	mov	r0, r3
 8009134:	371c      	adds	r7, #28
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop
 8009140:	ff0f0fff 	.word	0xff0f0fff

08009144 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009144:	b084      	sub	sp, #16
 8009146:	b480      	push	{r7}
 8009148:	b085      	sub	sp, #20
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
 800914e:	f107 001c 	add.w	r0, r7, #28
 8009152:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009156:	2300      	movs	r3, #0
 8009158:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800915a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800915c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800915e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009162:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009164:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009166:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800916a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800916c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800916e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009170:	68fa      	ldr	r2, [r7, #12]
 8009172:	4313      	orrs	r3, r2
 8009174:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	685a      	ldr	r2, [r3, #4]
 800917a:	4b07      	ldr	r3, [pc, #28]	; (8009198 <SDMMC_Init+0x54>)
 800917c:	4013      	ands	r3, r2
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	431a      	orrs	r2, r3
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009186:	2300      	movs	r3, #0
}
 8009188:	4618      	mov	r0, r3
 800918a:	3714      	adds	r7, #20
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	b004      	add	sp, #16
 8009194:	4770      	bx	lr
 8009196:	bf00      	nop
 8009198:	ffff8100 	.word	0xffff8100

0800919c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	370c      	adds	r7, #12
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr

080091b6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80091b6:	b480      	push	{r7}
 80091b8:	b083      	sub	sp, #12
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
 80091be:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80091ca:	2300      	movs	r3, #0
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	370c      	adds	r7, #12
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2203      	movs	r2, #3
 80091e4:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 80091e6:	2300      	movs	r3, #0
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	370c      	adds	r7, #12
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f003 0303 	and.w	r3, r3, #3
}
 8009204:	4618      	mov	r0, r3
 8009206:	370c      	adds	r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009210:	b480      	push	{r7}
 8009212:	b085      	sub	sp, #20
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800921a:	2300      	movs	r3, #0
 800921c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800922e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009234:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800923a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800923c:	68fa      	ldr	r2, [r7, #12]
 800923e:	4313      	orrs	r3, r2
 8009240:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	68da      	ldr	r2, [r3, #12]
 8009246:	4b06      	ldr	r3, [pc, #24]	; (8009260 <SDMMC_SendCommand+0x50>)
 8009248:	4013      	ands	r3, r2
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	431a      	orrs	r2, r3
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009252:	2300      	movs	r3, #0
}
 8009254:	4618      	mov	r0, r3
 8009256:	3714      	adds	r7, #20
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr
 8009260:	fffff000 	.word	0xfffff000

08009264 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	691b      	ldr	r3, [r3, #16]
 8009270:	b2db      	uxtb	r3, r3
}
 8009272:	4618      	mov	r0, r3
 8009274:	370c      	adds	r7, #12
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr

0800927e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800927e:	b480      	push	{r7}
 8009280:	b085      	sub	sp, #20
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
 8009286:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 8009288:	2300      	movs	r3, #0
 800928a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	3314      	adds	r3, #20
 8009290:	461a      	mov	r2, r3
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	4413      	add	r3, r2
 8009296:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
}  
 800929c:	4618      	mov	r0, r3
 800929e:	3714      	adds	r7, #20
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr

080092a8 <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b085      	sub	sp, #20
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80092b2:	2300      	movs	r3, #0
 80092b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	685a      	ldr	r2, [r3, #4]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80092ce:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80092d4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80092da:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80092dc:	68fa      	ldr	r2, [r7, #12]
 80092de:	4313      	orrs	r3, r2
 80092e0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	431a      	orrs	r2, r3
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80092f2:	2300      	movs	r3, #0

}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3714      	adds	r7, #20
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b088      	sub	sp, #32
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800930a:	2300      	movs	r3, #0
 800930c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009312:	2310      	movs	r3, #16
 8009314:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009316:	2340      	movs	r3, #64	; 0x40
 8009318:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800931a:	2300      	movs	r3, #0
 800931c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800931e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009322:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009324:	f107 0308 	add.w	r3, r7, #8
 8009328:	4619      	mov	r1, r3
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f7ff ff70 	bl	8009210 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009330:	f241 3288 	movw	r2, #5000	; 0x1388
 8009334:	2110      	movs	r1, #16
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 fa64 	bl	8009804 <SDMMC_GetCmdResp1>
 800933c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800933e:	69fb      	ldr	r3, [r7, #28]
}
 8009340:	4618      	mov	r0, r3
 8009342:	3720      	adds	r7, #32
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b088      	sub	sp, #32
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009352:	2300      	movs	r3, #0
 8009354:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800935a:	2311      	movs	r3, #17
 800935c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800935e:	2340      	movs	r3, #64	; 0x40
 8009360:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009362:	2300      	movs	r3, #0
 8009364:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009366:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800936a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800936c:	f107 0308 	add.w	r3, r7, #8
 8009370:	4619      	mov	r1, r3
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f7ff ff4c 	bl	8009210 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009378:	f241 3288 	movw	r2, #5000	; 0x1388
 800937c:	2111      	movs	r1, #17
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 fa40 	bl	8009804 <SDMMC_GetCmdResp1>
 8009384:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009386:	69fb      	ldr	r3, [r7, #28]
}
 8009388:	4618      	mov	r0, r3
 800938a:	3720      	adds	r7, #32
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b088      	sub	sp, #32
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800939a:	2300      	movs	r3, #0
 800939c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80093a2:	2312      	movs	r3, #18
 80093a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80093a6:	2340      	movs	r3, #64	; 0x40
 80093a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80093aa:	2300      	movs	r3, #0
 80093ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80093ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093b2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80093b4:	f107 0308 	add.w	r3, r7, #8
 80093b8:	4619      	mov	r1, r3
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f7ff ff28 	bl	8009210 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80093c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80093c4:	2112      	movs	r1, #18
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 fa1c 	bl	8009804 <SDMMC_GetCmdResp1>
 80093cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093ce:	69fb      	ldr	r3, [r7, #28]
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3720      	adds	r7, #32
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b088      	sub	sp, #32
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80093e2:	2300      	movs	r3, #0
 80093e4:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80093ea:	2318      	movs	r3, #24
 80093ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80093ee:	2340      	movs	r3, #64	; 0x40
 80093f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80093f2:	2300      	movs	r3, #0
 80093f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80093f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093fa:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80093fc:	f107 0308 	add.w	r3, r7, #8
 8009400:	4619      	mov	r1, r3
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f7ff ff04 	bl	8009210 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009408:	f241 3288 	movw	r2, #5000	; 0x1388
 800940c:	2118      	movs	r1, #24
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 f9f8 	bl	8009804 <SDMMC_GetCmdResp1>
 8009414:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009416:	69fb      	ldr	r3, [r7, #28]
}
 8009418:	4618      	mov	r0, r3
 800941a:	3720      	adds	r7, #32
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b088      	sub	sp, #32
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800942a:	2300      	movs	r3, #0
 800942c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009432:	2319      	movs	r3, #25
 8009434:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009436:	2340      	movs	r3, #64	; 0x40
 8009438:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800943a:	2300      	movs	r3, #0
 800943c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800943e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009442:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009444:	f107 0308 	add.w	r3, r7, #8
 8009448:	4619      	mov	r1, r3
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f7ff fee0 	bl	8009210 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009450:	f241 3288 	movw	r2, #5000	; 0x1388
 8009454:	2119      	movs	r1, #25
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 f9d4 	bl	8009804 <SDMMC_GetCmdResp1>
 800945c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800945e:	69fb      	ldr	r3, [r7, #28]
}
 8009460:	4618      	mov	r0, r3
 8009462:	3720      	adds	r7, #32
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b088      	sub	sp, #32
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009470:	2300      	movs	r3, #0
 8009472:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0;
 8009474:	2300      	movs	r3, #0
 8009476:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009478:	230c      	movs	r3, #12
 800947a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800947c:	2340      	movs	r3, #64	; 0x40
 800947e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009480:	2300      	movs	r3, #0
 8009482:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009484:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009488:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800948a:	f107 0308 	add.w	r3, r7, #8
 800948e:	4619      	mov	r1, r3
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f7ff febd 	bl	8009210 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 8009496:	4a05      	ldr	r2, [pc, #20]	; (80094ac <SDMMC_CmdStopTransfer+0x44>)
 8009498:	210c      	movs	r1, #12
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 f9b2 	bl	8009804 <SDMMC_GetCmdResp1>
 80094a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094a2:	69fb      	ldr	r3, [r7, #28]
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3720      	adds	r7, #32
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	05f5e100 	.word	0x05f5e100

080094b0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b08a      	sub	sp, #40	; 0x28
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80094bc:	2300      	movs	r3, #0
 80094be:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80094c4:	2307      	movs	r3, #7
 80094c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80094c8:	2340      	movs	r3, #64	; 0x40
 80094ca:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80094cc:	2300      	movs	r3, #0
 80094ce:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80094d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094d4:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80094d6:	f107 0310 	add.w	r3, r7, #16
 80094da:	4619      	mov	r1, r3
 80094dc:	68f8      	ldr	r0, [r7, #12]
 80094de:	f7ff fe97 	bl	8009210 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80094e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80094e6:	2107      	movs	r1, #7
 80094e8:	68f8      	ldr	r0, [r7, #12]
 80094ea:	f000 f98b 	bl	8009804 <SDMMC_GetCmdResp1>
 80094ee:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80094f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3728      	adds	r7, #40	; 0x28
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b088      	sub	sp, #32
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009502:	2300      	movs	r3, #0
 8009504:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 8009506:	2300      	movs	r3, #0
 8009508:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800950a:	2300      	movs	r3, #0
 800950c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800950e:	2300      	movs	r3, #0
 8009510:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009512:	2300      	movs	r3, #0
 8009514:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009516:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800951a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800951c:	f107 0308 	add.w	r3, r7, #8
 8009520:	4619      	mov	r1, r3
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f7ff fe74 	bl	8009210 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 f941 	bl	80097b0 <SDMMC_GetCmdError>
 800952e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009530:	69fb      	ldr	r3, [r7, #28]
}
 8009532:	4618      	mov	r0, r3
 8009534:	3720      	adds	r7, #32
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800953a:	b580      	push	{r7, lr}
 800953c:	b088      	sub	sp, #32
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009542:	2300      	movs	r3, #0
 8009544:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009546:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800954a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800954c:	2308      	movs	r3, #8
 800954e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009550:	2340      	movs	r3, #64	; 0x40
 8009552:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009554:	2300      	movs	r3, #0
 8009556:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009558:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800955c:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800955e:	f107 0308 	add.w	r3, r7, #8
 8009562:	4619      	mov	r1, r3
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f7ff fe53 	bl	8009210 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 fb12 	bl	8009b94 <SDMMC_GetCmdResp7>
 8009570:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009572:	69fb      	ldr	r3, [r7, #28]
}
 8009574:	4618      	mov	r0, r3
 8009576:	3720      	adds	r7, #32
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b088      	sub	sp, #32
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009586:	2300      	movs	r3, #0
 8009588:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800958e:	2337      	movs	r3, #55	; 0x37
 8009590:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009592:	2340      	movs	r3, #64	; 0x40
 8009594:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009596:	2300      	movs	r3, #0
 8009598:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800959a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800959e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80095a0:	f107 0308 	add.w	r3, r7, #8
 80095a4:	4619      	mov	r1, r3
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f7ff fe32 	bl	8009210 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80095ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80095b0:	2137      	movs	r1, #55	; 0x37
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 f926 	bl	8009804 <SDMMC_GetCmdResp1>
 80095b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095ba:	69fb      	ldr	r3, [r7, #28]
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3720      	adds	r7, #32
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b088      	sub	sp, #32
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80095ce:	2300      	movs	r3, #0
 80095d0:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 80095d2:	683a      	ldr	r2, [r7, #0]
 80095d4:	4b0d      	ldr	r3, [pc, #52]	; (800960c <SDMMC_CmdAppOperCommand+0x48>)
 80095d6:	4313      	orrs	r3, r2
 80095d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80095da:	2329      	movs	r3, #41	; 0x29
 80095dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80095de:	2340      	movs	r3, #64	; 0x40
 80095e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80095e2:	2300      	movs	r3, #0
 80095e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80095e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095ea:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80095ec:	f107 0308 	add.w	r3, r7, #8
 80095f0:	4619      	mov	r1, r3
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f7ff fe0c 	bl	8009210 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 fa29 	bl	8009a50 <SDMMC_GetCmdResp3>
 80095fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009600:	69fb      	ldr	r3, [r7, #28]
}
 8009602:	4618      	mov	r0, r3
 8009604:	3720      	adds	r7, #32
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	80100000 	.word	0x80100000

08009610 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b088      	sub	sp, #32
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800961a:	2300      	movs	r3, #0
 800961c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009622:	2306      	movs	r3, #6
 8009624:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009626:	2340      	movs	r3, #64	; 0x40
 8009628:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800962a:	2300      	movs	r3, #0
 800962c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800962e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009632:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009634:	f107 0308 	add.w	r3, r7, #8
 8009638:	4619      	mov	r1, r3
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f7ff fde8 	bl	8009210 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009640:	f241 3288 	movw	r2, #5000	; 0x1388
 8009644:	2106      	movs	r1, #6
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 f8dc 	bl	8009804 <SDMMC_GetCmdResp1>
 800964c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800964e:	69fb      	ldr	r3, [r7, #28]
}
 8009650:	4618      	mov	r0, r3
 8009652:	3720      	adds	r7, #32
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b088      	sub	sp, #32
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009660:	2300      	movs	r3, #0
 8009662:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0;
 8009664:	2300      	movs	r3, #0
 8009666:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009668:	2333      	movs	r3, #51	; 0x33
 800966a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800966c:	2340      	movs	r3, #64	; 0x40
 800966e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009670:	2300      	movs	r3, #0
 8009672:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009674:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009678:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800967a:	f107 0308 	add.w	r3, r7, #8
 800967e:	4619      	mov	r1, r3
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f7ff fdc5 	bl	8009210 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009686:	f241 3288 	movw	r2, #5000	; 0x1388
 800968a:	2133      	movs	r1, #51	; 0x33
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f000 f8b9 	bl	8009804 <SDMMC_GetCmdResp1>
 8009692:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009694:	69fb      	ldr	r3, [r7, #28]
}
 8009696:	4618      	mov	r0, r3
 8009698:	3720      	adds	r7, #32
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800969e:	b580      	push	{r7, lr}
 80096a0:	b088      	sub	sp, #32
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80096a6:	2300      	movs	r3, #0
 80096a8:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 80096aa:	2300      	movs	r3, #0
 80096ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80096ae:	2302      	movs	r3, #2
 80096b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80096b2:	23c0      	movs	r3, #192	; 0xc0
 80096b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80096b6:	2300      	movs	r3, #0
 80096b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80096ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096be:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80096c0:	f107 0308 	add.w	r3, r7, #8
 80096c4:	4619      	mov	r1, r3
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f7ff fda2 	bl	8009210 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 f97f 	bl	80099d0 <SDMMC_GetCmdResp2>
 80096d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096d4:	69fb      	ldr	r3, [r7, #28]
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3720      	adds	r7, #32
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80096de:	b580      	push	{r7, lr}
 80096e0:	b088      	sub	sp, #32
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
 80096e6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80096e8:	2300      	movs	r3, #0
 80096ea:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80096f0:	2309      	movs	r3, #9
 80096f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80096f4:	23c0      	movs	r3, #192	; 0xc0
 80096f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80096f8:	2300      	movs	r3, #0
 80096fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80096fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009700:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009702:	f107 0308 	add.w	r3, r7, #8
 8009706:	4619      	mov	r1, r3
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f7ff fd81 	bl	8009210 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 f95e 	bl	80099d0 <SDMMC_GetCmdResp2>
 8009714:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009716:	69fb      	ldr	r3, [r7, #28]
}
 8009718:	4618      	mov	r0, r3
 800971a:	3720      	adds	r7, #32
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b088      	sub	sp, #32
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800972a:	2300      	movs	r3, #0
 800972c:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 800972e:	2300      	movs	r3, #0
 8009730:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009732:	2303      	movs	r3, #3
 8009734:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009736:	2340      	movs	r3, #64	; 0x40
 8009738:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800973a:	2300      	movs	r3, #0
 800973c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800973e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009742:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009744:	f107 0308 	add.w	r3, r7, #8
 8009748:	4619      	mov	r1, r3
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f7ff fd60 	bl	8009210 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009750:	683a      	ldr	r2, [r7, #0]
 8009752:	2103      	movs	r1, #3
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 f9af 	bl	8009ab8 <SDMMC_GetCmdResp6>
 800975a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800975c:	69fb      	ldr	r3, [r7, #28]
}
 800975e:	4618      	mov	r0, r3
 8009760:	3720      	adds	r7, #32
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009766:	b580      	push	{r7, lr}
 8009768:	b088      	sub	sp, #32
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
 800976e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009770:	2300      	movs	r3, #0
 8009772:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009778:	230d      	movs	r3, #13
 800977a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800977c:	2340      	movs	r3, #64	; 0x40
 800977e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009780:	2300      	movs	r3, #0
 8009782:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009788:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800978a:	f107 0308 	add.w	r3, r7, #8
 800978e:	4619      	mov	r1, r3
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f7ff fd3d 	bl	8009210 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009796:	f241 3288 	movw	r2, #5000	; 0x1388
 800979a:	210d      	movs	r1, #13
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 f831 	bl	8009804 <SDMMC_GetCmdResp1>
 80097a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097a4:	69fb      	ldr	r3, [r7, #28]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3720      	adds	r7, #32
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
	...

080097b0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80097b0:	b490      	push	{r4, r7}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80097b8:	4b10      	ldr	r3, [pc, #64]	; (80097fc <SDMMC_GetCmdError+0x4c>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a10      	ldr	r2, [pc, #64]	; (8009800 <SDMMC_GetCmdError+0x50>)
 80097be:	fba2 2303 	umull	r2, r3, r2, r3
 80097c2:	0a5b      	lsrs	r3, r3, #9
 80097c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80097c8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 80097cc:	4623      	mov	r3, r4
 80097ce:	1e5c      	subs	r4, r3, #1
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d102      	bne.n	80097da <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80097d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80097d8:	e00a      	b.n	80097f0 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d0f2      	beq.n	80097cc <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80097ec:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80097ee:	2300      	movs	r3, #0
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3708      	adds	r7, #8
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bc90      	pop	{r4, r7}
 80097f8:	4770      	bx	lr
 80097fa:	bf00      	nop
 80097fc:	2000002c 	.word	0x2000002c
 8009800:	10624dd3 	.word	0x10624dd3

08009804 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009804:	b590      	push	{r4, r7, lr}
 8009806:	b087      	sub	sp, #28
 8009808:	af00      	add	r7, sp, #0
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	460b      	mov	r3, r1
 800980e:	607a      	str	r2, [r7, #4]
 8009810:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8009812:	4b6c      	ldr	r3, [pc, #432]	; (80099c4 <SDMMC_GetCmdResp1+0x1c0>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a6c      	ldr	r2, [pc, #432]	; (80099c8 <SDMMC_GetCmdResp1+0x1c4>)
 8009818:	fba2 2303 	umull	r2, r3, r2, r3
 800981c:	0a5b      	lsrs	r3, r3, #9
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009824:	4623      	mov	r3, r4
 8009826:	1e5c      	subs	r4, r3, #1
 8009828:	2b00      	cmp	r3, #0
 800982a:	d102      	bne.n	8009832 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800982c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009830:	e0c3      	b.n	80099ba <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009836:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800983a:	2b00      	cmp	r3, #0
 800983c:	d0f2      	beq.n	8009824 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009842:	f003 0304 	and.w	r3, r3, #4
 8009846:	2b00      	cmp	r3, #0
 8009848:	d004      	beq.n	8009854 <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2204      	movs	r2, #4
 800984e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009850:	2304      	movs	r3, #4
 8009852:	e0b2      	b.n	80099ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009858:	f003 0301 	and.w	r3, r3, #1
 800985c:	2b00      	cmp	r3, #0
 800985e:	d004      	beq.n	800986a <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2201      	movs	r2, #1
 8009864:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009866:	2301      	movs	r3, #1
 8009868:	e0a7      	b.n	80099ba <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800986a:	68f8      	ldr	r0, [r7, #12]
 800986c:	f7ff fcfa 	bl	8009264 <SDMMC_GetCommandResponse>
 8009870:	4603      	mov	r3, r0
 8009872:	461a      	mov	r2, r3
 8009874:	7afb      	ldrb	r3, [r7, #11]
 8009876:	4293      	cmp	r3, r2
 8009878:	d001      	beq.n	800987e <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800987a:	2301      	movs	r3, #1
 800987c:	e09d      	b.n	80099ba <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009884:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009886:	2100      	movs	r1, #0
 8009888:	68f8      	ldr	r0, [r7, #12]
 800988a:	f7ff fcf8 	bl	800927e <SDMMC_GetResponse>
 800988e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009890:	697a      	ldr	r2, [r7, #20]
 8009892:	4b4e      	ldr	r3, [pc, #312]	; (80099cc <SDMMC_GetCmdResp1+0x1c8>)
 8009894:	4013      	ands	r3, r2
 8009896:	2b00      	cmp	r3, #0
 8009898:	d101      	bne.n	800989e <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800989a:	2300      	movs	r3, #0
 800989c:	e08d      	b.n	80099ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	da02      	bge.n	80098aa <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80098a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80098a8:	e087      	b.n	80099ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d001      	beq.n	80098b8 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80098b4:	2340      	movs	r3, #64	; 0x40
 80098b6:	e080      	b.n	80099ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d001      	beq.n	80098c6 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80098c2:	2380      	movs	r3, #128	; 0x80
 80098c4:	e079      	b.n	80099ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d002      	beq.n	80098d6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80098d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098d4:	e071      	b.n	80099ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d002      	beq.n	80098e6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80098e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098e4:	e069      	b.n	80099ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d002      	beq.n	80098f6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80098f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098f4:	e061      	b.n	80099ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d002      	beq.n	8009906 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009900:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009904:	e059      	b.n	80099ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800990c:	2b00      	cmp	r3, #0
 800990e:	d002      	beq.n	8009916 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009914:	e051      	b.n	80099ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800991c:	2b00      	cmp	r3, #0
 800991e:	d002      	beq.n	8009926 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009920:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009924:	e049      	b.n	80099ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800992c:	2b00      	cmp	r3, #0
 800992e:	d002      	beq.n	8009936 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009930:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009934:	e041      	b.n	80099ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800993c:	2b00      	cmp	r3, #0
 800993e:	d002      	beq.n	8009946 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8009940:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009944:	e039      	b.n	80099ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800994c:	2b00      	cmp	r3, #0
 800994e:	d002      	beq.n	8009956 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009950:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009954:	e031      	b.n	80099ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800995c:	2b00      	cmp	r3, #0
 800995e:	d002      	beq.n	8009966 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009960:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009964:	e029      	b.n	80099ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800996c:	2b00      	cmp	r3, #0
 800996e:	d002      	beq.n	8009976 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009970:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009974:	e021      	b.n	80099ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800997c:	2b00      	cmp	r3, #0
 800997e:	d002      	beq.n	8009986 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009980:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009984:	e019      	b.n	80099ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800998c:	2b00      	cmp	r3, #0
 800998e:	d002      	beq.n	8009996 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009990:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009994:	e011      	b.n	80099ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800999c:	2b00      	cmp	r3, #0
 800999e:	d002      	beq.n	80099a6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80099a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80099a4:	e009      	b.n	80099ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	f003 0308 	and.w	r3, r3, #8
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d002      	beq.n	80099b6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80099b0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80099b4:	e001      	b.n	80099ba <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80099b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	371c      	adds	r7, #28
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd90      	pop	{r4, r7, pc}
 80099c2:	bf00      	nop
 80099c4:	2000002c 	.word	0x2000002c
 80099c8:	10624dd3 	.word	0x10624dd3
 80099cc:	fdffe008 	.word	0xfdffe008

080099d0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80099d0:	b490      	push	{r4, r7}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80099d8:	4b1b      	ldr	r3, [pc, #108]	; (8009a48 <SDMMC_GetCmdResp2+0x78>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a1b      	ldr	r2, [pc, #108]	; (8009a4c <SDMMC_GetCmdResp2+0x7c>)
 80099de:	fba2 2303 	umull	r2, r3, r2, r3
 80099e2:	0a5b      	lsrs	r3, r3, #9
 80099e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80099e8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 80099ec:	4623      	mov	r3, r4
 80099ee:	1e5c      	subs	r4, r3, #1
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d102      	bne.n	80099fa <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80099f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80099f8:	e020      	b.n	8009a3c <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d0f2      	beq.n	80099ec <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a0a:	f003 0304 	and.w	r3, r3, #4
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d004      	beq.n	8009a1c <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2204      	movs	r2, #4
 8009a16:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009a18:	2304      	movs	r3, #4
 8009a1a:	e00f      	b.n	8009a3c <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a20:	f003 0301 	and.w	r3, r3, #1
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d004      	beq.n	8009a32 <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	e004      	b.n	8009a3c <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009a38:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009a3a:	2300      	movs	r3, #0
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3708      	adds	r7, #8
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bc90      	pop	{r4, r7}
 8009a44:	4770      	bx	lr
 8009a46:	bf00      	nop
 8009a48:	2000002c 	.word	0x2000002c
 8009a4c:	10624dd3 	.word	0x10624dd3

08009a50 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009a50:	b490      	push	{r4, r7}
 8009a52:	b082      	sub	sp, #8
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009a58:	4b15      	ldr	r3, [pc, #84]	; (8009ab0 <SDMMC_GetCmdResp3+0x60>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a15      	ldr	r2, [pc, #84]	; (8009ab4 <SDMMC_GetCmdResp3+0x64>)
 8009a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8009a62:	0a5b      	lsrs	r3, r3, #9
 8009a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a68:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009a6c:	4623      	mov	r3, r4
 8009a6e:	1e5c      	subs	r4, r3, #1
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d102      	bne.n	8009a7a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009a74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009a78:	e015      	b.n	8009aa6 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a7e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d0f2      	beq.n	8009a6c <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a8a:	f003 0304 	and.w	r3, r3, #4
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d004      	beq.n	8009a9c <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2204      	movs	r2, #4
 8009a96:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009a98:	2304      	movs	r3, #4
 8009a9a:	e004      	b.n	8009aa6 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009aa2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009aa4:	2300      	movs	r3, #0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3708      	adds	r7, #8
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bc90      	pop	{r4, r7}
 8009aae:	4770      	bx	lr
 8009ab0:	2000002c 	.word	0x2000002c
 8009ab4:	10624dd3 	.word	0x10624dd3

08009ab8 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009ab8:	b590      	push	{r4, r7, lr}
 8009aba:	b087      	sub	sp, #28
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	607a      	str	r2, [r7, #4]
 8009ac4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009ac6:	4b31      	ldr	r3, [pc, #196]	; (8009b8c <SDMMC_GetCmdResp6+0xd4>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4a31      	ldr	r2, [pc, #196]	; (8009b90 <SDMMC_GetCmdResp6+0xd8>)
 8009acc:	fba2 2303 	umull	r2, r3, r2, r3
 8009ad0:	0a5b      	lsrs	r3, r3, #9
 8009ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ad6:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009ada:	4623      	mov	r3, r4
 8009adc:	1e5c      	subs	r4, r3, #1
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d102      	bne.n	8009ae8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ae2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ae6:	e04c      	b.n	8009b82 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aec:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d0f2      	beq.n	8009ada <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009af8:	f003 0304 	and.w	r3, r3, #4
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d004      	beq.n	8009b0a <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2204      	movs	r2, #4
 8009b04:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b06:	2304      	movs	r3, #4
 8009b08:	e03b      	b.n	8009b82 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b0e:	f003 0301 	and.w	r3, r3, #1
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d004      	beq.n	8009b20 <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	e030      	b.n	8009b82 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009b20:	68f8      	ldr	r0, [r7, #12]
 8009b22:	f7ff fb9f 	bl	8009264 <SDMMC_GetCommandResponse>
 8009b26:	4603      	mov	r3, r0
 8009b28:	461a      	mov	r2, r3
 8009b2a:	7afb      	ldrb	r3, [r7, #11]
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d001      	beq.n	8009b34 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b30:	2301      	movs	r3, #1
 8009b32:	e026      	b.n	8009b82 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009b3a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009b3c:	2100      	movs	r1, #0
 8009b3e:	68f8      	ldr	r0, [r7, #12]
 8009b40:	f7ff fb9d 	bl	800927e <SDMMC_GetResponse>
 8009b44:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d106      	bne.n	8009b5e <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	0c1b      	lsrs	r3, r3, #16
 8009b54:	b29a      	uxth	r2, r3
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	e011      	b.n	8009b82 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d002      	beq.n	8009b6e <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009b68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009b6c:	e009      	b.n	8009b82 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d002      	beq.n	8009b7e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009b78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b7c:	e001      	b.n	8009b82 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009b7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	371c      	adds	r7, #28
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd90      	pop	{r4, r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	2000002c 	.word	0x2000002c
 8009b90:	10624dd3 	.word	0x10624dd3

08009b94 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009b94:	b490      	push	{r4, r7}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009b9c:	4b18      	ldr	r3, [pc, #96]	; (8009c00 <SDMMC_GetCmdResp7+0x6c>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a18      	ldr	r2, [pc, #96]	; (8009c04 <SDMMC_GetCmdResp7+0x70>)
 8009ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ba6:	0a5b      	lsrs	r3, r3, #9
 8009ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bac:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009bb0:	4623      	mov	r3, r4
 8009bb2:	1e5c      	subs	r4, r3, #1
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d102      	bne.n	8009bbe <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009bb8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009bbc:	e01a      	b.n	8009bf4 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bc2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d0f2      	beq.n	8009bb0 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bce:	f003 0304 	and.w	r3, r3, #4
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d004      	beq.n	8009be0 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2240      	movs	r2, #64	; 0x40
 8009bda:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009bdc:	2304      	movs	r3, #4
 8009bde:	e009      	b.n	8009bf4 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d002      	beq.n	8009bf2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2240      	movs	r2, #64	; 0x40
 8009bf0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009bf2:	2300      	movs	r3, #0
  
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3708      	adds	r7, #8
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bc90      	pop	{r4, r7}
 8009bfc:	4770      	bx	lr
 8009bfe:	bf00      	nop
 8009c00:	2000002c 	.word	0x2000002c
 8009c04:	10624dd3 	.word	0x10624dd3

08009c08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009c08:	b084      	sub	sp, #16
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b084      	sub	sp, #16
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
 8009c12:	f107 001c 	add.w	r0, r7, #28
 8009c16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d120      	bne.n	8009c62 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	68da      	ldr	r2, [r3, #12]
 8009c30:	4b20      	ldr	r3, [pc, #128]	; (8009cb4 <USB_CoreInit+0xac>)
 8009c32:	4013      	ands	r3, r2
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	68db      	ldr	r3, [r3, #12]
 8009c3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d105      	bne.n	8009c56 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	68db      	ldr	r3, [r3, #12]
 8009c4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 f942 	bl	8009ee0 <USB_CoreReset>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	73fb      	strb	r3, [r7, #15]
 8009c60:	e010      	b.n	8009c84 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	68db      	ldr	r3, [r3, #12]
 8009c66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 f936 	bl	8009ee0 <USB_CoreReset>
 8009c74:	4603      	mov	r3, r0
 8009c76:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c7c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8009c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d10b      	bne.n	8009ca2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	689b      	ldr	r3, [r3, #8]
 8009c8e:	f043 0206 	orr.w	r2, r3, #6
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	689b      	ldr	r3, [r3, #8]
 8009c9a:	f043 0220 	orr.w	r2, r3, #32
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3710      	adds	r7, #16
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009cae:	b004      	add	sp, #16
 8009cb0:	4770      	bx	lr
 8009cb2:	bf00      	nop
 8009cb4:	ffbdffbf 	.word	0xffbdffbf

08009cb8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	689b      	ldr	r3, [r3, #8]
 8009cc4:	f043 0201 	orr.w	r2, r3, #1
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009ccc:	2300      	movs	r3, #0
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	370c      	adds	r7, #12
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr

08009cda <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009cda:	b480      	push	{r7}
 8009cdc:	b083      	sub	sp, #12
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	689b      	ldr	r3, [r3, #8]
 8009ce6:	f023 0201 	bic.w	r2, r3, #1
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009cee:	2300      	movs	r3, #0
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	370c      	adds	r7, #12
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr

08009cfc <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b082      	sub	sp, #8
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	460b      	mov	r3, r1
 8009d06:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009d14:	78fb      	ldrb	r3, [r7, #3]
 8009d16:	2b01      	cmp	r3, #1
 8009d18:	d106      	bne.n	8009d28 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	68db      	ldr	r3, [r3, #12]
 8009d1e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	60da      	str	r2, [r3, #12]
 8009d26:	e00b      	b.n	8009d40 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009d28:	78fb      	ldrb	r3, [r7, #3]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d106      	bne.n	8009d3c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	68db      	ldr	r3, [r3, #12]
 8009d32:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	60da      	str	r2, [r3, #12]
 8009d3a:	e001      	b.n	8009d40 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	e003      	b.n	8009d48 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009d40:	2032      	movs	r0, #50	; 0x32
 8009d42:	f7f6 fc13 	bl	800056c <HAL_Delay>

  return HAL_OK;
 8009d46:	2300      	movs	r3, #0
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3708      	adds	r7, #8
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b085      	sub	sp, #20
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	019b      	lsls	r3, r3, #6
 8009d62:	f043 0220 	orr.w	r2, r3, #32
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	3301      	adds	r3, #1
 8009d6e:	60fb      	str	r3, [r7, #12]
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	4a09      	ldr	r2, [pc, #36]	; (8009d98 <USB_FlushTxFifo+0x48>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d901      	bls.n	8009d7c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009d78:	2303      	movs	r3, #3
 8009d7a:	e006      	b.n	8009d8a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	691b      	ldr	r3, [r3, #16]
 8009d80:	f003 0320 	and.w	r3, r3, #32
 8009d84:	2b20      	cmp	r3, #32
 8009d86:	d0f0      	beq.n	8009d6a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009d88:	2300      	movs	r3, #0
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3714      	adds	r7, #20
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr
 8009d96:	bf00      	nop
 8009d98:	00030d40 	.word	0x00030d40

08009d9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b085      	sub	sp, #20
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009da4:	2300      	movs	r3, #0
 8009da6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2210      	movs	r2, #16
 8009dac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	3301      	adds	r3, #1
 8009db2:	60fb      	str	r3, [r7, #12]
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	4a09      	ldr	r2, [pc, #36]	; (8009ddc <USB_FlushRxFifo+0x40>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d901      	bls.n	8009dc0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009dbc:	2303      	movs	r3, #3
 8009dbe:	e006      	b.n	8009dce <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	691b      	ldr	r3, [r3, #16]
 8009dc4:	f003 0310 	and.w	r3, r3, #16
 8009dc8:	2b10      	cmp	r3, #16
 8009dca:	d0f0      	beq.n	8009dae <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009dcc:	2300      	movs	r3, #0
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3714      	adds	r7, #20
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop
 8009ddc:	00030d40 	.word	0x00030d40

08009de0 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b089      	sub	sp, #36	; 0x24
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	60b9      	str	r1, [r7, #8]
 8009dea:	4611      	mov	r1, r2
 8009dec:	461a      	mov	r2, r3
 8009dee:	460b      	mov	r3, r1
 8009df0:	71fb      	strb	r3, [r7, #7]
 8009df2:	4613      	mov	r3, r2
 8009df4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009dfe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d11a      	bne.n	8009e3c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009e06:	88bb      	ldrh	r3, [r7, #4]
 8009e08:	3303      	adds	r3, #3
 8009e0a:	089b      	lsrs	r3, r3, #2
 8009e0c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009e0e:	2300      	movs	r3, #0
 8009e10:	61bb      	str	r3, [r7, #24]
 8009e12:	e00f      	b.n	8009e34 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8009e14:	79fb      	ldrb	r3, [r7, #7]
 8009e16:	031a      	lsls	r2, r3, #12
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	4413      	add	r3, r2
 8009e1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e20:	461a      	mov	r2, r3
 8009e22:	69fb      	ldr	r3, [r7, #28]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009e28:	69fb      	ldr	r3, [r7, #28]
 8009e2a:	3304      	adds	r3, #4
 8009e2c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009e2e:	69bb      	ldr	r3, [r7, #24]
 8009e30:	3301      	adds	r3, #1
 8009e32:	61bb      	str	r3, [r7, #24]
 8009e34:	69ba      	ldr	r2, [r7, #24]
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d3eb      	bcc.n	8009e14 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009e3c:	2300      	movs	r3, #0
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3724      	adds	r7, #36	; 0x24
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr

08009e4a <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009e4a:	b480      	push	{r7}
 8009e4c:	b089      	sub	sp, #36	; 0x24
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	60f8      	str	r0, [r7, #12]
 8009e52:	60b9      	str	r1, [r7, #8]
 8009e54:	4613      	mov	r3, r2
 8009e56:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009e60:	88fb      	ldrh	r3, [r7, #6]
 8009e62:	3303      	adds	r3, #3
 8009e64:	089b      	lsrs	r3, r3, #2
 8009e66:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009e68:	2300      	movs	r3, #0
 8009e6a:	61bb      	str	r3, [r7, #24]
 8009e6c:	e00b      	b.n	8009e86 <USB_ReadPacket+0x3c>
  {
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	69fb      	ldr	r3, [r7, #28]
 8009e78:	601a      	str	r2, [r3, #0]
    pDest++;
 8009e7a:	69fb      	ldr	r3, [r7, #28]
 8009e7c:	3304      	adds	r3, #4
 8009e7e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009e80:	69bb      	ldr	r3, [r7, #24]
 8009e82:	3301      	adds	r3, #1
 8009e84:	61bb      	str	r3, [r7, #24]
 8009e86:	69ba      	ldr	r2, [r7, #24]
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d3ef      	bcc.n	8009e6e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009e8e:	69fb      	ldr	r3, [r7, #28]
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3724      	adds	r7, #36	; 0x24
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr

08009e9c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b085      	sub	sp, #20
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	695b      	ldr	r3, [r3, #20]
 8009ea8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	699b      	ldr	r3, [r3, #24]
 8009eae:	68fa      	ldr	r2, [r7, #12]
 8009eb0:	4013      	ands	r3, r2
 8009eb2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3714      	adds	r7, #20
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr

08009ec2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009ec2:	b480      	push	{r7}
 8009ec4:	b083      	sub	sp, #12
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	695b      	ldr	r3, [r3, #20]
 8009ece:	f003 0301 	and.w	r3, r3, #1
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	370c      	adds	r7, #12
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr
	...

08009ee0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b085      	sub	sp, #20
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	3301      	adds	r3, #1
 8009ef0:	60fb      	str	r3, [r7, #12]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	4a13      	ldr	r2, [pc, #76]	; (8009f44 <USB_CoreReset+0x64>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d901      	bls.n	8009efe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009efa:	2303      	movs	r3, #3
 8009efc:	e01b      	b.n	8009f36 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	691b      	ldr	r3, [r3, #16]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	daf2      	bge.n	8009eec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009f06:	2300      	movs	r3, #0
 8009f08:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	691b      	ldr	r3, [r3, #16]
 8009f0e:	f043 0201 	orr.w	r2, r3, #1
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	3301      	adds	r3, #1
 8009f1a:	60fb      	str	r3, [r7, #12]
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	4a09      	ldr	r2, [pc, #36]	; (8009f44 <USB_CoreReset+0x64>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d901      	bls.n	8009f28 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009f24:	2303      	movs	r3, #3
 8009f26:	e006      	b.n	8009f36 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	691b      	ldr	r3, [r3, #16]
 8009f2c:	f003 0301 	and.w	r3, r3, #1
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d0f0      	beq.n	8009f16 <USB_CoreReset+0x36>

  return HAL_OK;
 8009f34:	2300      	movs	r3, #0
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3714      	adds	r7, #20
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop
 8009f44:	00030d40 	.word	0x00030d40

08009f48 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009f48:	b084      	sub	sp, #16
 8009f4a:	b580      	push	{r7, lr}
 8009f4c:	b084      	sub	sp, #16
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
 8009f52:	f107 001c 	add.w	r0, r7, #28
 8009f56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009f64:	461a      	mov	r2, r3
 8009f66:	2300      	movs	r3, #0
 8009f68:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f6e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d018      	beq.n	8009fb4 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8009f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f84:	2b03      	cmp	r3, #3
 8009f86:	d10a      	bne.n	8009f9e <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	68ba      	ldr	r2, [r7, #8]
 8009f92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009f96:	f043 0304 	orr.w	r3, r3, #4
 8009f9a:	6013      	str	r3, [r2, #0]
 8009f9c:	e014      	b.n	8009fc8 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	68ba      	ldr	r2, [r7, #8]
 8009fa8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009fac:	f023 0304 	bic.w	r3, r3, #4
 8009fb0:	6013      	str	r3, [r2, #0]
 8009fb2:	e009      	b.n	8009fc8 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	68ba      	ldr	r2, [r7, #8]
 8009fbe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009fc2:	f023 0304 	bic.w	r3, r3, #4
 8009fc6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8009fc8:	2110      	movs	r1, #16
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f7ff fec0 	bl	8009d50 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f7ff fee3 	bl	8009d9c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	60fb      	str	r3, [r7, #12]
 8009fda:	e015      	b.n	800a008 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	015a      	lsls	r2, r3, #5
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	4413      	add	r3, r2
 8009fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fe8:	461a      	mov	r2, r3
 8009fea:	f04f 33ff 	mov.w	r3, #4294967295
 8009fee:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	015a      	lsls	r2, r3, #5
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	4413      	add	r3, r2
 8009ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	2300      	movs	r3, #0
 800a000:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	3301      	adds	r3, #1
 800a006:	60fb      	str	r3, [r7, #12]
 800a008:	6a3b      	ldr	r3, [r7, #32]
 800a00a:	68fa      	ldr	r2, [r7, #12]
 800a00c:	429a      	cmp	r2, r3
 800a00e:	d3e5      	bcc.n	8009fdc <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800a010:	2101      	movs	r1, #1
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 f8ac 	bl	800a170 <USB_DriveVbus>

  HAL_Delay(200U);
 800a018:	20c8      	movs	r0, #200	; 0xc8
 800a01a:	f7f6 faa7 	bl	800056c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f04f 32ff 	mov.w	r2, #4294967295
 800a02a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a034:	2b00      	cmp	r3, #0
 800a036:	d00b      	beq.n	800a050 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a03e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	4a14      	ldr	r2, [pc, #80]	; (800a094 <USB_HostInit+0x14c>)
 800a044:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	4a13      	ldr	r2, [pc, #76]	; (800a098 <USB_HostInit+0x150>)
 800a04a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800a04e:	e009      	b.n	800a064 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2280      	movs	r2, #128	; 0x80
 800a054:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	4a10      	ldr	r2, [pc, #64]	; (800a09c <USB_HostInit+0x154>)
 800a05a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	4a10      	ldr	r2, [pc, #64]	; (800a0a0 <USB_HostInit+0x158>)
 800a060:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a066:	2b00      	cmp	r3, #0
 800a068:	d105      	bne.n	800a076 <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	699b      	ldr	r3, [r3, #24]
 800a06e:	f043 0210 	orr.w	r2, r3, #16
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	699a      	ldr	r2, [r3, #24]
 800a07a:	4b0a      	ldr	r3, [pc, #40]	; (800a0a4 <USB_HostInit+0x15c>)
 800a07c:	4313      	orrs	r3, r2
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800a082:	2300      	movs	r3, #0
}
 800a084:	4618      	mov	r0, r3
 800a086:	3710      	adds	r7, #16
 800a088:	46bd      	mov	sp, r7
 800a08a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a08e:	b004      	add	sp, #16
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop
 800a094:	01000200 	.word	0x01000200
 800a098:	00e00300 	.word	0x00e00300
 800a09c:	00600080 	.word	0x00600080
 800a0a0:	004000e0 	.word	0x004000e0
 800a0a4:	a3200008 	.word	0xa3200008

0800a0a8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b085      	sub	sp, #20
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	68fa      	ldr	r2, [r7, #12]
 800a0c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a0c6:	f023 0303 	bic.w	r3, r3, #3
 800a0ca:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a0d2:	681a      	ldr	r2, [r3, #0]
 800a0d4:	78fb      	ldrb	r3, [r7, #3]
 800a0d6:	f003 0303 	and.w	r3, r3, #3
 800a0da:	68f9      	ldr	r1, [r7, #12]
 800a0dc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a0e4:	78fb      	ldrb	r3, [r7, #3]
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d107      	bne.n	800a0fa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a0f6:	6053      	str	r3, [r2, #4]
 800a0f8:	e009      	b.n	800a10e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800a0fa:	78fb      	ldrb	r3, [r7, #3]
 800a0fc:	2b02      	cmp	r3, #2
 800a0fe:	d106      	bne.n	800a10e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a106:	461a      	mov	r2, r3
 800a108:	f241 7370 	movw	r3, #6000	; 0x1770
 800a10c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800a10e:	2300      	movs	r3, #0
}
 800a110:	4618      	mov	r0, r3
 800a112:	3714      	adds	r7, #20
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a128:	2300      	movs	r3, #0
 800a12a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a13c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	68fa      	ldr	r2, [r7, #12]
 800a142:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a14a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800a14c:	2064      	movs	r0, #100	; 0x64
 800a14e:	f7f6 fa0d 	bl	800056c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	68fa      	ldr	r2, [r7, #12]
 800a156:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a15a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a15e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a160:	200a      	movs	r0, #10
 800a162:	f7f6 fa03 	bl	800056c <HAL_Delay>

  return HAL_OK;
 800a166:	2300      	movs	r3, #0
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3710      	adds	r7, #16
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a170:	b480      	push	{r7}
 800a172:	b085      	sub	sp, #20
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	460b      	mov	r3, r1
 800a17a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a180:	2300      	movs	r3, #0
 800a182:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a194:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d109      	bne.n	800a1b4 <USB_DriveVbus+0x44>
 800a1a0:	78fb      	ldrb	r3, [r7, #3]
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d106      	bne.n	800a1b4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	68fa      	ldr	r2, [r7, #12]
 800a1aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a1ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a1b2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a1ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1be:	d109      	bne.n	800a1d4 <USB_DriveVbus+0x64>
 800a1c0:	78fb      	ldrb	r3, [r7, #3]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d106      	bne.n	800a1d4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	68fa      	ldr	r2, [r7, #12]
 800a1ca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a1ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1d2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a1d4:	2300      	movs	r3, #0
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3714      	adds	r7, #20
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr

0800a1e2 <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a1e2:	b480      	push	{r7}
 800a1e4:	b085      	sub	sp, #20
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	0c5b      	lsrs	r3, r3, #17
 800a200:	f003 0303 	and.w	r3, r3, #3
}
 800a204:	4618      	mov	r0, r3
 800a206:	3714      	adds	r7, #20
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr

0800a210 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800a210:	b480      	push	{r7}
 800a212:	b085      	sub	sp, #20
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a222:	689b      	ldr	r3, [r3, #8]
 800a224:	b29b      	uxth	r3, r3
}
 800a226:	4618      	mov	r0, r3
 800a228:	3714      	adds	r7, #20
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr
	...

0800a234 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800a234:	b480      	push	{r7}
 800a236:	b087      	sub	sp, #28
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	4608      	mov	r0, r1
 800a23e:	4611      	mov	r1, r2
 800a240:	461a      	mov	r2, r3
 800a242:	4603      	mov	r3, r0
 800a244:	70fb      	strb	r3, [r7, #3]
 800a246:	460b      	mov	r3, r1
 800a248:	70bb      	strb	r3, [r7, #2]
 800a24a:	4613      	mov	r3, r2
 800a24c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a24e:	2300      	movs	r3, #0
 800a250:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800a256:	78fb      	ldrb	r3, [r7, #3]
 800a258:	015a      	lsls	r2, r3, #5
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	4413      	add	r3, r2
 800a25e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a262:	461a      	mov	r2, r3
 800a264:	f04f 33ff 	mov.w	r3, #4294967295
 800a268:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a26a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a26e:	2b03      	cmp	r3, #3
 800a270:	d87e      	bhi.n	800a370 <USB_HC_Init+0x13c>
 800a272:	a201      	add	r2, pc, #4	; (adr r2, 800a278 <USB_HC_Init+0x44>)
 800a274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a278:	0800a289 	.word	0x0800a289
 800a27c:	0800a333 	.word	0x0800a333
 800a280:	0800a289 	.word	0x0800a289
 800a284:	0800a2f5 	.word	0x0800a2f5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a288:	78fb      	ldrb	r3, [r7, #3]
 800a28a:	015a      	lsls	r2, r3, #5
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	4413      	add	r3, r2
 800a290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a294:	461a      	mov	r2, r3
 800a296:	f240 439d 	movw	r3, #1181	; 0x49d
 800a29a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800a29c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	da10      	bge.n	800a2c6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a2a4:	78fb      	ldrb	r3, [r7, #3]
 800a2a6:	015a      	lsls	r2, r3, #5
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	4413      	add	r3, r2
 800a2ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2b0:	68db      	ldr	r3, [r3, #12]
 800a2b2:	78fa      	ldrb	r2, [r7, #3]
 800a2b4:	0151      	lsls	r1, r2, #5
 800a2b6:	68ba      	ldr	r2, [r7, #8]
 800a2b8:	440a      	add	r2, r1
 800a2ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a2be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2c2:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800a2c4:	e057      	b.n	800a376 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d051      	beq.n	800a376 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800a2d2:	78fb      	ldrb	r3, [r7, #3]
 800a2d4:	015a      	lsls	r2, r3, #5
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	4413      	add	r3, r2
 800a2da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2de:	68db      	ldr	r3, [r3, #12]
 800a2e0:	78fa      	ldrb	r2, [r7, #3]
 800a2e2:	0151      	lsls	r1, r2, #5
 800a2e4:	68ba      	ldr	r2, [r7, #8]
 800a2e6:	440a      	add	r2, r1
 800a2e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a2ec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a2f0:	60d3      	str	r3, [r2, #12]
      break;
 800a2f2:	e040      	b.n	800a376 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a2f4:	78fb      	ldrb	r3, [r7, #3]
 800a2f6:	015a      	lsls	r2, r3, #5
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	4413      	add	r3, r2
 800a2fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a300:	461a      	mov	r2, r3
 800a302:	f240 639d 	movw	r3, #1693	; 0x69d
 800a306:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a308:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	da34      	bge.n	800a37a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a310:	78fb      	ldrb	r3, [r7, #3]
 800a312:	015a      	lsls	r2, r3, #5
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	4413      	add	r3, r2
 800a318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a31c:	68db      	ldr	r3, [r3, #12]
 800a31e:	78fa      	ldrb	r2, [r7, #3]
 800a320:	0151      	lsls	r1, r2, #5
 800a322:	68ba      	ldr	r2, [r7, #8]
 800a324:	440a      	add	r2, r1
 800a326:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a32a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a32e:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a330:	e023      	b.n	800a37a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a332:	78fb      	ldrb	r3, [r7, #3]
 800a334:	015a      	lsls	r2, r3, #5
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	4413      	add	r3, r2
 800a33a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a33e:	461a      	mov	r2, r3
 800a340:	f240 2325 	movw	r3, #549	; 0x225
 800a344:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a346:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	da17      	bge.n	800a37e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a34e:	78fb      	ldrb	r3, [r7, #3]
 800a350:	015a      	lsls	r2, r3, #5
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	4413      	add	r3, r2
 800a356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a35a:	68db      	ldr	r3, [r3, #12]
 800a35c:	78fa      	ldrb	r2, [r7, #3]
 800a35e:	0151      	lsls	r1, r2, #5
 800a360:	68ba      	ldr	r2, [r7, #8]
 800a362:	440a      	add	r2, r1
 800a364:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a368:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800a36c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a36e:	e006      	b.n	800a37e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800a370:	2301      	movs	r3, #1
 800a372:	75fb      	strb	r3, [r7, #23]
      break;
 800a374:	e004      	b.n	800a380 <USB_HC_Init+0x14c>
      break;
 800a376:	bf00      	nop
 800a378:	e002      	b.n	800a380 <USB_HC_Init+0x14c>
      break;
 800a37a:	bf00      	nop
 800a37c:	e000      	b.n	800a380 <USB_HC_Init+0x14c>
      break;
 800a37e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a386:	699a      	ldr	r2, [r3, #24]
 800a388:	78fb      	ldrb	r3, [r7, #3]
 800a38a:	f003 030f 	and.w	r3, r3, #15
 800a38e:	2101      	movs	r1, #1
 800a390:	fa01 f303 	lsl.w	r3, r1, r3
 800a394:	68b9      	ldr	r1, [r7, #8]
 800a396:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a39a:	4313      	orrs	r3, r2
 800a39c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	699b      	ldr	r3, [r3, #24]
 800a3a2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a3aa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	da03      	bge.n	800a3ba <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a3b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3b6:	613b      	str	r3, [r7, #16]
 800a3b8:	e001      	b.n	800a3be <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800a3be:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a3c2:	2b02      	cmp	r3, #2
 800a3c4:	d103      	bne.n	800a3ce <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a3c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a3ca:	60fb      	str	r3, [r7, #12]
 800a3cc:	e001      	b.n	800a3d2 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a3d2:	787b      	ldrb	r3, [r7, #1]
 800a3d4:	059b      	lsls	r3, r3, #22
 800a3d6:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a3da:	78bb      	ldrb	r3, [r7, #2]
 800a3dc:	02db      	lsls	r3, r3, #11
 800a3de:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a3e2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a3e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a3e8:	049b      	lsls	r3, r3, #18
 800a3ea:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a3ee:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a3f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a3f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a3f6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a3fc:	78fb      	ldrb	r3, [r7, #3]
 800a3fe:	0159      	lsls	r1, r3, #5
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	440b      	add	r3, r1
 800a404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a408:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a40e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800a410:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a414:	2b03      	cmp	r3, #3
 800a416:	d10f      	bne.n	800a438 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800a418:	78fb      	ldrb	r3, [r7, #3]
 800a41a:	015a      	lsls	r2, r3, #5
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	4413      	add	r3, r2
 800a420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	78fa      	ldrb	r2, [r7, #3]
 800a428:	0151      	lsls	r1, r2, #5
 800a42a:	68ba      	ldr	r2, [r7, #8]
 800a42c:	440a      	add	r2, r1
 800a42e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a432:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a436:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a438:	7dfb      	ldrb	r3, [r7, #23]
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	371c      	adds	r7, #28
 800a43e:	46bd      	mov	sp, r7
 800a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a444:	4770      	bx	lr
 800a446:	bf00      	nop

0800a448 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b08c      	sub	sp, #48	; 0x30
 800a44c:	af02      	add	r7, sp, #8
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	60b9      	str	r1, [r7, #8]
 800a452:	4613      	mov	r3, r2
 800a454:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	785b      	ldrb	r3, [r3, #1]
 800a45e:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800a460:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a464:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USB_OTG_SPEED_HIGH))
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a46a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d028      	beq.n	800a4c4 <USB_HC_StartXfer+0x7c>
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	791b      	ldrb	r3, [r3, #4]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d124      	bne.n	800a4c4 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800a47a:	79fb      	ldrb	r3, [r7, #7]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d10b      	bne.n	800a498 <USB_HC_StartXfer+0x50>
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	795b      	ldrb	r3, [r3, #5]
 800a484:	2b01      	cmp	r3, #1
 800a486:	d107      	bne.n	800a498 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	785b      	ldrb	r3, [r3, #1]
 800a48c:	4619      	mov	r1, r3
 800a48e:	68f8      	ldr	r0, [r7, #12]
 800a490:	f000 fa2e 	bl	800a8f0 <USB_DoPing>
      return HAL_OK;
 800a494:	2300      	movs	r3, #0
 800a496:	e112      	b.n	800a6be <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 800a498:	79fb      	ldrb	r3, [r7, #7]
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	d112      	bne.n	800a4c4 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800a49e:	69fb      	ldr	r3, [r7, #28]
 800a4a0:	015a      	lsls	r2, r3, #5
 800a4a2:	6a3b      	ldr	r3, [r7, #32]
 800a4a4:	4413      	add	r3, r2
 800a4a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	69fa      	ldr	r2, [r7, #28]
 800a4ae:	0151      	lsls	r1, r2, #5
 800a4b0:	6a3a      	ldr	r2, [r7, #32]
 800a4b2:	440a      	add	r2, r1
 800a4b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4b8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800a4bc:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	691b      	ldr	r3, [r3, #16]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d018      	beq.n	800a4fe <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	691b      	ldr	r3, [r3, #16]
 800a4d0:	68ba      	ldr	r2, [r7, #8]
 800a4d2:	8912      	ldrh	r2, [r2, #8]
 800a4d4:	4413      	add	r3, r2
 800a4d6:	3b01      	subs	r3, #1
 800a4d8:	68ba      	ldr	r2, [r7, #8]
 800a4da:	8912      	ldrh	r2, [r2, #8]
 800a4dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4e0:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800a4e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a4e4:	8b7b      	ldrh	r3, [r7, #26]
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d90b      	bls.n	800a502 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800a4ea:	8b7b      	ldrh	r3, [r7, #26]
 800a4ec:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800a4ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a4f0:	68ba      	ldr	r2, [r7, #8]
 800a4f2:	8912      	ldrh	r2, [r2, #8]
 800a4f4:	fb02 f203 	mul.w	r2, r2, r3
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	611a      	str	r2, [r3, #16]
 800a4fc:	e001      	b.n	800a502 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800a4fe:	2301      	movs	r3, #1
 800a500:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	78db      	ldrb	r3, [r3, #3]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d006      	beq.n	800a518 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800a50a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a50c:	68ba      	ldr	r2, [r7, #8]
 800a50e:	8912      	ldrh	r2, [r2, #8]
 800a510:	fb02 f203 	mul.w	r2, r2, r3
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	691b      	ldr	r3, [r3, #16]
 800a51c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a520:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a522:	04d9      	lsls	r1, r3, #19
 800a524:	4b68      	ldr	r3, [pc, #416]	; (800a6c8 <USB_HC_StartXfer+0x280>)
 800a526:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a528:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	7a9b      	ldrb	r3, [r3, #10]
 800a52e:	075b      	lsls	r3, r3, #29
 800a530:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a534:	69f9      	ldr	r1, [r7, #28]
 800a536:	0148      	lsls	r0, r1, #5
 800a538:	6a39      	ldr	r1, [r7, #32]
 800a53a:	4401      	add	r1, r0
 800a53c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a540:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a542:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a544:	79fb      	ldrb	r3, [r7, #7]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d009      	beq.n	800a55e <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	68d9      	ldr	r1, [r3, #12]
 800a54e:	69fb      	ldr	r3, [r7, #28]
 800a550:	015a      	lsls	r2, r3, #5
 800a552:	6a3b      	ldr	r3, [r7, #32]
 800a554:	4413      	add	r3, r2
 800a556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a55a:	460a      	mov	r2, r1
 800a55c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a55e:	6a3b      	ldr	r3, [r7, #32]
 800a560:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a564:	689b      	ldr	r3, [r3, #8]
 800a566:	f003 0301 	and.w	r3, r3, #1
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	bf0c      	ite	eq
 800a56e:	2301      	moveq	r3, #1
 800a570:	2300      	movne	r3, #0
 800a572:	b2db      	uxtb	r3, r3
 800a574:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a576:	69fb      	ldr	r3, [r7, #28]
 800a578:	015a      	lsls	r2, r3, #5
 800a57a:	6a3b      	ldr	r3, [r7, #32]
 800a57c:	4413      	add	r3, r2
 800a57e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	69fa      	ldr	r2, [r7, #28]
 800a586:	0151      	lsls	r1, r2, #5
 800a588:	6a3a      	ldr	r2, [r7, #32]
 800a58a:	440a      	add	r2, r1
 800a58c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a590:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a594:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a596:	69fb      	ldr	r3, [r7, #28]
 800a598:	015a      	lsls	r2, r3, #5
 800a59a:	6a3b      	ldr	r3, [r7, #32]
 800a59c:	4413      	add	r3, r2
 800a59e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	7e7b      	ldrb	r3, [r7, #25]
 800a5a6:	075b      	lsls	r3, r3, #29
 800a5a8:	69f9      	ldr	r1, [r7, #28]
 800a5aa:	0148      	lsls	r0, r1, #5
 800a5ac:	6a39      	ldr	r1, [r7, #32]
 800a5ae:	4401      	add	r1, r0
 800a5b0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a5b8:	69fb      	ldr	r3, [r7, #28]
 800a5ba:	015a      	lsls	r2, r3, #5
 800a5bc:	6a3b      	ldr	r3, [r7, #32]
 800a5be:	4413      	add	r3, r2
 800a5c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4a41      	ldr	r2, [pc, #260]	; (800a6cc <USB_HC_StartXfer+0x284>)
 800a5c8:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a5ca:	4b40      	ldr	r3, [pc, #256]	; (800a6cc <USB_HC_StartXfer+0x284>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a5d2:	4a3e      	ldr	r2, [pc, #248]	; (800a6cc <USB_HC_StartXfer+0x284>)
 800a5d4:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	78db      	ldrb	r3, [r3, #3]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d006      	beq.n	800a5ec <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a5de:	4b3b      	ldr	r3, [pc, #236]	; (800a6cc <USB_HC_StartXfer+0x284>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5e6:	4a39      	ldr	r2, [pc, #228]	; (800a6cc <USB_HC_StartXfer+0x284>)
 800a5e8:	6013      	str	r3, [r2, #0]
 800a5ea:	e005      	b.n	800a5f8 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a5ec:	4b37      	ldr	r3, [pc, #220]	; (800a6cc <USB_HC_StartXfer+0x284>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a5f4:	4a35      	ldr	r2, [pc, #212]	; (800a6cc <USB_HC_StartXfer+0x284>)
 800a5f6:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a5f8:	4b34      	ldr	r3, [pc, #208]	; (800a6cc <USB_HC_StartXfer+0x284>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a600:	4a32      	ldr	r2, [pc, #200]	; (800a6cc <USB_HC_StartXfer+0x284>)
 800a602:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a604:	69fb      	ldr	r3, [r7, #28]
 800a606:	015a      	lsls	r2, r3, #5
 800a608:	6a3b      	ldr	r3, [r7, #32]
 800a60a:	4413      	add	r3, r2
 800a60c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a610:	461a      	mov	r2, r3
 800a612:	4b2e      	ldr	r3, [pc, #184]	; (800a6cc <USB_HC_StartXfer+0x284>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800a618:	79fb      	ldrb	r3, [r7, #7]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d14e      	bne.n	800a6bc <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	78db      	ldrb	r3, [r3, #3]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d14a      	bne.n	800a6bc <USB_HC_StartXfer+0x274>
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	691b      	ldr	r3, [r3, #16]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d046      	beq.n	800a6bc <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	79db      	ldrb	r3, [r3, #7]
 800a632:	2b03      	cmp	r3, #3
 800a634:	d830      	bhi.n	800a698 <USB_HC_StartXfer+0x250>
 800a636:	a201      	add	r2, pc, #4	; (adr r2, 800a63c <USB_HC_StartXfer+0x1f4>)
 800a638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a63c:	0800a64d 	.word	0x0800a64d
 800a640:	0800a671 	.word	0x0800a671
 800a644:	0800a64d 	.word	0x0800a64d
 800a648:	0800a671 	.word	0x0800a671
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	691b      	ldr	r3, [r3, #16]
 800a650:	3303      	adds	r3, #3
 800a652:	089b      	lsrs	r3, r3, #2
 800a654:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a656:	8afa      	ldrh	r2, [r7, #22]
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a65c:	b29b      	uxth	r3, r3
 800a65e:	429a      	cmp	r2, r3
 800a660:	d91c      	bls.n	800a69c <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	699b      	ldr	r3, [r3, #24]
 800a666:	f043 0220 	orr.w	r2, r3, #32
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	619a      	str	r2, [r3, #24]
          }
          break;
 800a66e:	e015      	b.n	800a69c <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	691b      	ldr	r3, [r3, #16]
 800a674:	3303      	adds	r3, #3
 800a676:	089b      	lsrs	r3, r3, #2
 800a678:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a67a:	8afa      	ldrh	r2, [r7, #22]
 800a67c:	6a3b      	ldr	r3, [r7, #32]
 800a67e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a682:	691b      	ldr	r3, [r3, #16]
 800a684:	b29b      	uxth	r3, r3
 800a686:	429a      	cmp	r2, r3
 800a688:	d90a      	bls.n	800a6a0 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	699b      	ldr	r3, [r3, #24]
 800a68e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	619a      	str	r2, [r3, #24]
          }
          break;
 800a696:	e003      	b.n	800a6a0 <USB_HC_StartXfer+0x258>

        default:
          break;
 800a698:	bf00      	nop
 800a69a:	e002      	b.n	800a6a2 <USB_HC_StartXfer+0x25a>
          break;
 800a69c:	bf00      	nop
 800a69e:	e000      	b.n	800a6a2 <USB_HC_StartXfer+0x25a>
          break;
 800a6a0:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	68d9      	ldr	r1, [r3, #12]
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	785a      	ldrb	r2, [r3, #1]
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	691b      	ldr	r3, [r3, #16]
 800a6ae:	b298      	uxth	r0, r3
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	9300      	str	r3, [sp, #0]
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	68f8      	ldr	r0, [r7, #12]
 800a6b8:	f7ff fb92 	bl	8009de0 <USB_WritePacket>
    }
  }

  return HAL_OK;
 800a6bc:	2300      	movs	r3, #0
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3728      	adds	r7, #40	; 0x28
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	1ff80000 	.word	0x1ff80000
 800a6cc:	200000b0 	.word	0x200000b0

0800a6d0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b085      	sub	sp, #20
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6e2:	695b      	ldr	r3, [r3, #20]
 800a6e4:	b29b      	uxth	r3, r3
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3714      	adds	r7, #20
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f0:	4770      	bx	lr

0800a6f2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a6f2:	b480      	push	{r7}
 800a6f4:	b087      	sub	sp, #28
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800a702:	78fb      	ldrb	r3, [r7, #3]
 800a704:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800a706:	2300      	movs	r3, #0
 800a708:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	015a      	lsls	r2, r3, #5
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	4413      	add	r3, r2
 800a712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	0c9b      	lsrs	r3, r3, #18
 800a71a:	f003 0303 	and.w	r3, r3, #3
 800a71e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d002      	beq.n	800a72c <USB_HC_Halt+0x3a>
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	2b02      	cmp	r3, #2
 800a72a:	d16c      	bne.n	800a806 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	015a      	lsls	r2, r3, #5
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	4413      	add	r3, r2
 800a734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	68fa      	ldr	r2, [r7, #12]
 800a73c:	0151      	lsls	r1, r2, #5
 800a73e:	693a      	ldr	r2, [r7, #16]
 800a740:	440a      	add	r2, r1
 800a742:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a746:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a74a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a750:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a754:	2b00      	cmp	r3, #0
 800a756:	d143      	bne.n	800a7e0 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	015a      	lsls	r2, r3, #5
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	4413      	add	r3, r2
 800a760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	68fa      	ldr	r2, [r7, #12]
 800a768:	0151      	lsls	r1, r2, #5
 800a76a:	693a      	ldr	r2, [r7, #16]
 800a76c:	440a      	add	r2, r1
 800a76e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a772:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a776:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	015a      	lsls	r2, r3, #5
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	4413      	add	r3, r2
 800a780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	68fa      	ldr	r2, [r7, #12]
 800a788:	0151      	lsls	r1, r2, #5
 800a78a:	693a      	ldr	r2, [r7, #16]
 800a78c:	440a      	add	r2, r1
 800a78e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a792:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a796:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	015a      	lsls	r2, r3, #5
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	4413      	add	r3, r2
 800a7a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	68fa      	ldr	r2, [r7, #12]
 800a7a8:	0151      	lsls	r1, r2, #5
 800a7aa:	693a      	ldr	r2, [r7, #16]
 800a7ac:	440a      	add	r2, r1
 800a7ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a7b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a7b6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	617b      	str	r3, [r7, #20]
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a7c4:	d81d      	bhi.n	800a802 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	015a      	lsls	r2, r3, #5
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	4413      	add	r3, r2
 800a7ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a7d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7dc:	d0ec      	beq.n	800a7b8 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a7de:	e080      	b.n	800a8e2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	015a      	lsls	r2, r3, #5
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	4413      	add	r3, r2
 800a7e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	68fa      	ldr	r2, [r7, #12]
 800a7f0:	0151      	lsls	r1, r2, #5
 800a7f2:	693a      	ldr	r2, [r7, #16]
 800a7f4:	440a      	add	r2, r1
 800a7f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a7fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a7fe:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a800:	e06f      	b.n	800a8e2 <USB_HC_Halt+0x1f0>
          break;
 800a802:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a804:	e06d      	b.n	800a8e2 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	015a      	lsls	r2, r3, #5
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	4413      	add	r3, r2
 800a80e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	68fa      	ldr	r2, [r7, #12]
 800a816:	0151      	lsls	r1, r2, #5
 800a818:	693a      	ldr	r2, [r7, #16]
 800a81a:	440a      	add	r2, r1
 800a81c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a820:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a824:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a82c:	691b      	ldr	r3, [r3, #16]
 800a82e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a832:	2b00      	cmp	r3, #0
 800a834:	d143      	bne.n	800a8be <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	015a      	lsls	r2, r3, #5
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	4413      	add	r3, r2
 800a83e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	68fa      	ldr	r2, [r7, #12]
 800a846:	0151      	lsls	r1, r2, #5
 800a848:	693a      	ldr	r2, [r7, #16]
 800a84a:	440a      	add	r2, r1
 800a84c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a850:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a854:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	015a      	lsls	r2, r3, #5
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	4413      	add	r3, r2
 800a85e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	68fa      	ldr	r2, [r7, #12]
 800a866:	0151      	lsls	r1, r2, #5
 800a868:	693a      	ldr	r2, [r7, #16]
 800a86a:	440a      	add	r2, r1
 800a86c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a870:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a874:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	015a      	lsls	r2, r3, #5
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	4413      	add	r3, r2
 800a87e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	68fa      	ldr	r2, [r7, #12]
 800a886:	0151      	lsls	r1, r2, #5
 800a888:	693a      	ldr	r2, [r7, #16]
 800a88a:	440a      	add	r2, r1
 800a88c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a890:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a894:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	3301      	adds	r3, #1
 800a89a:	617b      	str	r3, [r7, #20]
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a8a2:	d81d      	bhi.n	800a8e0 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	015a      	lsls	r2, r3, #5
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	4413      	add	r3, r2
 800a8ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a8b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a8ba:	d0ec      	beq.n	800a896 <USB_HC_Halt+0x1a4>
 800a8bc:	e011      	b.n	800a8e2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	015a      	lsls	r2, r3, #5
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	4413      	add	r3, r2
 800a8c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	68fa      	ldr	r2, [r7, #12]
 800a8ce:	0151      	lsls	r1, r2, #5
 800a8d0:	693a      	ldr	r2, [r7, #16]
 800a8d2:	440a      	add	r2, r1
 800a8d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a8d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a8dc:	6013      	str	r3, [r2, #0]
 800a8de:	e000      	b.n	800a8e2 <USB_HC_Halt+0x1f0>
          break;
 800a8e0:	bf00      	nop
    }
  }

  return HAL_OK;
 800a8e2:	2300      	movs	r3, #0
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	371c      	adds	r7, #28
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr

0800a8f0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b087      	sub	sp, #28
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	460b      	mov	r3, r1
 800a8fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a900:	78fb      	ldrb	r3, [r7, #3]
 800a902:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a904:	2301      	movs	r3, #1
 800a906:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	04da      	lsls	r2, r3, #19
 800a90c:	4b15      	ldr	r3, [pc, #84]	; (800a964 <USB_DoPing+0x74>)
 800a90e:	4013      	ands	r3, r2
 800a910:	693a      	ldr	r2, [r7, #16]
 800a912:	0151      	lsls	r1, r2, #5
 800a914:	697a      	ldr	r2, [r7, #20]
 800a916:	440a      	add	r2, r1
 800a918:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a91c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a920:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	015a      	lsls	r2, r3, #5
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	4413      	add	r3, r2
 800a92a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a938:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a940:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	015a      	lsls	r2, r3, #5
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	4413      	add	r3, r2
 800a94a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a94e:	461a      	mov	r2, r3
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a954:	2300      	movs	r3, #0
}
 800a956:	4618      	mov	r0, r3
 800a958:	371c      	adds	r7, #28
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr
 800a962:	bf00      	nop
 800a964:	1ff80000 	.word	0x1ff80000

0800a968 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b086      	sub	sp, #24
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800a974:	2300      	movs	r3, #0
 800a976:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f7ff f9ae 	bl	8009cda <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800a97e:	2110      	movs	r1, #16
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f7ff f9e5 	bl	8009d50 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f7ff fa08 	bl	8009d9c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a98c:	2300      	movs	r3, #0
 800a98e:	613b      	str	r3, [r7, #16]
 800a990:	e01f      	b.n	800a9d2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	015a      	lsls	r2, r3, #5
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	4413      	add	r3, r2
 800a99a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a9a8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a9b0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a9b8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	015a      	lsls	r2, r3, #5
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	4413      	add	r3, r2
 800a9c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	613b      	str	r3, [r7, #16]
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	2b0f      	cmp	r3, #15
 800a9d6:	d9dc      	bls.n	800a992 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a9d8:	2300      	movs	r3, #0
 800a9da:	613b      	str	r3, [r7, #16]
 800a9dc:	e034      	b.n	800aa48 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	015a      	lsls	r2, r3, #5
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	4413      	add	r3, r2
 800a9e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a9f4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a9fc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800aa04:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	015a      	lsls	r2, r3, #5
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	4413      	add	r3, r2
 800aa0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa12:	461a      	mov	r2, r3
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	617b      	str	r3, [r7, #20]
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aa24:	d80c      	bhi.n	800aa40 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	015a      	lsls	r2, r3, #5
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	4413      	add	r3, r2
 800aa2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa3c:	d0ec      	beq.n	800aa18 <USB_StopHost+0xb0>
 800aa3e:	e000      	b.n	800aa42 <USB_StopHost+0xda>
        break;
 800aa40:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	3301      	adds	r3, #1
 800aa46:	613b      	str	r3, [r7, #16]
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	2b0f      	cmp	r3, #15
 800aa4c:	d9c7      	bls.n	800a9de <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa54:	461a      	mov	r2, r3
 800aa56:	f04f 33ff 	mov.w	r3, #4294967295
 800aa5a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa62:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f7ff f927 	bl	8009cb8 <USB_EnableGlobalInt>

  return HAL_OK;
 800aa6a:	2300      	movs	r3, #0
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3718      	adds	r7, #24
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 800aa74:	b590      	push	{r4, r7, lr}
 800aa76:	b089      	sub	sp, #36	; 0x24
 800aa78:	af04      	add	r7, sp, #16
 800aa7a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 800aa7c:	2302      	movs	r3, #2
 800aa7e:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 800aa80:	2301      	movs	r3, #1
 800aa82:	2202      	movs	r2, #2
 800aa84:	2102      	movs	r1, #2
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f000 fc8c 	bl	800b3a4 <USBH_FindInterface>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 800aa90:	7bbb      	ldrb	r3, [r7, #14]
 800aa92:	2bff      	cmp	r3, #255	; 0xff
 800aa94:	f000 812a 	beq.w	800acec <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 800aa98:	7bbb      	ldrb	r3, [r7, #14]
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f000 fc65 	bl	800b36c <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 800aaa8:	2050      	movs	r0, #80	; 0x50
 800aaaa:	f00a ffed 	bl	8015a88 <malloc>
 800aaae:	4603      	mov	r3, r0
 800aab0:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800aab8:	69db      	ldr	r3, [r3, #28]
 800aaba:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800aabc:	7bbb      	ldrb	r3, [r7, #14]
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	211a      	movs	r1, #26
 800aac2:	fb01 f303 	mul.w	r3, r1, r3
 800aac6:	4413      	add	r3, r2
 800aac8:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	b25b      	sxtb	r3, r3
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	da15      	bge.n	800ab00 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800aad4:	7bbb      	ldrb	r3, [r7, #14]
 800aad6:	687a      	ldr	r2, [r7, #4]
 800aad8:	211a      	movs	r1, #26
 800aada:	fb01 f303 	mul.w	r3, r1, r3
 800aade:	4413      	add	r3, r2
 800aae0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800aae4:	781a      	ldrb	r2, [r3, #0]
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800aaea:	7bbb      	ldrb	r3, [r7, #14]
 800aaec:	687a      	ldr	r2, [r7, #4]
 800aaee:	211a      	movs	r1, #26
 800aaf0:	fb01 f303 	mul.w	r3, r1, r3
 800aaf4:	4413      	add	r3, r2
 800aaf6:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800aafa:	881a      	ldrh	r2, [r3, #0]
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	785b      	ldrb	r3, [r3, #1]
 800ab04:	4619      	mov	r1, r3
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f001 ff2f 	bl	800c96a <USBH_AllocPipe>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	461a      	mov	r2, r3
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	7819      	ldrb	r1, [r3, #0]
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	7858      	ldrb	r0, [r3, #1]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ab28:	68ba      	ldr	r2, [r7, #8]
 800ab2a:	8952      	ldrh	r2, [r2, #10]
 800ab2c:	9202      	str	r2, [sp, #8]
 800ab2e:	2203      	movs	r2, #3
 800ab30:	9201      	str	r2, [sp, #4]
 800ab32:	9300      	str	r3, [sp, #0]
 800ab34:	4623      	mov	r3, r4
 800ab36:	4602      	mov	r2, r0
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f001 fee7 	bl	800c90c <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	2200      	movs	r2, #0
 800ab44:	4619      	mov	r1, r3
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f00a fec4 	bl	80158d4 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	2200      	movs	r2, #0
 800ab50:	210a      	movs	r1, #10
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f000 fc26 	bl	800b3a4 <USBH_FindInterface>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 800ab5c:	7bbb      	ldrb	r3, [r7, #14]
 800ab5e:	2bff      	cmp	r3, #255	; 0xff
 800ab60:	f000 80c4 	beq.w	800acec <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800ab64:	7bbb      	ldrb	r3, [r7, #14]
 800ab66:	687a      	ldr	r2, [r7, #4]
 800ab68:	211a      	movs	r1, #26
 800ab6a:	fb01 f303 	mul.w	r3, r1, r3
 800ab6e:	4413      	add	r3, r2
 800ab70:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800ab74:	781b      	ldrb	r3, [r3, #0]
 800ab76:	b25b      	sxtb	r3, r3
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	da16      	bge.n	800abaa <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ab7c:	7bbb      	ldrb	r3, [r7, #14]
 800ab7e:	687a      	ldr	r2, [r7, #4]
 800ab80:	211a      	movs	r1, #26
 800ab82:	fb01 f303 	mul.w	r3, r1, r3
 800ab86:	4413      	add	r3, r2
 800ab88:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800ab8c:	781a      	ldrb	r2, [r3, #0]
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ab92:	7bbb      	ldrb	r3, [r7, #14]
 800ab94:	687a      	ldr	r2, [r7, #4]
 800ab96:	211a      	movs	r1, #26
 800ab98:	fb01 f303 	mul.w	r3, r1, r3
 800ab9c:	4413      	add	r3, r2
 800ab9e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800aba2:	881a      	ldrh	r2, [r3, #0]
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	835a      	strh	r2, [r3, #26]
 800aba8:	e015      	b.n	800abd6 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800abaa:	7bbb      	ldrb	r3, [r7, #14]
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	211a      	movs	r1, #26
 800abb0:	fb01 f303 	mul.w	r3, r1, r3
 800abb4:	4413      	add	r3, r2
 800abb6:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800abba:	781a      	ldrb	r2, [r3, #0]
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800abc0:	7bbb      	ldrb	r3, [r7, #14]
 800abc2:	687a      	ldr	r2, [r7, #4]
 800abc4:	211a      	movs	r1, #26
 800abc6:	fb01 f303 	mul.w	r3, r1, r3
 800abca:	4413      	add	r3, r2
 800abcc:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800abd0:	881a      	ldrh	r2, [r3, #0]
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800abd6:	7bbb      	ldrb	r3, [r7, #14]
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	211a      	movs	r1, #26
 800abdc:	fb01 f303 	mul.w	r3, r1, r3
 800abe0:	4413      	add	r3, r2
 800abe2:	f203 3352 	addw	r3, r3, #850	; 0x352
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	b25b      	sxtb	r3, r3
 800abea:	2b00      	cmp	r3, #0
 800abec:	da16      	bge.n	800ac1c <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800abee:	7bbb      	ldrb	r3, [r7, #14]
 800abf0:	687a      	ldr	r2, [r7, #4]
 800abf2:	211a      	movs	r1, #26
 800abf4:	fb01 f303 	mul.w	r3, r1, r3
 800abf8:	4413      	add	r3, r2
 800abfa:	f203 3352 	addw	r3, r3, #850	; 0x352
 800abfe:	781a      	ldrb	r2, [r3, #0]
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ac04:	7bbb      	ldrb	r3, [r7, #14]
 800ac06:	687a      	ldr	r2, [r7, #4]
 800ac08:	211a      	movs	r1, #26
 800ac0a:	fb01 f303 	mul.w	r3, r1, r3
 800ac0e:	4413      	add	r3, r2
 800ac10:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800ac14:	881a      	ldrh	r2, [r3, #0]
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	835a      	strh	r2, [r3, #26]
 800ac1a:	e015      	b.n	800ac48 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ac1c:	7bbb      	ldrb	r3, [r7, #14]
 800ac1e:	687a      	ldr	r2, [r7, #4]
 800ac20:	211a      	movs	r1, #26
 800ac22:	fb01 f303 	mul.w	r3, r1, r3
 800ac26:	4413      	add	r3, r2
 800ac28:	f203 3352 	addw	r3, r3, #850	; 0x352
 800ac2c:	781a      	ldrb	r2, [r3, #0]
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ac32:	7bbb      	ldrb	r3, [r7, #14]
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	211a      	movs	r1, #26
 800ac38:	fb01 f303 	mul.w	r3, r1, r3
 800ac3c:	4413      	add	r3, r2
 800ac3e:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800ac42:	881a      	ldrh	r2, [r3, #0]
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	7b9b      	ldrb	r3, [r3, #14]
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f001 fe8b 	bl	800c96a <USBH_AllocPipe>
 800ac54:	4603      	mov	r3, r0
 800ac56:	461a      	mov	r2, r3
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	7bdb      	ldrb	r3, [r3, #15]
 800ac60:	4619      	mov	r1, r3
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f001 fe81 	bl	800c96a <USBH_AllocPipe>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	7b59      	ldrb	r1, [r3, #13]
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	7b98      	ldrb	r0, [r3, #14]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ac84:	68ba      	ldr	r2, [r7, #8]
 800ac86:	8b12      	ldrh	r2, [r2, #24]
 800ac88:	9202      	str	r2, [sp, #8]
 800ac8a:	2202      	movs	r2, #2
 800ac8c:	9201      	str	r2, [sp, #4]
 800ac8e:	9300      	str	r3, [sp, #0]
 800ac90:	4623      	mov	r3, r4
 800ac92:	4602      	mov	r2, r0
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f001 fe39 	bl	800c90c <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	7b19      	ldrb	r1, [r3, #12]
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	7bd8      	ldrb	r0, [r3, #15]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800acae:	68ba      	ldr	r2, [r7, #8]
 800acb0:	8b52      	ldrh	r2, [r2, #26]
 800acb2:	9202      	str	r2, [sp, #8]
 800acb4:	2202      	movs	r2, #2
 800acb6:	9201      	str	r2, [sp, #4]
 800acb8:	9300      	str	r3, [sp, #0]
 800acba:	4623      	mov	r3, r4
 800acbc:	4602      	mov	r2, r0
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f001 fe24 	bl	800c90c <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	2200      	movs	r2, #0
 800acc8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	7b5b      	ldrb	r3, [r3, #13]
 800acd0:	2200      	movs	r2, #0
 800acd2:	4619      	mov	r1, r3
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f00a fdfd 	bl	80158d4 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	7b1b      	ldrb	r3, [r3, #12]
 800acde:	2200      	movs	r2, #0
 800ace0:	4619      	mov	r1, r3
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f00a fdf6 	bl	80158d4 <USBH_LL_SetToggle>
      status = USBH_OK;
 800ace8:	2300      	movs	r3, #0
 800acea:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 800acec:	7bfb      	ldrb	r3, [r7, #15]
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3714      	adds	r7, #20
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd90      	pop	{r4, r7, pc}

0800acf6 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800acf6:	b580      	push	{r7, lr}
 800acf8:	b084      	sub	sp, #16
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ad04:	69db      	ldr	r3, [r3, #28]
 800ad06:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d00e      	beq.n	800ad2e <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	4619      	mov	r1, r3
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f001 fe17 	bl	800c94a <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	781b      	ldrb	r3, [r3, #0]
 800ad20:	4619      	mov	r1, r3
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f001 fe3f 	bl	800c9a6 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	7b1b      	ldrb	r3, [r3, #12]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d00e      	beq.n	800ad54 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	7b1b      	ldrb	r3, [r3, #12]
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f001 fe04 	bl	800c94a <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	7b1b      	ldrb	r3, [r3, #12]
 800ad46:	4619      	mov	r1, r3
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f001 fe2c 	bl	800c9a6 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2200      	movs	r2, #0
 800ad52:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	7b5b      	ldrb	r3, [r3, #13]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d00e      	beq.n	800ad7a <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	7b5b      	ldrb	r3, [r3, #13]
 800ad60:	4619      	mov	r1, r3
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f001 fdf1 	bl	800c94a <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	7b5b      	ldrb	r3, [r3, #13]
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f001 fe19 	bl	800c9a6 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	2200      	movs	r2, #0
 800ad78:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ad80:	69db      	ldr	r3, [r3, #28]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d00b      	beq.n	800ad9e <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ad8c:	69db      	ldr	r3, [r3, #28]
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f00a fe82 	bl	8015a98 <free>
    phost->pActiveClass->pData = 0U;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800ad9e:	2300      	movs	r3, #0
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3710      	adds	r7, #16
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b084      	sub	sp, #16
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 800adb0:	2302      	movs	r3, #2
 800adb2:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800adba:	69db      	ldr	r3, [r3, #28]
 800adbc:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	3340      	adds	r3, #64	; 0x40
 800adc2:	4619      	mov	r1, r3
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f000 f8b2 	bl	800af2e <GetLineCoding>
 800adca:	4603      	mov	r3, r0
 800adcc:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 800adce:	7bfb      	ldrb	r3, [r7, #15]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d105      	bne.n	800ade0 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800adda:	2102      	movs	r1, #2
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	4798      	blx	r3
  }
  return status;
 800ade0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3710      	adds	r7, #16
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
	...

0800adec <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800adf4:	2301      	movs	r3, #1
 800adf6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800adf8:	2300      	movs	r3, #0
 800adfa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ae02:	69db      	ldr	r3, [r3, #28]
 800ae04:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ae0c:	2b04      	cmp	r3, #4
 800ae0e:	d877      	bhi.n	800af00 <USBH_CDC_Process+0x114>
 800ae10:	a201      	add	r2, pc, #4	; (adr r2, 800ae18 <USBH_CDC_Process+0x2c>)
 800ae12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae16:	bf00      	nop
 800ae18:	0800ae2d 	.word	0x0800ae2d
 800ae1c:	0800ae33 	.word	0x0800ae33
 800ae20:	0800ae63 	.word	0x0800ae63
 800ae24:	0800aed7 	.word	0x0800aed7
 800ae28:	0800aee5 	.word	0x0800aee5
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	73fb      	strb	r3, [r7, #15]
    break;
 800ae30:	e06d      	b.n	800af0e <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae36:	4619      	mov	r1, r3
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f000 f897 	bl	800af6c <SetLineCoding>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800ae42:	7bbb      	ldrb	r3, [r7, #14]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d104      	bne.n	800ae52 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	2202      	movs	r2, #2
 800ae4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800ae50:	e058      	b.n	800af04 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 800ae52:	7bbb      	ldrb	r3, [r7, #14]
 800ae54:	2b01      	cmp	r3, #1
 800ae56:	d055      	beq.n	800af04 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	2204      	movs	r2, #4
 800ae5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800ae60:	e050      	b.n	800af04 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	3340      	adds	r3, #64	; 0x40
 800ae66:	4619      	mov	r1, r3
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f000 f860 	bl	800af2e <GetLineCoding>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800ae72:	7bbb      	ldrb	r3, [r7, #14]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d126      	bne.n	800aec6 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae8a:	791b      	ldrb	r3, [r3, #4]
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d13b      	bne.n	800af08 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae9a:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d133      	bne.n	800af08 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aeaa:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800aeac:	429a      	cmp	r2, r3
 800aeae:	d12b      	bne.n	800af08 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aeb8:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d124      	bne.n	800af08 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f000 f984 	bl	800b1cc <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800aec4:	e020      	b.n	800af08 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 800aec6:	7bbb      	ldrb	r3, [r7, #14]
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d01d      	beq.n	800af08 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	2204      	movs	r2, #4
 800aed0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800aed4:	e018      	b.n	800af08 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 f867 	bl	800afaa <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f000 f8f8 	bl	800b0d2 <CDC_ProcessReception>
    break;
 800aee2:	e014      	b.n	800af0e <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 800aee4:	2100      	movs	r1, #0
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 fffa 	bl	800bee0 <USBH_ClrFeature>
 800aeec:	4603      	mov	r3, r0
 800aeee:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 800aef0:	7bbb      	ldrb	r3, [r7, #14]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d10a      	bne.n	800af0c <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	2200      	movs	r2, #0
 800aefa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 800aefe:	e005      	b.n	800af0c <USBH_CDC_Process+0x120>

  default:
    break;
 800af00:	bf00      	nop
 800af02:	e004      	b.n	800af0e <USBH_CDC_Process+0x122>
    break;
 800af04:	bf00      	nop
 800af06:	e002      	b.n	800af0e <USBH_CDC_Process+0x122>
    break;
 800af08:	bf00      	nop
 800af0a:	e000      	b.n	800af0e <USBH_CDC_Process+0x122>
    break;
 800af0c:	bf00      	nop

  }

  return status;
 800af0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af10:	4618      	mov	r0, r3
 800af12:	3710      	adds	r7, #16
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 800af18:	b480      	push	{r7}
 800af1a:	b083      	sub	sp, #12
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 800af20:	2300      	movs	r3, #0
}
 800af22:	4618      	mov	r0, r3
 800af24:	370c      	adds	r7, #12
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr

0800af2e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800af2e:	b580      	push	{r7, lr}
 800af30:	b082      	sub	sp, #8
 800af32:	af00      	add	r7, sp, #0
 800af34:	6078      	str	r0, [r7, #4]
 800af36:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	22a1      	movs	r2, #161	; 0xa1
 800af3c:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2221      	movs	r2, #33	; 0x21
 800af42:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2200      	movs	r2, #0
 800af48:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2200      	movs	r2, #0
 800af4e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2207      	movs	r2, #7
 800af54:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	2207      	movs	r2, #7
 800af5a:	4619      	mov	r1, r3
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f001 f99f 	bl	800c2a0 <USBH_CtlReq>
 800af62:	4603      	mov	r3, r0
}
 800af64:	4618      	mov	r0, r3
 800af66:	3708      	adds	r7, #8
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b082      	sub	sp, #8
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2221      	movs	r2, #33	; 0x21
 800af7a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2220      	movs	r2, #32
 800af80:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2200      	movs	r2, #0
 800af86:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2207      	movs	r2, #7
 800af92:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	2207      	movs	r2, #7
 800af98:	4619      	mov	r1, r3
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f001 f980 	bl	800c2a0 <USBH_CtlReq>
 800afa0:	4603      	mov	r3, r0
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3708      	adds	r7, #8
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}

0800afaa <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800afaa:	b580      	push	{r7, lr}
 800afac:	b086      	sub	sp, #24
 800afae:	af02      	add	r7, sp, #8
 800afb0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800afb8:	69db      	ldr	r3, [r3, #28]
 800afba:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800afbc:	2300      	movs	r3, #0
 800afbe:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800afc6:	2b01      	cmp	r3, #1
 800afc8:	d002      	beq.n	800afd0 <CDC_ProcessTransmission+0x26>
 800afca:	2b02      	cmp	r3, #2
 800afcc:	d025      	beq.n	800b01a <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 800afce:	e07c      	b.n	800b0ca <CDC_ProcessTransmission+0x120>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd4:	68fa      	ldr	r2, [r7, #12]
 800afd6:	8b12      	ldrh	r2, [r2, #24]
 800afd8:	4293      	cmp	r3, r2
 800afda:	d90c      	bls.n	800aff6 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	69d9      	ldr	r1, [r3, #28]
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	8b1a      	ldrh	r2, [r3, #24]
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	7b58      	ldrb	r0, [r3, #13]
 800afe8:	2301      	movs	r3, #1
 800afea:	9300      	str	r3, [sp, #0]
 800afec:	4603      	mov	r3, r0
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f001 fc49 	bl	800c886 <USBH_BulkSendData>
 800aff4:	e00c      	b.n	800b010 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 800affe:	b29a      	uxth	r2, r3
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	7b58      	ldrb	r0, [r3, #13]
 800b004:	2301      	movs	r3, #1
 800b006:	9300      	str	r3, [sp, #0]
 800b008:	4603      	mov	r3, r0
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f001 fc3b 	bl	800c886 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2202      	movs	r2, #2
 800b014:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800b018:	e057      	b.n	800b0ca <CDC_ProcessTransmission+0x120>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	7b5b      	ldrb	r3, [r3, #13]
 800b01e:	4619      	mov	r1, r3
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f00a fc2d 	bl	8015880 <USBH_LL_GetURBState>
 800b026:	4603      	mov	r3, r0
 800b028:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 800b02a:	7afb      	ldrb	r3, [r7, #11]
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	d136      	bne.n	800b09e <CDC_ProcessTransmission+0xf4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b034:	68fa      	ldr	r2, [r7, #12]
 800b036:	8b12      	ldrh	r2, [r2, #24]
 800b038:	4293      	cmp	r3, r2
 800b03a:	d90e      	bls.n	800b05a <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b040:	68fa      	ldr	r2, [r7, #12]
 800b042:	8b12      	ldrh	r2, [r2, #24]
 800b044:	1a9a      	subs	r2, r3, r2
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	69db      	ldr	r3, [r3, #28]
 800b04e:	68fa      	ldr	r2, [r7, #12]
 800b050:	8b12      	ldrh	r2, [r2, #24]
 800b052:	441a      	add	r2, r3
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	61da      	str	r2, [r3, #28]
 800b058:	e002      	b.n	800b060 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2200      	movs	r2, #0
 800b05e:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b064:	2b00      	cmp	r3, #0
 800b066:	d004      	beq.n	800b072 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	2201      	movs	r2, #1
 800b06c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800b070:	e006      	b.n	800b080 <CDC_ProcessTransmission+0xd6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2200      	movs	r2, #0
 800b076:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f000 f892 	bl	800b1a4 <USBH_CDC_TransmitCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2204      	movs	r2, #4
 800b084:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b094:	2200      	movs	r2, #0
 800b096:	4619      	mov	r1, r3
 800b098:	f004 fea6 	bl	800fde8 <osMessagePut>
    break;
 800b09c:	e014      	b.n	800b0c8 <CDC_ProcessTransmission+0x11e>
      if (URB_Status == USBH_URB_NOTREADY)
 800b09e:	7afb      	ldrb	r3, [r7, #11]
 800b0a0:	2b02      	cmp	r3, #2
 800b0a2:	d111      	bne.n	800b0c8 <CDC_ProcessTransmission+0x11e>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2204      	movs	r2, #4
 800b0b0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	f004 fe90 	bl	800fde8 <osMessagePut>
    break;
 800b0c8:	bf00      	nop
  }
}
 800b0ca:	bf00      	nop
 800b0cc:	3710      	adds	r7, #16
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}

0800b0d2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800b0d2:	b580      	push	{r7, lr}
 800b0d4:	b086      	sub	sp, #24
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b0e0:	69db      	ldr	r3, [r3, #28]
 800b0e2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800b0ee:	2b03      	cmp	r3, #3
 800b0f0:	d002      	beq.n	800b0f8 <CDC_ProcessReception+0x26>
 800b0f2:	2b04      	cmp	r3, #4
 800b0f4:	d00e      	beq.n	800b114 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 800b0f6:	e051      	b.n	800b19c <CDC_ProcessReception+0xca>
    USBH_BulkReceiveData (phost,
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	6a19      	ldr	r1, [r3, #32]
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	8b5a      	ldrh	r2, [r3, #26]
 800b100:	697b      	ldr	r3, [r7, #20]
 800b102:	7b1b      	ldrb	r3, [r3, #12]
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f001 fbe3 	bl	800c8d0 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	2204      	movs	r2, #4
 800b10e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800b112:	e043      	b.n	800b19c <CDC_ProcessReception+0xca>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	7b1b      	ldrb	r3, [r3, #12]
 800b118:	4619      	mov	r1, r3
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f00a fbb0 	bl	8015880 <USBH_LL_GetURBState>
 800b120:	4603      	mov	r3, r0
 800b122:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 800b124:	7cfb      	ldrb	r3, [r7, #19]
 800b126:	2b01      	cmp	r3, #1
 800b128:	d137      	bne.n	800b19a <CDC_ProcessReception+0xc8>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	7b1b      	ldrb	r3, [r3, #12]
 800b12e:	4619      	mov	r1, r3
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f00a fb13 	bl	801575c <USBH_LL_GetLastXferSize>
 800b136:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b13c:	68fa      	ldr	r2, [r7, #12]
 800b13e:	429a      	cmp	r2, r3
 800b140:	d016      	beq.n	800b170 <CDC_ProcessReception+0x9e>
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	8b5b      	ldrh	r3, [r3, #26]
 800b146:	461a      	mov	r2, r3
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d910      	bls.n	800b170 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	1ad2      	subs	r2, r2, r3
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	6a1a      	ldr	r2, [r3, #32]
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	441a      	add	r2, r3
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	2203      	movs	r2, #3
 800b16a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800b16e:	e006      	b.n	800b17e <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	2200      	movs	r2, #0
 800b174:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f000 f81d 	bl	800b1b8 <USBH_CDC_ReceiveCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2204      	movs	r2, #4
 800b182:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b192:	2200      	movs	r2, #0
 800b194:	4619      	mov	r1, r3
 800b196:	f004 fe27 	bl	800fde8 <osMessagePut>
    break;
 800b19a:	bf00      	nop
  }
}
 800b19c:	bf00      	nop
 800b19e:	3718      	adds	r7, #24
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}

0800b1a4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b083      	sub	sp, #12
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]

}
 800b1ac:	bf00      	nop
 800b1ae:	370c      	adds	r7, #12
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr

0800b1b8 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b083      	sub	sp, #12
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]

}
 800b1c0:	bf00      	nop
 800b1c2:	370c      	adds	r7, #12
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b083      	sub	sp, #12
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]

}
 800b1d4:	bf00      	nop
 800b1d6:	370c      	adds	r7, #12
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr

0800b1e0 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 800b1e0:	b5b0      	push	{r4, r5, r7, lr}
 800b1e2:	b08c      	sub	sp, #48	; 0x30
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	60f8      	str	r0, [r7, #12]
 800b1e8:	60b9      	str	r1, [r7, #8]
 800b1ea:	4613      	mov	r3, r2
 800b1ec:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d101      	bne.n	800b1f8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b1f4:	2302      	movs	r3, #2
 800b1f6:	e03c      	b.n	800b272 <USBH_Init+0x92>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	79fa      	ldrb	r2, [r7, #7]
 800b1fc:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2200      	movs	r2, #0
 800b204:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2200      	movs	r2, #0
 800b20c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800b210:	68f8      	ldr	r0, [r7, #12]
 800b212:	f000 f837 	bl	800b284 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d003      	beq.n	800b224 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	68ba      	ldr	r2, [r7, #8]
 800b220:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800b224:	4a15      	ldr	r2, [pc, #84]	; (800b27c <USBH_Init+0x9c>)
 800b226:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b22a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b22e:	e883 0003 	stmia.w	r3, {r0, r1}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 800b232:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b236:	2100      	movs	r1, #0
 800b238:	4618      	mov	r0, r3
 800b23a:	f004 fdc2 	bl	800fdc2 <osMessageCreate>
 800b23e:	4602      	mov	r2, r0
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800b246:	4b0e      	ldr	r3, [pc, #56]	; (800b280 <USBH_Init+0xa0>)
 800b248:	f107 0414 	add.w	r4, r7, #20
 800b24c:	461d      	mov	r5, r3
 800b24e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b250:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b252:	682b      	ldr	r3, [r5, #0]
 800b254:	6023      	str	r3, [r4, #0]
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 800b256:	f107 0314 	add.w	r3, r7, #20
 800b25a:	68f9      	ldr	r1, [r7, #12]
 800b25c:	4618      	mov	r0, r3
 800b25e:	f004 fcb9 	bl	800fbd4 <osThreadCreate>
 800b262:	4602      	mov	r2, r0
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800b26a:	68f8      	ldr	r0, [r7, #12]
 800b26c:	f00a f9c4 	bl	80155f8 <USBH_LL_Init>

  return USBH_OK;
 800b270:	2300      	movs	r3, #0
}
 800b272:	4618      	mov	r0, r3
 800b274:	3730      	adds	r7, #48	; 0x30
 800b276:	46bd      	mov	sp, r7
 800b278:	bdb0      	pop	{r4, r5, r7, pc}
 800b27a:	bf00      	nop
 800b27c:	08015c60 	.word	0x08015c60
 800b280:	08015c74 	.word	0x08015c74

0800b284 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b284:	b480      	push	{r7}
 800b286:	b085      	sub	sp, #20
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b28c:	2300      	movs	r3, #0
 800b28e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800b290:	e008      	b.n	800b2a4 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	68fa      	ldr	r2, [r7, #12]
 800b296:	32e0      	adds	r2, #224	; 0xe0
 800b298:	2100      	movs	r1, #0
 800b29a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	60fb      	str	r3, [r7, #12]
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	2b0e      	cmp	r3, #14
 800b2a8:	d9f3      	bls.n	800b292 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	60fb      	str	r3, [r7, #12]
 800b2ae:	e009      	b.n	800b2c4 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 800b2b0:	687a      	ldr	r2, [r7, #4]
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	4413      	add	r3, r2
 800b2b6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	60fb      	str	r3, [r7, #12]
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2ca:	d3f1      	bcc.n	800b2b0 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2201      	movs	r2, #1
 800b2dc:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2201      	movs	r2, #1
 800b2ea:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2240      	movs	r2, #64	; 0x40
 800b2f0:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2201      	movs	r2, #1
 800b304:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 800b308:	2300      	movs	r3, #0
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3714      	adds	r7, #20
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr

0800b316 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b316:	b480      	push	{r7}
 800b318:	b085      	sub	sp, #20
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
 800b31e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 800b320:	2300      	movs	r3, #0
 800b322:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d017      	beq.n	800b35a <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b330:	2b00      	cmp	r3, #0
 800b332:	d10f      	bne.n	800b354 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b33a:	1c59      	adds	r1, r3, #1
 800b33c:	687a      	ldr	r2, [r7, #4]
 800b33e:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 800b342:	687a      	ldr	r2, [r7, #4]
 800b344:	33dc      	adds	r3, #220	; 0xdc
 800b346:	009b      	lsls	r3, r3, #2
 800b348:	4413      	add	r3, r2
 800b34a:	683a      	ldr	r2, [r7, #0]
 800b34c:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800b34e:	2300      	movs	r3, #0
 800b350:	73fb      	strb	r3, [r7, #15]
 800b352:	e004      	b.n	800b35e <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b354:	2302      	movs	r3, #2
 800b356:	73fb      	strb	r3, [r7, #15]
 800b358:	e001      	b.n	800b35e <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b35a:	2302      	movs	r3, #2
 800b35c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b35e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b360:	4618      	mov	r0, r3
 800b362:	3714      	adds	r7, #20
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr

0800b36c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b085      	sub	sp, #20
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	460b      	mov	r3, r1
 800b376:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 800b378:	2300      	movs	r3, #0
 800b37a:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 800b382:	78fa      	ldrb	r2, [r7, #3]
 800b384:	429a      	cmp	r2, r3
 800b386:	d204      	bcs.n	800b392 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	78fa      	ldrb	r2, [r7, #3]
 800b38c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 800b390:	e001      	b.n	800b396 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b392:	2302      	movs	r3, #2
 800b394:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800b396:	7bfb      	ldrb	r3, [r7, #15]
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3714      	adds	r7, #20
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr

0800b3a4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b087      	sub	sp, #28
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	4608      	mov	r0, r1
 800b3ae:	4611      	mov	r1, r2
 800b3b0:	461a      	mov	r2, r3
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	70fb      	strb	r3, [r7, #3]
 800b3b6:	460b      	mov	r3, r1
 800b3b8:	70bb      	strb	r3, [r7, #2]
 800b3ba:	4613      	mov	r3, r2
 800b3bc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800b3cc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b3ce:	e025      	b.n	800b41c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b3d0:	7dfb      	ldrb	r3, [r7, #23]
 800b3d2:	221a      	movs	r2, #26
 800b3d4:	fb02 f303 	mul.w	r3, r2, r3
 800b3d8:	3308      	adds	r3, #8
 800b3da:	68fa      	ldr	r2, [r7, #12]
 800b3dc:	4413      	add	r3, r2
 800b3de:	3302      	adds	r3, #2
 800b3e0:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	795b      	ldrb	r3, [r3, #5]
 800b3e6:	78fa      	ldrb	r2, [r7, #3]
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d002      	beq.n	800b3f2 <USBH_FindInterface+0x4e>
 800b3ec:	78fb      	ldrb	r3, [r7, #3]
 800b3ee:	2bff      	cmp	r3, #255	; 0xff
 800b3f0:	d111      	bne.n	800b416 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800b3f6:	78ba      	ldrb	r2, [r7, #2]
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d002      	beq.n	800b402 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800b3fc:	78bb      	ldrb	r3, [r7, #2]
 800b3fe:	2bff      	cmp	r3, #255	; 0xff
 800b400:	d109      	bne.n	800b416 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800b406:	787a      	ldrb	r2, [r7, #1]
 800b408:	429a      	cmp	r2, r3
 800b40a:	d002      	beq.n	800b412 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b40c:	787b      	ldrb	r3, [r7, #1]
 800b40e:	2bff      	cmp	r3, #255	; 0xff
 800b410:	d101      	bne.n	800b416 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b412:	7dfb      	ldrb	r3, [r7, #23]
 800b414:	e006      	b.n	800b424 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b416:	7dfb      	ldrb	r3, [r7, #23]
 800b418:	3301      	adds	r3, #1
 800b41a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b41c:	7dfb      	ldrb	r3, [r7, #23]
 800b41e:	2b01      	cmp	r3, #1
 800b420:	d9d6      	bls.n	800b3d0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b422:	23ff      	movs	r3, #255	; 0xff
}
 800b424:	4618      	mov	r0, r3
 800b426:	371c      	adds	r7, #28
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr

0800b430 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b082      	sub	sp, #8
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f00a f919 	bl	8015670 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 800b43e:	2101      	movs	r1, #1
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f00a fa30 	bl	80158a6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b446:	2300      	movs	r3, #0
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3708      	adds	r7, #8
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}

0800b450 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b088      	sub	sp, #32
 800b454:	af04      	add	r7, sp, #16
 800b456:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b458:	2302      	movs	r3, #2
 800b45a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b45c:	2300      	movs	r3, #0
 800b45e:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f000 fb7e 	bl	800bb62 <USBH_IsPortEnabled>
 800b466:	4603      	mov	r3, r0
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d10c      	bne.n	800b486 <USBH_Process+0x36>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	781b      	ldrb	r3, [r3, #0]
 800b470:	b2db      	uxtb	r3, r3
 800b472:	2b00      	cmp	r3, #0
 800b474:	d007      	beq.n	800b486 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	b2db      	uxtb	r3, r3
 800b47c:	2b03      	cmp	r3, #3
 800b47e:	d002      	beq.n	800b486 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2203      	movs	r2, #3
 800b484:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	781b      	ldrb	r3, [r3, #0]
 800b48a:	b2db      	uxtb	r3, r3
 800b48c:	2b0b      	cmp	r3, #11
 800b48e:	f200 81ab 	bhi.w	800b7e8 <USBH_Process+0x398>
 800b492:	a201      	add	r2, pc, #4	; (adr r2, 800b498 <USBH_Process+0x48>)
 800b494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b498:	0800b4c9 	.word	0x0800b4c9
 800b49c:	0800b507 	.word	0x0800b507
 800b4a0:	0800b51b 	.word	0x0800b51b
 800b4a4:	0800b7c3 	.word	0x0800b7c3
 800b4a8:	0800b7e9 	.word	0x0800b7e9
 800b4ac:	0800b5c5 	.word	0x0800b5c5
 800b4b0:	0800b75d 	.word	0x0800b75d
 800b4b4:	0800b5f5 	.word	0x0800b5f5
 800b4b8:	0800b631 	.word	0x0800b631
 800b4bc:	0800b66b 	.word	0x0800b66b
 800b4c0:	0800b6b3 	.word	0x0800b6b3
 800b4c4:	0800b7ab 	.word	0x0800b7ab
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b4ce:	b2db      	uxtb	r3, r3
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	f000 818b 	beq.w	800b7ec <USBH_Process+0x39c>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2201      	movs	r2, #1
 800b4da:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 800b4dc:	20c8      	movs	r0, #200	; 0xc8
 800b4de:	f00a fa2c 	bl	801593a <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f00a f91f 	bl	8015726 <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	4619      	mov	r1, r3
 800b500:	f004 fc72 	bl	800fde8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800b504:	e172      	b.n	800b7ec <USBH_Process+0x39c>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	f040 816f 	bne.w	800b7f0 <USBH_Process+0x3a0>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2202      	movs	r2, #2
 800b516:	701a      	strb	r2, [r3, #0]
    }
    break;
 800b518:	e16a      	b.n	800b7f0 <USBH_Process+0x3a0>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 800b51a:	2064      	movs	r0, #100	; 0x64
 800b51c:	f00a fa0d 	bl	801593a <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f00a f8db 	bl	80156dc <USBH_LL_GetSpeed>
 800b526:	4603      	mov	r3, r0
 800b528:	461a      	mov	r2, r3
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2205      	movs	r2, #5
 800b534:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800b536:	2100      	movs	r1, #0
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f001 fa16 	bl	800c96a <USBH_AllocPipe>
 800b53e:	4603      	mov	r3, r0
 800b540:	461a      	mov	r2, r3
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800b546:	2180      	movs	r1, #128	; 0x80
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f001 fa0e 	bl	800c96a <USBH_AllocPipe>
 800b54e:	4603      	mov	r3, r0
 800b550:	461a      	mov	r2, r3
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	7919      	ldrb	r1, [r3, #4]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800b566:	687a      	ldr	r2, [r7, #4]
 800b568:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800b56a:	b292      	uxth	r2, r2
 800b56c:	9202      	str	r2, [sp, #8]
 800b56e:	2200      	movs	r2, #0
 800b570:	9201      	str	r2, [sp, #4]
 800b572:	9300      	str	r3, [sp, #0]
 800b574:	4603      	mov	r3, r0
 800b576:	2280      	movs	r2, #128	; 0x80
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f001 f9c7 	bl	800c90c <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	7959      	ldrb	r1, [r3, #5]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800b58e:	687a      	ldr	r2, [r7, #4]
 800b590:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800b592:	b292      	uxth	r2, r2
 800b594:	9202      	str	r2, [sp, #8]
 800b596:	2200      	movs	r2, #0
 800b598:	9201      	str	r2, [sp, #4]
 800b59a:	9300      	str	r3, [sp, #0]
 800b59c:	4603      	mov	r3, r0
 800b59e:	2200      	movs	r2, #0
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f001 f9b3 	bl	800c90c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2201      	movs	r2, #1
 800b5aa:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	4619      	mov	r1, r3
 800b5be:	f004 fc13 	bl	800fde8 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800b5c2:	e120      	b.n	800b806 <USBH_Process+0x3b6>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f000 f923 	bl	800b810 <USBH_HandleEnum>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	f040 8111 	bne.w	800b7f4 <USBH_Process+0x3a4>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800b5e0:	2b01      	cmp	r3, #1
 800b5e2:	d103      	bne.n	800b5ec <USBH_Process+0x19c>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2208      	movs	r2, #8
 800b5e8:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 800b5ea:	e103      	b.n	800b7f4 <USBH_Process+0x3a4>
        phost->gState  = HOST_INPUT;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2207      	movs	r2, #7
 800b5f0:	701a      	strb	r2, [r3, #0]
    break;
 800b5f2:	e0ff      	b.n	800b7f4 <USBH_Process+0x3a4>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	f000 80fc 	beq.w	800b7f8 <USBH_Process+0x3a8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b606:	2101      	movs	r1, #1
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2208      	movs	r2, #8
 800b610:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2205      	movs	r2, #5
 800b616:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b626:	2200      	movs	r2, #0
 800b628:	4619      	mov	r1, r3
 800b62a:	f004 fbdd 	bl	800fde8 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800b62e:	e0e3      	b.n	800b7f8 <USBH_Process+0x3a8>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 800b636:	b29b      	uxth	r3, r3
 800b638:	4619      	mov	r1, r3
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 fc09 	bl	800be52 <USBH_SetCfg>
 800b640:	4603      	mov	r3, r0
 800b642:	2b00      	cmp	r3, #0
 800b644:	d102      	bne.n	800b64c <USBH_Process+0x1fc>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2209      	movs	r2, #9
 800b64a:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2201      	movs	r2, #1
 800b650:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b660:	2200      	movs	r2, #0
 800b662:	4619      	mov	r1, r3
 800b664:	f004 fbc0 	bl	800fde8 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800b668:	e0cd      	b.n	800b806 <USBH_Process+0x3b6>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800b670:	f003 0320 	and.w	r3, r3, #32
 800b674:	2b00      	cmp	r3, #0
 800b676:	d00a      	beq.n	800b68e <USBH_Process+0x23e>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800b678:	2101      	movs	r1, #1
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f000 fc0c 	bl	800be98 <USBH_SetFeature>
 800b680:	4603      	mov	r3, r0
 800b682:	2b00      	cmp	r3, #0
 800b684:	d106      	bne.n	800b694 <USBH_Process+0x244>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	220a      	movs	r2, #10
 800b68a:	701a      	strb	r2, [r3, #0]
 800b68c:	e002      	b.n	800b694 <USBH_Process+0x244>
      }
    }
    else
    {
      phost->gState  = HOST_CHECK_CLASS;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	220a      	movs	r2, #10
 800b692:	701a      	strb	r2, [r3, #0]
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2201      	movs	r2, #1
 800b698:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	4619      	mov	r1, r3
 800b6ac:	f004 fb9c 	bl	800fde8 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800b6b0:	e0a9      	b.n	800b806 <USBH_Process+0x3b6>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d040      	beq.n	800b73e <USBH_Process+0x2ee>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	73fb      	strb	r3, [r7, #15]
 800b6c8:	e017      	b.n	800b6fa <USBH_Process+0x2aa>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b6ca:	7bfb      	ldrb	r3, [r7, #15]
 800b6cc:	687a      	ldr	r2, [r7, #4]
 800b6ce:	33dc      	adds	r3, #220	; 0xdc
 800b6d0:	009b      	lsls	r3, r3, #2
 800b6d2:	4413      	add	r3, r2
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	791a      	ldrb	r2, [r3, #4]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d108      	bne.n	800b6f4 <USBH_Process+0x2a4>
        {
          phost->pActiveClass = phost->pClass[idx];
 800b6e2:	7bfb      	ldrb	r3, [r7, #15]
 800b6e4:	687a      	ldr	r2, [r7, #4]
 800b6e6:	33dc      	adds	r3, #220	; 0xdc
 800b6e8:	009b      	lsls	r3, r3, #2
 800b6ea:	4413      	add	r3, r2
 800b6ec:	685a      	ldr	r2, [r3, #4]
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b6f4:	7bfb      	ldrb	r3, [r7, #15]
 800b6f6:	3301      	adds	r3, #1
 800b6f8:	73fb      	strb	r3, [r7, #15]
 800b6fa:	7bfb      	ldrb	r3, [r7, #15]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d0e4      	beq.n	800b6ca <USBH_Process+0x27a>
        }
      }

      if(phost->pActiveClass != NULL)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b706:	2b00      	cmp	r3, #0
 800b708:	d016      	beq.n	800b738 <USBH_Process+0x2e8>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b710:	689b      	ldr	r3, [r3, #8]
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	4798      	blx	r3
 800b716:	4603      	mov	r3, r0
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d109      	bne.n	800b730 <USBH_Process+0x2e0>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2206      	movs	r2, #6
 800b720:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b728:	2103      	movs	r1, #3
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	4798      	blx	r3
 800b72e:	e006      	b.n	800b73e <USBH_Process+0x2ee>
        }
        else
        {
          phost->gState  = HOST_ABORT_STATE;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	220d      	movs	r2, #13
 800b734:	701a      	strb	r2, [r3, #0]
 800b736:	e002      	b.n	800b73e <USBH_Process+0x2ee>
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
        }
      }
      else
      {
        phost->gState  = HOST_ABORT_STATE;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	220d      	movs	r2, #13
 800b73c:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog ("No registered class for this device.");
      }
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2205      	movs	r2, #5
 800b742:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b752:	2200      	movs	r2, #0
 800b754:	4619      	mov	r1, r3
 800b756:	f004 fb47 	bl	800fde8 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800b75a:	e054      	b.n	800b806 <USBH_Process+0x3b6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b762:	2b00      	cmp	r3, #0
 800b764:	d00f      	beq.n	800b786 <USBH_Process+0x336>
    {
      status = phost->pActiveClass->Requests(phost);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b76c:	691b      	ldr	r3, [r3, #16]
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	4798      	blx	r3
 800b772:	4603      	mov	r3, r0
 800b774:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 800b776:	7bbb      	ldrb	r3, [r7, #14]
 800b778:	b2db      	uxtb	r3, r3
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d13e      	bne.n	800b7fc <USBH_Process+0x3ac>
      {
        phost->gState  = HOST_CLASS;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	220b      	movs	r2, #11
 800b782:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 800b784:	e03a      	b.n	800b7fc <USBH_Process+0x3ac>
      phost->gState  = HOST_ABORT_STATE;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	220d      	movs	r2, #13
 800b78a:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2205      	movs	r2, #5
 800b790:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	4619      	mov	r1, r3
 800b7a4:	f004 fb20 	bl	800fde8 <osMessagePut>
    break;
 800b7a8:	e028      	b.n	800b7fc <USBH_Process+0x3ac>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d025      	beq.n	800b800 <USBH_Process+0x3b0>
    {
      phost->pActiveClass->BgndProcess(phost);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b7ba:	695b      	ldr	r3, [r3, #20]
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	4798      	blx	r3
    }
    break;
 800b7c0:	e01e      	b.n	800b800 <USBH_Process+0x3b0>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f7ff fd5e 	bl	800b284 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d018      	beq.n	800b804 <USBH_Process+0x3b4>
    {
      phost->pActiveClass->DeInit(phost);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b7d8:	68db      	ldr	r3, [r3, #12]
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	4798      	blx	r3
      phost->pActiveClass = NULL;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 800b7e6:	e00d      	b.n	800b804 <USBH_Process+0x3b4>

  case HOST_ABORT_STATE:
  default :
    break;
 800b7e8:	bf00      	nop
 800b7ea:	e00c      	b.n	800b806 <USBH_Process+0x3b6>
    break;
 800b7ec:	bf00      	nop
 800b7ee:	e00a      	b.n	800b806 <USBH_Process+0x3b6>
    break;
 800b7f0:	bf00      	nop
 800b7f2:	e008      	b.n	800b806 <USBH_Process+0x3b6>
    break;
 800b7f4:	bf00      	nop
 800b7f6:	e006      	b.n	800b806 <USBH_Process+0x3b6>
    break;
 800b7f8:	bf00      	nop
 800b7fa:	e004      	b.n	800b806 <USBH_Process+0x3b6>
    break;
 800b7fc:	bf00      	nop
 800b7fe:	e002      	b.n	800b806 <USBH_Process+0x3b6>
    break;
 800b800:	bf00      	nop
 800b802:	e000      	b.n	800b806 <USBH_Process+0x3b6>
    break;
 800b804:	bf00      	nop
  }
 return USBH_OK;
 800b806:	2300      	movs	r3, #0
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3710      	adds	r7, #16
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b088      	sub	sp, #32
 800b814:	af04      	add	r7, sp, #16
 800b816:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b818:	2301      	movs	r3, #1
 800b81a:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	785b      	ldrb	r3, [r3, #1]
 800b820:	2b07      	cmp	r3, #7
 800b822:	f200 8132 	bhi.w	800ba8a <USBH_HandleEnum+0x27a>
 800b826:	a201      	add	r2, pc, #4	; (adr r2, 800b82c <USBH_HandleEnum+0x1c>)
 800b828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b82c:	0800b84d 	.word	0x0800b84d
 800b830:	0800b8bf 	.word	0x0800b8bf
 800b834:	0800b8d7 	.word	0x0800b8d7
 800b838:	0800b94d 	.word	0x0800b94d
 800b83c:	0800b965 	.word	0x0800b965
 800b840:	0800b983 	.word	0x0800b983
 800b844:	0800b9ef 	.word	0x0800b9ef
 800b848:	0800ba3f 	.word	0x0800ba3f
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800b84c:	2108      	movs	r1, #8
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f000 fa2f 	bl	800bcb2 <USBH_Get_DevDesc>
 800b854:	4603      	mov	r3, r0
 800b856:	2b00      	cmp	r3, #0
 800b858:	f040 8119 	bne.w	800ba8e <USBH_HandleEnum+0x27e>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2201      	movs	r2, #1
 800b86a:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	7919      	ldrb	r1, [r3, #4]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800b880:	b292      	uxth	r2, r2
 800b882:	9202      	str	r2, [sp, #8]
 800b884:	2200      	movs	r2, #0
 800b886:	9201      	str	r2, [sp, #4]
 800b888:	9300      	str	r3, [sp, #0]
 800b88a:	4603      	mov	r3, r0
 800b88c:	2280      	movs	r2, #128	; 0x80
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f001 f83c 	bl	800c90c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	7959      	ldrb	r1, [r3, #5]
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800b8a4:	687a      	ldr	r2, [r7, #4]
 800b8a6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800b8a8:	b292      	uxth	r2, r2
 800b8aa:	9202      	str	r2, [sp, #8]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	9201      	str	r2, [sp, #4]
 800b8b0:	9300      	str	r3, [sp, #0]
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f001 f828 	bl	800c90c <USBH_OpenPipe>

    }
    break;
 800b8bc:	e0e7      	b.n	800ba8e <USBH_HandleEnum+0x27e>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800b8be:	2112      	movs	r1, #18
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f000 f9f6 	bl	800bcb2 <USBH_Get_DevDesc>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	f040 80e2 	bne.w	800ba92 <USBH_HandleEnum+0x282>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2202      	movs	r2, #2
 800b8d2:	705a      	strb	r2, [r3, #1]

    }
    break;
 800b8d4:	e0dd      	b.n	800ba92 <USBH_HandleEnum+0x282>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800b8d6:	2101      	movs	r1, #1
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f000 fa96 	bl	800be0a <USBH_SetAddress>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	f040 80d8 	bne.w	800ba96 <USBH_HandleEnum+0x286>
    {
      USBH_Delay(2U);
 800b8e6:	2002      	movs	r0, #2
 800b8e8:	f00a f827 	bl	801593a <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2201      	movs	r2, #1
 800b8f0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2203      	movs	r2, #3
 800b8f8:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	7919      	ldrb	r1, [r3, #4]
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800b90a:	687a      	ldr	r2, [r7, #4]
 800b90c:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800b90e:	b292      	uxth	r2, r2
 800b910:	9202      	str	r2, [sp, #8]
 800b912:	2200      	movs	r2, #0
 800b914:	9201      	str	r2, [sp, #4]
 800b916:	9300      	str	r3, [sp, #0]
 800b918:	4603      	mov	r3, r0
 800b91a:	2280      	movs	r2, #128	; 0x80
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f000 fff5 	bl	800c90c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	7959      	ldrb	r1, [r3, #5]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800b936:	b292      	uxth	r2, r2
 800b938:	9202      	str	r2, [sp, #8]
 800b93a:	2200      	movs	r2, #0
 800b93c:	9201      	str	r2, [sp, #4]
 800b93e:	9300      	str	r3, [sp, #0]
 800b940:	4603      	mov	r3, r0
 800b942:	2200      	movs	r2, #0
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f000 ffe1 	bl	800c90c <USBH_OpenPipe>
    }
    break;
 800b94a:	e0a4      	b.n	800ba96 <USBH_HandleEnum+0x286>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 800b94c:	2109      	movs	r1, #9
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f000 f9d7 	bl	800bd02 <USBH_Get_CfgDesc>
 800b954:	4603      	mov	r3, r0
 800b956:	2b00      	cmp	r3, #0
 800b958:	f040 809f 	bne.w	800ba9a <USBH_HandleEnum+0x28a>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2204      	movs	r2, #4
 800b960:	705a      	strb	r2, [r3, #1]
    }
    break;
 800b962:	e09a      	b.n	800ba9a <USBH_HandleEnum+0x28a>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 800b96a:	4619      	mov	r1, r3
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f000 f9c8 	bl	800bd02 <USBH_Get_CfgDesc>
 800b972:	4603      	mov	r3, r0
 800b974:	2b00      	cmp	r3, #0
 800b976:	f040 8092 	bne.w	800ba9e <USBH_HandleEnum+0x28e>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2205      	movs	r2, #5
 800b97e:	705a      	strb	r2, [r3, #1]
    }
    break;
 800b980:	e08d      	b.n	800ba9e <USBH_HandleEnum+0x28e>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d01e      	beq.n	800b9ca <USBH_HandleEnum+0x1ba>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800b998:	23ff      	movs	r3, #255	; 0xff
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f000 f9d5 	bl	800bd4a <USBH_Get_StringDesc>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d17d      	bne.n	800baa2 <USBH_HandleEnum+0x292>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2206      	movs	r2, #6
 800b9aa:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2205      	movs	r2, #5
 800b9b0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	4619      	mov	r1, r3
 800b9c4:	f004 fa10 	bl	800fde8 <osMessagePut>
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800b9c8:	e06b      	b.n	800baa2 <USBH_HandleEnum+0x292>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2206      	movs	r2, #6
 800b9ce:	705a      	strb	r2, [r3, #1]
     phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2205      	movs	r2, #5
 800b9d4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
     (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	4619      	mov	r1, r3
 800b9e8:	f004 f9fe 	bl	800fde8 <osMessagePut>
    break;
 800b9ec:	e059      	b.n	800baa2 <USBH_HandleEnum+0x292>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d010      	beq.n	800ba1a <USBH_HandleEnum+0x20a>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800ba04:	23ff      	movs	r3, #255	; 0xff
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f000 f99f 	bl	800bd4a <USBH_Get_StringDesc>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d149      	bne.n	800baa6 <USBH_HandleEnum+0x296>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2207      	movs	r2, #7
 800ba16:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800ba18:	e045      	b.n	800baa6 <USBH_HandleEnum+0x296>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2207      	movs	r2, #7
 800ba1e:	705a      	strb	r2, [r3, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2205      	movs	r2, #5
 800ba24:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ba34:	2200      	movs	r2, #0
 800ba36:	4619      	mov	r1, r3
 800ba38:	f004 f9d6 	bl	800fde8 <osMessagePut>
    break;
 800ba3c:	e033      	b.n	800baa6 <USBH_HandleEnum+0x296>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d00f      	beq.n	800ba68 <USBH_HandleEnum+0x258>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800ba54:	23ff      	movs	r3, #255	; 0xff
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f000 f977 	bl	800bd4a <USBH_Get_StringDesc>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d123      	bne.n	800baaa <USBH_HandleEnum+0x29a>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 800ba62:	2300      	movs	r3, #0
 800ba64:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800ba66:	e020      	b.n	800baaa <USBH_HandleEnum+0x29a>
      Status = USBH_OK;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2205      	movs	r2, #5
 800ba70:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ba80:	2200      	movs	r2, #0
 800ba82:	4619      	mov	r1, r3
 800ba84:	f004 f9b0 	bl	800fde8 <osMessagePut>
    break;
 800ba88:	e00f      	b.n	800baaa <USBH_HandleEnum+0x29a>

  default:
    break;
 800ba8a:	bf00      	nop
 800ba8c:	e00e      	b.n	800baac <USBH_HandleEnum+0x29c>
    break;
 800ba8e:	bf00      	nop
 800ba90:	e00c      	b.n	800baac <USBH_HandleEnum+0x29c>
    break;
 800ba92:	bf00      	nop
 800ba94:	e00a      	b.n	800baac <USBH_HandleEnum+0x29c>
    break;
 800ba96:	bf00      	nop
 800ba98:	e008      	b.n	800baac <USBH_HandleEnum+0x29c>
    break;
 800ba9a:	bf00      	nop
 800ba9c:	e006      	b.n	800baac <USBH_HandleEnum+0x29c>
    break;
 800ba9e:	bf00      	nop
 800baa0:	e004      	b.n	800baac <USBH_HandleEnum+0x29c>
    break;
 800baa2:	bf00      	nop
 800baa4:	e002      	b.n	800baac <USBH_HandleEnum+0x29c>
    break;
 800baa6:	bf00      	nop
 800baa8:	e000      	b.n	800baac <USBH_HandleEnum+0x29c>
    break;
 800baaa:	bf00      	nop
  }
  return Status;
 800baac:	7bfb      	ldrb	r3, [r7, #15]
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3710      	adds	r7, #16
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}
 800bab6:	bf00      	nop

0800bab8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 800bab8:	b480      	push	{r7}
 800baba:	b083      	sub	sp, #12
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	683a      	ldr	r2, [r7, #0]
 800bac6:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 800baca:	bf00      	nop
 800bacc:	370c      	adds	r7, #12
 800bace:	46bd      	mov	sp, r7
 800bad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad4:	4770      	bx	lr

0800bad6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800bad6:	b580      	push	{r7, lr}
 800bad8:	b082      	sub	sp, #8
 800bada:	af00      	add	r7, sp, #0
 800badc:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800bae4:	1c5a      	adds	r2, r3, #1
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f000 f804 	bl	800bafa <USBH_HandleSof>
}
 800baf2:	bf00      	nop
 800baf4:	3708      	adds	r7, #8
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}

0800bafa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800bafa:	b580      	push	{r7, lr}
 800bafc:	b082      	sub	sp, #8
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	781b      	ldrb	r3, [r3, #0]
 800bb06:	b2db      	uxtb	r3, r3
 800bb08:	2b0b      	cmp	r3, #11
 800bb0a:	d10a      	bne.n	800bb22 <USBH_HandleSof+0x28>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d005      	beq.n	800bb22 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800bb1c:	699b      	ldr	r3, [r3, #24]
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	4798      	blx	r3
  }
}
 800bb22:	bf00      	nop
 800bb24:	3708      	adds	r7, #8
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}

0800bb2a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 800bb2a:	b480      	push	{r7}
 800bb2c:	b083      	sub	sp, #12
 800bb2e:	af00      	add	r7, sp, #0
 800bb30:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2201      	movs	r2, #1
 800bb36:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800bb3a:	bf00      	nop
}
 800bb3c:	370c      	adds	r7, #12
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb44:	4770      	bx	lr

0800bb46 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 800bb46:	b480      	push	{r7}
 800bb48:	b083      	sub	sp, #12
 800bb4a:	af00      	add	r7, sp, #0
 800bb4c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2200      	movs	r2, #0
 800bb52:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800bb56:	bf00      	nop
}
 800bb58:	370c      	adds	r7, #12
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb60:	4770      	bx	lr

0800bb62 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 800bb62:	b480      	push	{r7}
 800bb64:	b083      	sub	sp, #12
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	370c      	adds	r7, #12
 800bb74:	46bd      	mov	sp, r7
 800bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7a:	4770      	bx	lr

0800bb7c <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b082      	sub	sp, #8
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	781b      	ldrb	r3, [r3, #0]
 800bb88:	b2db      	uxtb	r3, r3
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d10f      	bne.n	800bbae <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2201      	movs	r2, #1
 800bb92:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d00e      	beq.n	800bbbe <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bba6:	2104      	movs	r1, #4
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	4798      	blx	r3
 800bbac:	e007      	b.n	800bbbe <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800bbb4:	2b01      	cmp	r3, #1
 800bbb6:	d102      	bne.n	800bbbe <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2202      	movs	r2, #2
 800bbbc:	701a      	strb	r2, [r3, #0]
    }
  }

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2201      	movs	r2, #1
 800bbc2:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	4619      	mov	r1, r3
 800bbd6:	f004 f907 	bl	800fde8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800bbda:	2300      	movs	r3, #0
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	3708      	adds	r7, #8
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}

0800bbe4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b082      	sub	sp, #8
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f009 fd5a 	bl	80156a6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	791b      	ldrb	r3, [r3, #4]
 800bbf6:	4619      	mov	r1, r3
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f000 fed4 	bl	800c9a6 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	795b      	ldrb	r3, [r3, #5]
 800bc02:	4619      	mov	r1, r3
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f000 fece 	bl	800c9a6 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d005      	beq.n	800bc28 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bc22:	2105      	movs	r1, #5
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f009 fd21 	bl	8015670 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2203      	movs	r2, #3
 800bc32:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2201      	movs	r2, #1
 800bc38:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bc48:	2200      	movs	r2, #0
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	f004 f8cc 	bl	800fde8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800bc50:	2300      	movs	r3, #0
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3708      	adds	r7, #8
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}

0800bc5a <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800bc5a:	b580      	push	{r7, lr}
 800bc5c:	b086      	sub	sp, #24
 800bc5e:	af00      	add	r7, sp, #0
 800bc60:	6078      	str	r0, [r7, #4]
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f8d3 13cc 	ldr.w	r1, [r3, #972]	; 0x3cc
 800bc68:	f107 030c 	add.w	r3, r7, #12
 800bc6c:	f04f 32ff 	mov.w	r2, #4294967295
 800bc70:	4618      	mov	r0, r3
 800bc72:	f004 f8f9 	bl	800fe68 <osMessageGet>
    if(event.status == osEventMessage)
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	2b10      	cmp	r3, #16
 800bc7a:	d1f2      	bne.n	800bc62 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f7ff fbe7 	bl	800b450 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800bc82:	e7ee      	b.n	800bc62 <USBH_Process_OS+0x8>

0800bc84 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b082      	sub	sp, #8
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2201      	movs	r2, #1
 800bc90:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bca0:	2200      	movs	r2, #0
 800bca2:	4619      	mov	r1, r3
 800bca4:	f004 f8a0 	bl	800fde8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800bca8:	2300      	movs	r3, #0
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3708      	adds	r7, #8
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}

0800bcb2 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800bcb2:	b580      	push	{r7, lr}
 800bcb4:	b086      	sub	sp, #24
 800bcb6:	af02      	add	r7, sp, #8
 800bcb8:	6078      	str	r0, [r7, #4]
 800bcba:	460b      	mov	r3, r1
 800bcbc:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800bcc4:	78fb      	ldrb	r3, [r7, #3]
 800bcc6:	b29b      	uxth	r3, r3
 800bcc8:	9300      	str	r3, [sp, #0]
 800bcca:	4613      	mov	r3, r2
 800bccc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bcd0:	2100      	movs	r1, #0
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f000 f864 	bl	800bda0 <USBH_GetDescriptor>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	73fb      	strb	r3, [r7, #15]
 800bcdc:	7bfb      	ldrb	r3, [r7, #15]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d10a      	bne.n	800bcf8 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f203 3022 	addw	r0, r3, #802	; 0x322
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bcee:	78fa      	ldrb	r2, [r7, #3]
 800bcf0:	b292      	uxth	r2, r2
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	f000 f918 	bl	800bf28 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 800bcf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3710      	adds	r7, #16
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}

0800bd02 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 800bd02:	b580      	push	{r7, lr}
 800bd04:	b086      	sub	sp, #24
 800bd06:	af02      	add	r7, sp, #8
 800bd08:	6078      	str	r0, [r7, #4]
 800bd0a:	460b      	mov	r3, r1
 800bd0c:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	331c      	adds	r3, #28
 800bd12:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 800bd14:	887b      	ldrh	r3, [r7, #2]
 800bd16:	9300      	str	r3, [sp, #0]
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd1e:	2100      	movs	r1, #0
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f000 f83d 	bl	800bda0 <USBH_GetDescriptor>
 800bd26:	4603      	mov	r3, r0
 800bd28:	72fb      	strb	r3, [r7, #11]
 800bd2a:	7afb      	ldrb	r3, [r7, #11]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d107      	bne.n	800bd40 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800bd36:	887a      	ldrh	r2, [r7, #2]
 800bd38:	68f9      	ldr	r1, [r7, #12]
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f000 f964 	bl	800c008 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 800bd40:	7afb      	ldrb	r3, [r7, #11]
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3710      	adds	r7, #16
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}

0800bd4a <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 800bd4a:	b580      	push	{r7, lr}
 800bd4c:	b088      	sub	sp, #32
 800bd4e:	af02      	add	r7, sp, #8
 800bd50:	60f8      	str	r0, [r7, #12]
 800bd52:	607a      	str	r2, [r7, #4]
 800bd54:	461a      	mov	r2, r3
 800bd56:	460b      	mov	r3, r1
 800bd58:	72fb      	strb	r3, [r7, #11]
 800bd5a:	4613      	mov	r3, r2
 800bd5c:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 800bd5e:	7afb      	ldrb	r3, [r7, #11]
 800bd60:	b29b      	uxth	r3, r3
 800bd62:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800bd66:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800bd6e:	893b      	ldrh	r3, [r7, #8]
 800bd70:	9300      	str	r3, [sp, #0]
 800bd72:	460b      	mov	r3, r1
 800bd74:	2100      	movs	r1, #0
 800bd76:	68f8      	ldr	r0, [r7, #12]
 800bd78:	f000 f812 	bl	800bda0 <USBH_GetDescriptor>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	75fb      	strb	r3, [r7, #23]
 800bd80:	7dfb      	ldrb	r3, [r7, #23]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d107      	bne.n	800bd96 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bd8c:	893a      	ldrh	r2, [r7, #8]
 800bd8e:	6879      	ldr	r1, [r7, #4]
 800bd90:	4618      	mov	r0, r3
 800bd92:	f000 fa37 	bl	800c204 <USBH_ParseStringDesc>
  }
  return status;
 800bd96:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3718      	adds	r7, #24
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}

0800bda0 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b084      	sub	sp, #16
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	60f8      	str	r0, [r7, #12]
 800bda8:	607b      	str	r3, [r7, #4]
 800bdaa:	460b      	mov	r3, r1
 800bdac:	72fb      	strb	r3, [r7, #11]
 800bdae:	4613      	mov	r3, r2
 800bdb0:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	789b      	ldrb	r3, [r3, #2]
 800bdb6:	2b01      	cmp	r3, #1
 800bdb8:	d11c      	bne.n	800bdf4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800bdba:	7afb      	ldrb	r3, [r7, #11]
 800bdbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bdc0:	b2da      	uxtb	r2, r3
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	2206      	movs	r2, #6
 800bdca:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	893a      	ldrh	r2, [r7, #8]
 800bdd0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800bdd2:	893b      	ldrh	r3, [r7, #8]
 800bdd4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bdd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bddc:	d104      	bne.n	800bde8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	f240 4209 	movw	r2, #1033	; 0x409
 800bde4:	829a      	strh	r2, [r3, #20]
 800bde6:	e002      	b.n	800bdee <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	2200      	movs	r2, #0
 800bdec:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	8b3a      	ldrh	r2, [r7, #24]
 800bdf2:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 800bdf4:	8b3b      	ldrh	r3, [r7, #24]
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	6879      	ldr	r1, [r7, #4]
 800bdfa:	68f8      	ldr	r0, [r7, #12]
 800bdfc:	f000 fa50 	bl	800c2a0 <USBH_CtlReq>
 800be00:	4603      	mov	r3, r0
}
 800be02:	4618      	mov	r0, r3
 800be04:	3710      	adds	r7, #16
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}

0800be0a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800be0a:	b580      	push	{r7, lr}
 800be0c:	b082      	sub	sp, #8
 800be0e:	af00      	add	r7, sp, #0
 800be10:	6078      	str	r0, [r7, #4]
 800be12:	460b      	mov	r3, r1
 800be14:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	789b      	ldrb	r3, [r3, #2]
 800be1a:	2b01      	cmp	r3, #1
 800be1c:	d10f      	bne.n	800be3e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2200      	movs	r2, #0
 800be22:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2205      	movs	r2, #5
 800be28:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800be2a:	78fb      	ldrb	r3, [r7, #3]
 800be2c:	b29a      	uxth	r2, r3
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2200      	movs	r2, #0
 800be36:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2200      	movs	r2, #0
 800be3c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800be3e:	2200      	movs	r2, #0
 800be40:	2100      	movs	r1, #0
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f000 fa2c 	bl	800c2a0 <USBH_CtlReq>
 800be48:	4603      	mov	r3, r0
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3708      	adds	r7, #8
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}

0800be52 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800be52:	b580      	push	{r7, lr}
 800be54:	b082      	sub	sp, #8
 800be56:	af00      	add	r7, sp, #0
 800be58:	6078      	str	r0, [r7, #4]
 800be5a:	460b      	mov	r3, r1
 800be5c:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	789b      	ldrb	r3, [r3, #2]
 800be62:	2b01      	cmp	r3, #1
 800be64:	d10e      	bne.n	800be84 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2200      	movs	r2, #0
 800be6a:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2209      	movs	r2, #9
 800be70:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	887a      	ldrh	r2, [r7, #2]
 800be76:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2200      	movs	r2, #0
 800be7c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2200      	movs	r2, #0
 800be82:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 800be84:	2200      	movs	r2, #0
 800be86:	2100      	movs	r1, #0
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f000 fa09 	bl	800c2a0 <USBH_CtlReq>
 800be8e:	4603      	mov	r3, r0
}
 800be90:	4618      	mov	r0, r3
 800be92:	3708      	adds	r7, #8
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}

0800be98 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b082      	sub	sp, #8
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	460b      	mov	r3, r1
 800bea2:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	789b      	ldrb	r3, [r3, #2]
 800bea8:	2b01      	cmp	r3, #1
 800beaa:	d10f      	bne.n	800becc <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2200      	movs	r2, #0
 800beb0:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2203      	movs	r2, #3
 800beb6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800beb8:	78fb      	ldrb	r3, [r7, #3]
 800beba:	b29a      	uxth	r2, r3
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2200      	movs	r2, #0
 800bec4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2200      	movs	r2, #0
 800beca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800becc:	2200      	movs	r2, #0
 800bece:	2100      	movs	r1, #0
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f000 f9e5 	bl	800c2a0 <USBH_CtlReq>
 800bed6:	4603      	mov	r3, r0
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3708      	adds	r7, #8
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}

0800bee0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b082      	sub	sp, #8
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	460b      	mov	r3, r1
 800beea:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	789b      	ldrb	r3, [r3, #2]
 800bef0:	2b01      	cmp	r3, #1
 800bef2:	d10f      	bne.n	800bf14 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2202      	movs	r2, #2
 800bef8:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2201      	movs	r2, #1
 800befe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2200      	movs	r2, #0
 800bf04:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800bf06:	78fb      	ldrb	r3, [r7, #3]
 800bf08:	b29a      	uxth	r2, r3
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2200      	movs	r2, #0
 800bf12:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 800bf14:	2200      	movs	r2, #0
 800bf16:	2100      	movs	r1, #0
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f000 f9c1 	bl	800c2a0 <USBH_CtlReq>
 800bf1e:	4603      	mov	r3, r0
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	3708      	adds	r7, #8
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}

0800bf28 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b085      	sub	sp, #20
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	60f8      	str	r0, [r7, #12]
 800bf30:	60b9      	str	r1, [r7, #8]
 800bf32:	4613      	mov	r3, r2
 800bf34:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	781a      	ldrb	r2, [r3, #0]
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	785a      	ldrb	r2, [r3, #1]
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	3302      	adds	r3, #2
 800bf4a:	781b      	ldrb	r3, [r3, #0]
 800bf4c:	b29a      	uxth	r2, r3
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	3303      	adds	r3, #3
 800bf52:	781b      	ldrb	r3, [r3, #0]
 800bf54:	b29b      	uxth	r3, r3
 800bf56:	021b      	lsls	r3, r3, #8
 800bf58:	b29b      	uxth	r3, r3
 800bf5a:	4313      	orrs	r3, r2
 800bf5c:	b29a      	uxth	r2, r3
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	791a      	ldrb	r2, [r3, #4]
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	795a      	ldrb	r2, [r3, #5]
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	799a      	ldrb	r2, [r3, #6]
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	79da      	ldrb	r2, [r3, #7]
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800bf82:	88fb      	ldrh	r3, [r7, #6]
 800bf84:	2b08      	cmp	r3, #8
 800bf86:	d939      	bls.n	800bffc <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	3308      	adds	r3, #8
 800bf8c:	781b      	ldrb	r3, [r3, #0]
 800bf8e:	b29a      	uxth	r2, r3
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	3309      	adds	r3, #9
 800bf94:	781b      	ldrb	r3, [r3, #0]
 800bf96:	b29b      	uxth	r3, r3
 800bf98:	021b      	lsls	r3, r3, #8
 800bf9a:	b29b      	uxth	r3, r3
 800bf9c:	4313      	orrs	r3, r2
 800bf9e:	b29a      	uxth	r2, r3
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	330a      	adds	r3, #10
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	b29a      	uxth	r2, r3
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	330b      	adds	r3, #11
 800bfb0:	781b      	ldrb	r3, [r3, #0]
 800bfb2:	b29b      	uxth	r3, r3
 800bfb4:	021b      	lsls	r3, r3, #8
 800bfb6:	b29b      	uxth	r3, r3
 800bfb8:	4313      	orrs	r3, r2
 800bfba:	b29a      	uxth	r2, r3
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	330c      	adds	r3, #12
 800bfc4:	781b      	ldrb	r3, [r3, #0]
 800bfc6:	b29a      	uxth	r2, r3
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	330d      	adds	r3, #13
 800bfcc:	781b      	ldrb	r3, [r3, #0]
 800bfce:	b29b      	uxth	r3, r3
 800bfd0:	021b      	lsls	r3, r3, #8
 800bfd2:	b29b      	uxth	r3, r3
 800bfd4:	4313      	orrs	r3, r2
 800bfd6:	b29a      	uxth	r2, r3
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	7b9a      	ldrb	r2, [r3, #14]
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	7bda      	ldrb	r2, [r3, #15]
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	7c1a      	ldrb	r2, [r3, #16]
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	7c5a      	ldrb	r2, [r3, #17]
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	745a      	strb	r2, [r3, #17]
  }
}
 800bffc:	bf00      	nop
 800bffe:	3714      	adds	r7, #20
 800c000:	46bd      	mov	sp, r7
 800c002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c006:	4770      	bx	lr

0800c008 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b08a      	sub	sp, #40	; 0x28
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	60f8      	str	r0, [r7, #12]
 800c010:	60b9      	str	r1, [r7, #8]
 800c012:	4613      	mov	r3, r2
 800c014:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c01a:	2300      	movs	r3, #0
 800c01c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800c020:	2300      	movs	r3, #0
 800c022:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	781a      	ldrb	r2, [r3, #0]
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	785a      	ldrb	r2, [r3, #1]
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	3302      	adds	r3, #2
 800c03e:	781b      	ldrb	r3, [r3, #0]
 800c040:	b29a      	uxth	r2, r3
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	3303      	adds	r3, #3
 800c046:	781b      	ldrb	r3, [r3, #0]
 800c048:	b29b      	uxth	r3, r3
 800c04a:	021b      	lsls	r3, r3, #8
 800c04c:	b29b      	uxth	r3, r3
 800c04e:	4313      	orrs	r3, r2
 800c050:	b29a      	uxth	r2, r3
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	791a      	ldrb	r2, [r3, #4]
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	795a      	ldrb	r2, [r3, #5]
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	799a      	ldrb	r2, [r3, #6]
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	79da      	ldrb	r2, [r3, #7]
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	7a1a      	ldrb	r2, [r3, #8]
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c07e:	88fb      	ldrh	r3, [r7, #6]
 800c080:	2b09      	cmp	r3, #9
 800c082:	d95f      	bls.n	800c144 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800c084:	2309      	movs	r3, #9
 800c086:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800c088:	2300      	movs	r3, #0
 800c08a:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c08c:	e051      	b.n	800c132 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c08e:	f107 0316 	add.w	r3, r7, #22
 800c092:	4619      	mov	r1, r3
 800c094:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c096:	f000 f8e8 	bl	800c26a <USBH_GetNextDesc>
 800c09a:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800c09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c09e:	785b      	ldrb	r3, [r3, #1]
 800c0a0:	2b04      	cmp	r3, #4
 800c0a2:	d146      	bne.n	800c132 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800c0a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c0a8:	221a      	movs	r2, #26
 800c0aa:	fb02 f303 	mul.w	r3, r2, r3
 800c0ae:	3308      	adds	r3, #8
 800c0b0:	68fa      	ldr	r2, [r7, #12]
 800c0b2:	4413      	add	r3, r2
 800c0b4:	3302      	adds	r3, #2
 800c0b6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 800c0b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c0ba:	69f8      	ldr	r0, [r7, #28]
 800c0bc:	f000 f846 	bl	800c14c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c0ca:	e022      	b.n	800c112 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 800c0cc:	f107 0316 	add.w	r3, r7, #22
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c0d4:	f000 f8c9 	bl	800c26a <USBH_GetNextDesc>
 800c0d8:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800c0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0dc:	785b      	ldrb	r3, [r3, #1]
 800c0de:	2b05      	cmp	r3, #5
 800c0e0:	d117      	bne.n	800c112 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c0e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c0e6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800c0ea:	3201      	adds	r2, #1
 800c0ec:	00d2      	lsls	r2, r2, #3
 800c0ee:	211a      	movs	r1, #26
 800c0f0:	fb01 f303 	mul.w	r3, r1, r3
 800c0f4:	4413      	add	r3, r2
 800c0f6:	3308      	adds	r3, #8
 800c0f8:	68fa      	ldr	r2, [r7, #12]
 800c0fa:	4413      	add	r3, r2
 800c0fc:	3304      	adds	r3, #4
 800c0fe:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 800c100:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c102:	69b8      	ldr	r0, [r7, #24]
 800c104:	f000 f851 	bl	800c1aa <USBH_ParseEPDesc>
            ep_ix++;
 800c108:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c10c:	3301      	adds	r3, #1
 800c10e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c112:	69fb      	ldr	r3, [r7, #28]
 800c114:	791b      	ldrb	r3, [r3, #4]
 800c116:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d204      	bcs.n	800c128 <USBH_ParseCfgDesc+0x120>
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	885a      	ldrh	r2, [r3, #2]
 800c122:	8afb      	ldrh	r3, [r7, #22]
 800c124:	429a      	cmp	r2, r3
 800c126:	d8d1      	bhi.n	800c0cc <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800c128:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c12c:	3301      	adds	r3, #1
 800c12e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c132:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c136:	2b01      	cmp	r3, #1
 800c138:	d804      	bhi.n	800c144 <USBH_ParseCfgDesc+0x13c>
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	885a      	ldrh	r2, [r3, #2]
 800c13e:	8afb      	ldrh	r3, [r7, #22]
 800c140:	429a      	cmp	r2, r3
 800c142:	d8a4      	bhi.n	800c08e <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800c144:	bf00      	nop
 800c146:	3728      	adds	r7, #40	; 0x28
 800c148:	46bd      	mov	sp, r7
 800c14a:	bd80      	pop	{r7, pc}

0800c14c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 800c14c:	b480      	push	{r7}
 800c14e:	b083      	sub	sp, #12
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	781a      	ldrb	r2, [r3, #0]
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	785a      	ldrb	r2, [r3, #1]
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	789a      	ldrb	r2, [r3, #2]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	78da      	ldrb	r2, [r3, #3]
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	791a      	ldrb	r2, [r3, #4]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	795a      	ldrb	r2, [r3, #5]
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	799a      	ldrb	r2, [r3, #6]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	79da      	ldrb	r2, [r3, #7]
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	7a1a      	ldrb	r2, [r3, #8]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	721a      	strb	r2, [r3, #8]
}
 800c19e:	bf00      	nop
 800c1a0:	370c      	adds	r7, #12
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a8:	4770      	bx	lr

0800c1aa <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 800c1aa:	b480      	push	{r7}
 800c1ac:	b083      	sub	sp, #12
 800c1ae:	af00      	add	r7, sp, #0
 800c1b0:	6078      	str	r0, [r7, #4]
 800c1b2:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	781a      	ldrb	r2, [r3, #0]
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	785a      	ldrb	r2, [r3, #1]
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	789a      	ldrb	r2, [r3, #2]
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	78da      	ldrb	r2, [r3, #3]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	3304      	adds	r3, #4
 800c1d8:	781b      	ldrb	r3, [r3, #0]
 800c1da:	b29a      	uxth	r2, r3
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	3305      	adds	r3, #5
 800c1e0:	781b      	ldrb	r3, [r3, #0]
 800c1e2:	b29b      	uxth	r3, r3
 800c1e4:	021b      	lsls	r3, r3, #8
 800c1e6:	b29b      	uxth	r3, r3
 800c1e8:	4313      	orrs	r3, r2
 800c1ea:	b29a      	uxth	r2, r3
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	799a      	ldrb	r2, [r3, #6]
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	719a      	strb	r2, [r3, #6]
}
 800c1f8:	bf00      	nop
 800c1fa:	370c      	adds	r7, #12
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c202:	4770      	bx	lr

0800c204 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 800c204:	b480      	push	{r7}
 800c206:	b087      	sub	sp, #28
 800c208:	af00      	add	r7, sp, #0
 800c20a:	60f8      	str	r0, [r7, #12]
 800c20c:	60b9      	str	r1, [r7, #8]
 800c20e:	4613      	mov	r3, r2
 800c210:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	3301      	adds	r3, #1
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	2b03      	cmp	r3, #3
 800c21a:	d120      	bne.n	800c25e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	781b      	ldrb	r3, [r3, #0]
 800c220:	1e9a      	subs	r2, r3, #2
 800c222:	88fb      	ldrh	r3, [r7, #6]
 800c224:	4293      	cmp	r3, r2
 800c226:	bf28      	it	cs
 800c228:	4613      	movcs	r3, r2
 800c22a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	3302      	adds	r3, #2
 800c230:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c232:	2300      	movs	r3, #0
 800c234:	82fb      	strh	r3, [r7, #22]
 800c236:	e00b      	b.n	800c250 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c238:	8afb      	ldrh	r3, [r7, #22]
 800c23a:	68fa      	ldr	r2, [r7, #12]
 800c23c:	4413      	add	r3, r2
 800c23e:	781a      	ldrb	r2, [r3, #0]
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	3301      	adds	r3, #1
 800c248:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c24a:	8afb      	ldrh	r3, [r7, #22]
 800c24c:	3302      	adds	r3, #2
 800c24e:	82fb      	strh	r3, [r7, #22]
 800c250:	8afa      	ldrh	r2, [r7, #22]
 800c252:	8abb      	ldrh	r3, [r7, #20]
 800c254:	429a      	cmp	r2, r3
 800c256:	d3ef      	bcc.n	800c238 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	2200      	movs	r2, #0
 800c25c:	701a      	strb	r2, [r3, #0]
  }
}
 800c25e:	bf00      	nop
 800c260:	371c      	adds	r7, #28
 800c262:	46bd      	mov	sp, r7
 800c264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c268:	4770      	bx	lr

0800c26a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800c26a:	b480      	push	{r7}
 800c26c:	b085      	sub	sp, #20
 800c26e:	af00      	add	r7, sp, #0
 800c270:	6078      	str	r0, [r7, #4]
 800c272:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	881a      	ldrh	r2, [r3, #0]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	781b      	ldrb	r3, [r3, #0]
 800c27c:	b29b      	uxth	r3, r3
 800c27e:	4413      	add	r3, r2
 800c280:	b29a      	uxth	r2, r3
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	781b      	ldrb	r3, [r3, #0]
 800c28a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	4413      	add	r3, r2
 800c290:	60fb      	str	r3, [r7, #12]

  return(pnext);
 800c292:	68fb      	ldr	r3, [r7, #12]
}
 800c294:	4618      	mov	r0, r3
 800c296:	3714      	adds	r7, #20
 800c298:	46bd      	mov	sp, r7
 800c29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29e:	4770      	bx	lr

0800c2a0 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b086      	sub	sp, #24
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	60f8      	str	r0, [r7, #12]
 800c2a8:	60b9      	str	r1, [r7, #8]
 800c2aa:	4613      	mov	r3, r2
 800c2ac:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	789b      	ldrb	r3, [r3, #2]
 800c2b6:	2b01      	cmp	r3, #1
 800c2b8:	d002      	beq.n	800c2c0 <USBH_CtlReq+0x20>
 800c2ba:	2b02      	cmp	r3, #2
 800c2bc:	d01d      	beq.n	800c2fa <USBH_CtlReq+0x5a>
      }
    }
    break;

  default:
    break;
 800c2be:	e042      	b.n	800c346 <USBH_CtlReq+0xa6>
    phost->Control.buff = buff;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	68ba      	ldr	r2, [r7, #8]
 800c2c4:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	88fa      	ldrh	r2, [r7, #6]
 800c2ca:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	2202      	movs	r2, #2
 800c2d6:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 800c2d8:	2301      	movs	r3, #1
 800c2da:	75fb      	strb	r3, [r7, #23]
    phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2203      	movs	r2, #3
 800c2e0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	4619      	mov	r1, r3
 800c2f4:	f003 fd78 	bl	800fde8 <osMessagePut>
    break;
 800c2f8:	e025      	b.n	800c346 <USBH_CtlReq+0xa6>
    status = USBH_HandleControl(phost);
 800c2fa:	68f8      	ldr	r0, [r7, #12]
 800c2fc:	f000 f828 	bl	800c350 <USBH_HandleControl>
 800c300:	4603      	mov	r3, r0
 800c302:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 800c304:	7dfb      	ldrb	r3, [r7, #23]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d108      	bne.n	800c31c <USBH_CtlReq+0x7c>
      phost->RequestState = CMD_SEND;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	2201      	movs	r2, #1
 800c30e:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	2200      	movs	r2, #0
 800c314:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800c316:	2300      	movs	r3, #0
 800c318:	75fb      	strb	r3, [r7, #23]
    break;
 800c31a:	e013      	b.n	800c344 <USBH_CtlReq+0xa4>
    else if (status == USBH_NOT_SUPPORTED)
 800c31c:	7dfb      	ldrb	r3, [r7, #23]
 800c31e:	2b03      	cmp	r3, #3
 800c320:	d108      	bne.n	800c334 <USBH_CtlReq+0x94>
      phost->RequestState = CMD_SEND;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	2201      	movs	r2, #1
 800c326:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	2200      	movs	r2, #0
 800c32c:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800c32e:	2303      	movs	r3, #3
 800c330:	75fb      	strb	r3, [r7, #23]
    break;
 800c332:	e007      	b.n	800c344 <USBH_CtlReq+0xa4>
      if (status == USBH_FAIL)
 800c334:	7dfb      	ldrb	r3, [r7, #23]
 800c336:	2b02      	cmp	r3, #2
 800c338:	d104      	bne.n	800c344 <USBH_CtlReq+0xa4>
        phost->RequestState = CMD_SEND;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	2201      	movs	r2, #1
 800c33e:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800c340:	2302      	movs	r3, #2
 800c342:	75fb      	strb	r3, [r7, #23]
    break;
 800c344:	bf00      	nop
  }
  return status;
 800c346:	7dfb      	ldrb	r3, [r7, #23]
}
 800c348:	4618      	mov	r0, r3
 800c34a:	3718      	adds	r7, #24
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}

0800c350 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b086      	sub	sp, #24
 800c354:	af02      	add	r7, sp, #8
 800c356:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c358:	2301      	movs	r3, #1
 800c35a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c35c:	2300      	movs	r3, #0
 800c35e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	7e1b      	ldrb	r3, [r3, #24]
 800c364:	3b01      	subs	r3, #1
 800c366:	2b0a      	cmp	r3, #10
 800c368:	f200 821f 	bhi.w	800c7aa <USBH_HandleControl+0x45a>
 800c36c:	a201      	add	r2, pc, #4	; (adr r2, 800c374 <USBH_HandleControl+0x24>)
 800c36e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c372:	bf00      	nop
 800c374:	0800c3a1 	.word	0x0800c3a1
 800c378:	0800c3bb 	.word	0x0800c3bb
 800c37c:	0800c45d 	.word	0x0800c45d
 800c380:	0800c483 	.word	0x0800c483
 800c384:	0800c50f 	.word	0x0800c50f
 800c388:	0800c53b 	.word	0x0800c53b
 800c38c:	0800c5fd 	.word	0x0800c5fd
 800c390:	0800c61f 	.word	0x0800c61f
 800c394:	0800c6b1 	.word	0x0800c6b1
 800c398:	0800c6d9 	.word	0x0800c6d9
 800c39c:	0800c76b 	.word	0x0800c76b
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f103 0110 	add.w	r1, r3, #16
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	795b      	ldrb	r3, [r3, #5]
 800c3aa:	461a      	mov	r2, r3
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f000 fa0d 	bl	800c7cc <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2202      	movs	r2, #2
 800c3b6:	761a      	strb	r2, [r3, #24]
    break;
 800c3b8:	e202      	b.n	800c7c0 <USBH_HandleControl+0x470>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	795b      	ldrb	r3, [r3, #5]
 800c3be:	4619      	mov	r1, r3
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f009 fa5d 	bl	8015880 <USBH_LL_GetURBState>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800c3ca:	7bbb      	ldrb	r3, [r7, #14]
 800c3cc:	2b01      	cmp	r3, #1
 800c3ce:	d12c      	bne.n	800c42a <USBH_HandleControl+0xda>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	7c1b      	ldrb	r3, [r3, #16]
 800c3d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c3d8:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	8adb      	ldrh	r3, [r3, #22]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d00a      	beq.n	800c3f8 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 800c3e2:	7b7b      	ldrb	r3, [r7, #13]
 800c3e4:	2b80      	cmp	r3, #128	; 0x80
 800c3e6:	d103      	bne.n	800c3f0 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2203      	movs	r2, #3
 800c3ec:	761a      	strb	r2, [r3, #24]
 800c3ee:	e00d      	b.n	800c40c <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2205      	movs	r2, #5
 800c3f4:	761a      	strb	r2, [r3, #24]
 800c3f6:	e009      	b.n	800c40c <USBH_HandleControl+0xbc>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 800c3f8:	7b7b      	ldrb	r3, [r7, #13]
 800c3fa:	2b80      	cmp	r3, #128	; 0x80
 800c3fc:	d103      	bne.n	800c406 <USBH_HandleControl+0xb6>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2209      	movs	r2, #9
 800c402:	761a      	strb	r2, [r3, #24]
 800c404:	e002      	b.n	800c40c <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2207      	movs	r2, #7
 800c40a:	761a      	strb	r2, [r3, #24]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2203      	movs	r2, #3
 800c410:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c420:	2200      	movs	r2, #0
 800c422:	4619      	mov	r1, r3
 800c424:	f003 fce0 	bl	800fde8 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800c428:	e1c1      	b.n	800c7ae <USBH_HandleControl+0x45e>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c42a:	7bbb      	ldrb	r3, [r7, #14]
 800c42c:	2b04      	cmp	r3, #4
 800c42e:	d003      	beq.n	800c438 <USBH_HandleControl+0xe8>
 800c430:	7bbb      	ldrb	r3, [r7, #14]
 800c432:	2b02      	cmp	r3, #2
 800c434:	f040 81bb 	bne.w	800c7ae <USBH_HandleControl+0x45e>
        phost->Control.state = CTRL_ERROR;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	220b      	movs	r2, #11
 800c43c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2203      	movs	r2, #3
 800c442:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c452:	2200      	movs	r2, #0
 800c454:	4619      	mov	r1, r3
 800c456:	f003 fcc7 	bl	800fde8 <osMessagePut>
    break;
 800c45a:	e1a8      	b.n	800c7ae <USBH_HandleControl+0x45e>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800c462:	b29a      	uxth	r2, r3
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6899      	ldr	r1, [r3, #8]
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	899a      	ldrh	r2, [r3, #12]
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	791b      	ldrb	r3, [r3, #4]
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f000 f9e8 	bl	800c84a <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2204      	movs	r2, #4
 800c47e:	761a      	strb	r2, [r3, #24]
    break;
 800c480:	e19e      	b.n	800c7c0 <USBH_HandleControl+0x470>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	791b      	ldrb	r3, [r3, #4]
 800c486:	4619      	mov	r1, r3
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	f009 f9f9 	bl	8015880 <USBH_LL_GetURBState>
 800c48e:	4603      	mov	r3, r0
 800c490:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800c492:	7bbb      	ldrb	r3, [r7, #14]
 800c494:	2b01      	cmp	r3, #1
 800c496:	d110      	bne.n	800c4ba <USBH_HandleControl+0x16a>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2209      	movs	r2, #9
 800c49c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2203      	movs	r2, #3
 800c4a2:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	4619      	mov	r1, r3
 800c4b6:	f003 fc97 	bl	800fde8 <osMessagePut>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800c4ba:	7bbb      	ldrb	r3, [r7, #14]
 800c4bc:	2b05      	cmp	r3, #5
 800c4be:	d110      	bne.n	800c4e2 <USBH_HandleControl+0x192>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 800c4c0:	2303      	movs	r3, #3
 800c4c2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2203      	movs	r2, #3
 800c4c8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c4d8:	2200      	movs	r2, #0
 800c4da:	4619      	mov	r1, r3
 800c4dc:	f003 fc84 	bl	800fde8 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800c4e0:	e167      	b.n	800c7b2 <USBH_HandleControl+0x462>
      if (URB_Status == USBH_URB_ERROR)
 800c4e2:	7bbb      	ldrb	r3, [r7, #14]
 800c4e4:	2b04      	cmp	r3, #4
 800c4e6:	f040 8164 	bne.w	800c7b2 <USBH_HandleControl+0x462>
        phost->Control.state = CTRL_ERROR;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	220b      	movs	r2, #11
 800c4ee:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2203      	movs	r2, #3
 800c4f4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c504:	2200      	movs	r2, #0
 800c506:	4619      	mov	r1, r3
 800c508:	f003 fc6e 	bl	800fde8 <osMessagePut>
    break;
 800c50c:	e151      	b.n	800c7b2 <USBH_HandleControl+0x462>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6899      	ldr	r1, [r3, #8]
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	899a      	ldrh	r2, [r3, #12]
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	7958      	ldrb	r0, [r3, #5]
 800c51a:	2301      	movs	r3, #1
 800c51c:	9300      	str	r3, [sp, #0]
 800c51e:	4603      	mov	r3, r0
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f000 f96d 	bl	800c800 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800c52c:	b29a      	uxth	r2, r3
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2206      	movs	r2, #6
 800c536:	761a      	strb	r2, [r3, #24]
    break;
 800c538:	e142      	b.n	800c7c0 <USBH_HandleControl+0x470>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	795b      	ldrb	r3, [r3, #5]
 800c53e:	4619      	mov	r1, r3
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f009 f99d 	bl	8015880 <USBH_LL_GetURBState>
 800c546:	4603      	mov	r3, r0
 800c548:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 800c54a:	7bbb      	ldrb	r3, [r7, #14]
 800c54c:	2b01      	cmp	r3, #1
 800c54e:	d111      	bne.n	800c574 <USBH_HandleControl+0x224>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2207      	movs	r2, #7
 800c554:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2203      	movs	r2, #3
 800c55a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c56a:	2200      	movs	r2, #0
 800c56c:	4619      	mov	r1, r3
 800c56e:	f003 fc3b 	bl	800fde8 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800c572:	e120      	b.n	800c7b6 <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_STALL)
 800c574:	7bbb      	ldrb	r3, [r7, #14]
 800c576:	2b05      	cmp	r3, #5
 800c578:	d113      	bne.n	800c5a2 <USBH_HandleControl+0x252>
      phost->Control.state = CTRL_STALLED;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	220c      	movs	r2, #12
 800c57e:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800c580:	2303      	movs	r3, #3
 800c582:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2203      	movs	r2, #3
 800c588:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c598:	2200      	movs	r2, #0
 800c59a:	4619      	mov	r1, r3
 800c59c:	f003 fc24 	bl	800fde8 <osMessagePut>
    break;
 800c5a0:	e109      	b.n	800c7b6 <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800c5a2:	7bbb      	ldrb	r3, [r7, #14]
 800c5a4:	2b02      	cmp	r3, #2
 800c5a6:	d111      	bne.n	800c5cc <USBH_HandleControl+0x27c>
      phost->Control.state = CTRL_DATA_OUT;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2205      	movs	r2, #5
 800c5ac:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2203      	movs	r2, #3
 800c5b2:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	4619      	mov	r1, r3
 800c5c6:	f003 fc0f 	bl	800fde8 <osMessagePut>
    break;
 800c5ca:	e0f4      	b.n	800c7b6 <USBH_HandleControl+0x466>
      if (URB_Status == USBH_URB_ERROR)
 800c5cc:	7bbb      	ldrb	r3, [r7, #14]
 800c5ce:	2b04      	cmp	r3, #4
 800c5d0:	f040 80f1 	bne.w	800c7b6 <USBH_HandleControl+0x466>
        phost->Control.state = CTRL_ERROR;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	220b      	movs	r2, #11
 800c5d8:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 800c5da:	2302      	movs	r3, #2
 800c5dc:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2203      	movs	r2, #3
 800c5e2:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	4619      	mov	r1, r3
 800c5f6:	f003 fbf7 	bl	800fde8 <osMessagePut>
    break;
 800c5fa:	e0dc      	b.n	800c7b6 <USBH_HandleControl+0x466>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	791b      	ldrb	r3, [r3, #4]
 800c600:	2200      	movs	r2, #0
 800c602:	2100      	movs	r1, #0
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f000 f920 	bl	800c84a <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800c610:	b29a      	uxth	r2, r3
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2208      	movs	r2, #8
 800c61a:	761a      	strb	r2, [r3, #24]

    break;
 800c61c:	e0d0      	b.n	800c7c0 <USBH_HandleControl+0x470>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	791b      	ldrb	r3, [r3, #4]
 800c622:	4619      	mov	r1, r3
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f009 f92b 	bl	8015880 <USBH_LL_GetURBState>
 800c62a:	4603      	mov	r3, r0
 800c62c:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 800c62e:	7bbb      	ldrb	r3, [r7, #14]
 800c630:	2b01      	cmp	r3, #1
 800c632:	d113      	bne.n	800c65c <USBH_HandleControl+0x30c>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	220d      	movs	r2, #13
 800c638:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800c63a:	2300      	movs	r3, #0
 800c63c:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2203      	movs	r2, #3
 800c642:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c652:	2200      	movs	r2, #0
 800c654:	4619      	mov	r1, r3
 800c656:	f003 fbc7 	bl	800fde8 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800c65a:	e0ae      	b.n	800c7ba <USBH_HandleControl+0x46a>
    else if (URB_Status == USBH_URB_ERROR)
 800c65c:	7bbb      	ldrb	r3, [r7, #14]
 800c65e:	2b04      	cmp	r3, #4
 800c660:	d111      	bne.n	800c686 <USBH_HandleControl+0x336>
      phost->Control.state = CTRL_ERROR;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	220b      	movs	r2, #11
 800c666:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2203      	movs	r2, #3
 800c66c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c67c:	2200      	movs	r2, #0
 800c67e:	4619      	mov	r1, r3
 800c680:	f003 fbb2 	bl	800fde8 <osMessagePut>
    break;
 800c684:	e099      	b.n	800c7ba <USBH_HandleControl+0x46a>
      if(URB_Status == USBH_URB_STALL)
 800c686:	7bbb      	ldrb	r3, [r7, #14]
 800c688:	2b05      	cmp	r3, #5
 800c68a:	f040 8096 	bne.w	800c7ba <USBH_HandleControl+0x46a>
        status = USBH_NOT_SUPPORTED;
 800c68e:	2303      	movs	r3, #3
 800c690:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2203      	movs	r2, #3
 800c696:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	4619      	mov	r1, r3
 800c6aa:	f003 fb9d 	bl	800fde8 <osMessagePut>
    break;
 800c6ae:	e084      	b.n	800c7ba <USBH_HandleControl+0x46a>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	795a      	ldrb	r2, [r3, #5]
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	9300      	str	r3, [sp, #0]
 800c6b8:	4613      	mov	r3, r2
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	2100      	movs	r1, #0
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f000 f89e 	bl	800c800 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800c6ca:	b29a      	uxth	r2, r3
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	220a      	movs	r2, #10
 800c6d4:	761a      	strb	r2, [r3, #24]
    break;
 800c6d6:	e073      	b.n	800c7c0 <USBH_HandleControl+0x470>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	795b      	ldrb	r3, [r3, #5]
 800c6dc:	4619      	mov	r1, r3
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f009 f8ce 	bl	8015880 <USBH_LL_GetURBState>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800c6e8:	7bbb      	ldrb	r3, [r7, #14]
 800c6ea:	2b01      	cmp	r3, #1
 800c6ec:	d113      	bne.n	800c716 <USBH_HandleControl+0x3c6>
    {
      status = USBH_OK;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	220d      	movs	r2, #13
 800c6f6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2203      	movs	r2, #3
 800c6fc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c70c:	2200      	movs	r2, #0
 800c70e:	4619      	mov	r1, r3
 800c710:	f003 fb6a 	bl	800fde8 <osMessagePut>
#endif
#endif
      }

    }
    break;
 800c714:	e053      	b.n	800c7be <USBH_HandleControl+0x46e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800c716:	7bbb      	ldrb	r3, [r7, #14]
 800c718:	2b02      	cmp	r3, #2
 800c71a:	d111      	bne.n	800c740 <USBH_HandleControl+0x3f0>
      phost->Control.state = CTRL_STATUS_OUT;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2209      	movs	r2, #9
 800c720:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2203      	movs	r2, #3
 800c726:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c736:	2200      	movs	r2, #0
 800c738:	4619      	mov	r1, r3
 800c73a:	f003 fb55 	bl	800fde8 <osMessagePut>
    break;
 800c73e:	e03e      	b.n	800c7be <USBH_HandleControl+0x46e>
      if (URB_Status == USBH_URB_ERROR)
 800c740:	7bbb      	ldrb	r3, [r7, #14]
 800c742:	2b04      	cmp	r3, #4
 800c744:	d13b      	bne.n	800c7be <USBH_HandleControl+0x46e>
        phost->Control.state = CTRL_ERROR;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	220b      	movs	r2, #11
 800c74a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2203      	movs	r2, #3
 800c750:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c760:	2200      	movs	r2, #0
 800c762:	4619      	mov	r1, r3
 800c764:	f003 fb40 	bl	800fde8 <osMessagePut>
    break;
 800c768:	e029      	b.n	800c7be <USBH_HandleControl+0x46e>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	7e5b      	ldrb	r3, [r3, #25]
 800c76e:	3301      	adds	r3, #1
 800c770:	b2da      	uxtb	r2, r3
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	765a      	strb	r2, [r3, #25]
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	7e5b      	ldrb	r3, [r3, #25]
 800c77a:	2b02      	cmp	r3, #2
 800c77c:	d809      	bhi.n	800c792 <USBH_HandleControl+0x442>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f008 ff91 	bl	80156a6 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2201      	movs	r2, #1
 800c788:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2201      	movs	r2, #1
 800c78e:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 800c790:	e016      	b.n	800c7c0 <USBH_HandleControl+0x470>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c798:	2106      	movs	r1, #6
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 800c7a4:	2302      	movs	r3, #2
 800c7a6:	73fb      	strb	r3, [r7, #15]
    break;
 800c7a8:	e00a      	b.n	800c7c0 <USBH_HandleControl+0x470>

  default:
    break;
 800c7aa:	bf00      	nop
 800c7ac:	e008      	b.n	800c7c0 <USBH_HandleControl+0x470>
    break;
 800c7ae:	bf00      	nop
 800c7b0:	e006      	b.n	800c7c0 <USBH_HandleControl+0x470>
    break;
 800c7b2:	bf00      	nop
 800c7b4:	e004      	b.n	800c7c0 <USBH_HandleControl+0x470>
    break;
 800c7b6:	bf00      	nop
 800c7b8:	e002      	b.n	800c7c0 <USBH_HandleControl+0x470>
    break;
 800c7ba:	bf00      	nop
 800c7bc:	e000      	b.n	800c7c0 <USBH_HandleControl+0x470>
    break;
 800c7be:	bf00      	nop
  }
  return status;
 800c7c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3710      	adds	r7, #16
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}
 800c7ca:	bf00      	nop

0800c7cc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b088      	sub	sp, #32
 800c7d0:	af04      	add	r7, sp, #16
 800c7d2:	60f8      	str	r0, [r7, #12]
 800c7d4:	60b9      	str	r1, [r7, #8]
 800c7d6:	4613      	mov	r3, r2
 800c7d8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800c7da:	79f9      	ldrb	r1, [r7, #7]
 800c7dc:	2300      	movs	r3, #0
 800c7de:	9303      	str	r3, [sp, #12]
 800c7e0:	2308      	movs	r3, #8
 800c7e2:	9302      	str	r3, [sp, #8]
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	9301      	str	r3, [sp, #4]
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	9300      	str	r3, [sp, #0]
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	68f8      	ldr	r0, [r7, #12]
 800c7f2:	f009 f814 	bl	801581e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800c7f6:	2300      	movs	r3, #0
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3710      	adds	r7, #16
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}

0800c800 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b088      	sub	sp, #32
 800c804:	af04      	add	r7, sp, #16
 800c806:	60f8      	str	r0, [r7, #12]
 800c808:	60b9      	str	r1, [r7, #8]
 800c80a:	4611      	mov	r1, r2
 800c80c:	461a      	mov	r2, r3
 800c80e:	460b      	mov	r3, r1
 800c810:	80fb      	strh	r3, [r7, #6]
 800c812:	4613      	mov	r3, r2
 800c814:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d001      	beq.n	800c824 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c820:	2300      	movs	r3, #0
 800c822:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800c824:	7979      	ldrb	r1, [r7, #5]
 800c826:	7e3b      	ldrb	r3, [r7, #24]
 800c828:	9303      	str	r3, [sp, #12]
 800c82a:	88fb      	ldrh	r3, [r7, #6]
 800c82c:	9302      	str	r3, [sp, #8]
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	9301      	str	r3, [sp, #4]
 800c832:	2301      	movs	r3, #1
 800c834:	9300      	str	r3, [sp, #0]
 800c836:	2300      	movs	r3, #0
 800c838:	2200      	movs	r2, #0
 800c83a:	68f8      	ldr	r0, [r7, #12]
 800c83c:	f008 ffef 	bl	801581e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c840:	2300      	movs	r3, #0
}
 800c842:	4618      	mov	r0, r3
 800c844:	3710      	adds	r7, #16
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}

0800c84a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800c84a:	b580      	push	{r7, lr}
 800c84c:	b088      	sub	sp, #32
 800c84e:	af04      	add	r7, sp, #16
 800c850:	60f8      	str	r0, [r7, #12]
 800c852:	60b9      	str	r1, [r7, #8]
 800c854:	4611      	mov	r1, r2
 800c856:	461a      	mov	r2, r3
 800c858:	460b      	mov	r3, r1
 800c85a:	80fb      	strh	r3, [r7, #6]
 800c85c:	4613      	mov	r3, r2
 800c85e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800c860:	7979      	ldrb	r1, [r7, #5]
 800c862:	2300      	movs	r3, #0
 800c864:	9303      	str	r3, [sp, #12]
 800c866:	88fb      	ldrh	r3, [r7, #6]
 800c868:	9302      	str	r3, [sp, #8]
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	9301      	str	r3, [sp, #4]
 800c86e:	2301      	movs	r3, #1
 800c870:	9300      	str	r3, [sp, #0]
 800c872:	2300      	movs	r3, #0
 800c874:	2201      	movs	r2, #1
 800c876:	68f8      	ldr	r0, [r7, #12]
 800c878:	f008 ffd1 	bl	801581e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c87c:	2300      	movs	r3, #0

}
 800c87e:	4618      	mov	r0, r3
 800c880:	3710      	adds	r7, #16
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}

0800c886 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 800c886:	b580      	push	{r7, lr}
 800c888:	b088      	sub	sp, #32
 800c88a:	af04      	add	r7, sp, #16
 800c88c:	60f8      	str	r0, [r7, #12]
 800c88e:	60b9      	str	r1, [r7, #8]
 800c890:	4611      	mov	r1, r2
 800c892:	461a      	mov	r2, r3
 800c894:	460b      	mov	r3, r1
 800c896:	80fb      	strh	r3, [r7, #6]
 800c898:	4613      	mov	r3, r2
 800c89a:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d001      	beq.n	800c8aa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800c8aa:	7979      	ldrb	r1, [r7, #5]
 800c8ac:	7e3b      	ldrb	r3, [r7, #24]
 800c8ae:	9303      	str	r3, [sp, #12]
 800c8b0:	88fb      	ldrh	r3, [r7, #6]
 800c8b2:	9302      	str	r3, [sp, #8]
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	9301      	str	r3, [sp, #4]
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	9300      	str	r3, [sp, #0]
 800c8bc:	2302      	movs	r3, #2
 800c8be:	2200      	movs	r2, #0
 800c8c0:	68f8      	ldr	r0, [r7, #12]
 800c8c2:	f008 ffac 	bl	801581e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c8c6:	2300      	movs	r3, #0
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3710      	adds	r7, #16
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}

0800c8d0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b088      	sub	sp, #32
 800c8d4:	af04      	add	r7, sp, #16
 800c8d6:	60f8      	str	r0, [r7, #12]
 800c8d8:	60b9      	str	r1, [r7, #8]
 800c8da:	4611      	mov	r1, r2
 800c8dc:	461a      	mov	r2, r3
 800c8de:	460b      	mov	r3, r1
 800c8e0:	80fb      	strh	r3, [r7, #6]
 800c8e2:	4613      	mov	r3, r2
 800c8e4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800c8e6:	7979      	ldrb	r1, [r7, #5]
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	9303      	str	r3, [sp, #12]
 800c8ec:	88fb      	ldrh	r3, [r7, #6]
 800c8ee:	9302      	str	r3, [sp, #8]
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	9301      	str	r3, [sp, #4]
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	9300      	str	r3, [sp, #0]
 800c8f8:	2302      	movs	r3, #2
 800c8fa:	2201      	movs	r2, #1
 800c8fc:	68f8      	ldr	r0, [r7, #12]
 800c8fe:	f008 ff8e 	bl	801581e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c902:	2300      	movs	r3, #0
}
 800c904:	4618      	mov	r0, r3
 800c906:	3710      	adds	r7, #16
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}

0800c90c <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b086      	sub	sp, #24
 800c910:	af04      	add	r7, sp, #16
 800c912:	6078      	str	r0, [r7, #4]
 800c914:	4608      	mov	r0, r1
 800c916:	4611      	mov	r1, r2
 800c918:	461a      	mov	r2, r3
 800c91a:	4603      	mov	r3, r0
 800c91c:	70fb      	strb	r3, [r7, #3]
 800c91e:	460b      	mov	r3, r1
 800c920:	70bb      	strb	r3, [r7, #2]
 800c922:	4613      	mov	r3, r2
 800c924:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800c926:	7878      	ldrb	r0, [r7, #1]
 800c928:	78ba      	ldrb	r2, [r7, #2]
 800c92a:	78f9      	ldrb	r1, [r7, #3]
 800c92c:	8b3b      	ldrh	r3, [r7, #24]
 800c92e:	9302      	str	r3, [sp, #8]
 800c930:	7d3b      	ldrb	r3, [r7, #20]
 800c932:	9301      	str	r3, [sp, #4]
 800c934:	7c3b      	ldrb	r3, [r7, #16]
 800c936:	9300      	str	r3, [sp, #0]
 800c938:	4603      	mov	r3, r0
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f008 ff21 	bl	8015782 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 800c940:	2300      	movs	r3, #0

}
 800c942:	4618      	mov	r0, r3
 800c944:	3708      	adds	r7, #8
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}

0800c94a <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800c94a:	b580      	push	{r7, lr}
 800c94c:	b082      	sub	sp, #8
 800c94e:	af00      	add	r7, sp, #0
 800c950:	6078      	str	r0, [r7, #4]
 800c952:	460b      	mov	r3, r1
 800c954:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 800c956:	78fb      	ldrb	r3, [r7, #3]
 800c958:	4619      	mov	r1, r3
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f008 ff40 	bl	80157e0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800c960:	2300      	movs	r3, #0

}
 800c962:	4618      	mov	r0, r3
 800c964:	3708      	adds	r7, #8
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}

0800c96a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c96a:	b580      	push	{r7, lr}
 800c96c:	b084      	sub	sp, #16
 800c96e:	af00      	add	r7, sp, #0
 800c970:	6078      	str	r0, [r7, #4]
 800c972:	460b      	mov	r3, r1
 800c974:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f000 f831 	bl	800c9de <USBH_GetFreePipe>
 800c97c:	4603      	mov	r3, r0
 800c97e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c980:	89fb      	ldrh	r3, [r7, #14]
 800c982:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c986:	4293      	cmp	r3, r2
 800c988:	d007      	beq.n	800c99a <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800c98a:	78fb      	ldrb	r3, [r7, #3]
 800c98c:	89fa      	ldrh	r2, [r7, #14]
 800c98e:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	32e0      	adds	r2, #224	; 0xe0
 800c996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 800c99a:	89fb      	ldrh	r3, [r7, #14]
 800c99c:	b2db      	uxtb	r3, r3
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3710      	adds	r7, #16
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}

0800c9a6 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c9a6:	b480      	push	{r7}
 800c9a8:	b083      	sub	sp, #12
 800c9aa:	af00      	add	r7, sp, #0
 800c9ac:	6078      	str	r0, [r7, #4]
 800c9ae:	460b      	mov	r3, r1
 800c9b0:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 800c9b2:	78fb      	ldrb	r3, [r7, #3]
 800c9b4:	2b0a      	cmp	r3, #10
 800c9b6:	d80b      	bhi.n	800c9d0 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 800c9b8:	78fa      	ldrb	r2, [r7, #3]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	32e0      	adds	r2, #224	; 0xe0
 800c9be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9c2:	78fa      	ldrb	r2, [r7, #3]
 800c9c4:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	32e0      	adds	r2, #224	; 0xe0
 800c9cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 800c9d0:	2300      	movs	r3, #0
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	370c      	adds	r7, #12
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9dc:	4770      	bx	lr

0800c9de <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 800c9de:	b480      	push	{r7}
 800c9e0:	b085      	sub	sp, #20
 800c9e2:	af00      	add	r7, sp, #0
 800c9e4:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	73fb      	strb	r3, [r7, #15]
 800c9ee:	e00e      	b.n	800ca0e <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c9f0:	7bfa      	ldrb	r2, [r7, #15]
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	32e0      	adds	r2, #224	; 0xe0
 800c9f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d102      	bne.n	800ca08 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 800ca02:	7bfb      	ldrb	r3, [r7, #15]
 800ca04:	b29b      	uxth	r3, r3
 800ca06:	e007      	b.n	800ca18 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800ca08:	7bfb      	ldrb	r3, [r7, #15]
 800ca0a:	3301      	adds	r3, #1
 800ca0c:	73fb      	strb	r3, [r7, #15]
 800ca0e:	7bfb      	ldrb	r3, [r7, #15]
 800ca10:	2b0a      	cmp	r3, #10
 800ca12:	d9ed      	bls.n	800c9f0 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 800ca14:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3714      	adds	r7, #20
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca22:	4770      	bx	lr

0800ca24 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b084      	sub	sp, #16
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ca2e:	79fb      	ldrb	r3, [r7, #7]
 800ca30:	4a08      	ldr	r2, [pc, #32]	; (800ca54 <disk_status+0x30>)
 800ca32:	009b      	lsls	r3, r3, #2
 800ca34:	4413      	add	r3, r2
 800ca36:	685b      	ldr	r3, [r3, #4]
 800ca38:	685b      	ldr	r3, [r3, #4]
 800ca3a:	79fa      	ldrb	r2, [r7, #7]
 800ca3c:	4905      	ldr	r1, [pc, #20]	; (800ca54 <disk_status+0x30>)
 800ca3e:	440a      	add	r2, r1
 800ca40:	7a12      	ldrb	r2, [r2, #8]
 800ca42:	4610      	mov	r0, r2
 800ca44:	4798      	blx	r3
 800ca46:	4603      	mov	r3, r0
 800ca48:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ca4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3710      	adds	r7, #16
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}
 800ca54:	200000dc 	.word	0x200000dc

0800ca58 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b084      	sub	sp, #16
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	4603      	mov	r3, r0
 800ca60:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ca62:	2300      	movs	r3, #0
 800ca64:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ca66:	79fb      	ldrb	r3, [r7, #7]
 800ca68:	4a0d      	ldr	r2, [pc, #52]	; (800caa0 <disk_initialize+0x48>)
 800ca6a:	5cd3      	ldrb	r3, [r2, r3]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d111      	bne.n	800ca94 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ca70:	79fb      	ldrb	r3, [r7, #7]
 800ca72:	4a0b      	ldr	r2, [pc, #44]	; (800caa0 <disk_initialize+0x48>)
 800ca74:	2101      	movs	r1, #1
 800ca76:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ca78:	79fb      	ldrb	r3, [r7, #7]
 800ca7a:	4a09      	ldr	r2, [pc, #36]	; (800caa0 <disk_initialize+0x48>)
 800ca7c:	009b      	lsls	r3, r3, #2
 800ca7e:	4413      	add	r3, r2
 800ca80:	685b      	ldr	r3, [r3, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	79fa      	ldrb	r2, [r7, #7]
 800ca86:	4906      	ldr	r1, [pc, #24]	; (800caa0 <disk_initialize+0x48>)
 800ca88:	440a      	add	r2, r1
 800ca8a:	7a12      	ldrb	r2, [r2, #8]
 800ca8c:	4610      	mov	r0, r2
 800ca8e:	4798      	blx	r3
 800ca90:	4603      	mov	r3, r0
 800ca92:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ca94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	3710      	adds	r7, #16
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}
 800ca9e:	bf00      	nop
 800caa0:	200000dc 	.word	0x200000dc

0800caa4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800caa4:	b590      	push	{r4, r7, lr}
 800caa6:	b087      	sub	sp, #28
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	60b9      	str	r1, [r7, #8]
 800caac:	607a      	str	r2, [r7, #4]
 800caae:	603b      	str	r3, [r7, #0]
 800cab0:	4603      	mov	r3, r0
 800cab2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cab4:	7bfb      	ldrb	r3, [r7, #15]
 800cab6:	4a0a      	ldr	r2, [pc, #40]	; (800cae0 <disk_read+0x3c>)
 800cab8:	009b      	lsls	r3, r3, #2
 800caba:	4413      	add	r3, r2
 800cabc:	685b      	ldr	r3, [r3, #4]
 800cabe:	689c      	ldr	r4, [r3, #8]
 800cac0:	7bfb      	ldrb	r3, [r7, #15]
 800cac2:	4a07      	ldr	r2, [pc, #28]	; (800cae0 <disk_read+0x3c>)
 800cac4:	4413      	add	r3, r2
 800cac6:	7a18      	ldrb	r0, [r3, #8]
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	687a      	ldr	r2, [r7, #4]
 800cacc:	68b9      	ldr	r1, [r7, #8]
 800cace:	47a0      	blx	r4
 800cad0:	4603      	mov	r3, r0
 800cad2:	75fb      	strb	r3, [r7, #23]
  return res;
 800cad4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	371c      	adds	r7, #28
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd90      	pop	{r4, r7, pc}
 800cade:	bf00      	nop
 800cae0:	200000dc 	.word	0x200000dc

0800cae4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cae4:	b590      	push	{r4, r7, lr}
 800cae6:	b087      	sub	sp, #28
 800cae8:	af00      	add	r7, sp, #0
 800caea:	60b9      	str	r1, [r7, #8]
 800caec:	607a      	str	r2, [r7, #4]
 800caee:	603b      	str	r3, [r7, #0]
 800caf0:	4603      	mov	r3, r0
 800caf2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800caf4:	7bfb      	ldrb	r3, [r7, #15]
 800caf6:	4a0a      	ldr	r2, [pc, #40]	; (800cb20 <disk_write+0x3c>)
 800caf8:	009b      	lsls	r3, r3, #2
 800cafa:	4413      	add	r3, r2
 800cafc:	685b      	ldr	r3, [r3, #4]
 800cafe:	68dc      	ldr	r4, [r3, #12]
 800cb00:	7bfb      	ldrb	r3, [r7, #15]
 800cb02:	4a07      	ldr	r2, [pc, #28]	; (800cb20 <disk_write+0x3c>)
 800cb04:	4413      	add	r3, r2
 800cb06:	7a18      	ldrb	r0, [r3, #8]
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	687a      	ldr	r2, [r7, #4]
 800cb0c:	68b9      	ldr	r1, [r7, #8]
 800cb0e:	47a0      	blx	r4
 800cb10:	4603      	mov	r3, r0
 800cb12:	75fb      	strb	r3, [r7, #23]
  return res;
 800cb14:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	371c      	adds	r7, #28
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd90      	pop	{r4, r7, pc}
 800cb1e:	bf00      	nop
 800cb20:	200000dc 	.word	0x200000dc

0800cb24 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b084      	sub	sp, #16
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	603a      	str	r2, [r7, #0]
 800cb2e:	71fb      	strb	r3, [r7, #7]
 800cb30:	460b      	mov	r3, r1
 800cb32:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cb34:	79fb      	ldrb	r3, [r7, #7]
 800cb36:	4a09      	ldr	r2, [pc, #36]	; (800cb5c <disk_ioctl+0x38>)
 800cb38:	009b      	lsls	r3, r3, #2
 800cb3a:	4413      	add	r3, r2
 800cb3c:	685b      	ldr	r3, [r3, #4]
 800cb3e:	691b      	ldr	r3, [r3, #16]
 800cb40:	79fa      	ldrb	r2, [r7, #7]
 800cb42:	4906      	ldr	r1, [pc, #24]	; (800cb5c <disk_ioctl+0x38>)
 800cb44:	440a      	add	r2, r1
 800cb46:	7a10      	ldrb	r0, [r2, #8]
 800cb48:	79b9      	ldrb	r1, [r7, #6]
 800cb4a:	683a      	ldr	r2, [r7, #0]
 800cb4c:	4798      	blx	r3
 800cb4e:	4603      	mov	r3, r0
 800cb50:	73fb      	strb	r3, [r7, #15]
  return res;
 800cb52:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb54:	4618      	mov	r0, r3
 800cb56:	3710      	adds	r7, #16
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd80      	pop	{r7, pc}
 800cb5c:	200000dc 	.word	0x200000dc

0800cb60 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cb60:	b480      	push	{r7}
 800cb62:	b085      	sub	sp, #20
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	3301      	adds	r3, #1
 800cb6c:	781b      	ldrb	r3, [r3, #0]
 800cb6e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800cb70:	89fb      	ldrh	r3, [r7, #14]
 800cb72:	021b      	lsls	r3, r3, #8
 800cb74:	b21a      	sxth	r2, r3
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	781b      	ldrb	r3, [r3, #0]
 800cb7a:	b21b      	sxth	r3, r3
 800cb7c:	4313      	orrs	r3, r2
 800cb7e:	b21b      	sxth	r3, r3
 800cb80:	81fb      	strh	r3, [r7, #14]
	return rv;
 800cb82:	89fb      	ldrh	r3, [r7, #14]
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3714      	adds	r7, #20
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8e:	4770      	bx	lr

0800cb90 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800cb90:	b480      	push	{r7}
 800cb92:	b085      	sub	sp, #20
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	3303      	adds	r3, #3
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	021b      	lsls	r3, r3, #8
 800cba4:	687a      	ldr	r2, [r7, #4]
 800cba6:	3202      	adds	r2, #2
 800cba8:	7812      	ldrb	r2, [r2, #0]
 800cbaa:	4313      	orrs	r3, r2
 800cbac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	021b      	lsls	r3, r3, #8
 800cbb2:	687a      	ldr	r2, [r7, #4]
 800cbb4:	3201      	adds	r2, #1
 800cbb6:	7812      	ldrb	r2, [r2, #0]
 800cbb8:	4313      	orrs	r3, r2
 800cbba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	021b      	lsls	r3, r3, #8
 800cbc0:	687a      	ldr	r2, [r7, #4]
 800cbc2:	7812      	ldrb	r2, [r2, #0]
 800cbc4:	4313      	orrs	r3, r2
 800cbc6:	60fb      	str	r3, [r7, #12]
	return rv;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3714      	adds	r7, #20
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd4:	4770      	bx	lr

0800cbd6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800cbd6:	b480      	push	{r7}
 800cbd8:	b083      	sub	sp, #12
 800cbda:	af00      	add	r7, sp, #0
 800cbdc:	6078      	str	r0, [r7, #4]
 800cbde:	460b      	mov	r3, r1
 800cbe0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	1c5a      	adds	r2, r3, #1
 800cbe6:	607a      	str	r2, [r7, #4]
 800cbe8:	887a      	ldrh	r2, [r7, #2]
 800cbea:	b2d2      	uxtb	r2, r2
 800cbec:	701a      	strb	r2, [r3, #0]
 800cbee:	887b      	ldrh	r3, [r7, #2]
 800cbf0:	0a1b      	lsrs	r3, r3, #8
 800cbf2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	1c5a      	adds	r2, r3, #1
 800cbf8:	607a      	str	r2, [r7, #4]
 800cbfa:	887a      	ldrh	r2, [r7, #2]
 800cbfc:	b2d2      	uxtb	r2, r2
 800cbfe:	701a      	strb	r2, [r3, #0]
}
 800cc00:	bf00      	nop
 800cc02:	370c      	adds	r7, #12
 800cc04:	46bd      	mov	sp, r7
 800cc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0a:	4770      	bx	lr

0800cc0c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b083      	sub	sp, #12
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
 800cc14:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	1c5a      	adds	r2, r3, #1
 800cc1a:	607a      	str	r2, [r7, #4]
 800cc1c:	683a      	ldr	r2, [r7, #0]
 800cc1e:	b2d2      	uxtb	r2, r2
 800cc20:	701a      	strb	r2, [r3, #0]
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	0a1b      	lsrs	r3, r3, #8
 800cc26:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	1c5a      	adds	r2, r3, #1
 800cc2c:	607a      	str	r2, [r7, #4]
 800cc2e:	683a      	ldr	r2, [r7, #0]
 800cc30:	b2d2      	uxtb	r2, r2
 800cc32:	701a      	strb	r2, [r3, #0]
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	0a1b      	lsrs	r3, r3, #8
 800cc38:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	1c5a      	adds	r2, r3, #1
 800cc3e:	607a      	str	r2, [r7, #4]
 800cc40:	683a      	ldr	r2, [r7, #0]
 800cc42:	b2d2      	uxtb	r2, r2
 800cc44:	701a      	strb	r2, [r3, #0]
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	0a1b      	lsrs	r3, r3, #8
 800cc4a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	1c5a      	adds	r2, r3, #1
 800cc50:	607a      	str	r2, [r7, #4]
 800cc52:	683a      	ldr	r2, [r7, #0]
 800cc54:	b2d2      	uxtb	r2, r2
 800cc56:	701a      	strb	r2, [r3, #0]
}
 800cc58:	bf00      	nop
 800cc5a:	370c      	adds	r7, #12
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc62:	4770      	bx	lr

0800cc64 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800cc64:	b480      	push	{r7}
 800cc66:	b087      	sub	sp, #28
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	60f8      	str	r0, [r7, #12]
 800cc6c:	60b9      	str	r1, [r7, #8]
 800cc6e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d00d      	beq.n	800cc9a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800cc7e:	693a      	ldr	r2, [r7, #16]
 800cc80:	1c53      	adds	r3, r2, #1
 800cc82:	613b      	str	r3, [r7, #16]
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	1c59      	adds	r1, r3, #1
 800cc88:	6179      	str	r1, [r7, #20]
 800cc8a:	7812      	ldrb	r2, [r2, #0]
 800cc8c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	3b01      	subs	r3, #1
 800cc92:	607b      	str	r3, [r7, #4]
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d1f1      	bne.n	800cc7e <mem_cpy+0x1a>
	}
}
 800cc9a:	bf00      	nop
 800cc9c:	371c      	adds	r7, #28
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca4:	4770      	bx	lr

0800cca6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800cca6:	b480      	push	{r7}
 800cca8:	b087      	sub	sp, #28
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	60f8      	str	r0, [r7, #12]
 800ccae:	60b9      	str	r1, [r7, #8]
 800ccb0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	1c5a      	adds	r2, r3, #1
 800ccba:	617a      	str	r2, [r7, #20]
 800ccbc:	68ba      	ldr	r2, [r7, #8]
 800ccbe:	b2d2      	uxtb	r2, r2
 800ccc0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	3b01      	subs	r3, #1
 800ccc6:	607b      	str	r3, [r7, #4]
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d1f3      	bne.n	800ccb6 <mem_set+0x10>
}
 800ccce:	bf00      	nop
 800ccd0:	371c      	adds	r7, #28
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd8:	4770      	bx	lr

0800ccda <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ccda:	b480      	push	{r7}
 800ccdc:	b089      	sub	sp, #36	; 0x24
 800ccde:	af00      	add	r7, sp, #0
 800cce0:	60f8      	str	r0, [r7, #12]
 800cce2:	60b9      	str	r1, [r7, #8]
 800cce4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	61fb      	str	r3, [r7, #28]
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ccf2:	69fb      	ldr	r3, [r7, #28]
 800ccf4:	1c5a      	adds	r2, r3, #1
 800ccf6:	61fa      	str	r2, [r7, #28]
 800ccf8:	781b      	ldrb	r3, [r3, #0]
 800ccfa:	4619      	mov	r1, r3
 800ccfc:	69bb      	ldr	r3, [r7, #24]
 800ccfe:	1c5a      	adds	r2, r3, #1
 800cd00:	61ba      	str	r2, [r7, #24]
 800cd02:	781b      	ldrb	r3, [r3, #0]
 800cd04:	1acb      	subs	r3, r1, r3
 800cd06:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	3b01      	subs	r3, #1
 800cd0c:	607b      	str	r3, [r7, #4]
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d002      	beq.n	800cd1a <mem_cmp+0x40>
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d0eb      	beq.n	800ccf2 <mem_cmp+0x18>

	return r;
 800cd1a:	697b      	ldr	r3, [r7, #20]
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3724      	adds	r7, #36	; 0x24
 800cd20:	46bd      	mov	sp, r7
 800cd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd26:	4770      	bx	lr

0800cd28 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800cd28:	b480      	push	{r7}
 800cd2a:	b083      	sub	sp, #12
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
 800cd30:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800cd32:	e002      	b.n	800cd3a <chk_chr+0x12>
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	3301      	adds	r3, #1
 800cd38:	607b      	str	r3, [r7, #4]
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d005      	beq.n	800cd4e <chk_chr+0x26>
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	781b      	ldrb	r3, [r3, #0]
 800cd46:	461a      	mov	r2, r3
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d1f2      	bne.n	800cd34 <chk_chr+0xc>
	return *str;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	781b      	ldrb	r3, [r3, #0]
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	370c      	adds	r7, #12
 800cd56:	46bd      	mov	sp, r7
 800cd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5c:	4770      	bx	lr

0800cd5e <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800cd5e:	b580      	push	{r7, lr}
 800cd60:	b082      	sub	sp, #8
 800cd62:	af00      	add	r7, sp, #0
 800cd64:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d009      	beq.n	800cd80 <lock_fs+0x22>
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	68db      	ldr	r3, [r3, #12]
 800cd70:	4618      	mov	r0, r3
 800cd72:	f002 fec2 	bl	800fafa <ff_req_grant>
 800cd76:	4603      	mov	r3, r0
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d001      	beq.n	800cd80 <lock_fs+0x22>
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	e000      	b.n	800cd82 <lock_fs+0x24>
 800cd80:	2300      	movs	r3, #0
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	3708      	adds	r7, #8
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}

0800cd8a <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800cd8a:	b580      	push	{r7, lr}
 800cd8c:	b082      	sub	sp, #8
 800cd8e:	af00      	add	r7, sp, #0
 800cd90:	6078      	str	r0, [r7, #4]
 800cd92:	460b      	mov	r3, r1
 800cd94:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d00d      	beq.n	800cdb8 <unlock_fs+0x2e>
 800cd9c:	78fb      	ldrb	r3, [r7, #3]
 800cd9e:	2b0c      	cmp	r3, #12
 800cda0:	d00a      	beq.n	800cdb8 <unlock_fs+0x2e>
 800cda2:	78fb      	ldrb	r3, [r7, #3]
 800cda4:	2b0b      	cmp	r3, #11
 800cda6:	d007      	beq.n	800cdb8 <unlock_fs+0x2e>
 800cda8:	78fb      	ldrb	r3, [r7, #3]
 800cdaa:	2b0f      	cmp	r3, #15
 800cdac:	d004      	beq.n	800cdb8 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	68db      	ldr	r3, [r3, #12]
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f002 feb6 	bl	800fb24 <ff_rel_grant>
	}
}
 800cdb8:	bf00      	nop
 800cdba:	3708      	adds	r7, #8
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}

0800cdc0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b085      	sub	sp, #20
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cdca:	2300      	movs	r3, #0
 800cdcc:	60bb      	str	r3, [r7, #8]
 800cdce:	68bb      	ldr	r3, [r7, #8]
 800cdd0:	60fb      	str	r3, [r7, #12]
 800cdd2:	e029      	b.n	800ce28 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800cdd4:	4a27      	ldr	r2, [pc, #156]	; (800ce74 <chk_lock+0xb4>)
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	011b      	lsls	r3, r3, #4
 800cdda:	4413      	add	r3, r2
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d01d      	beq.n	800ce1e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cde2:	4a24      	ldr	r2, [pc, #144]	; (800ce74 <chk_lock+0xb4>)
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	011b      	lsls	r3, r3, #4
 800cde8:	4413      	add	r3, r2
 800cdea:	681a      	ldr	r2, [r3, #0]
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	d116      	bne.n	800ce22 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800cdf4:	4a1f      	ldr	r2, [pc, #124]	; (800ce74 <chk_lock+0xb4>)
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	011b      	lsls	r3, r3, #4
 800cdfa:	4413      	add	r3, r2
 800cdfc:	3304      	adds	r3, #4
 800cdfe:	681a      	ldr	r2, [r3, #0]
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d10c      	bne.n	800ce22 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ce08:	4a1a      	ldr	r2, [pc, #104]	; (800ce74 <chk_lock+0xb4>)
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	011b      	lsls	r3, r3, #4
 800ce0e:	4413      	add	r3, r2
 800ce10:	3308      	adds	r3, #8
 800ce12:	681a      	ldr	r2, [r3, #0]
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	d102      	bne.n	800ce22 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ce1c:	e007      	b.n	800ce2e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ce1e:	2301      	movs	r3, #1
 800ce20:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	3301      	adds	r3, #1
 800ce26:	60fb      	str	r3, [r7, #12]
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	2b01      	cmp	r3, #1
 800ce2c:	d9d2      	bls.n	800cdd4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	2b02      	cmp	r3, #2
 800ce32:	d109      	bne.n	800ce48 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d102      	bne.n	800ce40 <chk_lock+0x80>
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	2b02      	cmp	r3, #2
 800ce3e:	d101      	bne.n	800ce44 <chk_lock+0x84>
 800ce40:	2300      	movs	r3, #0
 800ce42:	e010      	b.n	800ce66 <chk_lock+0xa6>
 800ce44:	2312      	movs	r3, #18
 800ce46:	e00e      	b.n	800ce66 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d108      	bne.n	800ce60 <chk_lock+0xa0>
 800ce4e:	4a09      	ldr	r2, [pc, #36]	; (800ce74 <chk_lock+0xb4>)
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	011b      	lsls	r3, r3, #4
 800ce54:	4413      	add	r3, r2
 800ce56:	330c      	adds	r3, #12
 800ce58:	881b      	ldrh	r3, [r3, #0]
 800ce5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce5e:	d101      	bne.n	800ce64 <chk_lock+0xa4>
 800ce60:	2310      	movs	r3, #16
 800ce62:	e000      	b.n	800ce66 <chk_lock+0xa6>
 800ce64:	2300      	movs	r3, #0
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3714      	adds	r7, #20
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce70:	4770      	bx	lr
 800ce72:	bf00      	nop
 800ce74:	200000bc 	.word	0x200000bc

0800ce78 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b083      	sub	sp, #12
 800ce7c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	607b      	str	r3, [r7, #4]
 800ce82:	e002      	b.n	800ce8a <enq_lock+0x12>
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	3301      	adds	r3, #1
 800ce88:	607b      	str	r3, [r7, #4]
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2b01      	cmp	r3, #1
 800ce8e:	d806      	bhi.n	800ce9e <enq_lock+0x26>
 800ce90:	4a09      	ldr	r2, [pc, #36]	; (800ceb8 <enq_lock+0x40>)
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	011b      	lsls	r3, r3, #4
 800ce96:	4413      	add	r3, r2
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d1f2      	bne.n	800ce84 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2b02      	cmp	r3, #2
 800cea2:	bf14      	ite	ne
 800cea4:	2301      	movne	r3, #1
 800cea6:	2300      	moveq	r3, #0
 800cea8:	b2db      	uxtb	r3, r3
}
 800ceaa:	4618      	mov	r0, r3
 800ceac:	370c      	adds	r7, #12
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb4:	4770      	bx	lr
 800ceb6:	bf00      	nop
 800ceb8:	200000bc 	.word	0x200000bc

0800cebc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cebc:	b480      	push	{r7}
 800cebe:	b085      	sub	sp, #20
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
 800cec4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cec6:	2300      	movs	r3, #0
 800cec8:	60fb      	str	r3, [r7, #12]
 800ceca:	e01f      	b.n	800cf0c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800cecc:	4a41      	ldr	r2, [pc, #260]	; (800cfd4 <inc_lock+0x118>)
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	011b      	lsls	r3, r3, #4
 800ced2:	4413      	add	r3, r2
 800ced4:	681a      	ldr	r2, [r3, #0]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	429a      	cmp	r2, r3
 800cedc:	d113      	bne.n	800cf06 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800cede:	4a3d      	ldr	r2, [pc, #244]	; (800cfd4 <inc_lock+0x118>)
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	011b      	lsls	r3, r3, #4
 800cee4:	4413      	add	r3, r2
 800cee6:	3304      	adds	r3, #4
 800cee8:	681a      	ldr	r2, [r3, #0]
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ceee:	429a      	cmp	r2, r3
 800cef0:	d109      	bne.n	800cf06 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800cef2:	4a38      	ldr	r2, [pc, #224]	; (800cfd4 <inc_lock+0x118>)
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	011b      	lsls	r3, r3, #4
 800cef8:	4413      	add	r3, r2
 800cefa:	3308      	adds	r3, #8
 800cefc:	681a      	ldr	r2, [r3, #0]
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800cf02:	429a      	cmp	r2, r3
 800cf04:	d006      	beq.n	800cf14 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	3301      	adds	r3, #1
 800cf0a:	60fb      	str	r3, [r7, #12]
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	2b01      	cmp	r3, #1
 800cf10:	d9dc      	bls.n	800cecc <inc_lock+0x10>
 800cf12:	e000      	b.n	800cf16 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800cf14:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	2b02      	cmp	r3, #2
 800cf1a:	d132      	bne.n	800cf82 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	60fb      	str	r3, [r7, #12]
 800cf20:	e002      	b.n	800cf28 <inc_lock+0x6c>
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	3301      	adds	r3, #1
 800cf26:	60fb      	str	r3, [r7, #12]
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	2b01      	cmp	r3, #1
 800cf2c:	d806      	bhi.n	800cf3c <inc_lock+0x80>
 800cf2e:	4a29      	ldr	r2, [pc, #164]	; (800cfd4 <inc_lock+0x118>)
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	011b      	lsls	r3, r3, #4
 800cf34:	4413      	add	r3, r2
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d1f2      	bne.n	800cf22 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2b02      	cmp	r3, #2
 800cf40:	d101      	bne.n	800cf46 <inc_lock+0x8a>
 800cf42:	2300      	movs	r3, #0
 800cf44:	e040      	b.n	800cfc8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681a      	ldr	r2, [r3, #0]
 800cf4a:	4922      	ldr	r1, [pc, #136]	; (800cfd4 <inc_lock+0x118>)
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	011b      	lsls	r3, r3, #4
 800cf50:	440b      	add	r3, r1
 800cf52:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	689a      	ldr	r2, [r3, #8]
 800cf58:	491e      	ldr	r1, [pc, #120]	; (800cfd4 <inc_lock+0x118>)
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	011b      	lsls	r3, r3, #4
 800cf5e:	440b      	add	r3, r1
 800cf60:	3304      	adds	r3, #4
 800cf62:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	695a      	ldr	r2, [r3, #20]
 800cf68:	491a      	ldr	r1, [pc, #104]	; (800cfd4 <inc_lock+0x118>)
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	011b      	lsls	r3, r3, #4
 800cf6e:	440b      	add	r3, r1
 800cf70:	3308      	adds	r3, #8
 800cf72:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800cf74:	4a17      	ldr	r2, [pc, #92]	; (800cfd4 <inc_lock+0x118>)
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	011b      	lsls	r3, r3, #4
 800cf7a:	4413      	add	r3, r2
 800cf7c:	330c      	adds	r3, #12
 800cf7e:	2200      	movs	r2, #0
 800cf80:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d009      	beq.n	800cf9c <inc_lock+0xe0>
 800cf88:	4a12      	ldr	r2, [pc, #72]	; (800cfd4 <inc_lock+0x118>)
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	011b      	lsls	r3, r3, #4
 800cf8e:	4413      	add	r3, r2
 800cf90:	330c      	adds	r3, #12
 800cf92:	881b      	ldrh	r3, [r3, #0]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d001      	beq.n	800cf9c <inc_lock+0xe0>
 800cf98:	2300      	movs	r3, #0
 800cf9a:	e015      	b.n	800cfc8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d108      	bne.n	800cfb4 <inc_lock+0xf8>
 800cfa2:	4a0c      	ldr	r2, [pc, #48]	; (800cfd4 <inc_lock+0x118>)
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	011b      	lsls	r3, r3, #4
 800cfa8:	4413      	add	r3, r2
 800cfaa:	330c      	adds	r3, #12
 800cfac:	881b      	ldrh	r3, [r3, #0]
 800cfae:	3301      	adds	r3, #1
 800cfb0:	b29a      	uxth	r2, r3
 800cfb2:	e001      	b.n	800cfb8 <inc_lock+0xfc>
 800cfb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cfb8:	4906      	ldr	r1, [pc, #24]	; (800cfd4 <inc_lock+0x118>)
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	011b      	lsls	r3, r3, #4
 800cfbe:	440b      	add	r3, r1
 800cfc0:	330c      	adds	r3, #12
 800cfc2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	3301      	adds	r3, #1
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3714      	adds	r7, #20
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd2:	4770      	bx	lr
 800cfd4:	200000bc 	.word	0x200000bc

0800cfd8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b085      	sub	sp, #20
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	3b01      	subs	r3, #1
 800cfe4:	607b      	str	r3, [r7, #4]
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2b01      	cmp	r3, #1
 800cfea:	d825      	bhi.n	800d038 <dec_lock+0x60>
		n = Files[i].ctr;
 800cfec:	4a17      	ldr	r2, [pc, #92]	; (800d04c <dec_lock+0x74>)
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	011b      	lsls	r3, r3, #4
 800cff2:	4413      	add	r3, r2
 800cff4:	330c      	adds	r3, #12
 800cff6:	881b      	ldrh	r3, [r3, #0]
 800cff8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800cffa:	89fb      	ldrh	r3, [r7, #14]
 800cffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d000:	d101      	bne.n	800d006 <dec_lock+0x2e>
 800d002:	2300      	movs	r3, #0
 800d004:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d006:	89fb      	ldrh	r3, [r7, #14]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d002      	beq.n	800d012 <dec_lock+0x3a>
 800d00c:	89fb      	ldrh	r3, [r7, #14]
 800d00e:	3b01      	subs	r3, #1
 800d010:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d012:	4a0e      	ldr	r2, [pc, #56]	; (800d04c <dec_lock+0x74>)
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	011b      	lsls	r3, r3, #4
 800d018:	4413      	add	r3, r2
 800d01a:	330c      	adds	r3, #12
 800d01c:	89fa      	ldrh	r2, [r7, #14]
 800d01e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d020:	89fb      	ldrh	r3, [r7, #14]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d105      	bne.n	800d032 <dec_lock+0x5a>
 800d026:	4a09      	ldr	r2, [pc, #36]	; (800d04c <dec_lock+0x74>)
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	011b      	lsls	r3, r3, #4
 800d02c:	4413      	add	r3, r2
 800d02e:	2200      	movs	r2, #0
 800d030:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d032:	2300      	movs	r3, #0
 800d034:	737b      	strb	r3, [r7, #13]
 800d036:	e001      	b.n	800d03c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d038:	2302      	movs	r3, #2
 800d03a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d03c:	7b7b      	ldrb	r3, [r7, #13]
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3714      	adds	r7, #20
 800d042:	46bd      	mov	sp, r7
 800d044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d048:	4770      	bx	lr
 800d04a:	bf00      	nop
 800d04c:	200000bc 	.word	0x200000bc

0800d050 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d050:	b480      	push	{r7}
 800d052:	b085      	sub	sp, #20
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d058:	2300      	movs	r3, #0
 800d05a:	60fb      	str	r3, [r7, #12]
 800d05c:	e010      	b.n	800d080 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d05e:	4a0d      	ldr	r2, [pc, #52]	; (800d094 <clear_lock+0x44>)
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	011b      	lsls	r3, r3, #4
 800d064:	4413      	add	r3, r2
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	687a      	ldr	r2, [r7, #4]
 800d06a:	429a      	cmp	r2, r3
 800d06c:	d105      	bne.n	800d07a <clear_lock+0x2a>
 800d06e:	4a09      	ldr	r2, [pc, #36]	; (800d094 <clear_lock+0x44>)
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	011b      	lsls	r3, r3, #4
 800d074:	4413      	add	r3, r2
 800d076:	2200      	movs	r2, #0
 800d078:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	3301      	adds	r3, #1
 800d07e:	60fb      	str	r3, [r7, #12]
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	2b01      	cmp	r3, #1
 800d084:	d9eb      	bls.n	800d05e <clear_lock+0xe>
	}
}
 800d086:	bf00      	nop
 800d088:	3714      	adds	r7, #20
 800d08a:	46bd      	mov	sp, r7
 800d08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d090:	4770      	bx	lr
 800d092:	bf00      	nop
 800d094:	200000bc 	.word	0x200000bc

0800d098 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b086      	sub	sp, #24
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	78db      	ldrb	r3, [r3, #3]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d034      	beq.n	800d116 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0b0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	7858      	ldrb	r0, [r3, #1]
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d0bc:	2301      	movs	r3, #1
 800d0be:	697a      	ldr	r2, [r7, #20]
 800d0c0:	f7ff fd10 	bl	800cae4 <disk_write>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d002      	beq.n	800d0d0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	73fb      	strb	r3, [r7, #15]
 800d0ce:	e022      	b.n	800d116 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0da:	697a      	ldr	r2, [r7, #20]
 800d0dc:	1ad2      	subs	r2, r2, r3
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	69db      	ldr	r3, [r3, #28]
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	d217      	bcs.n	800d116 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	789b      	ldrb	r3, [r3, #2]
 800d0ea:	613b      	str	r3, [r7, #16]
 800d0ec:	e010      	b.n	800d110 <sync_window+0x78>
					wsect += fs->fsize;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	69db      	ldr	r3, [r3, #28]
 800d0f2:	697a      	ldr	r2, [r7, #20]
 800d0f4:	4413      	add	r3, r2
 800d0f6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	7858      	ldrb	r0, [r3, #1]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d102:	2301      	movs	r3, #1
 800d104:	697a      	ldr	r2, [r7, #20]
 800d106:	f7ff fced 	bl	800cae4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d10a:	693b      	ldr	r3, [r7, #16]
 800d10c:	3b01      	subs	r3, #1
 800d10e:	613b      	str	r3, [r7, #16]
 800d110:	693b      	ldr	r3, [r7, #16]
 800d112:	2b01      	cmp	r3, #1
 800d114:	d8eb      	bhi.n	800d0ee <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d116:	7bfb      	ldrb	r3, [r7, #15]
}
 800d118:	4618      	mov	r0, r3
 800d11a:	3718      	adds	r7, #24
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}

0800d120 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b084      	sub	sp, #16
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
 800d128:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d12a:	2300      	movs	r3, #0
 800d12c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d132:	683a      	ldr	r2, [r7, #0]
 800d134:	429a      	cmp	r2, r3
 800d136:	d01b      	beq.n	800d170 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f7ff ffad 	bl	800d098 <sync_window>
 800d13e:	4603      	mov	r3, r0
 800d140:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d142:	7bfb      	ldrb	r3, [r7, #15]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d113      	bne.n	800d170 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	7858      	ldrb	r0, [r3, #1]
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d152:	2301      	movs	r3, #1
 800d154:	683a      	ldr	r2, [r7, #0]
 800d156:	f7ff fca5 	bl	800caa4 <disk_read>
 800d15a:	4603      	mov	r3, r0
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d004      	beq.n	800d16a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d160:	f04f 33ff 	mov.w	r3, #4294967295
 800d164:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d166:	2301      	movs	r3, #1
 800d168:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	683a      	ldr	r2, [r7, #0]
 800d16e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800d170:	7bfb      	ldrb	r3, [r7, #15]
}
 800d172:	4618      	mov	r0, r3
 800d174:	3710      	adds	r7, #16
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}
	...

0800d17c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b084      	sub	sp, #16
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f7ff ff87 	bl	800d098 <sync_window>
 800d18a:	4603      	mov	r3, r0
 800d18c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d18e:	7bfb      	ldrb	r3, [r7, #15]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d158      	bne.n	800d246 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	781b      	ldrb	r3, [r3, #0]
 800d198:	2b03      	cmp	r3, #3
 800d19a:	d148      	bne.n	800d22e <sync_fs+0xb2>
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	791b      	ldrb	r3, [r3, #4]
 800d1a0:	2b01      	cmp	r3, #1
 800d1a2:	d144      	bne.n	800d22e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	3334      	adds	r3, #52	; 0x34
 800d1a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d1ac:	2100      	movs	r1, #0
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f7ff fd79 	bl	800cca6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	3334      	adds	r3, #52	; 0x34
 800d1b8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d1bc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f7ff fd08 	bl	800cbd6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	3334      	adds	r3, #52	; 0x34
 800d1ca:	4921      	ldr	r1, [pc, #132]	; (800d250 <sync_fs+0xd4>)
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f7ff fd1d 	bl	800cc0c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	3334      	adds	r3, #52	; 0x34
 800d1d6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d1da:	491e      	ldr	r1, [pc, #120]	; (800d254 <sync_fs+0xd8>)
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f7ff fd15 	bl	800cc0c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	3334      	adds	r3, #52	; 0x34
 800d1e6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	695b      	ldr	r3, [r3, #20]
 800d1ee:	4619      	mov	r1, r3
 800d1f0:	4610      	mov	r0, r2
 800d1f2:	f7ff fd0b 	bl	800cc0c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	3334      	adds	r3, #52	; 0x34
 800d1fa:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	691b      	ldr	r3, [r3, #16]
 800d202:	4619      	mov	r1, r3
 800d204:	4610      	mov	r0, r2
 800d206:	f7ff fd01 	bl	800cc0c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6a1b      	ldr	r3, [r3, #32]
 800d20e:	1c5a      	adds	r2, r3, #1
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	7858      	ldrb	r0, [r3, #1]
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d222:	2301      	movs	r3, #1
 800d224:	f7ff fc5e 	bl	800cae4 <disk_write>
			fs->fsi_flag = 0;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2200      	movs	r2, #0
 800d22c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	785b      	ldrb	r3, [r3, #1]
 800d232:	2200      	movs	r2, #0
 800d234:	2100      	movs	r1, #0
 800d236:	4618      	mov	r0, r3
 800d238:	f7ff fc74 	bl	800cb24 <disk_ioctl>
 800d23c:	4603      	mov	r3, r0
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d001      	beq.n	800d246 <sync_fs+0xca>
 800d242:	2301      	movs	r3, #1
 800d244:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d246:	7bfb      	ldrb	r3, [r7, #15]
}
 800d248:	4618      	mov	r0, r3
 800d24a:	3710      	adds	r7, #16
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bd80      	pop	{r7, pc}
 800d250:	41615252 	.word	0x41615252
 800d254:	61417272 	.word	0x61417272

0800d258 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d258:	b480      	push	{r7}
 800d25a:	b083      	sub	sp, #12
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
 800d260:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	3b02      	subs	r3, #2
 800d266:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	699b      	ldr	r3, [r3, #24]
 800d26c:	3b02      	subs	r3, #2
 800d26e:	683a      	ldr	r2, [r7, #0]
 800d270:	429a      	cmp	r2, r3
 800d272:	d301      	bcc.n	800d278 <clust2sect+0x20>
 800d274:	2300      	movs	r3, #0
 800d276:	e008      	b.n	800d28a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	895b      	ldrh	r3, [r3, #10]
 800d27c:	461a      	mov	r2, r3
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	fb03 f202 	mul.w	r2, r3, r2
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d288:	4413      	add	r3, r2
}
 800d28a:	4618      	mov	r0, r3
 800d28c:	370c      	adds	r7, #12
 800d28e:	46bd      	mov	sp, r7
 800d290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d294:	4770      	bx	lr

0800d296 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d296:	b580      	push	{r7, lr}
 800d298:	b086      	sub	sp, #24
 800d29a:	af00      	add	r7, sp, #0
 800d29c:	6078      	str	r0, [r7, #4]
 800d29e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	2b01      	cmp	r3, #1
 800d2aa:	d904      	bls.n	800d2b6 <get_fat+0x20>
 800d2ac:	693b      	ldr	r3, [r7, #16]
 800d2ae:	699b      	ldr	r3, [r3, #24]
 800d2b0:	683a      	ldr	r2, [r7, #0]
 800d2b2:	429a      	cmp	r2, r3
 800d2b4:	d302      	bcc.n	800d2bc <get_fat+0x26>
		val = 1;	/* Internal error */
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	617b      	str	r3, [r7, #20]
 800d2ba:	e08c      	b.n	800d3d6 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d2bc:	f04f 33ff 	mov.w	r3, #4294967295
 800d2c0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	781b      	ldrb	r3, [r3, #0]
 800d2c6:	2b02      	cmp	r3, #2
 800d2c8:	d045      	beq.n	800d356 <get_fat+0xc0>
 800d2ca:	2b03      	cmp	r3, #3
 800d2cc:	d05d      	beq.n	800d38a <get_fat+0xf4>
 800d2ce:	2b01      	cmp	r3, #1
 800d2d0:	d177      	bne.n	800d3c2 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	60fb      	str	r3, [r7, #12]
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	085b      	lsrs	r3, r3, #1
 800d2da:	68fa      	ldr	r2, [r7, #12]
 800d2dc:	4413      	add	r3, r2
 800d2de:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	0a5b      	lsrs	r3, r3, #9
 800d2e8:	4413      	add	r3, r2
 800d2ea:	4619      	mov	r1, r3
 800d2ec:	6938      	ldr	r0, [r7, #16]
 800d2ee:	f7ff ff17 	bl	800d120 <move_window>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d167      	bne.n	800d3c8 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	1c5a      	adds	r2, r3, #1
 800d2fc:	60fa      	str	r2, [r7, #12]
 800d2fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d302:	693a      	ldr	r2, [r7, #16]
 800d304:	4413      	add	r3, r2
 800d306:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d30a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	0a5b      	lsrs	r3, r3, #9
 800d314:	4413      	add	r3, r2
 800d316:	4619      	mov	r1, r3
 800d318:	6938      	ldr	r0, [r7, #16]
 800d31a:	f7ff ff01 	bl	800d120 <move_window>
 800d31e:	4603      	mov	r3, r0
 800d320:	2b00      	cmp	r3, #0
 800d322:	d153      	bne.n	800d3cc <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d32a:	693a      	ldr	r2, [r7, #16]
 800d32c:	4413      	add	r3, r2
 800d32e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d332:	021b      	lsls	r3, r3, #8
 800d334:	461a      	mov	r2, r3
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	4313      	orrs	r3, r2
 800d33a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	f003 0301 	and.w	r3, r3, #1
 800d342:	2b00      	cmp	r3, #0
 800d344:	d002      	beq.n	800d34c <get_fat+0xb6>
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	091b      	lsrs	r3, r3, #4
 800d34a:	e002      	b.n	800d352 <get_fat+0xbc>
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d352:	617b      	str	r3, [r7, #20]
			break;
 800d354:	e03f      	b.n	800d3d6 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d356:	693b      	ldr	r3, [r7, #16]
 800d358:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	0a1b      	lsrs	r3, r3, #8
 800d35e:	4413      	add	r3, r2
 800d360:	4619      	mov	r1, r3
 800d362:	6938      	ldr	r0, [r7, #16]
 800d364:	f7ff fedc 	bl	800d120 <move_window>
 800d368:	4603      	mov	r3, r0
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d130      	bne.n	800d3d0 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d36e:	693b      	ldr	r3, [r7, #16]
 800d370:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	005b      	lsls	r3, r3, #1
 800d378:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d37c:	4413      	add	r3, r2
 800d37e:	4618      	mov	r0, r3
 800d380:	f7ff fbee 	bl	800cb60 <ld_word>
 800d384:	4603      	mov	r3, r0
 800d386:	617b      	str	r3, [r7, #20]
			break;
 800d388:	e025      	b.n	800d3d6 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d38a:	693b      	ldr	r3, [r7, #16]
 800d38c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	09db      	lsrs	r3, r3, #7
 800d392:	4413      	add	r3, r2
 800d394:	4619      	mov	r1, r3
 800d396:	6938      	ldr	r0, [r7, #16]
 800d398:	f7ff fec2 	bl	800d120 <move_window>
 800d39c:	4603      	mov	r3, r0
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d118      	bne.n	800d3d4 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	009b      	lsls	r3, r3, #2
 800d3ac:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d3b0:	4413      	add	r3, r2
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f7ff fbec 	bl	800cb90 <ld_dword>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d3be:	617b      	str	r3, [r7, #20]
			break;
 800d3c0:	e009      	b.n	800d3d6 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d3c2:	2301      	movs	r3, #1
 800d3c4:	617b      	str	r3, [r7, #20]
 800d3c6:	e006      	b.n	800d3d6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d3c8:	bf00      	nop
 800d3ca:	e004      	b.n	800d3d6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d3cc:	bf00      	nop
 800d3ce:	e002      	b.n	800d3d6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d3d0:	bf00      	nop
 800d3d2:	e000      	b.n	800d3d6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d3d4:	bf00      	nop
		}
	}

	return val;
 800d3d6:	697b      	ldr	r3, [r7, #20]
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	3718      	adds	r7, #24
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}

0800d3e0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d3e0:	b590      	push	{r4, r7, lr}
 800d3e2:	b089      	sub	sp, #36	; 0x24
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	60f8      	str	r0, [r7, #12]
 800d3e8:	60b9      	str	r1, [r7, #8]
 800d3ea:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d3ec:	2302      	movs	r3, #2
 800d3ee:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	2b01      	cmp	r3, #1
 800d3f4:	f240 80d6 	bls.w	800d5a4 <put_fat+0x1c4>
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	699b      	ldr	r3, [r3, #24]
 800d3fc:	68ba      	ldr	r2, [r7, #8]
 800d3fe:	429a      	cmp	r2, r3
 800d400:	f080 80d0 	bcs.w	800d5a4 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	781b      	ldrb	r3, [r3, #0]
 800d408:	2b02      	cmp	r3, #2
 800d40a:	d073      	beq.n	800d4f4 <put_fat+0x114>
 800d40c:	2b03      	cmp	r3, #3
 800d40e:	f000 8091 	beq.w	800d534 <put_fat+0x154>
 800d412:	2b01      	cmp	r3, #1
 800d414:	f040 80c6 	bne.w	800d5a4 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	61bb      	str	r3, [r7, #24]
 800d41c:	69bb      	ldr	r3, [r7, #24]
 800d41e:	085b      	lsrs	r3, r3, #1
 800d420:	69ba      	ldr	r2, [r7, #24]
 800d422:	4413      	add	r3, r2
 800d424:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d42a:	69bb      	ldr	r3, [r7, #24]
 800d42c:	0a5b      	lsrs	r3, r3, #9
 800d42e:	4413      	add	r3, r2
 800d430:	4619      	mov	r1, r3
 800d432:	68f8      	ldr	r0, [r7, #12]
 800d434:	f7ff fe74 	bl	800d120 <move_window>
 800d438:	4603      	mov	r3, r0
 800d43a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d43c:	7ffb      	ldrb	r3, [r7, #31]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	f040 80a9 	bne.w	800d596 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d44a:	69bb      	ldr	r3, [r7, #24]
 800d44c:	1c59      	adds	r1, r3, #1
 800d44e:	61b9      	str	r1, [r7, #24]
 800d450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d454:	4413      	add	r3, r2
 800d456:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	f003 0301 	and.w	r3, r3, #1
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d00d      	beq.n	800d47e <put_fat+0x9e>
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	781b      	ldrb	r3, [r3, #0]
 800d466:	b25b      	sxtb	r3, r3
 800d468:	f003 030f 	and.w	r3, r3, #15
 800d46c:	b25a      	sxtb	r2, r3
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	b2db      	uxtb	r3, r3
 800d472:	011b      	lsls	r3, r3, #4
 800d474:	b25b      	sxtb	r3, r3
 800d476:	4313      	orrs	r3, r2
 800d478:	b25b      	sxtb	r3, r3
 800d47a:	b2db      	uxtb	r3, r3
 800d47c:	e001      	b.n	800d482 <put_fat+0xa2>
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	b2db      	uxtb	r3, r3
 800d482:	697a      	ldr	r2, [r7, #20]
 800d484:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	2201      	movs	r2, #1
 800d48a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d490:	69bb      	ldr	r3, [r7, #24]
 800d492:	0a5b      	lsrs	r3, r3, #9
 800d494:	4413      	add	r3, r2
 800d496:	4619      	mov	r1, r3
 800d498:	68f8      	ldr	r0, [r7, #12]
 800d49a:	f7ff fe41 	bl	800d120 <move_window>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d4a2:	7ffb      	ldrb	r3, [r7, #31]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d178      	bne.n	800d59a <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d4ae:	69bb      	ldr	r3, [r7, #24]
 800d4b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4b4:	4413      	add	r3, r2
 800d4b6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	f003 0301 	and.w	r3, r3, #1
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d003      	beq.n	800d4ca <put_fat+0xea>
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	091b      	lsrs	r3, r3, #4
 800d4c6:	b2db      	uxtb	r3, r3
 800d4c8:	e00e      	b.n	800d4e8 <put_fat+0x108>
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	781b      	ldrb	r3, [r3, #0]
 800d4ce:	b25b      	sxtb	r3, r3
 800d4d0:	f023 030f 	bic.w	r3, r3, #15
 800d4d4:	b25a      	sxtb	r2, r3
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	0a1b      	lsrs	r3, r3, #8
 800d4da:	b25b      	sxtb	r3, r3
 800d4dc:	f003 030f 	and.w	r3, r3, #15
 800d4e0:	b25b      	sxtb	r3, r3
 800d4e2:	4313      	orrs	r3, r2
 800d4e4:	b25b      	sxtb	r3, r3
 800d4e6:	b2db      	uxtb	r3, r3
 800d4e8:	697a      	ldr	r2, [r7, #20]
 800d4ea:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	2201      	movs	r2, #1
 800d4f0:	70da      	strb	r2, [r3, #3]
			break;
 800d4f2:	e057      	b.n	800d5a4 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	0a1b      	lsrs	r3, r3, #8
 800d4fc:	4413      	add	r3, r2
 800d4fe:	4619      	mov	r1, r3
 800d500:	68f8      	ldr	r0, [r7, #12]
 800d502:	f7ff fe0d 	bl	800d120 <move_window>
 800d506:	4603      	mov	r3, r0
 800d508:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d50a:	7ffb      	ldrb	r3, [r7, #31]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d146      	bne.n	800d59e <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	005b      	lsls	r3, r3, #1
 800d51a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d51e:	4413      	add	r3, r2
 800d520:	687a      	ldr	r2, [r7, #4]
 800d522:	b292      	uxth	r2, r2
 800d524:	4611      	mov	r1, r2
 800d526:	4618      	mov	r0, r3
 800d528:	f7ff fb55 	bl	800cbd6 <st_word>
			fs->wflag = 1;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	2201      	movs	r2, #1
 800d530:	70da      	strb	r2, [r3, #3]
			break;
 800d532:	e037      	b.n	800d5a4 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	09db      	lsrs	r3, r3, #7
 800d53c:	4413      	add	r3, r2
 800d53e:	4619      	mov	r1, r3
 800d540:	68f8      	ldr	r0, [r7, #12]
 800d542:	f7ff fded 	bl	800d120 <move_window>
 800d546:	4603      	mov	r3, r0
 800d548:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d54a:	7ffb      	ldrb	r3, [r7, #31]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d128      	bne.n	800d5a2 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	009b      	lsls	r3, r3, #2
 800d560:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d564:	4413      	add	r3, r2
 800d566:	4618      	mov	r0, r3
 800d568:	f7ff fb12 	bl	800cb90 <ld_dword>
 800d56c:	4603      	mov	r3, r0
 800d56e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d572:	4323      	orrs	r3, r4
 800d574:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	009b      	lsls	r3, r3, #2
 800d580:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d584:	4413      	add	r3, r2
 800d586:	6879      	ldr	r1, [r7, #4]
 800d588:	4618      	mov	r0, r3
 800d58a:	f7ff fb3f 	bl	800cc0c <st_dword>
			fs->wflag = 1;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	2201      	movs	r2, #1
 800d592:	70da      	strb	r2, [r3, #3]
			break;
 800d594:	e006      	b.n	800d5a4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800d596:	bf00      	nop
 800d598:	e004      	b.n	800d5a4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800d59a:	bf00      	nop
 800d59c:	e002      	b.n	800d5a4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800d59e:	bf00      	nop
 800d5a0:	e000      	b.n	800d5a4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800d5a2:	bf00      	nop
		}
	}
	return res;
 800d5a4:	7ffb      	ldrb	r3, [r7, #31]
}
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	3724      	adds	r7, #36	; 0x24
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd90      	pop	{r4, r7, pc}

0800d5ae <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d5ae:	b580      	push	{r7, lr}
 800d5b0:	b088      	sub	sp, #32
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	60f8      	str	r0, [r7, #12]
 800d5b6:	60b9      	str	r1, [r7, #8]
 800d5b8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	2b01      	cmp	r3, #1
 800d5c8:	d904      	bls.n	800d5d4 <remove_chain+0x26>
 800d5ca:	69bb      	ldr	r3, [r7, #24]
 800d5cc:	699b      	ldr	r3, [r3, #24]
 800d5ce:	68ba      	ldr	r2, [r7, #8]
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d301      	bcc.n	800d5d8 <remove_chain+0x2a>
 800d5d4:	2302      	movs	r3, #2
 800d5d6:	e04b      	b.n	800d670 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d00c      	beq.n	800d5f8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d5de:	f04f 32ff 	mov.w	r2, #4294967295
 800d5e2:	6879      	ldr	r1, [r7, #4]
 800d5e4:	69b8      	ldr	r0, [r7, #24]
 800d5e6:	f7ff fefb 	bl	800d3e0 <put_fat>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d5ee:	7ffb      	ldrb	r3, [r7, #31]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d001      	beq.n	800d5f8 <remove_chain+0x4a>
 800d5f4:	7ffb      	ldrb	r3, [r7, #31]
 800d5f6:	e03b      	b.n	800d670 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d5f8:	68b9      	ldr	r1, [r7, #8]
 800d5fa:	68f8      	ldr	r0, [r7, #12]
 800d5fc:	f7ff fe4b 	bl	800d296 <get_fat>
 800d600:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d031      	beq.n	800d66c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	2b01      	cmp	r3, #1
 800d60c:	d101      	bne.n	800d612 <remove_chain+0x64>
 800d60e:	2302      	movs	r3, #2
 800d610:	e02e      	b.n	800d670 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d618:	d101      	bne.n	800d61e <remove_chain+0x70>
 800d61a:	2301      	movs	r3, #1
 800d61c:	e028      	b.n	800d670 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d61e:	2200      	movs	r2, #0
 800d620:	68b9      	ldr	r1, [r7, #8]
 800d622:	69b8      	ldr	r0, [r7, #24]
 800d624:	f7ff fedc 	bl	800d3e0 <put_fat>
 800d628:	4603      	mov	r3, r0
 800d62a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d62c:	7ffb      	ldrb	r3, [r7, #31]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d001      	beq.n	800d636 <remove_chain+0x88>
 800d632:	7ffb      	ldrb	r3, [r7, #31]
 800d634:	e01c      	b.n	800d670 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d636:	69bb      	ldr	r3, [r7, #24]
 800d638:	695a      	ldr	r2, [r3, #20]
 800d63a:	69bb      	ldr	r3, [r7, #24]
 800d63c:	699b      	ldr	r3, [r3, #24]
 800d63e:	3b02      	subs	r3, #2
 800d640:	429a      	cmp	r2, r3
 800d642:	d20b      	bcs.n	800d65c <remove_chain+0xae>
			fs->free_clst++;
 800d644:	69bb      	ldr	r3, [r7, #24]
 800d646:	695b      	ldr	r3, [r3, #20]
 800d648:	1c5a      	adds	r2, r3, #1
 800d64a:	69bb      	ldr	r3, [r7, #24]
 800d64c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800d64e:	69bb      	ldr	r3, [r7, #24]
 800d650:	791b      	ldrb	r3, [r3, #4]
 800d652:	f043 0301 	orr.w	r3, r3, #1
 800d656:	b2da      	uxtb	r2, r3
 800d658:	69bb      	ldr	r3, [r7, #24]
 800d65a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d65c:	697b      	ldr	r3, [r7, #20]
 800d65e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d660:	69bb      	ldr	r3, [r7, #24]
 800d662:	699b      	ldr	r3, [r3, #24]
 800d664:	68ba      	ldr	r2, [r7, #8]
 800d666:	429a      	cmp	r2, r3
 800d668:	d3c6      	bcc.n	800d5f8 <remove_chain+0x4a>
 800d66a:	e000      	b.n	800d66e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d66c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d66e:	2300      	movs	r3, #0
}
 800d670:	4618      	mov	r0, r3
 800d672:	3720      	adds	r7, #32
 800d674:	46bd      	mov	sp, r7
 800d676:	bd80      	pop	{r7, pc}

0800d678 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b088      	sub	sp, #32
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
 800d680:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d10d      	bne.n	800d6aa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	691b      	ldr	r3, [r3, #16]
 800d692:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d694:	69bb      	ldr	r3, [r7, #24]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d004      	beq.n	800d6a4 <create_chain+0x2c>
 800d69a:	693b      	ldr	r3, [r7, #16]
 800d69c:	699b      	ldr	r3, [r3, #24]
 800d69e:	69ba      	ldr	r2, [r7, #24]
 800d6a0:	429a      	cmp	r2, r3
 800d6a2:	d31b      	bcc.n	800d6dc <create_chain+0x64>
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	61bb      	str	r3, [r7, #24]
 800d6a8:	e018      	b.n	800d6dc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d6aa:	6839      	ldr	r1, [r7, #0]
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f7ff fdf2 	bl	800d296 <get_fat>
 800d6b2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	2b01      	cmp	r3, #1
 800d6b8:	d801      	bhi.n	800d6be <create_chain+0x46>
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	e070      	b.n	800d7a0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6c4:	d101      	bne.n	800d6ca <create_chain+0x52>
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	e06a      	b.n	800d7a0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d6ca:	693b      	ldr	r3, [r7, #16]
 800d6cc:	699b      	ldr	r3, [r3, #24]
 800d6ce:	68fa      	ldr	r2, [r7, #12]
 800d6d0:	429a      	cmp	r2, r3
 800d6d2:	d201      	bcs.n	800d6d8 <create_chain+0x60>
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	e063      	b.n	800d7a0 <create_chain+0x128>
		scl = clst;
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d6dc:	69bb      	ldr	r3, [r7, #24]
 800d6de:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d6e0:	69fb      	ldr	r3, [r7, #28]
 800d6e2:	3301      	adds	r3, #1
 800d6e4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d6e6:	693b      	ldr	r3, [r7, #16]
 800d6e8:	699b      	ldr	r3, [r3, #24]
 800d6ea:	69fa      	ldr	r2, [r7, #28]
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	d307      	bcc.n	800d700 <create_chain+0x88>
				ncl = 2;
 800d6f0:	2302      	movs	r3, #2
 800d6f2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d6f4:	69fa      	ldr	r2, [r7, #28]
 800d6f6:	69bb      	ldr	r3, [r7, #24]
 800d6f8:	429a      	cmp	r2, r3
 800d6fa:	d901      	bls.n	800d700 <create_chain+0x88>
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	e04f      	b.n	800d7a0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d700:	69f9      	ldr	r1, [r7, #28]
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f7ff fdc7 	bl	800d296 <get_fat>
 800d708:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d00e      	beq.n	800d72e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	2b01      	cmp	r3, #1
 800d714:	d003      	beq.n	800d71e <create_chain+0xa6>
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d71c:	d101      	bne.n	800d722 <create_chain+0xaa>
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	e03e      	b.n	800d7a0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d722:	69fa      	ldr	r2, [r7, #28]
 800d724:	69bb      	ldr	r3, [r7, #24]
 800d726:	429a      	cmp	r2, r3
 800d728:	d1da      	bne.n	800d6e0 <create_chain+0x68>
 800d72a:	2300      	movs	r3, #0
 800d72c:	e038      	b.n	800d7a0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d72e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d730:	f04f 32ff 	mov.w	r2, #4294967295
 800d734:	69f9      	ldr	r1, [r7, #28]
 800d736:	6938      	ldr	r0, [r7, #16]
 800d738:	f7ff fe52 	bl	800d3e0 <put_fat>
 800d73c:	4603      	mov	r3, r0
 800d73e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d740:	7dfb      	ldrb	r3, [r7, #23]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d109      	bne.n	800d75a <create_chain+0xe2>
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d006      	beq.n	800d75a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d74c:	69fa      	ldr	r2, [r7, #28]
 800d74e:	6839      	ldr	r1, [r7, #0]
 800d750:	6938      	ldr	r0, [r7, #16]
 800d752:	f7ff fe45 	bl	800d3e0 <put_fat>
 800d756:	4603      	mov	r3, r0
 800d758:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d75a:	7dfb      	ldrb	r3, [r7, #23]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d116      	bne.n	800d78e <create_chain+0x116>
		fs->last_clst = ncl;
 800d760:	693b      	ldr	r3, [r7, #16]
 800d762:	69fa      	ldr	r2, [r7, #28]
 800d764:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	695a      	ldr	r2, [r3, #20]
 800d76a:	693b      	ldr	r3, [r7, #16]
 800d76c:	699b      	ldr	r3, [r3, #24]
 800d76e:	3b02      	subs	r3, #2
 800d770:	429a      	cmp	r2, r3
 800d772:	d804      	bhi.n	800d77e <create_chain+0x106>
 800d774:	693b      	ldr	r3, [r7, #16]
 800d776:	695b      	ldr	r3, [r3, #20]
 800d778:	1e5a      	subs	r2, r3, #1
 800d77a:	693b      	ldr	r3, [r7, #16]
 800d77c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800d77e:	693b      	ldr	r3, [r7, #16]
 800d780:	791b      	ldrb	r3, [r3, #4]
 800d782:	f043 0301 	orr.w	r3, r3, #1
 800d786:	b2da      	uxtb	r2, r3
 800d788:	693b      	ldr	r3, [r7, #16]
 800d78a:	711a      	strb	r2, [r3, #4]
 800d78c:	e007      	b.n	800d79e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d78e:	7dfb      	ldrb	r3, [r7, #23]
 800d790:	2b01      	cmp	r3, #1
 800d792:	d102      	bne.n	800d79a <create_chain+0x122>
 800d794:	f04f 33ff 	mov.w	r3, #4294967295
 800d798:	e000      	b.n	800d79c <create_chain+0x124>
 800d79a:	2301      	movs	r3, #1
 800d79c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d79e:	69fb      	ldr	r3, [r7, #28]
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3720      	adds	r7, #32
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}

0800d7a8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d7a8:	b480      	push	{r7}
 800d7aa:	b087      	sub	sp, #28
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
 800d7b0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7bc:	3304      	adds	r3, #4
 800d7be:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	0a5b      	lsrs	r3, r3, #9
 800d7c4:	68fa      	ldr	r2, [r7, #12]
 800d7c6:	8952      	ldrh	r2, [r2, #10]
 800d7c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d7cc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d7ce:	693b      	ldr	r3, [r7, #16]
 800d7d0:	1d1a      	adds	r2, r3, #4
 800d7d2:	613a      	str	r2, [r7, #16]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d101      	bne.n	800d7e2 <clmt_clust+0x3a>
 800d7de:	2300      	movs	r3, #0
 800d7e0:	e010      	b.n	800d804 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d7e2:	697a      	ldr	r2, [r7, #20]
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	429a      	cmp	r2, r3
 800d7e8:	d307      	bcc.n	800d7fa <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d7ea:	697a      	ldr	r2, [r7, #20]
 800d7ec:	68bb      	ldr	r3, [r7, #8]
 800d7ee:	1ad3      	subs	r3, r2, r3
 800d7f0:	617b      	str	r3, [r7, #20]
 800d7f2:	693b      	ldr	r3, [r7, #16]
 800d7f4:	3304      	adds	r3, #4
 800d7f6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d7f8:	e7e9      	b.n	800d7ce <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d7fa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d7fc:	693b      	ldr	r3, [r7, #16]
 800d7fe:	681a      	ldr	r2, [r3, #0]
 800d800:	697b      	ldr	r3, [r7, #20]
 800d802:	4413      	add	r3, r2
}
 800d804:	4618      	mov	r0, r3
 800d806:	371c      	adds	r7, #28
 800d808:	46bd      	mov	sp, r7
 800d80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80e:	4770      	bx	lr

0800d810 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b086      	sub	sp, #24
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d826:	d204      	bcs.n	800d832 <dir_sdi+0x22>
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	f003 031f 	and.w	r3, r3, #31
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d001      	beq.n	800d836 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d832:	2302      	movs	r3, #2
 800d834:	e063      	b.n	800d8fe <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	683a      	ldr	r2, [r7, #0]
 800d83a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	689b      	ldr	r3, [r3, #8]
 800d840:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d842:	697b      	ldr	r3, [r7, #20]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d106      	bne.n	800d856 <dir_sdi+0x46>
 800d848:	693b      	ldr	r3, [r7, #16]
 800d84a:	781b      	ldrb	r3, [r3, #0]
 800d84c:	2b02      	cmp	r3, #2
 800d84e:	d902      	bls.n	800d856 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d850:	693b      	ldr	r3, [r7, #16]
 800d852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d854:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d10c      	bne.n	800d876 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	095b      	lsrs	r3, r3, #5
 800d860:	693a      	ldr	r2, [r7, #16]
 800d862:	8912      	ldrh	r2, [r2, #8]
 800d864:	4293      	cmp	r3, r2
 800d866:	d301      	bcc.n	800d86c <dir_sdi+0x5c>
 800d868:	2302      	movs	r3, #2
 800d86a:	e048      	b.n	800d8fe <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d86c:	693b      	ldr	r3, [r7, #16]
 800d86e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	61da      	str	r2, [r3, #28]
 800d874:	e029      	b.n	800d8ca <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d876:	693b      	ldr	r3, [r7, #16]
 800d878:	895b      	ldrh	r3, [r3, #10]
 800d87a:	025b      	lsls	r3, r3, #9
 800d87c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d87e:	e019      	b.n	800d8b4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	6979      	ldr	r1, [r7, #20]
 800d884:	4618      	mov	r0, r3
 800d886:	f7ff fd06 	bl	800d296 <get_fat>
 800d88a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d88c:	697b      	ldr	r3, [r7, #20]
 800d88e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d892:	d101      	bne.n	800d898 <dir_sdi+0x88>
 800d894:	2301      	movs	r3, #1
 800d896:	e032      	b.n	800d8fe <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d898:	697b      	ldr	r3, [r7, #20]
 800d89a:	2b01      	cmp	r3, #1
 800d89c:	d904      	bls.n	800d8a8 <dir_sdi+0x98>
 800d89e:	693b      	ldr	r3, [r7, #16]
 800d8a0:	699b      	ldr	r3, [r3, #24]
 800d8a2:	697a      	ldr	r2, [r7, #20]
 800d8a4:	429a      	cmp	r2, r3
 800d8a6:	d301      	bcc.n	800d8ac <dir_sdi+0x9c>
 800d8a8:	2302      	movs	r3, #2
 800d8aa:	e028      	b.n	800d8fe <dir_sdi+0xee>
			ofs -= csz;
 800d8ac:	683a      	ldr	r2, [r7, #0]
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	1ad3      	subs	r3, r2, r3
 800d8b2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d8b4:	683a      	ldr	r2, [r7, #0]
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	429a      	cmp	r2, r3
 800d8ba:	d2e1      	bcs.n	800d880 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d8bc:	6979      	ldr	r1, [r7, #20]
 800d8be:	6938      	ldr	r0, [r7, #16]
 800d8c0:	f7ff fcca 	bl	800d258 <clust2sect>
 800d8c4:	4602      	mov	r2, r0
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	697a      	ldr	r2, [r7, #20]
 800d8ce:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	69db      	ldr	r3, [r3, #28]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d101      	bne.n	800d8dc <dir_sdi+0xcc>
 800d8d8:	2302      	movs	r3, #2
 800d8da:	e010      	b.n	800d8fe <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	69da      	ldr	r2, [r3, #28]
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	0a5b      	lsrs	r3, r3, #9
 800d8e4:	441a      	add	r2, r3
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d8ea:	693b      	ldr	r3, [r7, #16]
 800d8ec:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8f6:	441a      	add	r2, r3
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d8fc:	2300      	movs	r3, #0
}
 800d8fe:	4618      	mov	r0, r3
 800d900:	3718      	adds	r7, #24
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}

0800d906 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d906:	b580      	push	{r7, lr}
 800d908:	b086      	sub	sp, #24
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	6078      	str	r0, [r7, #4]
 800d90e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	695b      	ldr	r3, [r3, #20]
 800d91a:	3320      	adds	r3, #32
 800d91c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	69db      	ldr	r3, [r3, #28]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d003      	beq.n	800d92e <dir_next+0x28>
 800d926:	68bb      	ldr	r3, [r7, #8]
 800d928:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d92c:	d301      	bcc.n	800d932 <dir_next+0x2c>
 800d92e:	2304      	movs	r3, #4
 800d930:	e0aa      	b.n	800da88 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d938:	2b00      	cmp	r3, #0
 800d93a:	f040 8098 	bne.w	800da6e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	69db      	ldr	r3, [r3, #28]
 800d942:	1c5a      	adds	r2, r3, #1
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	699b      	ldr	r3, [r3, #24]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d10b      	bne.n	800d968 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d950:	68bb      	ldr	r3, [r7, #8]
 800d952:	095b      	lsrs	r3, r3, #5
 800d954:	68fa      	ldr	r2, [r7, #12]
 800d956:	8912      	ldrh	r2, [r2, #8]
 800d958:	4293      	cmp	r3, r2
 800d95a:	f0c0 8088 	bcc.w	800da6e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2200      	movs	r2, #0
 800d962:	61da      	str	r2, [r3, #28]
 800d964:	2304      	movs	r3, #4
 800d966:	e08f      	b.n	800da88 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	0a5b      	lsrs	r3, r3, #9
 800d96c:	68fa      	ldr	r2, [r7, #12]
 800d96e:	8952      	ldrh	r2, [r2, #10]
 800d970:	3a01      	subs	r2, #1
 800d972:	4013      	ands	r3, r2
 800d974:	2b00      	cmp	r3, #0
 800d976:	d17a      	bne.n	800da6e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d978:	687a      	ldr	r2, [r7, #4]
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	699b      	ldr	r3, [r3, #24]
 800d97e:	4619      	mov	r1, r3
 800d980:	4610      	mov	r0, r2
 800d982:	f7ff fc88 	bl	800d296 <get_fat>
 800d986:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d988:	697b      	ldr	r3, [r7, #20]
 800d98a:	2b01      	cmp	r3, #1
 800d98c:	d801      	bhi.n	800d992 <dir_next+0x8c>
 800d98e:	2302      	movs	r3, #2
 800d990:	e07a      	b.n	800da88 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d998:	d101      	bne.n	800d99e <dir_next+0x98>
 800d99a:	2301      	movs	r3, #1
 800d99c:	e074      	b.n	800da88 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	699b      	ldr	r3, [r3, #24]
 800d9a2:	697a      	ldr	r2, [r7, #20]
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	d358      	bcc.n	800da5a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d104      	bne.n	800d9b8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	61da      	str	r2, [r3, #28]
 800d9b4:	2304      	movs	r3, #4
 800d9b6:	e067      	b.n	800da88 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d9b8:	687a      	ldr	r2, [r7, #4]
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	699b      	ldr	r3, [r3, #24]
 800d9be:	4619      	mov	r1, r3
 800d9c0:	4610      	mov	r0, r2
 800d9c2:	f7ff fe59 	bl	800d678 <create_chain>
 800d9c6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d9c8:	697b      	ldr	r3, [r7, #20]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d101      	bne.n	800d9d2 <dir_next+0xcc>
 800d9ce:	2307      	movs	r3, #7
 800d9d0:	e05a      	b.n	800da88 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	2b01      	cmp	r3, #1
 800d9d6:	d101      	bne.n	800d9dc <dir_next+0xd6>
 800d9d8:	2302      	movs	r3, #2
 800d9da:	e055      	b.n	800da88 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d9dc:	697b      	ldr	r3, [r7, #20]
 800d9de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9e2:	d101      	bne.n	800d9e8 <dir_next+0xe2>
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	e04f      	b.n	800da88 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d9e8:	68f8      	ldr	r0, [r7, #12]
 800d9ea:	f7ff fb55 	bl	800d098 <sync_window>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d001      	beq.n	800d9f8 <dir_next+0xf2>
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	e047      	b.n	800da88 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	3334      	adds	r3, #52	; 0x34
 800d9fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da00:	2100      	movs	r1, #0
 800da02:	4618      	mov	r0, r3
 800da04:	f7ff f94f 	bl	800cca6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800da08:	2300      	movs	r3, #0
 800da0a:	613b      	str	r3, [r7, #16]
 800da0c:	6979      	ldr	r1, [r7, #20]
 800da0e:	68f8      	ldr	r0, [r7, #12]
 800da10:	f7ff fc22 	bl	800d258 <clust2sect>
 800da14:	4602      	mov	r2, r0
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	631a      	str	r2, [r3, #48]	; 0x30
 800da1a:	e012      	b.n	800da42 <dir_next+0x13c>
						fs->wflag = 1;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	2201      	movs	r2, #1
 800da20:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800da22:	68f8      	ldr	r0, [r7, #12]
 800da24:	f7ff fb38 	bl	800d098 <sync_window>
 800da28:	4603      	mov	r3, r0
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d001      	beq.n	800da32 <dir_next+0x12c>
 800da2e:	2301      	movs	r3, #1
 800da30:	e02a      	b.n	800da88 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800da32:	693b      	ldr	r3, [r7, #16]
 800da34:	3301      	adds	r3, #1
 800da36:	613b      	str	r3, [r7, #16]
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da3c:	1c5a      	adds	r2, r3, #1
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	631a      	str	r2, [r3, #48]	; 0x30
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	895b      	ldrh	r3, [r3, #10]
 800da46:	461a      	mov	r2, r3
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	4293      	cmp	r3, r2
 800da4c:	d3e6      	bcc.n	800da1c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800da52:	693b      	ldr	r3, [r7, #16]
 800da54:	1ad2      	subs	r2, r2, r3
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	697a      	ldr	r2, [r7, #20]
 800da5e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800da60:	6979      	ldr	r1, [r7, #20]
 800da62:	68f8      	ldr	r0, [r7, #12]
 800da64:	f7ff fbf8 	bl	800d258 <clust2sect>
 800da68:	4602      	mov	r2, r0
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	68ba      	ldr	r2, [r7, #8]
 800da72:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da80:	441a      	add	r2, r3
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800da86:	2300      	movs	r3, #0
}
 800da88:	4618      	mov	r0, r3
 800da8a:	3718      	adds	r7, #24
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}

0800da90 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b086      	sub	sp, #24
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
 800da98:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800daa0:	2100      	movs	r1, #0
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	f7ff feb4 	bl	800d810 <dir_sdi>
 800daa8:	4603      	mov	r3, r0
 800daaa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800daac:	7dfb      	ldrb	r3, [r7, #23]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d12b      	bne.n	800db0a <dir_alloc+0x7a>
		n = 0;
 800dab2:	2300      	movs	r3, #0
 800dab4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	69db      	ldr	r3, [r3, #28]
 800daba:	4619      	mov	r1, r3
 800dabc:	68f8      	ldr	r0, [r7, #12]
 800dabe:	f7ff fb2f 	bl	800d120 <move_window>
 800dac2:	4603      	mov	r3, r0
 800dac4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dac6:	7dfb      	ldrb	r3, [r7, #23]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d11d      	bne.n	800db08 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6a1b      	ldr	r3, [r3, #32]
 800dad0:	781b      	ldrb	r3, [r3, #0]
 800dad2:	2be5      	cmp	r3, #229	; 0xe5
 800dad4:	d004      	beq.n	800dae0 <dir_alloc+0x50>
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6a1b      	ldr	r3, [r3, #32]
 800dada:	781b      	ldrb	r3, [r3, #0]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d107      	bne.n	800daf0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800dae0:	693b      	ldr	r3, [r7, #16]
 800dae2:	3301      	adds	r3, #1
 800dae4:	613b      	str	r3, [r7, #16]
 800dae6:	693a      	ldr	r2, [r7, #16]
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	429a      	cmp	r2, r3
 800daec:	d102      	bne.n	800daf4 <dir_alloc+0x64>
 800daee:	e00c      	b.n	800db0a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800daf0:	2300      	movs	r3, #0
 800daf2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800daf4:	2101      	movs	r1, #1
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	f7ff ff05 	bl	800d906 <dir_next>
 800dafc:	4603      	mov	r3, r0
 800dafe:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800db00:	7dfb      	ldrb	r3, [r7, #23]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d0d7      	beq.n	800dab6 <dir_alloc+0x26>
 800db06:	e000      	b.n	800db0a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800db08:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800db0a:	7dfb      	ldrb	r3, [r7, #23]
 800db0c:	2b04      	cmp	r3, #4
 800db0e:	d101      	bne.n	800db14 <dir_alloc+0x84>
 800db10:	2307      	movs	r3, #7
 800db12:	75fb      	strb	r3, [r7, #23]
	return res;
 800db14:	7dfb      	ldrb	r3, [r7, #23]
}
 800db16:	4618      	mov	r0, r3
 800db18:	3718      	adds	r7, #24
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}

0800db1e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800db1e:	b580      	push	{r7, lr}
 800db20:	b084      	sub	sp, #16
 800db22:	af00      	add	r7, sp, #0
 800db24:	6078      	str	r0, [r7, #4]
 800db26:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	331a      	adds	r3, #26
 800db2c:	4618      	mov	r0, r3
 800db2e:	f7ff f817 	bl	800cb60 <ld_word>
 800db32:	4603      	mov	r3, r0
 800db34:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	781b      	ldrb	r3, [r3, #0]
 800db3a:	2b03      	cmp	r3, #3
 800db3c:	d109      	bne.n	800db52 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	3314      	adds	r3, #20
 800db42:	4618      	mov	r0, r3
 800db44:	f7ff f80c 	bl	800cb60 <ld_word>
 800db48:	4603      	mov	r3, r0
 800db4a:	041b      	lsls	r3, r3, #16
 800db4c:	68fa      	ldr	r2, [r7, #12]
 800db4e:	4313      	orrs	r3, r2
 800db50:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800db52:	68fb      	ldr	r3, [r7, #12]
}
 800db54:	4618      	mov	r0, r3
 800db56:	3710      	adds	r7, #16
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}

0800db5c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b084      	sub	sp, #16
 800db60:	af00      	add	r7, sp, #0
 800db62:	60f8      	str	r0, [r7, #12]
 800db64:	60b9      	str	r1, [r7, #8]
 800db66:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	331a      	adds	r3, #26
 800db6c:	687a      	ldr	r2, [r7, #4]
 800db6e:	b292      	uxth	r2, r2
 800db70:	4611      	mov	r1, r2
 800db72:	4618      	mov	r0, r3
 800db74:	f7ff f82f 	bl	800cbd6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	781b      	ldrb	r3, [r3, #0]
 800db7c:	2b03      	cmp	r3, #3
 800db7e:	d109      	bne.n	800db94 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	f103 0214 	add.w	r2, r3, #20
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	0c1b      	lsrs	r3, r3, #16
 800db8a:	b29b      	uxth	r3, r3
 800db8c:	4619      	mov	r1, r3
 800db8e:	4610      	mov	r0, r2
 800db90:	f7ff f821 	bl	800cbd6 <st_word>
	}
}
 800db94:	bf00      	nop
 800db96:	3710      	adds	r7, #16
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}

0800db9c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b086      	sub	sp, #24
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800dbaa:	2100      	movs	r1, #0
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f7ff fe2f 	bl	800d810 <dir_sdi>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800dbb6:	7dfb      	ldrb	r3, [r7, #23]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d001      	beq.n	800dbc0 <dir_find+0x24>
 800dbbc:	7dfb      	ldrb	r3, [r7, #23]
 800dbbe:	e03e      	b.n	800dc3e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	69db      	ldr	r3, [r3, #28]
 800dbc4:	4619      	mov	r1, r3
 800dbc6:	6938      	ldr	r0, [r7, #16]
 800dbc8:	f7ff faaa 	bl	800d120 <move_window>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800dbd0:	7dfb      	ldrb	r3, [r7, #23]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d12f      	bne.n	800dc36 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6a1b      	ldr	r3, [r3, #32]
 800dbda:	781b      	ldrb	r3, [r3, #0]
 800dbdc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800dbde:	7bfb      	ldrb	r3, [r7, #15]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d102      	bne.n	800dbea <dir_find+0x4e>
 800dbe4:	2304      	movs	r3, #4
 800dbe6:	75fb      	strb	r3, [r7, #23]
 800dbe8:	e028      	b.n	800dc3c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6a1b      	ldr	r3, [r3, #32]
 800dbee:	330b      	adds	r3, #11
 800dbf0:	781b      	ldrb	r3, [r3, #0]
 800dbf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dbf6:	b2da      	uxtb	r2, r3
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	6a1b      	ldr	r3, [r3, #32]
 800dc00:	330b      	adds	r3, #11
 800dc02:	781b      	ldrb	r3, [r3, #0]
 800dc04:	f003 0308 	and.w	r3, r3, #8
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d10a      	bne.n	800dc22 <dir_find+0x86>
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	6a18      	ldr	r0, [r3, #32]
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	3324      	adds	r3, #36	; 0x24
 800dc14:	220b      	movs	r2, #11
 800dc16:	4619      	mov	r1, r3
 800dc18:	f7ff f85f 	bl	800ccda <mem_cmp>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d00b      	beq.n	800dc3a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800dc22:	2100      	movs	r1, #0
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	f7ff fe6e 	bl	800d906 <dir_next>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800dc2e:	7dfb      	ldrb	r3, [r7, #23]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d0c5      	beq.n	800dbc0 <dir_find+0x24>
 800dc34:	e002      	b.n	800dc3c <dir_find+0xa0>
		if (res != FR_OK) break;
 800dc36:	bf00      	nop
 800dc38:	e000      	b.n	800dc3c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800dc3a:	bf00      	nop

	return res;
 800dc3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3718      	adds	r7, #24
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}

0800dc46 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800dc46:	b580      	push	{r7, lr}
 800dc48:	b084      	sub	sp, #16
 800dc4a:	af00      	add	r7, sp, #0
 800dc4c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800dc54:	2101      	movs	r1, #1
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f7ff ff1a 	bl	800da90 <dir_alloc>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800dc60:	7bfb      	ldrb	r3, [r7, #15]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d11c      	bne.n	800dca0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	69db      	ldr	r3, [r3, #28]
 800dc6a:	4619      	mov	r1, r3
 800dc6c:	68b8      	ldr	r0, [r7, #8]
 800dc6e:	f7ff fa57 	bl	800d120 <move_window>
 800dc72:	4603      	mov	r3, r0
 800dc74:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800dc76:	7bfb      	ldrb	r3, [r7, #15]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d111      	bne.n	800dca0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	6a1b      	ldr	r3, [r3, #32]
 800dc80:	2220      	movs	r2, #32
 800dc82:	2100      	movs	r1, #0
 800dc84:	4618      	mov	r0, r3
 800dc86:	f7ff f80e 	bl	800cca6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6a18      	ldr	r0, [r3, #32]
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	3324      	adds	r3, #36	; 0x24
 800dc92:	220b      	movs	r2, #11
 800dc94:	4619      	mov	r1, r3
 800dc96:	f7fe ffe5 	bl	800cc64 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800dc9a:	68bb      	ldr	r3, [r7, #8]
 800dc9c:	2201      	movs	r2, #1
 800dc9e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800dca0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	3710      	adds	r7, #16
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}
	...

0800dcac <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b088      	sub	sp, #32
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
 800dcb4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	60fb      	str	r3, [r7, #12]
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	3324      	adds	r3, #36	; 0x24
 800dcc0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800dcc2:	220b      	movs	r2, #11
 800dcc4:	2120      	movs	r1, #32
 800dcc6:	68b8      	ldr	r0, [r7, #8]
 800dcc8:	f7fe ffed 	bl	800cca6 <mem_set>
	si = i = 0; ni = 8;
 800dccc:	2300      	movs	r3, #0
 800dcce:	613b      	str	r3, [r7, #16]
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	617b      	str	r3, [r7, #20]
 800dcd4:	2308      	movs	r3, #8
 800dcd6:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800dcd8:	697b      	ldr	r3, [r7, #20]
 800dcda:	1c5a      	adds	r2, r3, #1
 800dcdc:	617a      	str	r2, [r7, #20]
 800dcde:	68fa      	ldr	r2, [r7, #12]
 800dce0:	4413      	add	r3, r2
 800dce2:	781b      	ldrb	r3, [r3, #0]
 800dce4:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800dce6:	7ffb      	ldrb	r3, [r7, #31]
 800dce8:	2b20      	cmp	r3, #32
 800dcea:	d94e      	bls.n	800dd8a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800dcec:	7ffb      	ldrb	r3, [r7, #31]
 800dcee:	2b2f      	cmp	r3, #47	; 0x2f
 800dcf0:	d006      	beq.n	800dd00 <create_name+0x54>
 800dcf2:	7ffb      	ldrb	r3, [r7, #31]
 800dcf4:	2b5c      	cmp	r3, #92	; 0x5c
 800dcf6:	d110      	bne.n	800dd1a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800dcf8:	e002      	b.n	800dd00 <create_name+0x54>
 800dcfa:	697b      	ldr	r3, [r7, #20]
 800dcfc:	3301      	adds	r3, #1
 800dcfe:	617b      	str	r3, [r7, #20]
 800dd00:	68fa      	ldr	r2, [r7, #12]
 800dd02:	697b      	ldr	r3, [r7, #20]
 800dd04:	4413      	add	r3, r2
 800dd06:	781b      	ldrb	r3, [r3, #0]
 800dd08:	2b2f      	cmp	r3, #47	; 0x2f
 800dd0a:	d0f6      	beq.n	800dcfa <create_name+0x4e>
 800dd0c:	68fa      	ldr	r2, [r7, #12]
 800dd0e:	697b      	ldr	r3, [r7, #20]
 800dd10:	4413      	add	r3, r2
 800dd12:	781b      	ldrb	r3, [r3, #0]
 800dd14:	2b5c      	cmp	r3, #92	; 0x5c
 800dd16:	d0f0      	beq.n	800dcfa <create_name+0x4e>
			break;
 800dd18:	e038      	b.n	800dd8c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800dd1a:	7ffb      	ldrb	r3, [r7, #31]
 800dd1c:	2b2e      	cmp	r3, #46	; 0x2e
 800dd1e:	d003      	beq.n	800dd28 <create_name+0x7c>
 800dd20:	693a      	ldr	r2, [r7, #16]
 800dd22:	69bb      	ldr	r3, [r7, #24]
 800dd24:	429a      	cmp	r2, r3
 800dd26:	d30c      	bcc.n	800dd42 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800dd28:	69bb      	ldr	r3, [r7, #24]
 800dd2a:	2b0b      	cmp	r3, #11
 800dd2c:	d002      	beq.n	800dd34 <create_name+0x88>
 800dd2e:	7ffb      	ldrb	r3, [r7, #31]
 800dd30:	2b2e      	cmp	r3, #46	; 0x2e
 800dd32:	d001      	beq.n	800dd38 <create_name+0x8c>
 800dd34:	2306      	movs	r3, #6
 800dd36:	e044      	b.n	800ddc2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800dd38:	2308      	movs	r3, #8
 800dd3a:	613b      	str	r3, [r7, #16]
 800dd3c:	230b      	movs	r3, #11
 800dd3e:	61bb      	str	r3, [r7, #24]
			continue;
 800dd40:	e022      	b.n	800dd88 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800dd42:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	da04      	bge.n	800dd54 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800dd4a:	7ffb      	ldrb	r3, [r7, #31]
 800dd4c:	3b80      	subs	r3, #128	; 0x80
 800dd4e:	4a1f      	ldr	r2, [pc, #124]	; (800ddcc <create_name+0x120>)
 800dd50:	5cd3      	ldrb	r3, [r2, r3]
 800dd52:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800dd54:	7ffb      	ldrb	r3, [r7, #31]
 800dd56:	4619      	mov	r1, r3
 800dd58:	481d      	ldr	r0, [pc, #116]	; (800ddd0 <create_name+0x124>)
 800dd5a:	f7fe ffe5 	bl	800cd28 <chk_chr>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d001      	beq.n	800dd68 <create_name+0xbc>
 800dd64:	2306      	movs	r3, #6
 800dd66:	e02c      	b.n	800ddc2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800dd68:	7ffb      	ldrb	r3, [r7, #31]
 800dd6a:	2b60      	cmp	r3, #96	; 0x60
 800dd6c:	d905      	bls.n	800dd7a <create_name+0xce>
 800dd6e:	7ffb      	ldrb	r3, [r7, #31]
 800dd70:	2b7a      	cmp	r3, #122	; 0x7a
 800dd72:	d802      	bhi.n	800dd7a <create_name+0xce>
 800dd74:	7ffb      	ldrb	r3, [r7, #31]
 800dd76:	3b20      	subs	r3, #32
 800dd78:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800dd7a:	693b      	ldr	r3, [r7, #16]
 800dd7c:	1c5a      	adds	r2, r3, #1
 800dd7e:	613a      	str	r2, [r7, #16]
 800dd80:	68ba      	ldr	r2, [r7, #8]
 800dd82:	4413      	add	r3, r2
 800dd84:	7ffa      	ldrb	r2, [r7, #31]
 800dd86:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800dd88:	e7a6      	b.n	800dcd8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800dd8a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800dd8c:	68fa      	ldr	r2, [r7, #12]
 800dd8e:	697b      	ldr	r3, [r7, #20]
 800dd90:	441a      	add	r2, r3
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800dd96:	693b      	ldr	r3, [r7, #16]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d101      	bne.n	800dda0 <create_name+0xf4>
 800dd9c:	2306      	movs	r3, #6
 800dd9e:	e010      	b.n	800ddc2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	781b      	ldrb	r3, [r3, #0]
 800dda4:	2be5      	cmp	r3, #229	; 0xe5
 800dda6:	d102      	bne.n	800ddae <create_name+0x102>
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	2205      	movs	r2, #5
 800ddac:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ddae:	7ffb      	ldrb	r3, [r7, #31]
 800ddb0:	2b20      	cmp	r3, #32
 800ddb2:	d801      	bhi.n	800ddb8 <create_name+0x10c>
 800ddb4:	2204      	movs	r2, #4
 800ddb6:	e000      	b.n	800ddba <create_name+0x10e>
 800ddb8:	2200      	movs	r2, #0
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	330b      	adds	r3, #11
 800ddbe:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ddc0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3720      	adds	r7, #32
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}
 800ddca:	bf00      	nop
 800ddcc:	08015d34 	.word	0x08015d34
 800ddd0:	08015c88 	.word	0x08015c88

0800ddd4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b086      	sub	sp, #24
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
 800dddc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800dde2:	693b      	ldr	r3, [r7, #16]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800dde8:	e002      	b.n	800ddf0 <follow_path+0x1c>
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	3301      	adds	r3, #1
 800ddee:	603b      	str	r3, [r7, #0]
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	781b      	ldrb	r3, [r3, #0]
 800ddf4:	2b2f      	cmp	r3, #47	; 0x2f
 800ddf6:	d0f8      	beq.n	800ddea <follow_path+0x16>
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	781b      	ldrb	r3, [r3, #0]
 800ddfc:	2b5c      	cmp	r3, #92	; 0x5c
 800ddfe:	d0f4      	beq.n	800ddea <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800de00:	693b      	ldr	r3, [r7, #16]
 800de02:	2200      	movs	r2, #0
 800de04:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	781b      	ldrb	r3, [r3, #0]
 800de0a:	2b1f      	cmp	r3, #31
 800de0c:	d80a      	bhi.n	800de24 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2280      	movs	r2, #128	; 0x80
 800de12:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800de16:	2100      	movs	r1, #0
 800de18:	6878      	ldr	r0, [r7, #4]
 800de1a:	f7ff fcf9 	bl	800d810 <dir_sdi>
 800de1e:	4603      	mov	r3, r0
 800de20:	75fb      	strb	r3, [r7, #23]
 800de22:	e043      	b.n	800deac <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800de24:	463b      	mov	r3, r7
 800de26:	4619      	mov	r1, r3
 800de28:	6878      	ldr	r0, [r7, #4]
 800de2a:	f7ff ff3f 	bl	800dcac <create_name>
 800de2e:	4603      	mov	r3, r0
 800de30:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800de32:	7dfb      	ldrb	r3, [r7, #23]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d134      	bne.n	800dea2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f7ff feaf 	bl	800db9c <dir_find>
 800de3e:	4603      	mov	r3, r0
 800de40:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800de48:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800de4a:	7dfb      	ldrb	r3, [r7, #23]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d00a      	beq.n	800de66 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800de50:	7dfb      	ldrb	r3, [r7, #23]
 800de52:	2b04      	cmp	r3, #4
 800de54:	d127      	bne.n	800dea6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800de56:	7afb      	ldrb	r3, [r7, #11]
 800de58:	f003 0304 	and.w	r3, r3, #4
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d122      	bne.n	800dea6 <follow_path+0xd2>
 800de60:	2305      	movs	r3, #5
 800de62:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800de64:	e01f      	b.n	800dea6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800de66:	7afb      	ldrb	r3, [r7, #11]
 800de68:	f003 0304 	and.w	r3, r3, #4
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d11c      	bne.n	800deaa <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800de70:	693b      	ldr	r3, [r7, #16]
 800de72:	799b      	ldrb	r3, [r3, #6]
 800de74:	f003 0310 	and.w	r3, r3, #16
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d102      	bne.n	800de82 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800de7c:	2305      	movs	r3, #5
 800de7e:	75fb      	strb	r3, [r7, #23]
 800de80:	e014      	b.n	800deac <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	695b      	ldr	r3, [r3, #20]
 800de8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de90:	4413      	add	r3, r2
 800de92:	4619      	mov	r1, r3
 800de94:	68f8      	ldr	r0, [r7, #12]
 800de96:	f7ff fe42 	bl	800db1e <ld_clust>
 800de9a:	4602      	mov	r2, r0
 800de9c:	693b      	ldr	r3, [r7, #16]
 800de9e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dea0:	e7c0      	b.n	800de24 <follow_path+0x50>
			if (res != FR_OK) break;
 800dea2:	bf00      	nop
 800dea4:	e002      	b.n	800deac <follow_path+0xd8>
				break;
 800dea6:	bf00      	nop
 800dea8:	e000      	b.n	800deac <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800deaa:	bf00      	nop
			}
		}
	}

	return res;
 800deac:	7dfb      	ldrb	r3, [r7, #23]
}
 800deae:	4618      	mov	r0, r3
 800deb0:	3718      	adds	r7, #24
 800deb2:	46bd      	mov	sp, r7
 800deb4:	bd80      	pop	{r7, pc}

0800deb6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800deb6:	b480      	push	{r7}
 800deb8:	b087      	sub	sp, #28
 800deba:	af00      	add	r7, sp, #0
 800debc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800debe:	f04f 33ff 	mov.w	r3, #4294967295
 800dec2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d031      	beq.n	800df30 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	617b      	str	r3, [r7, #20]
 800ded2:	e002      	b.n	800deda <get_ldnumber+0x24>
 800ded4:	697b      	ldr	r3, [r7, #20]
 800ded6:	3301      	adds	r3, #1
 800ded8:	617b      	str	r3, [r7, #20]
 800deda:	697b      	ldr	r3, [r7, #20]
 800dedc:	781b      	ldrb	r3, [r3, #0]
 800dede:	2b20      	cmp	r3, #32
 800dee0:	d903      	bls.n	800deea <get_ldnumber+0x34>
 800dee2:	697b      	ldr	r3, [r7, #20]
 800dee4:	781b      	ldrb	r3, [r3, #0]
 800dee6:	2b3a      	cmp	r3, #58	; 0x3a
 800dee8:	d1f4      	bne.n	800ded4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800deea:	697b      	ldr	r3, [r7, #20]
 800deec:	781b      	ldrb	r3, [r3, #0]
 800deee:	2b3a      	cmp	r3, #58	; 0x3a
 800def0:	d11c      	bne.n	800df2c <get_ldnumber+0x76>
			tp = *path;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	1c5a      	adds	r2, r3, #1
 800defc:	60fa      	str	r2, [r7, #12]
 800defe:	781b      	ldrb	r3, [r3, #0]
 800df00:	3b30      	subs	r3, #48	; 0x30
 800df02:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800df04:	68bb      	ldr	r3, [r7, #8]
 800df06:	2b09      	cmp	r3, #9
 800df08:	d80e      	bhi.n	800df28 <get_ldnumber+0x72>
 800df0a:	68fa      	ldr	r2, [r7, #12]
 800df0c:	697b      	ldr	r3, [r7, #20]
 800df0e:	429a      	cmp	r2, r3
 800df10:	d10a      	bne.n	800df28 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d107      	bne.n	800df28 <get_ldnumber+0x72>
					vol = (int)i;
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800df1c:	697b      	ldr	r3, [r7, #20]
 800df1e:	3301      	adds	r3, #1
 800df20:	617b      	str	r3, [r7, #20]
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	697a      	ldr	r2, [r7, #20]
 800df26:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800df28:	693b      	ldr	r3, [r7, #16]
 800df2a:	e002      	b.n	800df32 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800df2c:	2300      	movs	r3, #0
 800df2e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800df30:	693b      	ldr	r3, [r7, #16]
}
 800df32:	4618      	mov	r0, r3
 800df34:	371c      	adds	r7, #28
 800df36:	46bd      	mov	sp, r7
 800df38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3c:	4770      	bx	lr
	...

0800df40 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b082      	sub	sp, #8
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
 800df48:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	2200      	movs	r2, #0
 800df4e:	70da      	strb	r2, [r3, #3]
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f04f 32ff 	mov.w	r2, #4294967295
 800df56:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800df58:	6839      	ldr	r1, [r7, #0]
 800df5a:	6878      	ldr	r0, [r7, #4]
 800df5c:	f7ff f8e0 	bl	800d120 <move_window>
 800df60:	4603      	mov	r3, r0
 800df62:	2b00      	cmp	r3, #0
 800df64:	d001      	beq.n	800df6a <check_fs+0x2a>
 800df66:	2304      	movs	r3, #4
 800df68:	e038      	b.n	800dfdc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	3334      	adds	r3, #52	; 0x34
 800df6e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800df72:	4618      	mov	r0, r3
 800df74:	f7fe fdf4 	bl	800cb60 <ld_word>
 800df78:	4603      	mov	r3, r0
 800df7a:	461a      	mov	r2, r3
 800df7c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800df80:	429a      	cmp	r2, r3
 800df82:	d001      	beq.n	800df88 <check_fs+0x48>
 800df84:	2303      	movs	r3, #3
 800df86:	e029      	b.n	800dfdc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800df8e:	2be9      	cmp	r3, #233	; 0xe9
 800df90:	d009      	beq.n	800dfa6 <check_fs+0x66>
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800df98:	2beb      	cmp	r3, #235	; 0xeb
 800df9a:	d11e      	bne.n	800dfda <check_fs+0x9a>
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800dfa2:	2b90      	cmp	r3, #144	; 0x90
 800dfa4:	d119      	bne.n	800dfda <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	3334      	adds	r3, #52	; 0x34
 800dfaa:	3336      	adds	r3, #54	; 0x36
 800dfac:	4618      	mov	r0, r3
 800dfae:	f7fe fdef 	bl	800cb90 <ld_dword>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800dfb8:	4a0a      	ldr	r2, [pc, #40]	; (800dfe4 <check_fs+0xa4>)
 800dfba:	4293      	cmp	r3, r2
 800dfbc:	d101      	bne.n	800dfc2 <check_fs+0x82>
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	e00c      	b.n	800dfdc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	3334      	adds	r3, #52	; 0x34
 800dfc6:	3352      	adds	r3, #82	; 0x52
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f7fe fde1 	bl	800cb90 <ld_dword>
 800dfce:	4602      	mov	r2, r0
 800dfd0:	4b05      	ldr	r3, [pc, #20]	; (800dfe8 <check_fs+0xa8>)
 800dfd2:	429a      	cmp	r2, r3
 800dfd4:	d101      	bne.n	800dfda <check_fs+0x9a>
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	e000      	b.n	800dfdc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800dfda:	2302      	movs	r3, #2
}
 800dfdc:	4618      	mov	r0, r3
 800dfde:	3708      	adds	r7, #8
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}
 800dfe4:	00544146 	.word	0x00544146
 800dfe8:	33544146 	.word	0x33544146

0800dfec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b096      	sub	sp, #88	; 0x58
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	60f8      	str	r0, [r7, #12]
 800dff4:	60b9      	str	r1, [r7, #8]
 800dff6:	4613      	mov	r3, r2
 800dff8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800dffa:	68bb      	ldr	r3, [r7, #8]
 800dffc:	2200      	movs	r2, #0
 800dffe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e000:	68f8      	ldr	r0, [r7, #12]
 800e002:	f7ff ff58 	bl	800deb6 <get_ldnumber>
 800e006:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	da01      	bge.n	800e012 <find_volume+0x26>
 800e00e:	230b      	movs	r3, #11
 800e010:	e236      	b.n	800e480 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e012:	4aac      	ldr	r2, [pc, #688]	; (800e2c4 <find_volume+0x2d8>)
 800e014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e01a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d101      	bne.n	800e026 <find_volume+0x3a>
 800e022:	230c      	movs	r3, #12
 800e024:	e22c      	b.n	800e480 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800e026:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e028:	f7fe fe99 	bl	800cd5e <lock_fs>
 800e02c:	4603      	mov	r3, r0
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d101      	bne.n	800e036 <find_volume+0x4a>
 800e032:	230f      	movs	r3, #15
 800e034:	e224      	b.n	800e480 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e03a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e03c:	79fb      	ldrb	r3, [r7, #7]
 800e03e:	f023 0301 	bic.w	r3, r3, #1
 800e042:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e046:	781b      	ldrb	r3, [r3, #0]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d01a      	beq.n	800e082 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800e04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e04e:	785b      	ldrb	r3, [r3, #1]
 800e050:	4618      	mov	r0, r3
 800e052:	f7fe fce7 	bl	800ca24 <disk_status>
 800e056:	4603      	mov	r3, r0
 800e058:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e05c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e060:	f003 0301 	and.w	r3, r3, #1
 800e064:	2b00      	cmp	r3, #0
 800e066:	d10c      	bne.n	800e082 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e068:	79fb      	ldrb	r3, [r7, #7]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d007      	beq.n	800e07e <find_volume+0x92>
 800e06e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e072:	f003 0304 	and.w	r3, r3, #4
 800e076:	2b00      	cmp	r3, #0
 800e078:	d001      	beq.n	800e07e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800e07a:	230a      	movs	r3, #10
 800e07c:	e200      	b.n	800e480 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800e07e:	2300      	movs	r3, #0
 800e080:	e1fe      	b.n	800e480 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e084:	2200      	movs	r2, #0
 800e086:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e08a:	b2da      	uxtb	r2, r3
 800e08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e08e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e092:	785b      	ldrb	r3, [r3, #1]
 800e094:	4618      	mov	r0, r3
 800e096:	f7fe fcdf 	bl	800ca58 <disk_initialize>
 800e09a:	4603      	mov	r3, r0
 800e09c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e0a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e0a4:	f003 0301 	and.w	r3, r3, #1
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d001      	beq.n	800e0b0 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e0ac:	2303      	movs	r3, #3
 800e0ae:	e1e7      	b.n	800e480 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e0b0:	79fb      	ldrb	r3, [r7, #7]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d007      	beq.n	800e0c6 <find_volume+0xda>
 800e0b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e0ba:	f003 0304 	and.w	r3, r3, #4
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d001      	beq.n	800e0c6 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800e0c2:	230a      	movs	r3, #10
 800e0c4:	e1dc      	b.n	800e480 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e0ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e0cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e0ce:	f7ff ff37 	bl	800df40 <check_fs>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e0d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e0dc:	2b02      	cmp	r3, #2
 800e0de:	d14b      	bne.n	800e178 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	643b      	str	r3, [r7, #64]	; 0x40
 800e0e4:	e01f      	b.n	800e126 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0e8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e0ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0ee:	011b      	lsls	r3, r3, #4
 800e0f0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e0f4:	4413      	add	r3, r2
 800e0f6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0fa:	3304      	adds	r3, #4
 800e0fc:	781b      	ldrb	r3, [r3, #0]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d006      	beq.n	800e110 <find_volume+0x124>
 800e102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e104:	3308      	adds	r3, #8
 800e106:	4618      	mov	r0, r3
 800e108:	f7fe fd42 	bl	800cb90 <ld_dword>
 800e10c:	4602      	mov	r2, r0
 800e10e:	e000      	b.n	800e112 <find_volume+0x126>
 800e110:	2200      	movs	r2, #0
 800e112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e114:	009b      	lsls	r3, r3, #2
 800e116:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800e11a:	440b      	add	r3, r1
 800e11c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e122:	3301      	adds	r3, #1
 800e124:	643b      	str	r3, [r7, #64]	; 0x40
 800e126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e128:	2b03      	cmp	r3, #3
 800e12a:	d9dc      	bls.n	800e0e6 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e12c:	2300      	movs	r3, #0
 800e12e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e132:	2b00      	cmp	r3, #0
 800e134:	d002      	beq.n	800e13c <find_volume+0x150>
 800e136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e138:	3b01      	subs	r3, #1
 800e13a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e13c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e13e:	009b      	lsls	r3, r3, #2
 800e140:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800e144:	4413      	add	r3, r2
 800e146:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e14a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e14c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d005      	beq.n	800e15e <find_volume+0x172>
 800e152:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e154:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e156:	f7ff fef3 	bl	800df40 <check_fs>
 800e15a:	4603      	mov	r3, r0
 800e15c:	e000      	b.n	800e160 <find_volume+0x174>
 800e15e:	2303      	movs	r3, #3
 800e160:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e164:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e168:	2b01      	cmp	r3, #1
 800e16a:	d905      	bls.n	800e178 <find_volume+0x18c>
 800e16c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e16e:	3301      	adds	r3, #1
 800e170:	643b      	str	r3, [r7, #64]	; 0x40
 800e172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e174:	2b03      	cmp	r3, #3
 800e176:	d9e1      	bls.n	800e13c <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e178:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e17c:	2b04      	cmp	r3, #4
 800e17e:	d101      	bne.n	800e184 <find_volume+0x198>
 800e180:	2301      	movs	r3, #1
 800e182:	e17d      	b.n	800e480 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e184:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e188:	2b01      	cmp	r3, #1
 800e18a:	d901      	bls.n	800e190 <find_volume+0x1a4>
 800e18c:	230d      	movs	r3, #13
 800e18e:	e177      	b.n	800e480 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e192:	3334      	adds	r3, #52	; 0x34
 800e194:	330b      	adds	r3, #11
 800e196:	4618      	mov	r0, r3
 800e198:	f7fe fce2 	bl	800cb60 <ld_word>
 800e19c:	4603      	mov	r3, r0
 800e19e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e1a2:	d001      	beq.n	800e1a8 <find_volume+0x1bc>
 800e1a4:	230d      	movs	r3, #13
 800e1a6:	e16b      	b.n	800e480 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1aa:	3334      	adds	r3, #52	; 0x34
 800e1ac:	3316      	adds	r3, #22
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f7fe fcd6 	bl	800cb60 <ld_word>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e1b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d106      	bne.n	800e1cc <find_volume+0x1e0>
 800e1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1c0:	3334      	adds	r3, #52	; 0x34
 800e1c2:	3324      	adds	r3, #36	; 0x24
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	f7fe fce3 	bl	800cb90 <ld_dword>
 800e1ca:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e1d0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1d4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1da:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1de:	789b      	ldrb	r3, [r3, #2]
 800e1e0:	2b01      	cmp	r3, #1
 800e1e2:	d005      	beq.n	800e1f0 <find_volume+0x204>
 800e1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1e6:	789b      	ldrb	r3, [r3, #2]
 800e1e8:	2b02      	cmp	r3, #2
 800e1ea:	d001      	beq.n	800e1f0 <find_volume+0x204>
 800e1ec:	230d      	movs	r3, #13
 800e1ee:	e147      	b.n	800e480 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1f2:	789b      	ldrb	r3, [r3, #2]
 800e1f4:	461a      	mov	r2, r3
 800e1f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1f8:	fb02 f303 	mul.w	r3, r2, r3
 800e1fc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e200:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e204:	b29a      	uxth	r2, r3
 800e206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e208:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e20c:	895b      	ldrh	r3, [r3, #10]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d008      	beq.n	800e224 <find_volume+0x238>
 800e212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e214:	895b      	ldrh	r3, [r3, #10]
 800e216:	461a      	mov	r2, r3
 800e218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e21a:	895b      	ldrh	r3, [r3, #10]
 800e21c:	3b01      	subs	r3, #1
 800e21e:	4013      	ands	r3, r2
 800e220:	2b00      	cmp	r3, #0
 800e222:	d001      	beq.n	800e228 <find_volume+0x23c>
 800e224:	230d      	movs	r3, #13
 800e226:	e12b      	b.n	800e480 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e22a:	3334      	adds	r3, #52	; 0x34
 800e22c:	3311      	adds	r3, #17
 800e22e:	4618      	mov	r0, r3
 800e230:	f7fe fc96 	bl	800cb60 <ld_word>
 800e234:	4603      	mov	r3, r0
 800e236:	461a      	mov	r2, r3
 800e238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e23a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e23e:	891b      	ldrh	r3, [r3, #8]
 800e240:	f003 030f 	and.w	r3, r3, #15
 800e244:	b29b      	uxth	r3, r3
 800e246:	2b00      	cmp	r3, #0
 800e248:	d001      	beq.n	800e24e <find_volume+0x262>
 800e24a:	230d      	movs	r3, #13
 800e24c:	e118      	b.n	800e480 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e250:	3334      	adds	r3, #52	; 0x34
 800e252:	3313      	adds	r3, #19
 800e254:	4618      	mov	r0, r3
 800e256:	f7fe fc83 	bl	800cb60 <ld_word>
 800e25a:	4603      	mov	r3, r0
 800e25c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e25e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e260:	2b00      	cmp	r3, #0
 800e262:	d106      	bne.n	800e272 <find_volume+0x286>
 800e264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e266:	3334      	adds	r3, #52	; 0x34
 800e268:	3320      	adds	r3, #32
 800e26a:	4618      	mov	r0, r3
 800e26c:	f7fe fc90 	bl	800cb90 <ld_dword>
 800e270:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e274:	3334      	adds	r3, #52	; 0x34
 800e276:	330e      	adds	r3, #14
 800e278:	4618      	mov	r0, r3
 800e27a:	f7fe fc71 	bl	800cb60 <ld_word>
 800e27e:	4603      	mov	r3, r0
 800e280:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e282:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e284:	2b00      	cmp	r3, #0
 800e286:	d101      	bne.n	800e28c <find_volume+0x2a0>
 800e288:	230d      	movs	r3, #13
 800e28a:	e0f9      	b.n	800e480 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e28c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e28e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e290:	4413      	add	r3, r2
 800e292:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e294:	8912      	ldrh	r2, [r2, #8]
 800e296:	0912      	lsrs	r2, r2, #4
 800e298:	b292      	uxth	r2, r2
 800e29a:	4413      	add	r3, r2
 800e29c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e29e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a2:	429a      	cmp	r2, r3
 800e2a4:	d201      	bcs.n	800e2aa <find_volume+0x2be>
 800e2a6:	230d      	movs	r3, #13
 800e2a8:	e0ea      	b.n	800e480 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e2aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ae:	1ad3      	subs	r3, r2, r3
 800e2b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e2b2:	8952      	ldrh	r2, [r2, #10]
 800e2b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800e2b8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d103      	bne.n	800e2c8 <find_volume+0x2dc>
 800e2c0:	230d      	movs	r3, #13
 800e2c2:	e0dd      	b.n	800e480 <find_volume+0x494>
 800e2c4:	200000b4 	.word	0x200000b4
		fmt = FS_FAT32;
 800e2c8:	2303      	movs	r3, #3
 800e2ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2d0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e2d4:	4293      	cmp	r3, r2
 800e2d6:	d802      	bhi.n	800e2de <find_volume+0x2f2>
 800e2d8:	2302      	movs	r3, #2
 800e2da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e2e4:	4293      	cmp	r3, r2
 800e2e6:	d802      	bhi.n	800e2ee <find_volume+0x302>
 800e2e8:	2301      	movs	r3, #1
 800e2ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f0:	1c9a      	adds	r2, r3, #2
 800e2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2f4:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800e2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e2fa:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e2fc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e2fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e300:	441a      	add	r2, r3
 800e302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e304:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800e306:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e30a:	441a      	add	r2, r3
 800e30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e30e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800e310:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e314:	2b03      	cmp	r3, #3
 800e316:	d11e      	bne.n	800e356 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e31a:	3334      	adds	r3, #52	; 0x34
 800e31c:	332a      	adds	r3, #42	; 0x2a
 800e31e:	4618      	mov	r0, r3
 800e320:	f7fe fc1e 	bl	800cb60 <ld_word>
 800e324:	4603      	mov	r3, r0
 800e326:	2b00      	cmp	r3, #0
 800e328:	d001      	beq.n	800e32e <find_volume+0x342>
 800e32a:	230d      	movs	r3, #13
 800e32c:	e0a8      	b.n	800e480 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e330:	891b      	ldrh	r3, [r3, #8]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d001      	beq.n	800e33a <find_volume+0x34e>
 800e336:	230d      	movs	r3, #13
 800e338:	e0a2      	b.n	800e480 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e33c:	3334      	adds	r3, #52	; 0x34
 800e33e:	332c      	adds	r3, #44	; 0x2c
 800e340:	4618      	mov	r0, r3
 800e342:	f7fe fc25 	bl	800cb90 <ld_dword>
 800e346:	4602      	mov	r2, r0
 800e348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e34a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e34e:	699b      	ldr	r3, [r3, #24]
 800e350:	009b      	lsls	r3, r3, #2
 800e352:	647b      	str	r3, [r7, #68]	; 0x44
 800e354:	e01f      	b.n	800e396 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e358:	891b      	ldrh	r3, [r3, #8]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d101      	bne.n	800e362 <find_volume+0x376>
 800e35e:	230d      	movs	r3, #13
 800e360:	e08e      	b.n	800e480 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e364:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e368:	441a      	add	r2, r3
 800e36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e36c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e36e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e372:	2b02      	cmp	r3, #2
 800e374:	d103      	bne.n	800e37e <find_volume+0x392>
 800e376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e378:	699b      	ldr	r3, [r3, #24]
 800e37a:	005b      	lsls	r3, r3, #1
 800e37c:	e00a      	b.n	800e394 <find_volume+0x3a8>
 800e37e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e380:	699a      	ldr	r2, [r3, #24]
 800e382:	4613      	mov	r3, r2
 800e384:	005b      	lsls	r3, r3, #1
 800e386:	4413      	add	r3, r2
 800e388:	085a      	lsrs	r2, r3, #1
 800e38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e38c:	699b      	ldr	r3, [r3, #24]
 800e38e:	f003 0301 	and.w	r3, r3, #1
 800e392:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e394:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e398:	69da      	ldr	r2, [r3, #28]
 800e39a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e39c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e3a0:	0a5b      	lsrs	r3, r3, #9
 800e3a2:	429a      	cmp	r2, r3
 800e3a4:	d201      	bcs.n	800e3aa <find_volume+0x3be>
 800e3a6:	230d      	movs	r3, #13
 800e3a8:	e06a      	b.n	800e480 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ac:	f04f 32ff 	mov.w	r2, #4294967295
 800e3b0:	615a      	str	r2, [r3, #20]
 800e3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3b4:	695a      	ldr	r2, [r3, #20]
 800e3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3b8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800e3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3bc:	2280      	movs	r2, #128	; 0x80
 800e3be:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e3c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e3c4:	2b03      	cmp	r3, #3
 800e3c6:	d149      	bne.n	800e45c <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ca:	3334      	adds	r3, #52	; 0x34
 800e3cc:	3330      	adds	r3, #48	; 0x30
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f7fe fbc6 	bl	800cb60 <ld_word>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	2b01      	cmp	r3, #1
 800e3d8:	d140      	bne.n	800e45c <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e3da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3dc:	3301      	adds	r3, #1
 800e3de:	4619      	mov	r1, r3
 800e3e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e3e2:	f7fe fe9d 	bl	800d120 <move_window>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d137      	bne.n	800e45c <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800e3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3f4:	3334      	adds	r3, #52	; 0x34
 800e3f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f7fe fbb0 	bl	800cb60 <ld_word>
 800e400:	4603      	mov	r3, r0
 800e402:	461a      	mov	r2, r3
 800e404:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e408:	429a      	cmp	r2, r3
 800e40a:	d127      	bne.n	800e45c <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e40e:	3334      	adds	r3, #52	; 0x34
 800e410:	4618      	mov	r0, r3
 800e412:	f7fe fbbd 	bl	800cb90 <ld_dword>
 800e416:	4602      	mov	r2, r0
 800e418:	4b1b      	ldr	r3, [pc, #108]	; (800e488 <find_volume+0x49c>)
 800e41a:	429a      	cmp	r2, r3
 800e41c:	d11e      	bne.n	800e45c <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e420:	3334      	adds	r3, #52	; 0x34
 800e422:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e426:	4618      	mov	r0, r3
 800e428:	f7fe fbb2 	bl	800cb90 <ld_dword>
 800e42c:	4602      	mov	r2, r0
 800e42e:	4b17      	ldr	r3, [pc, #92]	; (800e48c <find_volume+0x4a0>)
 800e430:	429a      	cmp	r2, r3
 800e432:	d113      	bne.n	800e45c <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e436:	3334      	adds	r3, #52	; 0x34
 800e438:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e43c:	4618      	mov	r0, r3
 800e43e:	f7fe fba7 	bl	800cb90 <ld_dword>
 800e442:	4602      	mov	r2, r0
 800e444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e446:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e44a:	3334      	adds	r3, #52	; 0x34
 800e44c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e450:	4618      	mov	r0, r3
 800e452:	f7fe fb9d 	bl	800cb90 <ld_dword>
 800e456:	4602      	mov	r2, r0
 800e458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e45a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e45e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e462:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e464:	4b0a      	ldr	r3, [pc, #40]	; (800e490 <find_volume+0x4a4>)
 800e466:	881b      	ldrh	r3, [r3, #0]
 800e468:	3301      	adds	r3, #1
 800e46a:	b29a      	uxth	r2, r3
 800e46c:	4b08      	ldr	r3, [pc, #32]	; (800e490 <find_volume+0x4a4>)
 800e46e:	801a      	strh	r2, [r3, #0]
 800e470:	4b07      	ldr	r3, [pc, #28]	; (800e490 <find_volume+0x4a4>)
 800e472:	881a      	ldrh	r2, [r3, #0]
 800e474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e476:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e478:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e47a:	f7fe fde9 	bl	800d050 <clear_lock>
#endif
	return FR_OK;
 800e47e:	2300      	movs	r3, #0
}
 800e480:	4618      	mov	r0, r3
 800e482:	3758      	adds	r7, #88	; 0x58
 800e484:	46bd      	mov	sp, r7
 800e486:	bd80      	pop	{r7, pc}
 800e488:	41615252 	.word	0x41615252
 800e48c:	61417272 	.word	0x61417272
 800e490:	200000b8 	.word	0x200000b8

0800e494 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b084      	sub	sp, #16
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
 800e49c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e49e:	2309      	movs	r3, #9
 800e4a0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d02e      	beq.n	800e506 <validate+0x72>
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d02a      	beq.n	800e506 <validate+0x72>
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	781b      	ldrb	r3, [r3, #0]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d025      	beq.n	800e506 <validate+0x72>
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	889a      	ldrh	r2, [r3, #4]
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	88db      	ldrh	r3, [r3, #6]
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	d11e      	bne.n	800e506 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f7fe fc46 	bl	800cd5e <lock_fs>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d014      	beq.n	800e502 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	785b      	ldrb	r3, [r3, #1]
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f7fe faa0 	bl	800ca24 <disk_status>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	f003 0301 	and.w	r3, r3, #1
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d102      	bne.n	800e4f4 <validate+0x60>
				res = FR_OK;
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	73fb      	strb	r3, [r7, #15]
 800e4f2:	e008      	b.n	800e506 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	2100      	movs	r1, #0
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f7fe fc45 	bl	800cd8a <unlock_fs>
 800e500:	e001      	b.n	800e506 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800e502:	230f      	movs	r3, #15
 800e504:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e506:	7bfb      	ldrb	r3, [r7, #15]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d102      	bne.n	800e512 <validate+0x7e>
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	e000      	b.n	800e514 <validate+0x80>
 800e512:	2300      	movs	r3, #0
 800e514:	683a      	ldr	r2, [r7, #0]
 800e516:	6013      	str	r3, [r2, #0]
	return res;
 800e518:	7bfb      	ldrb	r3, [r7, #15]
}
 800e51a:	4618      	mov	r0, r3
 800e51c:	3710      	adds	r7, #16
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd80      	pop	{r7, pc}
	...

0800e524 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b088      	sub	sp, #32
 800e528:	af00      	add	r7, sp, #0
 800e52a:	60f8      	str	r0, [r7, #12]
 800e52c:	60b9      	str	r1, [r7, #8]
 800e52e:	4613      	mov	r3, r2
 800e530:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e532:	68bb      	ldr	r3, [r7, #8]
 800e534:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e536:	f107 0310 	add.w	r3, r7, #16
 800e53a:	4618      	mov	r0, r3
 800e53c:	f7ff fcbb 	bl	800deb6 <get_ldnumber>
 800e540:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e542:	69fb      	ldr	r3, [r7, #28]
 800e544:	2b00      	cmp	r3, #0
 800e546:	da01      	bge.n	800e54c <f_mount+0x28>
 800e548:	230b      	movs	r3, #11
 800e54a:	e048      	b.n	800e5de <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e54c:	4a26      	ldr	r2, [pc, #152]	; (800e5e8 <f_mount+0xc4>)
 800e54e:	69fb      	ldr	r3, [r7, #28]
 800e550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e554:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e556:	69bb      	ldr	r3, [r7, #24]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d00f      	beq.n	800e57c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e55c:	69b8      	ldr	r0, [r7, #24]
 800e55e:	f7fe fd77 	bl	800d050 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800e562:	69bb      	ldr	r3, [r7, #24]
 800e564:	68db      	ldr	r3, [r3, #12]
 800e566:	4618      	mov	r0, r3
 800e568:	f001 fabb 	bl	800fae2 <ff_del_syncobj>
 800e56c:	4603      	mov	r3, r0
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d101      	bne.n	800e576 <f_mount+0x52>
 800e572:	2302      	movs	r3, #2
 800e574:	e033      	b.n	800e5de <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e576:	69bb      	ldr	r3, [r7, #24]
 800e578:	2200      	movs	r2, #0
 800e57a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d00f      	beq.n	800e5a2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	2200      	movs	r2, #0
 800e586:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800e588:	69fb      	ldr	r3, [r7, #28]
 800e58a:	b2da      	uxtb	r2, r3
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	330c      	adds	r3, #12
 800e590:	4619      	mov	r1, r3
 800e592:	4610      	mov	r0, r2
 800e594:	f001 fa87 	bl	800faa6 <ff_cre_syncobj>
 800e598:	4603      	mov	r3, r0
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d101      	bne.n	800e5a2 <f_mount+0x7e>
 800e59e:	2302      	movs	r3, #2
 800e5a0:	e01d      	b.n	800e5de <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e5a2:	68fa      	ldr	r2, [r7, #12]
 800e5a4:	4910      	ldr	r1, [pc, #64]	; (800e5e8 <f_mount+0xc4>)
 800e5a6:	69fb      	ldr	r3, [r7, #28]
 800e5a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d002      	beq.n	800e5b8 <f_mount+0x94>
 800e5b2:	79fb      	ldrb	r3, [r7, #7]
 800e5b4:	2b01      	cmp	r3, #1
 800e5b6:	d001      	beq.n	800e5bc <f_mount+0x98>
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	e010      	b.n	800e5de <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e5bc:	f107 010c 	add.w	r1, r7, #12
 800e5c0:	f107 0308 	add.w	r3, r7, #8
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	f7ff fd10 	bl	800dfec <find_volume>
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	7dfa      	ldrb	r2, [r7, #23]
 800e5d4:	4611      	mov	r1, r2
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f7fe fbd7 	bl	800cd8a <unlock_fs>
 800e5dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5de:	4618      	mov	r0, r3
 800e5e0:	3720      	adds	r7, #32
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}
 800e5e6:	bf00      	nop
 800e5e8:	200000b4 	.word	0x200000b4

0800e5ec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b098      	sub	sp, #96	; 0x60
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	60f8      	str	r0, [r7, #12]
 800e5f4:	60b9      	str	r1, [r7, #8]
 800e5f6:	4613      	mov	r3, r2
 800e5f8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d101      	bne.n	800e604 <f_open+0x18>
 800e600:	2309      	movs	r3, #9
 800e602:	e1b4      	b.n	800e96e <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e604:	79fb      	ldrb	r3, [r7, #7]
 800e606:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e60a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e60c:	79fa      	ldrb	r2, [r7, #7]
 800e60e:	f107 0110 	add.w	r1, r7, #16
 800e612:	f107 0308 	add.w	r3, r7, #8
 800e616:	4618      	mov	r0, r3
 800e618:	f7ff fce8 	bl	800dfec <find_volume>
 800e61c:	4603      	mov	r3, r0
 800e61e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800e622:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e626:	2b00      	cmp	r3, #0
 800e628:	f040 8191 	bne.w	800e94e <f_open+0x362>
		dj.obj.fs = fs;
 800e62c:	693b      	ldr	r3, [r7, #16]
 800e62e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e630:	68ba      	ldr	r2, [r7, #8]
 800e632:	f107 0314 	add.w	r3, r7, #20
 800e636:	4611      	mov	r1, r2
 800e638:	4618      	mov	r0, r3
 800e63a:	f7ff fbcb 	bl	800ddd4 <follow_path>
 800e63e:	4603      	mov	r3, r0
 800e640:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e644:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d11a      	bne.n	800e682 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e64c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e650:	b25b      	sxtb	r3, r3
 800e652:	2b00      	cmp	r3, #0
 800e654:	da03      	bge.n	800e65e <f_open+0x72>
				res = FR_INVALID_NAME;
 800e656:	2306      	movs	r3, #6
 800e658:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e65c:	e011      	b.n	800e682 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e65e:	79fb      	ldrb	r3, [r7, #7]
 800e660:	f023 0301 	bic.w	r3, r3, #1
 800e664:	2b00      	cmp	r3, #0
 800e666:	bf14      	ite	ne
 800e668:	2301      	movne	r3, #1
 800e66a:	2300      	moveq	r3, #0
 800e66c:	b2db      	uxtb	r3, r3
 800e66e:	461a      	mov	r2, r3
 800e670:	f107 0314 	add.w	r3, r7, #20
 800e674:	4611      	mov	r1, r2
 800e676:	4618      	mov	r0, r3
 800e678:	f7fe fba2 	bl	800cdc0 <chk_lock>
 800e67c:	4603      	mov	r3, r0
 800e67e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e682:	79fb      	ldrb	r3, [r7, #7]
 800e684:	f003 031c 	and.w	r3, r3, #28
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d07f      	beq.n	800e78c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e68c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e690:	2b00      	cmp	r3, #0
 800e692:	d017      	beq.n	800e6c4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e694:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e698:	2b04      	cmp	r3, #4
 800e69a:	d10e      	bne.n	800e6ba <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e69c:	f7fe fbec 	bl	800ce78 <enq_lock>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d006      	beq.n	800e6b4 <f_open+0xc8>
 800e6a6:	f107 0314 	add.w	r3, r7, #20
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f7ff facb 	bl	800dc46 <dir_register>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	e000      	b.n	800e6b6 <f_open+0xca>
 800e6b4:	2312      	movs	r3, #18
 800e6b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e6ba:	79fb      	ldrb	r3, [r7, #7]
 800e6bc:	f043 0308 	orr.w	r3, r3, #8
 800e6c0:	71fb      	strb	r3, [r7, #7]
 800e6c2:	e010      	b.n	800e6e6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e6c4:	7ebb      	ldrb	r3, [r7, #26]
 800e6c6:	f003 0311 	and.w	r3, r3, #17
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d003      	beq.n	800e6d6 <f_open+0xea>
					res = FR_DENIED;
 800e6ce:	2307      	movs	r3, #7
 800e6d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e6d4:	e007      	b.n	800e6e6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e6d6:	79fb      	ldrb	r3, [r7, #7]
 800e6d8:	f003 0304 	and.w	r3, r3, #4
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d002      	beq.n	800e6e6 <f_open+0xfa>
 800e6e0:	2308      	movs	r3, #8
 800e6e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e6e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d168      	bne.n	800e7c0 <f_open+0x1d4>
 800e6ee:	79fb      	ldrb	r3, [r7, #7]
 800e6f0:	f003 0308 	and.w	r3, r3, #8
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d063      	beq.n	800e7c0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800e6f8:	f004 f896 	bl	8012828 <get_fattime>
 800e6fc:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e6fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e700:	330e      	adds	r3, #14
 800e702:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e704:	4618      	mov	r0, r3
 800e706:	f7fe fa81 	bl	800cc0c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e70a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e70c:	3316      	adds	r3, #22
 800e70e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e710:	4618      	mov	r0, r3
 800e712:	f7fe fa7b 	bl	800cc0c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e718:	330b      	adds	r3, #11
 800e71a:	2220      	movs	r2, #32
 800e71c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e71e:	693b      	ldr	r3, [r7, #16]
 800e720:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e722:	4611      	mov	r1, r2
 800e724:	4618      	mov	r0, r3
 800e726:	f7ff f9fa 	bl	800db1e <ld_clust>
 800e72a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e72c:	693b      	ldr	r3, [r7, #16]
 800e72e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e730:	2200      	movs	r2, #0
 800e732:	4618      	mov	r0, r3
 800e734:	f7ff fa12 	bl	800db5c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e73a:	331c      	adds	r3, #28
 800e73c:	2100      	movs	r1, #0
 800e73e:	4618      	mov	r0, r3
 800e740:	f7fe fa64 	bl	800cc0c <st_dword>
					fs->wflag = 1;
 800e744:	693b      	ldr	r3, [r7, #16]
 800e746:	2201      	movs	r2, #1
 800e748:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e74a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d037      	beq.n	800e7c0 <f_open+0x1d4>
						dw = fs->winsect;
 800e750:	693b      	ldr	r3, [r7, #16]
 800e752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e754:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e756:	f107 0314 	add.w	r3, r7, #20
 800e75a:	2200      	movs	r2, #0
 800e75c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e75e:	4618      	mov	r0, r3
 800e760:	f7fe ff25 	bl	800d5ae <remove_chain>
 800e764:	4603      	mov	r3, r0
 800e766:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800e76a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d126      	bne.n	800e7c0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800e772:	693b      	ldr	r3, [r7, #16]
 800e774:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e776:	4618      	mov	r0, r3
 800e778:	f7fe fcd2 	bl	800d120 <move_window>
 800e77c:	4603      	mov	r3, r0
 800e77e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e782:	693b      	ldr	r3, [r7, #16]
 800e784:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e786:	3a01      	subs	r2, #1
 800e788:	611a      	str	r2, [r3, #16]
 800e78a:	e019      	b.n	800e7c0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e78c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e790:	2b00      	cmp	r3, #0
 800e792:	d115      	bne.n	800e7c0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e794:	7ebb      	ldrb	r3, [r7, #26]
 800e796:	f003 0310 	and.w	r3, r3, #16
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d003      	beq.n	800e7a6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800e79e:	2304      	movs	r3, #4
 800e7a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e7a4:	e00c      	b.n	800e7c0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e7a6:	79fb      	ldrb	r3, [r7, #7]
 800e7a8:	f003 0302 	and.w	r3, r3, #2
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d007      	beq.n	800e7c0 <f_open+0x1d4>
 800e7b0:	7ebb      	ldrb	r3, [r7, #26]
 800e7b2:	f003 0301 	and.w	r3, r3, #1
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d002      	beq.n	800e7c0 <f_open+0x1d4>
						res = FR_DENIED;
 800e7ba:	2307      	movs	r3, #7
 800e7bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e7c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d128      	bne.n	800e81a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e7c8:	79fb      	ldrb	r3, [r7, #7]
 800e7ca:	f003 0308 	and.w	r3, r3, #8
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d003      	beq.n	800e7da <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e7d2:	79fb      	ldrb	r3, [r7, #7]
 800e7d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7d8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e7da:	693b      	ldr	r3, [r7, #16]
 800e7dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e7e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e7e8:	79fb      	ldrb	r3, [r7, #7]
 800e7ea:	f023 0301 	bic.w	r3, r3, #1
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	bf14      	ite	ne
 800e7f2:	2301      	movne	r3, #1
 800e7f4:	2300      	moveq	r3, #0
 800e7f6:	b2db      	uxtb	r3, r3
 800e7f8:	461a      	mov	r2, r3
 800e7fa:	f107 0314 	add.w	r3, r7, #20
 800e7fe:	4611      	mov	r1, r2
 800e800:	4618      	mov	r0, r3
 800e802:	f7fe fb5b 	bl	800cebc <inc_lock>
 800e806:	4602      	mov	r2, r0
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	691b      	ldr	r3, [r3, #16]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d102      	bne.n	800e81a <f_open+0x22e>
 800e814:	2302      	movs	r3, #2
 800e816:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e81a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e81e:	2b00      	cmp	r3, #0
 800e820:	f040 8095 	bne.w	800e94e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e824:	693b      	ldr	r3, [r7, #16]
 800e826:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e828:	4611      	mov	r1, r2
 800e82a:	4618      	mov	r0, r3
 800e82c:	f7ff f977 	bl	800db1e <ld_clust>
 800e830:	4602      	mov	r2, r0
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e838:	331c      	adds	r3, #28
 800e83a:	4618      	mov	r0, r3
 800e83c:	f7fe f9a8 	bl	800cb90 <ld_dword>
 800e840:	4602      	mov	r2, r0
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	2200      	movs	r2, #0
 800e84a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e84c:	693a      	ldr	r2, [r7, #16]
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e852:	693b      	ldr	r3, [r7, #16]
 800e854:	88da      	ldrh	r2, [r3, #6]
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	79fa      	ldrb	r2, [r7, #7]
 800e85e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	2200      	movs	r2, #0
 800e864:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	2200      	movs	r2, #0
 800e86a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	2200      	movs	r2, #0
 800e870:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	3330      	adds	r3, #48	; 0x30
 800e876:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e87a:	2100      	movs	r1, #0
 800e87c:	4618      	mov	r0, r3
 800e87e:	f7fe fa12 	bl	800cca6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e882:	79fb      	ldrb	r3, [r7, #7]
 800e884:	f003 0320 	and.w	r3, r3, #32
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d060      	beq.n	800e94e <f_open+0x362>
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	68db      	ldr	r3, [r3, #12]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d05c      	beq.n	800e94e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	68da      	ldr	r2, [r3, #12]
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e89c:	693b      	ldr	r3, [r7, #16]
 800e89e:	895b      	ldrh	r3, [r3, #10]
 800e8a0:	025b      	lsls	r3, r3, #9
 800e8a2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	689b      	ldr	r3, [r3, #8]
 800e8a8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	68db      	ldr	r3, [r3, #12]
 800e8ae:	657b      	str	r3, [r7, #84]	; 0x54
 800e8b0:	e016      	b.n	800e8e0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f7fe fced 	bl	800d296 <get_fat>
 800e8bc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e8be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e8c0:	2b01      	cmp	r3, #1
 800e8c2:	d802      	bhi.n	800e8ca <f_open+0x2de>
 800e8c4:	2302      	movs	r3, #2
 800e8c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e8ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e8cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8d0:	d102      	bne.n	800e8d8 <f_open+0x2ec>
 800e8d2:	2301      	movs	r3, #1
 800e8d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e8d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e8da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8dc:	1ad3      	subs	r3, r2, r3
 800e8de:	657b      	str	r3, [r7, #84]	; 0x54
 800e8e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d103      	bne.n	800e8f0 <f_open+0x304>
 800e8e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e8ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8ec:	429a      	cmp	r2, r3
 800e8ee:	d8e0      	bhi.n	800e8b2 <f_open+0x2c6>
				}
				fp->clust = clst;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e8f4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e8f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d127      	bne.n	800e94e <f_open+0x362>
 800e8fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e904:	2b00      	cmp	r3, #0
 800e906:	d022      	beq.n	800e94e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e908:	693b      	ldr	r3, [r7, #16]
 800e90a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e90c:	4618      	mov	r0, r3
 800e90e:	f7fe fca3 	bl	800d258 <clust2sect>
 800e912:	6478      	str	r0, [r7, #68]	; 0x44
 800e914:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e916:	2b00      	cmp	r3, #0
 800e918:	d103      	bne.n	800e922 <f_open+0x336>
						res = FR_INT_ERR;
 800e91a:	2302      	movs	r3, #2
 800e91c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e920:	e015      	b.n	800e94e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e924:	0a5a      	lsrs	r2, r3, #9
 800e926:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e928:	441a      	add	r2, r3
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e92e:	693b      	ldr	r3, [r7, #16]
 800e930:	7858      	ldrb	r0, [r3, #1]
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	6a1a      	ldr	r2, [r3, #32]
 800e93c:	2301      	movs	r3, #1
 800e93e:	f7fe f8b1 	bl	800caa4 <disk_read>
 800e942:	4603      	mov	r3, r0
 800e944:	2b00      	cmp	r3, #0
 800e946:	d002      	beq.n	800e94e <f_open+0x362>
 800e948:	2301      	movs	r3, #1
 800e94a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e94e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e952:	2b00      	cmp	r3, #0
 800e954:	d002      	beq.n	800e95c <f_open+0x370>
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	2200      	movs	r2, #0
 800e95a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e95c:	693b      	ldr	r3, [r7, #16]
 800e95e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800e962:	4611      	mov	r1, r2
 800e964:	4618      	mov	r0, r3
 800e966:	f7fe fa10 	bl	800cd8a <unlock_fs>
 800e96a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3760      	adds	r7, #96	; 0x60
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}

0800e976 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e976:	b580      	push	{r7, lr}
 800e978:	b08e      	sub	sp, #56	; 0x38
 800e97a:	af00      	add	r7, sp, #0
 800e97c:	60f8      	str	r0, [r7, #12]
 800e97e:	60b9      	str	r1, [r7, #8]
 800e980:	607a      	str	r2, [r7, #4]
 800e982:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e984:	68bb      	ldr	r3, [r7, #8]
 800e986:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	2200      	movs	r2, #0
 800e98c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	f107 0214 	add.w	r2, r7, #20
 800e994:	4611      	mov	r1, r2
 800e996:	4618      	mov	r0, r3
 800e998:	f7ff fd7c 	bl	800e494 <validate>
 800e99c:	4603      	mov	r3, r0
 800e99e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e9a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d107      	bne.n	800e9ba <f_read+0x44>
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	7d5b      	ldrb	r3, [r3, #21]
 800e9ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e9b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d009      	beq.n	800e9ce <f_read+0x58>
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e9c0:	4611      	mov	r1, r2
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	f7fe f9e1 	bl	800cd8a <unlock_fs>
 800e9c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e9cc:	e13d      	b.n	800ec4a <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	7d1b      	ldrb	r3, [r3, #20]
 800e9d2:	f003 0301 	and.w	r3, r3, #1
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d106      	bne.n	800e9e8 <f_read+0x72>
 800e9da:	697b      	ldr	r3, [r7, #20]
 800e9dc:	2107      	movs	r1, #7
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f7fe f9d3 	bl	800cd8a <unlock_fs>
 800e9e4:	2307      	movs	r3, #7
 800e9e6:	e130      	b.n	800ec4a <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	68da      	ldr	r2, [r3, #12]
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	699b      	ldr	r3, [r3, #24]
 800e9f0:	1ad3      	subs	r3, r2, r3
 800e9f2:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e9f4:	687a      	ldr	r2, [r7, #4]
 800e9f6:	6a3b      	ldr	r3, [r7, #32]
 800e9f8:	429a      	cmp	r2, r3
 800e9fa:	f240 811c 	bls.w	800ec36 <f_read+0x2c0>
 800e9fe:	6a3b      	ldr	r3, [r7, #32]
 800ea00:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ea02:	e118      	b.n	800ec36 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	699b      	ldr	r3, [r3, #24]
 800ea08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	f040 80e4 	bne.w	800ebda <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	699b      	ldr	r3, [r3, #24]
 800ea16:	0a5b      	lsrs	r3, r3, #9
 800ea18:	697a      	ldr	r2, [r7, #20]
 800ea1a:	8952      	ldrh	r2, [r2, #10]
 800ea1c:	3a01      	subs	r2, #1
 800ea1e:	4013      	ands	r3, r2
 800ea20:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ea22:	69fb      	ldr	r3, [r7, #28]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d139      	bne.n	800ea9c <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	699b      	ldr	r3, [r3, #24]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d103      	bne.n	800ea38 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	689b      	ldr	r3, [r3, #8]
 800ea34:	633b      	str	r3, [r7, #48]	; 0x30
 800ea36:	e013      	b.n	800ea60 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d007      	beq.n	800ea50 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	699b      	ldr	r3, [r3, #24]
 800ea44:	4619      	mov	r1, r3
 800ea46:	68f8      	ldr	r0, [r7, #12]
 800ea48:	f7fe feae 	bl	800d7a8 <clmt_clust>
 800ea4c:	6338      	str	r0, [r7, #48]	; 0x30
 800ea4e:	e007      	b.n	800ea60 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ea50:	68fa      	ldr	r2, [r7, #12]
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	69db      	ldr	r3, [r3, #28]
 800ea56:	4619      	mov	r1, r3
 800ea58:	4610      	mov	r0, r2
 800ea5a:	f7fe fc1c 	bl	800d296 <get_fat>
 800ea5e:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ea60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea62:	2b01      	cmp	r3, #1
 800ea64:	d809      	bhi.n	800ea7a <f_read+0x104>
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	2202      	movs	r2, #2
 800ea6a:	755a      	strb	r2, [r3, #21]
 800ea6c:	697b      	ldr	r3, [r7, #20]
 800ea6e:	2102      	movs	r1, #2
 800ea70:	4618      	mov	r0, r3
 800ea72:	f7fe f98a 	bl	800cd8a <unlock_fs>
 800ea76:	2302      	movs	r3, #2
 800ea78:	e0e7      	b.n	800ec4a <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ea7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea80:	d109      	bne.n	800ea96 <f_read+0x120>
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	2201      	movs	r2, #1
 800ea86:	755a      	strb	r2, [r3, #21]
 800ea88:	697b      	ldr	r3, [r7, #20]
 800ea8a:	2101      	movs	r1, #1
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	f7fe f97c 	bl	800cd8a <unlock_fs>
 800ea92:	2301      	movs	r3, #1
 800ea94:	e0d9      	b.n	800ec4a <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea9a:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ea9c:	697a      	ldr	r2, [r7, #20]
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	69db      	ldr	r3, [r3, #28]
 800eaa2:	4619      	mov	r1, r3
 800eaa4:	4610      	mov	r0, r2
 800eaa6:	f7fe fbd7 	bl	800d258 <clust2sect>
 800eaaa:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800eaac:	69bb      	ldr	r3, [r7, #24]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d109      	bne.n	800eac6 <f_read+0x150>
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	2202      	movs	r2, #2
 800eab6:	755a      	strb	r2, [r3, #21]
 800eab8:	697b      	ldr	r3, [r7, #20]
 800eaba:	2102      	movs	r1, #2
 800eabc:	4618      	mov	r0, r3
 800eabe:	f7fe f964 	bl	800cd8a <unlock_fs>
 800eac2:	2302      	movs	r3, #2
 800eac4:	e0c1      	b.n	800ec4a <f_read+0x2d4>
			sect += csect;
 800eac6:	69ba      	ldr	r2, [r7, #24]
 800eac8:	69fb      	ldr	r3, [r7, #28]
 800eaca:	4413      	add	r3, r2
 800eacc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	0a5b      	lsrs	r3, r3, #9
 800ead2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ead4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d03e      	beq.n	800eb58 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800eada:	69fa      	ldr	r2, [r7, #28]
 800eadc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eade:	4413      	add	r3, r2
 800eae0:	697a      	ldr	r2, [r7, #20]
 800eae2:	8952      	ldrh	r2, [r2, #10]
 800eae4:	4293      	cmp	r3, r2
 800eae6:	d905      	bls.n	800eaf4 <f_read+0x17e>
					cc = fs->csize - csect;
 800eae8:	697b      	ldr	r3, [r7, #20]
 800eaea:	895b      	ldrh	r3, [r3, #10]
 800eaec:	461a      	mov	r2, r3
 800eaee:	69fb      	ldr	r3, [r7, #28]
 800eaf0:	1ad3      	subs	r3, r2, r3
 800eaf2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eaf4:	697b      	ldr	r3, [r7, #20]
 800eaf6:	7858      	ldrb	r0, [r3, #1]
 800eaf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eafa:	69ba      	ldr	r2, [r7, #24]
 800eafc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eafe:	f7fd ffd1 	bl	800caa4 <disk_read>
 800eb02:	4603      	mov	r3, r0
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d009      	beq.n	800eb1c <f_read+0x1a6>
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	2201      	movs	r2, #1
 800eb0c:	755a      	strb	r2, [r3, #21]
 800eb0e:	697b      	ldr	r3, [r7, #20]
 800eb10:	2101      	movs	r1, #1
 800eb12:	4618      	mov	r0, r3
 800eb14:	f7fe f939 	bl	800cd8a <unlock_fs>
 800eb18:	2301      	movs	r3, #1
 800eb1a:	e096      	b.n	800ec4a <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	7d1b      	ldrb	r3, [r3, #20]
 800eb20:	b25b      	sxtb	r3, r3
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	da14      	bge.n	800eb50 <f_read+0x1da>
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	6a1a      	ldr	r2, [r3, #32]
 800eb2a:	69bb      	ldr	r3, [r7, #24]
 800eb2c:	1ad3      	subs	r3, r2, r3
 800eb2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb30:	429a      	cmp	r2, r3
 800eb32:	d90d      	bls.n	800eb50 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	6a1a      	ldr	r2, [r3, #32]
 800eb38:	69bb      	ldr	r3, [r7, #24]
 800eb3a:	1ad3      	subs	r3, r2, r3
 800eb3c:	025b      	lsls	r3, r3, #9
 800eb3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb40:	18d0      	adds	r0, r2, r3
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	3330      	adds	r3, #48	; 0x30
 800eb46:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eb4a:	4619      	mov	r1, r3
 800eb4c:	f7fe f88a 	bl	800cc64 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800eb50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb52:	025b      	lsls	r3, r3, #9
 800eb54:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800eb56:	e05a      	b.n	800ec0e <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	6a1b      	ldr	r3, [r3, #32]
 800eb5c:	69ba      	ldr	r2, [r7, #24]
 800eb5e:	429a      	cmp	r2, r3
 800eb60:	d038      	beq.n	800ebd4 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	7d1b      	ldrb	r3, [r3, #20]
 800eb66:	b25b      	sxtb	r3, r3
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	da1d      	bge.n	800eba8 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eb6c:	697b      	ldr	r3, [r7, #20]
 800eb6e:	7858      	ldrb	r0, [r3, #1]
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	6a1a      	ldr	r2, [r3, #32]
 800eb7a:	2301      	movs	r3, #1
 800eb7c:	f7fd ffb2 	bl	800cae4 <disk_write>
 800eb80:	4603      	mov	r3, r0
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d009      	beq.n	800eb9a <f_read+0x224>
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	2201      	movs	r2, #1
 800eb8a:	755a      	strb	r2, [r3, #21]
 800eb8c:	697b      	ldr	r3, [r7, #20]
 800eb8e:	2101      	movs	r1, #1
 800eb90:	4618      	mov	r0, r3
 800eb92:	f7fe f8fa 	bl	800cd8a <unlock_fs>
 800eb96:	2301      	movs	r3, #1
 800eb98:	e057      	b.n	800ec4a <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	7d1b      	ldrb	r3, [r3, #20]
 800eb9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eba2:	b2da      	uxtb	r2, r3
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800eba8:	697b      	ldr	r3, [r7, #20]
 800ebaa:	7858      	ldrb	r0, [r3, #1]
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ebb2:	2301      	movs	r3, #1
 800ebb4:	69ba      	ldr	r2, [r7, #24]
 800ebb6:	f7fd ff75 	bl	800caa4 <disk_read>
 800ebba:	4603      	mov	r3, r0
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d009      	beq.n	800ebd4 <f_read+0x25e>
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	2201      	movs	r2, #1
 800ebc4:	755a      	strb	r2, [r3, #21]
 800ebc6:	697b      	ldr	r3, [r7, #20]
 800ebc8:	2101      	movs	r1, #1
 800ebca:	4618      	mov	r0, r3
 800ebcc:	f7fe f8dd 	bl	800cd8a <unlock_fs>
 800ebd0:	2301      	movs	r3, #1
 800ebd2:	e03a      	b.n	800ec4a <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	69ba      	ldr	r2, [r7, #24]
 800ebd8:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	699b      	ldr	r3, [r3, #24]
 800ebde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebe2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ebe6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ebe8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	429a      	cmp	r2, r3
 800ebee:	d901      	bls.n	800ebf4 <f_read+0x27e>
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	699b      	ldr	r3, [r3, #24]
 800ebfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec02:	4413      	add	r3, r2
 800ec04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec06:	4619      	mov	r1, r3
 800ec08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec0a:	f7fe f82b 	bl	800cc64 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ec0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec12:	4413      	add	r3, r2
 800ec14:	627b      	str	r3, [r7, #36]	; 0x24
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	699a      	ldr	r2, [r3, #24]
 800ec1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec1c:	441a      	add	r2, r3
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	619a      	str	r2, [r3, #24]
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	681a      	ldr	r2, [r3, #0]
 800ec26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec28:	441a      	add	r2, r3
 800ec2a:	683b      	ldr	r3, [r7, #0]
 800ec2c:	601a      	str	r2, [r3, #0]
 800ec2e:	687a      	ldr	r2, [r7, #4]
 800ec30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec32:	1ad3      	subs	r3, r2, r3
 800ec34:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	f47f aee3 	bne.w	800ea04 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ec3e:	697b      	ldr	r3, [r7, #20]
 800ec40:	2100      	movs	r1, #0
 800ec42:	4618      	mov	r0, r3
 800ec44:	f7fe f8a1 	bl	800cd8a <unlock_fs>
 800ec48:	2300      	movs	r3, #0
}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	3738      	adds	r7, #56	; 0x38
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd80      	pop	{r7, pc}

0800ec52 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ec52:	b580      	push	{r7, lr}
 800ec54:	b08c      	sub	sp, #48	; 0x30
 800ec56:	af00      	add	r7, sp, #0
 800ec58:	60f8      	str	r0, [r7, #12]
 800ec5a:	60b9      	str	r1, [r7, #8]
 800ec5c:	607a      	str	r2, [r7, #4]
 800ec5e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ec64:	683b      	ldr	r3, [r7, #0]
 800ec66:	2200      	movs	r2, #0
 800ec68:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	f107 0210 	add.w	r2, r7, #16
 800ec70:	4611      	mov	r1, r2
 800ec72:	4618      	mov	r0, r3
 800ec74:	f7ff fc0e 	bl	800e494 <validate>
 800ec78:	4603      	mov	r3, r0
 800ec7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ec7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d107      	bne.n	800ec96 <f_write+0x44>
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	7d5b      	ldrb	r3, [r3, #21]
 800ec8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ec8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d009      	beq.n	800ecaa <f_write+0x58>
 800ec96:	693b      	ldr	r3, [r7, #16]
 800ec98:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ec9c:	4611      	mov	r1, r2
 800ec9e:	4618      	mov	r0, r3
 800eca0:	f7fe f873 	bl	800cd8a <unlock_fs>
 800eca4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eca8:	e173      	b.n	800ef92 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	7d1b      	ldrb	r3, [r3, #20]
 800ecae:	f003 0302 	and.w	r3, r3, #2
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d106      	bne.n	800ecc4 <f_write+0x72>
 800ecb6:	693b      	ldr	r3, [r7, #16]
 800ecb8:	2107      	movs	r1, #7
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f7fe f865 	bl	800cd8a <unlock_fs>
 800ecc0:	2307      	movs	r3, #7
 800ecc2:	e166      	b.n	800ef92 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	699a      	ldr	r2, [r3, #24]
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	441a      	add	r2, r3
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	699b      	ldr	r3, [r3, #24]
 800ecd0:	429a      	cmp	r2, r3
 800ecd2:	f080 814b 	bcs.w	800ef6c <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	699b      	ldr	r3, [r3, #24]
 800ecda:	43db      	mvns	r3, r3
 800ecdc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ecde:	e145      	b.n	800ef6c <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	699b      	ldr	r3, [r3, #24]
 800ece4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	f040 8101 	bne.w	800eef0 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	699b      	ldr	r3, [r3, #24]
 800ecf2:	0a5b      	lsrs	r3, r3, #9
 800ecf4:	693a      	ldr	r2, [r7, #16]
 800ecf6:	8952      	ldrh	r2, [r2, #10]
 800ecf8:	3a01      	subs	r2, #1
 800ecfa:	4013      	ands	r3, r2
 800ecfc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ecfe:	69bb      	ldr	r3, [r7, #24]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d14d      	bne.n	800eda0 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	699b      	ldr	r3, [r3, #24]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d10c      	bne.n	800ed26 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	689b      	ldr	r3, [r3, #8]
 800ed10:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ed12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d11a      	bne.n	800ed4e <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	2100      	movs	r1, #0
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f7fe fcab 	bl	800d678 <create_chain>
 800ed22:	62b8      	str	r0, [r7, #40]	; 0x28
 800ed24:	e013      	b.n	800ed4e <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d007      	beq.n	800ed3e <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	699b      	ldr	r3, [r3, #24]
 800ed32:	4619      	mov	r1, r3
 800ed34:	68f8      	ldr	r0, [r7, #12]
 800ed36:	f7fe fd37 	bl	800d7a8 <clmt_clust>
 800ed3a:	62b8      	str	r0, [r7, #40]	; 0x28
 800ed3c:	e007      	b.n	800ed4e <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ed3e:	68fa      	ldr	r2, [r7, #12]
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	69db      	ldr	r3, [r3, #28]
 800ed44:	4619      	mov	r1, r3
 800ed46:	4610      	mov	r0, r2
 800ed48:	f7fe fc96 	bl	800d678 <create_chain>
 800ed4c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ed4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	f000 8110 	beq.w	800ef76 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ed56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed58:	2b01      	cmp	r3, #1
 800ed5a:	d109      	bne.n	800ed70 <f_write+0x11e>
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	2202      	movs	r2, #2
 800ed60:	755a      	strb	r2, [r3, #21]
 800ed62:	693b      	ldr	r3, [r7, #16]
 800ed64:	2102      	movs	r1, #2
 800ed66:	4618      	mov	r0, r3
 800ed68:	f7fe f80f 	bl	800cd8a <unlock_fs>
 800ed6c:	2302      	movs	r3, #2
 800ed6e:	e110      	b.n	800ef92 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ed70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed76:	d109      	bne.n	800ed8c <f_write+0x13a>
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	2201      	movs	r2, #1
 800ed7c:	755a      	strb	r2, [r3, #21]
 800ed7e:	693b      	ldr	r3, [r7, #16]
 800ed80:	2101      	movs	r1, #1
 800ed82:	4618      	mov	r0, r3
 800ed84:	f7fe f801 	bl	800cd8a <unlock_fs>
 800ed88:	2301      	movs	r3, #1
 800ed8a:	e102      	b.n	800ef92 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed90:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	689b      	ldr	r3, [r3, #8]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d102      	bne.n	800eda0 <f_write+0x14e>
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed9e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	7d1b      	ldrb	r3, [r3, #20]
 800eda4:	b25b      	sxtb	r3, r3
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	da1d      	bge.n	800ede6 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800edaa:	693b      	ldr	r3, [r7, #16]
 800edac:	7858      	ldrb	r0, [r3, #1]
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	6a1a      	ldr	r2, [r3, #32]
 800edb8:	2301      	movs	r3, #1
 800edba:	f7fd fe93 	bl	800cae4 <disk_write>
 800edbe:	4603      	mov	r3, r0
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d009      	beq.n	800edd8 <f_write+0x186>
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	2201      	movs	r2, #1
 800edc8:	755a      	strb	r2, [r3, #21]
 800edca:	693b      	ldr	r3, [r7, #16]
 800edcc:	2101      	movs	r1, #1
 800edce:	4618      	mov	r0, r3
 800edd0:	f7fd ffdb 	bl	800cd8a <unlock_fs>
 800edd4:	2301      	movs	r3, #1
 800edd6:	e0dc      	b.n	800ef92 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	7d1b      	ldrb	r3, [r3, #20]
 800eddc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ede0:	b2da      	uxtb	r2, r3
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ede6:	693a      	ldr	r2, [r7, #16]
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	69db      	ldr	r3, [r3, #28]
 800edec:	4619      	mov	r1, r3
 800edee:	4610      	mov	r0, r2
 800edf0:	f7fe fa32 	bl	800d258 <clust2sect>
 800edf4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800edf6:	697b      	ldr	r3, [r7, #20]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d109      	bne.n	800ee10 <f_write+0x1be>
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	2202      	movs	r2, #2
 800ee00:	755a      	strb	r2, [r3, #21]
 800ee02:	693b      	ldr	r3, [r7, #16]
 800ee04:	2102      	movs	r1, #2
 800ee06:	4618      	mov	r0, r3
 800ee08:	f7fd ffbf 	bl	800cd8a <unlock_fs>
 800ee0c:	2302      	movs	r3, #2
 800ee0e:	e0c0      	b.n	800ef92 <f_write+0x340>
			sect += csect;
 800ee10:	697a      	ldr	r2, [r7, #20]
 800ee12:	69bb      	ldr	r3, [r7, #24]
 800ee14:	4413      	add	r3, r2
 800ee16:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	0a5b      	lsrs	r3, r3, #9
 800ee1c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ee1e:	6a3b      	ldr	r3, [r7, #32]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d041      	beq.n	800eea8 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ee24:	69ba      	ldr	r2, [r7, #24]
 800ee26:	6a3b      	ldr	r3, [r7, #32]
 800ee28:	4413      	add	r3, r2
 800ee2a:	693a      	ldr	r2, [r7, #16]
 800ee2c:	8952      	ldrh	r2, [r2, #10]
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	d905      	bls.n	800ee3e <f_write+0x1ec>
					cc = fs->csize - csect;
 800ee32:	693b      	ldr	r3, [r7, #16]
 800ee34:	895b      	ldrh	r3, [r3, #10]
 800ee36:	461a      	mov	r2, r3
 800ee38:	69bb      	ldr	r3, [r7, #24]
 800ee3a:	1ad3      	subs	r3, r2, r3
 800ee3c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ee3e:	693b      	ldr	r3, [r7, #16]
 800ee40:	7858      	ldrb	r0, [r3, #1]
 800ee42:	6a3b      	ldr	r3, [r7, #32]
 800ee44:	697a      	ldr	r2, [r7, #20]
 800ee46:	69f9      	ldr	r1, [r7, #28]
 800ee48:	f7fd fe4c 	bl	800cae4 <disk_write>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d009      	beq.n	800ee66 <f_write+0x214>
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	2201      	movs	r2, #1
 800ee56:	755a      	strb	r2, [r3, #21]
 800ee58:	693b      	ldr	r3, [r7, #16]
 800ee5a:	2101      	movs	r1, #1
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	f7fd ff94 	bl	800cd8a <unlock_fs>
 800ee62:	2301      	movs	r3, #1
 800ee64:	e095      	b.n	800ef92 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	6a1a      	ldr	r2, [r3, #32]
 800ee6a:	697b      	ldr	r3, [r7, #20]
 800ee6c:	1ad3      	subs	r3, r2, r3
 800ee6e:	6a3a      	ldr	r2, [r7, #32]
 800ee70:	429a      	cmp	r2, r3
 800ee72:	d915      	bls.n	800eea0 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	6a1a      	ldr	r2, [r3, #32]
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	1ad3      	subs	r3, r2, r3
 800ee82:	025b      	lsls	r3, r3, #9
 800ee84:	69fa      	ldr	r2, [r7, #28]
 800ee86:	4413      	add	r3, r2
 800ee88:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ee8c:	4619      	mov	r1, r3
 800ee8e:	f7fd fee9 	bl	800cc64 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	7d1b      	ldrb	r3, [r3, #20]
 800ee96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee9a:	b2da      	uxtb	r2, r3
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800eea0:	6a3b      	ldr	r3, [r7, #32]
 800eea2:	025b      	lsls	r3, r3, #9
 800eea4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800eea6:	e044      	b.n	800ef32 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	6a1b      	ldr	r3, [r3, #32]
 800eeac:	697a      	ldr	r2, [r7, #20]
 800eeae:	429a      	cmp	r2, r3
 800eeb0:	d01b      	beq.n	800eeea <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	699a      	ldr	r2, [r3, #24]
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800eeba:	429a      	cmp	r2, r3
 800eebc:	d215      	bcs.n	800eeea <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800eebe:	693b      	ldr	r3, [r7, #16]
 800eec0:	7858      	ldrb	r0, [r3, #1]
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eec8:	2301      	movs	r3, #1
 800eeca:	697a      	ldr	r2, [r7, #20]
 800eecc:	f7fd fdea 	bl	800caa4 <disk_read>
 800eed0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d009      	beq.n	800eeea <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	2201      	movs	r2, #1
 800eeda:	755a      	strb	r2, [r3, #21]
 800eedc:	693b      	ldr	r3, [r7, #16]
 800eede:	2101      	movs	r1, #1
 800eee0:	4618      	mov	r0, r3
 800eee2:	f7fd ff52 	bl	800cd8a <unlock_fs>
 800eee6:	2301      	movs	r3, #1
 800eee8:	e053      	b.n	800ef92 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	697a      	ldr	r2, [r7, #20]
 800eeee:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	699b      	ldr	r3, [r3, #24]
 800eef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eef8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800eefc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800eefe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	429a      	cmp	r2, r3
 800ef04:	d901      	bls.n	800ef0a <f_write+0x2b8>
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	699b      	ldr	r3, [r3, #24]
 800ef14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef18:	4413      	add	r3, r2
 800ef1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef1c:	69f9      	ldr	r1, [r7, #28]
 800ef1e:	4618      	mov	r0, r3
 800ef20:	f7fd fea0 	bl	800cc64 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	7d1b      	ldrb	r3, [r3, #20]
 800ef28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ef2c:	b2da      	uxtb	r2, r3
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ef32:	69fa      	ldr	r2, [r7, #28]
 800ef34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef36:	4413      	add	r3, r2
 800ef38:	61fb      	str	r3, [r7, #28]
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	699a      	ldr	r2, [r3, #24]
 800ef3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef40:	441a      	add	r2, r3
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	619a      	str	r2, [r3, #24]
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	68da      	ldr	r2, [r3, #12]
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	699b      	ldr	r3, [r3, #24]
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	bf38      	it	cc
 800ef52:	461a      	movcc	r2, r3
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	60da      	str	r2, [r3, #12]
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	681a      	ldr	r2, [r3, #0]
 800ef5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef5e:	441a      	add	r2, r3
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	601a      	str	r2, [r3, #0]
 800ef64:	687a      	ldr	r2, [r7, #4]
 800ef66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef68:	1ad3      	subs	r3, r2, r3
 800ef6a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	f47f aeb6 	bne.w	800ece0 <f_write+0x8e>
 800ef74:	e000      	b.n	800ef78 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ef76:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	7d1b      	ldrb	r3, [r3, #20]
 800ef7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef80:	b2da      	uxtb	r2, r3
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ef86:	693b      	ldr	r3, [r7, #16]
 800ef88:	2100      	movs	r1, #0
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f7fd fefd 	bl	800cd8a <unlock_fs>
 800ef90:	2300      	movs	r3, #0
}
 800ef92:	4618      	mov	r0, r3
 800ef94:	3730      	adds	r7, #48	; 0x30
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}

0800ef9a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ef9a:	b580      	push	{r7, lr}
 800ef9c:	b086      	sub	sp, #24
 800ef9e:	af00      	add	r7, sp, #0
 800efa0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	f107 0208 	add.w	r2, r7, #8
 800efa8:	4611      	mov	r1, r2
 800efaa:	4618      	mov	r0, r3
 800efac:	f7ff fa72 	bl	800e494 <validate>
 800efb0:	4603      	mov	r3, r0
 800efb2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800efb4:	7dfb      	ldrb	r3, [r7, #23]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d16d      	bne.n	800f096 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	7d1b      	ldrb	r3, [r3, #20]
 800efbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d067      	beq.n	800f096 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	7d1b      	ldrb	r3, [r3, #20]
 800efca:	b25b      	sxtb	r3, r3
 800efcc:	2b00      	cmp	r3, #0
 800efce:	da1a      	bge.n	800f006 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800efd0:	68bb      	ldr	r3, [r7, #8]
 800efd2:	7858      	ldrb	r0, [r3, #1]
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	6a1a      	ldr	r2, [r3, #32]
 800efde:	2301      	movs	r3, #1
 800efe0:	f7fd fd80 	bl	800cae4 <disk_write>
 800efe4:	4603      	mov	r3, r0
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d006      	beq.n	800eff8 <f_sync+0x5e>
 800efea:	68bb      	ldr	r3, [r7, #8]
 800efec:	2101      	movs	r1, #1
 800efee:	4618      	mov	r0, r3
 800eff0:	f7fd fecb 	bl	800cd8a <unlock_fs>
 800eff4:	2301      	movs	r3, #1
 800eff6:	e055      	b.n	800f0a4 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	7d1b      	ldrb	r3, [r3, #20]
 800effc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f000:	b2da      	uxtb	r2, r3
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f006:	f003 fc0f 	bl	8012828 <get_fattime>
 800f00a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f00c:	68ba      	ldr	r2, [r7, #8]
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f012:	4619      	mov	r1, r3
 800f014:	4610      	mov	r0, r2
 800f016:	f7fe f883 	bl	800d120 <move_window>
 800f01a:	4603      	mov	r3, r0
 800f01c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f01e:	7dfb      	ldrb	r3, [r7, #23]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d138      	bne.n	800f096 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f028:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	330b      	adds	r3, #11
 800f02e:	781a      	ldrb	r2, [r3, #0]
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	330b      	adds	r3, #11
 800f034:	f042 0220 	orr.w	r2, r2, #32
 800f038:	b2d2      	uxtb	r2, r2
 800f03a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	6818      	ldr	r0, [r3, #0]
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	689b      	ldr	r3, [r3, #8]
 800f044:	461a      	mov	r2, r3
 800f046:	68f9      	ldr	r1, [r7, #12]
 800f048:	f7fe fd88 	bl	800db5c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	f103 021c 	add.w	r2, r3, #28
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	68db      	ldr	r3, [r3, #12]
 800f056:	4619      	mov	r1, r3
 800f058:	4610      	mov	r0, r2
 800f05a:	f7fd fdd7 	bl	800cc0c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	3316      	adds	r3, #22
 800f062:	6939      	ldr	r1, [r7, #16]
 800f064:	4618      	mov	r0, r3
 800f066:	f7fd fdd1 	bl	800cc0c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	3312      	adds	r3, #18
 800f06e:	2100      	movs	r1, #0
 800f070:	4618      	mov	r0, r3
 800f072:	f7fd fdb0 	bl	800cbd6 <st_word>
					fs->wflag = 1;
 800f076:	68bb      	ldr	r3, [r7, #8]
 800f078:	2201      	movs	r2, #1
 800f07a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f07c:	68bb      	ldr	r3, [r7, #8]
 800f07e:	4618      	mov	r0, r3
 800f080:	f7fe f87c 	bl	800d17c <sync_fs>
 800f084:	4603      	mov	r3, r0
 800f086:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	7d1b      	ldrb	r3, [r3, #20]
 800f08c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f090:	b2da      	uxtb	r2, r3
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f096:	68bb      	ldr	r3, [r7, #8]
 800f098:	7dfa      	ldrb	r2, [r7, #23]
 800f09a:	4611      	mov	r1, r2
 800f09c:	4618      	mov	r0, r3
 800f09e:	f7fd fe74 	bl	800cd8a <unlock_fs>
 800f0a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	3718      	adds	r7, #24
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}

0800f0ac <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b084      	sub	sp, #16
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f0b4:	6878      	ldr	r0, [r7, #4]
 800f0b6:	f7ff ff70 	bl	800ef9a <f_sync>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f0be:	7bfb      	ldrb	r3, [r7, #15]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d11d      	bne.n	800f100 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	f107 0208 	add.w	r2, r7, #8
 800f0ca:	4611      	mov	r1, r2
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f7ff f9e1 	bl	800e494 <validate>
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f0d6:	7bfb      	ldrb	r3, [r7, #15]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d111      	bne.n	800f100 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	691b      	ldr	r3, [r3, #16]
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	f7fd ff79 	bl	800cfd8 <dec_lock>
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f0ea:	7bfb      	ldrb	r3, [r7, #15]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d102      	bne.n	800f0f6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800f0f6:	68bb      	ldr	r3, [r7, #8]
 800f0f8:	2100      	movs	r1, #0
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	f7fd fe45 	bl	800cd8a <unlock_fs>
#endif
		}
	}
	return res;
 800f100:	7bfb      	ldrb	r3, [r7, #15]
}
 800f102:	4618      	mov	r0, r3
 800f104:	3710      	adds	r7, #16
 800f106:	46bd      	mov	sp, r7
 800f108:	bd80      	pop	{r7, pc}
	...

0800f10c <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800f10c:	b590      	push	{r4, r7, lr}
 800f10e:	b09d      	sub	sp, #116	; 0x74
 800f110:	af00      	add	r7, sp, #0
 800f112:	60f8      	str	r0, [r7, #12]
 800f114:	607a      	str	r2, [r7, #4]
 800f116:	603b      	str	r3, [r7, #0]
 800f118:	460b      	mov	r3, r1
 800f11a:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800f11c:	2301      	movs	r3, #1
 800f11e:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800f120:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f124:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800f126:	f107 030c 	add.w	r3, r7, #12
 800f12a:	4618      	mov	r0, r3
 800f12c:	f7fe fec3 	bl	800deb6 <get_ldnumber>
 800f130:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f134:	2b00      	cmp	r3, #0
 800f136:	da02      	bge.n	800f13e <f_mkfs+0x32>
 800f138:	230b      	movs	r3, #11
 800f13a:	f000 bc0d 	b.w	800f958 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800f13e:	4a94      	ldr	r2, [pc, #592]	; (800f390 <f_mkfs+0x284>)
 800f140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d005      	beq.n	800f156 <f_mkfs+0x4a>
 800f14a:	4a91      	ldr	r2, [pc, #580]	; (800f390 <f_mkfs+0x284>)
 800f14c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f14e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f152:	2200      	movs	r2, #0
 800f154:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800f156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f158:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800f15c:	2300      	movs	r3, #0
 800f15e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800f162:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f166:	4618      	mov	r0, r3
 800f168:	f7fd fc76 	bl	800ca58 <disk_initialize>
 800f16c:	4603      	mov	r3, r0
 800f16e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800f172:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800f176:	f003 0301 	and.w	r3, r3, #1
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d001      	beq.n	800f182 <f_mkfs+0x76>
 800f17e:	2303      	movs	r3, #3
 800f180:	e3ea      	b.n	800f958 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800f182:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800f186:	f003 0304 	and.w	r3, r3, #4
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d001      	beq.n	800f192 <f_mkfs+0x86>
 800f18e:	230a      	movs	r3, #10
 800f190:	e3e2      	b.n	800f958 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800f192:	f107 0214 	add.w	r2, r7, #20
 800f196:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f19a:	2103      	movs	r1, #3
 800f19c:	4618      	mov	r0, r3
 800f19e:	f7fd fcc1 	bl	800cb24 <disk_ioctl>
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d10c      	bne.n	800f1c2 <f_mkfs+0xb6>
 800f1a8:	697b      	ldr	r3, [r7, #20]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d009      	beq.n	800f1c2 <f_mkfs+0xb6>
 800f1ae:	697b      	ldr	r3, [r7, #20]
 800f1b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f1b4:	d805      	bhi.n	800f1c2 <f_mkfs+0xb6>
 800f1b6:	697b      	ldr	r3, [r7, #20]
 800f1b8:	1e5a      	subs	r2, r3, #1
 800f1ba:	697b      	ldr	r3, [r7, #20]
 800f1bc:	4013      	ands	r3, r2
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d001      	beq.n	800f1c6 <f_mkfs+0xba>
 800f1c2:	2301      	movs	r3, #1
 800f1c4:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800f1c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f1ca:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d003      	beq.n	800f1da <f_mkfs+0xce>
 800f1d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f1d4:	687a      	ldr	r2, [r7, #4]
 800f1d6:	429a      	cmp	r2, r3
 800f1d8:	d309      	bcc.n	800f1ee <f_mkfs+0xe2>
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f1e0:	d805      	bhi.n	800f1ee <f_mkfs+0xe2>
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	1e5a      	subs	r2, r3, #1
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	4013      	ands	r3, r2
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d001      	beq.n	800f1f2 <f_mkfs+0xe6>
 800f1ee:	2313      	movs	r3, #19
 800f1f0:	e3b2      	b.n	800f958 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800f1f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f1f4:	687a      	ldr	r2, [r7, #4]
 800f1f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1fa:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800f200:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f202:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f206:	fbb2 f3f3 	udiv	r3, r2, r3
 800f20a:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800f20c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f210:	fb02 f303 	mul.w	r3, r2, r3
 800f214:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800f216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d101      	bne.n	800f220 <f_mkfs+0x114>
 800f21c:	230e      	movs	r3, #14
 800f21e:	e39b      	b.n	800f958 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800f220:	f107 0210 	add.w	r2, r7, #16
 800f224:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f228:	2101      	movs	r1, #1
 800f22a:	4618      	mov	r0, r3
 800f22c:	f7fd fc7a 	bl	800cb24 <disk_ioctl>
 800f230:	4603      	mov	r3, r0
 800f232:	2b00      	cmp	r3, #0
 800f234:	d001      	beq.n	800f23a <f_mkfs+0x12e>
 800f236:	2301      	movs	r3, #1
 800f238:	e38e      	b.n	800f958 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800f23a:	7afb      	ldrb	r3, [r7, #11]
 800f23c:	f003 0308 	and.w	r3, r3, #8
 800f240:	2b00      	cmp	r3, #0
 800f242:	d001      	beq.n	800f248 <f_mkfs+0x13c>
 800f244:	2300      	movs	r3, #0
 800f246:	e000      	b.n	800f24a <f_mkfs+0x13e>
 800f248:	233f      	movs	r3, #63	; 0x3f
 800f24a:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800f24c:	693b      	ldr	r3, [r7, #16]
 800f24e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f250:	429a      	cmp	r2, r3
 800f252:	d901      	bls.n	800f258 <f_mkfs+0x14c>
 800f254:	230e      	movs	r3, #14
 800f256:	e37f      	b.n	800f958 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800f258:	693a      	ldr	r2, [r7, #16]
 800f25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f25c:	1ad3      	subs	r3, r2, r3
 800f25e:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800f260:	693b      	ldr	r3, [r7, #16]
 800f262:	2b7f      	cmp	r3, #127	; 0x7f
 800f264:	d801      	bhi.n	800f26a <f_mkfs+0x15e>
 800f266:	230e      	movs	r3, #14
 800f268:	e376      	b.n	800f958 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	2b80      	cmp	r3, #128	; 0x80
 800f26e:	d901      	bls.n	800f274 <f_mkfs+0x168>
 800f270:	2313      	movs	r3, #19
 800f272:	e371      	b.n	800f958 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800f274:	7afb      	ldrb	r3, [r7, #11]
 800f276:	f003 0302 	and.w	r3, r3, #2
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d00d      	beq.n	800f29a <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800f27e:	7afb      	ldrb	r3, [r7, #11]
 800f280:	f003 0307 	and.w	r3, r3, #7
 800f284:	2b02      	cmp	r3, #2
 800f286:	d004      	beq.n	800f292 <f_mkfs+0x186>
 800f288:	7afb      	ldrb	r3, [r7, #11]
 800f28a:	f003 0301 	and.w	r3, r3, #1
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d103      	bne.n	800f29a <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800f292:	2303      	movs	r3, #3
 800f294:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800f298:	e009      	b.n	800f2ae <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800f29a:	7afb      	ldrb	r3, [r7, #11]
 800f29c:	f003 0301 	and.w	r3, r3, #1
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d101      	bne.n	800f2a8 <f_mkfs+0x19c>
 800f2a4:	2313      	movs	r3, #19
 800f2a6:	e357      	b.n	800f958 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800f2a8:	2302      	movs	r3, #2
 800f2aa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	66fb      	str	r3, [r7, #108]	; 0x6c
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800f2b2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f2b6:	2b03      	cmp	r3, #3
 800f2b8:	d13c      	bne.n	800f334 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800f2ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d11b      	bne.n	800f2f8 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800f2c0:	693b      	ldr	r3, [r7, #16]
 800f2c2:	0c5b      	lsrs	r3, r3, #17
 800f2c4:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f2ce:	e005      	b.n	800f2dc <f_mkfs+0x1d0>
 800f2d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f2d2:	3301      	adds	r3, #1
 800f2d4:	64bb      	str	r3, [r7, #72]	; 0x48
 800f2d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f2d8:	005b      	lsls	r3, r3, #1
 800f2da:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f2dc:	4a2d      	ldr	r2, [pc, #180]	; (800f394 <f_mkfs+0x288>)
 800f2de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f2e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d007      	beq.n	800f2f8 <f_mkfs+0x1ec>
 800f2e8:	4a2a      	ldr	r2, [pc, #168]	; (800f394 <f_mkfs+0x288>)
 800f2ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f2ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f2f0:	461a      	mov	r2, r3
 800f2f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f2f4:	4293      	cmp	r3, r2
 800f2f6:	d2eb      	bcs.n	800f2d0 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800f2f8:	693a      	ldr	r2, [r7, #16]
 800f2fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f2fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800f300:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800f302:	6a3b      	ldr	r3, [r7, #32]
 800f304:	3302      	adds	r3, #2
 800f306:	009a      	lsls	r2, r3, #2
 800f308:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f30a:	4413      	add	r3, r2
 800f30c:	1e5a      	subs	r2, r3, #1
 800f30e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f310:	fbb2 f3f3 	udiv	r3, r2, r3
 800f314:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 32;	/* Number of reserved sectors */
 800f316:	2320      	movs	r3, #32
 800f318:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = 0;		/* No static directory */
 800f31a:	2300      	movs	r3, #0
 800f31c:	653b      	str	r3, [r7, #80]	; 0x50
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800f31e:	6a3b      	ldr	r3, [r7, #32]
 800f320:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f324:	4293      	cmp	r3, r2
 800f326:	d903      	bls.n	800f330 <f_mkfs+0x224>
 800f328:	6a3b      	ldr	r3, [r7, #32]
 800f32a:	4a1b      	ldr	r2, [pc, #108]	; (800f398 <f_mkfs+0x28c>)
 800f32c:	4293      	cmp	r3, r2
 800f32e:	d952      	bls.n	800f3d6 <f_mkfs+0x2ca>
 800f330:	230e      	movs	r3, #14
 800f332:	e311      	b.n	800f958 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800f334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f336:	2b00      	cmp	r3, #0
 800f338:	d11b      	bne.n	800f372 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800f33a:	693b      	ldr	r3, [r7, #16]
 800f33c:	0b1b      	lsrs	r3, r3, #12
 800f33e:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800f340:	2300      	movs	r3, #0
 800f342:	64bb      	str	r3, [r7, #72]	; 0x48
 800f344:	2301      	movs	r3, #1
 800f346:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f348:	e005      	b.n	800f356 <f_mkfs+0x24a>
 800f34a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f34c:	3301      	adds	r3, #1
 800f34e:	64bb      	str	r3, [r7, #72]	; 0x48
 800f350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f352:	005b      	lsls	r3, r3, #1
 800f354:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f356:	4a11      	ldr	r2, [pc, #68]	; (800f39c <f_mkfs+0x290>)
 800f358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f35a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d007      	beq.n	800f372 <f_mkfs+0x266>
 800f362:	4a0e      	ldr	r2, [pc, #56]	; (800f39c <f_mkfs+0x290>)
 800f364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f366:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f36a:	461a      	mov	r2, r3
 800f36c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f36e:	4293      	cmp	r3, r2
 800f370:	d2eb      	bcs.n	800f34a <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800f372:	693a      	ldr	r2, [r7, #16]
 800f374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f376:	fbb2 f3f3 	udiv	r3, r2, r3
 800f37a:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800f37c:	6a3b      	ldr	r3, [r7, #32]
 800f37e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f382:	4293      	cmp	r3, r2
 800f384:	d90c      	bls.n	800f3a0 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800f386:	6a3b      	ldr	r3, [r7, #32]
 800f388:	3302      	adds	r3, #2
 800f38a:	005b      	lsls	r3, r3, #1
 800f38c:	663b      	str	r3, [r7, #96]	; 0x60
 800f38e:	e012      	b.n	800f3b6 <f_mkfs+0x2aa>
 800f390:	200000b4 	.word	0x200000b4
 800f394:	08015db4 	.word	0x08015db4
 800f398:	0ffffff5 	.word	0x0ffffff5
 800f39c:	08015dc4 	.word	0x08015dc4
				} else {
					fmt = FS_FAT12;
 800f3a0:	2301      	movs	r3, #1
 800f3a2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800f3a6:	6a3a      	ldr	r2, [r7, #32]
 800f3a8:	4613      	mov	r3, r2
 800f3aa:	005b      	lsls	r3, r3, #1
 800f3ac:	4413      	add	r3, r2
 800f3ae:	3301      	adds	r3, #1
 800f3b0:	085b      	lsrs	r3, r3, #1
 800f3b2:	3303      	adds	r3, #3
 800f3b4:	663b      	str	r3, [r7, #96]	; 0x60
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800f3b6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f3b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f3ba:	4413      	add	r3, r2
 800f3bc:	1e5a      	subs	r2, r3, #1
 800f3be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f3c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3c4:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 1;						/* Number of reserved sectors */
 800f3c6:	2301      	movs	r3, #1
 800f3c8:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800f3ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3cc:	015a      	lsls	r2, r3, #5
 800f3ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f3d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3d4:	653b      	str	r3, [r7, #80]	; 0x50
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800f3d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f3da:	4413      	add	r3, r2
 800f3dc:	65fb      	str	r3, [r7, #92]	; 0x5c
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800f3de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f3e2:	fb02 f203 	mul.w	r2, r2, r3
 800f3e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f3e8:	4413      	add	r3, r2
 800f3ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f3ec:	4413      	add	r3, r2
 800f3ee:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800f3f0:	697a      	ldr	r2, [r7, #20]
 800f3f2:	69fb      	ldr	r3, [r7, #28]
 800f3f4:	4413      	add	r3, r2
 800f3f6:	1e5a      	subs	r2, r3, #1
 800f3f8:	697b      	ldr	r3, [r7, #20]
 800f3fa:	425b      	negs	r3, r3
 800f3fc:	401a      	ands	r2, r3
 800f3fe:	69fb      	ldr	r3, [r7, #28]
 800f400:	1ad3      	subs	r3, r2, r3
 800f402:	663b      	str	r3, [r7, #96]	; 0x60
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800f404:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f408:	2b03      	cmp	r3, #3
 800f40a:	d108      	bne.n	800f41e <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800f40c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f40e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f410:	4413      	add	r3, r2
 800f412:	65bb      	str	r3, [r7, #88]	; 0x58
 800f414:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f416:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f418:	4413      	add	r3, r2
 800f41a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f41c:	e006      	b.n	800f42c <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800f41e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f422:	fbb2 f3f3 	udiv	r3, r2, r3
 800f426:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f428:	4413      	add	r3, r2
 800f42a:	657b      	str	r3, [r7, #84]	; 0x54
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800f42c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f42e:	011a      	lsls	r2, r3, #4
 800f430:	69fb      	ldr	r3, [r7, #28]
 800f432:	441a      	add	r2, r3
 800f434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f436:	1ad2      	subs	r2, r2, r3
 800f438:	693b      	ldr	r3, [r7, #16]
 800f43a:	429a      	cmp	r2, r3
 800f43c:	d901      	bls.n	800f442 <f_mkfs+0x336>
 800f43e:	230e      	movs	r3, #14
 800f440:	e28a      	b.n	800f958 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800f442:	693a      	ldr	r2, [r7, #16]
 800f444:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f446:	1ad2      	subs	r2, r2, r3
 800f448:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f44a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f44c:	fb01 f303 	mul.w	r3, r1, r3
 800f450:	1ad2      	subs	r2, r2, r3
 800f452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f454:	1ad2      	subs	r2, r2, r3
 800f456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f458:	fbb2 f3f3 	udiv	r3, r2, r3
 800f45c:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800f45e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f462:	2b03      	cmp	r3, #3
 800f464:	d10f      	bne.n	800f486 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800f466:	6a3b      	ldr	r3, [r7, #32]
 800f468:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f46c:	4293      	cmp	r3, r2
 800f46e:	d80a      	bhi.n	800f486 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d105      	bne.n	800f482 <f_mkfs+0x376>
 800f476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f478:	085b      	lsrs	r3, r3, #1
 800f47a:	607b      	str	r3, [r7, #4]
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d144      	bne.n	800f50c <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800f482:	230e      	movs	r3, #14
 800f484:	e268      	b.n	800f958 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800f486:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f48a:	2b02      	cmp	r3, #2
 800f48c:	d133      	bne.n	800f4f6 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800f48e:	6a3b      	ldr	r3, [r7, #32]
 800f490:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f494:	4293      	cmp	r3, r2
 800f496:	d91e      	bls.n	800f4d6 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d107      	bne.n	800f4ae <f_mkfs+0x3a2>
 800f49e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f4a0:	005b      	lsls	r3, r3, #1
 800f4a2:	2b40      	cmp	r3, #64	; 0x40
 800f4a4:	d803      	bhi.n	800f4ae <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800f4a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f4a8:	005b      	lsls	r3, r3, #1
 800f4aa:	607b      	str	r3, [r7, #4]
 800f4ac:	e033      	b.n	800f516 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800f4ae:	7afb      	ldrb	r3, [r7, #11]
 800f4b0:	f003 0302 	and.w	r3, r3, #2
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d003      	beq.n	800f4c0 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800f4b8:	2303      	movs	r3, #3
 800f4ba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800f4be:	e02a      	b.n	800f516 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d105      	bne.n	800f4d2 <f_mkfs+0x3c6>
 800f4c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f4c8:	005b      	lsls	r3, r3, #1
 800f4ca:	607b      	str	r3, [r7, #4]
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2b80      	cmp	r3, #128	; 0x80
 800f4d0:	d91e      	bls.n	800f510 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800f4d2:	230e      	movs	r3, #14
 800f4d4:	e240      	b.n	800f958 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800f4d6:	6a3b      	ldr	r3, [r7, #32]
 800f4d8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f4dc:	4293      	cmp	r3, r2
 800f4de:	d80a      	bhi.n	800f4f6 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d105      	bne.n	800f4f2 <f_mkfs+0x3e6>
 800f4e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f4e8:	005b      	lsls	r3, r3, #1
 800f4ea:	607b      	str	r3, [r7, #4]
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	2b80      	cmp	r3, #128	; 0x80
 800f4f0:	d910      	bls.n	800f514 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800f4f2:	230e      	movs	r3, #14
 800f4f4:	e230      	b.n	800f958 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800f4f6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f4fa:	2b01      	cmp	r3, #1
 800f4fc:	d10c      	bne.n	800f518 <f_mkfs+0x40c>
 800f4fe:	6a3b      	ldr	r3, [r7, #32]
 800f500:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f504:	4293      	cmp	r3, r2
 800f506:	d907      	bls.n	800f518 <f_mkfs+0x40c>
 800f508:	230e      	movs	r3, #14
 800f50a:	e225      	b.n	800f958 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800f50c:	bf00      	nop
 800f50e:	e6ce      	b.n	800f2ae <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f510:	bf00      	nop
 800f512:	e6cc      	b.n	800f2ae <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f514:	bf00      	nop
			pau = au;
 800f516:	e6ca      	b.n	800f2ae <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800f518:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800f51a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f51c:	461a      	mov	r2, r3
 800f51e:	2100      	movs	r1, #0
 800f520:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f522:	f7fd fbc0 	bl	800cca6 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800f526:	220b      	movs	r2, #11
 800f528:	49bc      	ldr	r1, [pc, #752]	; (800f81c <f_mkfs+0x710>)
 800f52a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f52c:	f7fd fb9a 	bl	800cc64 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800f530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f532:	330b      	adds	r3, #11
 800f534:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f536:	4611      	mov	r1, r2
 800f538:	4618      	mov	r0, r3
 800f53a:	f7fd fb4c 	bl	800cbd6 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800f53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f540:	330d      	adds	r3, #13
 800f542:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f544:	b2d2      	uxtb	r2, r2
 800f546:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800f548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f54a:	330e      	adds	r3, #14
 800f54c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f54e:	b292      	uxth	r2, r2
 800f550:	4611      	mov	r1, r2
 800f552:	4618      	mov	r0, r3
 800f554:	f7fd fb3f 	bl	800cbd6 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800f558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f55a:	3310      	adds	r3, #16
 800f55c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f55e:	b2d2      	uxtb	r2, r2
 800f560:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800f562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f564:	f103 0211 	add.w	r2, r3, #17
 800f568:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f56c:	2b03      	cmp	r3, #3
 800f56e:	d002      	beq.n	800f576 <f_mkfs+0x46a>
 800f570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f572:	b29b      	uxth	r3, r3
 800f574:	e000      	b.n	800f578 <f_mkfs+0x46c>
 800f576:	2300      	movs	r3, #0
 800f578:	4619      	mov	r1, r3
 800f57a:	4610      	mov	r0, r2
 800f57c:	f7fd fb2b 	bl	800cbd6 <st_word>
		if (sz_vol < 0x10000) {
 800f580:	693b      	ldr	r3, [r7, #16]
 800f582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f586:	d208      	bcs.n	800f59a <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800f588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f58a:	3313      	adds	r3, #19
 800f58c:	693a      	ldr	r2, [r7, #16]
 800f58e:	b292      	uxth	r2, r2
 800f590:	4611      	mov	r1, r2
 800f592:	4618      	mov	r0, r3
 800f594:	f7fd fb1f 	bl	800cbd6 <st_word>
 800f598:	e006      	b.n	800f5a8 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800f59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f59c:	3320      	adds	r3, #32
 800f59e:	693a      	ldr	r2, [r7, #16]
 800f5a0:	4611      	mov	r1, r2
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	f7fd fb32 	bl	800cc0c <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800f5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5aa:	3315      	adds	r3, #21
 800f5ac:	22f8      	movs	r2, #248	; 0xf8
 800f5ae:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800f5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5b2:	3318      	adds	r3, #24
 800f5b4:	213f      	movs	r1, #63	; 0x3f
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	f7fd fb0d 	bl	800cbd6 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800f5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5be:	331a      	adds	r3, #26
 800f5c0:	21ff      	movs	r1, #255	; 0xff
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f7fd fb07 	bl	800cbd6 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800f5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ca:	331c      	adds	r3, #28
 800f5cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	f7fd fb1c 	bl	800cc0c <st_dword>
		if (fmt == FS_FAT32) {
 800f5d4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f5d8:	2b03      	cmp	r3, #3
 800f5da:	d131      	bne.n	800f640 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800f5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5de:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800f5e2:	f003 f921 	bl	8012828 <get_fattime>
 800f5e6:	4603      	mov	r3, r0
 800f5e8:	4619      	mov	r1, r3
 800f5ea:	4620      	mov	r0, r4
 800f5ec:	f7fd fb0e 	bl	800cc0c <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800f5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5f2:	3324      	adds	r3, #36	; 0x24
 800f5f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f7fd fb08 	bl	800cc0c <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800f5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5fe:	332c      	adds	r3, #44	; 0x2c
 800f600:	2102      	movs	r1, #2
 800f602:	4618      	mov	r0, r3
 800f604:	f7fd fb02 	bl	800cc0c <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800f608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f60a:	3330      	adds	r3, #48	; 0x30
 800f60c:	2101      	movs	r1, #1
 800f60e:	4618      	mov	r0, r3
 800f610:	f7fd fae1 	bl	800cbd6 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800f614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f616:	3332      	adds	r3, #50	; 0x32
 800f618:	2106      	movs	r1, #6
 800f61a:	4618      	mov	r0, r3
 800f61c:	f7fd fadb 	bl	800cbd6 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800f620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f622:	3340      	adds	r3, #64	; 0x40
 800f624:	2280      	movs	r2, #128	; 0x80
 800f626:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800f628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f62a:	3342      	adds	r3, #66	; 0x42
 800f62c:	2229      	movs	r2, #41	; 0x29
 800f62e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800f630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f632:	3347      	adds	r3, #71	; 0x47
 800f634:	2213      	movs	r2, #19
 800f636:	497a      	ldr	r1, [pc, #488]	; (800f820 <f_mkfs+0x714>)
 800f638:	4618      	mov	r0, r3
 800f63a:	f7fd fb13 	bl	800cc64 <mem_cpy>
 800f63e:	e020      	b.n	800f682 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800f640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f642:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800f646:	f003 f8ef 	bl	8012828 <get_fattime>
 800f64a:	4603      	mov	r3, r0
 800f64c:	4619      	mov	r1, r3
 800f64e:	4620      	mov	r0, r4
 800f650:	f7fd fadc 	bl	800cc0c <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800f654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f656:	3316      	adds	r3, #22
 800f658:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f65a:	b292      	uxth	r2, r2
 800f65c:	4611      	mov	r1, r2
 800f65e:	4618      	mov	r0, r3
 800f660:	f7fd fab9 	bl	800cbd6 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800f664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f666:	3324      	adds	r3, #36	; 0x24
 800f668:	2280      	movs	r2, #128	; 0x80
 800f66a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800f66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f66e:	3326      	adds	r3, #38	; 0x26
 800f670:	2229      	movs	r2, #41	; 0x29
 800f672:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800f674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f676:	332b      	adds	r3, #43	; 0x2b
 800f678:	2213      	movs	r2, #19
 800f67a:	496a      	ldr	r1, [pc, #424]	; (800f824 <f_mkfs+0x718>)
 800f67c:	4618      	mov	r0, r3
 800f67e:	f7fd faf1 	bl	800cc64 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800f682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f684:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f688:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f68c:	4618      	mov	r0, r3
 800f68e:	f7fd faa2 	bl	800cbd6 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800f692:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f696:	2301      	movs	r3, #1
 800f698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f69a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f69c:	f7fd fa22 	bl	800cae4 <disk_write>
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d001      	beq.n	800f6aa <f_mkfs+0x59e>
 800f6a6:	2301      	movs	r3, #1
 800f6a8:	e156      	b.n	800f958 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800f6aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f6ae:	2b03      	cmp	r3, #3
 800f6b0:	d140      	bne.n	800f734 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800f6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6b4:	1d9a      	adds	r2, r3, #6
 800f6b6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f6ba:	2301      	movs	r3, #1
 800f6bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f6be:	f7fd fa11 	bl	800cae4 <disk_write>
			mem_set(buf, 0, ss);
 800f6c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f6c4:	461a      	mov	r2, r3
 800f6c6:	2100      	movs	r1, #0
 800f6c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f6ca:	f7fd faec 	bl	800cca6 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800f6ce:	4956      	ldr	r1, [pc, #344]	; (800f828 <f_mkfs+0x71c>)
 800f6d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f6d2:	f7fd fa9b 	bl	800cc0c <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800f6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6d8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f6dc:	4953      	ldr	r1, [pc, #332]	; (800f82c <f_mkfs+0x720>)
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f7fd fa94 	bl	800cc0c <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800f6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6e6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f6ea:	6a3b      	ldr	r3, [r7, #32]
 800f6ec:	3b01      	subs	r3, #1
 800f6ee:	4619      	mov	r1, r3
 800f6f0:	4610      	mov	r0, r2
 800f6f2:	f7fd fa8b 	bl	800cc0c <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800f6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6f8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f6fc:	2102      	movs	r1, #2
 800f6fe:	4618      	mov	r0, r3
 800f700:	f7fd fa84 	bl	800cc0c <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800f704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f706:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f70a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f70e:	4618      	mov	r0, r3
 800f710:	f7fd fa61 	bl	800cbd6 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800f714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f716:	1dda      	adds	r2, r3, #7
 800f718:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f71c:	2301      	movs	r3, #1
 800f71e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f720:	f7fd f9e0 	bl	800cae4 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800f724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f726:	1c5a      	adds	r2, r3, #1
 800f728:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f72c:	2301      	movs	r3, #1
 800f72e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f730:	f7fd f9d8 	bl	800cae4 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800f734:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f736:	2100      	movs	r1, #0
 800f738:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f73a:	f7fd fab4 	bl	800cca6 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800f73e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f740:	66bb      	str	r3, [r7, #104]	; 0x68
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800f742:	2300      	movs	r3, #0
 800f744:	64bb      	str	r3, [r7, #72]	; 0x48
 800f746:	e04b      	b.n	800f7e0 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800f748:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f74c:	2b03      	cmp	r3, #3
 800f74e:	d113      	bne.n	800f778 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800f750:	f06f 0107 	mvn.w	r1, #7
 800f754:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f756:	f7fd fa59 	bl	800cc0c <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800f75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f75c:	3304      	adds	r3, #4
 800f75e:	f04f 31ff 	mov.w	r1, #4294967295
 800f762:	4618      	mov	r0, r3
 800f764:	f7fd fa52 	bl	800cc0c <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800f768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f76a:	3308      	adds	r3, #8
 800f76c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800f770:	4618      	mov	r0, r3
 800f772:	f7fd fa4b 	bl	800cc0c <st_dword>
 800f776:	e00b      	b.n	800f790 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800f778:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f77c:	2b01      	cmp	r3, #1
 800f77e:	d101      	bne.n	800f784 <f_mkfs+0x678>
 800f780:	4b2b      	ldr	r3, [pc, #172]	; (800f830 <f_mkfs+0x724>)
 800f782:	e001      	b.n	800f788 <f_mkfs+0x67c>
 800f784:	f06f 0307 	mvn.w	r3, #7
 800f788:	4619      	mov	r1, r3
 800f78a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f78c:	f7fd fa3e 	bl	800cc0c <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800f790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f792:	667b      	str	r3, [r7, #100]	; 0x64
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800f794:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f798:	4293      	cmp	r3, r2
 800f79a:	bf28      	it	cs
 800f79c:	4613      	movcs	r3, r2
 800f79e:	663b      	str	r3, [r7, #96]	; 0x60
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800f7a0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f7a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f7a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f7a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f7aa:	f7fd f99b 	bl	800cae4 <disk_write>
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d001      	beq.n	800f7b8 <f_mkfs+0x6ac>
 800f7b4:	2301      	movs	r3, #1
 800f7b6:	e0cf      	b.n	800f958 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800f7b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f7ba:	461a      	mov	r2, r3
 800f7bc:	2100      	movs	r1, #0
 800f7be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f7c0:	f7fd fa71 	bl	800cca6 <mem_set>
				sect += n; nsect -= n;
 800f7c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f7c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f7c8:	4413      	add	r3, r2
 800f7ca:	66bb      	str	r3, [r7, #104]	; 0x68
 800f7cc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f7ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f7d0:	1ad3      	subs	r3, r2, r3
 800f7d2:	667b      	str	r3, [r7, #100]	; 0x64
			} while (nsect);
 800f7d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d1dc      	bne.n	800f794 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800f7da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7dc:	3301      	adds	r3, #1
 800f7de:	64bb      	str	r3, [r7, #72]	; 0x48
 800f7e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f7e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f7e4:	429a      	cmp	r2, r3
 800f7e6:	d3af      	bcc.n	800f748 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800f7e8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f7ec:	2b03      	cmp	r3, #3
 800f7ee:	d101      	bne.n	800f7f4 <f_mkfs+0x6e8>
 800f7f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f7f2:	e000      	b.n	800f7f6 <f_mkfs+0x6ea>
 800f7f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7f6:	667b      	str	r3, [r7, #100]	; 0x64
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800f7f8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7fc:	4293      	cmp	r3, r2
 800f7fe:	bf28      	it	cs
 800f800:	4613      	movcs	r3, r2
 800f802:	663b      	str	r3, [r7, #96]	; 0x60
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800f804:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f808:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f80a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f80c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f80e:	f7fd f969 	bl	800cae4 <disk_write>
 800f812:	4603      	mov	r3, r0
 800f814:	2b00      	cmp	r3, #0
 800f816:	d00d      	beq.n	800f834 <f_mkfs+0x728>
 800f818:	2301      	movs	r3, #1
 800f81a:	e09d      	b.n	800f958 <f_mkfs+0x84c>
 800f81c:	08015c98 	.word	0x08015c98
 800f820:	08015ca4 	.word	0x08015ca4
 800f824:	08015cb8 	.word	0x08015cb8
 800f828:	41615252 	.word	0x41615252
 800f82c:	61417272 	.word	0x61417272
 800f830:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 800f834:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f836:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f838:	4413      	add	r3, r2
 800f83a:	66bb      	str	r3, [r7, #104]	; 0x68
 800f83c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f83e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f840:	1ad3      	subs	r3, r2, r3
 800f842:	667b      	str	r3, [r7, #100]	; 0x64
		} while (nsect);
 800f844:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f846:	2b00      	cmp	r3, #0
 800f848:	d1d6      	bne.n	800f7f8 <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800f84a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f84e:	2b03      	cmp	r3, #3
 800f850:	d103      	bne.n	800f85a <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800f852:	230c      	movs	r3, #12
 800f854:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800f858:	e010      	b.n	800f87c <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800f85a:	693b      	ldr	r3, [r7, #16]
 800f85c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f860:	d303      	bcc.n	800f86a <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800f862:	2306      	movs	r3, #6
 800f864:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800f868:	e008      	b.n	800f87c <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800f86a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f86e:	2b02      	cmp	r3, #2
 800f870:	d101      	bne.n	800f876 <f_mkfs+0x76a>
 800f872:	2304      	movs	r3, #4
 800f874:	e000      	b.n	800f878 <f_mkfs+0x76c>
 800f876:	2301      	movs	r3, #1
 800f878:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800f87c:	7afb      	ldrb	r3, [r7, #11]
 800f87e:	f003 0308 	and.w	r3, r3, #8
 800f882:	2b00      	cmp	r3, #0
 800f884:	d15b      	bne.n	800f93e <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800f886:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f888:	461a      	mov	r2, r3
 800f88a:	2100      	movs	r1, #0
 800f88c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f88e:	f7fd fa0a 	bl	800cca6 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800f892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f894:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f898:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f89c:	4618      	mov	r0, r3
 800f89e:	f7fd f99a 	bl	800cbd6 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800f8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8a4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f8a8:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800f8aa:	69bb      	ldr	r3, [r7, #24]
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800f8b0:	69bb      	ldr	r3, [r7, #24]
 800f8b2:	3301      	adds	r3, #1
 800f8b4:	2201      	movs	r2, #1
 800f8b6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800f8b8:	69bb      	ldr	r3, [r7, #24]
 800f8ba:	3302      	adds	r3, #2
 800f8bc:	2201      	movs	r2, #1
 800f8be:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800f8c0:	69bb      	ldr	r3, [r7, #24]
 800f8c2:	3303      	adds	r3, #3
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800f8c8:	69bb      	ldr	r3, [r7, #24]
 800f8ca:	3304      	adds	r3, #4
 800f8cc:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800f8d0:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800f8d2:	693a      	ldr	r2, [r7, #16]
 800f8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8d6:	441a      	add	r2, r3
 800f8d8:	4b21      	ldr	r3, [pc, #132]	; (800f960 <f_mkfs+0x854>)
 800f8da:	fba3 1302 	umull	r1, r3, r3, r2
 800f8de:	1ad2      	subs	r2, r2, r3
 800f8e0:	0852      	lsrs	r2, r2, #1
 800f8e2:	4413      	add	r3, r2
 800f8e4:	0b5b      	lsrs	r3, r3, #13
 800f8e6:	663b      	str	r3, [r7, #96]	; 0x60
			pte[PTE_EdHead] = 254;				/* End head */
 800f8e8:	69bb      	ldr	r3, [r7, #24]
 800f8ea:	3305      	adds	r3, #5
 800f8ec:	22fe      	movs	r2, #254	; 0xfe
 800f8ee:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800f8f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f8f2:	089b      	lsrs	r3, r3, #2
 800f8f4:	b2da      	uxtb	r2, r3
 800f8f6:	69bb      	ldr	r3, [r7, #24]
 800f8f8:	3306      	adds	r3, #6
 800f8fa:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800f8fe:	b2d2      	uxtb	r2, r2
 800f900:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800f902:	69bb      	ldr	r3, [r7, #24]
 800f904:	3307      	adds	r3, #7
 800f906:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f908:	b2d2      	uxtb	r2, r2
 800f90a:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800f90c:	69bb      	ldr	r3, [r7, #24]
 800f90e:	3308      	adds	r3, #8
 800f910:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f912:	4618      	mov	r0, r3
 800f914:	f7fd f97a 	bl	800cc0c <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800f918:	69bb      	ldr	r3, [r7, #24]
 800f91a:	330c      	adds	r3, #12
 800f91c:	693a      	ldr	r2, [r7, #16]
 800f91e:	4611      	mov	r1, r2
 800f920:	4618      	mov	r0, r3
 800f922:	f7fd f973 	bl	800cc0c <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800f926:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f92a:	2301      	movs	r3, #1
 800f92c:	2200      	movs	r2, #0
 800f92e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f930:	f7fd f8d8 	bl	800cae4 <disk_write>
 800f934:	4603      	mov	r3, r0
 800f936:	2b00      	cmp	r3, #0
 800f938:	d001      	beq.n	800f93e <f_mkfs+0x832>
 800f93a:	2301      	movs	r3, #1
 800f93c:	e00c      	b.n	800f958 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800f93e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f942:	2200      	movs	r2, #0
 800f944:	2100      	movs	r1, #0
 800f946:	4618      	mov	r0, r3
 800f948:	f7fd f8ec 	bl	800cb24 <disk_ioctl>
 800f94c:	4603      	mov	r3, r0
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d001      	beq.n	800f956 <f_mkfs+0x84a>
 800f952:	2301      	movs	r3, #1
 800f954:	e000      	b.n	800f958 <f_mkfs+0x84c>

	return FR_OK;
 800f956:	2300      	movs	r3, #0
}
 800f958:	4618      	mov	r0, r3
 800f95a:	3774      	adds	r7, #116	; 0x74
 800f95c:	46bd      	mov	sp, r7
 800f95e:	bd90      	pop	{r4, r7, pc}
 800f960:	0515565b 	.word	0x0515565b

0800f964 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f964:	b480      	push	{r7}
 800f966:	b087      	sub	sp, #28
 800f968:	af00      	add	r7, sp, #0
 800f96a:	60f8      	str	r0, [r7, #12]
 800f96c:	60b9      	str	r1, [r7, #8]
 800f96e:	4613      	mov	r3, r2
 800f970:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f972:	2301      	movs	r3, #1
 800f974:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f976:	2300      	movs	r3, #0
 800f978:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f97a:	4b1f      	ldr	r3, [pc, #124]	; (800f9f8 <FATFS_LinkDriverEx+0x94>)
 800f97c:	7a5b      	ldrb	r3, [r3, #9]
 800f97e:	b2db      	uxtb	r3, r3
 800f980:	2b00      	cmp	r3, #0
 800f982:	d131      	bne.n	800f9e8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f984:	4b1c      	ldr	r3, [pc, #112]	; (800f9f8 <FATFS_LinkDriverEx+0x94>)
 800f986:	7a5b      	ldrb	r3, [r3, #9]
 800f988:	b2db      	uxtb	r3, r3
 800f98a:	461a      	mov	r2, r3
 800f98c:	4b1a      	ldr	r3, [pc, #104]	; (800f9f8 <FATFS_LinkDriverEx+0x94>)
 800f98e:	2100      	movs	r1, #0
 800f990:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f992:	4b19      	ldr	r3, [pc, #100]	; (800f9f8 <FATFS_LinkDriverEx+0x94>)
 800f994:	7a5b      	ldrb	r3, [r3, #9]
 800f996:	b2db      	uxtb	r3, r3
 800f998:	4a17      	ldr	r2, [pc, #92]	; (800f9f8 <FATFS_LinkDriverEx+0x94>)
 800f99a:	009b      	lsls	r3, r3, #2
 800f99c:	4413      	add	r3, r2
 800f99e:	68fa      	ldr	r2, [r7, #12]
 800f9a0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f9a2:	4b15      	ldr	r3, [pc, #84]	; (800f9f8 <FATFS_LinkDriverEx+0x94>)
 800f9a4:	7a5b      	ldrb	r3, [r3, #9]
 800f9a6:	b2db      	uxtb	r3, r3
 800f9a8:	461a      	mov	r2, r3
 800f9aa:	4b13      	ldr	r3, [pc, #76]	; (800f9f8 <FATFS_LinkDriverEx+0x94>)
 800f9ac:	4413      	add	r3, r2
 800f9ae:	79fa      	ldrb	r2, [r7, #7]
 800f9b0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f9b2:	4b11      	ldr	r3, [pc, #68]	; (800f9f8 <FATFS_LinkDriverEx+0x94>)
 800f9b4:	7a5b      	ldrb	r3, [r3, #9]
 800f9b6:	b2db      	uxtb	r3, r3
 800f9b8:	1c5a      	adds	r2, r3, #1
 800f9ba:	b2d1      	uxtb	r1, r2
 800f9bc:	4a0e      	ldr	r2, [pc, #56]	; (800f9f8 <FATFS_LinkDriverEx+0x94>)
 800f9be:	7251      	strb	r1, [r2, #9]
 800f9c0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f9c2:	7dbb      	ldrb	r3, [r7, #22]
 800f9c4:	3330      	adds	r3, #48	; 0x30
 800f9c6:	b2da      	uxtb	r2, r3
 800f9c8:	68bb      	ldr	r3, [r7, #8]
 800f9ca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f9cc:	68bb      	ldr	r3, [r7, #8]
 800f9ce:	3301      	adds	r3, #1
 800f9d0:	223a      	movs	r2, #58	; 0x3a
 800f9d2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	3302      	adds	r3, #2
 800f9d8:	222f      	movs	r2, #47	; 0x2f
 800f9da:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f9dc:	68bb      	ldr	r3, [r7, #8]
 800f9de:	3303      	adds	r3, #3
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f9e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	371c      	adds	r7, #28
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f4:	4770      	bx	lr
 800f9f6:	bf00      	nop
 800f9f8:	200000dc 	.word	0x200000dc

0800f9fc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b082      	sub	sp, #8
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
 800fa04:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fa06:	2200      	movs	r2, #0
 800fa08:	6839      	ldr	r1, [r7, #0]
 800fa0a:	6878      	ldr	r0, [r7, #4]
 800fa0c:	f7ff ffaa 	bl	800f964 <FATFS_LinkDriverEx>
 800fa10:	4603      	mov	r3, r0
}
 800fa12:	4618      	mov	r0, r3
 800fa14:	3708      	adds	r7, #8
 800fa16:	46bd      	mov	sp, r7
 800fa18:	bd80      	pop	{r7, pc}
	...

0800fa1c <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 800fa1c:	b480      	push	{r7}
 800fa1e:	b085      	sub	sp, #20
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
 800fa24:	460b      	mov	r3, r1
 800fa26:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 800fa28:	2300      	movs	r3, #0
 800fa2a:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 800fa2c:	2301      	movs	r3, #1
 800fa2e:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 800fa30:	4b15      	ldr	r3, [pc, #84]	; (800fa88 <FATFS_UnLinkDriverEx+0x6c>)
 800fa32:	7a5b      	ldrb	r3, [r3, #9]
 800fa34:	b2db      	uxtb	r3, r3
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d01e      	beq.n	800fa78 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	781b      	ldrb	r3, [r3, #0]
 800fa3e:	3b30      	subs	r3, #48	; 0x30
 800fa40:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 800fa42:	7bbb      	ldrb	r3, [r7, #14]
 800fa44:	4a10      	ldr	r2, [pc, #64]	; (800fa88 <FATFS_UnLinkDriverEx+0x6c>)
 800fa46:	009b      	lsls	r3, r3, #2
 800fa48:	4413      	add	r3, r2
 800fa4a:	685b      	ldr	r3, [r3, #4]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d013      	beq.n	800fa78 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 800fa50:	7bbb      	ldrb	r3, [r7, #14]
 800fa52:	4a0d      	ldr	r2, [pc, #52]	; (800fa88 <FATFS_UnLinkDriverEx+0x6c>)
 800fa54:	009b      	lsls	r3, r3, #2
 800fa56:	4413      	add	r3, r2
 800fa58:	2200      	movs	r2, #0
 800fa5a:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 800fa5c:	7bbb      	ldrb	r3, [r7, #14]
 800fa5e:	4a0a      	ldr	r2, [pc, #40]	; (800fa88 <FATFS_UnLinkDriverEx+0x6c>)
 800fa60:	4413      	add	r3, r2
 800fa62:	2200      	movs	r2, #0
 800fa64:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 800fa66:	4b08      	ldr	r3, [pc, #32]	; (800fa88 <FATFS_UnLinkDriverEx+0x6c>)
 800fa68:	7a5b      	ldrb	r3, [r3, #9]
 800fa6a:	b2db      	uxtb	r3, r3
 800fa6c:	3b01      	subs	r3, #1
 800fa6e:	b2da      	uxtb	r2, r3
 800fa70:	4b05      	ldr	r3, [pc, #20]	; (800fa88 <FATFS_UnLinkDriverEx+0x6c>)
 800fa72:	725a      	strb	r2, [r3, #9]
      ret = 0;
 800fa74:	2300      	movs	r3, #0
 800fa76:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800fa78:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	3714      	adds	r7, #20
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa84:	4770      	bx	lr
 800fa86:	bf00      	nop
 800fa88:	200000dc 	.word	0x200000dc

0800fa8c <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b082      	sub	sp, #8
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 800fa94:	2100      	movs	r1, #0
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	f7ff ffc0 	bl	800fa1c <FATFS_UnLinkDriverEx>
 800fa9c:	4603      	mov	r3, r0
}
 800fa9e:	4618      	mov	r0, r3
 800faa0:	3708      	adds	r7, #8
 800faa2:	46bd      	mov	sp, r7
 800faa4:	bd80      	pop	{r7, pc}

0800faa6 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800faa6:	b580      	push	{r7, lr}
 800faa8:	b084      	sub	sp, #16
 800faaa:	af00      	add	r7, sp, #0
 800faac:	4603      	mov	r3, r0
 800faae:	6039      	str	r1, [r7, #0]
 800fab0:	71fb      	strb	r3, [r7, #7]

    int ret;

    osSemaphoreDef(SEM);
 800fab2:	2300      	movs	r3, #0
 800fab4:	60bb      	str	r3, [r7, #8]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800fab6:	f107 0308 	add.w	r3, r7, #8
 800faba:	2101      	movs	r1, #1
 800fabc:	4618      	mov	r0, r3
 800fabe:	f000 f8c4 	bl	800fc4a <osSemaphoreCreate>
 800fac2:	4602      	mov	r2, r0
 800fac4:	683b      	ldr	r3, [r7, #0]
 800fac6:	601a      	str	r2, [r3, #0]
    ret = (*sobj != NULL);
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	2b00      	cmp	r3, #0
 800face:	bf14      	ite	ne
 800fad0:	2301      	movne	r3, #1
 800fad2:	2300      	moveq	r3, #0
 800fad4:	b2db      	uxtb	r3, r3
 800fad6:	60fb      	str	r3, [r7, #12]

    return ret;
 800fad8:	68fb      	ldr	r3, [r7, #12]
}
 800fada:	4618      	mov	r0, r3
 800fadc:	3710      	adds	r7, #16
 800fade:	46bd      	mov	sp, r7
 800fae0:	bd80      	pop	{r7, pc}

0800fae2 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800fae2:	b580      	push	{r7, lr}
 800fae4:	b082      	sub	sp, #8
 800fae6:	af00      	add	r7, sp, #0
 800fae8:	6078      	str	r0, [r7, #4]
    osSemaphoreDelete (sobj);
 800faea:	6878      	ldr	r0, [r7, #4]
 800faec:	f000 f956 	bl	800fd9c <osSemaphoreDelete>
    return 1;
 800faf0:	2301      	movs	r3, #1
}
 800faf2:	4618      	mov	r0, r3
 800faf4:	3708      	adds	r7, #8
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd80      	pop	{r7, pc}

0800fafa <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800fafa:	b580      	push	{r7, lr}
 800fafc:	b084      	sub	sp, #16
 800fafe:	af00      	add	r7, sp, #0
 800fb00:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800fb02:	2300      	movs	r3, #0
 800fb04:	60fb      	str	r3, [r7, #12]

  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800fb06:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800fb0a:	6878      	ldr	r0, [r7, #4]
 800fb0c:	f000 f8c2 	bl	800fc94 <osSemaphoreWait>
 800fb10:	4603      	mov	r3, r0
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d101      	bne.n	800fb1a <ff_req_grant+0x20>
  {
    ret = 1;
 800fb16:	2301      	movs	r3, #1
 800fb18:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800fb1a:	68fb      	ldr	r3, [r7, #12]
}
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	3710      	adds	r7, #16
 800fb20:	46bd      	mov	sp, r7
 800fb22:	bd80      	pop	{r7, pc}

0800fb24 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b082      	sub	sp, #8
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	f000 f8ff 	bl	800fd30 <osSemaphoreRelease>
}
 800fb32:	bf00      	nop
 800fb34:	3708      	adds	r7, #8
 800fb36:	46bd      	mov	sp, r7
 800fb38:	bd80      	pop	{r7, pc}

0800fb3a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800fb3a:	b480      	push	{r7}
 800fb3c:	b085      	sub	sp, #20
 800fb3e:	af00      	add	r7, sp, #0
 800fb40:	4603      	mov	r3, r0
 800fb42:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800fb44:	2300      	movs	r3, #0
 800fb46:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800fb48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fb4c:	2b84      	cmp	r3, #132	; 0x84
 800fb4e:	d005      	beq.n	800fb5c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800fb50:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	4413      	add	r3, r2
 800fb58:	3303      	adds	r3, #3
 800fb5a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800fb5c:	68fb      	ldr	r3, [r7, #12]
}
 800fb5e:	4618      	mov	r0, r3
 800fb60:	3714      	adds	r7, #20
 800fb62:	46bd      	mov	sp, r7
 800fb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb68:	4770      	bx	lr

0800fb6a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800fb6a:	b480      	push	{r7}
 800fb6c:	b083      	sub	sp, #12
 800fb6e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fb70:	f3ef 8305 	mrs	r3, IPSR
 800fb74:	607b      	str	r3, [r7, #4]
  return(result);
 800fb76:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	bf14      	ite	ne
 800fb7c:	2301      	movne	r3, #1
 800fb7e:	2300      	moveq	r3, #0
 800fb80:	b2db      	uxtb	r3, r3
}
 800fb82:	4618      	mov	r0, r3
 800fb84:	370c      	adds	r7, #12
 800fb86:	46bd      	mov	sp, r7
 800fb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8c:	4770      	bx	lr

0800fb8e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800fb8e:	b580      	push	{r7, lr}
 800fb90:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800fb92:	f001 fb0d 	bl	80111b0 <vTaskStartScheduler>
  
  return osOK;
 800fb96:	2300      	movs	r3, #0
}
 800fb98:	4618      	mov	r0, r3
 800fb9a:	bd80      	pop	{r7, pc}

0800fb9c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800fba0:	f001 ff2a 	bl	80119f8 <xTaskGetSchedulerState>
 800fba4:	4603      	mov	r3, r0
 800fba6:	2b01      	cmp	r3, #1
 800fba8:	d101      	bne.n	800fbae <osKernelRunning+0x12>
    return 0;
 800fbaa:	2300      	movs	r3, #0
 800fbac:	e000      	b.n	800fbb0 <osKernelRunning+0x14>
  else
    return 1;
 800fbae:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	bd80      	pop	{r7, pc}

0800fbb4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800fbb8:	f7ff ffd7 	bl	800fb6a <inHandlerMode>
 800fbbc:	4603      	mov	r3, r0
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d003      	beq.n	800fbca <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800fbc2:	f001 fbfb 	bl	80113bc <xTaskGetTickCountFromISR>
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	e002      	b.n	800fbd0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800fbca:	f001 fbe7 	bl	801139c <xTaskGetTickCount>
 800fbce:	4603      	mov	r3, r0
  }
}
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	bd80      	pop	{r7, pc}

0800fbd4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800fbd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbd6:	b087      	sub	sp, #28
 800fbd8:	af02      	add	r7, sp, #8
 800fbda:	6078      	str	r0, [r7, #4]
 800fbdc:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	685c      	ldr	r4, [r3, #4]
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fbea:	b29e      	uxth	r6, r3
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	f7ff ffa1 	bl	800fb3a <makeFreeRtosPriority>
 800fbf8:	4602      	mov	r2, r0
 800fbfa:	f107 030c 	add.w	r3, r7, #12
 800fbfe:	9301      	str	r3, [sp, #4]
 800fc00:	9200      	str	r2, [sp, #0]
 800fc02:	683b      	ldr	r3, [r7, #0]
 800fc04:	4632      	mov	r2, r6
 800fc06:	4629      	mov	r1, r5
 800fc08:	4620      	mov	r0, r4
 800fc0a:	f001 f965 	bl	8010ed8 <xTaskCreate>
 800fc0e:	4603      	mov	r3, r0
 800fc10:	2b01      	cmp	r3, #1
 800fc12:	d001      	beq.n	800fc18 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800fc14:	2300      	movs	r3, #0
 800fc16:	e000      	b.n	800fc1a <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800fc18:	68fb      	ldr	r3, [r7, #12]
}
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	3714      	adds	r7, #20
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fc22 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800fc22:	b580      	push	{r7, lr}
 800fc24:	b084      	sub	sp, #16
 800fc26:	af00      	add	r7, sp, #0
 800fc28:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d001      	beq.n	800fc38 <osDelay+0x16>
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	e000      	b.n	800fc3a <osDelay+0x18>
 800fc38:	2301      	movs	r3, #1
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	f001 fa82 	bl	8011144 <vTaskDelay>
  
  return osOK;
 800fc40:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800fc42:	4618      	mov	r0, r3
 800fc44:	3710      	adds	r7, #16
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bd80      	pop	{r7, pc}

0800fc4a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800fc4a:	b580      	push	{r7, lr}
 800fc4c:	b084      	sub	sp, #16
 800fc4e:	af00      	add	r7, sp, #0
 800fc50:	6078      	str	r0, [r7, #4]
 800fc52:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	2b01      	cmp	r3, #1
 800fc58:	d110      	bne.n	800fc7c <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 800fc5a:	2203      	movs	r2, #3
 800fc5c:	2100      	movs	r1, #0
 800fc5e:	2001      	movs	r0, #1
 800fc60:	f000 fa94 	bl	801018c <xQueueGenericCreate>
 800fc64:	60f8      	str	r0, [r7, #12]
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d005      	beq.n	800fc78 <osSemaphoreCreate+0x2e>
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	2200      	movs	r2, #0
 800fc70:	2100      	movs	r1, #0
 800fc72:	68f8      	ldr	r0, [r7, #12]
 800fc74:	f000 fb1a 	bl	80102ac <xQueueGenericSend>
    return sema;
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	e006      	b.n	800fc8a <osSemaphoreCreate+0x40>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
 800fc7c:	683b      	ldr	r3, [r7, #0]
 800fc7e:	683a      	ldr	r2, [r7, #0]
 800fc80:	4611      	mov	r1, r2
 800fc82:	4618      	mov	r0, r3
 800fc84:	f000 fadc 	bl	8010240 <xQueueCreateCountingSemaphore>
 800fc88:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	3710      	adds	r7, #16
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	bd80      	pop	{r7, pc}
	...

0800fc94 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b084      	sub	sp, #16
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
 800fc9c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800fc9e:	2300      	movs	r3, #0
 800fca0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d101      	bne.n	800fcac <osSemaphoreWait+0x18>
    return osErrorParameter;
 800fca8:	2380      	movs	r3, #128	; 0x80
 800fcaa:	e03a      	b.n	800fd22 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800fcac:	2300      	movs	r3, #0
 800fcae:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcb6:	d103      	bne.n	800fcc0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800fcb8:	f04f 33ff 	mov.w	r3, #4294967295
 800fcbc:	60fb      	str	r3, [r7, #12]
 800fcbe:	e009      	b.n	800fcd4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d006      	beq.n	800fcd4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800fcc6:	683b      	ldr	r3, [r7, #0]
 800fcc8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d101      	bne.n	800fcd4 <osSemaphoreWait+0x40>
      ticks = 1;
 800fcd0:	2301      	movs	r3, #1
 800fcd2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800fcd4:	f7ff ff49 	bl	800fb6a <inHandlerMode>
 800fcd8:	4603      	mov	r3, r0
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d017      	beq.n	800fd0e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800fcde:	f107 0308 	add.w	r3, r7, #8
 800fce2:	461a      	mov	r2, r3
 800fce4:	2100      	movs	r1, #0
 800fce6:	6878      	ldr	r0, [r7, #4]
 800fce8:	f000 ff02 	bl	8010af0 <xQueueReceiveFromISR>
 800fcec:	4603      	mov	r3, r0
 800fcee:	2b01      	cmp	r3, #1
 800fcf0:	d001      	beq.n	800fcf6 <osSemaphoreWait+0x62>
      return osErrorOS;
 800fcf2:	23ff      	movs	r3, #255	; 0xff
 800fcf4:	e015      	b.n	800fd22 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800fcf6:	68bb      	ldr	r3, [r7, #8]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d011      	beq.n	800fd20 <osSemaphoreWait+0x8c>
 800fcfc:	4b0b      	ldr	r3, [pc, #44]	; (800fd2c <osSemaphoreWait+0x98>)
 800fcfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd02:	601a      	str	r2, [r3, #0]
 800fd04:	f3bf 8f4f 	dsb	sy
 800fd08:	f3bf 8f6f 	isb	sy
 800fd0c:	e008      	b.n	800fd20 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800fd0e:	68f9      	ldr	r1, [r7, #12]
 800fd10:	6878      	ldr	r0, [r7, #4]
 800fd12:	f000 fddd 	bl	80108d0 <xQueueSemaphoreTake>
 800fd16:	4603      	mov	r3, r0
 800fd18:	2b01      	cmp	r3, #1
 800fd1a:	d001      	beq.n	800fd20 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800fd1c:	23ff      	movs	r3, #255	; 0xff
 800fd1e:	e000      	b.n	800fd22 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800fd20:	2300      	movs	r3, #0
}
 800fd22:	4618      	mov	r0, r3
 800fd24:	3710      	adds	r7, #16
 800fd26:	46bd      	mov	sp, r7
 800fd28:	bd80      	pop	{r7, pc}
 800fd2a:	bf00      	nop
 800fd2c:	e000ed04 	.word	0xe000ed04

0800fd30 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b084      	sub	sp, #16
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800fd38:	2300      	movs	r3, #0
 800fd3a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800fd40:	f7ff ff13 	bl	800fb6a <inHandlerMode>
 800fd44:	4603      	mov	r3, r0
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d016      	beq.n	800fd78 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800fd4a:	f107 0308 	add.w	r3, r7, #8
 800fd4e:	4619      	mov	r1, r3
 800fd50:	6878      	ldr	r0, [r7, #4]
 800fd52:	f000 fc49 	bl	80105e8 <xQueueGiveFromISR>
 800fd56:	4603      	mov	r3, r0
 800fd58:	2b01      	cmp	r3, #1
 800fd5a:	d001      	beq.n	800fd60 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800fd5c:	23ff      	movs	r3, #255	; 0xff
 800fd5e:	e017      	b.n	800fd90 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fd60:	68bb      	ldr	r3, [r7, #8]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d013      	beq.n	800fd8e <osSemaphoreRelease+0x5e>
 800fd66:	4b0c      	ldr	r3, [pc, #48]	; (800fd98 <osSemaphoreRelease+0x68>)
 800fd68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd6c:	601a      	str	r2, [r3, #0]
 800fd6e:	f3bf 8f4f 	dsb	sy
 800fd72:	f3bf 8f6f 	isb	sy
 800fd76:	e00a      	b.n	800fd8e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800fd78:	2300      	movs	r3, #0
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	2100      	movs	r1, #0
 800fd7e:	6878      	ldr	r0, [r7, #4]
 800fd80:	f000 fa94 	bl	80102ac <xQueueGenericSend>
 800fd84:	4603      	mov	r3, r0
 800fd86:	2b01      	cmp	r3, #1
 800fd88:	d001      	beq.n	800fd8e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800fd8a:	23ff      	movs	r3, #255	; 0xff
 800fd8c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800fd8e:	68fb      	ldr	r3, [r7, #12]
}
 800fd90:	4618      	mov	r0, r3
 800fd92:	3710      	adds	r7, #16
 800fd94:	46bd      	mov	sp, r7
 800fd96:	bd80      	pop	{r7, pc}
 800fd98:	e000ed04 	.word	0xe000ed04

0800fd9c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b082      	sub	sp, #8
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800fda4:	f7ff fee1 	bl	800fb6a <inHandlerMode>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d001      	beq.n	800fdb2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800fdae:	2382      	movs	r3, #130	; 0x82
 800fdb0:	e003      	b.n	800fdba <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800fdb2:	6878      	ldr	r0, [r7, #4]
 800fdb4:	f000 ff1f 	bl	8010bf6 <vQueueDelete>

  return osOK; 
 800fdb8:	2300      	movs	r3, #0
}
 800fdba:	4618      	mov	r0, r3
 800fdbc:	3708      	adds	r7, #8
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	bd80      	pop	{r7, pc}

0800fdc2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800fdc2:	b580      	push	{r7, lr}
 800fdc4:	b082      	sub	sp, #8
 800fdc6:	af00      	add	r7, sp, #0
 800fdc8:	6078      	str	r0, [r7, #4]
 800fdca:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	6818      	ldr	r0, [r3, #0]
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	685b      	ldr	r3, [r3, #4]
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	4619      	mov	r1, r3
 800fdd8:	f000 f9d8 	bl	801018c <xQueueGenericCreate>
 800fddc:	4603      	mov	r3, r0
#endif
}
 800fdde:	4618      	mov	r0, r3
 800fde0:	3708      	adds	r7, #8
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bd80      	pop	{r7, pc}
	...

0800fde8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b086      	sub	sp, #24
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	60f8      	str	r0, [r7, #12]
 800fdf0:	60b9      	str	r1, [r7, #8]
 800fdf2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800fdfc:	697b      	ldr	r3, [r7, #20]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d101      	bne.n	800fe06 <osMessagePut+0x1e>
    ticks = 1;
 800fe02:	2301      	movs	r3, #1
 800fe04:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800fe06:	f7ff feb0 	bl	800fb6a <inHandlerMode>
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d018      	beq.n	800fe42 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800fe10:	f107 0210 	add.w	r2, r7, #16
 800fe14:	f107 0108 	add.w	r1, r7, #8
 800fe18:	2300      	movs	r3, #0
 800fe1a:	68f8      	ldr	r0, [r7, #12]
 800fe1c:	f000 fb48 	bl	80104b0 <xQueueGenericSendFromISR>
 800fe20:	4603      	mov	r3, r0
 800fe22:	2b01      	cmp	r3, #1
 800fe24:	d001      	beq.n	800fe2a <osMessagePut+0x42>
      return osErrorOS;
 800fe26:	23ff      	movs	r3, #255	; 0xff
 800fe28:	e018      	b.n	800fe5c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fe2a:	693b      	ldr	r3, [r7, #16]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d014      	beq.n	800fe5a <osMessagePut+0x72>
 800fe30:	4b0c      	ldr	r3, [pc, #48]	; (800fe64 <osMessagePut+0x7c>)
 800fe32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe36:	601a      	str	r2, [r3, #0]
 800fe38:	f3bf 8f4f 	dsb	sy
 800fe3c:	f3bf 8f6f 	isb	sy
 800fe40:	e00b      	b.n	800fe5a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800fe42:	f107 0108 	add.w	r1, r7, #8
 800fe46:	2300      	movs	r3, #0
 800fe48:	697a      	ldr	r2, [r7, #20]
 800fe4a:	68f8      	ldr	r0, [r7, #12]
 800fe4c:	f000 fa2e 	bl	80102ac <xQueueGenericSend>
 800fe50:	4603      	mov	r3, r0
 800fe52:	2b01      	cmp	r3, #1
 800fe54:	d001      	beq.n	800fe5a <osMessagePut+0x72>
      return osErrorOS;
 800fe56:	23ff      	movs	r3, #255	; 0xff
 800fe58:	e000      	b.n	800fe5c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800fe5a:	2300      	movs	r3, #0
}
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	3718      	adds	r7, #24
 800fe60:	46bd      	mov	sp, r7
 800fe62:	bd80      	pop	{r7, pc}
 800fe64:	e000ed04 	.word	0xe000ed04

0800fe68 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800fe68:	b590      	push	{r4, r7, lr}
 800fe6a:	b08b      	sub	sp, #44	; 0x2c
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	60f8      	str	r0, [r7, #12]
 800fe70:	60b9      	str	r1, [r7, #8]
 800fe72:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800fe74:	68bb      	ldr	r3, [r7, #8]
 800fe76:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800fe78:	2300      	movs	r3, #0
 800fe7a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800fe7c:	68bb      	ldr	r3, [r7, #8]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d10a      	bne.n	800fe98 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800fe82:	2380      	movs	r3, #128	; 0x80
 800fe84:	617b      	str	r3, [r7, #20]
    return event;
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	461c      	mov	r4, r3
 800fe8a:	f107 0314 	add.w	r3, r7, #20
 800fe8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fe92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fe96:	e054      	b.n	800ff42 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800fe98:	2300      	movs	r3, #0
 800fe9a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fea6:	d103      	bne.n	800feb0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800fea8:	f04f 33ff 	mov.w	r3, #4294967295
 800feac:	627b      	str	r3, [r7, #36]	; 0x24
 800feae:	e009      	b.n	800fec4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d006      	beq.n	800fec4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800feba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800febc:	2b00      	cmp	r3, #0
 800febe:	d101      	bne.n	800fec4 <osMessageGet+0x5c>
      ticks = 1;
 800fec0:	2301      	movs	r3, #1
 800fec2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800fec4:	f7ff fe51 	bl	800fb6a <inHandlerMode>
 800fec8:	4603      	mov	r3, r0
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d01c      	beq.n	800ff08 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800fece:	f107 0220 	add.w	r2, r7, #32
 800fed2:	f107 0314 	add.w	r3, r7, #20
 800fed6:	3304      	adds	r3, #4
 800fed8:	4619      	mov	r1, r3
 800feda:	68b8      	ldr	r0, [r7, #8]
 800fedc:	f000 fe08 	bl	8010af0 <xQueueReceiveFromISR>
 800fee0:	4603      	mov	r3, r0
 800fee2:	2b01      	cmp	r3, #1
 800fee4:	d102      	bne.n	800feec <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800fee6:	2310      	movs	r3, #16
 800fee8:	617b      	str	r3, [r7, #20]
 800feea:	e001      	b.n	800fef0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800feec:	2300      	movs	r3, #0
 800feee:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fef0:	6a3b      	ldr	r3, [r7, #32]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d01d      	beq.n	800ff32 <osMessageGet+0xca>
 800fef6:	4b15      	ldr	r3, [pc, #84]	; (800ff4c <osMessageGet+0xe4>)
 800fef8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fefc:	601a      	str	r2, [r3, #0]
 800fefe:	f3bf 8f4f 	dsb	sy
 800ff02:	f3bf 8f6f 	isb	sy
 800ff06:	e014      	b.n	800ff32 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800ff08:	f107 0314 	add.w	r3, r7, #20
 800ff0c:	3304      	adds	r3, #4
 800ff0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff10:	4619      	mov	r1, r3
 800ff12:	68b8      	ldr	r0, [r7, #8]
 800ff14:	f000 fbfa 	bl	801070c <xQueueReceive>
 800ff18:	4603      	mov	r3, r0
 800ff1a:	2b01      	cmp	r3, #1
 800ff1c:	d102      	bne.n	800ff24 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800ff1e:	2310      	movs	r3, #16
 800ff20:	617b      	str	r3, [r7, #20]
 800ff22:	e006      	b.n	800ff32 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800ff24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d101      	bne.n	800ff2e <osMessageGet+0xc6>
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	e000      	b.n	800ff30 <osMessageGet+0xc8>
 800ff2e:	2340      	movs	r3, #64	; 0x40
 800ff30:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	461c      	mov	r4, r3
 800ff36:	f107 0314 	add.w	r3, r7, #20
 800ff3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ff3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800ff42:	68f8      	ldr	r0, [r7, #12]
 800ff44:	372c      	adds	r7, #44	; 0x2c
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd90      	pop	{r4, r7, pc}
 800ff4a:	bf00      	nop
 800ff4c:	e000ed04 	.word	0xe000ed04

0800ff50 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ff50:	b480      	push	{r7}
 800ff52:	b083      	sub	sp, #12
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	f103 0208 	add.w	r2, r3, #8
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	f04f 32ff 	mov.w	r2, #4294967295
 800ff68:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	f103 0208 	add.w	r2, r3, #8
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	f103 0208 	add.w	r2, r3, #8
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	2200      	movs	r2, #0
 800ff82:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ff84:	bf00      	nop
 800ff86:	370c      	adds	r7, #12
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8e:	4770      	bx	lr

0800ff90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ff90:	b480      	push	{r7}
 800ff92:	b083      	sub	sp, #12
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ff9e:	bf00      	nop
 800ffa0:	370c      	adds	r7, #12
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa8:	4770      	bx	lr

0800ffaa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ffaa:	b480      	push	{r7}
 800ffac:	b085      	sub	sp, #20
 800ffae:	af00      	add	r7, sp, #0
 800ffb0:	6078      	str	r0, [r7, #4]
 800ffb2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	685b      	ldr	r3, [r3, #4]
 800ffb8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	68fa      	ldr	r2, [r7, #12]
 800ffbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	689a      	ldr	r2, [r3, #8]
 800ffc4:	683b      	ldr	r3, [r7, #0]
 800ffc6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	689b      	ldr	r3, [r3, #8]
 800ffcc:	683a      	ldr	r2, [r7, #0]
 800ffce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	683a      	ldr	r2, [r7, #0]
 800ffd4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ffd6:	683b      	ldr	r3, [r7, #0]
 800ffd8:	687a      	ldr	r2, [r7, #4]
 800ffda:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	1c5a      	adds	r2, r3, #1
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	601a      	str	r2, [r3, #0]
}
 800ffe6:	bf00      	nop
 800ffe8:	3714      	adds	r7, #20
 800ffea:	46bd      	mov	sp, r7
 800ffec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff0:	4770      	bx	lr

0800fff2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fff2:	b480      	push	{r7}
 800fff4:	b085      	sub	sp, #20
 800fff6:	af00      	add	r7, sp, #0
 800fff8:	6078      	str	r0, [r7, #4]
 800fffa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fffc:	683b      	ldr	r3, [r7, #0]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010002:	68bb      	ldr	r3, [r7, #8]
 8010004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010008:	d103      	bne.n	8010012 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	691b      	ldr	r3, [r3, #16]
 801000e:	60fb      	str	r3, [r7, #12]
 8010010:	e00c      	b.n	801002c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	3308      	adds	r3, #8
 8010016:	60fb      	str	r3, [r7, #12]
 8010018:	e002      	b.n	8010020 <vListInsert+0x2e>
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	685b      	ldr	r3, [r3, #4]
 801001e:	60fb      	str	r3, [r7, #12]
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	685b      	ldr	r3, [r3, #4]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	68ba      	ldr	r2, [r7, #8]
 8010028:	429a      	cmp	r2, r3
 801002a:	d2f6      	bcs.n	801001a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	685a      	ldr	r2, [r3, #4]
 8010030:	683b      	ldr	r3, [r7, #0]
 8010032:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	685b      	ldr	r3, [r3, #4]
 8010038:	683a      	ldr	r2, [r7, #0]
 801003a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801003c:	683b      	ldr	r3, [r7, #0]
 801003e:	68fa      	ldr	r2, [r7, #12]
 8010040:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	683a      	ldr	r2, [r7, #0]
 8010046:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8010048:	683b      	ldr	r3, [r7, #0]
 801004a:	687a      	ldr	r2, [r7, #4]
 801004c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	1c5a      	adds	r2, r3, #1
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	601a      	str	r2, [r3, #0]
}
 8010058:	bf00      	nop
 801005a:	3714      	adds	r7, #20
 801005c:	46bd      	mov	sp, r7
 801005e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010062:	4770      	bx	lr

08010064 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010064:	b480      	push	{r7}
 8010066:	b085      	sub	sp, #20
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	691b      	ldr	r3, [r3, #16]
 8010070:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	685b      	ldr	r3, [r3, #4]
 8010076:	687a      	ldr	r2, [r7, #4]
 8010078:	6892      	ldr	r2, [r2, #8]
 801007a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	689b      	ldr	r3, [r3, #8]
 8010080:	687a      	ldr	r2, [r7, #4]
 8010082:	6852      	ldr	r2, [r2, #4]
 8010084:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	685b      	ldr	r3, [r3, #4]
 801008a:	687a      	ldr	r2, [r7, #4]
 801008c:	429a      	cmp	r2, r3
 801008e:	d103      	bne.n	8010098 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	689a      	ldr	r2, [r3, #8]
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	2200      	movs	r2, #0
 801009c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	1e5a      	subs	r2, r3, #1
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	681b      	ldr	r3, [r3, #0]
}
 80100ac:	4618      	mov	r0, r3
 80100ae:	3714      	adds	r7, #20
 80100b0:	46bd      	mov	sp, r7
 80100b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b6:	4770      	bx	lr

080100b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b084      	sub	sp, #16
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
 80100c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d10b      	bne.n	80100e4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80100cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100d0:	b672      	cpsid	i
 80100d2:	f383 8811 	msr	BASEPRI, r3
 80100d6:	f3bf 8f6f 	isb	sy
 80100da:	f3bf 8f4f 	dsb	sy
 80100de:	b662      	cpsie	i
 80100e0:	60bb      	str	r3, [r7, #8]
 80100e2:	e7fe      	b.n	80100e2 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80100e4:	f001 ffd8 	bl	8012098 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	681a      	ldr	r2, [r3, #0]
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100f0:	68f9      	ldr	r1, [r7, #12]
 80100f2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80100f4:	fb01 f303 	mul.w	r3, r1, r3
 80100f8:	441a      	add	r2, r3
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	2200      	movs	r2, #0
 8010102:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	681a      	ldr	r2, [r3, #0]
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	681a      	ldr	r2, [r3, #0]
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010114:	3b01      	subs	r3, #1
 8010116:	68f9      	ldr	r1, [r7, #12]
 8010118:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801011a:	fb01 f303 	mul.w	r3, r1, r3
 801011e:	441a      	add	r2, r3
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	22ff      	movs	r2, #255	; 0xff
 8010128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	22ff      	movs	r2, #255	; 0xff
 8010130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010134:	683b      	ldr	r3, [r7, #0]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d114      	bne.n	8010164 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	691b      	ldr	r3, [r3, #16]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d01a      	beq.n	8010178 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	3310      	adds	r3, #16
 8010146:	4618      	mov	r0, r3
 8010148:	f001 fab0 	bl	80116ac <xTaskRemoveFromEventList>
 801014c:	4603      	mov	r3, r0
 801014e:	2b00      	cmp	r3, #0
 8010150:	d012      	beq.n	8010178 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010152:	4b0d      	ldr	r3, [pc, #52]	; (8010188 <xQueueGenericReset+0xd0>)
 8010154:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010158:	601a      	str	r2, [r3, #0]
 801015a:	f3bf 8f4f 	dsb	sy
 801015e:	f3bf 8f6f 	isb	sy
 8010162:	e009      	b.n	8010178 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	3310      	adds	r3, #16
 8010168:	4618      	mov	r0, r3
 801016a:	f7ff fef1 	bl	800ff50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	3324      	adds	r3, #36	; 0x24
 8010172:	4618      	mov	r0, r3
 8010174:	f7ff feec 	bl	800ff50 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010178:	f001 ffc0 	bl	80120fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801017c:	2301      	movs	r3, #1
}
 801017e:	4618      	mov	r0, r3
 8010180:	3710      	adds	r7, #16
 8010182:	46bd      	mov	sp, r7
 8010184:	bd80      	pop	{r7, pc}
 8010186:	bf00      	nop
 8010188:	e000ed04 	.word	0xe000ed04

0801018c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801018c:	b580      	push	{r7, lr}
 801018e:	b08a      	sub	sp, #40	; 0x28
 8010190:	af02      	add	r7, sp, #8
 8010192:	60f8      	str	r0, [r7, #12]
 8010194:	60b9      	str	r1, [r7, #8]
 8010196:	4613      	mov	r3, r2
 8010198:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d10b      	bne.n	80101b8 <xQueueGenericCreate+0x2c>
 80101a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101a4:	b672      	cpsid	i
 80101a6:	f383 8811 	msr	BASEPRI, r3
 80101aa:	f3bf 8f6f 	isb	sy
 80101ae:	f3bf 8f4f 	dsb	sy
 80101b2:	b662      	cpsie	i
 80101b4:	613b      	str	r3, [r7, #16]
 80101b6:	e7fe      	b.n	80101b6 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80101b8:	68bb      	ldr	r3, [r7, #8]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d102      	bne.n	80101c4 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80101be:	2300      	movs	r3, #0
 80101c0:	61fb      	str	r3, [r7, #28]
 80101c2:	e004      	b.n	80101ce <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	68ba      	ldr	r2, [r7, #8]
 80101c8:	fb02 f303 	mul.w	r3, r2, r3
 80101cc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80101ce:	69fb      	ldr	r3, [r7, #28]
 80101d0:	3348      	adds	r3, #72	; 0x48
 80101d2:	4618      	mov	r0, r3
 80101d4:	f002 f882 	bl	80122dc <pvPortMalloc>
 80101d8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80101da:	69bb      	ldr	r3, [r7, #24]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d00b      	beq.n	80101f8 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80101e0:	69bb      	ldr	r3, [r7, #24]
 80101e2:	3348      	adds	r3, #72	; 0x48
 80101e4:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80101e6:	79fa      	ldrb	r2, [r7, #7]
 80101e8:	69bb      	ldr	r3, [r7, #24]
 80101ea:	9300      	str	r3, [sp, #0]
 80101ec:	4613      	mov	r3, r2
 80101ee:	697a      	ldr	r2, [r7, #20]
 80101f0:	68b9      	ldr	r1, [r7, #8]
 80101f2:	68f8      	ldr	r0, [r7, #12]
 80101f4:	f000 f805 	bl	8010202 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80101f8:	69bb      	ldr	r3, [r7, #24]
	}
 80101fa:	4618      	mov	r0, r3
 80101fc:	3720      	adds	r7, #32
 80101fe:	46bd      	mov	sp, r7
 8010200:	bd80      	pop	{r7, pc}

08010202 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010202:	b580      	push	{r7, lr}
 8010204:	b084      	sub	sp, #16
 8010206:	af00      	add	r7, sp, #0
 8010208:	60f8      	str	r0, [r7, #12]
 801020a:	60b9      	str	r1, [r7, #8]
 801020c:	607a      	str	r2, [r7, #4]
 801020e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010210:	68bb      	ldr	r3, [r7, #8]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d103      	bne.n	801021e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010216:	69bb      	ldr	r3, [r7, #24]
 8010218:	69ba      	ldr	r2, [r7, #24]
 801021a:	601a      	str	r2, [r3, #0]
 801021c:	e002      	b.n	8010224 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801021e:	69bb      	ldr	r3, [r7, #24]
 8010220:	687a      	ldr	r2, [r7, #4]
 8010222:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010224:	69bb      	ldr	r3, [r7, #24]
 8010226:	68fa      	ldr	r2, [r7, #12]
 8010228:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801022a:	69bb      	ldr	r3, [r7, #24]
 801022c:	68ba      	ldr	r2, [r7, #8]
 801022e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010230:	2101      	movs	r1, #1
 8010232:	69b8      	ldr	r0, [r7, #24]
 8010234:	f7ff ff40 	bl	80100b8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010238:	bf00      	nop
 801023a:	3710      	adds	r7, #16
 801023c:	46bd      	mov	sp, r7
 801023e:	bd80      	pop	{r7, pc}

08010240 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8010240:	b580      	push	{r7, lr}
 8010242:	b086      	sub	sp, #24
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
 8010248:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d10b      	bne.n	8010268 <xQueueCreateCountingSemaphore+0x28>
 8010250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010254:	b672      	cpsid	i
 8010256:	f383 8811 	msr	BASEPRI, r3
 801025a:	f3bf 8f6f 	isb	sy
 801025e:	f3bf 8f4f 	dsb	sy
 8010262:	b662      	cpsie	i
 8010264:	613b      	str	r3, [r7, #16]
 8010266:	e7fe      	b.n	8010266 <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010268:	683a      	ldr	r2, [r7, #0]
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	429a      	cmp	r2, r3
 801026e:	d90b      	bls.n	8010288 <xQueueCreateCountingSemaphore+0x48>
 8010270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010274:	b672      	cpsid	i
 8010276:	f383 8811 	msr	BASEPRI, r3
 801027a:	f3bf 8f6f 	isb	sy
 801027e:	f3bf 8f4f 	dsb	sy
 8010282:	b662      	cpsie	i
 8010284:	60fb      	str	r3, [r7, #12]
 8010286:	e7fe      	b.n	8010286 <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010288:	2202      	movs	r2, #2
 801028a:	2100      	movs	r1, #0
 801028c:	6878      	ldr	r0, [r7, #4]
 801028e:	f7ff ff7d 	bl	801018c <xQueueGenericCreate>
 8010292:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8010294:	697b      	ldr	r3, [r7, #20]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d002      	beq.n	80102a0 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801029a:	697b      	ldr	r3, [r7, #20]
 801029c:	683a      	ldr	r2, [r7, #0]
 801029e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80102a0:	697b      	ldr	r3, [r7, #20]
	}
 80102a2:	4618      	mov	r0, r3
 80102a4:	3718      	adds	r7, #24
 80102a6:	46bd      	mov	sp, r7
 80102a8:	bd80      	pop	{r7, pc}
	...

080102ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b08e      	sub	sp, #56	; 0x38
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	60f8      	str	r0, [r7, #12]
 80102b4:	60b9      	str	r1, [r7, #8]
 80102b6:	607a      	str	r2, [r7, #4]
 80102b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80102ba:	2300      	movs	r3, #0
 80102bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80102c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d10b      	bne.n	80102e0 <xQueueGenericSend+0x34>
 80102c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102cc:	b672      	cpsid	i
 80102ce:	f383 8811 	msr	BASEPRI, r3
 80102d2:	f3bf 8f6f 	isb	sy
 80102d6:	f3bf 8f4f 	dsb	sy
 80102da:	b662      	cpsie	i
 80102dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80102de:	e7fe      	b.n	80102de <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80102e0:	68bb      	ldr	r3, [r7, #8]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d103      	bne.n	80102ee <xQueueGenericSend+0x42>
 80102e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d101      	bne.n	80102f2 <xQueueGenericSend+0x46>
 80102ee:	2301      	movs	r3, #1
 80102f0:	e000      	b.n	80102f4 <xQueueGenericSend+0x48>
 80102f2:	2300      	movs	r3, #0
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d10b      	bne.n	8010310 <xQueueGenericSend+0x64>
 80102f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102fc:	b672      	cpsid	i
 80102fe:	f383 8811 	msr	BASEPRI, r3
 8010302:	f3bf 8f6f 	isb	sy
 8010306:	f3bf 8f4f 	dsb	sy
 801030a:	b662      	cpsie	i
 801030c:	627b      	str	r3, [r7, #36]	; 0x24
 801030e:	e7fe      	b.n	801030e <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010310:	683b      	ldr	r3, [r7, #0]
 8010312:	2b02      	cmp	r3, #2
 8010314:	d103      	bne.n	801031e <xQueueGenericSend+0x72>
 8010316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801031a:	2b01      	cmp	r3, #1
 801031c:	d101      	bne.n	8010322 <xQueueGenericSend+0x76>
 801031e:	2301      	movs	r3, #1
 8010320:	e000      	b.n	8010324 <xQueueGenericSend+0x78>
 8010322:	2300      	movs	r3, #0
 8010324:	2b00      	cmp	r3, #0
 8010326:	d10b      	bne.n	8010340 <xQueueGenericSend+0x94>
 8010328:	f04f 0350 	mov.w	r3, #80	; 0x50
 801032c:	b672      	cpsid	i
 801032e:	f383 8811 	msr	BASEPRI, r3
 8010332:	f3bf 8f6f 	isb	sy
 8010336:	f3bf 8f4f 	dsb	sy
 801033a:	b662      	cpsie	i
 801033c:	623b      	str	r3, [r7, #32]
 801033e:	e7fe      	b.n	801033e <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010340:	f001 fb5a 	bl	80119f8 <xTaskGetSchedulerState>
 8010344:	4603      	mov	r3, r0
 8010346:	2b00      	cmp	r3, #0
 8010348:	d102      	bne.n	8010350 <xQueueGenericSend+0xa4>
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d101      	bne.n	8010354 <xQueueGenericSend+0xa8>
 8010350:	2301      	movs	r3, #1
 8010352:	e000      	b.n	8010356 <xQueueGenericSend+0xaa>
 8010354:	2300      	movs	r3, #0
 8010356:	2b00      	cmp	r3, #0
 8010358:	d10b      	bne.n	8010372 <xQueueGenericSend+0xc6>
 801035a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801035e:	b672      	cpsid	i
 8010360:	f383 8811 	msr	BASEPRI, r3
 8010364:	f3bf 8f6f 	isb	sy
 8010368:	f3bf 8f4f 	dsb	sy
 801036c:	b662      	cpsie	i
 801036e:	61fb      	str	r3, [r7, #28]
 8010370:	e7fe      	b.n	8010370 <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010372:	f001 fe91 	bl	8012098 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010378:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801037a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801037c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801037e:	429a      	cmp	r2, r3
 8010380:	d302      	bcc.n	8010388 <xQueueGenericSend+0xdc>
 8010382:	683b      	ldr	r3, [r7, #0]
 8010384:	2b02      	cmp	r3, #2
 8010386:	d129      	bne.n	80103dc <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010388:	683a      	ldr	r2, [r7, #0]
 801038a:	68b9      	ldr	r1, [r7, #8]
 801038c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801038e:	f000 fc69 	bl	8010c64 <prvCopyDataToQueue>
 8010392:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010398:	2b00      	cmp	r3, #0
 801039a:	d010      	beq.n	80103be <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801039c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801039e:	3324      	adds	r3, #36	; 0x24
 80103a0:	4618      	mov	r0, r3
 80103a2:	f001 f983 	bl	80116ac <xTaskRemoveFromEventList>
 80103a6:	4603      	mov	r3, r0
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d013      	beq.n	80103d4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80103ac:	4b3f      	ldr	r3, [pc, #252]	; (80104ac <xQueueGenericSend+0x200>)
 80103ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103b2:	601a      	str	r2, [r3, #0]
 80103b4:	f3bf 8f4f 	dsb	sy
 80103b8:	f3bf 8f6f 	isb	sy
 80103bc:	e00a      	b.n	80103d4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80103be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d007      	beq.n	80103d4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80103c4:	4b39      	ldr	r3, [pc, #228]	; (80104ac <xQueueGenericSend+0x200>)
 80103c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103ca:	601a      	str	r2, [r3, #0]
 80103cc:	f3bf 8f4f 	dsb	sy
 80103d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80103d4:	f001 fe92 	bl	80120fc <vPortExitCritical>
				return pdPASS;
 80103d8:	2301      	movs	r3, #1
 80103da:	e063      	b.n	80104a4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d103      	bne.n	80103ea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80103e2:	f001 fe8b 	bl	80120fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80103e6:	2300      	movs	r3, #0
 80103e8:	e05c      	b.n	80104a4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80103ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d106      	bne.n	80103fe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80103f0:	f107 0314 	add.w	r3, r7, #20
 80103f4:	4618      	mov	r0, r3
 80103f6:	f001 f9bd 	bl	8011774 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80103fa:	2301      	movs	r3, #1
 80103fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80103fe:	f001 fe7d 	bl	80120fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010402:	f000 ff1f 	bl	8011244 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010406:	f001 fe47 	bl	8012098 <vPortEnterCritical>
 801040a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801040c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010410:	b25b      	sxtb	r3, r3
 8010412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010416:	d103      	bne.n	8010420 <xQueueGenericSend+0x174>
 8010418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801041a:	2200      	movs	r2, #0
 801041c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010422:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010426:	b25b      	sxtb	r3, r3
 8010428:	f1b3 3fff 	cmp.w	r3, #4294967295
 801042c:	d103      	bne.n	8010436 <xQueueGenericSend+0x18a>
 801042e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010430:	2200      	movs	r2, #0
 8010432:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010436:	f001 fe61 	bl	80120fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801043a:	1d3a      	adds	r2, r7, #4
 801043c:	f107 0314 	add.w	r3, r7, #20
 8010440:	4611      	mov	r1, r2
 8010442:	4618      	mov	r0, r3
 8010444:	f001 f9ac 	bl	80117a0 <xTaskCheckForTimeOut>
 8010448:	4603      	mov	r3, r0
 801044a:	2b00      	cmp	r3, #0
 801044c:	d124      	bne.n	8010498 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801044e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010450:	f000 fd00 	bl	8010e54 <prvIsQueueFull>
 8010454:	4603      	mov	r3, r0
 8010456:	2b00      	cmp	r3, #0
 8010458:	d018      	beq.n	801048c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801045a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801045c:	3310      	adds	r3, #16
 801045e:	687a      	ldr	r2, [r7, #4]
 8010460:	4611      	mov	r1, r2
 8010462:	4618      	mov	r0, r3
 8010464:	f001 f8fc 	bl	8011660 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010468:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801046a:	f000 fc8b 	bl	8010d84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801046e:	f000 fef7 	bl	8011260 <xTaskResumeAll>
 8010472:	4603      	mov	r3, r0
 8010474:	2b00      	cmp	r3, #0
 8010476:	f47f af7c 	bne.w	8010372 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 801047a:	4b0c      	ldr	r3, [pc, #48]	; (80104ac <xQueueGenericSend+0x200>)
 801047c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010480:	601a      	str	r2, [r3, #0]
 8010482:	f3bf 8f4f 	dsb	sy
 8010486:	f3bf 8f6f 	isb	sy
 801048a:	e772      	b.n	8010372 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801048c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801048e:	f000 fc79 	bl	8010d84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010492:	f000 fee5 	bl	8011260 <xTaskResumeAll>
 8010496:	e76c      	b.n	8010372 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010498:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801049a:	f000 fc73 	bl	8010d84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801049e:	f000 fedf 	bl	8011260 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80104a2:	2300      	movs	r3, #0
		}
	}
}
 80104a4:	4618      	mov	r0, r3
 80104a6:	3738      	adds	r7, #56	; 0x38
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}
 80104ac:	e000ed04 	.word	0xe000ed04

080104b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b08e      	sub	sp, #56	; 0x38
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	60f8      	str	r0, [r7, #12]
 80104b8:	60b9      	str	r1, [r7, #8]
 80104ba:	607a      	str	r2, [r7, #4]
 80104bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80104c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d10b      	bne.n	80104e0 <xQueueGenericSendFromISR+0x30>
 80104c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104cc:	b672      	cpsid	i
 80104ce:	f383 8811 	msr	BASEPRI, r3
 80104d2:	f3bf 8f6f 	isb	sy
 80104d6:	f3bf 8f4f 	dsb	sy
 80104da:	b662      	cpsie	i
 80104dc:	627b      	str	r3, [r7, #36]	; 0x24
 80104de:	e7fe      	b.n	80104de <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80104e0:	68bb      	ldr	r3, [r7, #8]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d103      	bne.n	80104ee <xQueueGenericSendFromISR+0x3e>
 80104e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d101      	bne.n	80104f2 <xQueueGenericSendFromISR+0x42>
 80104ee:	2301      	movs	r3, #1
 80104f0:	e000      	b.n	80104f4 <xQueueGenericSendFromISR+0x44>
 80104f2:	2300      	movs	r3, #0
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d10b      	bne.n	8010510 <xQueueGenericSendFromISR+0x60>
 80104f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104fc:	b672      	cpsid	i
 80104fe:	f383 8811 	msr	BASEPRI, r3
 8010502:	f3bf 8f6f 	isb	sy
 8010506:	f3bf 8f4f 	dsb	sy
 801050a:	b662      	cpsie	i
 801050c:	623b      	str	r3, [r7, #32]
 801050e:	e7fe      	b.n	801050e <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010510:	683b      	ldr	r3, [r7, #0]
 8010512:	2b02      	cmp	r3, #2
 8010514:	d103      	bne.n	801051e <xQueueGenericSendFromISR+0x6e>
 8010516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801051a:	2b01      	cmp	r3, #1
 801051c:	d101      	bne.n	8010522 <xQueueGenericSendFromISR+0x72>
 801051e:	2301      	movs	r3, #1
 8010520:	e000      	b.n	8010524 <xQueueGenericSendFromISR+0x74>
 8010522:	2300      	movs	r3, #0
 8010524:	2b00      	cmp	r3, #0
 8010526:	d10b      	bne.n	8010540 <xQueueGenericSendFromISR+0x90>
 8010528:	f04f 0350 	mov.w	r3, #80	; 0x50
 801052c:	b672      	cpsid	i
 801052e:	f383 8811 	msr	BASEPRI, r3
 8010532:	f3bf 8f6f 	isb	sy
 8010536:	f3bf 8f4f 	dsb	sy
 801053a:	b662      	cpsie	i
 801053c:	61fb      	str	r3, [r7, #28]
 801053e:	e7fe      	b.n	801053e <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010540:	f001 fe8a 	bl	8012258 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010544:	f3ef 8211 	mrs	r2, BASEPRI
 8010548:	f04f 0350 	mov.w	r3, #80	; 0x50
 801054c:	b672      	cpsid	i
 801054e:	f383 8811 	msr	BASEPRI, r3
 8010552:	f3bf 8f6f 	isb	sy
 8010556:	f3bf 8f4f 	dsb	sy
 801055a:	b662      	cpsie	i
 801055c:	61ba      	str	r2, [r7, #24]
 801055e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010560:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010562:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010566:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801056a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801056c:	429a      	cmp	r2, r3
 801056e:	d302      	bcc.n	8010576 <xQueueGenericSendFromISR+0xc6>
 8010570:	683b      	ldr	r3, [r7, #0]
 8010572:	2b02      	cmp	r3, #2
 8010574:	d12c      	bne.n	80105d0 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010578:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801057c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010580:	683a      	ldr	r2, [r7, #0]
 8010582:	68b9      	ldr	r1, [r7, #8]
 8010584:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010586:	f000 fb6d 	bl	8010c64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801058a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801058e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010592:	d112      	bne.n	80105ba <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010598:	2b00      	cmp	r3, #0
 801059a:	d016      	beq.n	80105ca <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801059c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801059e:	3324      	adds	r3, #36	; 0x24
 80105a0:	4618      	mov	r0, r3
 80105a2:	f001 f883 	bl	80116ac <xTaskRemoveFromEventList>
 80105a6:	4603      	mov	r3, r0
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d00e      	beq.n	80105ca <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d00b      	beq.n	80105ca <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	2201      	movs	r2, #1
 80105b6:	601a      	str	r2, [r3, #0]
 80105b8:	e007      	b.n	80105ca <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80105ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80105be:	3301      	adds	r3, #1
 80105c0:	b2db      	uxtb	r3, r3
 80105c2:	b25a      	sxtb	r2, r3
 80105c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80105ca:	2301      	movs	r3, #1
 80105cc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80105ce:	e001      	b.n	80105d4 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80105d0:	2300      	movs	r3, #0
 80105d2:	637b      	str	r3, [r7, #52]	; 0x34
 80105d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105d6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80105d8:	693b      	ldr	r3, [r7, #16]
 80105da:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80105de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80105e0:	4618      	mov	r0, r3
 80105e2:	3738      	adds	r7, #56	; 0x38
 80105e4:	46bd      	mov	sp, r7
 80105e6:	bd80      	pop	{r7, pc}

080105e8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b08e      	sub	sp, #56	; 0x38
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
 80105f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80105f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d10b      	bne.n	8010614 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80105fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010600:	b672      	cpsid	i
 8010602:	f383 8811 	msr	BASEPRI, r3
 8010606:	f3bf 8f6f 	isb	sy
 801060a:	f3bf 8f4f 	dsb	sy
 801060e:	b662      	cpsie	i
 8010610:	623b      	str	r3, [r7, #32]
 8010612:	e7fe      	b.n	8010612 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010618:	2b00      	cmp	r3, #0
 801061a:	d00b      	beq.n	8010634 <xQueueGiveFromISR+0x4c>
 801061c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010620:	b672      	cpsid	i
 8010622:	f383 8811 	msr	BASEPRI, r3
 8010626:	f3bf 8f6f 	isb	sy
 801062a:	f3bf 8f4f 	dsb	sy
 801062e:	b662      	cpsie	i
 8010630:	61fb      	str	r3, [r7, #28]
 8010632:	e7fe      	b.n	8010632 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8010634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d103      	bne.n	8010644 <xQueueGiveFromISR+0x5c>
 801063c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801063e:	685b      	ldr	r3, [r3, #4]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d101      	bne.n	8010648 <xQueueGiveFromISR+0x60>
 8010644:	2301      	movs	r3, #1
 8010646:	e000      	b.n	801064a <xQueueGiveFromISR+0x62>
 8010648:	2300      	movs	r3, #0
 801064a:	2b00      	cmp	r3, #0
 801064c:	d10b      	bne.n	8010666 <xQueueGiveFromISR+0x7e>
 801064e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010652:	b672      	cpsid	i
 8010654:	f383 8811 	msr	BASEPRI, r3
 8010658:	f3bf 8f6f 	isb	sy
 801065c:	f3bf 8f4f 	dsb	sy
 8010660:	b662      	cpsie	i
 8010662:	61bb      	str	r3, [r7, #24]
 8010664:	e7fe      	b.n	8010664 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010666:	f001 fdf7 	bl	8012258 <vPortValidateInterruptPriority>
	__asm volatile
 801066a:	f3ef 8211 	mrs	r2, BASEPRI
 801066e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010672:	b672      	cpsid	i
 8010674:	f383 8811 	msr	BASEPRI, r3
 8010678:	f3bf 8f6f 	isb	sy
 801067c:	f3bf 8f4f 	dsb	sy
 8010680:	b662      	cpsie	i
 8010682:	617a      	str	r2, [r7, #20]
 8010684:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010686:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010688:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801068a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801068c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801068e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010694:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010696:	429a      	cmp	r2, r3
 8010698:	d22b      	bcs.n	80106f2 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801069a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801069c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80106a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80106a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106a6:	1c5a      	adds	r2, r3, #1
 80106a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106aa:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80106ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80106b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106b4:	d112      	bne.n	80106dc <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80106b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d016      	beq.n	80106ec <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80106be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106c0:	3324      	adds	r3, #36	; 0x24
 80106c2:	4618      	mov	r0, r3
 80106c4:	f000 fff2 	bl	80116ac <xTaskRemoveFromEventList>
 80106c8:	4603      	mov	r3, r0
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d00e      	beq.n	80106ec <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80106ce:	683b      	ldr	r3, [r7, #0]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d00b      	beq.n	80106ec <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80106d4:	683b      	ldr	r3, [r7, #0]
 80106d6:	2201      	movs	r2, #1
 80106d8:	601a      	str	r2, [r3, #0]
 80106da:	e007      	b.n	80106ec <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80106dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80106e0:	3301      	adds	r3, #1
 80106e2:	b2db      	uxtb	r3, r3
 80106e4:	b25a      	sxtb	r2, r3
 80106e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80106ec:	2301      	movs	r3, #1
 80106ee:	637b      	str	r3, [r7, #52]	; 0x34
 80106f0:	e001      	b.n	80106f6 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80106f2:	2300      	movs	r3, #0
 80106f4:	637b      	str	r3, [r7, #52]	; 0x34
 80106f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106f8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010702:	4618      	mov	r0, r3
 8010704:	3738      	adds	r7, #56	; 0x38
 8010706:	46bd      	mov	sp, r7
 8010708:	bd80      	pop	{r7, pc}
	...

0801070c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801070c:	b580      	push	{r7, lr}
 801070e:	b08c      	sub	sp, #48	; 0x30
 8010710:	af00      	add	r7, sp, #0
 8010712:	60f8      	str	r0, [r7, #12]
 8010714:	60b9      	str	r1, [r7, #8]
 8010716:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010718:	2300      	movs	r3, #0
 801071a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010722:	2b00      	cmp	r3, #0
 8010724:	d10b      	bne.n	801073e <xQueueReceive+0x32>
	__asm volatile
 8010726:	f04f 0350 	mov.w	r3, #80	; 0x50
 801072a:	b672      	cpsid	i
 801072c:	f383 8811 	msr	BASEPRI, r3
 8010730:	f3bf 8f6f 	isb	sy
 8010734:	f3bf 8f4f 	dsb	sy
 8010738:	b662      	cpsie	i
 801073a:	623b      	str	r3, [r7, #32]
 801073c:	e7fe      	b.n	801073c <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801073e:	68bb      	ldr	r3, [r7, #8]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d103      	bne.n	801074c <xQueueReceive+0x40>
 8010744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010748:	2b00      	cmp	r3, #0
 801074a:	d101      	bne.n	8010750 <xQueueReceive+0x44>
 801074c:	2301      	movs	r3, #1
 801074e:	e000      	b.n	8010752 <xQueueReceive+0x46>
 8010750:	2300      	movs	r3, #0
 8010752:	2b00      	cmp	r3, #0
 8010754:	d10b      	bne.n	801076e <xQueueReceive+0x62>
 8010756:	f04f 0350 	mov.w	r3, #80	; 0x50
 801075a:	b672      	cpsid	i
 801075c:	f383 8811 	msr	BASEPRI, r3
 8010760:	f3bf 8f6f 	isb	sy
 8010764:	f3bf 8f4f 	dsb	sy
 8010768:	b662      	cpsie	i
 801076a:	61fb      	str	r3, [r7, #28]
 801076c:	e7fe      	b.n	801076c <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801076e:	f001 f943 	bl	80119f8 <xTaskGetSchedulerState>
 8010772:	4603      	mov	r3, r0
 8010774:	2b00      	cmp	r3, #0
 8010776:	d102      	bne.n	801077e <xQueueReceive+0x72>
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d101      	bne.n	8010782 <xQueueReceive+0x76>
 801077e:	2301      	movs	r3, #1
 8010780:	e000      	b.n	8010784 <xQueueReceive+0x78>
 8010782:	2300      	movs	r3, #0
 8010784:	2b00      	cmp	r3, #0
 8010786:	d10b      	bne.n	80107a0 <xQueueReceive+0x94>
 8010788:	f04f 0350 	mov.w	r3, #80	; 0x50
 801078c:	b672      	cpsid	i
 801078e:	f383 8811 	msr	BASEPRI, r3
 8010792:	f3bf 8f6f 	isb	sy
 8010796:	f3bf 8f4f 	dsb	sy
 801079a:	b662      	cpsie	i
 801079c:	61bb      	str	r3, [r7, #24]
 801079e:	e7fe      	b.n	801079e <xQueueReceive+0x92>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80107a0:	f001 fc7a 	bl	8012098 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80107a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107a8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80107aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d01f      	beq.n	80107f0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80107b0:	68b9      	ldr	r1, [r7, #8]
 80107b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80107b4:	f000 fac0 	bl	8010d38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80107b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ba:	1e5a      	subs	r2, r3, #1
 80107bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107be:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80107c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107c2:	691b      	ldr	r3, [r3, #16]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d00f      	beq.n	80107e8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80107c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107ca:	3310      	adds	r3, #16
 80107cc:	4618      	mov	r0, r3
 80107ce:	f000 ff6d 	bl	80116ac <xTaskRemoveFromEventList>
 80107d2:	4603      	mov	r3, r0
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d007      	beq.n	80107e8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80107d8:	4b3c      	ldr	r3, [pc, #240]	; (80108cc <xQueueReceive+0x1c0>)
 80107da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107de:	601a      	str	r2, [r3, #0]
 80107e0:	f3bf 8f4f 	dsb	sy
 80107e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80107e8:	f001 fc88 	bl	80120fc <vPortExitCritical>
				return pdPASS;
 80107ec:	2301      	movs	r3, #1
 80107ee:	e069      	b.n	80108c4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d103      	bne.n	80107fe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80107f6:	f001 fc81 	bl	80120fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80107fa:	2300      	movs	r3, #0
 80107fc:	e062      	b.n	80108c4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80107fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010800:	2b00      	cmp	r3, #0
 8010802:	d106      	bne.n	8010812 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010804:	f107 0310 	add.w	r3, r7, #16
 8010808:	4618      	mov	r0, r3
 801080a:	f000 ffb3 	bl	8011774 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801080e:	2301      	movs	r3, #1
 8010810:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010812:	f001 fc73 	bl	80120fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010816:	f000 fd15 	bl	8011244 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801081a:	f001 fc3d 	bl	8012098 <vPortEnterCritical>
 801081e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010820:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010824:	b25b      	sxtb	r3, r3
 8010826:	f1b3 3fff 	cmp.w	r3, #4294967295
 801082a:	d103      	bne.n	8010834 <xQueueReceive+0x128>
 801082c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801082e:	2200      	movs	r2, #0
 8010830:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010836:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801083a:	b25b      	sxtb	r3, r3
 801083c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010840:	d103      	bne.n	801084a <xQueueReceive+0x13e>
 8010842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010844:	2200      	movs	r2, #0
 8010846:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801084a:	f001 fc57 	bl	80120fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801084e:	1d3a      	adds	r2, r7, #4
 8010850:	f107 0310 	add.w	r3, r7, #16
 8010854:	4611      	mov	r1, r2
 8010856:	4618      	mov	r0, r3
 8010858:	f000 ffa2 	bl	80117a0 <xTaskCheckForTimeOut>
 801085c:	4603      	mov	r3, r0
 801085e:	2b00      	cmp	r3, #0
 8010860:	d123      	bne.n	80108aa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010862:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010864:	f000 fae0 	bl	8010e28 <prvIsQueueEmpty>
 8010868:	4603      	mov	r3, r0
 801086a:	2b00      	cmp	r3, #0
 801086c:	d017      	beq.n	801089e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801086e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010870:	3324      	adds	r3, #36	; 0x24
 8010872:	687a      	ldr	r2, [r7, #4]
 8010874:	4611      	mov	r1, r2
 8010876:	4618      	mov	r0, r3
 8010878:	f000 fef2 	bl	8011660 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801087c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801087e:	f000 fa81 	bl	8010d84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010882:	f000 fced 	bl	8011260 <xTaskResumeAll>
 8010886:	4603      	mov	r3, r0
 8010888:	2b00      	cmp	r3, #0
 801088a:	d189      	bne.n	80107a0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 801088c:	4b0f      	ldr	r3, [pc, #60]	; (80108cc <xQueueReceive+0x1c0>)
 801088e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010892:	601a      	str	r2, [r3, #0]
 8010894:	f3bf 8f4f 	dsb	sy
 8010898:	f3bf 8f6f 	isb	sy
 801089c:	e780      	b.n	80107a0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801089e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108a0:	f000 fa70 	bl	8010d84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80108a4:	f000 fcdc 	bl	8011260 <xTaskResumeAll>
 80108a8:	e77a      	b.n	80107a0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80108aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108ac:	f000 fa6a 	bl	8010d84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80108b0:	f000 fcd6 	bl	8011260 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80108b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80108b6:	f000 fab7 	bl	8010e28 <prvIsQueueEmpty>
 80108ba:	4603      	mov	r3, r0
 80108bc:	2b00      	cmp	r3, #0
 80108be:	f43f af6f 	beq.w	80107a0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80108c2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80108c4:	4618      	mov	r0, r3
 80108c6:	3730      	adds	r7, #48	; 0x30
 80108c8:	46bd      	mov	sp, r7
 80108ca:	bd80      	pop	{r7, pc}
 80108cc:	e000ed04 	.word	0xe000ed04

080108d0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b08e      	sub	sp, #56	; 0x38
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
 80108d8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80108da:	2300      	movs	r3, #0
 80108dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80108e2:	2300      	movs	r3, #0
 80108e4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80108e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d10b      	bne.n	8010904 <xQueueSemaphoreTake+0x34>
 80108ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108f0:	b672      	cpsid	i
 80108f2:	f383 8811 	msr	BASEPRI, r3
 80108f6:	f3bf 8f6f 	isb	sy
 80108fa:	f3bf 8f4f 	dsb	sy
 80108fe:	b662      	cpsie	i
 8010900:	623b      	str	r3, [r7, #32]
 8010902:	e7fe      	b.n	8010902 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010908:	2b00      	cmp	r3, #0
 801090a:	d00b      	beq.n	8010924 <xQueueSemaphoreTake+0x54>
 801090c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010910:	b672      	cpsid	i
 8010912:	f383 8811 	msr	BASEPRI, r3
 8010916:	f3bf 8f6f 	isb	sy
 801091a:	f3bf 8f4f 	dsb	sy
 801091e:	b662      	cpsie	i
 8010920:	61fb      	str	r3, [r7, #28]
 8010922:	e7fe      	b.n	8010922 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010924:	f001 f868 	bl	80119f8 <xTaskGetSchedulerState>
 8010928:	4603      	mov	r3, r0
 801092a:	2b00      	cmp	r3, #0
 801092c:	d102      	bne.n	8010934 <xQueueSemaphoreTake+0x64>
 801092e:	683b      	ldr	r3, [r7, #0]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d101      	bne.n	8010938 <xQueueSemaphoreTake+0x68>
 8010934:	2301      	movs	r3, #1
 8010936:	e000      	b.n	801093a <xQueueSemaphoreTake+0x6a>
 8010938:	2300      	movs	r3, #0
 801093a:	2b00      	cmp	r3, #0
 801093c:	d10b      	bne.n	8010956 <xQueueSemaphoreTake+0x86>
 801093e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010942:	b672      	cpsid	i
 8010944:	f383 8811 	msr	BASEPRI, r3
 8010948:	f3bf 8f6f 	isb	sy
 801094c:	f3bf 8f4f 	dsb	sy
 8010950:	b662      	cpsie	i
 8010952:	61bb      	str	r3, [r7, #24]
 8010954:	e7fe      	b.n	8010954 <xQueueSemaphoreTake+0x84>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8010956:	f001 fb9f 	bl	8012098 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801095a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801095c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801095e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010962:	2b00      	cmp	r3, #0
 8010964:	d024      	beq.n	80109b0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010968:	1e5a      	subs	r2, r3, #1
 801096a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801096c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801096e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d104      	bne.n	8010980 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8010976:	f001 fa0d 	bl	8011d94 <pvTaskIncrementMutexHeldCount>
 801097a:	4602      	mov	r2, r0
 801097c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801097e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010982:	691b      	ldr	r3, [r3, #16]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d00f      	beq.n	80109a8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801098a:	3310      	adds	r3, #16
 801098c:	4618      	mov	r0, r3
 801098e:	f000 fe8d 	bl	80116ac <xTaskRemoveFromEventList>
 8010992:	4603      	mov	r3, r0
 8010994:	2b00      	cmp	r3, #0
 8010996:	d007      	beq.n	80109a8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010998:	4b54      	ldr	r3, [pc, #336]	; (8010aec <xQueueSemaphoreTake+0x21c>)
 801099a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801099e:	601a      	str	r2, [r3, #0]
 80109a0:	f3bf 8f4f 	dsb	sy
 80109a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80109a8:	f001 fba8 	bl	80120fc <vPortExitCritical>
				return pdPASS;
 80109ac:	2301      	movs	r3, #1
 80109ae:	e098      	b.n	8010ae2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80109b0:	683b      	ldr	r3, [r7, #0]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d112      	bne.n	80109dc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80109b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d00b      	beq.n	80109d4 <xQueueSemaphoreTake+0x104>
 80109bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109c0:	b672      	cpsid	i
 80109c2:	f383 8811 	msr	BASEPRI, r3
 80109c6:	f3bf 8f6f 	isb	sy
 80109ca:	f3bf 8f4f 	dsb	sy
 80109ce:	b662      	cpsie	i
 80109d0:	617b      	str	r3, [r7, #20]
 80109d2:	e7fe      	b.n	80109d2 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80109d4:	f001 fb92 	bl	80120fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80109d8:	2300      	movs	r3, #0
 80109da:	e082      	b.n	8010ae2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80109dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d106      	bne.n	80109f0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80109e2:	f107 030c 	add.w	r3, r7, #12
 80109e6:	4618      	mov	r0, r3
 80109e8:	f000 fec4 	bl	8011774 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80109ec:	2301      	movs	r3, #1
 80109ee:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80109f0:	f001 fb84 	bl	80120fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80109f4:	f000 fc26 	bl	8011244 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80109f8:	f001 fb4e 	bl	8012098 <vPortEnterCritical>
 80109fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010a02:	b25b      	sxtb	r3, r3
 8010a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a08:	d103      	bne.n	8010a12 <xQueueSemaphoreTake+0x142>
 8010a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a0c:	2200      	movs	r2, #0
 8010a0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a18:	b25b      	sxtb	r3, r3
 8010a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a1e:	d103      	bne.n	8010a28 <xQueueSemaphoreTake+0x158>
 8010a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a22:	2200      	movs	r2, #0
 8010a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010a28:	f001 fb68 	bl	80120fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010a2c:	463a      	mov	r2, r7
 8010a2e:	f107 030c 	add.w	r3, r7, #12
 8010a32:	4611      	mov	r1, r2
 8010a34:	4618      	mov	r0, r3
 8010a36:	f000 feb3 	bl	80117a0 <xTaskCheckForTimeOut>
 8010a3a:	4603      	mov	r3, r0
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d132      	bne.n	8010aa6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010a40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010a42:	f000 f9f1 	bl	8010e28 <prvIsQueueEmpty>
 8010a46:	4603      	mov	r3, r0
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d026      	beq.n	8010a9a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d109      	bne.n	8010a68 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8010a54:	f001 fb20 	bl	8012098 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8010a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a5a:	685b      	ldr	r3, [r3, #4]
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	f000 ffe9 	bl	8011a34 <xTaskPriorityInherit>
 8010a62:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010a64:	f001 fb4a 	bl	80120fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a6a:	3324      	adds	r3, #36	; 0x24
 8010a6c:	683a      	ldr	r2, [r7, #0]
 8010a6e:	4611      	mov	r1, r2
 8010a70:	4618      	mov	r0, r3
 8010a72:	f000 fdf5 	bl	8011660 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010a76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010a78:	f000 f984 	bl	8010d84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010a7c:	f000 fbf0 	bl	8011260 <xTaskResumeAll>
 8010a80:	4603      	mov	r3, r0
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	f47f af67 	bne.w	8010956 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8010a88:	4b18      	ldr	r3, [pc, #96]	; (8010aec <xQueueSemaphoreTake+0x21c>)
 8010a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a8e:	601a      	str	r2, [r3, #0]
 8010a90:	f3bf 8f4f 	dsb	sy
 8010a94:	f3bf 8f6f 	isb	sy
 8010a98:	e75d      	b.n	8010956 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010a9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010a9c:	f000 f972 	bl	8010d84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010aa0:	f000 fbde 	bl	8011260 <xTaskResumeAll>
 8010aa4:	e757      	b.n	8010956 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010aa6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010aa8:	f000 f96c 	bl	8010d84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010aac:	f000 fbd8 	bl	8011260 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010ab0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010ab2:	f000 f9b9 	bl	8010e28 <prvIsQueueEmpty>
 8010ab6:	4603      	mov	r3, r0
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	f43f af4c 	beq.w	8010956 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d00d      	beq.n	8010ae0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8010ac4:	f001 fae8 	bl	8012098 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010ac8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010aca:	f000 f8b3 	bl	8010c34 <prvGetDisinheritPriorityAfterTimeout>
 8010ace:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8010ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ad2:	685b      	ldr	r3, [r3, #4]
 8010ad4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	f001 f8ba 	bl	8011c50 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010adc:	f001 fb0e 	bl	80120fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010ae0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	3738      	adds	r7, #56	; 0x38
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	bd80      	pop	{r7, pc}
 8010aea:	bf00      	nop
 8010aec:	e000ed04 	.word	0xe000ed04

08010af0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b08e      	sub	sp, #56	; 0x38
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	60f8      	str	r0, [r7, #12]
 8010af8:	60b9      	str	r1, [r7, #8]
 8010afa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d10b      	bne.n	8010b1e <xQueueReceiveFromISR+0x2e>
 8010b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b0a:	b672      	cpsid	i
 8010b0c:	f383 8811 	msr	BASEPRI, r3
 8010b10:	f3bf 8f6f 	isb	sy
 8010b14:	f3bf 8f4f 	dsb	sy
 8010b18:	b662      	cpsie	i
 8010b1a:	623b      	str	r3, [r7, #32]
 8010b1c:	e7fe      	b.n	8010b1c <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010b1e:	68bb      	ldr	r3, [r7, #8]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d103      	bne.n	8010b2c <xQueueReceiveFromISR+0x3c>
 8010b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d101      	bne.n	8010b30 <xQueueReceiveFromISR+0x40>
 8010b2c:	2301      	movs	r3, #1
 8010b2e:	e000      	b.n	8010b32 <xQueueReceiveFromISR+0x42>
 8010b30:	2300      	movs	r3, #0
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d10b      	bne.n	8010b4e <xQueueReceiveFromISR+0x5e>
 8010b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b3a:	b672      	cpsid	i
 8010b3c:	f383 8811 	msr	BASEPRI, r3
 8010b40:	f3bf 8f6f 	isb	sy
 8010b44:	f3bf 8f4f 	dsb	sy
 8010b48:	b662      	cpsie	i
 8010b4a:	61fb      	str	r3, [r7, #28]
 8010b4c:	e7fe      	b.n	8010b4c <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010b4e:	f001 fb83 	bl	8012258 <vPortValidateInterruptPriority>
	__asm volatile
 8010b52:	f3ef 8211 	mrs	r2, BASEPRI
 8010b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b5a:	b672      	cpsid	i
 8010b5c:	f383 8811 	msr	BASEPRI, r3
 8010b60:	f3bf 8f6f 	isb	sy
 8010b64:	f3bf 8f4f 	dsb	sy
 8010b68:	b662      	cpsie	i
 8010b6a:	61ba      	str	r2, [r7, #24]
 8010b6c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010b6e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010b70:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b76:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d02f      	beq.n	8010bde <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010b84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010b88:	68b9      	ldr	r1, [r7, #8]
 8010b8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b8c:	f000 f8d4 	bl	8010d38 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b92:	1e5a      	subs	r2, r3, #1
 8010b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b96:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010b98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ba0:	d112      	bne.n	8010bc8 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ba4:	691b      	ldr	r3, [r3, #16]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d016      	beq.n	8010bd8 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bac:	3310      	adds	r3, #16
 8010bae:	4618      	mov	r0, r3
 8010bb0:	f000 fd7c 	bl	80116ac <xTaskRemoveFromEventList>
 8010bb4:	4603      	mov	r3, r0
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d00e      	beq.n	8010bd8 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d00b      	beq.n	8010bd8 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	2201      	movs	r2, #1
 8010bc4:	601a      	str	r2, [r3, #0]
 8010bc6:	e007      	b.n	8010bd8 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010bc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010bcc:	3301      	adds	r3, #1
 8010bce:	b2db      	uxtb	r3, r3
 8010bd0:	b25a      	sxtb	r2, r3
 8010bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010bd8:	2301      	movs	r3, #1
 8010bda:	637b      	str	r3, [r7, #52]	; 0x34
 8010bdc:	e001      	b.n	8010be2 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8010bde:	2300      	movs	r3, #0
 8010be0:	637b      	str	r3, [r7, #52]	; 0x34
 8010be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010be4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010be6:	693b      	ldr	r3, [r7, #16]
 8010be8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010bee:	4618      	mov	r0, r3
 8010bf0:	3738      	adds	r7, #56	; 0x38
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	bd80      	pop	{r7, pc}

08010bf6 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010bf6:	b580      	push	{r7, lr}
 8010bf8:	b084      	sub	sp, #16
 8010bfa:	af00      	add	r7, sp, #0
 8010bfc:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d10b      	bne.n	8010c20 <vQueueDelete+0x2a>
	__asm volatile
 8010c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c0c:	b672      	cpsid	i
 8010c0e:	f383 8811 	msr	BASEPRI, r3
 8010c12:	f3bf 8f6f 	isb	sy
 8010c16:	f3bf 8f4f 	dsb	sy
 8010c1a:	b662      	cpsie	i
 8010c1c:	60bb      	str	r3, [r7, #8]
 8010c1e:	e7fe      	b.n	8010c1e <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010c20:	68f8      	ldr	r0, [r7, #12]
 8010c22:	f000 f92f 	bl	8010e84 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 8010c26:	68f8      	ldr	r0, [r7, #12]
 8010c28:	f001 fc24 	bl	8012474 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010c2c:	bf00      	nop
 8010c2e:	3710      	adds	r7, #16
 8010c30:	46bd      	mov	sp, r7
 8010c32:	bd80      	pop	{r7, pc}

08010c34 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010c34:	b480      	push	{r7}
 8010c36:	b085      	sub	sp, #20
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d006      	beq.n	8010c52 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	f1c3 0307 	rsb	r3, r3, #7
 8010c4e:	60fb      	str	r3, [r7, #12]
 8010c50:	e001      	b.n	8010c56 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010c52:	2300      	movs	r3, #0
 8010c54:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010c56:	68fb      	ldr	r3, [r7, #12]
	}
 8010c58:	4618      	mov	r0, r3
 8010c5a:	3714      	adds	r7, #20
 8010c5c:	46bd      	mov	sp, r7
 8010c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c62:	4770      	bx	lr

08010c64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b086      	sub	sp, #24
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	60f8      	str	r0, [r7, #12]
 8010c6c:	60b9      	str	r1, [r7, #8]
 8010c6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010c70:	2300      	movs	r3, #0
 8010c72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d10d      	bne.n	8010c9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d14d      	bne.n	8010d26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	685b      	ldr	r3, [r3, #4]
 8010c8e:	4618      	mov	r0, r3
 8010c90:	f000 ff56 	bl	8011b40 <xTaskPriorityDisinherit>
 8010c94:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	2200      	movs	r2, #0
 8010c9a:	605a      	str	r2, [r3, #4]
 8010c9c:	e043      	b.n	8010d26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d119      	bne.n	8010cd8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	6898      	ldr	r0, [r3, #8]
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cac:	461a      	mov	r2, r3
 8010cae:	68b9      	ldr	r1, [r7, #8]
 8010cb0:	f004 fefa 	bl	8015aa8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	689a      	ldr	r2, [r3, #8]
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cbc:	441a      	add	r2, r3
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	689a      	ldr	r2, [r3, #8]
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	685b      	ldr	r3, [r3, #4]
 8010cca:	429a      	cmp	r2, r3
 8010ccc:	d32b      	bcc.n	8010d26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	681a      	ldr	r2, [r3, #0]
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	609a      	str	r2, [r3, #8]
 8010cd6:	e026      	b.n	8010d26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	68d8      	ldr	r0, [r3, #12]
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ce0:	461a      	mov	r2, r3
 8010ce2:	68b9      	ldr	r1, [r7, #8]
 8010ce4:	f004 fee0 	bl	8015aa8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	68da      	ldr	r2, [r3, #12]
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cf0:	425b      	negs	r3, r3
 8010cf2:	441a      	add	r2, r3
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	68da      	ldr	r2, [r3, #12]
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	429a      	cmp	r2, r3
 8010d02:	d207      	bcs.n	8010d14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	685a      	ldr	r2, [r3, #4]
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d0c:	425b      	negs	r3, r3
 8010d0e:	441a      	add	r2, r3
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	2b02      	cmp	r3, #2
 8010d18:	d105      	bne.n	8010d26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010d1a:	693b      	ldr	r3, [r7, #16]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d002      	beq.n	8010d26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010d20:	693b      	ldr	r3, [r7, #16]
 8010d22:	3b01      	subs	r3, #1
 8010d24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010d26:	693b      	ldr	r3, [r7, #16]
 8010d28:	1c5a      	adds	r2, r3, #1
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010d2e:	697b      	ldr	r3, [r7, #20]
}
 8010d30:	4618      	mov	r0, r3
 8010d32:	3718      	adds	r7, #24
 8010d34:	46bd      	mov	sp, r7
 8010d36:	bd80      	pop	{r7, pc}

08010d38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b082      	sub	sp, #8
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6078      	str	r0, [r7, #4]
 8010d40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d018      	beq.n	8010d7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	68da      	ldr	r2, [r3, #12]
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d52:	441a      	add	r2, r3
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	68da      	ldr	r2, [r3, #12]
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	685b      	ldr	r3, [r3, #4]
 8010d60:	429a      	cmp	r2, r3
 8010d62:	d303      	bcc.n	8010d6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	681a      	ldr	r2, [r3, #0]
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	68d9      	ldr	r1, [r3, #12]
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d74:	461a      	mov	r2, r3
 8010d76:	6838      	ldr	r0, [r7, #0]
 8010d78:	f004 fe96 	bl	8015aa8 <memcpy>
	}
}
 8010d7c:	bf00      	nop
 8010d7e:	3708      	adds	r7, #8
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bd80      	pop	{r7, pc}

08010d84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b084      	sub	sp, #16
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010d8c:	f001 f984 	bl	8012098 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010d96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010d98:	e011      	b.n	8010dbe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d012      	beq.n	8010dc8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	3324      	adds	r3, #36	; 0x24
 8010da6:	4618      	mov	r0, r3
 8010da8:	f000 fc80 	bl	80116ac <xTaskRemoveFromEventList>
 8010dac:	4603      	mov	r3, r0
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d001      	beq.n	8010db6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010db2:	f000 fd59 	bl	8011868 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010db6:	7bfb      	ldrb	r3, [r7, #15]
 8010db8:	3b01      	subs	r3, #1
 8010dba:	b2db      	uxtb	r3, r3
 8010dbc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	dce9      	bgt.n	8010d9a <prvUnlockQueue+0x16>
 8010dc6:	e000      	b.n	8010dca <prvUnlockQueue+0x46>
					break;
 8010dc8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	22ff      	movs	r2, #255	; 0xff
 8010dce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010dd2:	f001 f993 	bl	80120fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010dd6:	f001 f95f 	bl	8012098 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010de0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010de2:	e011      	b.n	8010e08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	691b      	ldr	r3, [r3, #16]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d012      	beq.n	8010e12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	3310      	adds	r3, #16
 8010df0:	4618      	mov	r0, r3
 8010df2:	f000 fc5b 	bl	80116ac <xTaskRemoveFromEventList>
 8010df6:	4603      	mov	r3, r0
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d001      	beq.n	8010e00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010dfc:	f000 fd34 	bl	8011868 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010e00:	7bbb      	ldrb	r3, [r7, #14]
 8010e02:	3b01      	subs	r3, #1
 8010e04:	b2db      	uxtb	r3, r3
 8010e06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010e08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	dce9      	bgt.n	8010de4 <prvUnlockQueue+0x60>
 8010e10:	e000      	b.n	8010e14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010e12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	22ff      	movs	r2, #255	; 0xff
 8010e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010e1c:	f001 f96e 	bl	80120fc <vPortExitCritical>
}
 8010e20:	bf00      	nop
 8010e22:	3710      	adds	r7, #16
 8010e24:	46bd      	mov	sp, r7
 8010e26:	bd80      	pop	{r7, pc}

08010e28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b084      	sub	sp, #16
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010e30:	f001 f932 	bl	8012098 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d102      	bne.n	8010e42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010e3c:	2301      	movs	r3, #1
 8010e3e:	60fb      	str	r3, [r7, #12]
 8010e40:	e001      	b.n	8010e46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010e42:	2300      	movs	r3, #0
 8010e44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010e46:	f001 f959 	bl	80120fc <vPortExitCritical>

	return xReturn;
 8010e4a:	68fb      	ldr	r3, [r7, #12]
}
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	3710      	adds	r7, #16
 8010e50:	46bd      	mov	sp, r7
 8010e52:	bd80      	pop	{r7, pc}

08010e54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b084      	sub	sp, #16
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010e5c:	f001 f91c 	bl	8012098 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e68:	429a      	cmp	r2, r3
 8010e6a:	d102      	bne.n	8010e72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010e6c:	2301      	movs	r3, #1
 8010e6e:	60fb      	str	r3, [r7, #12]
 8010e70:	e001      	b.n	8010e76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010e72:	2300      	movs	r3, #0
 8010e74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010e76:	f001 f941 	bl	80120fc <vPortExitCritical>

	return xReturn;
 8010e7a:	68fb      	ldr	r3, [r7, #12]
}
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	3710      	adds	r7, #16
 8010e80:	46bd      	mov	sp, r7
 8010e82:	bd80      	pop	{r7, pc}

08010e84 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010e84:	b480      	push	{r7}
 8010e86:	b085      	sub	sp, #20
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	60fb      	str	r3, [r7, #12]
 8010e90:	e016      	b.n	8010ec0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010e92:	4a10      	ldr	r2, [pc, #64]	; (8010ed4 <vQueueUnregisterQueue+0x50>)
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	00db      	lsls	r3, r3, #3
 8010e98:	4413      	add	r3, r2
 8010e9a:	685b      	ldr	r3, [r3, #4]
 8010e9c:	687a      	ldr	r2, [r7, #4]
 8010e9e:	429a      	cmp	r2, r3
 8010ea0:	d10b      	bne.n	8010eba <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010ea2:	4a0c      	ldr	r2, [pc, #48]	; (8010ed4 <vQueueUnregisterQueue+0x50>)
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	2100      	movs	r1, #0
 8010ea8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010eac:	4a09      	ldr	r2, [pc, #36]	; (8010ed4 <vQueueUnregisterQueue+0x50>)
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	00db      	lsls	r3, r3, #3
 8010eb2:	4413      	add	r3, r2
 8010eb4:	2200      	movs	r2, #0
 8010eb6:	605a      	str	r2, [r3, #4]
				break;
 8010eb8:	e005      	b.n	8010ec6 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	3301      	adds	r3, #1
 8010ebe:	60fb      	str	r3, [r7, #12]
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	2b07      	cmp	r3, #7
 8010ec4:	d9e5      	bls.n	8010e92 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010ec6:	bf00      	nop
 8010ec8:	3714      	adds	r7, #20
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed0:	4770      	bx	lr
 8010ed2:	bf00      	nop
 8010ed4:	20008454 	.word	0x20008454

08010ed8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b08c      	sub	sp, #48	; 0x30
 8010edc:	af04      	add	r7, sp, #16
 8010ede:	60f8      	str	r0, [r7, #12]
 8010ee0:	60b9      	str	r1, [r7, #8]
 8010ee2:	603b      	str	r3, [r7, #0]
 8010ee4:	4613      	mov	r3, r2
 8010ee6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010ee8:	88fb      	ldrh	r3, [r7, #6]
 8010eea:	009b      	lsls	r3, r3, #2
 8010eec:	4618      	mov	r0, r3
 8010eee:	f001 f9f5 	bl	80122dc <pvPortMalloc>
 8010ef2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010ef4:	697b      	ldr	r3, [r7, #20]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d00e      	beq.n	8010f18 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8010efa:	2058      	movs	r0, #88	; 0x58
 8010efc:	f001 f9ee 	bl	80122dc <pvPortMalloc>
 8010f00:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010f02:	69fb      	ldr	r3, [r7, #28]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d003      	beq.n	8010f10 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010f08:	69fb      	ldr	r3, [r7, #28]
 8010f0a:	697a      	ldr	r2, [r7, #20]
 8010f0c:	631a      	str	r2, [r3, #48]	; 0x30
 8010f0e:	e005      	b.n	8010f1c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010f10:	6978      	ldr	r0, [r7, #20]
 8010f12:	f001 faaf 	bl	8012474 <vPortFree>
 8010f16:	e001      	b.n	8010f1c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010f18:	2300      	movs	r3, #0
 8010f1a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010f1c:	69fb      	ldr	r3, [r7, #28]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d013      	beq.n	8010f4a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010f22:	88fa      	ldrh	r2, [r7, #6]
 8010f24:	2300      	movs	r3, #0
 8010f26:	9303      	str	r3, [sp, #12]
 8010f28:	69fb      	ldr	r3, [r7, #28]
 8010f2a:	9302      	str	r3, [sp, #8]
 8010f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f2e:	9301      	str	r3, [sp, #4]
 8010f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f32:	9300      	str	r3, [sp, #0]
 8010f34:	683b      	ldr	r3, [r7, #0]
 8010f36:	68b9      	ldr	r1, [r7, #8]
 8010f38:	68f8      	ldr	r0, [r7, #12]
 8010f3a:	f000 f80e 	bl	8010f5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010f3e:	69f8      	ldr	r0, [r7, #28]
 8010f40:	f000 f896 	bl	8011070 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010f44:	2301      	movs	r3, #1
 8010f46:	61bb      	str	r3, [r7, #24]
 8010f48:	e002      	b.n	8010f50 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8010f4e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010f50:	69bb      	ldr	r3, [r7, #24]
	}
 8010f52:	4618      	mov	r0, r3
 8010f54:	3720      	adds	r7, #32
 8010f56:	46bd      	mov	sp, r7
 8010f58:	bd80      	pop	{r7, pc}

08010f5a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010f5a:	b580      	push	{r7, lr}
 8010f5c:	b088      	sub	sp, #32
 8010f5e:	af00      	add	r7, sp, #0
 8010f60:	60f8      	str	r0, [r7, #12]
 8010f62:	60b9      	str	r1, [r7, #8]
 8010f64:	607a      	str	r2, [r7, #4]
 8010f66:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f6a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	009b      	lsls	r3, r3, #2
 8010f70:	461a      	mov	r2, r3
 8010f72:	21a5      	movs	r1, #165	; 0xa5
 8010f74:	f004 fda3 	bl	8015abe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8010f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010f7c:	6879      	ldr	r1, [r7, #4]
 8010f7e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8010f82:	440b      	add	r3, r1
 8010f84:	009b      	lsls	r3, r3, #2
 8010f86:	4413      	add	r3, r2
 8010f88:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8010f8a:	69bb      	ldr	r3, [r7, #24]
 8010f8c:	f023 0307 	bic.w	r3, r3, #7
 8010f90:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010f92:	69bb      	ldr	r3, [r7, #24]
 8010f94:	f003 0307 	and.w	r3, r3, #7
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d00b      	beq.n	8010fb4 <prvInitialiseNewTask+0x5a>
 8010f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fa0:	b672      	cpsid	i
 8010fa2:	f383 8811 	msr	BASEPRI, r3
 8010fa6:	f3bf 8f6f 	isb	sy
 8010faa:	f3bf 8f4f 	dsb	sy
 8010fae:	b662      	cpsie	i
 8010fb0:	617b      	str	r3, [r7, #20]
 8010fb2:	e7fe      	b.n	8010fb2 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	61fb      	str	r3, [r7, #28]
 8010fb8:	e012      	b.n	8010fe0 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010fba:	68ba      	ldr	r2, [r7, #8]
 8010fbc:	69fb      	ldr	r3, [r7, #28]
 8010fbe:	4413      	add	r3, r2
 8010fc0:	7819      	ldrb	r1, [r3, #0]
 8010fc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010fc4:	69fb      	ldr	r3, [r7, #28]
 8010fc6:	4413      	add	r3, r2
 8010fc8:	3334      	adds	r3, #52	; 0x34
 8010fca:	460a      	mov	r2, r1
 8010fcc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8010fce:	68ba      	ldr	r2, [r7, #8]
 8010fd0:	69fb      	ldr	r3, [r7, #28]
 8010fd2:	4413      	add	r3, r2
 8010fd4:	781b      	ldrb	r3, [r3, #0]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d006      	beq.n	8010fe8 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010fda:	69fb      	ldr	r3, [r7, #28]
 8010fdc:	3301      	adds	r3, #1
 8010fde:	61fb      	str	r3, [r7, #28]
 8010fe0:	69fb      	ldr	r3, [r7, #28]
 8010fe2:	2b0f      	cmp	r3, #15
 8010fe4:	d9e9      	bls.n	8010fba <prvInitialiseNewTask+0x60>
 8010fe6:	e000      	b.n	8010fea <prvInitialiseNewTask+0x90>
		{
			break;
 8010fe8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fec:	2200      	movs	r2, #0
 8010fee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ff4:	2b06      	cmp	r3, #6
 8010ff6:	d901      	bls.n	8010ffc <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010ff8:	2306      	movs	r3, #6
 8010ffa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ffe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011000:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011004:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011006:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8011008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801100a:	2200      	movs	r2, #0
 801100c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801100e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011010:	3304      	adds	r3, #4
 8011012:	4618      	mov	r0, r3
 8011014:	f7fe ffbc 	bl	800ff90 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801101a:	3318      	adds	r3, #24
 801101c:	4618      	mov	r0, r3
 801101e:	f7fe ffb7 	bl	800ff90 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011026:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801102a:	f1c3 0207 	rsb	r2, r3, #7
 801102e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011030:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011036:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8011038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801103a:	2200      	movs	r2, #0
 801103c:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801103e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011040:	2200      	movs	r2, #0
 8011042:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011046:	2200      	movs	r2, #0
 8011048:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801104c:	683a      	ldr	r2, [r7, #0]
 801104e:	68f9      	ldr	r1, [r7, #12]
 8011050:	69b8      	ldr	r0, [r7, #24]
 8011052:	f000 ff19 	bl	8011e88 <pxPortInitialiseStack>
 8011056:	4602      	mov	r2, r0
 8011058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801105a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 801105c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801105e:	2b00      	cmp	r3, #0
 8011060:	d002      	beq.n	8011068 <prvInitialiseNewTask+0x10e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011066:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011068:	bf00      	nop
 801106a:	3720      	adds	r7, #32
 801106c:	46bd      	mov	sp, r7
 801106e:	bd80      	pop	{r7, pc}

08011070 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b082      	sub	sp, #8
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011078:	f001 f80e 	bl	8012098 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801107c:	4b2a      	ldr	r3, [pc, #168]	; (8011128 <prvAddNewTaskToReadyList+0xb8>)
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	3301      	adds	r3, #1
 8011082:	4a29      	ldr	r2, [pc, #164]	; (8011128 <prvAddNewTaskToReadyList+0xb8>)
 8011084:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011086:	4b29      	ldr	r3, [pc, #164]	; (801112c <prvAddNewTaskToReadyList+0xbc>)
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d109      	bne.n	80110a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801108e:	4a27      	ldr	r2, [pc, #156]	; (801112c <prvAddNewTaskToReadyList+0xbc>)
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011094:	4b24      	ldr	r3, [pc, #144]	; (8011128 <prvAddNewTaskToReadyList+0xb8>)
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	2b01      	cmp	r3, #1
 801109a:	d110      	bne.n	80110be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801109c:	f000 fc0a 	bl	80118b4 <prvInitialiseTaskLists>
 80110a0:	e00d      	b.n	80110be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80110a2:	4b23      	ldr	r3, [pc, #140]	; (8011130 <prvAddNewTaskToReadyList+0xc0>)
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d109      	bne.n	80110be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80110aa:	4b20      	ldr	r3, [pc, #128]	; (801112c <prvAddNewTaskToReadyList+0xbc>)
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110b4:	429a      	cmp	r2, r3
 80110b6:	d802      	bhi.n	80110be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80110b8:	4a1c      	ldr	r2, [pc, #112]	; (801112c <prvAddNewTaskToReadyList+0xbc>)
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80110be:	4b1d      	ldr	r3, [pc, #116]	; (8011134 <prvAddNewTaskToReadyList+0xc4>)
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	3301      	adds	r3, #1
 80110c4:	4a1b      	ldr	r2, [pc, #108]	; (8011134 <prvAddNewTaskToReadyList+0xc4>)
 80110c6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110cc:	2201      	movs	r2, #1
 80110ce:	409a      	lsls	r2, r3
 80110d0:	4b19      	ldr	r3, [pc, #100]	; (8011138 <prvAddNewTaskToReadyList+0xc8>)
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	4313      	orrs	r3, r2
 80110d6:	4a18      	ldr	r2, [pc, #96]	; (8011138 <prvAddNewTaskToReadyList+0xc8>)
 80110d8:	6013      	str	r3, [r2, #0]
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110de:	4613      	mov	r3, r2
 80110e0:	009b      	lsls	r3, r3, #2
 80110e2:	4413      	add	r3, r2
 80110e4:	009b      	lsls	r3, r3, #2
 80110e6:	4a15      	ldr	r2, [pc, #84]	; (801113c <prvAddNewTaskToReadyList+0xcc>)
 80110e8:	441a      	add	r2, r3
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	3304      	adds	r3, #4
 80110ee:	4619      	mov	r1, r3
 80110f0:	4610      	mov	r0, r2
 80110f2:	f7fe ff5a 	bl	800ffaa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80110f6:	f001 f801 	bl	80120fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80110fa:	4b0d      	ldr	r3, [pc, #52]	; (8011130 <prvAddNewTaskToReadyList+0xc0>)
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d00e      	beq.n	8011120 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011102:	4b0a      	ldr	r3, [pc, #40]	; (801112c <prvAddNewTaskToReadyList+0xbc>)
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801110c:	429a      	cmp	r2, r3
 801110e:	d207      	bcs.n	8011120 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011110:	4b0b      	ldr	r3, [pc, #44]	; (8011140 <prvAddNewTaskToReadyList+0xd0>)
 8011112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011116:	601a      	str	r2, [r3, #0]
 8011118:	f3bf 8f4f 	dsb	sy
 801111c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011120:	bf00      	nop
 8011122:	3708      	adds	r7, #8
 8011124:	46bd      	mov	sp, r7
 8011126:	bd80      	pop	{r7, pc}
 8011128:	200001e8 	.word	0x200001e8
 801112c:	200000e8 	.word	0x200000e8
 8011130:	200001f4 	.word	0x200001f4
 8011134:	20000204 	.word	0x20000204
 8011138:	200001f0 	.word	0x200001f0
 801113c:	200000ec 	.word	0x200000ec
 8011140:	e000ed04 	.word	0xe000ed04

08011144 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011144:	b580      	push	{r7, lr}
 8011146:	b084      	sub	sp, #16
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801114c:	2300      	movs	r3, #0
 801114e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d018      	beq.n	8011188 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011156:	4b14      	ldr	r3, [pc, #80]	; (80111a8 <vTaskDelay+0x64>)
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d00b      	beq.n	8011176 <vTaskDelay+0x32>
 801115e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011162:	b672      	cpsid	i
 8011164:	f383 8811 	msr	BASEPRI, r3
 8011168:	f3bf 8f6f 	isb	sy
 801116c:	f3bf 8f4f 	dsb	sy
 8011170:	b662      	cpsie	i
 8011172:	60bb      	str	r3, [r7, #8]
 8011174:	e7fe      	b.n	8011174 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8011176:	f000 f865 	bl	8011244 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801117a:	2100      	movs	r1, #0
 801117c:	6878      	ldr	r0, [r7, #4]
 801117e:	f000 fe1d 	bl	8011dbc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011182:	f000 f86d 	bl	8011260 <xTaskResumeAll>
 8011186:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d107      	bne.n	801119e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801118e:	4b07      	ldr	r3, [pc, #28]	; (80111ac <vTaskDelay+0x68>)
 8011190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011194:	601a      	str	r2, [r3, #0]
 8011196:	f3bf 8f4f 	dsb	sy
 801119a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801119e:	bf00      	nop
 80111a0:	3710      	adds	r7, #16
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bd80      	pop	{r7, pc}
 80111a6:	bf00      	nop
 80111a8:	20000210 	.word	0x20000210
 80111ac:	e000ed04 	.word	0xe000ed04

080111b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80111b0:	b580      	push	{r7, lr}
 80111b2:	b086      	sub	sp, #24
 80111b4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80111b6:	4b1d      	ldr	r3, [pc, #116]	; (801122c <vTaskStartScheduler+0x7c>)
 80111b8:	9301      	str	r3, [sp, #4]
 80111ba:	2300      	movs	r3, #0
 80111bc:	9300      	str	r3, [sp, #0]
 80111be:	2300      	movs	r3, #0
 80111c0:	2280      	movs	r2, #128	; 0x80
 80111c2:	491b      	ldr	r1, [pc, #108]	; (8011230 <vTaskStartScheduler+0x80>)
 80111c4:	481b      	ldr	r0, [pc, #108]	; (8011234 <vTaskStartScheduler+0x84>)
 80111c6:	f7ff fe87 	bl	8010ed8 <xTaskCreate>
 80111ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	2b01      	cmp	r3, #1
 80111d0:	d117      	bne.n	8011202 <vTaskStartScheduler+0x52>
 80111d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111d6:	b672      	cpsid	i
 80111d8:	f383 8811 	msr	BASEPRI, r3
 80111dc:	f3bf 8f6f 	isb	sy
 80111e0:	f3bf 8f4f 	dsb	sy
 80111e4:	b662      	cpsie	i
 80111e6:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80111e8:	4b13      	ldr	r3, [pc, #76]	; (8011238 <vTaskStartScheduler+0x88>)
 80111ea:	f04f 32ff 	mov.w	r2, #4294967295
 80111ee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80111f0:	4b12      	ldr	r3, [pc, #72]	; (801123c <vTaskStartScheduler+0x8c>)
 80111f2:	2201      	movs	r2, #1
 80111f4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80111f6:	4b12      	ldr	r3, [pc, #72]	; (8011240 <vTaskStartScheduler+0x90>)
 80111f8:	2200      	movs	r2, #0
 80111fa:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80111fc:	f000 fed0 	bl	8011fa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011200:	e00f      	b.n	8011222 <vTaskStartScheduler+0x72>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011208:	d10b      	bne.n	8011222 <vTaskStartScheduler+0x72>
 801120a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801120e:	b672      	cpsid	i
 8011210:	f383 8811 	msr	BASEPRI, r3
 8011214:	f3bf 8f6f 	isb	sy
 8011218:	f3bf 8f4f 	dsb	sy
 801121c:	b662      	cpsie	i
 801121e:	607b      	str	r3, [r7, #4]
 8011220:	e7fe      	b.n	8011220 <vTaskStartScheduler+0x70>
}
 8011222:	bf00      	nop
 8011224:	3710      	adds	r7, #16
 8011226:	46bd      	mov	sp, r7
 8011228:	bd80      	pop	{r7, pc}
 801122a:	bf00      	nop
 801122c:	2000020c 	.word	0x2000020c
 8011230:	08015ccc 	.word	0x08015ccc
 8011234:	08011881 	.word	0x08011881
 8011238:	20000208 	.word	0x20000208
 801123c:	200001f4 	.word	0x200001f4
 8011240:	200001ec 	.word	0x200001ec

08011244 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011244:	b480      	push	{r7}
 8011246:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8011248:	4b04      	ldr	r3, [pc, #16]	; (801125c <vTaskSuspendAll+0x18>)
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	3301      	adds	r3, #1
 801124e:	4a03      	ldr	r2, [pc, #12]	; (801125c <vTaskSuspendAll+0x18>)
 8011250:	6013      	str	r3, [r2, #0]
}
 8011252:	bf00      	nop
 8011254:	46bd      	mov	sp, r7
 8011256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801125a:	4770      	bx	lr
 801125c:	20000210 	.word	0x20000210

08011260 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011260:	b580      	push	{r7, lr}
 8011262:	b084      	sub	sp, #16
 8011264:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011266:	2300      	movs	r3, #0
 8011268:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801126a:	2300      	movs	r3, #0
 801126c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801126e:	4b42      	ldr	r3, [pc, #264]	; (8011378 <xTaskResumeAll+0x118>)
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d10b      	bne.n	801128e <xTaskResumeAll+0x2e>
 8011276:	f04f 0350 	mov.w	r3, #80	; 0x50
 801127a:	b672      	cpsid	i
 801127c:	f383 8811 	msr	BASEPRI, r3
 8011280:	f3bf 8f6f 	isb	sy
 8011284:	f3bf 8f4f 	dsb	sy
 8011288:	b662      	cpsie	i
 801128a:	603b      	str	r3, [r7, #0]
 801128c:	e7fe      	b.n	801128c <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801128e:	f000 ff03 	bl	8012098 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011292:	4b39      	ldr	r3, [pc, #228]	; (8011378 <xTaskResumeAll+0x118>)
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	3b01      	subs	r3, #1
 8011298:	4a37      	ldr	r2, [pc, #220]	; (8011378 <xTaskResumeAll+0x118>)
 801129a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801129c:	4b36      	ldr	r3, [pc, #216]	; (8011378 <xTaskResumeAll+0x118>)
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d161      	bne.n	8011368 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80112a4:	4b35      	ldr	r3, [pc, #212]	; (801137c <xTaskResumeAll+0x11c>)
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d05d      	beq.n	8011368 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80112ac:	e02e      	b.n	801130c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80112ae:	4b34      	ldr	r3, [pc, #208]	; (8011380 <xTaskResumeAll+0x120>)
 80112b0:	68db      	ldr	r3, [r3, #12]
 80112b2:	68db      	ldr	r3, [r3, #12]
 80112b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	3318      	adds	r3, #24
 80112ba:	4618      	mov	r0, r3
 80112bc:	f7fe fed2 	bl	8010064 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	3304      	adds	r3, #4
 80112c4:	4618      	mov	r0, r3
 80112c6:	f7fe fecd 	bl	8010064 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112ce:	2201      	movs	r2, #1
 80112d0:	409a      	lsls	r2, r3
 80112d2:	4b2c      	ldr	r3, [pc, #176]	; (8011384 <xTaskResumeAll+0x124>)
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	4313      	orrs	r3, r2
 80112d8:	4a2a      	ldr	r2, [pc, #168]	; (8011384 <xTaskResumeAll+0x124>)
 80112da:	6013      	str	r3, [r2, #0]
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112e0:	4613      	mov	r3, r2
 80112e2:	009b      	lsls	r3, r3, #2
 80112e4:	4413      	add	r3, r2
 80112e6:	009b      	lsls	r3, r3, #2
 80112e8:	4a27      	ldr	r2, [pc, #156]	; (8011388 <xTaskResumeAll+0x128>)
 80112ea:	441a      	add	r2, r3
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	3304      	adds	r3, #4
 80112f0:	4619      	mov	r1, r3
 80112f2:	4610      	mov	r0, r2
 80112f4:	f7fe fe59 	bl	800ffaa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112fc:	4b23      	ldr	r3, [pc, #140]	; (801138c <xTaskResumeAll+0x12c>)
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011302:	429a      	cmp	r2, r3
 8011304:	d302      	bcc.n	801130c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8011306:	4b22      	ldr	r3, [pc, #136]	; (8011390 <xTaskResumeAll+0x130>)
 8011308:	2201      	movs	r2, #1
 801130a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801130c:	4b1c      	ldr	r3, [pc, #112]	; (8011380 <xTaskResumeAll+0x120>)
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	2b00      	cmp	r3, #0
 8011312:	d1cc      	bne.n	80112ae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d001      	beq.n	801131e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801131a:	f000 fb47 	bl	80119ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801131e:	4b1d      	ldr	r3, [pc, #116]	; (8011394 <xTaskResumeAll+0x134>)
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d010      	beq.n	801134c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801132a:	f000 f859 	bl	80113e0 <xTaskIncrementTick>
 801132e:	4603      	mov	r3, r0
 8011330:	2b00      	cmp	r3, #0
 8011332:	d002      	beq.n	801133a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011334:	4b16      	ldr	r3, [pc, #88]	; (8011390 <xTaskResumeAll+0x130>)
 8011336:	2201      	movs	r2, #1
 8011338:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	3b01      	subs	r3, #1
 801133e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d1f1      	bne.n	801132a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8011346:	4b13      	ldr	r3, [pc, #76]	; (8011394 <xTaskResumeAll+0x134>)
 8011348:	2200      	movs	r2, #0
 801134a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801134c:	4b10      	ldr	r3, [pc, #64]	; (8011390 <xTaskResumeAll+0x130>)
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d009      	beq.n	8011368 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011354:	2301      	movs	r3, #1
 8011356:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011358:	4b0f      	ldr	r3, [pc, #60]	; (8011398 <xTaskResumeAll+0x138>)
 801135a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801135e:	601a      	str	r2, [r3, #0]
 8011360:	f3bf 8f4f 	dsb	sy
 8011364:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011368:	f000 fec8 	bl	80120fc <vPortExitCritical>

	return xAlreadyYielded;
 801136c:	68bb      	ldr	r3, [r7, #8]
}
 801136e:	4618      	mov	r0, r3
 8011370:	3710      	adds	r7, #16
 8011372:	46bd      	mov	sp, r7
 8011374:	bd80      	pop	{r7, pc}
 8011376:	bf00      	nop
 8011378:	20000210 	.word	0x20000210
 801137c:	200001e8 	.word	0x200001e8
 8011380:	200001a8 	.word	0x200001a8
 8011384:	200001f0 	.word	0x200001f0
 8011388:	200000ec 	.word	0x200000ec
 801138c:	200000e8 	.word	0x200000e8
 8011390:	200001fc 	.word	0x200001fc
 8011394:	200001f8 	.word	0x200001f8
 8011398:	e000ed04 	.word	0xe000ed04

0801139c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801139c:	b480      	push	{r7}
 801139e:	b083      	sub	sp, #12
 80113a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80113a2:	4b05      	ldr	r3, [pc, #20]	; (80113b8 <xTaskGetTickCount+0x1c>)
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80113a8:	687b      	ldr	r3, [r7, #4]
}
 80113aa:	4618      	mov	r0, r3
 80113ac:	370c      	adds	r7, #12
 80113ae:	46bd      	mov	sp, r7
 80113b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b4:	4770      	bx	lr
 80113b6:	bf00      	nop
 80113b8:	200001ec 	.word	0x200001ec

080113bc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80113bc:	b580      	push	{r7, lr}
 80113be:	b082      	sub	sp, #8
 80113c0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80113c2:	f000 ff49 	bl	8012258 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80113c6:	2300      	movs	r3, #0
 80113c8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80113ca:	4b04      	ldr	r3, [pc, #16]	; (80113dc <xTaskGetTickCountFromISR+0x20>)
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80113d0:	683b      	ldr	r3, [r7, #0]
}
 80113d2:	4618      	mov	r0, r3
 80113d4:	3708      	adds	r7, #8
 80113d6:	46bd      	mov	sp, r7
 80113d8:	bd80      	pop	{r7, pc}
 80113da:	bf00      	nop
 80113dc:	200001ec 	.word	0x200001ec

080113e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b086      	sub	sp, #24
 80113e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80113e6:	2300      	movs	r3, #0
 80113e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80113ea:	4b51      	ldr	r3, [pc, #324]	; (8011530 <xTaskIncrementTick+0x150>)
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	f040 808e 	bne.w	8011510 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80113f4:	4b4f      	ldr	r3, [pc, #316]	; (8011534 <xTaskIncrementTick+0x154>)
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	3301      	adds	r3, #1
 80113fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80113fc:	4a4d      	ldr	r2, [pc, #308]	; (8011534 <xTaskIncrementTick+0x154>)
 80113fe:	693b      	ldr	r3, [r7, #16]
 8011400:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011402:	693b      	ldr	r3, [r7, #16]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d121      	bne.n	801144c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8011408:	4b4b      	ldr	r3, [pc, #300]	; (8011538 <xTaskIncrementTick+0x158>)
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d00b      	beq.n	801142a <xTaskIncrementTick+0x4a>
 8011412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011416:	b672      	cpsid	i
 8011418:	f383 8811 	msr	BASEPRI, r3
 801141c:	f3bf 8f6f 	isb	sy
 8011420:	f3bf 8f4f 	dsb	sy
 8011424:	b662      	cpsie	i
 8011426:	603b      	str	r3, [r7, #0]
 8011428:	e7fe      	b.n	8011428 <xTaskIncrementTick+0x48>
 801142a:	4b43      	ldr	r3, [pc, #268]	; (8011538 <xTaskIncrementTick+0x158>)
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	60fb      	str	r3, [r7, #12]
 8011430:	4b42      	ldr	r3, [pc, #264]	; (801153c <xTaskIncrementTick+0x15c>)
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	4a40      	ldr	r2, [pc, #256]	; (8011538 <xTaskIncrementTick+0x158>)
 8011436:	6013      	str	r3, [r2, #0]
 8011438:	4a40      	ldr	r2, [pc, #256]	; (801153c <xTaskIncrementTick+0x15c>)
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	6013      	str	r3, [r2, #0]
 801143e:	4b40      	ldr	r3, [pc, #256]	; (8011540 <xTaskIncrementTick+0x160>)
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	3301      	adds	r3, #1
 8011444:	4a3e      	ldr	r2, [pc, #248]	; (8011540 <xTaskIncrementTick+0x160>)
 8011446:	6013      	str	r3, [r2, #0]
 8011448:	f000 fab0 	bl	80119ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801144c:	4b3d      	ldr	r3, [pc, #244]	; (8011544 <xTaskIncrementTick+0x164>)
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	693a      	ldr	r2, [r7, #16]
 8011452:	429a      	cmp	r2, r3
 8011454:	d34d      	bcc.n	80114f2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011456:	4b38      	ldr	r3, [pc, #224]	; (8011538 <xTaskIncrementTick+0x158>)
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d101      	bne.n	8011464 <xTaskIncrementTick+0x84>
 8011460:	2301      	movs	r3, #1
 8011462:	e000      	b.n	8011466 <xTaskIncrementTick+0x86>
 8011464:	2300      	movs	r3, #0
 8011466:	2b00      	cmp	r3, #0
 8011468:	d004      	beq.n	8011474 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801146a:	4b36      	ldr	r3, [pc, #216]	; (8011544 <xTaskIncrementTick+0x164>)
 801146c:	f04f 32ff 	mov.w	r2, #4294967295
 8011470:	601a      	str	r2, [r3, #0]
					break;
 8011472:	e03e      	b.n	80114f2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8011474:	4b30      	ldr	r3, [pc, #192]	; (8011538 <xTaskIncrementTick+0x158>)
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	68db      	ldr	r3, [r3, #12]
 801147a:	68db      	ldr	r3, [r3, #12]
 801147c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801147e:	68bb      	ldr	r3, [r7, #8]
 8011480:	685b      	ldr	r3, [r3, #4]
 8011482:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011484:	693a      	ldr	r2, [r7, #16]
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	429a      	cmp	r2, r3
 801148a:	d203      	bcs.n	8011494 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801148c:	4a2d      	ldr	r2, [pc, #180]	; (8011544 <xTaskIncrementTick+0x164>)
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	6013      	str	r3, [r2, #0]
						break;
 8011492:	e02e      	b.n	80114f2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011494:	68bb      	ldr	r3, [r7, #8]
 8011496:	3304      	adds	r3, #4
 8011498:	4618      	mov	r0, r3
 801149a:	f7fe fde3 	bl	8010064 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801149e:	68bb      	ldr	r3, [r7, #8]
 80114a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d004      	beq.n	80114b0 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80114a6:	68bb      	ldr	r3, [r7, #8]
 80114a8:	3318      	adds	r3, #24
 80114aa:	4618      	mov	r0, r3
 80114ac:	f7fe fdda 	bl	8010064 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80114b0:	68bb      	ldr	r3, [r7, #8]
 80114b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114b4:	2201      	movs	r2, #1
 80114b6:	409a      	lsls	r2, r3
 80114b8:	4b23      	ldr	r3, [pc, #140]	; (8011548 <xTaskIncrementTick+0x168>)
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	4313      	orrs	r3, r2
 80114be:	4a22      	ldr	r2, [pc, #136]	; (8011548 <xTaskIncrementTick+0x168>)
 80114c0:	6013      	str	r3, [r2, #0]
 80114c2:	68bb      	ldr	r3, [r7, #8]
 80114c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114c6:	4613      	mov	r3, r2
 80114c8:	009b      	lsls	r3, r3, #2
 80114ca:	4413      	add	r3, r2
 80114cc:	009b      	lsls	r3, r3, #2
 80114ce:	4a1f      	ldr	r2, [pc, #124]	; (801154c <xTaskIncrementTick+0x16c>)
 80114d0:	441a      	add	r2, r3
 80114d2:	68bb      	ldr	r3, [r7, #8]
 80114d4:	3304      	adds	r3, #4
 80114d6:	4619      	mov	r1, r3
 80114d8:	4610      	mov	r0, r2
 80114da:	f7fe fd66 	bl	800ffaa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80114de:	68bb      	ldr	r3, [r7, #8]
 80114e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114e2:	4b1b      	ldr	r3, [pc, #108]	; (8011550 <xTaskIncrementTick+0x170>)
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114e8:	429a      	cmp	r2, r3
 80114ea:	d3b4      	bcc.n	8011456 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80114ec:	2301      	movs	r3, #1
 80114ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80114f0:	e7b1      	b.n	8011456 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80114f2:	4b17      	ldr	r3, [pc, #92]	; (8011550 <xTaskIncrementTick+0x170>)
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114f8:	4914      	ldr	r1, [pc, #80]	; (801154c <xTaskIncrementTick+0x16c>)
 80114fa:	4613      	mov	r3, r2
 80114fc:	009b      	lsls	r3, r3, #2
 80114fe:	4413      	add	r3, r2
 8011500:	009b      	lsls	r3, r3, #2
 8011502:	440b      	add	r3, r1
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	2b01      	cmp	r3, #1
 8011508:	d907      	bls.n	801151a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 801150a:	2301      	movs	r3, #1
 801150c:	617b      	str	r3, [r7, #20]
 801150e:	e004      	b.n	801151a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8011510:	4b10      	ldr	r3, [pc, #64]	; (8011554 <xTaskIncrementTick+0x174>)
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	3301      	adds	r3, #1
 8011516:	4a0f      	ldr	r2, [pc, #60]	; (8011554 <xTaskIncrementTick+0x174>)
 8011518:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801151a:	4b0f      	ldr	r3, [pc, #60]	; (8011558 <xTaskIncrementTick+0x178>)
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d001      	beq.n	8011526 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8011522:	2301      	movs	r3, #1
 8011524:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011526:	697b      	ldr	r3, [r7, #20]
}
 8011528:	4618      	mov	r0, r3
 801152a:	3718      	adds	r7, #24
 801152c:	46bd      	mov	sp, r7
 801152e:	bd80      	pop	{r7, pc}
 8011530:	20000210 	.word	0x20000210
 8011534:	200001ec 	.word	0x200001ec
 8011538:	200001a0 	.word	0x200001a0
 801153c:	200001a4 	.word	0x200001a4
 8011540:	20000200 	.word	0x20000200
 8011544:	20000208 	.word	0x20000208
 8011548:	200001f0 	.word	0x200001f0
 801154c:	200000ec 	.word	0x200000ec
 8011550:	200000e8 	.word	0x200000e8
 8011554:	200001f8 	.word	0x200001f8
 8011558:	200001fc 	.word	0x200001fc

0801155c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801155c:	b580      	push	{r7, lr}
 801155e:	b088      	sub	sp, #32
 8011560:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011562:	4b3a      	ldr	r3, [pc, #232]	; (801164c <vTaskSwitchContext+0xf0>)
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d003      	beq.n	8011572 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801156a:	4b39      	ldr	r3, [pc, #228]	; (8011650 <vTaskSwitchContext+0xf4>)
 801156c:	2201      	movs	r2, #1
 801156e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011570:	e067      	b.n	8011642 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 8011572:	4b37      	ldr	r3, [pc, #220]	; (8011650 <vTaskSwitchContext+0xf4>)
 8011574:	2200      	movs	r2, #0
 8011576:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8011578:	4b36      	ldr	r3, [pc, #216]	; (8011654 <vTaskSwitchContext+0xf8>)
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801157e:	61fb      	str	r3, [r7, #28]
 8011580:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8011584:	61bb      	str	r3, [r7, #24]
 8011586:	69fb      	ldr	r3, [r7, #28]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	69ba      	ldr	r2, [r7, #24]
 801158c:	429a      	cmp	r2, r3
 801158e:	d111      	bne.n	80115b4 <vTaskSwitchContext+0x58>
 8011590:	69fb      	ldr	r3, [r7, #28]
 8011592:	3304      	adds	r3, #4
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	69ba      	ldr	r2, [r7, #24]
 8011598:	429a      	cmp	r2, r3
 801159a:	d10b      	bne.n	80115b4 <vTaskSwitchContext+0x58>
 801159c:	69fb      	ldr	r3, [r7, #28]
 801159e:	3308      	adds	r3, #8
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	69ba      	ldr	r2, [r7, #24]
 80115a4:	429a      	cmp	r2, r3
 80115a6:	d105      	bne.n	80115b4 <vTaskSwitchContext+0x58>
 80115a8:	69fb      	ldr	r3, [r7, #28]
 80115aa:	330c      	adds	r3, #12
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	69ba      	ldr	r2, [r7, #24]
 80115b0:	429a      	cmp	r2, r3
 80115b2:	d008      	beq.n	80115c6 <vTaskSwitchContext+0x6a>
 80115b4:	4b27      	ldr	r3, [pc, #156]	; (8011654 <vTaskSwitchContext+0xf8>)
 80115b6:	681a      	ldr	r2, [r3, #0]
 80115b8:	4b26      	ldr	r3, [pc, #152]	; (8011654 <vTaskSwitchContext+0xf8>)
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	3334      	adds	r3, #52	; 0x34
 80115be:	4619      	mov	r1, r3
 80115c0:	4610      	mov	r0, r2
 80115c2:	f001 f956 	bl	8012872 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80115c6:	4b24      	ldr	r3, [pc, #144]	; (8011658 <vTaskSwitchContext+0xfc>)
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	fab3 f383 	clz	r3, r3
 80115d2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80115d4:	7afb      	ldrb	r3, [r7, #11]
 80115d6:	f1c3 031f 	rsb	r3, r3, #31
 80115da:	617b      	str	r3, [r7, #20]
 80115dc:	491f      	ldr	r1, [pc, #124]	; (801165c <vTaskSwitchContext+0x100>)
 80115de:	697a      	ldr	r2, [r7, #20]
 80115e0:	4613      	mov	r3, r2
 80115e2:	009b      	lsls	r3, r3, #2
 80115e4:	4413      	add	r3, r2
 80115e6:	009b      	lsls	r3, r3, #2
 80115e8:	440b      	add	r3, r1
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d10b      	bne.n	8011608 <vTaskSwitchContext+0xac>
	__asm volatile
 80115f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115f4:	b672      	cpsid	i
 80115f6:	f383 8811 	msr	BASEPRI, r3
 80115fa:	f3bf 8f6f 	isb	sy
 80115fe:	f3bf 8f4f 	dsb	sy
 8011602:	b662      	cpsie	i
 8011604:	607b      	str	r3, [r7, #4]
 8011606:	e7fe      	b.n	8011606 <vTaskSwitchContext+0xaa>
 8011608:	697a      	ldr	r2, [r7, #20]
 801160a:	4613      	mov	r3, r2
 801160c:	009b      	lsls	r3, r3, #2
 801160e:	4413      	add	r3, r2
 8011610:	009b      	lsls	r3, r3, #2
 8011612:	4a12      	ldr	r2, [pc, #72]	; (801165c <vTaskSwitchContext+0x100>)
 8011614:	4413      	add	r3, r2
 8011616:	613b      	str	r3, [r7, #16]
 8011618:	693b      	ldr	r3, [r7, #16]
 801161a:	685b      	ldr	r3, [r3, #4]
 801161c:	685a      	ldr	r2, [r3, #4]
 801161e:	693b      	ldr	r3, [r7, #16]
 8011620:	605a      	str	r2, [r3, #4]
 8011622:	693b      	ldr	r3, [r7, #16]
 8011624:	685a      	ldr	r2, [r3, #4]
 8011626:	693b      	ldr	r3, [r7, #16]
 8011628:	3308      	adds	r3, #8
 801162a:	429a      	cmp	r2, r3
 801162c:	d104      	bne.n	8011638 <vTaskSwitchContext+0xdc>
 801162e:	693b      	ldr	r3, [r7, #16]
 8011630:	685b      	ldr	r3, [r3, #4]
 8011632:	685a      	ldr	r2, [r3, #4]
 8011634:	693b      	ldr	r3, [r7, #16]
 8011636:	605a      	str	r2, [r3, #4]
 8011638:	693b      	ldr	r3, [r7, #16]
 801163a:	685b      	ldr	r3, [r3, #4]
 801163c:	68db      	ldr	r3, [r3, #12]
 801163e:	4a05      	ldr	r2, [pc, #20]	; (8011654 <vTaskSwitchContext+0xf8>)
 8011640:	6013      	str	r3, [r2, #0]
}
 8011642:	bf00      	nop
 8011644:	3720      	adds	r7, #32
 8011646:	46bd      	mov	sp, r7
 8011648:	bd80      	pop	{r7, pc}
 801164a:	bf00      	nop
 801164c:	20000210 	.word	0x20000210
 8011650:	200001fc 	.word	0x200001fc
 8011654:	200000e8 	.word	0x200000e8
 8011658:	200001f0 	.word	0x200001f0
 801165c:	200000ec 	.word	0x200000ec

08011660 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011660:	b580      	push	{r7, lr}
 8011662:	b084      	sub	sp, #16
 8011664:	af00      	add	r7, sp, #0
 8011666:	6078      	str	r0, [r7, #4]
 8011668:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d10b      	bne.n	8011688 <vTaskPlaceOnEventList+0x28>
 8011670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011674:	b672      	cpsid	i
 8011676:	f383 8811 	msr	BASEPRI, r3
 801167a:	f3bf 8f6f 	isb	sy
 801167e:	f3bf 8f4f 	dsb	sy
 8011682:	b662      	cpsie	i
 8011684:	60fb      	str	r3, [r7, #12]
 8011686:	e7fe      	b.n	8011686 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011688:	4b07      	ldr	r3, [pc, #28]	; (80116a8 <vTaskPlaceOnEventList+0x48>)
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	3318      	adds	r3, #24
 801168e:	4619      	mov	r1, r3
 8011690:	6878      	ldr	r0, [r7, #4]
 8011692:	f7fe fcae 	bl	800fff2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011696:	2101      	movs	r1, #1
 8011698:	6838      	ldr	r0, [r7, #0]
 801169a:	f000 fb8f 	bl	8011dbc <prvAddCurrentTaskToDelayedList>
}
 801169e:	bf00      	nop
 80116a0:	3710      	adds	r7, #16
 80116a2:	46bd      	mov	sp, r7
 80116a4:	bd80      	pop	{r7, pc}
 80116a6:	bf00      	nop
 80116a8:	200000e8 	.word	0x200000e8

080116ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b086      	sub	sp, #24
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	68db      	ldr	r3, [r3, #12]
 80116b8:	68db      	ldr	r3, [r3, #12]
 80116ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80116bc:	693b      	ldr	r3, [r7, #16]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d10b      	bne.n	80116da <xTaskRemoveFromEventList+0x2e>
 80116c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116c6:	b672      	cpsid	i
 80116c8:	f383 8811 	msr	BASEPRI, r3
 80116cc:	f3bf 8f6f 	isb	sy
 80116d0:	f3bf 8f4f 	dsb	sy
 80116d4:	b662      	cpsie	i
 80116d6:	60fb      	str	r3, [r7, #12]
 80116d8:	e7fe      	b.n	80116d8 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80116da:	693b      	ldr	r3, [r7, #16]
 80116dc:	3318      	adds	r3, #24
 80116de:	4618      	mov	r0, r3
 80116e0:	f7fe fcc0 	bl	8010064 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80116e4:	4b1d      	ldr	r3, [pc, #116]	; (801175c <xTaskRemoveFromEventList+0xb0>)
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d11c      	bne.n	8011726 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80116ec:	693b      	ldr	r3, [r7, #16]
 80116ee:	3304      	adds	r3, #4
 80116f0:	4618      	mov	r0, r3
 80116f2:	f7fe fcb7 	bl	8010064 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80116f6:	693b      	ldr	r3, [r7, #16]
 80116f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116fa:	2201      	movs	r2, #1
 80116fc:	409a      	lsls	r2, r3
 80116fe:	4b18      	ldr	r3, [pc, #96]	; (8011760 <xTaskRemoveFromEventList+0xb4>)
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	4313      	orrs	r3, r2
 8011704:	4a16      	ldr	r2, [pc, #88]	; (8011760 <xTaskRemoveFromEventList+0xb4>)
 8011706:	6013      	str	r3, [r2, #0]
 8011708:	693b      	ldr	r3, [r7, #16]
 801170a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801170c:	4613      	mov	r3, r2
 801170e:	009b      	lsls	r3, r3, #2
 8011710:	4413      	add	r3, r2
 8011712:	009b      	lsls	r3, r3, #2
 8011714:	4a13      	ldr	r2, [pc, #76]	; (8011764 <xTaskRemoveFromEventList+0xb8>)
 8011716:	441a      	add	r2, r3
 8011718:	693b      	ldr	r3, [r7, #16]
 801171a:	3304      	adds	r3, #4
 801171c:	4619      	mov	r1, r3
 801171e:	4610      	mov	r0, r2
 8011720:	f7fe fc43 	bl	800ffaa <vListInsertEnd>
 8011724:	e005      	b.n	8011732 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011726:	693b      	ldr	r3, [r7, #16]
 8011728:	3318      	adds	r3, #24
 801172a:	4619      	mov	r1, r3
 801172c:	480e      	ldr	r0, [pc, #56]	; (8011768 <xTaskRemoveFromEventList+0xbc>)
 801172e:	f7fe fc3c 	bl	800ffaa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011732:	693b      	ldr	r3, [r7, #16]
 8011734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011736:	4b0d      	ldr	r3, [pc, #52]	; (801176c <xTaskRemoveFromEventList+0xc0>)
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801173c:	429a      	cmp	r2, r3
 801173e:	d905      	bls.n	801174c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011740:	2301      	movs	r3, #1
 8011742:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011744:	4b0a      	ldr	r3, [pc, #40]	; (8011770 <xTaskRemoveFromEventList+0xc4>)
 8011746:	2201      	movs	r2, #1
 8011748:	601a      	str	r2, [r3, #0]
 801174a:	e001      	b.n	8011750 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801174c:	2300      	movs	r3, #0
 801174e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8011750:	697b      	ldr	r3, [r7, #20]
}
 8011752:	4618      	mov	r0, r3
 8011754:	3718      	adds	r7, #24
 8011756:	46bd      	mov	sp, r7
 8011758:	bd80      	pop	{r7, pc}
 801175a:	bf00      	nop
 801175c:	20000210 	.word	0x20000210
 8011760:	200001f0 	.word	0x200001f0
 8011764:	200000ec 	.word	0x200000ec
 8011768:	200001a8 	.word	0x200001a8
 801176c:	200000e8 	.word	0x200000e8
 8011770:	200001fc 	.word	0x200001fc

08011774 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011774:	b480      	push	{r7}
 8011776:	b083      	sub	sp, #12
 8011778:	af00      	add	r7, sp, #0
 801177a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801177c:	4b06      	ldr	r3, [pc, #24]	; (8011798 <vTaskInternalSetTimeOutState+0x24>)
 801177e:	681a      	ldr	r2, [r3, #0]
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011784:	4b05      	ldr	r3, [pc, #20]	; (801179c <vTaskInternalSetTimeOutState+0x28>)
 8011786:	681a      	ldr	r2, [r3, #0]
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	605a      	str	r2, [r3, #4]
}
 801178c:	bf00      	nop
 801178e:	370c      	adds	r7, #12
 8011790:	46bd      	mov	sp, r7
 8011792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011796:	4770      	bx	lr
 8011798:	20000200 	.word	0x20000200
 801179c:	200001ec 	.word	0x200001ec

080117a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b088      	sub	sp, #32
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
 80117a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d10b      	bne.n	80117c8 <xTaskCheckForTimeOut+0x28>
 80117b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117b4:	b672      	cpsid	i
 80117b6:	f383 8811 	msr	BASEPRI, r3
 80117ba:	f3bf 8f6f 	isb	sy
 80117be:	f3bf 8f4f 	dsb	sy
 80117c2:	b662      	cpsie	i
 80117c4:	613b      	str	r3, [r7, #16]
 80117c6:	e7fe      	b.n	80117c6 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 80117c8:	683b      	ldr	r3, [r7, #0]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d10b      	bne.n	80117e6 <xTaskCheckForTimeOut+0x46>
 80117ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117d2:	b672      	cpsid	i
 80117d4:	f383 8811 	msr	BASEPRI, r3
 80117d8:	f3bf 8f6f 	isb	sy
 80117dc:	f3bf 8f4f 	dsb	sy
 80117e0:	b662      	cpsie	i
 80117e2:	60fb      	str	r3, [r7, #12]
 80117e4:	e7fe      	b.n	80117e4 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 80117e6:	f000 fc57 	bl	8012098 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80117ea:	4b1d      	ldr	r3, [pc, #116]	; (8011860 <xTaskCheckForTimeOut+0xc0>)
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	685b      	ldr	r3, [r3, #4]
 80117f4:	69ba      	ldr	r2, [r7, #24]
 80117f6:	1ad3      	subs	r3, r2, r3
 80117f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80117fa:	683b      	ldr	r3, [r7, #0]
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011802:	d102      	bne.n	801180a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011804:	2300      	movs	r3, #0
 8011806:	61fb      	str	r3, [r7, #28]
 8011808:	e023      	b.n	8011852 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	681a      	ldr	r2, [r3, #0]
 801180e:	4b15      	ldr	r3, [pc, #84]	; (8011864 <xTaskCheckForTimeOut+0xc4>)
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	429a      	cmp	r2, r3
 8011814:	d007      	beq.n	8011826 <xTaskCheckForTimeOut+0x86>
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	685b      	ldr	r3, [r3, #4]
 801181a:	69ba      	ldr	r2, [r7, #24]
 801181c:	429a      	cmp	r2, r3
 801181e:	d302      	bcc.n	8011826 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011820:	2301      	movs	r3, #1
 8011822:	61fb      	str	r3, [r7, #28]
 8011824:	e015      	b.n	8011852 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011826:	683b      	ldr	r3, [r7, #0]
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	697a      	ldr	r2, [r7, #20]
 801182c:	429a      	cmp	r2, r3
 801182e:	d20b      	bcs.n	8011848 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011830:	683b      	ldr	r3, [r7, #0]
 8011832:	681a      	ldr	r2, [r3, #0]
 8011834:	697b      	ldr	r3, [r7, #20]
 8011836:	1ad2      	subs	r2, r2, r3
 8011838:	683b      	ldr	r3, [r7, #0]
 801183a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801183c:	6878      	ldr	r0, [r7, #4]
 801183e:	f7ff ff99 	bl	8011774 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011842:	2300      	movs	r3, #0
 8011844:	61fb      	str	r3, [r7, #28]
 8011846:	e004      	b.n	8011852 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8011848:	683b      	ldr	r3, [r7, #0]
 801184a:	2200      	movs	r2, #0
 801184c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801184e:	2301      	movs	r3, #1
 8011850:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011852:	f000 fc53 	bl	80120fc <vPortExitCritical>

	return xReturn;
 8011856:	69fb      	ldr	r3, [r7, #28]
}
 8011858:	4618      	mov	r0, r3
 801185a:	3720      	adds	r7, #32
 801185c:	46bd      	mov	sp, r7
 801185e:	bd80      	pop	{r7, pc}
 8011860:	200001ec 	.word	0x200001ec
 8011864:	20000200 	.word	0x20000200

08011868 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011868:	b480      	push	{r7}
 801186a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801186c:	4b03      	ldr	r3, [pc, #12]	; (801187c <vTaskMissedYield+0x14>)
 801186e:	2201      	movs	r2, #1
 8011870:	601a      	str	r2, [r3, #0]
}
 8011872:	bf00      	nop
 8011874:	46bd      	mov	sp, r7
 8011876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187a:	4770      	bx	lr
 801187c:	200001fc 	.word	0x200001fc

08011880 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011880:	b580      	push	{r7, lr}
 8011882:	b082      	sub	sp, #8
 8011884:	af00      	add	r7, sp, #0
 8011886:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011888:	f000 f854 	bl	8011934 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801188c:	4b07      	ldr	r3, [pc, #28]	; (80118ac <prvIdleTask+0x2c>)
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	2b01      	cmp	r3, #1
 8011892:	d907      	bls.n	80118a4 <prvIdleTask+0x24>
			{
				taskYIELD();
 8011894:	4b06      	ldr	r3, [pc, #24]	; (80118b0 <prvIdleTask+0x30>)
 8011896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801189a:	601a      	str	r2, [r3, #0]
 801189c:	f3bf 8f4f 	dsb	sy
 80118a0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80118a4:	f000 ffde 	bl	8012864 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80118a8:	e7ee      	b.n	8011888 <prvIdleTask+0x8>
 80118aa:	bf00      	nop
 80118ac:	200000ec 	.word	0x200000ec
 80118b0:	e000ed04 	.word	0xe000ed04

080118b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b082      	sub	sp, #8
 80118b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80118ba:	2300      	movs	r3, #0
 80118bc:	607b      	str	r3, [r7, #4]
 80118be:	e00c      	b.n	80118da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80118c0:	687a      	ldr	r2, [r7, #4]
 80118c2:	4613      	mov	r3, r2
 80118c4:	009b      	lsls	r3, r3, #2
 80118c6:	4413      	add	r3, r2
 80118c8:	009b      	lsls	r3, r3, #2
 80118ca:	4a12      	ldr	r2, [pc, #72]	; (8011914 <prvInitialiseTaskLists+0x60>)
 80118cc:	4413      	add	r3, r2
 80118ce:	4618      	mov	r0, r3
 80118d0:	f7fe fb3e 	bl	800ff50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	3301      	adds	r3, #1
 80118d8:	607b      	str	r3, [r7, #4]
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	2b06      	cmp	r3, #6
 80118de:	d9ef      	bls.n	80118c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80118e0:	480d      	ldr	r0, [pc, #52]	; (8011918 <prvInitialiseTaskLists+0x64>)
 80118e2:	f7fe fb35 	bl	800ff50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80118e6:	480d      	ldr	r0, [pc, #52]	; (801191c <prvInitialiseTaskLists+0x68>)
 80118e8:	f7fe fb32 	bl	800ff50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80118ec:	480c      	ldr	r0, [pc, #48]	; (8011920 <prvInitialiseTaskLists+0x6c>)
 80118ee:	f7fe fb2f 	bl	800ff50 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80118f2:	480c      	ldr	r0, [pc, #48]	; (8011924 <prvInitialiseTaskLists+0x70>)
 80118f4:	f7fe fb2c 	bl	800ff50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80118f8:	480b      	ldr	r0, [pc, #44]	; (8011928 <prvInitialiseTaskLists+0x74>)
 80118fa:	f7fe fb29 	bl	800ff50 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80118fe:	4b0b      	ldr	r3, [pc, #44]	; (801192c <prvInitialiseTaskLists+0x78>)
 8011900:	4a05      	ldr	r2, [pc, #20]	; (8011918 <prvInitialiseTaskLists+0x64>)
 8011902:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011904:	4b0a      	ldr	r3, [pc, #40]	; (8011930 <prvInitialiseTaskLists+0x7c>)
 8011906:	4a05      	ldr	r2, [pc, #20]	; (801191c <prvInitialiseTaskLists+0x68>)
 8011908:	601a      	str	r2, [r3, #0]
}
 801190a:	bf00      	nop
 801190c:	3708      	adds	r7, #8
 801190e:	46bd      	mov	sp, r7
 8011910:	bd80      	pop	{r7, pc}
 8011912:	bf00      	nop
 8011914:	200000ec 	.word	0x200000ec
 8011918:	20000178 	.word	0x20000178
 801191c:	2000018c 	.word	0x2000018c
 8011920:	200001a8 	.word	0x200001a8
 8011924:	200001bc 	.word	0x200001bc
 8011928:	200001d4 	.word	0x200001d4
 801192c:	200001a0 	.word	0x200001a0
 8011930:	200001a4 	.word	0x200001a4

08011934 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011934:	b580      	push	{r7, lr}
 8011936:	b082      	sub	sp, #8
 8011938:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801193a:	e019      	b.n	8011970 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801193c:	f000 fbac 	bl	8012098 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8011940:	4b0f      	ldr	r3, [pc, #60]	; (8011980 <prvCheckTasksWaitingTermination+0x4c>)
 8011942:	68db      	ldr	r3, [r3, #12]
 8011944:	68db      	ldr	r3, [r3, #12]
 8011946:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	3304      	adds	r3, #4
 801194c:	4618      	mov	r0, r3
 801194e:	f7fe fb89 	bl	8010064 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011952:	4b0c      	ldr	r3, [pc, #48]	; (8011984 <prvCheckTasksWaitingTermination+0x50>)
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	3b01      	subs	r3, #1
 8011958:	4a0a      	ldr	r2, [pc, #40]	; (8011984 <prvCheckTasksWaitingTermination+0x50>)
 801195a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801195c:	4b0a      	ldr	r3, [pc, #40]	; (8011988 <prvCheckTasksWaitingTermination+0x54>)
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	3b01      	subs	r3, #1
 8011962:	4a09      	ldr	r2, [pc, #36]	; (8011988 <prvCheckTasksWaitingTermination+0x54>)
 8011964:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011966:	f000 fbc9 	bl	80120fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801196a:	6878      	ldr	r0, [r7, #4]
 801196c:	f000 f80e 	bl	801198c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011970:	4b05      	ldr	r3, [pc, #20]	; (8011988 <prvCheckTasksWaitingTermination+0x54>)
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d1e1      	bne.n	801193c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011978:	bf00      	nop
 801197a:	3708      	adds	r7, #8
 801197c:	46bd      	mov	sp, r7
 801197e:	bd80      	pop	{r7, pc}
 8011980:	200001bc 	.word	0x200001bc
 8011984:	200001e8 	.word	0x200001e8
 8011988:	200001d0 	.word	0x200001d0

0801198c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801198c:	b580      	push	{r7, lr}
 801198e:	b082      	sub	sp, #8
 8011990:	af00      	add	r7, sp, #0
 8011992:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011998:	4618      	mov	r0, r3
 801199a:	f000 fd6b 	bl	8012474 <vPortFree>
			vPortFree( pxTCB );
 801199e:	6878      	ldr	r0, [r7, #4]
 80119a0:	f000 fd68 	bl	8012474 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80119a4:	bf00      	nop
 80119a6:	3708      	adds	r7, #8
 80119a8:	46bd      	mov	sp, r7
 80119aa:	bd80      	pop	{r7, pc}

080119ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80119ac:	b480      	push	{r7}
 80119ae:	b083      	sub	sp, #12
 80119b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80119b2:	4b0f      	ldr	r3, [pc, #60]	; (80119f0 <prvResetNextTaskUnblockTime+0x44>)
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d101      	bne.n	80119c0 <prvResetNextTaskUnblockTime+0x14>
 80119bc:	2301      	movs	r3, #1
 80119be:	e000      	b.n	80119c2 <prvResetNextTaskUnblockTime+0x16>
 80119c0:	2300      	movs	r3, #0
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d004      	beq.n	80119d0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80119c6:	4b0b      	ldr	r3, [pc, #44]	; (80119f4 <prvResetNextTaskUnblockTime+0x48>)
 80119c8:	f04f 32ff 	mov.w	r2, #4294967295
 80119cc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80119ce:	e008      	b.n	80119e2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80119d0:	4b07      	ldr	r3, [pc, #28]	; (80119f0 <prvResetNextTaskUnblockTime+0x44>)
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	68db      	ldr	r3, [r3, #12]
 80119d6:	68db      	ldr	r3, [r3, #12]
 80119d8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	685b      	ldr	r3, [r3, #4]
 80119de:	4a05      	ldr	r2, [pc, #20]	; (80119f4 <prvResetNextTaskUnblockTime+0x48>)
 80119e0:	6013      	str	r3, [r2, #0]
}
 80119e2:	bf00      	nop
 80119e4:	370c      	adds	r7, #12
 80119e6:	46bd      	mov	sp, r7
 80119e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ec:	4770      	bx	lr
 80119ee:	bf00      	nop
 80119f0:	200001a0 	.word	0x200001a0
 80119f4:	20000208 	.word	0x20000208

080119f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80119f8:	b480      	push	{r7}
 80119fa:	b083      	sub	sp, #12
 80119fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80119fe:	4b0b      	ldr	r3, [pc, #44]	; (8011a2c <xTaskGetSchedulerState+0x34>)
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d102      	bne.n	8011a0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011a06:	2301      	movs	r3, #1
 8011a08:	607b      	str	r3, [r7, #4]
 8011a0a:	e008      	b.n	8011a1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011a0c:	4b08      	ldr	r3, [pc, #32]	; (8011a30 <xTaskGetSchedulerState+0x38>)
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d102      	bne.n	8011a1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011a14:	2302      	movs	r3, #2
 8011a16:	607b      	str	r3, [r7, #4]
 8011a18:	e001      	b.n	8011a1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011a1e:	687b      	ldr	r3, [r7, #4]
	}
 8011a20:	4618      	mov	r0, r3
 8011a22:	370c      	adds	r7, #12
 8011a24:	46bd      	mov	sp, r7
 8011a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a2a:	4770      	bx	lr
 8011a2c:	200001f4 	.word	0x200001f4
 8011a30:	20000210 	.word	0x20000210

08011a34 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011a34:	b580      	push	{r7, lr}
 8011a36:	b084      	sub	sp, #16
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011a40:	2300      	movs	r3, #0
 8011a42:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d06e      	beq.n	8011b28 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011a4a:	68bb      	ldr	r3, [r7, #8]
 8011a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a4e:	4b39      	ldr	r3, [pc, #228]	; (8011b34 <xTaskPriorityInherit+0x100>)
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a54:	429a      	cmp	r2, r3
 8011a56:	d25e      	bcs.n	8011b16 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011a58:	68bb      	ldr	r3, [r7, #8]
 8011a5a:	699b      	ldr	r3, [r3, #24]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	db06      	blt.n	8011a6e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a60:	4b34      	ldr	r3, [pc, #208]	; (8011b34 <xTaskPriorityInherit+0x100>)
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a66:	f1c3 0207 	rsb	r2, r3, #7
 8011a6a:	68bb      	ldr	r3, [r7, #8]
 8011a6c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011a6e:	68bb      	ldr	r3, [r7, #8]
 8011a70:	6959      	ldr	r1, [r3, #20]
 8011a72:	68bb      	ldr	r3, [r7, #8]
 8011a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a76:	4613      	mov	r3, r2
 8011a78:	009b      	lsls	r3, r3, #2
 8011a7a:	4413      	add	r3, r2
 8011a7c:	009b      	lsls	r3, r3, #2
 8011a7e:	4a2e      	ldr	r2, [pc, #184]	; (8011b38 <xTaskPriorityInherit+0x104>)
 8011a80:	4413      	add	r3, r2
 8011a82:	4299      	cmp	r1, r3
 8011a84:	d101      	bne.n	8011a8a <xTaskPriorityInherit+0x56>
 8011a86:	2301      	movs	r3, #1
 8011a88:	e000      	b.n	8011a8c <xTaskPriorityInherit+0x58>
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d03a      	beq.n	8011b06 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011a90:	68bb      	ldr	r3, [r7, #8]
 8011a92:	3304      	adds	r3, #4
 8011a94:	4618      	mov	r0, r3
 8011a96:	f7fe fae5 	bl	8010064 <uxListRemove>
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d115      	bne.n	8011acc <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8011aa0:	68bb      	ldr	r3, [r7, #8]
 8011aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011aa4:	4924      	ldr	r1, [pc, #144]	; (8011b38 <xTaskPriorityInherit+0x104>)
 8011aa6:	4613      	mov	r3, r2
 8011aa8:	009b      	lsls	r3, r3, #2
 8011aaa:	4413      	add	r3, r2
 8011aac:	009b      	lsls	r3, r3, #2
 8011aae:	440b      	add	r3, r1
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d10a      	bne.n	8011acc <xTaskPriorityInherit+0x98>
 8011ab6:	68bb      	ldr	r3, [r7, #8]
 8011ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011aba:	2201      	movs	r2, #1
 8011abc:	fa02 f303 	lsl.w	r3, r2, r3
 8011ac0:	43da      	mvns	r2, r3
 8011ac2:	4b1e      	ldr	r3, [pc, #120]	; (8011b3c <xTaskPriorityInherit+0x108>)
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	4013      	ands	r3, r2
 8011ac8:	4a1c      	ldr	r2, [pc, #112]	; (8011b3c <xTaskPriorityInherit+0x108>)
 8011aca:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011acc:	4b19      	ldr	r3, [pc, #100]	; (8011b34 <xTaskPriorityInherit+0x100>)
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ad2:	68bb      	ldr	r3, [r7, #8]
 8011ad4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011ad6:	68bb      	ldr	r3, [r7, #8]
 8011ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ada:	2201      	movs	r2, #1
 8011adc:	409a      	lsls	r2, r3
 8011ade:	4b17      	ldr	r3, [pc, #92]	; (8011b3c <xTaskPriorityInherit+0x108>)
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	4313      	orrs	r3, r2
 8011ae4:	4a15      	ldr	r2, [pc, #84]	; (8011b3c <xTaskPriorityInherit+0x108>)
 8011ae6:	6013      	str	r3, [r2, #0]
 8011ae8:	68bb      	ldr	r3, [r7, #8]
 8011aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011aec:	4613      	mov	r3, r2
 8011aee:	009b      	lsls	r3, r3, #2
 8011af0:	4413      	add	r3, r2
 8011af2:	009b      	lsls	r3, r3, #2
 8011af4:	4a10      	ldr	r2, [pc, #64]	; (8011b38 <xTaskPriorityInherit+0x104>)
 8011af6:	441a      	add	r2, r3
 8011af8:	68bb      	ldr	r3, [r7, #8]
 8011afa:	3304      	adds	r3, #4
 8011afc:	4619      	mov	r1, r3
 8011afe:	4610      	mov	r0, r2
 8011b00:	f7fe fa53 	bl	800ffaa <vListInsertEnd>
 8011b04:	e004      	b.n	8011b10 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011b06:	4b0b      	ldr	r3, [pc, #44]	; (8011b34 <xTaskPriorityInherit+0x100>)
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b0c:	68bb      	ldr	r3, [r7, #8]
 8011b0e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011b10:	2301      	movs	r3, #1
 8011b12:	60fb      	str	r3, [r7, #12]
 8011b14:	e008      	b.n	8011b28 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011b16:	68bb      	ldr	r3, [r7, #8]
 8011b18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011b1a:	4b06      	ldr	r3, [pc, #24]	; (8011b34 <xTaskPriorityInherit+0x100>)
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b20:	429a      	cmp	r2, r3
 8011b22:	d201      	bcs.n	8011b28 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011b24:	2301      	movs	r3, #1
 8011b26:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011b28:	68fb      	ldr	r3, [r7, #12]
	}
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	3710      	adds	r7, #16
 8011b2e:	46bd      	mov	sp, r7
 8011b30:	bd80      	pop	{r7, pc}
 8011b32:	bf00      	nop
 8011b34:	200000e8 	.word	0x200000e8
 8011b38:	200000ec 	.word	0x200000ec
 8011b3c:	200001f0 	.word	0x200001f0

08011b40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011b40:	b580      	push	{r7, lr}
 8011b42:	b086      	sub	sp, #24
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011b4c:	2300      	movs	r3, #0
 8011b4e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d070      	beq.n	8011c38 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011b56:	4b3b      	ldr	r3, [pc, #236]	; (8011c44 <xTaskPriorityDisinherit+0x104>)
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	693a      	ldr	r2, [r7, #16]
 8011b5c:	429a      	cmp	r2, r3
 8011b5e:	d00b      	beq.n	8011b78 <xTaskPriorityDisinherit+0x38>
 8011b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b64:	b672      	cpsid	i
 8011b66:	f383 8811 	msr	BASEPRI, r3
 8011b6a:	f3bf 8f6f 	isb	sy
 8011b6e:	f3bf 8f4f 	dsb	sy
 8011b72:	b662      	cpsie	i
 8011b74:	60fb      	str	r3, [r7, #12]
 8011b76:	e7fe      	b.n	8011b76 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8011b78:	693b      	ldr	r3, [r7, #16]
 8011b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d10b      	bne.n	8011b98 <xTaskPriorityDisinherit+0x58>
 8011b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b84:	b672      	cpsid	i
 8011b86:	f383 8811 	msr	BASEPRI, r3
 8011b8a:	f3bf 8f6f 	isb	sy
 8011b8e:	f3bf 8f4f 	dsb	sy
 8011b92:	b662      	cpsie	i
 8011b94:	60bb      	str	r3, [r7, #8]
 8011b96:	e7fe      	b.n	8011b96 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8011b98:	693b      	ldr	r3, [r7, #16]
 8011b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011b9c:	1e5a      	subs	r2, r3, #1
 8011b9e:	693b      	ldr	r3, [r7, #16]
 8011ba0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011ba2:	693b      	ldr	r3, [r7, #16]
 8011ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ba6:	693b      	ldr	r3, [r7, #16]
 8011ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011baa:	429a      	cmp	r2, r3
 8011bac:	d044      	beq.n	8011c38 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011bae:	693b      	ldr	r3, [r7, #16]
 8011bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d140      	bne.n	8011c38 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011bb6:	693b      	ldr	r3, [r7, #16]
 8011bb8:	3304      	adds	r3, #4
 8011bba:	4618      	mov	r0, r3
 8011bbc:	f7fe fa52 	bl	8010064 <uxListRemove>
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d115      	bne.n	8011bf2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011bc6:	693b      	ldr	r3, [r7, #16]
 8011bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bca:	491f      	ldr	r1, [pc, #124]	; (8011c48 <xTaskPriorityDisinherit+0x108>)
 8011bcc:	4613      	mov	r3, r2
 8011bce:	009b      	lsls	r3, r3, #2
 8011bd0:	4413      	add	r3, r2
 8011bd2:	009b      	lsls	r3, r3, #2
 8011bd4:	440b      	add	r3, r1
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d10a      	bne.n	8011bf2 <xTaskPriorityDisinherit+0xb2>
 8011bdc:	693b      	ldr	r3, [r7, #16]
 8011bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011be0:	2201      	movs	r2, #1
 8011be2:	fa02 f303 	lsl.w	r3, r2, r3
 8011be6:	43da      	mvns	r2, r3
 8011be8:	4b18      	ldr	r3, [pc, #96]	; (8011c4c <xTaskPriorityDisinherit+0x10c>)
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	4013      	ands	r3, r2
 8011bee:	4a17      	ldr	r2, [pc, #92]	; (8011c4c <xTaskPriorityDisinherit+0x10c>)
 8011bf0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011bf2:	693b      	ldr	r3, [r7, #16]
 8011bf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011bf6:	693b      	ldr	r3, [r7, #16]
 8011bf8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011bfa:	693b      	ldr	r3, [r7, #16]
 8011bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bfe:	f1c3 0207 	rsb	r2, r3, #7
 8011c02:	693b      	ldr	r3, [r7, #16]
 8011c04:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011c06:	693b      	ldr	r3, [r7, #16]
 8011c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c0a:	2201      	movs	r2, #1
 8011c0c:	409a      	lsls	r2, r3
 8011c0e:	4b0f      	ldr	r3, [pc, #60]	; (8011c4c <xTaskPriorityDisinherit+0x10c>)
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	4313      	orrs	r3, r2
 8011c14:	4a0d      	ldr	r2, [pc, #52]	; (8011c4c <xTaskPriorityDisinherit+0x10c>)
 8011c16:	6013      	str	r3, [r2, #0]
 8011c18:	693b      	ldr	r3, [r7, #16]
 8011c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c1c:	4613      	mov	r3, r2
 8011c1e:	009b      	lsls	r3, r3, #2
 8011c20:	4413      	add	r3, r2
 8011c22:	009b      	lsls	r3, r3, #2
 8011c24:	4a08      	ldr	r2, [pc, #32]	; (8011c48 <xTaskPriorityDisinherit+0x108>)
 8011c26:	441a      	add	r2, r3
 8011c28:	693b      	ldr	r3, [r7, #16]
 8011c2a:	3304      	adds	r3, #4
 8011c2c:	4619      	mov	r1, r3
 8011c2e:	4610      	mov	r0, r2
 8011c30:	f7fe f9bb 	bl	800ffaa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011c34:	2301      	movs	r3, #1
 8011c36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011c38:	697b      	ldr	r3, [r7, #20]
	}
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	3718      	adds	r7, #24
 8011c3e:	46bd      	mov	sp, r7
 8011c40:	bd80      	pop	{r7, pc}
 8011c42:	bf00      	nop
 8011c44:	200000e8 	.word	0x200000e8
 8011c48:	200000ec 	.word	0x200000ec
 8011c4c:	200001f0 	.word	0x200001f0

08011c50 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011c50:	b580      	push	{r7, lr}
 8011c52:	b088      	sub	sp, #32
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
 8011c58:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011c5e:	2301      	movs	r3, #1
 8011c60:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	f000 808a 	beq.w	8011d7e <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011c6a:	69bb      	ldr	r3, [r7, #24]
 8011c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d10b      	bne.n	8011c8a <vTaskPriorityDisinheritAfterTimeout+0x3a>
 8011c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c76:	b672      	cpsid	i
 8011c78:	f383 8811 	msr	BASEPRI, r3
 8011c7c:	f3bf 8f6f 	isb	sy
 8011c80:	f3bf 8f4f 	dsb	sy
 8011c84:	b662      	cpsie	i
 8011c86:	60fb      	str	r3, [r7, #12]
 8011c88:	e7fe      	b.n	8011c88 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011c8a:	69bb      	ldr	r3, [r7, #24]
 8011c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c8e:	683a      	ldr	r2, [r7, #0]
 8011c90:	429a      	cmp	r2, r3
 8011c92:	d902      	bls.n	8011c9a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011c94:	683b      	ldr	r3, [r7, #0]
 8011c96:	61fb      	str	r3, [r7, #28]
 8011c98:	e002      	b.n	8011ca0 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011c9a:	69bb      	ldr	r3, [r7, #24]
 8011c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c9e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011ca0:	69bb      	ldr	r3, [r7, #24]
 8011ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ca4:	69fa      	ldr	r2, [r7, #28]
 8011ca6:	429a      	cmp	r2, r3
 8011ca8:	d069      	beq.n	8011d7e <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011caa:	69bb      	ldr	r3, [r7, #24]
 8011cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011cae:	697a      	ldr	r2, [r7, #20]
 8011cb0:	429a      	cmp	r2, r3
 8011cb2:	d164      	bne.n	8011d7e <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011cb4:	4b34      	ldr	r3, [pc, #208]	; (8011d88 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	69ba      	ldr	r2, [r7, #24]
 8011cba:	429a      	cmp	r2, r3
 8011cbc:	d10b      	bne.n	8011cd6 <vTaskPriorityDisinheritAfterTimeout+0x86>
 8011cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cc2:	b672      	cpsid	i
 8011cc4:	f383 8811 	msr	BASEPRI, r3
 8011cc8:	f3bf 8f6f 	isb	sy
 8011ccc:	f3bf 8f4f 	dsb	sy
 8011cd0:	b662      	cpsie	i
 8011cd2:	60bb      	str	r3, [r7, #8]
 8011cd4:	e7fe      	b.n	8011cd4 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011cd6:	69bb      	ldr	r3, [r7, #24]
 8011cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cda:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011cdc:	69bb      	ldr	r3, [r7, #24]
 8011cde:	69fa      	ldr	r2, [r7, #28]
 8011ce0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011ce2:	69bb      	ldr	r3, [r7, #24]
 8011ce4:	699b      	ldr	r3, [r3, #24]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	db04      	blt.n	8011cf4 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011cea:	69fb      	ldr	r3, [r7, #28]
 8011cec:	f1c3 0207 	rsb	r2, r3, #7
 8011cf0:	69bb      	ldr	r3, [r7, #24]
 8011cf2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011cf4:	69bb      	ldr	r3, [r7, #24]
 8011cf6:	6959      	ldr	r1, [r3, #20]
 8011cf8:	693a      	ldr	r2, [r7, #16]
 8011cfa:	4613      	mov	r3, r2
 8011cfc:	009b      	lsls	r3, r3, #2
 8011cfe:	4413      	add	r3, r2
 8011d00:	009b      	lsls	r3, r3, #2
 8011d02:	4a22      	ldr	r2, [pc, #136]	; (8011d8c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8011d04:	4413      	add	r3, r2
 8011d06:	4299      	cmp	r1, r3
 8011d08:	d101      	bne.n	8011d0e <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8011d0a:	2301      	movs	r3, #1
 8011d0c:	e000      	b.n	8011d10 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 8011d0e:	2300      	movs	r3, #0
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d034      	beq.n	8011d7e <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011d14:	69bb      	ldr	r3, [r7, #24]
 8011d16:	3304      	adds	r3, #4
 8011d18:	4618      	mov	r0, r3
 8011d1a:	f7fe f9a3 	bl	8010064 <uxListRemove>
 8011d1e:	4603      	mov	r3, r0
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d115      	bne.n	8011d50 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011d24:	69bb      	ldr	r3, [r7, #24]
 8011d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d28:	4918      	ldr	r1, [pc, #96]	; (8011d8c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8011d2a:	4613      	mov	r3, r2
 8011d2c:	009b      	lsls	r3, r3, #2
 8011d2e:	4413      	add	r3, r2
 8011d30:	009b      	lsls	r3, r3, #2
 8011d32:	440b      	add	r3, r1
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d10a      	bne.n	8011d50 <vTaskPriorityDisinheritAfterTimeout+0x100>
 8011d3a:	69bb      	ldr	r3, [r7, #24]
 8011d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d3e:	2201      	movs	r2, #1
 8011d40:	fa02 f303 	lsl.w	r3, r2, r3
 8011d44:	43da      	mvns	r2, r3
 8011d46:	4b12      	ldr	r3, [pc, #72]	; (8011d90 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	4013      	ands	r3, r2
 8011d4c:	4a10      	ldr	r2, [pc, #64]	; (8011d90 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8011d4e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011d50:	69bb      	ldr	r3, [r7, #24]
 8011d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d54:	2201      	movs	r2, #1
 8011d56:	409a      	lsls	r2, r3
 8011d58:	4b0d      	ldr	r3, [pc, #52]	; (8011d90 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	4313      	orrs	r3, r2
 8011d5e:	4a0c      	ldr	r2, [pc, #48]	; (8011d90 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8011d60:	6013      	str	r3, [r2, #0]
 8011d62:	69bb      	ldr	r3, [r7, #24]
 8011d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d66:	4613      	mov	r3, r2
 8011d68:	009b      	lsls	r3, r3, #2
 8011d6a:	4413      	add	r3, r2
 8011d6c:	009b      	lsls	r3, r3, #2
 8011d6e:	4a07      	ldr	r2, [pc, #28]	; (8011d8c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8011d70:	441a      	add	r2, r3
 8011d72:	69bb      	ldr	r3, [r7, #24]
 8011d74:	3304      	adds	r3, #4
 8011d76:	4619      	mov	r1, r3
 8011d78:	4610      	mov	r0, r2
 8011d7a:	f7fe f916 	bl	800ffaa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011d7e:	bf00      	nop
 8011d80:	3720      	adds	r7, #32
 8011d82:	46bd      	mov	sp, r7
 8011d84:	bd80      	pop	{r7, pc}
 8011d86:	bf00      	nop
 8011d88:	200000e8 	.word	0x200000e8
 8011d8c:	200000ec 	.word	0x200000ec
 8011d90:	200001f0 	.word	0x200001f0

08011d94 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8011d94:	b480      	push	{r7}
 8011d96:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011d98:	4b07      	ldr	r3, [pc, #28]	; (8011db8 <pvTaskIncrementMutexHeldCount+0x24>)
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d004      	beq.n	8011daa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011da0:	4b05      	ldr	r3, [pc, #20]	; (8011db8 <pvTaskIncrementMutexHeldCount+0x24>)
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011da6:	3201      	adds	r2, #1
 8011da8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8011daa:	4b03      	ldr	r3, [pc, #12]	; (8011db8 <pvTaskIncrementMutexHeldCount+0x24>)
 8011dac:	681b      	ldr	r3, [r3, #0]
	}
 8011dae:	4618      	mov	r0, r3
 8011db0:	46bd      	mov	sp, r7
 8011db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db6:	4770      	bx	lr
 8011db8:	200000e8 	.word	0x200000e8

08011dbc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	b084      	sub	sp, #16
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	6078      	str	r0, [r7, #4]
 8011dc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011dc6:	4b29      	ldr	r3, [pc, #164]	; (8011e6c <prvAddCurrentTaskToDelayedList+0xb0>)
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011dcc:	4b28      	ldr	r3, [pc, #160]	; (8011e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	3304      	adds	r3, #4
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	f7fe f946 	bl	8010064 <uxListRemove>
 8011dd8:	4603      	mov	r3, r0
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d10b      	bne.n	8011df6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8011dde:	4b24      	ldr	r3, [pc, #144]	; (8011e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011de4:	2201      	movs	r2, #1
 8011de6:	fa02 f303 	lsl.w	r3, r2, r3
 8011dea:	43da      	mvns	r2, r3
 8011dec:	4b21      	ldr	r3, [pc, #132]	; (8011e74 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	4013      	ands	r3, r2
 8011df2:	4a20      	ldr	r2, [pc, #128]	; (8011e74 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011df4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dfc:	d10a      	bne.n	8011e14 <prvAddCurrentTaskToDelayedList+0x58>
 8011dfe:	683b      	ldr	r3, [r7, #0]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d007      	beq.n	8011e14 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011e04:	4b1a      	ldr	r3, [pc, #104]	; (8011e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	3304      	adds	r3, #4
 8011e0a:	4619      	mov	r1, r3
 8011e0c:	481a      	ldr	r0, [pc, #104]	; (8011e78 <prvAddCurrentTaskToDelayedList+0xbc>)
 8011e0e:	f7fe f8cc 	bl	800ffaa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011e12:	e026      	b.n	8011e62 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011e14:	68fa      	ldr	r2, [r7, #12]
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	4413      	add	r3, r2
 8011e1a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011e1c:	4b14      	ldr	r3, [pc, #80]	; (8011e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	68ba      	ldr	r2, [r7, #8]
 8011e22:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011e24:	68ba      	ldr	r2, [r7, #8]
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	429a      	cmp	r2, r3
 8011e2a:	d209      	bcs.n	8011e40 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011e2c:	4b13      	ldr	r3, [pc, #76]	; (8011e7c <prvAddCurrentTaskToDelayedList+0xc0>)
 8011e2e:	681a      	ldr	r2, [r3, #0]
 8011e30:	4b0f      	ldr	r3, [pc, #60]	; (8011e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	3304      	adds	r3, #4
 8011e36:	4619      	mov	r1, r3
 8011e38:	4610      	mov	r0, r2
 8011e3a:	f7fe f8da 	bl	800fff2 <vListInsert>
}
 8011e3e:	e010      	b.n	8011e62 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011e40:	4b0f      	ldr	r3, [pc, #60]	; (8011e80 <prvAddCurrentTaskToDelayedList+0xc4>)
 8011e42:	681a      	ldr	r2, [r3, #0]
 8011e44:	4b0a      	ldr	r3, [pc, #40]	; (8011e70 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	3304      	adds	r3, #4
 8011e4a:	4619      	mov	r1, r3
 8011e4c:	4610      	mov	r0, r2
 8011e4e:	f7fe f8d0 	bl	800fff2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011e52:	4b0c      	ldr	r3, [pc, #48]	; (8011e84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	68ba      	ldr	r2, [r7, #8]
 8011e58:	429a      	cmp	r2, r3
 8011e5a:	d202      	bcs.n	8011e62 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011e5c:	4a09      	ldr	r2, [pc, #36]	; (8011e84 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011e5e:	68bb      	ldr	r3, [r7, #8]
 8011e60:	6013      	str	r3, [r2, #0]
}
 8011e62:	bf00      	nop
 8011e64:	3710      	adds	r7, #16
 8011e66:	46bd      	mov	sp, r7
 8011e68:	bd80      	pop	{r7, pc}
 8011e6a:	bf00      	nop
 8011e6c:	200001ec 	.word	0x200001ec
 8011e70:	200000e8 	.word	0x200000e8
 8011e74:	200001f0 	.word	0x200001f0
 8011e78:	200001d4 	.word	0x200001d4
 8011e7c:	200001a4 	.word	0x200001a4
 8011e80:	200001a0 	.word	0x200001a0
 8011e84:	20000208 	.word	0x20000208

08011e88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011e88:	b480      	push	{r7}
 8011e8a:	b085      	sub	sp, #20
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	60f8      	str	r0, [r7, #12]
 8011e90:	60b9      	str	r1, [r7, #8]
 8011e92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	3b04      	subs	r3, #4
 8011e98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011ea0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	3b04      	subs	r3, #4
 8011ea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011ea8:	68bb      	ldr	r3, [r7, #8]
 8011eaa:	f023 0201 	bic.w	r2, r3, #1
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	3b04      	subs	r3, #4
 8011eb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011eb8:	4a0c      	ldr	r2, [pc, #48]	; (8011eec <pxPortInitialiseStack+0x64>)
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	3b14      	subs	r3, #20
 8011ec2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011ec4:	687a      	ldr	r2, [r7, #4]
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	3b04      	subs	r3, #4
 8011ece:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	f06f 0202 	mvn.w	r2, #2
 8011ed6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	3b20      	subs	r3, #32
 8011edc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011ede:	68fb      	ldr	r3, [r7, #12]
}
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	3714      	adds	r7, #20
 8011ee4:	46bd      	mov	sp, r7
 8011ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eea:	4770      	bx	lr
 8011eec:	08011ef1 	.word	0x08011ef1

08011ef0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011ef0:	b480      	push	{r7}
 8011ef2:	b085      	sub	sp, #20
 8011ef4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011efa:	4b13      	ldr	r3, [pc, #76]	; (8011f48 <prvTaskExitError+0x58>)
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f02:	d00b      	beq.n	8011f1c <prvTaskExitError+0x2c>
 8011f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f08:	b672      	cpsid	i
 8011f0a:	f383 8811 	msr	BASEPRI, r3
 8011f0e:	f3bf 8f6f 	isb	sy
 8011f12:	f3bf 8f4f 	dsb	sy
 8011f16:	b662      	cpsie	i
 8011f18:	60fb      	str	r3, [r7, #12]
 8011f1a:	e7fe      	b.n	8011f1a <prvTaskExitError+0x2a>
 8011f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f20:	b672      	cpsid	i
 8011f22:	f383 8811 	msr	BASEPRI, r3
 8011f26:	f3bf 8f6f 	isb	sy
 8011f2a:	f3bf 8f4f 	dsb	sy
 8011f2e:	b662      	cpsie	i
 8011f30:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011f32:	bf00      	nop
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d0fc      	beq.n	8011f34 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011f3a:	bf00      	nop
 8011f3c:	3714      	adds	r7, #20
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f44:	4770      	bx	lr
 8011f46:	bf00      	nop
 8011f48:	20000024 	.word	0x20000024
 8011f4c:	00000000 	.word	0x00000000

08011f50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011f50:	4b07      	ldr	r3, [pc, #28]	; (8011f70 <pxCurrentTCBConst2>)
 8011f52:	6819      	ldr	r1, [r3, #0]
 8011f54:	6808      	ldr	r0, [r1, #0]
 8011f56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f5a:	f380 8809 	msr	PSP, r0
 8011f5e:	f3bf 8f6f 	isb	sy
 8011f62:	f04f 0000 	mov.w	r0, #0
 8011f66:	f380 8811 	msr	BASEPRI, r0
 8011f6a:	4770      	bx	lr
 8011f6c:	f3af 8000 	nop.w

08011f70 <pxCurrentTCBConst2>:
 8011f70:	200000e8 	.word	0x200000e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011f74:	bf00      	nop
 8011f76:	bf00      	nop

08011f78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011f78:	4808      	ldr	r0, [pc, #32]	; (8011f9c <prvPortStartFirstTask+0x24>)
 8011f7a:	6800      	ldr	r0, [r0, #0]
 8011f7c:	6800      	ldr	r0, [r0, #0]
 8011f7e:	f380 8808 	msr	MSP, r0
 8011f82:	f04f 0000 	mov.w	r0, #0
 8011f86:	f380 8814 	msr	CONTROL, r0
 8011f8a:	b662      	cpsie	i
 8011f8c:	b661      	cpsie	f
 8011f8e:	f3bf 8f4f 	dsb	sy
 8011f92:	f3bf 8f6f 	isb	sy
 8011f96:	df00      	svc	0
 8011f98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011f9a:	bf00      	nop
 8011f9c:	e000ed08 	.word	0xe000ed08

08011fa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	b084      	sub	sp, #16
 8011fa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011fa6:	4b36      	ldr	r3, [pc, #216]	; (8012080 <xPortStartScheduler+0xe0>)
 8011fa8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	781b      	ldrb	r3, [r3, #0]
 8011fae:	b2db      	uxtb	r3, r3
 8011fb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	22ff      	movs	r2, #255	; 0xff
 8011fb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	781b      	ldrb	r3, [r3, #0]
 8011fbc:	b2db      	uxtb	r3, r3
 8011fbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011fc0:	78fb      	ldrb	r3, [r7, #3]
 8011fc2:	b2db      	uxtb	r3, r3
 8011fc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011fc8:	b2da      	uxtb	r2, r3
 8011fca:	4b2e      	ldr	r3, [pc, #184]	; (8012084 <xPortStartScheduler+0xe4>)
 8011fcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011fce:	4b2e      	ldr	r3, [pc, #184]	; (8012088 <xPortStartScheduler+0xe8>)
 8011fd0:	2207      	movs	r2, #7
 8011fd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011fd4:	e009      	b.n	8011fea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8011fd6:	4b2c      	ldr	r3, [pc, #176]	; (8012088 <xPortStartScheduler+0xe8>)
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	3b01      	subs	r3, #1
 8011fdc:	4a2a      	ldr	r2, [pc, #168]	; (8012088 <xPortStartScheduler+0xe8>)
 8011fde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011fe0:	78fb      	ldrb	r3, [r7, #3]
 8011fe2:	b2db      	uxtb	r3, r3
 8011fe4:	005b      	lsls	r3, r3, #1
 8011fe6:	b2db      	uxtb	r3, r3
 8011fe8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011fea:	78fb      	ldrb	r3, [r7, #3]
 8011fec:	b2db      	uxtb	r3, r3
 8011fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011ff2:	2b80      	cmp	r3, #128	; 0x80
 8011ff4:	d0ef      	beq.n	8011fd6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011ff6:	4b24      	ldr	r3, [pc, #144]	; (8012088 <xPortStartScheduler+0xe8>)
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	f1c3 0307 	rsb	r3, r3, #7
 8011ffe:	2b04      	cmp	r3, #4
 8012000:	d00b      	beq.n	801201a <xPortStartScheduler+0x7a>
 8012002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012006:	b672      	cpsid	i
 8012008:	f383 8811 	msr	BASEPRI, r3
 801200c:	f3bf 8f6f 	isb	sy
 8012010:	f3bf 8f4f 	dsb	sy
 8012014:	b662      	cpsie	i
 8012016:	60bb      	str	r3, [r7, #8]
 8012018:	e7fe      	b.n	8012018 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801201a:	4b1b      	ldr	r3, [pc, #108]	; (8012088 <xPortStartScheduler+0xe8>)
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	021b      	lsls	r3, r3, #8
 8012020:	4a19      	ldr	r2, [pc, #100]	; (8012088 <xPortStartScheduler+0xe8>)
 8012022:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012024:	4b18      	ldr	r3, [pc, #96]	; (8012088 <xPortStartScheduler+0xe8>)
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801202c:	4a16      	ldr	r2, [pc, #88]	; (8012088 <xPortStartScheduler+0xe8>)
 801202e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	b2da      	uxtb	r2, r3
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012038:	4b14      	ldr	r3, [pc, #80]	; (801208c <xPortStartScheduler+0xec>)
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	4a13      	ldr	r2, [pc, #76]	; (801208c <xPortStartScheduler+0xec>)
 801203e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012042:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012044:	4b11      	ldr	r3, [pc, #68]	; (801208c <xPortStartScheduler+0xec>)
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	4a10      	ldr	r2, [pc, #64]	; (801208c <xPortStartScheduler+0xec>)
 801204a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801204e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012050:	f000 f8d4 	bl	80121fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012054:	4b0e      	ldr	r3, [pc, #56]	; (8012090 <xPortStartScheduler+0xf0>)
 8012056:	2200      	movs	r2, #0
 8012058:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801205a:	f000 f8f3 	bl	8012244 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801205e:	4b0d      	ldr	r3, [pc, #52]	; (8012094 <xPortStartScheduler+0xf4>)
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	4a0c      	ldr	r2, [pc, #48]	; (8012094 <xPortStartScheduler+0xf4>)
 8012064:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012068:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801206a:	f7ff ff85 	bl	8011f78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801206e:	f7ff fa75 	bl	801155c <vTaskSwitchContext>
	prvTaskExitError();
 8012072:	f7ff ff3d 	bl	8011ef0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012076:	2300      	movs	r3, #0
}
 8012078:	4618      	mov	r0, r3
 801207a:	3710      	adds	r7, #16
 801207c:	46bd      	mov	sp, r7
 801207e:	bd80      	pop	{r7, pc}
 8012080:	e000e400 	.word	0xe000e400
 8012084:	20000214 	.word	0x20000214
 8012088:	20000218 	.word	0x20000218
 801208c:	e000ed20 	.word	0xe000ed20
 8012090:	20000024 	.word	0x20000024
 8012094:	e000ef34 	.word	0xe000ef34

08012098 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012098:	b480      	push	{r7}
 801209a:	b083      	sub	sp, #12
 801209c:	af00      	add	r7, sp, #0
 801209e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120a2:	b672      	cpsid	i
 80120a4:	f383 8811 	msr	BASEPRI, r3
 80120a8:	f3bf 8f6f 	isb	sy
 80120ac:	f3bf 8f4f 	dsb	sy
 80120b0:	b662      	cpsie	i
 80120b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80120b4:	4b0f      	ldr	r3, [pc, #60]	; (80120f4 <vPortEnterCritical+0x5c>)
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	3301      	adds	r3, #1
 80120ba:	4a0e      	ldr	r2, [pc, #56]	; (80120f4 <vPortEnterCritical+0x5c>)
 80120bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80120be:	4b0d      	ldr	r3, [pc, #52]	; (80120f4 <vPortEnterCritical+0x5c>)
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	2b01      	cmp	r3, #1
 80120c4:	d110      	bne.n	80120e8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80120c6:	4b0c      	ldr	r3, [pc, #48]	; (80120f8 <vPortEnterCritical+0x60>)
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	b2db      	uxtb	r3, r3
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d00b      	beq.n	80120e8 <vPortEnterCritical+0x50>
 80120d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120d4:	b672      	cpsid	i
 80120d6:	f383 8811 	msr	BASEPRI, r3
 80120da:	f3bf 8f6f 	isb	sy
 80120de:	f3bf 8f4f 	dsb	sy
 80120e2:	b662      	cpsie	i
 80120e4:	603b      	str	r3, [r7, #0]
 80120e6:	e7fe      	b.n	80120e6 <vPortEnterCritical+0x4e>
	}
}
 80120e8:	bf00      	nop
 80120ea:	370c      	adds	r7, #12
 80120ec:	46bd      	mov	sp, r7
 80120ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f2:	4770      	bx	lr
 80120f4:	20000024 	.word	0x20000024
 80120f8:	e000ed04 	.word	0xe000ed04

080120fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80120fc:	b480      	push	{r7}
 80120fe:	b083      	sub	sp, #12
 8012100:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012102:	4b12      	ldr	r3, [pc, #72]	; (801214c <vPortExitCritical+0x50>)
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d10b      	bne.n	8012122 <vPortExitCritical+0x26>
 801210a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801210e:	b672      	cpsid	i
 8012110:	f383 8811 	msr	BASEPRI, r3
 8012114:	f3bf 8f6f 	isb	sy
 8012118:	f3bf 8f4f 	dsb	sy
 801211c:	b662      	cpsie	i
 801211e:	607b      	str	r3, [r7, #4]
 8012120:	e7fe      	b.n	8012120 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8012122:	4b0a      	ldr	r3, [pc, #40]	; (801214c <vPortExitCritical+0x50>)
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	3b01      	subs	r3, #1
 8012128:	4a08      	ldr	r2, [pc, #32]	; (801214c <vPortExitCritical+0x50>)
 801212a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801212c:	4b07      	ldr	r3, [pc, #28]	; (801214c <vPortExitCritical+0x50>)
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d104      	bne.n	801213e <vPortExitCritical+0x42>
 8012134:	2300      	movs	r3, #0
 8012136:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012138:	683b      	ldr	r3, [r7, #0]
 801213a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 801213e:	bf00      	nop
 8012140:	370c      	adds	r7, #12
 8012142:	46bd      	mov	sp, r7
 8012144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012148:	4770      	bx	lr
 801214a:	bf00      	nop
 801214c:	20000024 	.word	0x20000024

08012150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012150:	f3ef 8009 	mrs	r0, PSP
 8012154:	f3bf 8f6f 	isb	sy
 8012158:	4b15      	ldr	r3, [pc, #84]	; (80121b0 <pxCurrentTCBConst>)
 801215a:	681a      	ldr	r2, [r3, #0]
 801215c:	f01e 0f10 	tst.w	lr, #16
 8012160:	bf08      	it	eq
 8012162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801216a:	6010      	str	r0, [r2, #0]
 801216c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012170:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012174:	b672      	cpsid	i
 8012176:	f380 8811 	msr	BASEPRI, r0
 801217a:	f3bf 8f4f 	dsb	sy
 801217e:	f3bf 8f6f 	isb	sy
 8012182:	b662      	cpsie	i
 8012184:	f7ff f9ea 	bl	801155c <vTaskSwitchContext>
 8012188:	f04f 0000 	mov.w	r0, #0
 801218c:	f380 8811 	msr	BASEPRI, r0
 8012190:	bc09      	pop	{r0, r3}
 8012192:	6819      	ldr	r1, [r3, #0]
 8012194:	6808      	ldr	r0, [r1, #0]
 8012196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801219a:	f01e 0f10 	tst.w	lr, #16
 801219e:	bf08      	it	eq
 80121a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80121a4:	f380 8809 	msr	PSP, r0
 80121a8:	f3bf 8f6f 	isb	sy
 80121ac:	4770      	bx	lr
 80121ae:	bf00      	nop

080121b0 <pxCurrentTCBConst>:
 80121b0:	200000e8 	.word	0x200000e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80121b4:	bf00      	nop
 80121b6:	bf00      	nop

080121b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80121b8:	b580      	push	{r7, lr}
 80121ba:	b082      	sub	sp, #8
 80121bc:	af00      	add	r7, sp, #0
	__asm volatile
 80121be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121c2:	b672      	cpsid	i
 80121c4:	f383 8811 	msr	BASEPRI, r3
 80121c8:	f3bf 8f6f 	isb	sy
 80121cc:	f3bf 8f4f 	dsb	sy
 80121d0:	b662      	cpsie	i
 80121d2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80121d4:	f7ff f904 	bl	80113e0 <xTaskIncrementTick>
 80121d8:	4603      	mov	r3, r0
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d003      	beq.n	80121e6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80121de:	4b06      	ldr	r3, [pc, #24]	; (80121f8 <SysTick_Handler+0x40>)
 80121e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121e4:	601a      	str	r2, [r3, #0]
 80121e6:	2300      	movs	r3, #0
 80121e8:	603b      	str	r3, [r7, #0]
	__asm volatile
 80121ea:	683b      	ldr	r3, [r7, #0]
 80121ec:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80121f0:	bf00      	nop
 80121f2:	3708      	adds	r7, #8
 80121f4:	46bd      	mov	sp, r7
 80121f6:	bd80      	pop	{r7, pc}
 80121f8:	e000ed04 	.word	0xe000ed04

080121fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80121fc:	b480      	push	{r7}
 80121fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012200:	4b0b      	ldr	r3, [pc, #44]	; (8012230 <vPortSetupTimerInterrupt+0x34>)
 8012202:	2200      	movs	r2, #0
 8012204:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012206:	4b0b      	ldr	r3, [pc, #44]	; (8012234 <vPortSetupTimerInterrupt+0x38>)
 8012208:	2200      	movs	r2, #0
 801220a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801220c:	4b0a      	ldr	r3, [pc, #40]	; (8012238 <vPortSetupTimerInterrupt+0x3c>)
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	4a0a      	ldr	r2, [pc, #40]	; (801223c <vPortSetupTimerInterrupt+0x40>)
 8012212:	fba2 2303 	umull	r2, r3, r2, r3
 8012216:	099b      	lsrs	r3, r3, #6
 8012218:	4a09      	ldr	r2, [pc, #36]	; (8012240 <vPortSetupTimerInterrupt+0x44>)
 801221a:	3b01      	subs	r3, #1
 801221c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801221e:	4b04      	ldr	r3, [pc, #16]	; (8012230 <vPortSetupTimerInterrupt+0x34>)
 8012220:	2207      	movs	r2, #7
 8012222:	601a      	str	r2, [r3, #0]
}
 8012224:	bf00      	nop
 8012226:	46bd      	mov	sp, r7
 8012228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801222c:	4770      	bx	lr
 801222e:	bf00      	nop
 8012230:	e000e010 	.word	0xe000e010
 8012234:	e000e018 	.word	0xe000e018
 8012238:	2000002c 	.word	0x2000002c
 801223c:	10624dd3 	.word	0x10624dd3
 8012240:	e000e014 	.word	0xe000e014

08012244 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012244:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012254 <vPortEnableVFP+0x10>
 8012248:	6801      	ldr	r1, [r0, #0]
 801224a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801224e:	6001      	str	r1, [r0, #0]
 8012250:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012252:	bf00      	nop
 8012254:	e000ed88 	.word	0xe000ed88

08012258 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012258:	b480      	push	{r7}
 801225a:	b085      	sub	sp, #20
 801225c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801225e:	f3ef 8305 	mrs	r3, IPSR
 8012262:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	2b0f      	cmp	r3, #15
 8012268:	d915      	bls.n	8012296 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801226a:	4a18      	ldr	r2, [pc, #96]	; (80122cc <vPortValidateInterruptPriority+0x74>)
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	4413      	add	r3, r2
 8012270:	781b      	ldrb	r3, [r3, #0]
 8012272:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012274:	4b16      	ldr	r3, [pc, #88]	; (80122d0 <vPortValidateInterruptPriority+0x78>)
 8012276:	781b      	ldrb	r3, [r3, #0]
 8012278:	7afa      	ldrb	r2, [r7, #11]
 801227a:	429a      	cmp	r2, r3
 801227c:	d20b      	bcs.n	8012296 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801227e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012282:	b672      	cpsid	i
 8012284:	f383 8811 	msr	BASEPRI, r3
 8012288:	f3bf 8f6f 	isb	sy
 801228c:	f3bf 8f4f 	dsb	sy
 8012290:	b662      	cpsie	i
 8012292:	607b      	str	r3, [r7, #4]
 8012294:	e7fe      	b.n	8012294 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012296:	4b0f      	ldr	r3, [pc, #60]	; (80122d4 <vPortValidateInterruptPriority+0x7c>)
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801229e:	4b0e      	ldr	r3, [pc, #56]	; (80122d8 <vPortValidateInterruptPriority+0x80>)
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	429a      	cmp	r2, r3
 80122a4:	d90b      	bls.n	80122be <vPortValidateInterruptPriority+0x66>
 80122a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122aa:	b672      	cpsid	i
 80122ac:	f383 8811 	msr	BASEPRI, r3
 80122b0:	f3bf 8f6f 	isb	sy
 80122b4:	f3bf 8f4f 	dsb	sy
 80122b8:	b662      	cpsie	i
 80122ba:	603b      	str	r3, [r7, #0]
 80122bc:	e7fe      	b.n	80122bc <vPortValidateInterruptPriority+0x64>
	}
 80122be:	bf00      	nop
 80122c0:	3714      	adds	r7, #20
 80122c2:	46bd      	mov	sp, r7
 80122c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c8:	4770      	bx	lr
 80122ca:	bf00      	nop
 80122cc:	e000e3f0 	.word	0xe000e3f0
 80122d0:	20000214 	.word	0x20000214
 80122d4:	e000ed0c 	.word	0xe000ed0c
 80122d8:	20000218 	.word	0x20000218

080122dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80122dc:	b580      	push	{r7, lr}
 80122de:	b08a      	sub	sp, #40	; 0x28
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80122e4:	2300      	movs	r3, #0
 80122e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80122e8:	f7fe ffac 	bl	8011244 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80122ec:	4b5c      	ldr	r3, [pc, #368]	; (8012460 <pvPortMalloc+0x184>)
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d101      	bne.n	80122f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80122f4:	f000 f91a 	bl	801252c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80122f8:	4b5a      	ldr	r3, [pc, #360]	; (8012464 <pvPortMalloc+0x188>)
 80122fa:	681a      	ldr	r2, [r3, #0]
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	4013      	ands	r3, r2
 8012300:	2b00      	cmp	r3, #0
 8012302:	f040 8090 	bne.w	8012426 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d01e      	beq.n	801234a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801230c:	2208      	movs	r2, #8
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	4413      	add	r3, r2
 8012312:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	f003 0307 	and.w	r3, r3, #7
 801231a:	2b00      	cmp	r3, #0
 801231c:	d015      	beq.n	801234a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	f023 0307 	bic.w	r3, r3, #7
 8012324:	3308      	adds	r3, #8
 8012326:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	f003 0307 	and.w	r3, r3, #7
 801232e:	2b00      	cmp	r3, #0
 8012330:	d00b      	beq.n	801234a <pvPortMalloc+0x6e>
 8012332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012336:	b672      	cpsid	i
 8012338:	f383 8811 	msr	BASEPRI, r3
 801233c:	f3bf 8f6f 	isb	sy
 8012340:	f3bf 8f4f 	dsb	sy
 8012344:	b662      	cpsie	i
 8012346:	617b      	str	r3, [r7, #20]
 8012348:	e7fe      	b.n	8012348 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d06a      	beq.n	8012426 <pvPortMalloc+0x14a>
 8012350:	4b45      	ldr	r3, [pc, #276]	; (8012468 <pvPortMalloc+0x18c>)
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	687a      	ldr	r2, [r7, #4]
 8012356:	429a      	cmp	r2, r3
 8012358:	d865      	bhi.n	8012426 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801235a:	4b44      	ldr	r3, [pc, #272]	; (801246c <pvPortMalloc+0x190>)
 801235c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801235e:	4b43      	ldr	r3, [pc, #268]	; (801246c <pvPortMalloc+0x190>)
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012364:	e004      	b.n	8012370 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8012366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012368:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012372:	685b      	ldr	r3, [r3, #4]
 8012374:	687a      	ldr	r2, [r7, #4]
 8012376:	429a      	cmp	r2, r3
 8012378:	d903      	bls.n	8012382 <pvPortMalloc+0xa6>
 801237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	2b00      	cmp	r3, #0
 8012380:	d1f1      	bne.n	8012366 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012382:	4b37      	ldr	r3, [pc, #220]	; (8012460 <pvPortMalloc+0x184>)
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012388:	429a      	cmp	r2, r3
 801238a:	d04c      	beq.n	8012426 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801238c:	6a3b      	ldr	r3, [r7, #32]
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	2208      	movs	r2, #8
 8012392:	4413      	add	r3, r2
 8012394:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012398:	681a      	ldr	r2, [r3, #0]
 801239a:	6a3b      	ldr	r3, [r7, #32]
 801239c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123a0:	685a      	ldr	r2, [r3, #4]
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	1ad2      	subs	r2, r2, r3
 80123a6:	2308      	movs	r3, #8
 80123a8:	005b      	lsls	r3, r3, #1
 80123aa:	429a      	cmp	r2, r3
 80123ac:	d920      	bls.n	80123f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80123ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	4413      	add	r3, r2
 80123b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80123b6:	69bb      	ldr	r3, [r7, #24]
 80123b8:	f003 0307 	and.w	r3, r3, #7
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d00b      	beq.n	80123d8 <pvPortMalloc+0xfc>
 80123c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123c4:	b672      	cpsid	i
 80123c6:	f383 8811 	msr	BASEPRI, r3
 80123ca:	f3bf 8f6f 	isb	sy
 80123ce:	f3bf 8f4f 	dsb	sy
 80123d2:	b662      	cpsie	i
 80123d4:	613b      	str	r3, [r7, #16]
 80123d6:	e7fe      	b.n	80123d6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80123d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123da:	685a      	ldr	r2, [r3, #4]
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	1ad2      	subs	r2, r2, r3
 80123e0:	69bb      	ldr	r3, [r7, #24]
 80123e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80123e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123e6:	687a      	ldr	r2, [r7, #4]
 80123e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80123ea:	69b8      	ldr	r0, [r7, #24]
 80123ec:	f000 f900 	bl	80125f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80123f0:	4b1d      	ldr	r3, [pc, #116]	; (8012468 <pvPortMalloc+0x18c>)
 80123f2:	681a      	ldr	r2, [r3, #0]
 80123f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123f6:	685b      	ldr	r3, [r3, #4]
 80123f8:	1ad3      	subs	r3, r2, r3
 80123fa:	4a1b      	ldr	r2, [pc, #108]	; (8012468 <pvPortMalloc+0x18c>)
 80123fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80123fe:	4b1a      	ldr	r3, [pc, #104]	; (8012468 <pvPortMalloc+0x18c>)
 8012400:	681a      	ldr	r2, [r3, #0]
 8012402:	4b1b      	ldr	r3, [pc, #108]	; (8012470 <pvPortMalloc+0x194>)
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	429a      	cmp	r2, r3
 8012408:	d203      	bcs.n	8012412 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801240a:	4b17      	ldr	r3, [pc, #92]	; (8012468 <pvPortMalloc+0x18c>)
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	4a18      	ldr	r2, [pc, #96]	; (8012470 <pvPortMalloc+0x194>)
 8012410:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012414:	685a      	ldr	r2, [r3, #4]
 8012416:	4b13      	ldr	r3, [pc, #76]	; (8012464 <pvPortMalloc+0x188>)
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	431a      	orrs	r2, r3
 801241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801241e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012422:	2200      	movs	r2, #0
 8012424:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012426:	f7fe ff1b 	bl	8011260 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801242a:	69fb      	ldr	r3, [r7, #28]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d101      	bne.n	8012434 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8012430:	f000 fa2a 	bl	8012888 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012434:	69fb      	ldr	r3, [r7, #28]
 8012436:	f003 0307 	and.w	r3, r3, #7
 801243a:	2b00      	cmp	r3, #0
 801243c:	d00b      	beq.n	8012456 <pvPortMalloc+0x17a>
 801243e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012442:	b672      	cpsid	i
 8012444:	f383 8811 	msr	BASEPRI, r3
 8012448:	f3bf 8f6f 	isb	sy
 801244c:	f3bf 8f4f 	dsb	sy
 8012450:	b662      	cpsie	i
 8012452:	60fb      	str	r3, [r7, #12]
 8012454:	e7fe      	b.n	8012454 <pvPortMalloc+0x178>
	return pvReturn;
 8012456:	69fb      	ldr	r3, [r7, #28]
}
 8012458:	4618      	mov	r0, r3
 801245a:	3728      	adds	r7, #40	; 0x28
 801245c:	46bd      	mov	sp, r7
 801245e:	bd80      	pop	{r7, pc}
 8012460:	20008224 	.word	0x20008224
 8012464:	20008230 	.word	0x20008230
 8012468:	20008228 	.word	0x20008228
 801246c:	2000821c 	.word	0x2000821c
 8012470:	2000822c 	.word	0x2000822c

08012474 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012474:	b580      	push	{r7, lr}
 8012476:	b086      	sub	sp, #24
 8012478:	af00      	add	r7, sp, #0
 801247a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	2b00      	cmp	r3, #0
 8012484:	d04a      	beq.n	801251c <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012486:	2308      	movs	r3, #8
 8012488:	425b      	negs	r3, r3
 801248a:	697a      	ldr	r2, [r7, #20]
 801248c:	4413      	add	r3, r2
 801248e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012490:	697b      	ldr	r3, [r7, #20]
 8012492:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012494:	693b      	ldr	r3, [r7, #16]
 8012496:	685a      	ldr	r2, [r3, #4]
 8012498:	4b22      	ldr	r3, [pc, #136]	; (8012524 <vPortFree+0xb0>)
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	4013      	ands	r3, r2
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d10b      	bne.n	80124ba <vPortFree+0x46>
 80124a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124a6:	b672      	cpsid	i
 80124a8:	f383 8811 	msr	BASEPRI, r3
 80124ac:	f3bf 8f6f 	isb	sy
 80124b0:	f3bf 8f4f 	dsb	sy
 80124b4:	b662      	cpsie	i
 80124b6:	60fb      	str	r3, [r7, #12]
 80124b8:	e7fe      	b.n	80124b8 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80124ba:	693b      	ldr	r3, [r7, #16]
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d00b      	beq.n	80124da <vPortFree+0x66>
 80124c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124c6:	b672      	cpsid	i
 80124c8:	f383 8811 	msr	BASEPRI, r3
 80124cc:	f3bf 8f6f 	isb	sy
 80124d0:	f3bf 8f4f 	dsb	sy
 80124d4:	b662      	cpsie	i
 80124d6:	60bb      	str	r3, [r7, #8]
 80124d8:	e7fe      	b.n	80124d8 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80124da:	693b      	ldr	r3, [r7, #16]
 80124dc:	685a      	ldr	r2, [r3, #4]
 80124de:	4b11      	ldr	r3, [pc, #68]	; (8012524 <vPortFree+0xb0>)
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	4013      	ands	r3, r2
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d019      	beq.n	801251c <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80124e8:	693b      	ldr	r3, [r7, #16]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d115      	bne.n	801251c <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80124f0:	693b      	ldr	r3, [r7, #16]
 80124f2:	685a      	ldr	r2, [r3, #4]
 80124f4:	4b0b      	ldr	r3, [pc, #44]	; (8012524 <vPortFree+0xb0>)
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	43db      	mvns	r3, r3
 80124fa:	401a      	ands	r2, r3
 80124fc:	693b      	ldr	r3, [r7, #16]
 80124fe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012500:	f7fe fea0 	bl	8011244 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012504:	693b      	ldr	r3, [r7, #16]
 8012506:	685a      	ldr	r2, [r3, #4]
 8012508:	4b07      	ldr	r3, [pc, #28]	; (8012528 <vPortFree+0xb4>)
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	4413      	add	r3, r2
 801250e:	4a06      	ldr	r2, [pc, #24]	; (8012528 <vPortFree+0xb4>)
 8012510:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012512:	6938      	ldr	r0, [r7, #16]
 8012514:	f000 f86c 	bl	80125f0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8012518:	f7fe fea2 	bl	8011260 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801251c:	bf00      	nop
 801251e:	3718      	adds	r7, #24
 8012520:	46bd      	mov	sp, r7
 8012522:	bd80      	pop	{r7, pc}
 8012524:	20008230 	.word	0x20008230
 8012528:	20008228 	.word	0x20008228

0801252c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801252c:	b480      	push	{r7}
 801252e:	b085      	sub	sp, #20
 8012530:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012536:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012538:	4b27      	ldr	r3, [pc, #156]	; (80125d8 <prvHeapInit+0xac>)
 801253a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	f003 0307 	and.w	r3, r3, #7
 8012542:	2b00      	cmp	r3, #0
 8012544:	d00c      	beq.n	8012560 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	3307      	adds	r3, #7
 801254a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	f023 0307 	bic.w	r3, r3, #7
 8012552:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012554:	68ba      	ldr	r2, [r7, #8]
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	1ad3      	subs	r3, r2, r3
 801255a:	4a1f      	ldr	r2, [pc, #124]	; (80125d8 <prvHeapInit+0xac>)
 801255c:	4413      	add	r3, r2
 801255e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012564:	4a1d      	ldr	r2, [pc, #116]	; (80125dc <prvHeapInit+0xb0>)
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801256a:	4b1c      	ldr	r3, [pc, #112]	; (80125dc <prvHeapInit+0xb0>)
 801256c:	2200      	movs	r2, #0
 801256e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	68ba      	ldr	r2, [r7, #8]
 8012574:	4413      	add	r3, r2
 8012576:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012578:	2208      	movs	r2, #8
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	1a9b      	subs	r3, r3, r2
 801257e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	f023 0307 	bic.w	r3, r3, #7
 8012586:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	4a15      	ldr	r2, [pc, #84]	; (80125e0 <prvHeapInit+0xb4>)
 801258c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801258e:	4b14      	ldr	r3, [pc, #80]	; (80125e0 <prvHeapInit+0xb4>)
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	2200      	movs	r2, #0
 8012594:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012596:	4b12      	ldr	r3, [pc, #72]	; (80125e0 <prvHeapInit+0xb4>)
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	2200      	movs	r2, #0
 801259c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80125a2:	683b      	ldr	r3, [r7, #0]
 80125a4:	68fa      	ldr	r2, [r7, #12]
 80125a6:	1ad2      	subs	r2, r2, r3
 80125a8:	683b      	ldr	r3, [r7, #0]
 80125aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80125ac:	4b0c      	ldr	r3, [pc, #48]	; (80125e0 <prvHeapInit+0xb4>)
 80125ae:	681a      	ldr	r2, [r3, #0]
 80125b0:	683b      	ldr	r3, [r7, #0]
 80125b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80125b4:	683b      	ldr	r3, [r7, #0]
 80125b6:	685b      	ldr	r3, [r3, #4]
 80125b8:	4a0a      	ldr	r2, [pc, #40]	; (80125e4 <prvHeapInit+0xb8>)
 80125ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80125bc:	683b      	ldr	r3, [r7, #0]
 80125be:	685b      	ldr	r3, [r3, #4]
 80125c0:	4a09      	ldr	r2, [pc, #36]	; (80125e8 <prvHeapInit+0xbc>)
 80125c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80125c4:	4b09      	ldr	r3, [pc, #36]	; (80125ec <prvHeapInit+0xc0>)
 80125c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80125ca:	601a      	str	r2, [r3, #0]
}
 80125cc:	bf00      	nop
 80125ce:	3714      	adds	r7, #20
 80125d0:	46bd      	mov	sp, r7
 80125d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d6:	4770      	bx	lr
 80125d8:	2000021c 	.word	0x2000021c
 80125dc:	2000821c 	.word	0x2000821c
 80125e0:	20008224 	.word	0x20008224
 80125e4:	2000822c 	.word	0x2000822c
 80125e8:	20008228 	.word	0x20008228
 80125ec:	20008230 	.word	0x20008230

080125f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80125f0:	b480      	push	{r7}
 80125f2:	b085      	sub	sp, #20
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80125f8:	4b28      	ldr	r3, [pc, #160]	; (801269c <prvInsertBlockIntoFreeList+0xac>)
 80125fa:	60fb      	str	r3, [r7, #12]
 80125fc:	e002      	b.n	8012604 <prvInsertBlockIntoFreeList+0x14>
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	60fb      	str	r3, [r7, #12]
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	687a      	ldr	r2, [r7, #4]
 801260a:	429a      	cmp	r2, r3
 801260c:	d8f7      	bhi.n	80125fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	685b      	ldr	r3, [r3, #4]
 8012616:	68ba      	ldr	r2, [r7, #8]
 8012618:	4413      	add	r3, r2
 801261a:	687a      	ldr	r2, [r7, #4]
 801261c:	429a      	cmp	r2, r3
 801261e:	d108      	bne.n	8012632 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	685a      	ldr	r2, [r3, #4]
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	685b      	ldr	r3, [r3, #4]
 8012628:	441a      	add	r2, r3
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	685b      	ldr	r3, [r3, #4]
 801263a:	68ba      	ldr	r2, [r7, #8]
 801263c:	441a      	add	r2, r3
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	429a      	cmp	r2, r3
 8012644:	d118      	bne.n	8012678 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	681a      	ldr	r2, [r3, #0]
 801264a:	4b15      	ldr	r3, [pc, #84]	; (80126a0 <prvInsertBlockIntoFreeList+0xb0>)
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	429a      	cmp	r2, r3
 8012650:	d00d      	beq.n	801266e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	685a      	ldr	r2, [r3, #4]
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	685b      	ldr	r3, [r3, #4]
 801265c:	441a      	add	r2, r3
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	681a      	ldr	r2, [r3, #0]
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	601a      	str	r2, [r3, #0]
 801266c:	e008      	b.n	8012680 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801266e:	4b0c      	ldr	r3, [pc, #48]	; (80126a0 <prvInsertBlockIntoFreeList+0xb0>)
 8012670:	681a      	ldr	r2, [r3, #0]
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	601a      	str	r2, [r3, #0]
 8012676:	e003      	b.n	8012680 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	681a      	ldr	r2, [r3, #0]
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012680:	68fa      	ldr	r2, [r7, #12]
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	429a      	cmp	r2, r3
 8012686:	d002      	beq.n	801268e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	687a      	ldr	r2, [r7, #4]
 801268c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801268e:	bf00      	nop
 8012690:	3714      	adds	r7, #20
 8012692:	46bd      	mov	sp, r7
 8012694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012698:	4770      	bx	lr
 801269a:	bf00      	nop
 801269c:	2000821c 	.word	0x2000821c
 80126a0:	20008224 	.word	0x20008224

080126a4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 80126a4:	b580      	push	{r7, lr}
 80126a6:	b082      	sub	sp, #8
 80126a8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80126aa:	2300      	movs	r3, #0
 80126ac:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80126ae:	f000 f896 	bl	80127de <BSP_SD_IsDetected>
 80126b2:	4603      	mov	r3, r0
 80126b4:	2b01      	cmp	r3, #1
 80126b6:	d001      	beq.n	80126bc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80126b8:	2302      	movs	r3, #2
 80126ba:	e012      	b.n	80126e2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80126bc:	480b      	ldr	r0, [pc, #44]	; (80126ec <BSP_SD_Init+0x48>)
 80126be:	f7f3 fcab 	bl	8006018 <HAL_SD_Init>
 80126c2:	4603      	mov	r3, r0
 80126c4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80126c6:	79fb      	ldrb	r3, [r7, #7]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d109      	bne.n	80126e0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80126cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80126d0:	4806      	ldr	r0, [pc, #24]	; (80126ec <BSP_SD_Init+0x48>)
 80126d2:	f7f4 fa7f 	bl	8006bd4 <HAL_SD_ConfigWideBusOperation>
 80126d6:	4603      	mov	r3, r0
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d001      	beq.n	80126e0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80126dc:	2301      	movs	r3, #1
 80126de:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80126e0:	79fb      	ldrb	r3, [r7, #7]
}
 80126e2:	4618      	mov	r0, r3
 80126e4:	3708      	adds	r7, #8
 80126e6:	46bd      	mov	sp, r7
 80126e8:	bd80      	pop	{r7, pc}
 80126ea:	bf00      	nop
 80126ec:	20008b54 	.word	0x20008b54

080126f0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80126f0:	b580      	push	{r7, lr}
 80126f2:	b086      	sub	sp, #24
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	60f8      	str	r0, [r7, #12]
 80126f8:	60b9      	str	r1, [r7, #8]
 80126fa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80126fc:	2300      	movs	r3, #0
 80126fe:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	68ba      	ldr	r2, [r7, #8]
 8012704:	68f9      	ldr	r1, [r7, #12]
 8012706:	4806      	ldr	r0, [pc, #24]	; (8012720 <BSP_SD_ReadBlocks_DMA+0x30>)
 8012708:	f7f3 fd16 	bl	8006138 <HAL_SD_ReadBlocks_DMA>
 801270c:	4603      	mov	r3, r0
 801270e:	2b00      	cmp	r3, #0
 8012710:	d001      	beq.n	8012716 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012712:	2301      	movs	r3, #1
 8012714:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8012716:	7dfb      	ldrb	r3, [r7, #23]
}
 8012718:	4618      	mov	r0, r3
 801271a:	3718      	adds	r7, #24
 801271c:	46bd      	mov	sp, r7
 801271e:	bd80      	pop	{r7, pc}
 8012720:	20008b54 	.word	0x20008b54

08012724 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8012724:	b580      	push	{r7, lr}
 8012726:	b086      	sub	sp, #24
 8012728:	af00      	add	r7, sp, #0
 801272a:	60f8      	str	r0, [r7, #12]
 801272c:	60b9      	str	r1, [r7, #8]
 801272e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012730:	2300      	movs	r3, #0
 8012732:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	68ba      	ldr	r2, [r7, #8]
 8012738:	68f9      	ldr	r1, [r7, #12]
 801273a:	4806      	ldr	r0, [pc, #24]	; (8012754 <BSP_SD_WriteBlocks_DMA+0x30>)
 801273c:	f7f3 fdca 	bl	80062d4 <HAL_SD_WriteBlocks_DMA>
 8012740:	4603      	mov	r3, r0
 8012742:	2b00      	cmp	r3, #0
 8012744:	d001      	beq.n	801274a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012746:	2301      	movs	r3, #1
 8012748:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 801274a:	7dfb      	ldrb	r3, [r7, #23]
}
 801274c:	4618      	mov	r0, r3
 801274e:	3718      	adds	r7, #24
 8012750:	46bd      	mov	sp, r7
 8012752:	bd80      	pop	{r7, pc}
 8012754:	20008b54 	.word	0x20008b54

08012758 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8012758:	b580      	push	{r7, lr}
 801275a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801275c:	4805      	ldr	r0, [pc, #20]	; (8012774 <BSP_SD_GetCardState+0x1c>)
 801275e:	f7f4 fab5 	bl	8006ccc <HAL_SD_GetCardState>
 8012762:	4603      	mov	r3, r0
 8012764:	2b04      	cmp	r3, #4
 8012766:	bf14      	ite	ne
 8012768:	2301      	movne	r3, #1
 801276a:	2300      	moveq	r3, #0
 801276c:	b2db      	uxtb	r3, r3
}
 801276e:	4618      	mov	r0, r3
 8012770:	bd80      	pop	{r7, pc}
 8012772:	bf00      	nop
 8012774:	20008b54 	.word	0x20008b54

08012778 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8012778:	b580      	push	{r7, lr}
 801277a:	b082      	sub	sp, #8
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8012780:	6879      	ldr	r1, [r7, #4]
 8012782:	4803      	ldr	r0, [pc, #12]	; (8012790 <BSP_SD_GetCardInfo+0x18>)
 8012784:	f7f4 f9fa 	bl	8006b7c <HAL_SD_GetCardInfo>
}
 8012788:	bf00      	nop
 801278a:	3708      	adds	r7, #8
 801278c:	46bd      	mov	sp, r7
 801278e:	bd80      	pop	{r7, pc}
 8012790:	20008b54 	.word	0x20008b54

08012794 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8012794:	b580      	push	{r7, lr}
 8012796:	b082      	sub	sp, #8
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 801279c:	f000 f818 	bl	80127d0 <BSP_SD_AbortCallback>
}
 80127a0:	bf00      	nop
 80127a2:	3708      	adds	r7, #8
 80127a4:	46bd      	mov	sp, r7
 80127a6:	bd80      	pop	{r7, pc}

080127a8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80127a8:	b580      	push	{r7, lr}
 80127aa:	b082      	sub	sp, #8
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80127b0:	f001 fd5a 	bl	8014268 <BSP_SD_WriteCpltCallback>
}
 80127b4:	bf00      	nop
 80127b6:	3708      	adds	r7, #8
 80127b8:	46bd      	mov	sp, r7
 80127ba:	bd80      	pop	{r7, pc}

080127bc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80127bc:	b580      	push	{r7, lr}
 80127be:	b082      	sub	sp, #8
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80127c4:	f001 fd5e 	bl	8014284 <BSP_SD_ReadCpltCallback>
}
 80127c8:	bf00      	nop
 80127ca:	3708      	adds	r7, #8
 80127cc:	46bd      	mov	sp, r7
 80127ce:	bd80      	pop	{r7, pc}

080127d0 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 80127d0:	b480      	push	{r7}
 80127d2:	af00      	add	r7, sp, #0

}
 80127d4:	bf00      	nop
 80127d6:	46bd      	mov	sp, r7
 80127d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127dc:	4770      	bx	lr

080127de <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 80127de:	b580      	push	{r7, lr}
 80127e0:	b082      	sub	sp, #8
 80127e2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80127e4:	2301      	movs	r3, #1
 80127e6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 80127e8:	f000 f826 	bl	8012838 <BSP_PlatformIsDetected>
 80127ec:	4603      	mov	r3, r0
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d101      	bne.n	80127f6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80127f2:	2300      	movs	r3, #0
 80127f4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80127f6:	79fb      	ldrb	r3, [r7, #7]
 80127f8:	b2db      	uxtb	r3, r3
}
 80127fa:	4618      	mov	r0, r3
 80127fc:	3708      	adds	r7, #8
 80127fe:	46bd      	mov	sp, r7
 8012800:	bd80      	pop	{r7, pc}
	...

08012804 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8012804:	b580      	push	{r7, lr}
 8012806:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8012808:	4904      	ldr	r1, [pc, #16]	; (801281c <MX_FATFS_Init+0x18>)
 801280a:	4805      	ldr	r0, [pc, #20]	; (8012820 <MX_FATFS_Init+0x1c>)
 801280c:	f7fd f8f6 	bl	800f9fc <FATFS_LinkDriver>
 8012810:	4603      	mov	r3, r0
 8012812:	461a      	mov	r2, r3
 8012814:	4b03      	ldr	r3, [pc, #12]	; (8012824 <MX_FATFS_Init+0x20>)
 8012816:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8012818:	bf00      	nop
 801281a:	bd80      	pop	{r7, pc}
 801281c:	20008498 	.word	0x20008498
 8012820:	08015dd4 	.word	0x08015dd4
 8012824:	20008494 	.word	0x20008494

08012828 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8012828:	b480      	push	{r7}
 801282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801282c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 801282e:	4618      	mov	r0, r3
 8012830:	46bd      	mov	sp, r7
 8012832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012836:	4770      	bx	lr

08012838 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8012838:	b580      	push	{r7, lr}
 801283a:	b082      	sub	sp, #8
 801283c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801283e:	2301      	movs	r3, #1
 8012840:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8012842:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8012846:	4806      	ldr	r0, [pc, #24]	; (8012860 <BSP_PlatformIsDetected+0x28>)
 8012848:	f7ef fa9c 	bl	8001d84 <HAL_GPIO_ReadPin>
 801284c:	4603      	mov	r3, r0
 801284e:	2b00      	cmp	r3, #0
 8012850:	d001      	beq.n	8012856 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8012852:	2300      	movs	r3, #0
 8012854:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8012856:	79fb      	ldrb	r3, [r7, #7]
}  
 8012858:	4618      	mov	r0, r3
 801285a:	3708      	adds	r7, #8
 801285c:	46bd      	mov	sp, r7
 801285e:	bd80      	pop	{r7, pc}
 8012860:	40020800 	.word	0x40020800

08012864 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8012864:	b480      	push	{r7}
 8012866:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8012868:	bf00      	nop
 801286a:	46bd      	mov	sp, r7
 801286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012870:	4770      	bx	lr

08012872 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8012872:	b480      	push	{r7}
 8012874:	b083      	sub	sp, #12
 8012876:	af00      	add	r7, sp, #0
 8012878:	6078      	str	r0, [r7, #4]
 801287a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 801287c:	bf00      	nop
 801287e:	370c      	adds	r7, #12
 8012880:	46bd      	mov	sp, r7
 8012882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012886:	4770      	bx	lr

08012888 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8012888:	b480      	push	{r7}
 801288a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 801288c:	bf00      	nop
 801288e:	46bd      	mov	sp, r7
 8012890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012894:	4770      	bx	lr
	...

08012898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8012898:	b5b0      	push	{r4, r5, r7, lr}
 801289a:	b086      	sub	sp, #24
 801289c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 801289e:	f7ed fe37 	bl	8000510 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80128a2:	f000 f845 	bl	8012930 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80128a6:	f001 f825 	bl	80138f4 <MX_GPIO_Init>
  MX_DMA_Init();
 80128aa:	f000 ffad 	bl	8013808 <MX_DMA_Init>
  MX_ADC3_Init();
 80128ae:	f000 f8ff 	bl	8012ab0 <MX_ADC3_Init>
  MX_CRC_Init();
 80128b2:	f000 f94f 	bl	8012b54 <MX_CRC_Init>
  MX_DCMI_Init();
 80128b6:	f000 f96f 	bl	8012b98 <MX_DCMI_Init>
  MX_DMA2D_Init();
 80128ba:	f000 f9a1 	bl	8012c00 <MX_DMA2D_Init>
  MX_FMC_Init();
 80128be:	f000 ffc9 	bl	8013854 <MX_FMC_Init>
  MX_I2C1_Init();
 80128c2:	f000 f9cf 	bl	8012c64 <MX_I2C1_Init>
  MX_I2C3_Init();
 80128c6:	f000 fa0d 	bl	8012ce4 <MX_I2C3_Init>
  MX_LTDC_Init();
 80128ca:	f000 fa4b 	bl	8012d64 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80128ce:	f000 facb 	bl	8012e68 <MX_QUADSPI_Init>
  MX_RTC_Init();
 80128d2:	f000 faf5 	bl	8012ec0 <MX_RTC_Init>
  MX_SAI2_Init();
 80128d6:	f000 fb9b 	bl	8013010 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 80128da:	f000 fc41 	bl	8013160 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 80128de:	f000 fc5f 	bl	80131a0 <MX_SPDIFRX_Init>
  MX_TIM1_Init();
 80128e2:	f000 fc8d 	bl	8013200 <MX_TIM1_Init>
  MX_TIM2_Init();
 80128e6:	f000 fd37 	bl	8013358 <MX_TIM2_Init>
  MX_TIM3_Init();
 80128ea:	f000 fdab 	bl	8013444 <MX_TIM3_Init>
  MX_TIM5_Init();
 80128ee:	f000 fe1f 	bl	8013530 <MX_TIM5_Init>
  MX_TIM8_Init();
 80128f2:	f000 fe93 	bl	801361c <MX_TIM8_Init>
  MX_TIM12_Init();
 80128f6:	f000 fee3 	bl	80136c0 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 80128fa:	f000 ff25 	bl	8013748 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80128fe:	f000 ff53 	bl	80137a8 <MX_USART6_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8012902:	4b09      	ldr	r3, [pc, #36]	; (8012928 <main+0x90>)
 8012904:	1d3c      	adds	r4, r7, #4
 8012906:	461d      	mov	r5, r3
 8012908:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801290a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801290c:	682b      	ldr	r3, [r5, #0]
 801290e:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8012910:	1d3b      	adds	r3, r7, #4
 8012912:	2100      	movs	r1, #0
 8012914:	4618      	mov	r0, r3
 8012916:	f7fd f95d 	bl	800fbd4 <osThreadCreate>
 801291a:	4602      	mov	r2, r0
 801291c:	4b03      	ldr	r3, [pc, #12]	; (801292c <main+0x94>)
 801291e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8012920:	f7fd f935 	bl	800fb8e <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8012924:	e7fe      	b.n	8012924 <main+0x8c>
 8012926:	bf00      	nop
 8012928:	08015ce0 	.word	0x08015ce0
 801292c:	20008984 	.word	0x20008984

08012930 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8012930:	b580      	push	{r7, lr}
 8012932:	b0b4      	sub	sp, #208	; 0xd0
 8012934:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8012936:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801293a:	2230      	movs	r2, #48	; 0x30
 801293c:	2100      	movs	r1, #0
 801293e:	4618      	mov	r0, r3
 8012940:	f003 f8bd 	bl	8015abe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8012944:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012948:	2200      	movs	r2, #0
 801294a:	601a      	str	r2, [r3, #0]
 801294c:	605a      	str	r2, [r3, #4]
 801294e:	609a      	str	r2, [r3, #8]
 8012950:	60da      	str	r2, [r3, #12]
 8012952:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8012954:	f107 0308 	add.w	r3, r7, #8
 8012958:	2284      	movs	r2, #132	; 0x84
 801295a:	2100      	movs	r1, #0
 801295c:	4618      	mov	r0, r3
 801295e:	f003 f8ae 	bl	8015abe <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8012962:	f7f1 fb2d 	bl	8003fc0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8012966:	4b4f      	ldr	r3, [pc, #316]	; (8012aa4 <SystemClock_Config+0x174>)
 8012968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801296a:	4a4e      	ldr	r2, [pc, #312]	; (8012aa4 <SystemClock_Config+0x174>)
 801296c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012970:	6413      	str	r3, [r2, #64]	; 0x40
 8012972:	4b4c      	ldr	r3, [pc, #304]	; (8012aa4 <SystemClock_Config+0x174>)
 8012974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801297a:	607b      	str	r3, [r7, #4]
 801297c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801297e:	4b4a      	ldr	r3, [pc, #296]	; (8012aa8 <SystemClock_Config+0x178>)
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	4a49      	ldr	r2, [pc, #292]	; (8012aa8 <SystemClock_Config+0x178>)
 8012984:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012988:	6013      	str	r3, [r2, #0]
 801298a:	4b47      	ldr	r3, [pc, #284]	; (8012aa8 <SystemClock_Config+0x178>)
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8012992:	603b      	str	r3, [r7, #0]
 8012994:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8012996:	2309      	movs	r3, #9
 8012998:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801299c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80129a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80129a4:	2301      	movs	r3, #1
 80129a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80129aa:	2302      	movs	r3, #2
 80129ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80129b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80129b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80129b8:	2319      	movs	r3, #25
 80129ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 80129be:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80129c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80129c6:	2302      	movs	r3, #2
 80129c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80129cc:	2309      	movs	r3, #9
 80129ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80129d2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80129d6:	4618      	mov	r0, r3
 80129d8:	f7f1 fc22 	bl	8004220 <HAL_RCC_OscConfig>
 80129dc:	4603      	mov	r3, r0
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d001      	beq.n	80129e6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80129e2:	f001 fa35 	bl	8013e50 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80129e6:	f7f1 fafb 	bl	8003fe0 <HAL_PWREx_EnableOverDrive>
 80129ea:	4603      	mov	r3, r0
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d001      	beq.n	80129f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80129f0:	f001 fa2e 	bl	8013e50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80129f4:	230f      	movs	r3, #15
 80129f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80129fa:	2302      	movs	r3, #2
 80129fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8012a00:	2300      	movs	r3, #0
 8012a02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8012a06:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8012a0a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8012a0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012a12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8012a16:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012a1a:	2106      	movs	r1, #6
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	f7f1 fe6f 	bl	8004700 <HAL_RCC_ClockConfig>
 8012a22:	4603      	mov	r3, r0
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d001      	beq.n	8012a2c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8012a28:	f001 fa12 	bl	8013e50 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8012a2c:	4b1f      	ldr	r3, [pc, #124]	; (8012aac <SystemClock_Config+0x17c>)
 8012a2e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8012a30:	2364      	movs	r3, #100	; 0x64
 8012a32:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8012a34:	2302      	movs	r3, #2
 8012a36:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8012a38:	2302      	movs	r3, #2
 8012a3a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8012a3c:	2302      	movs	r3, #2
 8012a3e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8012a40:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8012a44:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8012a46:	2305      	movs	r3, #5
 8012a48:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8012a4a:	2302      	movs	r3, #2
 8012a4c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8012a4e:	2303      	movs	r3, #3
 8012a50:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8012a52:	2301      	movs	r3, #1
 8012a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8012a56:	2301      	movs	r3, #1
 8012a58:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8012a5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012a5e:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8012a60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012a64:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8012a66:	2300      	movs	r3, #0
 8012a68:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8012a6e:	2300      	movs	r3, #0
 8012a70:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8012a72:	2300      	movs	r3, #0
 8012a74:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8012a76:	2300      	movs	r3, #0
 8012a78:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8012a7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012a7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8012a82:	2300      	movs	r3, #0
 8012a84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012a88:	f107 0308 	add.w	r3, r7, #8
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	f7f2 f837 	bl	8004b00 <HAL_RCCEx_PeriphCLKConfig>
 8012a92:	4603      	mov	r3, r0
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d001      	beq.n	8012a9c <SystemClock_Config+0x16c>
  {
    Error_Handler();
 8012a98:	f001 f9da 	bl	8013e50 <Error_Handler>
  }
}
 8012a9c:	bf00      	nop
 8012a9e:	37d0      	adds	r7, #208	; 0xd0
 8012aa0:	46bd      	mov	sp, r7
 8012aa2:	bd80      	pop	{r7, pc}
 8012aa4:	40023800 	.word	0x40023800
 8012aa8:	40007000 	.word	0x40007000
 8012aac:	01b14868 	.word	0x01b14868

08012ab0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8012ab0:	b580      	push	{r7, lr}
 8012ab2:	b084      	sub	sp, #16
 8012ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8012ab6:	463b      	mov	r3, r7
 8012ab8:	2200      	movs	r2, #0
 8012aba:	601a      	str	r2, [r3, #0]
 8012abc:	605a      	str	r2, [r3, #4]
 8012abe:	609a      	str	r2, [r3, #8]
 8012ac0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8012ac2:	4b21      	ldr	r3, [pc, #132]	; (8012b48 <MX_ADC3_Init+0x98>)
 8012ac4:	4a21      	ldr	r2, [pc, #132]	; (8012b4c <MX_ADC3_Init+0x9c>)
 8012ac6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8012ac8:	4b1f      	ldr	r3, [pc, #124]	; (8012b48 <MX_ADC3_Init+0x98>)
 8012aca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8012ace:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8012ad0:	4b1d      	ldr	r3, [pc, #116]	; (8012b48 <MX_ADC3_Init+0x98>)
 8012ad2:	2200      	movs	r2, #0
 8012ad4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8012ad6:	4b1c      	ldr	r3, [pc, #112]	; (8012b48 <MX_ADC3_Init+0x98>)
 8012ad8:	2200      	movs	r2, #0
 8012ada:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8012adc:	4b1a      	ldr	r3, [pc, #104]	; (8012b48 <MX_ADC3_Init+0x98>)
 8012ade:	2200      	movs	r2, #0
 8012ae0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8012ae2:	4b19      	ldr	r3, [pc, #100]	; (8012b48 <MX_ADC3_Init+0x98>)
 8012ae4:	2200      	movs	r2, #0
 8012ae6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8012aea:	4b17      	ldr	r3, [pc, #92]	; (8012b48 <MX_ADC3_Init+0x98>)
 8012aec:	2200      	movs	r2, #0
 8012aee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8012af0:	4b15      	ldr	r3, [pc, #84]	; (8012b48 <MX_ADC3_Init+0x98>)
 8012af2:	4a17      	ldr	r2, [pc, #92]	; (8012b50 <MX_ADC3_Init+0xa0>)
 8012af4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8012af6:	4b14      	ldr	r3, [pc, #80]	; (8012b48 <MX_ADC3_Init+0x98>)
 8012af8:	2200      	movs	r2, #0
 8012afa:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8012afc:	4b12      	ldr	r3, [pc, #72]	; (8012b48 <MX_ADC3_Init+0x98>)
 8012afe:	2201      	movs	r2, #1
 8012b00:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8012b02:	4b11      	ldr	r3, [pc, #68]	; (8012b48 <MX_ADC3_Init+0x98>)
 8012b04:	2200      	movs	r2, #0
 8012b06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8012b0a:	4b0f      	ldr	r3, [pc, #60]	; (8012b48 <MX_ADC3_Init+0x98>)
 8012b0c:	2201      	movs	r2, #1
 8012b0e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8012b10:	480d      	ldr	r0, [pc, #52]	; (8012b48 <MX_ADC3_Init+0x98>)
 8012b12:	f7ed fd4d 	bl	80005b0 <HAL_ADC_Init>
 8012b16:	4603      	mov	r3, r0
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d001      	beq.n	8012b20 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8012b1c:	f001 f998 	bl	8013e50 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8012b20:	2304      	movs	r3, #4
 8012b22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8012b24:	2301      	movs	r3, #1
 8012b26:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8012b28:	2300      	movs	r3, #0
 8012b2a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8012b2c:	463b      	mov	r3, r7
 8012b2e:	4619      	mov	r1, r3
 8012b30:	4805      	ldr	r0, [pc, #20]	; (8012b48 <MX_ADC3_Init+0x98>)
 8012b32:	f7ed fd81 	bl	8000638 <HAL_ADC_ConfigChannel>
 8012b36:	4603      	mov	r3, r0
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d001      	beq.n	8012b40 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8012b3c:	f001 f988 	bl	8013e50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8012b40:	bf00      	nop
 8012b42:	3710      	adds	r7, #16
 8012b44:	46bd      	mov	sp, r7
 8012b46:	bd80      	pop	{r7, pc}
 8012b48:	20009100 	.word	0x20009100
 8012b4c:	40012200 	.word	0x40012200
 8012b50:	0f000001 	.word	0x0f000001

08012b54 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8012b54:	b580      	push	{r7, lr}
 8012b56:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8012b58:	4b0d      	ldr	r3, [pc, #52]	; (8012b90 <MX_CRC_Init+0x3c>)
 8012b5a:	4a0e      	ldr	r2, [pc, #56]	; (8012b94 <MX_CRC_Init+0x40>)
 8012b5c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8012b5e:	4b0c      	ldr	r3, [pc, #48]	; (8012b90 <MX_CRC_Init+0x3c>)
 8012b60:	2200      	movs	r2, #0
 8012b62:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8012b64:	4b0a      	ldr	r3, [pc, #40]	; (8012b90 <MX_CRC_Init+0x3c>)
 8012b66:	2200      	movs	r2, #0
 8012b68:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8012b6a:	4b09      	ldr	r3, [pc, #36]	; (8012b90 <MX_CRC_Init+0x3c>)
 8012b6c:	2200      	movs	r2, #0
 8012b6e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8012b70:	4b07      	ldr	r3, [pc, #28]	; (8012b90 <MX_CRC_Init+0x3c>)
 8012b72:	2200      	movs	r2, #0
 8012b74:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8012b76:	4b06      	ldr	r3, [pc, #24]	; (8012b90 <MX_CRC_Init+0x3c>)
 8012b78:	2201      	movs	r2, #1
 8012b7a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8012b7c:	4804      	ldr	r0, [pc, #16]	; (8012b90 <MX_CRC_Init+0x3c>)
 8012b7e:	f7ee f86b 	bl	8000c58 <HAL_CRC_Init>
 8012b82:	4603      	mov	r3, r0
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d001      	beq.n	8012b8c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8012b88:	f001 f962 	bl	8013e50 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8012b8c:	bf00      	nop
 8012b8e:	bd80      	pop	{r7, pc}
 8012b90:	20008b30 	.word	0x20008b30
 8012b94:	40023000 	.word	0x40023000

08012b98 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8012b98:	b580      	push	{r7, lr}
 8012b9a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8012b9c:	4b16      	ldr	r3, [pc, #88]	; (8012bf8 <MX_DCMI_Init+0x60>)
 8012b9e:	4a17      	ldr	r2, [pc, #92]	; (8012bfc <MX_DCMI_Init+0x64>)
 8012ba0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8012ba2:	4b15      	ldr	r3, [pc, #84]	; (8012bf8 <MX_DCMI_Init+0x60>)
 8012ba4:	2200      	movs	r2, #0
 8012ba6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8012ba8:	4b13      	ldr	r3, [pc, #76]	; (8012bf8 <MX_DCMI_Init+0x60>)
 8012baa:	2200      	movs	r2, #0
 8012bac:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8012bae:	4b12      	ldr	r3, [pc, #72]	; (8012bf8 <MX_DCMI_Init+0x60>)
 8012bb0:	2200      	movs	r2, #0
 8012bb2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8012bb4:	4b10      	ldr	r3, [pc, #64]	; (8012bf8 <MX_DCMI_Init+0x60>)
 8012bb6:	2200      	movs	r2, #0
 8012bb8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8012bba:	4b0f      	ldr	r3, [pc, #60]	; (8012bf8 <MX_DCMI_Init+0x60>)
 8012bbc:	2200      	movs	r2, #0
 8012bbe:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8012bc0:	4b0d      	ldr	r3, [pc, #52]	; (8012bf8 <MX_DCMI_Init+0x60>)
 8012bc2:	2200      	movs	r2, #0
 8012bc4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8012bc6:	4b0c      	ldr	r3, [pc, #48]	; (8012bf8 <MX_DCMI_Init+0x60>)
 8012bc8:	2200      	movs	r2, #0
 8012bca:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8012bcc:	4b0a      	ldr	r3, [pc, #40]	; (8012bf8 <MX_DCMI_Init+0x60>)
 8012bce:	2200      	movs	r2, #0
 8012bd0:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8012bd2:	4b09      	ldr	r3, [pc, #36]	; (8012bf8 <MX_DCMI_Init+0x60>)
 8012bd4:	2200      	movs	r2, #0
 8012bd6:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8012bd8:	4b07      	ldr	r3, [pc, #28]	; (8012bf8 <MX_DCMI_Init+0x60>)
 8012bda:	2200      	movs	r2, #0
 8012bdc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8012bde:	4b06      	ldr	r3, [pc, #24]	; (8012bf8 <MX_DCMI_Init+0x60>)
 8012be0:	2200      	movs	r2, #0
 8012be2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8012be4:	4804      	ldr	r0, [pc, #16]	; (8012bf8 <MX_DCMI_Init+0x60>)
 8012be6:	f7ee f921 	bl	8000e2c <HAL_DCMI_Init>
 8012bea:	4603      	mov	r3, r0
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d001      	beq.n	8012bf4 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8012bf0:	f001 f92e 	bl	8013e50 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8012bf4:	bf00      	nop
 8012bf6:	bd80      	pop	{r7, pc}
 8012bf8:	20009148 	.word	0x20009148
 8012bfc:	50050000 	.word	0x50050000

08012c00 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8012c04:	4b15      	ldr	r3, [pc, #84]	; (8012c5c <MX_DMA2D_Init+0x5c>)
 8012c06:	4a16      	ldr	r2, [pc, #88]	; (8012c60 <MX_DMA2D_Init+0x60>)
 8012c08:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8012c0a:	4b14      	ldr	r3, [pc, #80]	; (8012c5c <MX_DMA2D_Init+0x5c>)
 8012c0c:	2200      	movs	r2, #0
 8012c0e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8012c10:	4b12      	ldr	r3, [pc, #72]	; (8012c5c <MX_DMA2D_Init+0x5c>)
 8012c12:	2200      	movs	r2, #0
 8012c14:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8012c16:	4b11      	ldr	r3, [pc, #68]	; (8012c5c <MX_DMA2D_Init+0x5c>)
 8012c18:	2200      	movs	r2, #0
 8012c1a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8012c1c:	4b0f      	ldr	r3, [pc, #60]	; (8012c5c <MX_DMA2D_Init+0x5c>)
 8012c1e:	2200      	movs	r2, #0
 8012c20:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8012c22:	4b0e      	ldr	r3, [pc, #56]	; (8012c5c <MX_DMA2D_Init+0x5c>)
 8012c24:	2200      	movs	r2, #0
 8012c26:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8012c28:	4b0c      	ldr	r3, [pc, #48]	; (8012c5c <MX_DMA2D_Init+0x5c>)
 8012c2a:	2200      	movs	r2, #0
 8012c2c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8012c2e:	4b0b      	ldr	r3, [pc, #44]	; (8012c5c <MX_DMA2D_Init+0x5c>)
 8012c30:	2200      	movs	r2, #0
 8012c32:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8012c34:	4809      	ldr	r0, [pc, #36]	; (8012c5c <MX_DMA2D_Init+0x5c>)
 8012c36:	f7ee fd0f 	bl	8001658 <HAL_DMA2D_Init>
 8012c3a:	4603      	mov	r3, r0
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d001      	beq.n	8012c44 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8012c40:	f001 f906 	bl	8013e50 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8012c44:	2101      	movs	r1, #1
 8012c46:	4805      	ldr	r0, [pc, #20]	; (8012c5c <MX_DMA2D_Init+0x5c>)
 8012c48:	f7ee fe60 	bl	800190c <HAL_DMA2D_ConfigLayer>
 8012c4c:	4603      	mov	r3, r0
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d001      	beq.n	8012c56 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8012c52:	f001 f8fd 	bl	8013e50 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8012c56:	bf00      	nop
 8012c58:	bd80      	pop	{r7, pc}
 8012c5a:	bf00      	nop
 8012c5c:	200097bc 	.word	0x200097bc
 8012c60:	4002b000 	.word	0x4002b000

08012c64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8012c64:	b580      	push	{r7, lr}
 8012c66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8012c68:	4b1b      	ldr	r3, [pc, #108]	; (8012cd8 <MX_I2C1_Init+0x74>)
 8012c6a:	4a1c      	ldr	r2, [pc, #112]	; (8012cdc <MX_I2C1_Init+0x78>)
 8012c6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8012c6e:	4b1a      	ldr	r3, [pc, #104]	; (8012cd8 <MX_I2C1_Init+0x74>)
 8012c70:	4a1b      	ldr	r2, [pc, #108]	; (8012ce0 <MX_I2C1_Init+0x7c>)
 8012c72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8012c74:	4b18      	ldr	r3, [pc, #96]	; (8012cd8 <MX_I2C1_Init+0x74>)
 8012c76:	2200      	movs	r2, #0
 8012c78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8012c7a:	4b17      	ldr	r3, [pc, #92]	; (8012cd8 <MX_I2C1_Init+0x74>)
 8012c7c:	2201      	movs	r2, #1
 8012c7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8012c80:	4b15      	ldr	r3, [pc, #84]	; (8012cd8 <MX_I2C1_Init+0x74>)
 8012c82:	2200      	movs	r2, #0
 8012c84:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8012c86:	4b14      	ldr	r3, [pc, #80]	; (8012cd8 <MX_I2C1_Init+0x74>)
 8012c88:	2200      	movs	r2, #0
 8012c8a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8012c8c:	4b12      	ldr	r3, [pc, #72]	; (8012cd8 <MX_I2C1_Init+0x74>)
 8012c8e:	2200      	movs	r2, #0
 8012c90:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8012c92:	4b11      	ldr	r3, [pc, #68]	; (8012cd8 <MX_I2C1_Init+0x74>)
 8012c94:	2200      	movs	r2, #0
 8012c96:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8012c98:	4b0f      	ldr	r3, [pc, #60]	; (8012cd8 <MX_I2C1_Init+0x74>)
 8012c9a:	2200      	movs	r2, #0
 8012c9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8012c9e:	480e      	ldr	r0, [pc, #56]	; (8012cd8 <MX_I2C1_Init+0x74>)
 8012ca0:	f7f0 fcfc 	bl	800369c <HAL_I2C_Init>
 8012ca4:	4603      	mov	r3, r0
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d001      	beq.n	8012cae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8012caa:	f001 f8d1 	bl	8013e50 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8012cae:	2100      	movs	r1, #0
 8012cb0:	4809      	ldr	r0, [pc, #36]	; (8012cd8 <MX_I2C1_Init+0x74>)
 8012cb2:	f7f0 fd83 	bl	80037bc <HAL_I2CEx_ConfigAnalogFilter>
 8012cb6:	4603      	mov	r3, r0
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d001      	beq.n	8012cc0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8012cbc:	f001 f8c8 	bl	8013e50 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8012cc0:	2100      	movs	r1, #0
 8012cc2:	4805      	ldr	r0, [pc, #20]	; (8012cd8 <MX_I2C1_Init+0x74>)
 8012cc4:	f7f0 fdc5 	bl	8003852 <HAL_I2CEx_ConfigDigitalFilter>
 8012cc8:	4603      	mov	r3, r0
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d001      	beq.n	8012cd2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8012cce:	f001 f8bf 	bl	8013e50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8012cd2:	bf00      	nop
 8012cd4:	bd80      	pop	{r7, pc}
 8012cd6:	bf00      	nop
 8012cd8:	20008ae4 	.word	0x20008ae4
 8012cdc:	40005400 	.word	0x40005400
 8012ce0:	00c0eaff 	.word	0x00c0eaff

08012ce4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8012ce8:	4b1b      	ldr	r3, [pc, #108]	; (8012d58 <MX_I2C3_Init+0x74>)
 8012cea:	4a1c      	ldr	r2, [pc, #112]	; (8012d5c <MX_I2C3_Init+0x78>)
 8012cec:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8012cee:	4b1a      	ldr	r3, [pc, #104]	; (8012d58 <MX_I2C3_Init+0x74>)
 8012cf0:	4a1b      	ldr	r2, [pc, #108]	; (8012d60 <MX_I2C3_Init+0x7c>)
 8012cf2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8012cf4:	4b18      	ldr	r3, [pc, #96]	; (8012d58 <MX_I2C3_Init+0x74>)
 8012cf6:	2200      	movs	r2, #0
 8012cf8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8012cfa:	4b17      	ldr	r3, [pc, #92]	; (8012d58 <MX_I2C3_Init+0x74>)
 8012cfc:	2201      	movs	r2, #1
 8012cfe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8012d00:	4b15      	ldr	r3, [pc, #84]	; (8012d58 <MX_I2C3_Init+0x74>)
 8012d02:	2200      	movs	r2, #0
 8012d04:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8012d06:	4b14      	ldr	r3, [pc, #80]	; (8012d58 <MX_I2C3_Init+0x74>)
 8012d08:	2200      	movs	r2, #0
 8012d0a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8012d0c:	4b12      	ldr	r3, [pc, #72]	; (8012d58 <MX_I2C3_Init+0x74>)
 8012d0e:	2200      	movs	r2, #0
 8012d10:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8012d12:	4b11      	ldr	r3, [pc, #68]	; (8012d58 <MX_I2C3_Init+0x74>)
 8012d14:	2200      	movs	r2, #0
 8012d16:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8012d18:	4b0f      	ldr	r3, [pc, #60]	; (8012d58 <MX_I2C3_Init+0x74>)
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8012d1e:	480e      	ldr	r0, [pc, #56]	; (8012d58 <MX_I2C3_Init+0x74>)
 8012d20:	f7f0 fcbc 	bl	800369c <HAL_I2C_Init>
 8012d24:	4603      	mov	r3, r0
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d001      	beq.n	8012d2e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8012d2a:	f001 f891 	bl	8013e50 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8012d2e:	2100      	movs	r1, #0
 8012d30:	4809      	ldr	r0, [pc, #36]	; (8012d58 <MX_I2C3_Init+0x74>)
 8012d32:	f7f0 fd43 	bl	80037bc <HAL_I2CEx_ConfigAnalogFilter>
 8012d36:	4603      	mov	r3, r0
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d001      	beq.n	8012d40 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8012d3c:	f001 f888 	bl	8013e50 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8012d40:	2100      	movs	r1, #0
 8012d42:	4805      	ldr	r0, [pc, #20]	; (8012d58 <MX_I2C3_Init+0x74>)
 8012d44:	f7f0 fd85 	bl	8003852 <HAL_I2CEx_ConfigDigitalFilter>
 8012d48:	4603      	mov	r3, r0
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d001      	beq.n	8012d52 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8012d4e:	f001 f87f 	bl	8013e50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8012d52:	bf00      	nop
 8012d54:	bd80      	pop	{r7, pc}
 8012d56:	bf00      	nop
 8012d58:	20008988 	.word	0x20008988
 8012d5c:	40005c00 	.word	0x40005c00
 8012d60:	00c0eaff 	.word	0x00c0eaff

08012d64 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b08e      	sub	sp, #56	; 0x38
 8012d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8012d6a:	1d3b      	adds	r3, r7, #4
 8012d6c:	2234      	movs	r2, #52	; 0x34
 8012d6e:	2100      	movs	r1, #0
 8012d70:	4618      	mov	r0, r3
 8012d72:	f002 fea4 	bl	8015abe <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8012d76:	4b3a      	ldr	r3, [pc, #232]	; (8012e60 <MX_LTDC_Init+0xfc>)
 8012d78:	4a3a      	ldr	r2, [pc, #232]	; (8012e64 <MX_LTDC_Init+0x100>)
 8012d7a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8012d7c:	4b38      	ldr	r3, [pc, #224]	; (8012e60 <MX_LTDC_Init+0xfc>)
 8012d7e:	2200      	movs	r2, #0
 8012d80:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8012d82:	4b37      	ldr	r3, [pc, #220]	; (8012e60 <MX_LTDC_Init+0xfc>)
 8012d84:	2200      	movs	r2, #0
 8012d86:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8012d88:	4b35      	ldr	r3, [pc, #212]	; (8012e60 <MX_LTDC_Init+0xfc>)
 8012d8a:	2200      	movs	r2, #0
 8012d8c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8012d8e:	4b34      	ldr	r3, [pc, #208]	; (8012e60 <MX_LTDC_Init+0xfc>)
 8012d90:	2200      	movs	r2, #0
 8012d92:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8012d94:	4b32      	ldr	r3, [pc, #200]	; (8012e60 <MX_LTDC_Init+0xfc>)
 8012d96:	2228      	movs	r2, #40	; 0x28
 8012d98:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8012d9a:	4b31      	ldr	r3, [pc, #196]	; (8012e60 <MX_LTDC_Init+0xfc>)
 8012d9c:	2209      	movs	r2, #9
 8012d9e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8012da0:	4b2f      	ldr	r3, [pc, #188]	; (8012e60 <MX_LTDC_Init+0xfc>)
 8012da2:	2235      	movs	r2, #53	; 0x35
 8012da4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8012da6:	4b2e      	ldr	r3, [pc, #184]	; (8012e60 <MX_LTDC_Init+0xfc>)
 8012da8:	220b      	movs	r2, #11
 8012daa:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8012dac:	4b2c      	ldr	r3, [pc, #176]	; (8012e60 <MX_LTDC_Init+0xfc>)
 8012dae:	f240 2215 	movw	r2, #533	; 0x215
 8012db2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8012db4:	4b2a      	ldr	r3, [pc, #168]	; (8012e60 <MX_LTDC_Init+0xfc>)
 8012db6:	f240 121b 	movw	r2, #283	; 0x11b
 8012dba:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8012dbc:	4b28      	ldr	r3, [pc, #160]	; (8012e60 <MX_LTDC_Init+0xfc>)
 8012dbe:	f240 2235 	movw	r2, #565	; 0x235
 8012dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8012dc4:	4b26      	ldr	r3, [pc, #152]	; (8012e60 <MX_LTDC_Init+0xfc>)
 8012dc6:	f240 121d 	movw	r2, #285	; 0x11d
 8012dca:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8012dcc:	4b24      	ldr	r3, [pc, #144]	; (8012e60 <MX_LTDC_Init+0xfc>)
 8012dce:	2200      	movs	r2, #0
 8012dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8012dd4:	4b22      	ldr	r3, [pc, #136]	; (8012e60 <MX_LTDC_Init+0xfc>)
 8012dd6:	2200      	movs	r2, #0
 8012dd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8012ddc:	4b20      	ldr	r3, [pc, #128]	; (8012e60 <MX_LTDC_Init+0xfc>)
 8012dde:	2200      	movs	r2, #0
 8012de0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8012de4:	481e      	ldr	r0, [pc, #120]	; (8012e60 <MX_LTDC_Init+0xfc>)
 8012de6:	f7f0 fd81 	bl	80038ec <HAL_LTDC_Init>
 8012dea:	4603      	mov	r3, r0
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d001      	beq.n	8012df4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8012df0:	f001 f82e 	bl	8013e50 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8012df4:	2300      	movs	r3, #0
 8012df6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8012df8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8012dfc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8012dfe:	2300      	movs	r3, #0
 8012e00:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8012e02:	f44f 7388 	mov.w	r3, #272	; 0x110
 8012e06:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8012e08:	2302      	movs	r3, #2
 8012e0a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8012e0c:	23ff      	movs	r3, #255	; 0xff
 8012e0e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8012e10:	2300      	movs	r3, #0
 8012e12:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8012e14:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8012e18:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8012e1a:	2307      	movs	r3, #7
 8012e1c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8012e1e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8012e22:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8012e24:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8012e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8012e2a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8012e2e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8012e30:	2300      	movs	r3, #0
 8012e32:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8012e36:	2300      	movs	r3, #0
 8012e38:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8012e3c:	2300      	movs	r3, #0
 8012e3e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8012e42:	1d3b      	adds	r3, r7, #4
 8012e44:	2200      	movs	r2, #0
 8012e46:	4619      	mov	r1, r3
 8012e48:	4805      	ldr	r0, [pc, #20]	; (8012e60 <MX_LTDC_Init+0xfc>)
 8012e4a:	f7f0 fee1 	bl	8003c10 <HAL_LTDC_ConfigLayer>
 8012e4e:	4603      	mov	r3, r0
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d001      	beq.n	8012e58 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8012e54:	f000 fffc 	bl	8013e50 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8012e58:	bf00      	nop
 8012e5a:	3738      	adds	r7, #56	; 0x38
 8012e5c:	46bd      	mov	sp, r7
 8012e5e:	bd80      	pop	{r7, pc}
 8012e60:	20008c58 	.word	0x20008c58
 8012e64:	40016800 	.word	0x40016800

08012e68 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8012e6c:	4b12      	ldr	r3, [pc, #72]	; (8012eb8 <MX_QUADSPI_Init+0x50>)
 8012e6e:	4a13      	ldr	r2, [pc, #76]	; (8012ebc <MX_QUADSPI_Init+0x54>)
 8012e70:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8012e72:	4b11      	ldr	r3, [pc, #68]	; (8012eb8 <MX_QUADSPI_Init+0x50>)
 8012e74:	22ff      	movs	r2, #255	; 0xff
 8012e76:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8012e78:	4b0f      	ldr	r3, [pc, #60]	; (8012eb8 <MX_QUADSPI_Init+0x50>)
 8012e7a:	2201      	movs	r2, #1
 8012e7c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8012e7e:	4b0e      	ldr	r3, [pc, #56]	; (8012eb8 <MX_QUADSPI_Init+0x50>)
 8012e80:	2200      	movs	r2, #0
 8012e82:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8012e84:	4b0c      	ldr	r3, [pc, #48]	; (8012eb8 <MX_QUADSPI_Init+0x50>)
 8012e86:	2201      	movs	r2, #1
 8012e88:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8012e8a:	4b0b      	ldr	r3, [pc, #44]	; (8012eb8 <MX_QUADSPI_Init+0x50>)
 8012e8c:	2200      	movs	r2, #0
 8012e8e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8012e90:	4b09      	ldr	r3, [pc, #36]	; (8012eb8 <MX_QUADSPI_Init+0x50>)
 8012e92:	2200      	movs	r2, #0
 8012e94:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8012e96:	4b08      	ldr	r3, [pc, #32]	; (8012eb8 <MX_QUADSPI_Init+0x50>)
 8012e98:	2200      	movs	r2, #0
 8012e9a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8012e9c:	4b06      	ldr	r3, [pc, #24]	; (8012eb8 <MX_QUADSPI_Init+0x50>)
 8012e9e:	2200      	movs	r2, #0
 8012ea0:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8012ea2:	4805      	ldr	r0, [pc, #20]	; (8012eb8 <MX_QUADSPI_Init+0x50>)
 8012ea4:	f7f1 f8ec 	bl	8004080 <HAL_QSPI_Init>
 8012ea8:	4603      	mov	r3, r0
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d001      	beq.n	8012eb2 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8012eae:	f000 ffcf 	bl	8013e50 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8012eb2:	bf00      	nop
 8012eb4:	bd80      	pop	{r7, pc}
 8012eb6:	bf00      	nop
 8012eb8:	20009910 	.word	0x20009910
 8012ebc:	a0001000 	.word	0xa0001000

08012ec0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8012ec0:	b580      	push	{r7, lr}
 8012ec2:	b092      	sub	sp, #72	; 0x48
 8012ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8012ec6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012eca:	2200      	movs	r2, #0
 8012ecc:	601a      	str	r2, [r3, #0]
 8012ece:	605a      	str	r2, [r3, #4]
 8012ed0:	609a      	str	r2, [r3, #8]
 8012ed2:	60da      	str	r2, [r3, #12]
 8012ed4:	611a      	str	r2, [r3, #16]
 8012ed6:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8012ed8:	2300      	movs	r3, #0
 8012eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8012edc:	463b      	mov	r3, r7
 8012ede:	222c      	movs	r2, #44	; 0x2c
 8012ee0:	2100      	movs	r1, #0
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	f002 fdeb 	bl	8015abe <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8012ee8:	4b47      	ldr	r3, [pc, #284]	; (8013008 <MX_RTC_Init+0x148>)
 8012eea:	4a48      	ldr	r2, [pc, #288]	; (801300c <MX_RTC_Init+0x14c>)
 8012eec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8012eee:	4b46      	ldr	r3, [pc, #280]	; (8013008 <MX_RTC_Init+0x148>)
 8012ef0:	2200      	movs	r2, #0
 8012ef2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8012ef4:	4b44      	ldr	r3, [pc, #272]	; (8013008 <MX_RTC_Init+0x148>)
 8012ef6:	227f      	movs	r2, #127	; 0x7f
 8012ef8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8012efa:	4b43      	ldr	r3, [pc, #268]	; (8013008 <MX_RTC_Init+0x148>)
 8012efc:	22ff      	movs	r2, #255	; 0xff
 8012efe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8012f00:	4b41      	ldr	r3, [pc, #260]	; (8013008 <MX_RTC_Init+0x148>)
 8012f02:	2200      	movs	r2, #0
 8012f04:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8012f06:	4b40      	ldr	r3, [pc, #256]	; (8013008 <MX_RTC_Init+0x148>)
 8012f08:	2200      	movs	r2, #0
 8012f0a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8012f0c:	4b3e      	ldr	r3, [pc, #248]	; (8013008 <MX_RTC_Init+0x148>)
 8012f0e:	2200      	movs	r2, #0
 8012f10:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8012f12:	483d      	ldr	r0, [pc, #244]	; (8013008 <MX_RTC_Init+0x148>)
 8012f14:	f7f2 fb16 	bl	8005544 <HAL_RTC_Init>
 8012f18:	4603      	mov	r3, r0
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d001      	beq.n	8012f22 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8012f1e:	f000 ff97 	bl	8013e50 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8012f22:	2300      	movs	r3, #0
 8012f24:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8012f28:	2300      	movs	r3, #0
 8012f2a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8012f2e:	2300      	movs	r3, #0
 8012f30:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8012f34:	2300      	movs	r3, #0
 8012f36:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8012f38:	2300      	movs	r3, #0
 8012f3a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8012f3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012f40:	2201      	movs	r2, #1
 8012f42:	4619      	mov	r1, r3
 8012f44:	4830      	ldr	r0, [pc, #192]	; (8013008 <MX_RTC_Init+0x148>)
 8012f46:	f7f2 fb79 	bl	800563c <HAL_RTC_SetTime>
 8012f4a:	4603      	mov	r3, r0
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d001      	beq.n	8012f54 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8012f50:	f000 ff7e 	bl	8013e50 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8012f54:	2301      	movs	r3, #1
 8012f56:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8012f5a:	2301      	movs	r3, #1
 8012f5c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8012f60:	2301      	movs	r3, #1
 8012f62:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8012f66:	2300      	movs	r3, #0
 8012f68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8012f6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012f70:	2201      	movs	r2, #1
 8012f72:	4619      	mov	r1, r3
 8012f74:	4824      	ldr	r0, [pc, #144]	; (8013008 <MX_RTC_Init+0x148>)
 8012f76:	f7f2 fc1f 	bl	80057b8 <HAL_RTC_SetDate>
 8012f7a:	4603      	mov	r3, r0
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d001      	beq.n	8012f84 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8012f80:	f000 ff66 	bl	8013e50 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8012f84:	2300      	movs	r3, #0
 8012f86:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8012f88:	2300      	movs	r3, #0
 8012f8a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8012f90:	2300      	movs	r3, #0
 8012f92:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8012f94:	2300      	movs	r3, #0
 8012f96:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8012f98:	2300      	movs	r3, #0
 8012f9a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8012f9c:	2300      	movs	r3, #0
 8012f9e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8012fa4:	2300      	movs	r3, #0
 8012fa6:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8012fa8:	2301      	movs	r3, #1
 8012faa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8012fae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012fb2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8012fb4:	463b      	mov	r3, r7
 8012fb6:	2201      	movs	r2, #1
 8012fb8:	4619      	mov	r1, r3
 8012fba:	4813      	ldr	r0, [pc, #76]	; (8013008 <MX_RTC_Init+0x148>)
 8012fbc:	f7f2 fca4 	bl	8005908 <HAL_RTC_SetAlarm>
 8012fc0:	4603      	mov	r3, r0
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d001      	beq.n	8012fca <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8012fc6:	f000 ff43 	bl	8013e50 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 8012fca:	2301      	movs	r3, #1
 8012fcc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8012fd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8012fd6:	463b      	mov	r3, r7
 8012fd8:	2201      	movs	r2, #1
 8012fda:	4619      	mov	r1, r3
 8012fdc:	480a      	ldr	r0, [pc, #40]	; (8013008 <MX_RTC_Init+0x148>)
 8012fde:	f7f2 fc93 	bl	8005908 <HAL_RTC_SetAlarm>
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d001      	beq.n	8012fec <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 8012fe8:	f000 ff32 	bl	8013e50 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8012fec:	2202      	movs	r2, #2
 8012fee:	2100      	movs	r1, #0
 8012ff0:	4805      	ldr	r0, [pc, #20]	; (8013008 <MX_RTC_Init+0x148>)
 8012ff2:	f7f2 fe13 	bl	8005c1c <HAL_RTCEx_SetTimeStamp>
 8012ff6:	4603      	mov	r3, r0
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d001      	beq.n	8013000 <MX_RTC_Init+0x140>
  {
    Error_Handler();
 8012ffc:	f000 ff28 	bl	8013e50 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8013000:	bf00      	nop
 8013002:	3748      	adds	r7, #72	; 0x48
 8013004:	46bd      	mov	sp, r7
 8013006:	bd80      	pop	{r7, pc}
 8013008:	20009218 	.word	0x20009218
 801300c:	40002800 	.word	0x40002800

08013010 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8013010:	b580      	push	{r7, lr}
 8013012:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8013014:	4b4d      	ldr	r3, [pc, #308]	; (801314c <MX_SAI2_Init+0x13c>)
 8013016:	4a4e      	ldr	r2, [pc, #312]	; (8013150 <MX_SAI2_Init+0x140>)
 8013018:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 801301a:	4b4c      	ldr	r3, [pc, #304]	; (801314c <MX_SAI2_Init+0x13c>)
 801301c:	2200      	movs	r2, #0
 801301e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8013020:	4b4a      	ldr	r3, [pc, #296]	; (801314c <MX_SAI2_Init+0x13c>)
 8013022:	2200      	movs	r2, #0
 8013024:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8013026:	4b49      	ldr	r3, [pc, #292]	; (801314c <MX_SAI2_Init+0x13c>)
 8013028:	2240      	movs	r2, #64	; 0x40
 801302a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 801302c:	4b47      	ldr	r3, [pc, #284]	; (801314c <MX_SAI2_Init+0x13c>)
 801302e:	2200      	movs	r2, #0
 8013030:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8013032:	4b46      	ldr	r3, [pc, #280]	; (801314c <MX_SAI2_Init+0x13c>)
 8013034:	2200      	movs	r2, #0
 8013036:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8013038:	4b44      	ldr	r3, [pc, #272]	; (801314c <MX_SAI2_Init+0x13c>)
 801303a:	2200      	movs	r2, #0
 801303c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 801303e:	4b43      	ldr	r3, [pc, #268]	; (801314c <MX_SAI2_Init+0x13c>)
 8013040:	2200      	movs	r2, #0
 8013042:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8013044:	4b41      	ldr	r3, [pc, #260]	; (801314c <MX_SAI2_Init+0x13c>)
 8013046:	2200      	movs	r2, #0
 8013048:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 801304a:	4b40      	ldr	r3, [pc, #256]	; (801314c <MX_SAI2_Init+0x13c>)
 801304c:	2200      	movs	r2, #0
 801304e:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8013050:	4b3e      	ldr	r3, [pc, #248]	; (801314c <MX_SAI2_Init+0x13c>)
 8013052:	4a40      	ldr	r2, [pc, #256]	; (8013154 <MX_SAI2_Init+0x144>)
 8013054:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8013056:	4b3d      	ldr	r3, [pc, #244]	; (801314c <MX_SAI2_Init+0x13c>)
 8013058:	2200      	movs	r2, #0
 801305a:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 801305c:	4b3b      	ldr	r3, [pc, #236]	; (801314c <MX_SAI2_Init+0x13c>)
 801305e:	2200      	movs	r2, #0
 8013060:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8013062:	4b3a      	ldr	r3, [pc, #232]	; (801314c <MX_SAI2_Init+0x13c>)
 8013064:	2200      	movs	r2, #0
 8013066:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8013068:	4b38      	ldr	r3, [pc, #224]	; (801314c <MX_SAI2_Init+0x13c>)
 801306a:	2200      	movs	r2, #0
 801306c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 801306e:	4b37      	ldr	r3, [pc, #220]	; (801314c <MX_SAI2_Init+0x13c>)
 8013070:	2208      	movs	r2, #8
 8013072:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8013074:	4b35      	ldr	r3, [pc, #212]	; (801314c <MX_SAI2_Init+0x13c>)
 8013076:	2201      	movs	r2, #1
 8013078:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 801307a:	4b34      	ldr	r3, [pc, #208]	; (801314c <MX_SAI2_Init+0x13c>)
 801307c:	2200      	movs	r2, #0
 801307e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8013080:	4b32      	ldr	r3, [pc, #200]	; (801314c <MX_SAI2_Init+0x13c>)
 8013082:	2200      	movs	r2, #0
 8013084:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8013086:	4b31      	ldr	r3, [pc, #196]	; (801314c <MX_SAI2_Init+0x13c>)
 8013088:	2200      	movs	r2, #0
 801308a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 801308c:	4b2f      	ldr	r3, [pc, #188]	; (801314c <MX_SAI2_Init+0x13c>)
 801308e:	2200      	movs	r2, #0
 8013090:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8013092:	4b2e      	ldr	r3, [pc, #184]	; (801314c <MX_SAI2_Init+0x13c>)
 8013094:	2200      	movs	r2, #0
 8013096:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8013098:	4b2c      	ldr	r3, [pc, #176]	; (801314c <MX_SAI2_Init+0x13c>)
 801309a:	2201      	movs	r2, #1
 801309c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 801309e:	4b2b      	ldr	r3, [pc, #172]	; (801314c <MX_SAI2_Init+0x13c>)
 80130a0:	2200      	movs	r2, #0
 80130a2:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80130a4:	4829      	ldr	r0, [pc, #164]	; (801314c <MX_SAI2_Init+0x13c>)
 80130a6:	f7f2 fe0f 	bl	8005cc8 <HAL_SAI_Init>
 80130aa:	4603      	mov	r3, r0
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d001      	beq.n	80130b4 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 80130b0:	f000 fece 	bl	8013e50 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80130b4:	4b28      	ldr	r3, [pc, #160]	; (8013158 <MX_SAI2_Init+0x148>)
 80130b6:	4a29      	ldr	r2, [pc, #164]	; (801315c <MX_SAI2_Init+0x14c>)
 80130b8:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80130ba:	4b27      	ldr	r3, [pc, #156]	; (8013158 <MX_SAI2_Init+0x148>)
 80130bc:	2200      	movs	r2, #0
 80130be:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80130c0:	4b25      	ldr	r3, [pc, #148]	; (8013158 <MX_SAI2_Init+0x148>)
 80130c2:	2203      	movs	r2, #3
 80130c4:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 80130c6:	4b24      	ldr	r3, [pc, #144]	; (8013158 <MX_SAI2_Init+0x148>)
 80130c8:	2240      	movs	r2, #64	; 0x40
 80130ca:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80130cc:	4b22      	ldr	r3, [pc, #136]	; (8013158 <MX_SAI2_Init+0x148>)
 80130ce:	2200      	movs	r2, #0
 80130d0:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80130d2:	4b21      	ldr	r3, [pc, #132]	; (8013158 <MX_SAI2_Init+0x148>)
 80130d4:	2200      	movs	r2, #0
 80130d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80130d8:	4b1f      	ldr	r3, [pc, #124]	; (8013158 <MX_SAI2_Init+0x148>)
 80130da:	2201      	movs	r2, #1
 80130dc:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80130de:	4b1e      	ldr	r3, [pc, #120]	; (8013158 <MX_SAI2_Init+0x148>)
 80130e0:	2200      	movs	r2, #0
 80130e2:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80130e4:	4b1c      	ldr	r3, [pc, #112]	; (8013158 <MX_SAI2_Init+0x148>)
 80130e6:	2200      	movs	r2, #0
 80130e8:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80130ea:	4b1b      	ldr	r3, [pc, #108]	; (8013158 <MX_SAI2_Init+0x148>)
 80130ec:	2200      	movs	r2, #0
 80130ee:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80130f0:	4b19      	ldr	r3, [pc, #100]	; (8013158 <MX_SAI2_Init+0x148>)
 80130f2:	2200      	movs	r2, #0
 80130f4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80130f6:	4b18      	ldr	r3, [pc, #96]	; (8013158 <MX_SAI2_Init+0x148>)
 80130f8:	2200      	movs	r2, #0
 80130fa:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80130fc:	4b16      	ldr	r3, [pc, #88]	; (8013158 <MX_SAI2_Init+0x148>)
 80130fe:	2200      	movs	r2, #0
 8013100:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8013102:	4b15      	ldr	r3, [pc, #84]	; (8013158 <MX_SAI2_Init+0x148>)
 8013104:	2208      	movs	r2, #8
 8013106:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8013108:	4b13      	ldr	r3, [pc, #76]	; (8013158 <MX_SAI2_Init+0x148>)
 801310a:	2201      	movs	r2, #1
 801310c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 801310e:	4b12      	ldr	r3, [pc, #72]	; (8013158 <MX_SAI2_Init+0x148>)
 8013110:	2200      	movs	r2, #0
 8013112:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8013114:	4b10      	ldr	r3, [pc, #64]	; (8013158 <MX_SAI2_Init+0x148>)
 8013116:	2200      	movs	r2, #0
 8013118:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 801311a:	4b0f      	ldr	r3, [pc, #60]	; (8013158 <MX_SAI2_Init+0x148>)
 801311c:	2200      	movs	r2, #0
 801311e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8013120:	4b0d      	ldr	r3, [pc, #52]	; (8013158 <MX_SAI2_Init+0x148>)
 8013122:	2200      	movs	r2, #0
 8013124:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8013126:	4b0c      	ldr	r3, [pc, #48]	; (8013158 <MX_SAI2_Init+0x148>)
 8013128:	2200      	movs	r2, #0
 801312a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 801312c:	4b0a      	ldr	r3, [pc, #40]	; (8013158 <MX_SAI2_Init+0x148>)
 801312e:	2201      	movs	r2, #1
 8013130:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8013132:	4b09      	ldr	r3, [pc, #36]	; (8013158 <MX_SAI2_Init+0x148>)
 8013134:	2200      	movs	r2, #0
 8013136:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8013138:	4807      	ldr	r0, [pc, #28]	; (8013158 <MX_SAI2_Init+0x148>)
 801313a:	f7f2 fdc5 	bl	8005cc8 <HAL_SAI_Init>
 801313e:	4603      	mov	r3, r0
 8013140:	2b00      	cmp	r3, #0
 8013142:	d001      	beq.n	8013148 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8013144:	f000 fe84 	bl	8013e50 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8013148:	bf00      	nop
 801314a:	bd80      	pop	{r7, pc}
 801314c:	20008a60 	.word	0x20008a60
 8013150:	40015c04 	.word	0x40015c04
 8013154:	0002ee00 	.word	0x0002ee00
 8013158:	20008900 	.word	0x20008900
 801315c:	40015c24 	.word	0x40015c24

08013160 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8013160:	b480      	push	{r7}
 8013162:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8013164:	4b0c      	ldr	r3, [pc, #48]	; (8013198 <MX_SDMMC1_SD_Init+0x38>)
 8013166:	4a0d      	ldr	r2, [pc, #52]	; (801319c <MX_SDMMC1_SD_Init+0x3c>)
 8013168:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 801316a:	4b0b      	ldr	r3, [pc, #44]	; (8013198 <MX_SDMMC1_SD_Init+0x38>)
 801316c:	2200      	movs	r2, #0
 801316e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8013170:	4b09      	ldr	r3, [pc, #36]	; (8013198 <MX_SDMMC1_SD_Init+0x38>)
 8013172:	2200      	movs	r2, #0
 8013174:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8013176:	4b08      	ldr	r3, [pc, #32]	; (8013198 <MX_SDMMC1_SD_Init+0x38>)
 8013178:	2200      	movs	r2, #0
 801317a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 801317c:	4b06      	ldr	r3, [pc, #24]	; (8013198 <MX_SDMMC1_SD_Init+0x38>)
 801317e:	2200      	movs	r2, #0
 8013180:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8013182:	4b05      	ldr	r3, [pc, #20]	; (8013198 <MX_SDMMC1_SD_Init+0x38>)
 8013184:	2200      	movs	r2, #0
 8013186:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8013188:	4b03      	ldr	r3, [pc, #12]	; (8013198 <MX_SDMMC1_SD_Init+0x38>)
 801318a:	2200      	movs	r2, #0
 801318c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 801318e:	bf00      	nop
 8013190:	46bd      	mov	sp, r7
 8013192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013196:	4770      	bx	lr
 8013198:	20008b54 	.word	0x20008b54
 801319c:	40012c00 	.word	0x40012c00

080131a0 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 80131a0:	b580      	push	{r7, lr}
 80131a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 80131a4:	4b15      	ldr	r3, [pc, #84]	; (80131fc <MX_SPDIFRX_Init+0x5c>)
 80131a6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80131aa:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 80131ac:	4b13      	ldr	r3, [pc, #76]	; (80131fc <MX_SPDIFRX_Init+0x5c>)
 80131ae:	2200      	movs	r2, #0
 80131b0:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 80131b2:	4b12      	ldr	r3, [pc, #72]	; (80131fc <MX_SPDIFRX_Init+0x5c>)
 80131b4:	2200      	movs	r2, #0
 80131b6:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 80131b8:	4b10      	ldr	r3, [pc, #64]	; (80131fc <MX_SPDIFRX_Init+0x5c>)
 80131ba:	2200      	movs	r2, #0
 80131bc:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 80131be:	4b0f      	ldr	r3, [pc, #60]	; (80131fc <MX_SPDIFRX_Init+0x5c>)
 80131c0:	2200      	movs	r2, #0
 80131c2:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 80131c4:	4b0d      	ldr	r3, [pc, #52]	; (80131fc <MX_SPDIFRX_Init+0x5c>)
 80131c6:	2200      	movs	r2, #0
 80131c8:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 80131ca:	4b0c      	ldr	r3, [pc, #48]	; (80131fc <MX_SPDIFRX_Init+0x5c>)
 80131cc:	2200      	movs	r2, #0
 80131ce:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 80131d0:	4b0a      	ldr	r3, [pc, #40]	; (80131fc <MX_SPDIFRX_Init+0x5c>)
 80131d2:	2200      	movs	r2, #0
 80131d4:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 80131d6:	4b09      	ldr	r3, [pc, #36]	; (80131fc <MX_SPDIFRX_Init+0x5c>)
 80131d8:	2200      	movs	r2, #0
 80131da:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 80131dc:	4b07      	ldr	r3, [pc, #28]	; (80131fc <MX_SPDIFRX_Init+0x5c>)
 80131de:	2200      	movs	r2, #0
 80131e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 80131e2:	4b06      	ldr	r3, [pc, #24]	; (80131fc <MX_SPDIFRX_Init+0x5c>)
 80131e4:	2200      	movs	r2, #0
 80131e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 80131e8:	4804      	ldr	r0, [pc, #16]	; (80131fc <MX_SPDIFRX_Init+0x5c>)
 80131ea:	f7f4 fa27 	bl	800763c <HAL_SPDIFRX_Init>
 80131ee:	4603      	mov	r3, r0
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d001      	beq.n	80131f8 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 80131f4:	f000 fe2c 	bl	8013e50 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 80131f8:	bf00      	nop
 80131fa:	bd80      	pop	{r7, pc}
 80131fc:	20008a14 	.word	0x20008a14

08013200 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8013200:	b580      	push	{r7, lr}
 8013202:	b09a      	sub	sp, #104	; 0x68
 8013204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8013206:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801320a:	2200      	movs	r2, #0
 801320c:	601a      	str	r2, [r3, #0]
 801320e:	605a      	str	r2, [r3, #4]
 8013210:	609a      	str	r2, [r3, #8]
 8013212:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013214:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013218:	2200      	movs	r2, #0
 801321a:	601a      	str	r2, [r3, #0]
 801321c:	605a      	str	r2, [r3, #4]
 801321e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8013220:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013224:	2200      	movs	r2, #0
 8013226:	601a      	str	r2, [r3, #0]
 8013228:	605a      	str	r2, [r3, #4]
 801322a:	609a      	str	r2, [r3, #8]
 801322c:	60da      	str	r2, [r3, #12]
 801322e:	611a      	str	r2, [r3, #16]
 8013230:	615a      	str	r2, [r3, #20]
 8013232:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8013234:	1d3b      	adds	r3, r7, #4
 8013236:	222c      	movs	r2, #44	; 0x2c
 8013238:	2100      	movs	r1, #0
 801323a:	4618      	mov	r0, r3
 801323c:	f002 fc3f 	bl	8015abe <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8013240:	4b43      	ldr	r3, [pc, #268]	; (8013350 <MX_TIM1_Init+0x150>)
 8013242:	4a44      	ldr	r2, [pc, #272]	; (8013354 <MX_TIM1_Init+0x154>)
 8013244:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8013246:	4b42      	ldr	r3, [pc, #264]	; (8013350 <MX_TIM1_Init+0x150>)
 8013248:	2200      	movs	r2, #0
 801324a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 801324c:	4b40      	ldr	r3, [pc, #256]	; (8013350 <MX_TIM1_Init+0x150>)
 801324e:	2200      	movs	r2, #0
 8013250:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8013252:	4b3f      	ldr	r3, [pc, #252]	; (8013350 <MX_TIM1_Init+0x150>)
 8013254:	2200      	movs	r2, #0
 8013256:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8013258:	4b3d      	ldr	r3, [pc, #244]	; (8013350 <MX_TIM1_Init+0x150>)
 801325a:	2200      	movs	r2, #0
 801325c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 801325e:	4b3c      	ldr	r3, [pc, #240]	; (8013350 <MX_TIM1_Init+0x150>)
 8013260:	2200      	movs	r2, #0
 8013262:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013264:	4b3a      	ldr	r3, [pc, #232]	; (8013350 <MX_TIM1_Init+0x150>)
 8013266:	2200      	movs	r2, #0
 8013268:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 801326a:	4839      	ldr	r0, [pc, #228]	; (8013350 <MX_TIM1_Init+0x150>)
 801326c:	f7f4 fa42 	bl	80076f4 <HAL_TIM_Base_Init>
 8013270:	4603      	mov	r3, r0
 8013272:	2b00      	cmp	r3, #0
 8013274:	d001      	beq.n	801327a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8013276:	f000 fdeb 	bl	8013e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801327a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801327e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8013280:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013284:	4619      	mov	r1, r3
 8013286:	4832      	ldr	r0, [pc, #200]	; (8013350 <MX_TIM1_Init+0x150>)
 8013288:	f7f4 fcec 	bl	8007c64 <HAL_TIM_ConfigClockSource>
 801328c:	4603      	mov	r3, r0
 801328e:	2b00      	cmp	r3, #0
 8013290:	d001      	beq.n	8013296 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8013292:	f000 fddd 	bl	8013e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8013296:	482e      	ldr	r0, [pc, #184]	; (8013350 <MX_TIM1_Init+0x150>)
 8013298:	f7f4 fa82 	bl	80077a0 <HAL_TIM_PWM_Init>
 801329c:	4603      	mov	r3, r0
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d001      	beq.n	80132a6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80132a2:	f000 fdd5 	bl	8013e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80132a6:	2300      	movs	r3, #0
 80132a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80132aa:	2300      	movs	r3, #0
 80132ac:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80132ae:	2300      	movs	r3, #0
 80132b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80132b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80132b6:	4619      	mov	r1, r3
 80132b8:	4825      	ldr	r0, [pc, #148]	; (8013350 <MX_TIM1_Init+0x150>)
 80132ba:	f7f5 f94d 	bl	8008558 <HAL_TIMEx_MasterConfigSynchronization>
 80132be:	4603      	mov	r3, r0
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d001      	beq.n	80132c8 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80132c4:	f000 fdc4 	bl	8013e50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80132c8:	2360      	movs	r3, #96	; 0x60
 80132ca:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80132cc:	2300      	movs	r3, #0
 80132ce:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80132d0:	2300      	movs	r3, #0
 80132d2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80132d4:	2300      	movs	r3, #0
 80132d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80132d8:	2300      	movs	r3, #0
 80132da:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80132dc:	2300      	movs	r3, #0
 80132de:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80132e0:	2300      	movs	r3, #0
 80132e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80132e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80132e8:	2200      	movs	r2, #0
 80132ea:	4619      	mov	r1, r3
 80132ec:	4818      	ldr	r0, [pc, #96]	; (8013350 <MX_TIM1_Init+0x150>)
 80132ee:	f7f4 fba1 	bl	8007a34 <HAL_TIM_PWM_ConfigChannel>
 80132f2:	4603      	mov	r3, r0
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d001      	beq.n	80132fc <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80132f8:	f000 fdaa 	bl	8013e50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80132fc:	2300      	movs	r3, #0
 80132fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8013300:	2300      	movs	r3, #0
 8013302:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8013304:	2300      	movs	r3, #0
 8013306:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8013308:	2300      	movs	r3, #0
 801330a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 801330c:	2300      	movs	r3, #0
 801330e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8013310:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013314:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8013316:	2300      	movs	r3, #0
 8013318:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 801331a:	2300      	movs	r3, #0
 801331c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 801331e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8013322:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8013324:	2300      	movs	r3, #0
 8013326:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8013328:	2300      	movs	r3, #0
 801332a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 801332c:	1d3b      	adds	r3, r7, #4
 801332e:	4619      	mov	r1, r3
 8013330:	4807      	ldr	r0, [pc, #28]	; (8013350 <MX_TIM1_Init+0x150>)
 8013332:	f7f5 f96d 	bl	8008610 <HAL_TIMEx_ConfigBreakDeadTime>
 8013336:	4603      	mov	r3, r0
 8013338:	2b00      	cmp	r3, #0
 801333a:	d001      	beq.n	8013340 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 801333c:	f000 fd88 	bl	8013e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8013340:	4803      	ldr	r0, [pc, #12]	; (8013350 <MX_TIM1_Init+0x150>)
 8013342:	f001 fcd7 	bl	8014cf4 <HAL_TIM_MspPostInit>

}
 8013346:	bf00      	nop
 8013348:	3768      	adds	r7, #104	; 0x68
 801334a:	46bd      	mov	sp, r7
 801334c:	bd80      	pop	{r7, pc}
 801334e:	bf00      	nop
 8013350:	2000946c 	.word	0x2000946c
 8013354:	40010000 	.word	0x40010000

08013358 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8013358:	b580      	push	{r7, lr}
 801335a:	b08e      	sub	sp, #56	; 0x38
 801335c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801335e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013362:	2200      	movs	r2, #0
 8013364:	601a      	str	r2, [r3, #0]
 8013366:	605a      	str	r2, [r3, #4]
 8013368:	609a      	str	r2, [r3, #8]
 801336a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801336c:	f107 031c 	add.w	r3, r7, #28
 8013370:	2200      	movs	r2, #0
 8013372:	601a      	str	r2, [r3, #0]
 8013374:	605a      	str	r2, [r3, #4]
 8013376:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8013378:	463b      	mov	r3, r7
 801337a:	2200      	movs	r2, #0
 801337c:	601a      	str	r2, [r3, #0]
 801337e:	605a      	str	r2, [r3, #4]
 8013380:	609a      	str	r2, [r3, #8]
 8013382:	60da      	str	r2, [r3, #12]
 8013384:	611a      	str	r2, [r3, #16]
 8013386:	615a      	str	r2, [r3, #20]
 8013388:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 801338a:	4b2d      	ldr	r3, [pc, #180]	; (8013440 <MX_TIM2_Init+0xe8>)
 801338c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8013390:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8013392:	4b2b      	ldr	r3, [pc, #172]	; (8013440 <MX_TIM2_Init+0xe8>)
 8013394:	2200      	movs	r2, #0
 8013396:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013398:	4b29      	ldr	r3, [pc, #164]	; (8013440 <MX_TIM2_Init+0xe8>)
 801339a:	2200      	movs	r2, #0
 801339c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 801339e:	4b28      	ldr	r3, [pc, #160]	; (8013440 <MX_TIM2_Init+0xe8>)
 80133a0:	2200      	movs	r2, #0
 80133a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80133a4:	4b26      	ldr	r3, [pc, #152]	; (8013440 <MX_TIM2_Init+0xe8>)
 80133a6:	2200      	movs	r2, #0
 80133a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80133aa:	4b25      	ldr	r3, [pc, #148]	; (8013440 <MX_TIM2_Init+0xe8>)
 80133ac:	2200      	movs	r2, #0
 80133ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80133b0:	4823      	ldr	r0, [pc, #140]	; (8013440 <MX_TIM2_Init+0xe8>)
 80133b2:	f7f4 f99f 	bl	80076f4 <HAL_TIM_Base_Init>
 80133b6:	4603      	mov	r3, r0
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d001      	beq.n	80133c0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80133bc:	f000 fd48 	bl	8013e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80133c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80133c4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80133c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80133ca:	4619      	mov	r1, r3
 80133cc:	481c      	ldr	r0, [pc, #112]	; (8013440 <MX_TIM2_Init+0xe8>)
 80133ce:	f7f4 fc49 	bl	8007c64 <HAL_TIM_ConfigClockSource>
 80133d2:	4603      	mov	r3, r0
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d001      	beq.n	80133dc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80133d8:	f000 fd3a 	bl	8013e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80133dc:	4818      	ldr	r0, [pc, #96]	; (8013440 <MX_TIM2_Init+0xe8>)
 80133de:	f7f4 f9df 	bl	80077a0 <HAL_TIM_PWM_Init>
 80133e2:	4603      	mov	r3, r0
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d001      	beq.n	80133ec <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80133e8:	f000 fd32 	bl	8013e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80133ec:	2300      	movs	r3, #0
 80133ee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80133f0:	2300      	movs	r3, #0
 80133f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80133f4:	f107 031c 	add.w	r3, r7, #28
 80133f8:	4619      	mov	r1, r3
 80133fa:	4811      	ldr	r0, [pc, #68]	; (8013440 <MX_TIM2_Init+0xe8>)
 80133fc:	f7f5 f8ac 	bl	8008558 <HAL_TIMEx_MasterConfigSynchronization>
 8013400:	4603      	mov	r3, r0
 8013402:	2b00      	cmp	r3, #0
 8013404:	d001      	beq.n	801340a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8013406:	f000 fd23 	bl	8013e50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801340a:	2360      	movs	r3, #96	; 0x60
 801340c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 801340e:	2300      	movs	r3, #0
 8013410:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8013412:	2300      	movs	r3, #0
 8013414:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8013416:	2300      	movs	r3, #0
 8013418:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801341a:	463b      	mov	r3, r7
 801341c:	2200      	movs	r2, #0
 801341e:	4619      	mov	r1, r3
 8013420:	4807      	ldr	r0, [pc, #28]	; (8013440 <MX_TIM2_Init+0xe8>)
 8013422:	f7f4 fb07 	bl	8007a34 <HAL_TIM_PWM_ConfigChannel>
 8013426:	4603      	mov	r3, r0
 8013428:	2b00      	cmp	r3, #0
 801342a:	d001      	beq.n	8013430 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 801342c:	f000 fd10 	bl	8013e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8013430:	4803      	ldr	r0, [pc, #12]	; (8013440 <MX_TIM2_Init+0xe8>)
 8013432:	f001 fc5f 	bl	8014cf4 <HAL_TIM_MspPostInit>

}
 8013436:	bf00      	nop
 8013438:	3738      	adds	r7, #56	; 0x38
 801343a:	46bd      	mov	sp, r7
 801343c:	bd80      	pop	{r7, pc}
 801343e:	bf00      	nop
 8013440:	200097fc 	.word	0x200097fc

08013444 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8013444:	b580      	push	{r7, lr}
 8013446:	b08e      	sub	sp, #56	; 0x38
 8013448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801344a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801344e:	2200      	movs	r2, #0
 8013450:	601a      	str	r2, [r3, #0]
 8013452:	605a      	str	r2, [r3, #4]
 8013454:	609a      	str	r2, [r3, #8]
 8013456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013458:	f107 031c 	add.w	r3, r7, #28
 801345c:	2200      	movs	r2, #0
 801345e:	601a      	str	r2, [r3, #0]
 8013460:	605a      	str	r2, [r3, #4]
 8013462:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8013464:	463b      	mov	r3, r7
 8013466:	2200      	movs	r2, #0
 8013468:	601a      	str	r2, [r3, #0]
 801346a:	605a      	str	r2, [r3, #4]
 801346c:	609a      	str	r2, [r3, #8]
 801346e:	60da      	str	r2, [r3, #12]
 8013470:	611a      	str	r2, [r3, #16]
 8013472:	615a      	str	r2, [r3, #20]
 8013474:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8013476:	4b2c      	ldr	r3, [pc, #176]	; (8013528 <MX_TIM3_Init+0xe4>)
 8013478:	4a2c      	ldr	r2, [pc, #176]	; (801352c <MX_TIM3_Init+0xe8>)
 801347a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 801347c:	4b2a      	ldr	r3, [pc, #168]	; (8013528 <MX_TIM3_Init+0xe4>)
 801347e:	2200      	movs	r2, #0
 8013480:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013482:	4b29      	ldr	r3, [pc, #164]	; (8013528 <MX_TIM3_Init+0xe4>)
 8013484:	2200      	movs	r2, #0
 8013486:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8013488:	4b27      	ldr	r3, [pc, #156]	; (8013528 <MX_TIM3_Init+0xe4>)
 801348a:	2200      	movs	r2, #0
 801348c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801348e:	4b26      	ldr	r3, [pc, #152]	; (8013528 <MX_TIM3_Init+0xe4>)
 8013490:	2200      	movs	r2, #0
 8013492:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013494:	4b24      	ldr	r3, [pc, #144]	; (8013528 <MX_TIM3_Init+0xe4>)
 8013496:	2200      	movs	r2, #0
 8013498:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 801349a:	4823      	ldr	r0, [pc, #140]	; (8013528 <MX_TIM3_Init+0xe4>)
 801349c:	f7f4 f92a 	bl	80076f4 <HAL_TIM_Base_Init>
 80134a0:	4603      	mov	r3, r0
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d001      	beq.n	80134aa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80134a6:	f000 fcd3 	bl	8013e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80134aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80134ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80134b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80134b4:	4619      	mov	r1, r3
 80134b6:	481c      	ldr	r0, [pc, #112]	; (8013528 <MX_TIM3_Init+0xe4>)
 80134b8:	f7f4 fbd4 	bl	8007c64 <HAL_TIM_ConfigClockSource>
 80134bc:	4603      	mov	r3, r0
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d001      	beq.n	80134c6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80134c2:	f000 fcc5 	bl	8013e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80134c6:	4818      	ldr	r0, [pc, #96]	; (8013528 <MX_TIM3_Init+0xe4>)
 80134c8:	f7f4 f96a 	bl	80077a0 <HAL_TIM_PWM_Init>
 80134cc:	4603      	mov	r3, r0
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d001      	beq.n	80134d6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80134d2:	f000 fcbd 	bl	8013e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80134d6:	2300      	movs	r3, #0
 80134d8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80134da:	2300      	movs	r3, #0
 80134dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80134de:	f107 031c 	add.w	r3, r7, #28
 80134e2:	4619      	mov	r1, r3
 80134e4:	4810      	ldr	r0, [pc, #64]	; (8013528 <MX_TIM3_Init+0xe4>)
 80134e6:	f7f5 f837 	bl	8008558 <HAL_TIMEx_MasterConfigSynchronization>
 80134ea:	4603      	mov	r3, r0
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d001      	beq.n	80134f4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80134f0:	f000 fcae 	bl	8013e50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80134f4:	2360      	movs	r3, #96	; 0x60
 80134f6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80134f8:	2300      	movs	r3, #0
 80134fa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80134fc:	2300      	movs	r3, #0
 80134fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8013500:	2300      	movs	r3, #0
 8013502:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8013504:	463b      	mov	r3, r7
 8013506:	2200      	movs	r2, #0
 8013508:	4619      	mov	r1, r3
 801350a:	4807      	ldr	r0, [pc, #28]	; (8013528 <MX_TIM3_Init+0xe4>)
 801350c:	f7f4 fa92 	bl	8007a34 <HAL_TIM_PWM_ConfigChannel>
 8013510:	4603      	mov	r3, r0
 8013512:	2b00      	cmp	r3, #0
 8013514:	d001      	beq.n	801351a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8013516:	f000 fc9b 	bl	8013e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 801351a:	4803      	ldr	r0, [pc, #12]	; (8013528 <MX_TIM3_Init+0xe4>)
 801351c:	f001 fbea 	bl	8014cf4 <HAL_TIM_MspPostInit>

}
 8013520:	bf00      	nop
 8013522:	3738      	adds	r7, #56	; 0x38
 8013524:	46bd      	mov	sp, r7
 8013526:	bd80      	pop	{r7, pc}
 8013528:	20008c18 	.word	0x20008c18
 801352c:	40000400 	.word	0x40000400

08013530 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8013530:	b580      	push	{r7, lr}
 8013532:	b08e      	sub	sp, #56	; 0x38
 8013534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8013536:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801353a:	2200      	movs	r2, #0
 801353c:	601a      	str	r2, [r3, #0]
 801353e:	605a      	str	r2, [r3, #4]
 8013540:	609a      	str	r2, [r3, #8]
 8013542:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013544:	f107 031c 	add.w	r3, r7, #28
 8013548:	2200      	movs	r2, #0
 801354a:	601a      	str	r2, [r3, #0]
 801354c:	605a      	str	r2, [r3, #4]
 801354e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8013550:	463b      	mov	r3, r7
 8013552:	2200      	movs	r2, #0
 8013554:	601a      	str	r2, [r3, #0]
 8013556:	605a      	str	r2, [r3, #4]
 8013558:	609a      	str	r2, [r3, #8]
 801355a:	60da      	str	r2, [r3, #12]
 801355c:	611a      	str	r2, [r3, #16]
 801355e:	615a      	str	r2, [r3, #20]
 8013560:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8013562:	4b2c      	ldr	r3, [pc, #176]	; (8013614 <MX_TIM5_Init+0xe4>)
 8013564:	4a2c      	ldr	r2, [pc, #176]	; (8013618 <MX_TIM5_Init+0xe8>)
 8013566:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8013568:	4b2a      	ldr	r3, [pc, #168]	; (8013614 <MX_TIM5_Init+0xe4>)
 801356a:	2200      	movs	r2, #0
 801356c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 801356e:	4b29      	ldr	r3, [pc, #164]	; (8013614 <MX_TIM5_Init+0xe4>)
 8013570:	2200      	movs	r2, #0
 8013572:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8013574:	4b27      	ldr	r3, [pc, #156]	; (8013614 <MX_TIM5_Init+0xe4>)
 8013576:	2200      	movs	r2, #0
 8013578:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801357a:	4b26      	ldr	r3, [pc, #152]	; (8013614 <MX_TIM5_Init+0xe4>)
 801357c:	2200      	movs	r2, #0
 801357e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013580:	4b24      	ldr	r3, [pc, #144]	; (8013614 <MX_TIM5_Init+0xe4>)
 8013582:	2200      	movs	r2, #0
 8013584:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8013586:	4823      	ldr	r0, [pc, #140]	; (8013614 <MX_TIM5_Init+0xe4>)
 8013588:	f7f4 f8b4 	bl	80076f4 <HAL_TIM_Base_Init>
 801358c:	4603      	mov	r3, r0
 801358e:	2b00      	cmp	r3, #0
 8013590:	d001      	beq.n	8013596 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8013592:	f000 fc5d 	bl	8013e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8013596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801359a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 801359c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80135a0:	4619      	mov	r1, r3
 80135a2:	481c      	ldr	r0, [pc, #112]	; (8013614 <MX_TIM5_Init+0xe4>)
 80135a4:	f7f4 fb5e 	bl	8007c64 <HAL_TIM_ConfigClockSource>
 80135a8:	4603      	mov	r3, r0
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d001      	beq.n	80135b2 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80135ae:	f000 fc4f 	bl	8013e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80135b2:	4818      	ldr	r0, [pc, #96]	; (8013614 <MX_TIM5_Init+0xe4>)
 80135b4:	f7f4 f8f4 	bl	80077a0 <HAL_TIM_PWM_Init>
 80135b8:	4603      	mov	r3, r0
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d001      	beq.n	80135c2 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80135be:	f000 fc47 	bl	8013e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80135c2:	2300      	movs	r3, #0
 80135c4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80135c6:	2300      	movs	r3, #0
 80135c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80135ca:	f107 031c 	add.w	r3, r7, #28
 80135ce:	4619      	mov	r1, r3
 80135d0:	4810      	ldr	r0, [pc, #64]	; (8013614 <MX_TIM5_Init+0xe4>)
 80135d2:	f7f4 ffc1 	bl	8008558 <HAL_TIMEx_MasterConfigSynchronization>
 80135d6:	4603      	mov	r3, r0
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d001      	beq.n	80135e0 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80135dc:	f000 fc38 	bl	8013e50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80135e0:	2360      	movs	r3, #96	; 0x60
 80135e2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80135e4:	2300      	movs	r3, #0
 80135e6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80135e8:	2300      	movs	r3, #0
 80135ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80135ec:	2300      	movs	r3, #0
 80135ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80135f0:	463b      	mov	r3, r7
 80135f2:	220c      	movs	r2, #12
 80135f4:	4619      	mov	r1, r3
 80135f6:	4807      	ldr	r0, [pc, #28]	; (8013614 <MX_TIM5_Init+0xe4>)
 80135f8:	f7f4 fa1c 	bl	8007a34 <HAL_TIM_PWM_ConfigChannel>
 80135fc:	4603      	mov	r3, r0
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d001      	beq.n	8013606 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8013602:	f000 fc25 	bl	8013e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8013606:	4803      	ldr	r0, [pc, #12]	; (8013614 <MX_TIM5_Init+0xe4>)
 8013608:	f001 fb74 	bl	8014cf4 <HAL_TIM_MspPostInit>

}
 801360c:	bf00      	nop
 801360e:	3738      	adds	r7, #56	; 0x38
 8013610:	46bd      	mov	sp, r7
 8013612:	bd80      	pop	{r7, pc}
 8013614:	20008bd8 	.word	0x20008bd8
 8013618:	40000c00 	.word	0x40000c00

0801361c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 801361c:	b580      	push	{r7, lr}
 801361e:	b088      	sub	sp, #32
 8013620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8013622:	f107 0310 	add.w	r3, r7, #16
 8013626:	2200      	movs	r2, #0
 8013628:	601a      	str	r2, [r3, #0]
 801362a:	605a      	str	r2, [r3, #4]
 801362c:	609a      	str	r2, [r3, #8]
 801362e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013630:	1d3b      	adds	r3, r7, #4
 8013632:	2200      	movs	r2, #0
 8013634:	601a      	str	r2, [r3, #0]
 8013636:	605a      	str	r2, [r3, #4]
 8013638:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 801363a:	4b1f      	ldr	r3, [pc, #124]	; (80136b8 <MX_TIM8_Init+0x9c>)
 801363c:	4a1f      	ldr	r2, [pc, #124]	; (80136bc <MX_TIM8_Init+0xa0>)
 801363e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8013640:	4b1d      	ldr	r3, [pc, #116]	; (80136b8 <MX_TIM8_Init+0x9c>)
 8013642:	2200      	movs	r2, #0
 8013644:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013646:	4b1c      	ldr	r3, [pc, #112]	; (80136b8 <MX_TIM8_Init+0x9c>)
 8013648:	2200      	movs	r2, #0
 801364a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 801364c:	4b1a      	ldr	r3, [pc, #104]	; (80136b8 <MX_TIM8_Init+0x9c>)
 801364e:	2200      	movs	r2, #0
 8013650:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8013652:	4b19      	ldr	r3, [pc, #100]	; (80136b8 <MX_TIM8_Init+0x9c>)
 8013654:	2200      	movs	r2, #0
 8013656:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8013658:	4b17      	ldr	r3, [pc, #92]	; (80136b8 <MX_TIM8_Init+0x9c>)
 801365a:	2200      	movs	r2, #0
 801365c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801365e:	4b16      	ldr	r3, [pc, #88]	; (80136b8 <MX_TIM8_Init+0x9c>)
 8013660:	2200      	movs	r2, #0
 8013662:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8013664:	4814      	ldr	r0, [pc, #80]	; (80136b8 <MX_TIM8_Init+0x9c>)
 8013666:	f7f4 f845 	bl	80076f4 <HAL_TIM_Base_Init>
 801366a:	4603      	mov	r3, r0
 801366c:	2b00      	cmp	r3, #0
 801366e:	d001      	beq.n	8013674 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8013670:	f000 fbee 	bl	8013e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8013674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013678:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 801367a:	f107 0310 	add.w	r3, r7, #16
 801367e:	4619      	mov	r1, r3
 8013680:	480d      	ldr	r0, [pc, #52]	; (80136b8 <MX_TIM8_Init+0x9c>)
 8013682:	f7f4 faef 	bl	8007c64 <HAL_TIM_ConfigClockSource>
 8013686:	4603      	mov	r3, r0
 8013688:	2b00      	cmp	r3, #0
 801368a:	d001      	beq.n	8013690 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 801368c:	f000 fbe0 	bl	8013e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8013690:	2300      	movs	r3, #0
 8013692:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8013694:	2300      	movs	r3, #0
 8013696:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8013698:	2300      	movs	r3, #0
 801369a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 801369c:	1d3b      	adds	r3, r7, #4
 801369e:	4619      	mov	r1, r3
 80136a0:	4805      	ldr	r0, [pc, #20]	; (80136b8 <MX_TIM8_Init+0x9c>)
 80136a2:	f7f4 ff59 	bl	8008558 <HAL_TIMEx_MasterConfigSynchronization>
 80136a6:	4603      	mov	r3, r0
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d001      	beq.n	80136b0 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 80136ac:	f000 fbd0 	bl	8013e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80136b0:	bf00      	nop
 80136b2:	3720      	adds	r7, #32
 80136b4:	46bd      	mov	sp, r7
 80136b6:	bd80      	pop	{r7, pc}
 80136b8:	200089d4 	.word	0x200089d4
 80136bc:	40010400 	.word	0x40010400

080136c0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80136c0:	b580      	push	{r7, lr}
 80136c2:	b088      	sub	sp, #32
 80136c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80136c6:	1d3b      	adds	r3, r7, #4
 80136c8:	2200      	movs	r2, #0
 80136ca:	601a      	str	r2, [r3, #0]
 80136cc:	605a      	str	r2, [r3, #4]
 80136ce:	609a      	str	r2, [r3, #8]
 80136d0:	60da      	str	r2, [r3, #12]
 80136d2:	611a      	str	r2, [r3, #16]
 80136d4:	615a      	str	r2, [r3, #20]
 80136d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80136d8:	4b19      	ldr	r3, [pc, #100]	; (8013740 <MX_TIM12_Init+0x80>)
 80136da:	4a1a      	ldr	r2, [pc, #104]	; (8013744 <MX_TIM12_Init+0x84>)
 80136dc:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80136de:	4b18      	ldr	r3, [pc, #96]	; (8013740 <MX_TIM12_Init+0x80>)
 80136e0:	2200      	movs	r2, #0
 80136e2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80136e4:	4b16      	ldr	r3, [pc, #88]	; (8013740 <MX_TIM12_Init+0x80>)
 80136e6:	2200      	movs	r2, #0
 80136e8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 80136ea:	4b15      	ldr	r3, [pc, #84]	; (8013740 <MX_TIM12_Init+0x80>)
 80136ec:	2200      	movs	r2, #0
 80136ee:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80136f0:	4b13      	ldr	r3, [pc, #76]	; (8013740 <MX_TIM12_Init+0x80>)
 80136f2:	2200      	movs	r2, #0
 80136f4:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80136f6:	4b12      	ldr	r3, [pc, #72]	; (8013740 <MX_TIM12_Init+0x80>)
 80136f8:	2200      	movs	r2, #0
 80136fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80136fc:	4810      	ldr	r0, [pc, #64]	; (8013740 <MX_TIM12_Init+0x80>)
 80136fe:	f7f4 f84f 	bl	80077a0 <HAL_TIM_PWM_Init>
 8013702:	4603      	mov	r3, r0
 8013704:	2b00      	cmp	r3, #0
 8013706:	d001      	beq.n	801370c <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8013708:	f000 fba2 	bl	8013e50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801370c:	2360      	movs	r3, #96	; 0x60
 801370e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8013710:	2300      	movs	r3, #0
 8013712:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8013714:	2300      	movs	r3, #0
 8013716:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8013718:	2300      	movs	r3, #0
 801371a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801371c:	1d3b      	adds	r3, r7, #4
 801371e:	2200      	movs	r2, #0
 8013720:	4619      	mov	r1, r3
 8013722:	4807      	ldr	r0, [pc, #28]	; (8013740 <MX_TIM12_Init+0x80>)
 8013724:	f7f4 f986 	bl	8007a34 <HAL_TIM_PWM_ConfigChannel>
 8013728:	4603      	mov	r3, r0
 801372a:	2b00      	cmp	r3, #0
 801372c:	d001      	beq.n	8013732 <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 801372e:	f000 fb8f 	bl	8013e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8013732:	4803      	ldr	r0, [pc, #12]	; (8013740 <MX_TIM12_Init+0x80>)
 8013734:	f001 fade 	bl	8014cf4 <HAL_TIM_MspPostInit>

}
 8013738:	bf00      	nop
 801373a:	3720      	adds	r7, #32
 801373c:	46bd      	mov	sp, r7
 801373e:	bd80      	pop	{r7, pc}
 8013740:	2000983c 	.word	0x2000983c
 8013744:	40001800 	.word	0x40001800

08013748 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8013748:	b580      	push	{r7, lr}
 801374a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 801374c:	4b14      	ldr	r3, [pc, #80]	; (80137a0 <MX_USART1_UART_Init+0x58>)
 801374e:	4a15      	ldr	r2, [pc, #84]	; (80137a4 <MX_USART1_UART_Init+0x5c>)
 8013750:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8013752:	4b13      	ldr	r3, [pc, #76]	; (80137a0 <MX_USART1_UART_Init+0x58>)
 8013754:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8013758:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801375a:	4b11      	ldr	r3, [pc, #68]	; (80137a0 <MX_USART1_UART_Init+0x58>)
 801375c:	2200      	movs	r2, #0
 801375e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8013760:	4b0f      	ldr	r3, [pc, #60]	; (80137a0 <MX_USART1_UART_Init+0x58>)
 8013762:	2200      	movs	r2, #0
 8013764:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8013766:	4b0e      	ldr	r3, [pc, #56]	; (80137a0 <MX_USART1_UART_Init+0x58>)
 8013768:	2200      	movs	r2, #0
 801376a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 801376c:	4b0c      	ldr	r3, [pc, #48]	; (80137a0 <MX_USART1_UART_Init+0x58>)
 801376e:	220c      	movs	r2, #12
 8013770:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8013772:	4b0b      	ldr	r3, [pc, #44]	; (80137a0 <MX_USART1_UART_Init+0x58>)
 8013774:	2200      	movs	r2, #0
 8013776:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8013778:	4b09      	ldr	r3, [pc, #36]	; (80137a0 <MX_USART1_UART_Init+0x58>)
 801377a:	2200      	movs	r2, #0
 801377c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801377e:	4b08      	ldr	r3, [pc, #32]	; (80137a0 <MX_USART1_UART_Init+0x58>)
 8013780:	2200      	movs	r2, #0
 8013782:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8013784:	4b06      	ldr	r3, [pc, #24]	; (80137a0 <MX_USART1_UART_Init+0x58>)
 8013786:	2200      	movs	r2, #0
 8013788:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801378a:	4805      	ldr	r0, [pc, #20]	; (80137a0 <MX_USART1_UART_Init+0x58>)
 801378c:	f7f4 ffdc 	bl	8008748 <HAL_UART_Init>
 8013790:	4603      	mov	r3, r0
 8013792:	2b00      	cmp	r3, #0
 8013794:	d001      	beq.n	801379a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8013796:	f000 fb5b 	bl	8013e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 801379a:	bf00      	nop
 801379c:	bd80      	pop	{r7, pc}
 801379e:	bf00      	nop
 80137a0:	20009198 	.word	0x20009198
 80137a4:	40011000 	.word	0x40011000

080137a8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80137a8:	b580      	push	{r7, lr}
 80137aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80137ac:	4b14      	ldr	r3, [pc, #80]	; (8013800 <MX_USART6_UART_Init+0x58>)
 80137ae:	4a15      	ldr	r2, [pc, #84]	; (8013804 <MX_USART6_UART_Init+0x5c>)
 80137b0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80137b2:	4b13      	ldr	r3, [pc, #76]	; (8013800 <MX_USART6_UART_Init+0x58>)
 80137b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80137b8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80137ba:	4b11      	ldr	r3, [pc, #68]	; (8013800 <MX_USART6_UART_Init+0x58>)
 80137bc:	2200      	movs	r2, #0
 80137be:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80137c0:	4b0f      	ldr	r3, [pc, #60]	; (8013800 <MX_USART6_UART_Init+0x58>)
 80137c2:	2200      	movs	r2, #0
 80137c4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80137c6:	4b0e      	ldr	r3, [pc, #56]	; (8013800 <MX_USART6_UART_Init+0x58>)
 80137c8:	2200      	movs	r2, #0
 80137ca:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80137cc:	4b0c      	ldr	r3, [pc, #48]	; (8013800 <MX_USART6_UART_Init+0x58>)
 80137ce:	220c      	movs	r2, #12
 80137d0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80137d2:	4b0b      	ldr	r3, [pc, #44]	; (8013800 <MX_USART6_UART_Init+0x58>)
 80137d4:	2200      	movs	r2, #0
 80137d6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80137d8:	4b09      	ldr	r3, [pc, #36]	; (8013800 <MX_USART6_UART_Init+0x58>)
 80137da:	2200      	movs	r2, #0
 80137dc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80137de:	4b08      	ldr	r3, [pc, #32]	; (8013800 <MX_USART6_UART_Init+0x58>)
 80137e0:	2200      	movs	r2, #0
 80137e2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80137e4:	4b06      	ldr	r3, [pc, #24]	; (8013800 <MX_USART6_UART_Init+0x58>)
 80137e6:	2200      	movs	r2, #0
 80137e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80137ea:	4805      	ldr	r0, [pc, #20]	; (8013800 <MX_USART6_UART_Init+0x58>)
 80137ec:	f7f4 ffac 	bl	8008748 <HAL_UART_Init>
 80137f0:	4603      	mov	r3, r0
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d001      	beq.n	80137fa <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80137f6:	f000 fb2b 	bl	8013e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80137fa:	bf00      	nop
 80137fc:	bd80      	pop	{r7, pc}
 80137fe:	bf00      	nop
 8013800:	2000973c 	.word	0x2000973c
 8013804:	40011400 	.word	0x40011400

08013808 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8013808:	b580      	push	{r7, lr}
 801380a:	b082      	sub	sp, #8
 801380c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 801380e:	4b10      	ldr	r3, [pc, #64]	; (8013850 <MX_DMA_Init+0x48>)
 8013810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013812:	4a0f      	ldr	r2, [pc, #60]	; (8013850 <MX_DMA_Init+0x48>)
 8013814:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8013818:	6313      	str	r3, [r2, #48]	; 0x30
 801381a:	4b0d      	ldr	r3, [pc, #52]	; (8013850 <MX_DMA_Init+0x48>)
 801381c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801381e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013822:	607b      	str	r3, [r7, #4]
 8013824:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8013826:	2200      	movs	r2, #0
 8013828:	2105      	movs	r1, #5
 801382a:	203b      	movs	r0, #59	; 0x3b
 801382c:	f7ed f9ea 	bl	8000c04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8013830:	203b      	movs	r0, #59	; 0x3b
 8013832:	f7ed fa03 	bl	8000c3c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8013836:	2200      	movs	r2, #0
 8013838:	2105      	movs	r1, #5
 801383a:	2045      	movs	r0, #69	; 0x45
 801383c:	f7ed f9e2 	bl	8000c04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8013840:	2045      	movs	r0, #69	; 0x45
 8013842:	f7ed f9fb 	bl	8000c3c <HAL_NVIC_EnableIRQ>

}
 8013846:	bf00      	nop
 8013848:	3708      	adds	r7, #8
 801384a:	46bd      	mov	sp, r7
 801384c:	bd80      	pop	{r7, pc}
 801384e:	bf00      	nop
 8013850:	40023800 	.word	0x40023800

08013854 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8013854:	b580      	push	{r7, lr}
 8013856:	b088      	sub	sp, #32
 8013858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 801385a:	1d3b      	adds	r3, r7, #4
 801385c:	2200      	movs	r2, #0
 801385e:	601a      	str	r2, [r3, #0]
 8013860:	605a      	str	r2, [r3, #4]
 8013862:	609a      	str	r2, [r3, #8]
 8013864:	60da      	str	r2, [r3, #12]
 8013866:	611a      	str	r2, [r3, #16]
 8013868:	615a      	str	r2, [r3, #20]
 801386a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 801386c:	4b1f      	ldr	r3, [pc, #124]	; (80138ec <MX_FMC_Init+0x98>)
 801386e:	4a20      	ldr	r2, [pc, #128]	; (80138f0 <MX_FMC_Init+0x9c>)
 8013870:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8013872:	4b1e      	ldr	r3, [pc, #120]	; (80138ec <MX_FMC_Init+0x98>)
 8013874:	2200      	movs	r2, #0
 8013876:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8013878:	4b1c      	ldr	r3, [pc, #112]	; (80138ec <MX_FMC_Init+0x98>)
 801387a:	2200      	movs	r2, #0
 801387c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 801387e:	4b1b      	ldr	r3, [pc, #108]	; (80138ec <MX_FMC_Init+0x98>)
 8013880:	2204      	movs	r2, #4
 8013882:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8013884:	4b19      	ldr	r3, [pc, #100]	; (80138ec <MX_FMC_Init+0x98>)
 8013886:	2210      	movs	r2, #16
 8013888:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 801388a:	4b18      	ldr	r3, [pc, #96]	; (80138ec <MX_FMC_Init+0x98>)
 801388c:	2240      	movs	r2, #64	; 0x40
 801388e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8013890:	4b16      	ldr	r3, [pc, #88]	; (80138ec <MX_FMC_Init+0x98>)
 8013892:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8013896:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8013898:	4b14      	ldr	r3, [pc, #80]	; (80138ec <MX_FMC_Init+0x98>)
 801389a:	2200      	movs	r2, #0
 801389c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 801389e:	4b13      	ldr	r3, [pc, #76]	; (80138ec <MX_FMC_Init+0x98>)
 80138a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80138a4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80138a6:	4b11      	ldr	r3, [pc, #68]	; (80138ec <MX_FMC_Init+0x98>)
 80138a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80138ac:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80138ae:	4b0f      	ldr	r3, [pc, #60]	; (80138ec <MX_FMC_Init+0x98>)
 80138b0:	2200      	movs	r2, #0
 80138b2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80138b4:	2302      	movs	r3, #2
 80138b6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80138b8:	2307      	movs	r3, #7
 80138ba:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80138bc:	2304      	movs	r3, #4
 80138be:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80138c0:	2307      	movs	r3, #7
 80138c2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80138c4:	2303      	movs	r3, #3
 80138c6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80138c8:	2302      	movs	r3, #2
 80138ca:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80138cc:	2302      	movs	r3, #2
 80138ce:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80138d0:	1d3b      	adds	r3, r7, #4
 80138d2:	4619      	mov	r1, r3
 80138d4:	4805      	ldr	r0, [pc, #20]	; (80138ec <MX_FMC_Init+0x98>)
 80138d6:	f7f3 fe7d 	bl	80075d4 <HAL_SDRAM_Init>
 80138da:	4603      	mov	r3, r0
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d001      	beq.n	80138e4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80138e0:	f000 fab6 	bl	8013e50 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80138e4:	bf00      	nop
 80138e6:	3720      	adds	r7, #32
 80138e8:	46bd      	mov	sp, r7
 80138ea:	bd80      	pop	{r7, pc}
 80138ec:	2000987c 	.word	0x2000987c
 80138f0:	a0000140 	.word	0xa0000140

080138f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80138f4:	b580      	push	{r7, lr}
 80138f6:	b090      	sub	sp, #64	; 0x40
 80138f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80138fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80138fe:	2200      	movs	r2, #0
 8013900:	601a      	str	r2, [r3, #0]
 8013902:	605a      	str	r2, [r3, #4]
 8013904:	609a      	str	r2, [r3, #8]
 8013906:	60da      	str	r2, [r3, #12]
 8013908:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 801390a:	4baf      	ldr	r3, [pc, #700]	; (8013bc8 <MX_GPIO_Init+0x2d4>)
 801390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801390e:	4aae      	ldr	r2, [pc, #696]	; (8013bc8 <MX_GPIO_Init+0x2d4>)
 8013910:	f043 0310 	orr.w	r3, r3, #16
 8013914:	6313      	str	r3, [r2, #48]	; 0x30
 8013916:	4bac      	ldr	r3, [pc, #688]	; (8013bc8 <MX_GPIO_Init+0x2d4>)
 8013918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801391a:	f003 0310 	and.w	r3, r3, #16
 801391e:	62bb      	str	r3, [r7, #40]	; 0x28
 8013920:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8013922:	4ba9      	ldr	r3, [pc, #676]	; (8013bc8 <MX_GPIO_Init+0x2d4>)
 8013924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013926:	4aa8      	ldr	r2, [pc, #672]	; (8013bc8 <MX_GPIO_Init+0x2d4>)
 8013928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801392c:	6313      	str	r3, [r2, #48]	; 0x30
 801392e:	4ba6      	ldr	r3, [pc, #664]	; (8013bc8 <MX_GPIO_Init+0x2d4>)
 8013930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013936:	627b      	str	r3, [r7, #36]	; 0x24
 8013938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801393a:	4ba3      	ldr	r3, [pc, #652]	; (8013bc8 <MX_GPIO_Init+0x2d4>)
 801393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801393e:	4aa2      	ldr	r2, [pc, #648]	; (8013bc8 <MX_GPIO_Init+0x2d4>)
 8013940:	f043 0302 	orr.w	r3, r3, #2
 8013944:	6313      	str	r3, [r2, #48]	; 0x30
 8013946:	4ba0      	ldr	r3, [pc, #640]	; (8013bc8 <MX_GPIO_Init+0x2d4>)
 8013948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801394a:	f003 0302 	and.w	r3, r3, #2
 801394e:	623b      	str	r3, [r7, #32]
 8013950:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8013952:	4b9d      	ldr	r3, [pc, #628]	; (8013bc8 <MX_GPIO_Init+0x2d4>)
 8013954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013956:	4a9c      	ldr	r2, [pc, #624]	; (8013bc8 <MX_GPIO_Init+0x2d4>)
 8013958:	f043 0308 	orr.w	r3, r3, #8
 801395c:	6313      	str	r3, [r2, #48]	; 0x30
 801395e:	4b9a      	ldr	r3, [pc, #616]	; (8013bc8 <MX_GPIO_Init+0x2d4>)
 8013960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013962:	f003 0308 	and.w	r3, r3, #8
 8013966:	61fb      	str	r3, [r7, #28]
 8013968:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801396a:	4b97      	ldr	r3, [pc, #604]	; (8013bc8 <MX_GPIO_Init+0x2d4>)
 801396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801396e:	4a96      	ldr	r2, [pc, #600]	; (8013bc8 <MX_GPIO_Init+0x2d4>)
 8013970:	f043 0304 	orr.w	r3, r3, #4
 8013974:	6313      	str	r3, [r2, #48]	; 0x30
 8013976:	4b94      	ldr	r3, [pc, #592]	; (8013bc8 <MX_GPIO_Init+0x2d4>)
 8013978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801397a:	f003 0304 	and.w	r3, r3, #4
 801397e:	61bb      	str	r3, [r7, #24]
 8013980:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8013982:	4b91      	ldr	r3, [pc, #580]	; (8013bc8 <MX_GPIO_Init+0x2d4>)
 8013984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013986:	4a90      	ldr	r2, [pc, #576]	; (8013bc8 <MX_GPIO_Init+0x2d4>)
 8013988:	f043 0301 	orr.w	r3, r3, #1
 801398c:	6313      	str	r3, [r2, #48]	; 0x30
 801398e:	4b8e      	ldr	r3, [pc, #568]	; (8013bc8 <MX_GPIO_Init+0x2d4>)
 8013990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013992:	f003 0301 	and.w	r3, r3, #1
 8013996:	617b      	str	r3, [r7, #20]
 8013998:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 801399a:	4b8b      	ldr	r3, [pc, #556]	; (8013bc8 <MX_GPIO_Init+0x2d4>)
 801399c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801399e:	4a8a      	ldr	r2, [pc, #552]	; (8013bc8 <MX_GPIO_Init+0x2d4>)
 80139a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80139a4:	6313      	str	r3, [r2, #48]	; 0x30
 80139a6:	4b88      	ldr	r3, [pc, #544]	; (8013bc8 <MX_GPIO_Init+0x2d4>)
 80139a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80139ae:	613b      	str	r3, [r7, #16]
 80139b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80139b2:	4b85      	ldr	r3, [pc, #532]	; (8013bc8 <MX_GPIO_Init+0x2d4>)
 80139b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139b6:	4a84      	ldr	r2, [pc, #528]	; (8013bc8 <MX_GPIO_Init+0x2d4>)
 80139b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80139bc:	6313      	str	r3, [r2, #48]	; 0x30
 80139be:	4b82      	ldr	r3, [pc, #520]	; (8013bc8 <MX_GPIO_Init+0x2d4>)
 80139c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80139c6:	60fb      	str	r3, [r7, #12]
 80139c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80139ca:	4b7f      	ldr	r3, [pc, #508]	; (8013bc8 <MX_GPIO_Init+0x2d4>)
 80139cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139ce:	4a7e      	ldr	r2, [pc, #504]	; (8013bc8 <MX_GPIO_Init+0x2d4>)
 80139d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80139d4:	6313      	str	r3, [r2, #48]	; 0x30
 80139d6:	4b7c      	ldr	r3, [pc, #496]	; (8013bc8 <MX_GPIO_Init+0x2d4>)
 80139d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80139de:	60bb      	str	r3, [r7, #8]
 80139e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80139e2:	4b79      	ldr	r3, [pc, #484]	; (8013bc8 <MX_GPIO_Init+0x2d4>)
 80139e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139e6:	4a78      	ldr	r2, [pc, #480]	; (8013bc8 <MX_GPIO_Init+0x2d4>)
 80139e8:	f043 0320 	orr.w	r3, r3, #32
 80139ec:	6313      	str	r3, [r2, #48]	; 0x30
 80139ee:	4b76      	ldr	r3, [pc, #472]	; (8013bc8 <MX_GPIO_Init+0x2d4>)
 80139f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139f2:	f003 0320 	and.w	r3, r3, #32
 80139f6:	607b      	str	r3, [r7, #4]
 80139f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80139fa:	4b73      	ldr	r3, [pc, #460]	; (8013bc8 <MX_GPIO_Init+0x2d4>)
 80139fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139fe:	4a72      	ldr	r2, [pc, #456]	; (8013bc8 <MX_GPIO_Init+0x2d4>)
 8013a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a04:	6313      	str	r3, [r2, #48]	; 0x30
 8013a06:	4b70      	ldr	r3, [pc, #448]	; (8013bc8 <MX_GPIO_Init+0x2d4>)
 8013a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013a0e:	603b      	str	r3, [r7, #0]
 8013a10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8013a12:	2201      	movs	r2, #1
 8013a14:	2120      	movs	r1, #32
 8013a16:	486d      	ldr	r0, [pc, #436]	; (8013bcc <MX_GPIO_Init+0x2d8>)
 8013a18:	f7ee f9cc 	bl	8001db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1, GPIO_PIN_RESET);
 8013a1c:	2200      	movs	r2, #0
 8013a1e:	210e      	movs	r1, #14
 8013a20:	486b      	ldr	r0, [pc, #428]	; (8013bd0 <MX_GPIO_Init+0x2dc>)
 8013a22:	f7ee f9c7 	bl	8001db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8013a26:	2201      	movs	r2, #1
 8013a28:	2108      	movs	r1, #8
 8013a2a:	486a      	ldr	r0, [pc, #424]	; (8013bd4 <MX_GPIO_Init+0x2e0>)
 8013a2c:	f7ee f9c2 	bl	8001db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8013a30:	2201      	movs	r2, #1
 8013a32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013a36:	4866      	ldr	r0, [pc, #408]	; (8013bd0 <MX_GPIO_Init+0x2dc>)
 8013a38:	f7ee f9bc 	bl	8001db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8013a3c:	2200      	movs	r2, #0
 8013a3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8013a42:	4865      	ldr	r0, [pc, #404]	; (8013bd8 <MX_GPIO_Init+0x2e4>)
 8013a44:	f7ee f9b6 	bl	8001db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8013a48:	2200      	movs	r2, #0
 8013a4a:	21c8      	movs	r1, #200	; 0xc8
 8013a4c:	4863      	ldr	r0, [pc, #396]	; (8013bdc <MX_GPIO_Init+0x2e8>)
 8013a4e:	f7ee f9b1 	bl	8001db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8013a52:	2308      	movs	r3, #8
 8013a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013a56:	2300      	movs	r3, #0
 8013a58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8013a5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013a62:	4619      	mov	r1, r3
 8013a64:	485e      	ldr	r0, [pc, #376]	; (8013be0 <MX_GPIO_Init+0x2ec>)
 8013a66:	f7ed ffe3 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8013a6a:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8013a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013a70:	2302      	movs	r3, #2
 8013a72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013a74:	2300      	movs	r3, #0
 8013a76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013a78:	2303      	movs	r3, #3
 8013a7a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8013a7c:	230b      	movs	r3, #11
 8013a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013a80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013a84:	4619      	mov	r1, r3
 8013a86:	4855      	ldr	r0, [pc, #340]	; (8013bdc <MX_GPIO_Init+0x2e8>)
 8013a88:	f7ed ffd2 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8013a8c:	f643 4323 	movw	r3, #15395	; 0x3c23
 8013a90:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013a92:	2302      	movs	r3, #2
 8013a94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013a96:	2300      	movs	r3, #0
 8013a98:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013a9a:	2303      	movs	r3, #3
 8013a9c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8013a9e:	230a      	movs	r3, #10
 8013aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013aa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013aa6:	4619      	mov	r1, r3
 8013aa8:	484e      	ldr	r0, [pc, #312]	; (8013be4 <MX_GPIO_Init+0x2f0>)
 8013aaa:	f7ed ffc1 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8013aae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013ab8:	2300      	movs	r3, #0
 8013aba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8013abc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013ac0:	4619      	mov	r1, r3
 8013ac2:	4849      	ldr	r0, [pc, #292]	; (8013be8 <MX_GPIO_Init+0x2f4>)
 8013ac4:	f7ed ffb4 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8013ac8:	2340      	movs	r3, #64	; 0x40
 8013aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8013acc:	4b47      	ldr	r3, [pc, #284]	; (8013bec <MX_GPIO_Init+0x2f8>)
 8013ace:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013ad0:	2300      	movs	r3, #0
 8013ad2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8013ad4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013ad8:	4619      	mov	r1, r3
 8013ada:	483c      	ldr	r0, [pc, #240]	; (8013bcc <MX_GPIO_Init+0x2d8>)
 8013adc:	f7ed ffa8 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8013ae0:	2320      	movs	r3, #32
 8013ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013ae4:	2301      	movs	r3, #1
 8013ae6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013ae8:	2300      	movs	r3, #0
 8013aea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013aec:	2300      	movs	r3, #0
 8013aee:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8013af0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013af4:	4619      	mov	r1, r3
 8013af6:	4835      	ldr	r0, [pc, #212]	; (8013bcc <MX_GPIO_Init+0x2d8>)
 8013af8:	f7ed ff9a 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 8013afc:	f241 030e 	movw	r3, #4110	; 0x100e
 8013b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013b02:	2301      	movs	r3, #1
 8013b04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013b06:	2300      	movs	r3, #0
 8013b08:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8013b0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013b12:	4619      	mov	r1, r3
 8013b14:	482e      	ldr	r0, [pc, #184]	; (8013bd0 <MX_GPIO_Init+0x2dc>)
 8013b16:	f7ed ff8b 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8013b1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013b20:	2300      	movs	r3, #0
 8013b22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013b24:	2300      	movs	r3, #0
 8013b26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8013b28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013b2c:	4619      	mov	r1, r3
 8013b2e:	4830      	ldr	r0, [pc, #192]	; (8013bf0 <MX_GPIO_Init+0x2fc>)
 8013b30:	f7ed ff7e 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8013b34:	2308      	movs	r3, #8
 8013b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013b38:	2301      	movs	r3, #1
 8013b3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013b3c:	2300      	movs	r3, #0
 8013b3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013b40:	2300      	movs	r3, #0
 8013b42:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8013b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013b48:	4619      	mov	r1, r3
 8013b4a:	4822      	ldr	r0, [pc, #136]	; (8013bd4 <MX_GPIO_Init+0x2e0>)
 8013b4c:	f7ed ff70 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8013b50:	2310      	movs	r3, #16
 8013b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013b54:	2300      	movs	r3, #0
 8013b56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013b58:	2300      	movs	r3, #0
 8013b5a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8013b5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013b60:	4619      	mov	r1, r3
 8013b62:	481a      	ldr	r0, [pc, #104]	; (8013bcc <MX_GPIO_Init+0x2d8>)
 8013b64:	f7ed ff64 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8013b68:	f248 0304 	movw	r3, #32772	; 0x8004
 8013b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013b6e:	2300      	movs	r3, #0
 8013b70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013b72:	2300      	movs	r3, #0
 8013b74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8013b76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013b7a:	4619      	mov	r1, r3
 8013b7c:	4816      	ldr	r0, [pc, #88]	; (8013bd8 <MX_GPIO_Init+0x2e4>)
 8013b7e:	f7ed ff57 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8013b82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013b88:	2301      	movs	r3, #1
 8013b8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013b90:	2300      	movs	r3, #0
 8013b92:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8013b94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013b98:	4619      	mov	r1, r3
 8013b9a:	480f      	ldr	r0, [pc, #60]	; (8013bd8 <MX_GPIO_Init+0x2e4>)
 8013b9c:	f7ed ff48 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8013ba0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8013ba6:	4b11      	ldr	r3, [pc, #68]	; (8013bec <MX_GPIO_Init+0x2f8>)
 8013ba8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013baa:	2300      	movs	r3, #0
 8013bac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8013bae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013bb2:	4619      	mov	r1, r3
 8013bb4:	4806      	ldr	r0, [pc, #24]	; (8013bd0 <MX_GPIO_Init+0x2dc>)
 8013bb6:	f7ed ff3b 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8013bba:	2310      	movs	r3, #16
 8013bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013bbe:	2302      	movs	r3, #2
 8013bc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013bc2:	2300      	movs	r3, #0
 8013bc4:	e016      	b.n	8013bf4 <MX_GPIO_Init+0x300>
 8013bc6:	bf00      	nop
 8013bc8:	40023800 	.word	0x40023800
 8013bcc:	40020c00 	.word	0x40020c00
 8013bd0:	40022000 	.word	0x40022000
 8013bd4:	40022800 	.word	0x40022800
 8013bd8:	40021c00 	.word	0x40021c00
 8013bdc:	40021800 	.word	0x40021800
 8013be0:	40021000 	.word	0x40021000
 8013be4:	40020400 	.word	0x40020400
 8013be8:	40022400 	.word	0x40022400
 8013bec:	10120000 	.word	0x10120000
 8013bf0:	40020800 	.word	0x40020800
 8013bf4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013bf6:	2303      	movs	r3, #3
 8013bf8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8013bfa:	230a      	movs	r3, #10
 8013bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8013bfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013c02:	4619      	mov	r1, r3
 8013c04:	4838      	ldr	r0, [pc, #224]	; (8013ce8 <MX_GPIO_Init+0x3f4>)
 8013c06:	f7ed ff13 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8013c0a:	23c8      	movs	r3, #200	; 0xc8
 8013c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013c0e:	2301      	movs	r3, #1
 8013c10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013c12:	2300      	movs	r3, #0
 8013c14:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013c16:	2300      	movs	r3, #0
 8013c18:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013c1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013c1e:	4619      	mov	r1, r3
 8013c20:	4832      	ldr	r0, [pc, #200]	; (8013cec <MX_GPIO_Init+0x3f8>)
 8013c22:	f7ed ff05 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8013c26:	2305      	movs	r3, #5
 8013c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013c2a:	2302      	movs	r3, #2
 8013c2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013c2e:	2300      	movs	r3, #0
 8013c30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013c32:	2303      	movs	r3, #3
 8013c34:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8013c36:	230a      	movs	r3, #10
 8013c38:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013c3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013c3e:	4619      	mov	r1, r3
 8013c40:	482b      	ldr	r0, [pc, #172]	; (8013cf0 <MX_GPIO_Init+0x3fc>)
 8013c42:	f7ed fef5 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8013c46:	2332      	movs	r3, #50	; 0x32
 8013c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013c4a:	2302      	movs	r3, #2
 8013c4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013c4e:	2300      	movs	r3, #0
 8013c50:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013c52:	2303      	movs	r3, #3
 8013c54:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8013c56:	230b      	movs	r3, #11
 8013c58:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013c5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013c5e:	4619      	mov	r1, r3
 8013c60:	4823      	ldr	r0, [pc, #140]	; (8013cf0 <MX_GPIO_Init+0x3fc>)
 8013c62:	f7ed fee5 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8013c66:	2304      	movs	r3, #4
 8013c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013c6e:	2300      	movs	r3, #0
 8013c70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8013c72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013c76:	4619      	mov	r1, r3
 8013c78:	481c      	ldr	r0, [pc, #112]	; (8013cec <MX_GPIO_Init+0x3f8>)
 8013c7a:	f7ed fed9 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8013c7e:	2386      	movs	r3, #134	; 0x86
 8013c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013c82:	2302      	movs	r3, #2
 8013c84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013c86:	2300      	movs	r3, #0
 8013c88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013c8a:	2303      	movs	r3, #3
 8013c8c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8013c8e:	230b      	movs	r3, #11
 8013c90:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013c92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013c96:	4619      	mov	r1, r3
 8013c98:	4816      	ldr	r0, [pc, #88]	; (8013cf4 <MX_GPIO_Init+0x400>)
 8013c9a:	f7ed fec9 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8013c9e:	2328      	movs	r3, #40	; 0x28
 8013ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013ca2:	2302      	movs	r3, #2
 8013ca4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013ca6:	2300      	movs	r3, #0
 8013ca8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013caa:	2303      	movs	r3, #3
 8013cac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8013cae:	230a      	movs	r3, #10
 8013cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013cb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013cb6:	4619      	mov	r1, r3
 8013cb8:	480e      	ldr	r0, [pc, #56]	; (8013cf4 <MX_GPIO_Init+0x400>)
 8013cba:	f7ed feb9 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8013cbe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8013cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013cc4:	2302      	movs	r3, #2
 8013cc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013cc8:	2300      	movs	r3, #0
 8013cca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013ccc:	2300      	movs	r3, #0
 8013cce:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8013cd0:	2305      	movs	r3, #5
 8013cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013cd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013cd8:	4619      	mov	r1, r3
 8013cda:	4807      	ldr	r0, [pc, #28]	; (8013cf8 <MX_GPIO_Init+0x404>)
 8013cdc:	f7ed fea8 	bl	8001a30 <HAL_GPIO_Init>

}
 8013ce0:	bf00      	nop
 8013ce2:	3740      	adds	r7, #64	; 0x40
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	bd80      	pop	{r7, pc}
 8013ce8:	40021c00 	.word	0x40021c00
 8013cec:	40021800 	.word	0x40021800
 8013cf0:	40020800 	.word	0x40020800
 8013cf4:	40020000 	.word	0x40020000
 8013cf8:	40020400 	.word	0x40020400

08013cfc <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8013cfc:	b5b0      	push	{r4, r5, r7, lr}
 8013cfe:	b0aa      	sub	sp, #168	; 0xa8
 8013d00:	af02      	add	r7, sp, #8
 8013d02:	6078      	str	r0, [r7, #4]
    
    
                 
  /* init code for FATFS */
  MX_FATFS_Init();
 8013d04:	f7fe fd7e 	bl	8012804 <MX_FATFS_Init>

  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8013d08:	f001 fb74 	bl	80153f4 <MX_USB_HOST_Init>

  /* USER CODE BEGIN 5 */
  FRESULT res;                                          /* FatFs function common result code */
  uint32_t byteswritten, bytesread;                     /* File write/read counts */
  uint8_t wtext[] = "This is STM32 working with FatFs"; /* File write buffer */
 8013d0c:	4b40      	ldr	r3, [pc, #256]	; (8013e10 <StartDefaultTask+0x114>)
 8013d0e:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8013d12:	461d      	mov	r5, r3
 8013d14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013d16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013d18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013d1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013d1c:	682b      	ldr	r3, [r5, #0]
 8013d1e:	7023      	strb	r3, [r4, #0]

  /*##-1- Link the micro SD disk I/O driver ##################################*/
//  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
  {
    /*##-2- Register the file system object to the FatFs module ##############*/
    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 8013d20:	2200      	movs	r2, #0
 8013d22:	493c      	ldr	r1, [pc, #240]	; (8013e14 <StartDefaultTask+0x118>)
 8013d24:	483c      	ldr	r0, [pc, #240]	; (8013e18 <StartDefaultTask+0x11c>)
 8013d26:	f7fa fbfd 	bl	800e524 <f_mount>
 8013d2a:	4603      	mov	r3, r0
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d002      	beq.n	8013d36 <StartDefaultTask+0x3a>
    {
      /* FatFs Initialization Error */
      Error_Handler();
 8013d30:	f000 f88e 	bl	8013e50 <Error_Handler>
 8013d34:	e064      	b.n	8013e00 <StartDefaultTask+0x104>
    }
    else
    {
      /*##-3- Create a FAT file system (format) on the logical drive #########*/
      /* WARNING: Formatting the uSD card will delete all content on the device */
      if(f_mkfs((TCHAR const*)SDPath, FM_FAT32, 0, workBuffer, sizeof(workBuffer)) != FR_OK)
 8013d36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013d3a:	9300      	str	r3, [sp, #0]
 8013d3c:	4b37      	ldr	r3, [pc, #220]	; (8013e1c <StartDefaultTask+0x120>)
 8013d3e:	2200      	movs	r2, #0
 8013d40:	2102      	movs	r1, #2
 8013d42:	4834      	ldr	r0, [pc, #208]	; (8013e14 <StartDefaultTask+0x118>)
 8013d44:	f7fb f9e2 	bl	800f10c <f_mkfs>
 8013d48:	4603      	mov	r3, r0
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d002      	beq.n	8013d54 <StartDefaultTask+0x58>
      {
        /* FatFs Format Error */
        Error_Handler();
 8013d4e:	f000 f87f 	bl	8013e50 <Error_Handler>
 8013d52:	e055      	b.n	8013e00 <StartDefaultTask+0x104>
      }
      else
      {
        /*##-4- Create and Open a new text file object with write access #####*/
        if(f_open(&MyFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8013d54:	220a      	movs	r2, #10
 8013d56:	4932      	ldr	r1, [pc, #200]	; (8013e20 <StartDefaultTask+0x124>)
 8013d58:	4832      	ldr	r0, [pc, #200]	; (8013e24 <StartDefaultTask+0x128>)
 8013d5a:	f7fa fc47 	bl	800e5ec <f_open>
 8013d5e:	4603      	mov	r3, r0
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d002      	beq.n	8013d6a <StartDefaultTask+0x6e>
        {
          /* 'STM32.TXT' file Open for write Error */
          Error_Handler();
 8013d64:	f000 f874 	bl	8013e50 <Error_Handler>
 8013d68:	e04a      	b.n	8013e00 <StartDefaultTask+0x104>
        }
        else
        {
          /*##-5- Write data to the text file ################################*/
          res = f_write(&MyFile, wtext, sizeof(wtext), (void *)&byteswritten);
 8013d6a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8013d6e:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8013d72:	2221      	movs	r2, #33	; 0x21
 8013d74:	482b      	ldr	r0, [pc, #172]	; (8013e24 <StartDefaultTask+0x128>)
 8013d76:	f7fa ff6c 	bl	800ec52 <f_write>
 8013d7a:	4603      	mov	r3, r0
 8013d7c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

          if((byteswritten == 0) || (res != FR_OK))
 8013d80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d003      	beq.n	8013d90 <StartDefaultTask+0x94>
 8013d88:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d002      	beq.n	8013d96 <StartDefaultTask+0x9a>
          {
            /* 'STM32.TXT' file Write or EOF Error */
            Error_Handler();
 8013d90:	f000 f85e 	bl	8013e50 <Error_Handler>
 8013d94:	e034      	b.n	8013e00 <StartDefaultTask+0x104>
          }
          else
          {
            /*##-6- Close the open text file #################################*/
            f_close(&MyFile);
 8013d96:	4823      	ldr	r0, [pc, #140]	; (8013e24 <StartDefaultTask+0x128>)
 8013d98:	f7fb f988 	bl	800f0ac <f_close>

            /*##-7- Open the text file object with read access ###############*/
            if(f_open(&MyFile, "STM32.TXT", FA_READ) != FR_OK)
 8013d9c:	2201      	movs	r2, #1
 8013d9e:	4920      	ldr	r1, [pc, #128]	; (8013e20 <StartDefaultTask+0x124>)
 8013da0:	4820      	ldr	r0, [pc, #128]	; (8013e24 <StartDefaultTask+0x128>)
 8013da2:	f7fa fc23 	bl	800e5ec <f_open>
 8013da6:	4603      	mov	r3, r0
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d002      	beq.n	8013db2 <StartDefaultTask+0xb6>
            {
              /* 'STM32.TXT' file Open for read Error */
              Error_Handler();
 8013dac:	f000 f850 	bl	8013e50 <Error_Handler>
 8013db0:	e026      	b.n	8013e00 <StartDefaultTask+0x104>
            }
            else
            {
              /*##-8- Read data from the text file ###########################*/
              res = f_read(&MyFile, rtext, sizeof(rtext), (UINT*)&bytesread);
 8013db2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8013db6:	f107 010c 	add.w	r1, r7, #12
 8013dba:	2264      	movs	r2, #100	; 0x64
 8013dbc:	4819      	ldr	r0, [pc, #100]	; (8013e24 <StartDefaultTask+0x128>)
 8013dbe:	f7fa fdda 	bl	800e976 <f_read>
 8013dc2:	4603      	mov	r3, r0
 8013dc4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

              if((bytesread == 0) || (res != FR_OK))
 8013dc8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d003      	beq.n	8013dd8 <StartDefaultTask+0xdc>
 8013dd0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d002      	beq.n	8013dde <StartDefaultTask+0xe2>
              {
                /* 'STM32.TXT' file Read or EOF Error */
                Error_Handler();
 8013dd8:	f000 f83a 	bl	8013e50 <Error_Handler>
 8013ddc:	e010      	b.n	8013e00 <StartDefaultTask+0x104>
              }
              else
              {
                /*##-9- Close the open text file #############################*/
                f_close(&MyFile);
 8013dde:	4811      	ldr	r0, [pc, #68]	; (8013e24 <StartDefaultTask+0x128>)
 8013de0:	f7fb f964 	bl	800f0ac <f_close>

                /*##-10- Compare read data with the expected data ############*/
                if ((bytesread != byteswritten))
 8013de4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8013de8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013dec:	429a      	cmp	r2, r3
 8013dee:	d002      	beq.n	8013df6 <StartDefaultTask+0xfa>
                {
                  /* Read data is different from the expected data */
                  Error_Handler();
 8013df0:	f000 f82e 	bl	8013e50 <Error_Handler>
 8013df4:	e004      	b.n	8013e00 <StartDefaultTask+0x104>
                }
                else
                {
                  /* Success of the demo: no error occurrence */
//                  BSP_LED_On(LED1);
                	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_SET);
 8013df6:	2201      	movs	r2, #1
 8013df8:	2102      	movs	r1, #2
 8013dfa:	480b      	ldr	r0, [pc, #44]	; (8013e28 <StartDefaultTask+0x12c>)
 8013dfc:	f7ed ffda 	bl	8001db4 <HAL_GPIO_WritePin>
      }
    }
  }

  /*##-11- Unlink the micro SD disk I/O driver ###############################*/
  FATFS_UnLinkDriver(SDPath);
 8013e00:	4804      	ldr	r0, [pc, #16]	; (8013e14 <StartDefaultTask+0x118>)
 8013e02:	f7fb fe43 	bl	800fa8c <FATFS_UnLinkDriver>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8013e06:	2001      	movs	r0, #1
 8013e08:	f7fb ff0b 	bl	800fc22 <osDelay>
 8013e0c:	e7fb      	b.n	8013e06 <StartDefaultTask+0x10a>
 8013e0e:	bf00      	nop
 8013e10:	08015d00 	.word	0x08015d00
 8013e14:	20008498 	.word	0x20008498
 8013e18:	20009238 	.word	0x20009238
 8013e1c:	20008d00 	.word	0x20008d00
 8013e20:	08015cf4 	.word	0x08015cf4
 8013e24:	200094ac 	.word	0x200094ac
 8013e28:	40022000 	.word	0x40022000

08013e2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013e2c:	b580      	push	{r7, lr}
 8013e2e:	b082      	sub	sp, #8
 8013e30:	af00      	add	r7, sp, #0
 8013e32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	4a04      	ldr	r2, [pc, #16]	; (8013e4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8013e3a:	4293      	cmp	r3, r2
 8013e3c:	d101      	bne.n	8013e42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8013e3e:	f7ec fb75 	bl	800052c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8013e42:	bf00      	nop
 8013e44:	3708      	adds	r7, #8
 8013e46:	46bd      	mov	sp, r7
 8013e48:	bd80      	pop	{r7, pc}
 8013e4a:	bf00      	nop
 8013e4c:	40001000 	.word	0x40001000

08013e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8013e50:	b480      	push	{r7}
 8013e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8013e54:	bf00      	nop
 8013e56:	46bd      	mov	sp, r7
 8013e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e5c:	4770      	bx	lr

08013e5e <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8013e5e:	b580      	push	{r7, lr}
 8013e60:	b084      	sub	sp, #16
 8013e62:	af00      	add	r7, sp, #0
 8013e64:	6078      	str	r0, [r7, #4]
  uint32_t timer = osKernelSysTick();
 8013e66:	f7fb fea5 	bl	800fbb4 <osKernelSysTick>
 8013e6a:	60f8      	str	r0, [r7, #12]
  /* block until SDIO peripherial is ready again or a timeout occur */
  while( osKernelSysTick() - timer < timeout)
 8013e6c:	e006      	b.n	8013e7c <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013e6e:	f7fe fc73 	bl	8012758 <BSP_SD_GetCardState>
 8013e72:	4603      	mov	r3, r0
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d101      	bne.n	8013e7c <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8013e78:	2300      	movs	r3, #0
 8013e7a:	e009      	b.n	8013e90 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8013e7c:	f7fb fe9a 	bl	800fbb4 <osKernelSysTick>
 8013e80:	4602      	mov	r2, r0
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	1ad3      	subs	r3, r2, r3
 8013e86:	687a      	ldr	r2, [r7, #4]
 8013e88:	429a      	cmp	r2, r3
 8013e8a:	d8f0      	bhi.n	8013e6e <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8013e8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013e90:	4618      	mov	r0, r3
 8013e92:	3710      	adds	r7, #16
 8013e94:	46bd      	mov	sp, r7
 8013e96:	bd80      	pop	{r7, pc}

08013e98 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	b082      	sub	sp, #8
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	4603      	mov	r3, r0
 8013ea0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8013ea2:	4b0b      	ldr	r3, [pc, #44]	; (8013ed0 <SD_CheckStatus+0x38>)
 8013ea4:	2201      	movs	r2, #1
 8013ea6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013ea8:	f7fe fc56 	bl	8012758 <BSP_SD_GetCardState>
 8013eac:	4603      	mov	r3, r0
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d107      	bne.n	8013ec2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8013eb2:	4b07      	ldr	r3, [pc, #28]	; (8013ed0 <SD_CheckStatus+0x38>)
 8013eb4:	781b      	ldrb	r3, [r3, #0]
 8013eb6:	b2db      	uxtb	r3, r3
 8013eb8:	f023 0301 	bic.w	r3, r3, #1
 8013ebc:	b2da      	uxtb	r2, r3
 8013ebe:	4b04      	ldr	r3, [pc, #16]	; (8013ed0 <SD_CheckStatus+0x38>)
 8013ec0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8013ec2:	4b03      	ldr	r3, [pc, #12]	; (8013ed0 <SD_CheckStatus+0x38>)
 8013ec4:	781b      	ldrb	r3, [r3, #0]
 8013ec6:	b2db      	uxtb	r3, r3
}
 8013ec8:	4618      	mov	r0, r3
 8013eca:	3708      	adds	r7, #8
 8013ecc:	46bd      	mov	sp, r7
 8013ece:	bd80      	pop	{r7, pc}
 8013ed0:	20000028 	.word	0x20000028

08013ed4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b084      	sub	sp, #16
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	4603      	mov	r3, r0
 8013edc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 8013ede:	4b1a      	ldr	r3, [pc, #104]	; (8013f48 <SD_initialize+0x74>)
 8013ee0:	2201      	movs	r2, #1
 8013ee2:	701a      	strb	r2, [r3, #0]

  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 8013ee4:	f7fb fe5a 	bl	800fb9c <osKernelRunning>
 8013ee8:	4603      	mov	r3, r0
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d025      	beq.n	8013f3a <SD_initialize+0x66>
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8013eee:	f7fe fbd9 	bl	80126a4 <BSP_SD_Init>
 8013ef2:	4603      	mov	r3, r0
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d107      	bne.n	8013f08 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8013ef8:	79fb      	ldrb	r3, [r7, #7]
 8013efa:	4618      	mov	r0, r3
 8013efc:	f7ff ffcc 	bl	8013e98 <SD_CheckStatus>
 8013f00:	4603      	mov	r3, r0
 8013f02:	461a      	mov	r2, r3
 8013f04:	4b10      	ldr	r3, [pc, #64]	; (8013f48 <SD_initialize+0x74>)
 8013f06:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if ((Stat != STA_NOINIT) && (SDQueueID == NULL))
 8013f08:	4b0f      	ldr	r3, [pc, #60]	; (8013f48 <SD_initialize+0x74>)
 8013f0a:	781b      	ldrb	r3, [r3, #0]
 8013f0c:	b2db      	uxtb	r3, r3
 8013f0e:	2b01      	cmp	r3, #1
 8013f10:	d013      	beq.n	8013f3a <SD_initialize+0x66>
 8013f12:	4b0e      	ldr	r3, [pc, #56]	; (8013f4c <SD_initialize+0x78>)
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d10f      	bne.n	8013f3a <SD_initialize+0x66>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8013f1a:	4a0d      	ldr	r2, [pc, #52]	; (8013f50 <SD_initialize+0x7c>)
 8013f1c:	f107 0308 	add.w	r3, r7, #8
 8013f20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013f24:	e883 0003 	stmia.w	r3, {r0, r1}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8013f28:	f107 0308 	add.w	r3, r7, #8
 8013f2c:	2100      	movs	r1, #0
 8013f2e:	4618      	mov	r0, r3
 8013f30:	f7fb ff47 	bl	800fdc2 <osMessageCreate>
 8013f34:	4602      	mov	r2, r0
 8013f36:	4b05      	ldr	r3, [pc, #20]	; (8013f4c <SD_initialize+0x78>)
 8013f38:	601a      	str	r2, [r3, #0]
    }
  }
  return Stat;
 8013f3a:	4b03      	ldr	r3, [pc, #12]	; (8013f48 <SD_initialize+0x74>)
 8013f3c:	781b      	ldrb	r3, [r3, #0]
 8013f3e:	b2db      	uxtb	r3, r3
}
 8013f40:	4618      	mov	r0, r3
 8013f42:	3710      	adds	r7, #16
 8013f44:	46bd      	mov	sp, r7
 8013f46:	bd80      	pop	{r7, pc}
 8013f48:	20000028 	.word	0x20000028
 8013f4c:	20008434 	.word	0x20008434
 8013f50:	08015d24 	.word	0x08015d24

08013f54 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8013f54:	b580      	push	{r7, lr}
 8013f56:	b082      	sub	sp, #8
 8013f58:	af00      	add	r7, sp, #0
 8013f5a:	4603      	mov	r3, r0
 8013f5c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8013f5e:	79fb      	ldrb	r3, [r7, #7]
 8013f60:	4618      	mov	r0, r3
 8013f62:	f7ff ff99 	bl	8013e98 <SD_CheckStatus>
 8013f66:	4603      	mov	r3, r0
}
 8013f68:	4618      	mov	r0, r3
 8013f6a:	3708      	adds	r7, #8
 8013f6c:	46bd      	mov	sp, r7
 8013f6e:	bd80      	pop	{r7, pc}

08013f70 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8013f70:	b580      	push	{r7, lr}
 8013f72:	b08e      	sub	sp, #56	; 0x38
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	61b9      	str	r1, [r7, #24]
 8013f78:	617a      	str	r2, [r7, #20]
 8013f7a:	613b      	str	r3, [r7, #16]
 8013f7c:	4603      	mov	r3, r0
 8013f7e:	77fb      	strb	r3, [r7, #31]
  DRESULT res = RES_ERROR;
 8013f80:	2301      	movs	r3, #1
 8013f82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8013f86:	f247 5030 	movw	r0, #30000	; 0x7530
 8013f8a:	f7ff ff68 	bl	8013e5e <SD_CheckStatusWithTimeout>
 8013f8e:	4603      	mov	r3, r0
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	da02      	bge.n	8013f9a <SD_read+0x2a>
  {
    return res;
 8013f94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013f98:	e06c      	b.n	8014074 <SD_read+0x104>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8013f9a:	69bb      	ldr	r3, [r7, #24]
 8013f9c:	f003 0303 	and.w	r3, r3, #3
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d11e      	bne.n	8013fe2 <SD_read+0x72>
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8013fa4:	693a      	ldr	r2, [r7, #16]
 8013fa6:	6979      	ldr	r1, [r7, #20]
 8013fa8:	69b8      	ldr	r0, [r7, #24]
 8013faa:	f7fe fba1 	bl	80126f0 <BSP_SD_ReadBlocks_DMA>
 8013fae:	4603      	mov	r3, r0
 8013fb0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    if (ret == MSD_OK) {
 8013fb4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d159      	bne.n	8014070 <SD_read+0x100>
      /* wait for a message from the queue or a timeout */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8013fbc:	4b2f      	ldr	r3, [pc, #188]	; (801407c <SD_read+0x10c>)
 8013fbe:	6819      	ldr	r1, [r3, #0]
 8013fc0:	f107 0320 	add.w	r3, r7, #32
 8013fc4:	f247 5230 	movw	r2, #30000	; 0x7530
 8013fc8:	4618      	mov	r0, r3
 8013fca:	f7fb ff4d 	bl	800fe68 <osMessageGet>
      if (event.status == osEventMessage) {
 8013fce:	6a3b      	ldr	r3, [r7, #32]
 8013fd0:	2b10      	cmp	r3, #16
 8013fd2:	d14d      	bne.n	8014070 <SD_read+0x100>
        if (event.value.v == READ_CPLT_MSG) {
 8013fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fd6:	2b01      	cmp	r3, #1
 8013fd8:	d14a      	bne.n	8014070 <SD_read+0x100>
          res = RES_OK;
 8013fda:	2300      	movs	r3, #0
 8013fdc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013fe0:	e046      	b.n	8014070 <SD_read+0x100>
#if defined(ENABLE_SCRATCH_BUFFER)
  } else {
    /* Slow path, fetch each sector a part and memcpy to destination buffer */
    int i;
    uint8_t ret;
    for (i = 0; i < count; i++) {
 8013fe2:	2300      	movs	r3, #0
 8013fe4:	633b      	str	r3, [r7, #48]	; 0x30
 8013fe6:	e032      	b.n	801404e <SD_read+0xde>
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8013fe8:	697b      	ldr	r3, [r7, #20]
 8013fea:	1c5a      	adds	r2, r3, #1
 8013fec:	617a      	str	r2, [r7, #20]
 8013fee:	2201      	movs	r2, #1
 8013ff0:	4619      	mov	r1, r3
 8013ff2:	4823      	ldr	r0, [pc, #140]	; (8014080 <SD_read+0x110>)
 8013ff4:	f7fe fb7c 	bl	80126f0 <BSP_SD_ReadBlocks_DMA>
 8013ff8:	4603      	mov	r3, r0
 8013ffa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (ret == MSD_OK) {
 8013ffe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014002:	2b00      	cmp	r3, #0
 8014004:	d128      	bne.n	8014058 <SD_read+0xe8>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8014006:	4b1d      	ldr	r3, [pc, #116]	; (801407c <SD_read+0x10c>)
 8014008:	6819      	ldr	r1, [r3, #0]
 801400a:	463b      	mov	r3, r7
 801400c:	f247 5230 	movw	r2, #30000	; 0x7530
 8014010:	4618      	mov	r0, r3
 8014012:	f7fb ff29 	bl	800fe68 <osMessageGet>
 8014016:	f107 0320 	add.w	r3, r7, #32
 801401a:	463a      	mov	r2, r7
 801401c:	ca07      	ldmia	r2, {r0, r1, r2}
 801401e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 8014022:	6a3b      	ldr	r3, [r7, #32]
 8014024:	2b10      	cmp	r3, #16
 8014026:	d10f      	bne.n	8014048 <SD_read+0xd8>
          if (event.value.v == READ_CPLT_MSG) {
 8014028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801402a:	2b01      	cmp	r3, #1
 801402c:	d10c      	bne.n	8014048 <SD_read+0xd8>
            *
            * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
            */
            SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
            memcpy(buff, scratch, BLOCKSIZE);
 801402e:	69bb      	ldr	r3, [r7, #24]
 8014030:	4a13      	ldr	r2, [pc, #76]	; (8014080 <SD_read+0x110>)
 8014032:	4618      	mov	r0, r3
 8014034:	4611      	mov	r1, r2
 8014036:	f44f 7300 	mov.w	r3, #512	; 0x200
 801403a:	461a      	mov	r2, r3
 801403c:	f001 fd34 	bl	8015aa8 <memcpy>
            buff += BLOCKSIZE;
 8014040:	69bb      	ldr	r3, [r7, #24]
 8014042:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8014046:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 8014048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801404a:	3301      	adds	r3, #1
 801404c:	633b      	str	r3, [r7, #48]	; 0x30
 801404e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014050:	693a      	ldr	r2, [r7, #16]
 8014052:	429a      	cmp	r2, r3
 8014054:	d8c8      	bhi.n	8013fe8 <SD_read+0x78>
 8014056:	e000      	b.n	801405a <SD_read+0xea>
          }
        }
      }
      else
      {
        break;
 8014058:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 801405a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801405c:	693a      	ldr	r2, [r7, #16]
 801405e:	429a      	cmp	r2, r3
 8014060:	d106      	bne.n	8014070 <SD_read+0x100>
 8014062:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014066:	2b00      	cmp	r3, #0
 8014068:	d102      	bne.n	8014070 <SD_read+0x100>
      res = RES_OK;
 801406a:	2300      	movs	r3, #0
 801406c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

#endif

  return res;
 8014070:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
} 
 8014074:	4618      	mov	r0, r3
 8014076:	3738      	adds	r7, #56	; 0x38
 8014078:	46bd      	mov	sp, r7
 801407a:	bd80      	pop	{r7, pc}
 801407c:	20008434 	.word	0x20008434
 8014080:	20008234 	.word	0x20008234

08014084 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8014084:	b580      	push	{r7, lr}
 8014086:	b090      	sub	sp, #64	; 0x40
 8014088:	af00      	add	r7, sp, #0
 801408a:	61b9      	str	r1, [r7, #24]
 801408c:	617a      	str	r2, [r7, #20]
 801408e:	613b      	str	r3, [r7, #16]
 8014090:	4603      	mov	r3, r0
 8014092:	77fb      	strb	r3, [r7, #31]
  osEvent event;
  DRESULT res = RES_ERROR;
 8014094:	2301      	movs	r3, #1
 8014096:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801409a:	f247 5030 	movw	r0, #30000	; 0x7530
 801409e:	f7ff fede 	bl	8013e5e <SD_CheckStatusWithTimeout>
 80140a2:	4603      	mov	r3, r0
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	da02      	bge.n	80140ae <SD_write+0x2a>
  {
    return res;
 80140a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80140ac:	e07c      	b.n	80141a8 <SD_write+0x124>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 80140ae:	69bb      	ldr	r3, [r7, #24]
 80140b0:	f003 0303 	and.w	r3, r3, #3
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d12e      	bne.n	8014116 <SD_write+0x92>
    * This is not needed if the memory region is configured as W/T.
    */
    alignedAddr = (uint32_t)buff & ~0x1F;
    SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80140b8:	693a      	ldr	r2, [r7, #16]
 80140ba:	6979      	ldr	r1, [r7, #20]
 80140bc:	69b8      	ldr	r0, [r7, #24]
 80140be:	f7fe fb31 	bl	8012724 <BSP_SD_WriteBlocks_DMA>
 80140c2:	4603      	mov	r3, r0
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d16d      	bne.n	80141a4 <SD_write+0x120>
                              (uint32_t) (sector),
                              count) == MSD_OK)
    {
      /* Get the message from the queue */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80140c8:	4b39      	ldr	r3, [pc, #228]	; (80141b0 <SD_write+0x12c>)
 80140ca:	6819      	ldr	r1, [r3, #0]
 80140cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80140d0:	f247 5230 	movw	r2, #30000	; 0x7530
 80140d4:	4618      	mov	r0, r3
 80140d6:	f7fb fec7 	bl	800fe68 <osMessageGet>

      if (event.status == osEventMessage)
 80140da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140dc:	2b10      	cmp	r3, #16
 80140de:	d161      	bne.n	80141a4 <SD_write+0x120>
      {
        if (event.value.v == WRITE_CPLT_MSG)
 80140e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140e2:	2b02      	cmp	r3, #2
 80140e4:	d15e      	bne.n	80141a4 <SD_write+0x120>
        {
          timer = osKernelSysTick() + SD_TIMEOUT;
 80140e6:	f7fb fd65 	bl	800fbb4 <osKernelSysTick>
 80140ea:	4602      	mov	r2, r0
 80140ec:	f247 5330 	movw	r3, #30000	; 0x7530
 80140f0:	4413      	add	r3, r2
 80140f2:	633b      	str	r3, [r7, #48]	; 0x30
          /* block until SDIO IP is ready or a timeout occur */
          while(timer > osKernelSysTick())
 80140f4:	e008      	b.n	8014108 <SD_write+0x84>
          {
            if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80140f6:	f7fe fb2f 	bl	8012758 <BSP_SD_GetCardState>
 80140fa:	4603      	mov	r3, r0
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d103      	bne.n	8014108 <SD_write+0x84>
            {
              res = RES_OK;
 8014100:	2300      	movs	r3, #0
 8014102:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 8014106:	e04d      	b.n	80141a4 <SD_write+0x120>
          while(timer > osKernelSysTick())
 8014108:	f7fb fd54 	bl	800fbb4 <osKernelSysTick>
 801410c:	4602      	mov	r2, r0
 801410e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014110:	4293      	cmp	r3, r2
 8014112:	d8f0      	bhi.n	80140f6 <SD_write+0x72>
 8014114:	e046      	b.n	80141a4 <SD_write+0x120>
    * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
    */
    SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

    for (i = 0; i < count; i++) {
 8014116:	2300      	movs	r3, #0
 8014118:	63bb      	str	r3, [r7, #56]	; 0x38
 801411a:	e032      	b.n	8014182 <SD_write+0xfe>
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 801411c:	697b      	ldr	r3, [r7, #20]
 801411e:	1c5a      	adds	r2, r3, #1
 8014120:	617a      	str	r2, [r7, #20]
 8014122:	2201      	movs	r2, #1
 8014124:	4619      	mov	r1, r3
 8014126:	4823      	ldr	r0, [pc, #140]	; (80141b4 <SD_write+0x130>)
 8014128:	f7fe fafc 	bl	8012724 <BSP_SD_WriteBlocks_DMA>
 801412c:	4603      	mov	r3, r0
 801412e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (ret == MSD_OK) {
 8014132:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014136:	2b00      	cmp	r3, #0
 8014138:	d128      	bne.n	801418c <SD_write+0x108>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 801413a:	4b1d      	ldr	r3, [pc, #116]	; (80141b0 <SD_write+0x12c>)
 801413c:	6819      	ldr	r1, [r3, #0]
 801413e:	463b      	mov	r3, r7
 8014140:	f247 5230 	movw	r2, #30000	; 0x7530
 8014144:	4618      	mov	r0, r3
 8014146:	f7fb fe8f 	bl	800fe68 <osMessageGet>
 801414a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801414e:	463a      	mov	r2, r7
 8014150:	ca07      	ldmia	r2, {r0, r1, r2}
 8014152:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 8014156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014158:	2b10      	cmp	r3, #16
 801415a:	d10f      	bne.n	801417c <SD_write+0xf8>
          if (event.value.v == WRITE_CPLT_MSG) {
 801415c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801415e:	2b02      	cmp	r3, #2
 8014160:	d10c      	bne.n	801417c <SD_write+0xf8>
            memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 8014162:	69bb      	ldr	r3, [r7, #24]
 8014164:	4a13      	ldr	r2, [pc, #76]	; (80141b4 <SD_write+0x130>)
 8014166:	4618      	mov	r0, r3
 8014168:	4611      	mov	r1, r2
 801416a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801416e:	461a      	mov	r2, r3
 8014170:	f001 fc9a 	bl	8015aa8 <memcpy>
            buff += BLOCKSIZE;
 8014174:	69bb      	ldr	r3, [r7, #24]
 8014176:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801417a:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 801417c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801417e:	3301      	adds	r3, #1
 8014180:	63bb      	str	r3, [r7, #56]	; 0x38
 8014182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014184:	693a      	ldr	r2, [r7, #16]
 8014186:	429a      	cmp	r2, r3
 8014188:	d8c8      	bhi.n	801411c <SD_write+0x98>
 801418a:	e000      	b.n	801418e <SD_write+0x10a>
          }
        }
      }
      else
      {
        break;
 801418c:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 801418e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014190:	693a      	ldr	r2, [r7, #16]
 8014192:	429a      	cmp	r2, r3
 8014194:	d106      	bne.n	80141a4 <SD_write+0x120>
 8014196:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801419a:	2b00      	cmp	r3, #0
 801419c:	d102      	bne.n	80141a4 <SD_write+0x120>
      res = RES_OK;
 801419e:	2300      	movs	r3, #0
 80141a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
#endif
  return res;
 80141a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
} 
 80141a8:	4618      	mov	r0, r3
 80141aa:	3740      	adds	r7, #64	; 0x40
 80141ac:	46bd      	mov	sp, r7
 80141ae:	bd80      	pop	{r7, pc}
 80141b0:	20008434 	.word	0x20008434
 80141b4:	20008234 	.word	0x20008234

080141b8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80141b8:	b580      	push	{r7, lr}
 80141ba:	b08c      	sub	sp, #48	; 0x30
 80141bc:	af00      	add	r7, sp, #0
 80141be:	4603      	mov	r3, r0
 80141c0:	603a      	str	r2, [r7, #0]
 80141c2:	71fb      	strb	r3, [r7, #7]
 80141c4:	460b      	mov	r3, r1
 80141c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80141c8:	2301      	movs	r3, #1
 80141ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80141ce:	4b25      	ldr	r3, [pc, #148]	; (8014264 <SD_ioctl+0xac>)
 80141d0:	781b      	ldrb	r3, [r3, #0]
 80141d2:	b2db      	uxtb	r3, r3
 80141d4:	f003 0301 	and.w	r3, r3, #1
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d001      	beq.n	80141e0 <SD_ioctl+0x28>
 80141dc:	2303      	movs	r3, #3
 80141de:	e03c      	b.n	801425a <SD_ioctl+0xa2>

  switch (cmd)
 80141e0:	79bb      	ldrb	r3, [r7, #6]
 80141e2:	2b03      	cmp	r3, #3
 80141e4:	d834      	bhi.n	8014250 <SD_ioctl+0x98>
 80141e6:	a201      	add	r2, pc, #4	; (adr r2, 80141ec <SD_ioctl+0x34>)
 80141e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141ec:	080141fd 	.word	0x080141fd
 80141f0:	08014205 	.word	0x08014205
 80141f4:	0801421d 	.word	0x0801421d
 80141f8:	08014237 	.word	0x08014237
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80141fc:	2300      	movs	r3, #0
 80141fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014202:	e028      	b.n	8014256 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8014204:	f107 030c 	add.w	r3, r7, #12
 8014208:	4618      	mov	r0, r3
 801420a:	f7fe fab5 	bl	8012778 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801420e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014210:	683b      	ldr	r3, [r7, #0]
 8014212:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014214:	2300      	movs	r3, #0
 8014216:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801421a:	e01c      	b.n	8014256 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801421c:	f107 030c 	add.w	r3, r7, #12
 8014220:	4618      	mov	r0, r3
 8014222:	f7fe faa9 	bl	8012778 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8014226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014228:	b29a      	uxth	r2, r3
 801422a:	683b      	ldr	r3, [r7, #0]
 801422c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801422e:	2300      	movs	r3, #0
 8014230:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014234:	e00f      	b.n	8014256 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014236:	f107 030c 	add.w	r3, r7, #12
 801423a:	4618      	mov	r0, r3
 801423c:	f7fe fa9c 	bl	8012778 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8014240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014242:	0a5a      	lsrs	r2, r3, #9
 8014244:	683b      	ldr	r3, [r7, #0]
 8014246:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014248:	2300      	movs	r3, #0
 801424a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801424e:	e002      	b.n	8014256 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8014250:	2304      	movs	r3, #4
 8014252:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8014256:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801425a:	4618      	mov	r0, r3
 801425c:	3730      	adds	r7, #48	; 0x30
 801425e:	46bd      	mov	sp, r7
 8014260:	bd80      	pop	{r7, pc}
 8014262:	bf00      	nop
 8014264:	20000028 	.word	0x20000028

08014268 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8014268:	b580      	push	{r7, lr}
 801426a:	af00      	add	r7, sp, #0
  
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, WRITE_CPLT_MSG, osWaitForever);
 801426c:	4b04      	ldr	r3, [pc, #16]	; (8014280 <BSP_SD_WriteCpltCallback+0x18>)
 801426e:	681b      	ldr	r3, [r3, #0]
 8014270:	f04f 32ff 	mov.w	r2, #4294967295
 8014274:	2102      	movs	r1, #2
 8014276:	4618      	mov	r0, r3
 8014278:	f7fb fdb6 	bl	800fde8 <osMessagePut>
}
 801427c:	bf00      	nop
 801427e:	bd80      	pop	{r7, pc}
 8014280:	20008434 	.word	0x20008434

08014284 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8014284:	b580      	push	{r7, lr}
 8014286:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 8014288:	4b04      	ldr	r3, [pc, #16]	; (801429c <BSP_SD_ReadCpltCallback+0x18>)
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	f04f 32ff 	mov.w	r2, #4294967295
 8014290:	2101      	movs	r1, #1
 8014292:	4618      	mov	r0, r3
 8014294:	f7fb fda8 	bl	800fde8 <osMessagePut>
}
 8014298:	bf00      	nop
 801429a:	bd80      	pop	{r7, pc}
 801429c:	20008434 	.word	0x20008434

080142a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80142a0:	b580      	push	{r7, lr}
 80142a2:	b082      	sub	sp, #8
 80142a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80142a6:	4b11      	ldr	r3, [pc, #68]	; (80142ec <HAL_MspInit+0x4c>)
 80142a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80142aa:	4a10      	ldr	r2, [pc, #64]	; (80142ec <HAL_MspInit+0x4c>)
 80142ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80142b0:	6413      	str	r3, [r2, #64]	; 0x40
 80142b2:	4b0e      	ldr	r3, [pc, #56]	; (80142ec <HAL_MspInit+0x4c>)
 80142b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80142b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80142ba:	607b      	str	r3, [r7, #4]
 80142bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80142be:	4b0b      	ldr	r3, [pc, #44]	; (80142ec <HAL_MspInit+0x4c>)
 80142c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80142c2:	4a0a      	ldr	r2, [pc, #40]	; (80142ec <HAL_MspInit+0x4c>)
 80142c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80142c8:	6453      	str	r3, [r2, #68]	; 0x44
 80142ca:	4b08      	ldr	r3, [pc, #32]	; (80142ec <HAL_MspInit+0x4c>)
 80142cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80142ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80142d2:	603b      	str	r3, [r7, #0]
 80142d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80142d6:	2200      	movs	r2, #0
 80142d8:	210f      	movs	r1, #15
 80142da:	f06f 0001 	mvn.w	r0, #1
 80142de:	f7ec fc91 	bl	8000c04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80142e2:	bf00      	nop
 80142e4:	3708      	adds	r7, #8
 80142e6:	46bd      	mov	sp, r7
 80142e8:	bd80      	pop	{r7, pc}
 80142ea:	bf00      	nop
 80142ec:	40023800 	.word	0x40023800

080142f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80142f0:	b580      	push	{r7, lr}
 80142f2:	b08a      	sub	sp, #40	; 0x28
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80142f8:	f107 0314 	add.w	r3, r7, #20
 80142fc:	2200      	movs	r2, #0
 80142fe:	601a      	str	r2, [r3, #0]
 8014300:	605a      	str	r2, [r3, #4]
 8014302:	609a      	str	r2, [r3, #8]
 8014304:	60da      	str	r2, [r3, #12]
 8014306:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	681b      	ldr	r3, [r3, #0]
 801430c:	4a21      	ldr	r2, [pc, #132]	; (8014394 <HAL_ADC_MspInit+0xa4>)
 801430e:	4293      	cmp	r3, r2
 8014310:	d13c      	bne.n	801438c <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8014312:	4b21      	ldr	r3, [pc, #132]	; (8014398 <HAL_ADC_MspInit+0xa8>)
 8014314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014316:	4a20      	ldr	r2, [pc, #128]	; (8014398 <HAL_ADC_MspInit+0xa8>)
 8014318:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801431c:	6453      	str	r3, [r2, #68]	; 0x44
 801431e:	4b1e      	ldr	r3, [pc, #120]	; (8014398 <HAL_ADC_MspInit+0xa8>)
 8014320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014326:	613b      	str	r3, [r7, #16]
 8014328:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 801432a:	4b1b      	ldr	r3, [pc, #108]	; (8014398 <HAL_ADC_MspInit+0xa8>)
 801432c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801432e:	4a1a      	ldr	r2, [pc, #104]	; (8014398 <HAL_ADC_MspInit+0xa8>)
 8014330:	f043 0320 	orr.w	r3, r3, #32
 8014334:	6313      	str	r3, [r2, #48]	; 0x30
 8014336:	4b18      	ldr	r3, [pc, #96]	; (8014398 <HAL_ADC_MspInit+0xa8>)
 8014338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801433a:	f003 0320 	and.w	r3, r3, #32
 801433e:	60fb      	str	r3, [r7, #12]
 8014340:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014342:	4b15      	ldr	r3, [pc, #84]	; (8014398 <HAL_ADC_MspInit+0xa8>)
 8014344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014346:	4a14      	ldr	r2, [pc, #80]	; (8014398 <HAL_ADC_MspInit+0xa8>)
 8014348:	f043 0301 	orr.w	r3, r3, #1
 801434c:	6313      	str	r3, [r2, #48]	; 0x30
 801434e:	4b12      	ldr	r3, [pc, #72]	; (8014398 <HAL_ADC_MspInit+0xa8>)
 8014350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014352:	f003 0301 	and.w	r3, r3, #1
 8014356:	60bb      	str	r3, [r7, #8]
 8014358:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 801435a:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 801435e:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014360:	2303      	movs	r3, #3
 8014362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014364:	2300      	movs	r3, #0
 8014366:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8014368:	f107 0314 	add.w	r3, r7, #20
 801436c:	4619      	mov	r1, r3
 801436e:	480b      	ldr	r0, [pc, #44]	; (801439c <HAL_ADC_MspInit+0xac>)
 8014370:	f7ed fb5e 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8014374:	2301      	movs	r3, #1
 8014376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014378:	2303      	movs	r3, #3
 801437a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801437c:	2300      	movs	r3, #0
 801437e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8014380:	f107 0314 	add.w	r3, r7, #20
 8014384:	4619      	mov	r1, r3
 8014386:	4806      	ldr	r0, [pc, #24]	; (80143a0 <HAL_ADC_MspInit+0xb0>)
 8014388:	f7ed fb52 	bl	8001a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 801438c:	bf00      	nop
 801438e:	3728      	adds	r7, #40	; 0x28
 8014390:	46bd      	mov	sp, r7
 8014392:	bd80      	pop	{r7, pc}
 8014394:	40012200 	.word	0x40012200
 8014398:	40023800 	.word	0x40023800
 801439c:	40021400 	.word	0x40021400
 80143a0:	40020000 	.word	0x40020000

080143a4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80143a4:	b480      	push	{r7}
 80143a6:	b085      	sub	sp, #20
 80143a8:	af00      	add	r7, sp, #0
 80143aa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	4a0a      	ldr	r2, [pc, #40]	; (80143dc <HAL_CRC_MspInit+0x38>)
 80143b2:	4293      	cmp	r3, r2
 80143b4:	d10b      	bne.n	80143ce <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80143b6:	4b0a      	ldr	r3, [pc, #40]	; (80143e0 <HAL_CRC_MspInit+0x3c>)
 80143b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143ba:	4a09      	ldr	r2, [pc, #36]	; (80143e0 <HAL_CRC_MspInit+0x3c>)
 80143bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80143c0:	6313      	str	r3, [r2, #48]	; 0x30
 80143c2:	4b07      	ldr	r3, [pc, #28]	; (80143e0 <HAL_CRC_MspInit+0x3c>)
 80143c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80143c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80143ca:	60fb      	str	r3, [r7, #12]
 80143cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80143ce:	bf00      	nop
 80143d0:	3714      	adds	r7, #20
 80143d2:	46bd      	mov	sp, r7
 80143d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143d8:	4770      	bx	lr
 80143da:	bf00      	nop
 80143dc:	40023000 	.word	0x40023000
 80143e0:	40023800 	.word	0x40023800

080143e4 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80143e4:	b580      	push	{r7, lr}
 80143e6:	b08e      	sub	sp, #56	; 0x38
 80143e8:	af00      	add	r7, sp, #0
 80143ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80143ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80143f0:	2200      	movs	r2, #0
 80143f2:	601a      	str	r2, [r3, #0]
 80143f4:	605a      	str	r2, [r3, #4]
 80143f6:	609a      	str	r2, [r3, #8]
 80143f8:	60da      	str	r2, [r3, #12]
 80143fa:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	4a50      	ldr	r2, [pc, #320]	; (8014544 <HAL_DCMI_MspInit+0x160>)
 8014402:	4293      	cmp	r3, r2
 8014404:	f040 809a 	bne.w	801453c <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8014408:	4b4f      	ldr	r3, [pc, #316]	; (8014548 <HAL_DCMI_MspInit+0x164>)
 801440a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801440c:	4a4e      	ldr	r2, [pc, #312]	; (8014548 <HAL_DCMI_MspInit+0x164>)
 801440e:	f043 0301 	orr.w	r3, r3, #1
 8014412:	6353      	str	r3, [r2, #52]	; 0x34
 8014414:	4b4c      	ldr	r3, [pc, #304]	; (8014548 <HAL_DCMI_MspInit+0x164>)
 8014416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014418:	f003 0301 	and.w	r3, r3, #1
 801441c:	623b      	str	r3, [r7, #32]
 801441e:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8014420:	4b49      	ldr	r3, [pc, #292]	; (8014548 <HAL_DCMI_MspInit+0x164>)
 8014422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014424:	4a48      	ldr	r2, [pc, #288]	; (8014548 <HAL_DCMI_MspInit+0x164>)
 8014426:	f043 0310 	orr.w	r3, r3, #16
 801442a:	6313      	str	r3, [r2, #48]	; 0x30
 801442c:	4b46      	ldr	r3, [pc, #280]	; (8014548 <HAL_DCMI_MspInit+0x164>)
 801442e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014430:	f003 0310 	and.w	r3, r3, #16
 8014434:	61fb      	str	r3, [r7, #28]
 8014436:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8014438:	4b43      	ldr	r3, [pc, #268]	; (8014548 <HAL_DCMI_MspInit+0x164>)
 801443a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801443c:	4a42      	ldr	r2, [pc, #264]	; (8014548 <HAL_DCMI_MspInit+0x164>)
 801443e:	f043 0308 	orr.w	r3, r3, #8
 8014442:	6313      	str	r3, [r2, #48]	; 0x30
 8014444:	4b40      	ldr	r3, [pc, #256]	; (8014548 <HAL_DCMI_MspInit+0x164>)
 8014446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014448:	f003 0308 	and.w	r3, r3, #8
 801444c:	61bb      	str	r3, [r7, #24]
 801444e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8014450:	4b3d      	ldr	r3, [pc, #244]	; (8014548 <HAL_DCMI_MspInit+0x164>)
 8014452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014454:	4a3c      	ldr	r2, [pc, #240]	; (8014548 <HAL_DCMI_MspInit+0x164>)
 8014456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801445a:	6313      	str	r3, [r2, #48]	; 0x30
 801445c:	4b3a      	ldr	r3, [pc, #232]	; (8014548 <HAL_DCMI_MspInit+0x164>)
 801445e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014464:	617b      	str	r3, [r7, #20]
 8014466:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8014468:	4b37      	ldr	r3, [pc, #220]	; (8014548 <HAL_DCMI_MspInit+0x164>)
 801446a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801446c:	4a36      	ldr	r2, [pc, #216]	; (8014548 <HAL_DCMI_MspInit+0x164>)
 801446e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014472:	6313      	str	r3, [r2, #48]	; 0x30
 8014474:	4b34      	ldr	r3, [pc, #208]	; (8014548 <HAL_DCMI_MspInit+0x164>)
 8014476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801447c:	613b      	str	r3, [r7, #16]
 801447e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014480:	4b31      	ldr	r3, [pc, #196]	; (8014548 <HAL_DCMI_MspInit+0x164>)
 8014482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014484:	4a30      	ldr	r2, [pc, #192]	; (8014548 <HAL_DCMI_MspInit+0x164>)
 8014486:	f043 0301 	orr.w	r3, r3, #1
 801448a:	6313      	str	r3, [r2, #48]	; 0x30
 801448c:	4b2e      	ldr	r3, [pc, #184]	; (8014548 <HAL_DCMI_MspInit+0x164>)
 801448e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014490:	f003 0301 	and.w	r3, r3, #1
 8014494:	60fb      	str	r3, [r7, #12]
 8014496:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8014498:	2360      	movs	r3, #96	; 0x60
 801449a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801449c:	2302      	movs	r3, #2
 801449e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80144a0:	2300      	movs	r3, #0
 80144a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80144a4:	2300      	movs	r3, #0
 80144a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80144a8:	230d      	movs	r3, #13
 80144aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80144ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80144b0:	4619      	mov	r1, r3
 80144b2:	4826      	ldr	r0, [pc, #152]	; (801454c <HAL_DCMI_MspInit+0x168>)
 80144b4:	f7ed fabc 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80144b8:	2308      	movs	r3, #8
 80144ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80144bc:	2302      	movs	r3, #2
 80144be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80144c0:	2300      	movs	r3, #0
 80144c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80144c4:	2300      	movs	r3, #0
 80144c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80144c8:	230d      	movs	r3, #13
 80144ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80144cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80144d0:	4619      	mov	r1, r3
 80144d2:	481f      	ldr	r0, [pc, #124]	; (8014550 <HAL_DCMI_MspInit+0x16c>)
 80144d4:	f7ed faac 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80144d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80144dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80144de:	2302      	movs	r3, #2
 80144e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80144e2:	2300      	movs	r3, #0
 80144e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80144e6:	2300      	movs	r3, #0
 80144e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80144ea:	230d      	movs	r3, #13
 80144ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80144ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80144f2:	4619      	mov	r1, r3
 80144f4:	4817      	ldr	r0, [pc, #92]	; (8014554 <HAL_DCMI_MspInit+0x170>)
 80144f6:	f7ed fa9b 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 80144fa:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80144fe:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014500:	2302      	movs	r3, #2
 8014502:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014504:	2300      	movs	r3, #0
 8014506:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014508:	2300      	movs	r3, #0
 801450a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 801450c:	230d      	movs	r3, #13
 801450e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8014510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014514:	4619      	mov	r1, r3
 8014516:	4810      	ldr	r0, [pc, #64]	; (8014558 <HAL_DCMI_MspInit+0x174>)
 8014518:	f7ed fa8a 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 801451c:	2350      	movs	r3, #80	; 0x50
 801451e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014520:	2302      	movs	r3, #2
 8014522:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014524:	2300      	movs	r3, #0
 8014526:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014528:	2300      	movs	r3, #0
 801452a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 801452c:	230d      	movs	r3, #13
 801452e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014534:	4619      	mov	r1, r3
 8014536:	4809      	ldr	r0, [pc, #36]	; (801455c <HAL_DCMI_MspInit+0x178>)
 8014538:	f7ed fa7a 	bl	8001a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 801453c:	bf00      	nop
 801453e:	3738      	adds	r7, #56	; 0x38
 8014540:	46bd      	mov	sp, r7
 8014542:	bd80      	pop	{r7, pc}
 8014544:	50050000 	.word	0x50050000
 8014548:	40023800 	.word	0x40023800
 801454c:	40021000 	.word	0x40021000
 8014550:	40020c00 	.word	0x40020c00
 8014554:	40021800 	.word	0x40021800
 8014558:	40021c00 	.word	0x40021c00
 801455c:	40020000 	.word	0x40020000

08014560 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8014560:	b580      	push	{r7, lr}
 8014562:	b084      	sub	sp, #16
 8014564:	af00      	add	r7, sp, #0
 8014566:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	4a0d      	ldr	r2, [pc, #52]	; (80145a4 <HAL_DMA2D_MspInit+0x44>)
 801456e:	4293      	cmp	r3, r2
 8014570:	d113      	bne.n	801459a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8014572:	4b0d      	ldr	r3, [pc, #52]	; (80145a8 <HAL_DMA2D_MspInit+0x48>)
 8014574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014576:	4a0c      	ldr	r2, [pc, #48]	; (80145a8 <HAL_DMA2D_MspInit+0x48>)
 8014578:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801457c:	6313      	str	r3, [r2, #48]	; 0x30
 801457e:	4b0a      	ldr	r3, [pc, #40]	; (80145a8 <HAL_DMA2D_MspInit+0x48>)
 8014580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014582:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014586:	60fb      	str	r3, [r7, #12]
 8014588:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 801458a:	2200      	movs	r2, #0
 801458c:	2105      	movs	r1, #5
 801458e:	205a      	movs	r0, #90	; 0x5a
 8014590:	f7ec fb38 	bl	8000c04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8014594:	205a      	movs	r0, #90	; 0x5a
 8014596:	f7ec fb51 	bl	8000c3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 801459a:	bf00      	nop
 801459c:	3710      	adds	r7, #16
 801459e:	46bd      	mov	sp, r7
 80145a0:	bd80      	pop	{r7, pc}
 80145a2:	bf00      	nop
 80145a4:	4002b000 	.word	0x4002b000
 80145a8:	40023800 	.word	0x40023800

080145ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b08c      	sub	sp, #48	; 0x30
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80145b4:	f107 031c 	add.w	r3, r7, #28
 80145b8:	2200      	movs	r2, #0
 80145ba:	601a      	str	r2, [r3, #0]
 80145bc:	605a      	str	r2, [r3, #4]
 80145be:	609a      	str	r2, [r3, #8]
 80145c0:	60da      	str	r2, [r3, #12]
 80145c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	4a2f      	ldr	r2, [pc, #188]	; (8014688 <HAL_I2C_MspInit+0xdc>)
 80145ca:	4293      	cmp	r3, r2
 80145cc:	d129      	bne.n	8014622 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80145ce:	4b2f      	ldr	r3, [pc, #188]	; (801468c <HAL_I2C_MspInit+0xe0>)
 80145d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80145d2:	4a2e      	ldr	r2, [pc, #184]	; (801468c <HAL_I2C_MspInit+0xe0>)
 80145d4:	f043 0302 	orr.w	r3, r3, #2
 80145d8:	6313      	str	r3, [r2, #48]	; 0x30
 80145da:	4b2c      	ldr	r3, [pc, #176]	; (801468c <HAL_I2C_MspInit+0xe0>)
 80145dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80145de:	f003 0302 	and.w	r3, r3, #2
 80145e2:	61bb      	str	r3, [r7, #24]
 80145e4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80145e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80145ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80145ec:	2312      	movs	r3, #18
 80145ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80145f0:	2301      	movs	r3, #1
 80145f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80145f4:	2300      	movs	r3, #0
 80145f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80145f8:	2304      	movs	r3, #4
 80145fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80145fc:	f107 031c 	add.w	r3, r7, #28
 8014600:	4619      	mov	r1, r3
 8014602:	4823      	ldr	r0, [pc, #140]	; (8014690 <HAL_I2C_MspInit+0xe4>)
 8014604:	f7ed fa14 	bl	8001a30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8014608:	4b20      	ldr	r3, [pc, #128]	; (801468c <HAL_I2C_MspInit+0xe0>)
 801460a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801460c:	4a1f      	ldr	r2, [pc, #124]	; (801468c <HAL_I2C_MspInit+0xe0>)
 801460e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014612:	6413      	str	r3, [r2, #64]	; 0x40
 8014614:	4b1d      	ldr	r3, [pc, #116]	; (801468c <HAL_I2C_MspInit+0xe0>)
 8014616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801461c:	617b      	str	r3, [r7, #20]
 801461e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8014620:	e02d      	b.n	801467e <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	681b      	ldr	r3, [r3, #0]
 8014626:	4a1b      	ldr	r2, [pc, #108]	; (8014694 <HAL_I2C_MspInit+0xe8>)
 8014628:	4293      	cmp	r3, r2
 801462a:	d128      	bne.n	801467e <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 801462c:	4b17      	ldr	r3, [pc, #92]	; (801468c <HAL_I2C_MspInit+0xe0>)
 801462e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014630:	4a16      	ldr	r2, [pc, #88]	; (801468c <HAL_I2C_MspInit+0xe0>)
 8014632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014636:	6313      	str	r3, [r2, #48]	; 0x30
 8014638:	4b14      	ldr	r3, [pc, #80]	; (801468c <HAL_I2C_MspInit+0xe0>)
 801463a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801463c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014640:	613b      	str	r3, [r7, #16]
 8014642:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8014644:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8014648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801464a:	2312      	movs	r3, #18
 801464c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801464e:	2301      	movs	r3, #1
 8014650:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014652:	2303      	movs	r3, #3
 8014654:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8014656:	2304      	movs	r3, #4
 8014658:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801465a:	f107 031c 	add.w	r3, r7, #28
 801465e:	4619      	mov	r1, r3
 8014660:	480d      	ldr	r0, [pc, #52]	; (8014698 <HAL_I2C_MspInit+0xec>)
 8014662:	f7ed f9e5 	bl	8001a30 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8014666:	4b09      	ldr	r3, [pc, #36]	; (801468c <HAL_I2C_MspInit+0xe0>)
 8014668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801466a:	4a08      	ldr	r2, [pc, #32]	; (801468c <HAL_I2C_MspInit+0xe0>)
 801466c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8014670:	6413      	str	r3, [r2, #64]	; 0x40
 8014672:	4b06      	ldr	r3, [pc, #24]	; (801468c <HAL_I2C_MspInit+0xe0>)
 8014674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014676:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801467a:	60fb      	str	r3, [r7, #12]
 801467c:	68fb      	ldr	r3, [r7, #12]
}
 801467e:	bf00      	nop
 8014680:	3730      	adds	r7, #48	; 0x30
 8014682:	46bd      	mov	sp, r7
 8014684:	bd80      	pop	{r7, pc}
 8014686:	bf00      	nop
 8014688:	40005400 	.word	0x40005400
 801468c:	40023800 	.word	0x40023800
 8014690:	40020400 	.word	0x40020400
 8014694:	40005c00 	.word	0x40005c00
 8014698:	40021c00 	.word	0x40021c00

0801469c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 801469c:	b580      	push	{r7, lr}
 801469e:	b08e      	sub	sp, #56	; 0x38
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80146a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80146a8:	2200      	movs	r2, #0
 80146aa:	601a      	str	r2, [r3, #0]
 80146ac:	605a      	str	r2, [r3, #4]
 80146ae:	609a      	str	r2, [r3, #8]
 80146b0:	60da      	str	r2, [r3, #12]
 80146b2:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	4a55      	ldr	r2, [pc, #340]	; (8014810 <HAL_LTDC_MspInit+0x174>)
 80146ba:	4293      	cmp	r3, r2
 80146bc:	f040 80a3 	bne.w	8014806 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80146c0:	4b54      	ldr	r3, [pc, #336]	; (8014814 <HAL_LTDC_MspInit+0x178>)
 80146c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80146c4:	4a53      	ldr	r2, [pc, #332]	; (8014814 <HAL_LTDC_MspInit+0x178>)
 80146c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80146ca:	6453      	str	r3, [r2, #68]	; 0x44
 80146cc:	4b51      	ldr	r3, [pc, #324]	; (8014814 <HAL_LTDC_MspInit+0x178>)
 80146ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80146d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80146d4:	623b      	str	r3, [r7, #32]
 80146d6:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80146d8:	4b4e      	ldr	r3, [pc, #312]	; (8014814 <HAL_LTDC_MspInit+0x178>)
 80146da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146dc:	4a4d      	ldr	r2, [pc, #308]	; (8014814 <HAL_LTDC_MspInit+0x178>)
 80146de:	f043 0310 	orr.w	r3, r3, #16
 80146e2:	6313      	str	r3, [r2, #48]	; 0x30
 80146e4:	4b4b      	ldr	r3, [pc, #300]	; (8014814 <HAL_LTDC_MspInit+0x178>)
 80146e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146e8:	f003 0310 	and.w	r3, r3, #16
 80146ec:	61fb      	str	r3, [r7, #28]
 80146ee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80146f0:	4b48      	ldr	r3, [pc, #288]	; (8014814 <HAL_LTDC_MspInit+0x178>)
 80146f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146f4:	4a47      	ldr	r2, [pc, #284]	; (8014814 <HAL_LTDC_MspInit+0x178>)
 80146f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80146fa:	6313      	str	r3, [r2, #48]	; 0x30
 80146fc:	4b45      	ldr	r3, [pc, #276]	; (8014814 <HAL_LTDC_MspInit+0x178>)
 80146fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014700:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014704:	61bb      	str	r3, [r7, #24]
 8014706:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8014708:	4b42      	ldr	r3, [pc, #264]	; (8014814 <HAL_LTDC_MspInit+0x178>)
 801470a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801470c:	4a41      	ldr	r2, [pc, #260]	; (8014814 <HAL_LTDC_MspInit+0x178>)
 801470e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8014712:	6313      	str	r3, [r2, #48]	; 0x30
 8014714:	4b3f      	ldr	r3, [pc, #252]	; (8014814 <HAL_LTDC_MspInit+0x178>)
 8014716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801471c:	617b      	str	r3, [r7, #20]
 801471e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8014720:	4b3c      	ldr	r3, [pc, #240]	; (8014814 <HAL_LTDC_MspInit+0x178>)
 8014722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014724:	4a3b      	ldr	r2, [pc, #236]	; (8014814 <HAL_LTDC_MspInit+0x178>)
 8014726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801472a:	6313      	str	r3, [r2, #48]	; 0x30
 801472c:	4b39      	ldr	r3, [pc, #228]	; (8014814 <HAL_LTDC_MspInit+0x178>)
 801472e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014734:	613b      	str	r3, [r7, #16]
 8014736:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8014738:	4b36      	ldr	r3, [pc, #216]	; (8014814 <HAL_LTDC_MspInit+0x178>)
 801473a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801473c:	4a35      	ldr	r2, [pc, #212]	; (8014814 <HAL_LTDC_MspInit+0x178>)
 801473e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014742:	6313      	str	r3, [r2, #48]	; 0x30
 8014744:	4b33      	ldr	r3, [pc, #204]	; (8014814 <HAL_LTDC_MspInit+0x178>)
 8014746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801474c:	60fb      	str	r3, [r7, #12]
 801474e:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8014750:	2310      	movs	r3, #16
 8014752:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014754:	2302      	movs	r3, #2
 8014756:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014758:	2300      	movs	r3, #0
 801475a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801475c:	2300      	movs	r3, #0
 801475e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8014760:	230e      	movs	r3, #14
 8014762:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8014764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014768:	4619      	mov	r1, r3
 801476a:	482b      	ldr	r0, [pc, #172]	; (8014818 <HAL_LTDC_MspInit+0x17c>)
 801476c:	f7ed f960 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8014770:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8014774:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014776:	2302      	movs	r3, #2
 8014778:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801477a:	2300      	movs	r3, #0
 801477c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801477e:	2300      	movs	r3, #0
 8014780:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8014782:	230e      	movs	r3, #14
 8014784:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8014786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801478a:	4619      	mov	r1, r3
 801478c:	4823      	ldr	r0, [pc, #140]	; (801481c <HAL_LTDC_MspInit+0x180>)
 801478e:	f7ed f94f 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8014792:	23f7      	movs	r3, #247	; 0xf7
 8014794:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014796:	2302      	movs	r3, #2
 8014798:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801479a:	2300      	movs	r3, #0
 801479c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801479e:	2300      	movs	r3, #0
 80147a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80147a2:	230e      	movs	r3, #14
 80147a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80147a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80147aa:	4619      	mov	r1, r3
 80147ac:	481c      	ldr	r0, [pc, #112]	; (8014820 <HAL_LTDC_MspInit+0x184>)
 80147ae:	f7ed f93f 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80147b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80147b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80147b8:	2302      	movs	r3, #2
 80147ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80147bc:	2300      	movs	r3, #0
 80147be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80147c0:	2300      	movs	r3, #0
 80147c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80147c4:	2309      	movs	r3, #9
 80147c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80147c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80147cc:	4619      	mov	r1, r3
 80147ce:	4815      	ldr	r0, [pc, #84]	; (8014824 <HAL_LTDC_MspInit+0x188>)
 80147d0:	f7ed f92e 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80147d4:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80147d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80147da:	2302      	movs	r3, #2
 80147dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80147de:	2300      	movs	r3, #0
 80147e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80147e2:	2300      	movs	r3, #0
 80147e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80147e6:	230e      	movs	r3, #14
 80147e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80147ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80147ee:	4619      	mov	r1, r3
 80147f0:	480d      	ldr	r0, [pc, #52]	; (8014828 <HAL_LTDC_MspInit+0x18c>)
 80147f2:	f7ed f91d 	bl	8001a30 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80147f6:	2200      	movs	r2, #0
 80147f8:	2105      	movs	r1, #5
 80147fa:	2058      	movs	r0, #88	; 0x58
 80147fc:	f7ec fa02 	bl	8000c04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8014800:	2058      	movs	r0, #88	; 0x58
 8014802:	f7ec fa1b 	bl	8000c3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8014806:	bf00      	nop
 8014808:	3738      	adds	r7, #56	; 0x38
 801480a:	46bd      	mov	sp, r7
 801480c:	bd80      	pop	{r7, pc}
 801480e:	bf00      	nop
 8014810:	40016800 	.word	0x40016800
 8014814:	40023800 	.word	0x40023800
 8014818:	40021000 	.word	0x40021000
 801481c:	40022400 	.word	0x40022400
 8014820:	40022800 	.word	0x40022800
 8014824:	40021800 	.word	0x40021800
 8014828:	40022000 	.word	0x40022000

0801482c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 801482c:	b580      	push	{r7, lr}
 801482e:	b08c      	sub	sp, #48	; 0x30
 8014830:	af00      	add	r7, sp, #0
 8014832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014834:	f107 031c 	add.w	r3, r7, #28
 8014838:	2200      	movs	r2, #0
 801483a:	601a      	str	r2, [r3, #0]
 801483c:	605a      	str	r2, [r3, #4]
 801483e:	609a      	str	r2, [r3, #8]
 8014840:	60da      	str	r2, [r3, #12]
 8014842:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	4a3b      	ldr	r2, [pc, #236]	; (8014938 <HAL_QSPI_MspInit+0x10c>)
 801484a:	4293      	cmp	r3, r2
 801484c:	d170      	bne.n	8014930 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 801484e:	4b3b      	ldr	r3, [pc, #236]	; (801493c <HAL_QSPI_MspInit+0x110>)
 8014850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014852:	4a3a      	ldr	r2, [pc, #232]	; (801493c <HAL_QSPI_MspInit+0x110>)
 8014854:	f043 0302 	orr.w	r3, r3, #2
 8014858:	6393      	str	r3, [r2, #56]	; 0x38
 801485a:	4b38      	ldr	r3, [pc, #224]	; (801493c <HAL_QSPI_MspInit+0x110>)
 801485c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801485e:	f003 0302 	and.w	r3, r3, #2
 8014862:	61bb      	str	r3, [r7, #24]
 8014864:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8014866:	4b35      	ldr	r3, [pc, #212]	; (801493c <HAL_QSPI_MspInit+0x110>)
 8014868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801486a:	4a34      	ldr	r2, [pc, #208]	; (801493c <HAL_QSPI_MspInit+0x110>)
 801486c:	f043 0310 	orr.w	r3, r3, #16
 8014870:	6313      	str	r3, [r2, #48]	; 0x30
 8014872:	4b32      	ldr	r3, [pc, #200]	; (801493c <HAL_QSPI_MspInit+0x110>)
 8014874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014876:	f003 0310 	and.w	r3, r3, #16
 801487a:	617b      	str	r3, [r7, #20]
 801487c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801487e:	4b2f      	ldr	r3, [pc, #188]	; (801493c <HAL_QSPI_MspInit+0x110>)
 8014880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014882:	4a2e      	ldr	r2, [pc, #184]	; (801493c <HAL_QSPI_MspInit+0x110>)
 8014884:	f043 0302 	orr.w	r3, r3, #2
 8014888:	6313      	str	r3, [r2, #48]	; 0x30
 801488a:	4b2c      	ldr	r3, [pc, #176]	; (801493c <HAL_QSPI_MspInit+0x110>)
 801488c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801488e:	f003 0302 	and.w	r3, r3, #2
 8014892:	613b      	str	r3, [r7, #16]
 8014894:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8014896:	4b29      	ldr	r3, [pc, #164]	; (801493c <HAL_QSPI_MspInit+0x110>)
 8014898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801489a:	4a28      	ldr	r2, [pc, #160]	; (801493c <HAL_QSPI_MspInit+0x110>)
 801489c:	f043 0308 	orr.w	r3, r3, #8
 80148a0:	6313      	str	r3, [r2, #48]	; 0x30
 80148a2:	4b26      	ldr	r3, [pc, #152]	; (801493c <HAL_QSPI_MspInit+0x110>)
 80148a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148a6:	f003 0308 	and.w	r3, r3, #8
 80148aa:	60fb      	str	r3, [r7, #12]
 80148ac:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80148ae:	2304      	movs	r3, #4
 80148b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80148b2:	2302      	movs	r3, #2
 80148b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80148b6:	2300      	movs	r3, #0
 80148b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80148ba:	2303      	movs	r3, #3
 80148bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80148be:	2309      	movs	r3, #9
 80148c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80148c2:	f107 031c 	add.w	r3, r7, #28
 80148c6:	4619      	mov	r1, r3
 80148c8:	481d      	ldr	r0, [pc, #116]	; (8014940 <HAL_QSPI_MspInit+0x114>)
 80148ca:	f7ed f8b1 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80148ce:	2340      	movs	r3, #64	; 0x40
 80148d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80148d2:	2302      	movs	r3, #2
 80148d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80148d6:	2300      	movs	r3, #0
 80148d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80148da:	2303      	movs	r3, #3
 80148dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80148de:	230a      	movs	r3, #10
 80148e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80148e2:	f107 031c 	add.w	r3, r7, #28
 80148e6:	4619      	mov	r1, r3
 80148e8:	4816      	ldr	r0, [pc, #88]	; (8014944 <HAL_QSPI_MspInit+0x118>)
 80148ea:	f7ed f8a1 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80148ee:	2304      	movs	r3, #4
 80148f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80148f2:	2302      	movs	r3, #2
 80148f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80148f6:	2300      	movs	r3, #0
 80148f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80148fa:	2303      	movs	r3, #3
 80148fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80148fe:	2309      	movs	r3, #9
 8014900:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014902:	f107 031c 	add.w	r3, r7, #28
 8014906:	4619      	mov	r1, r3
 8014908:	480e      	ldr	r0, [pc, #56]	; (8014944 <HAL_QSPI_MspInit+0x118>)
 801490a:	f7ed f891 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 801490e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8014912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014914:	2302      	movs	r3, #2
 8014916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014918:	2300      	movs	r3, #0
 801491a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801491c:	2303      	movs	r3, #3
 801491e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8014920:	2309      	movs	r3, #9
 8014922:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8014924:	f107 031c 	add.w	r3, r7, #28
 8014928:	4619      	mov	r1, r3
 801492a:	4807      	ldr	r0, [pc, #28]	; (8014948 <HAL_QSPI_MspInit+0x11c>)
 801492c:	f7ed f880 	bl	8001a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8014930:	bf00      	nop
 8014932:	3730      	adds	r7, #48	; 0x30
 8014934:	46bd      	mov	sp, r7
 8014936:	bd80      	pop	{r7, pc}
 8014938:	a0001000 	.word	0xa0001000
 801493c:	40023800 	.word	0x40023800
 8014940:	40021000 	.word	0x40021000
 8014944:	40020400 	.word	0x40020400
 8014948:	40020c00 	.word	0x40020c00

0801494c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 801494c:	b480      	push	{r7}
 801494e:	b083      	sub	sp, #12
 8014950:	af00      	add	r7, sp, #0
 8014952:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	4a07      	ldr	r2, [pc, #28]	; (8014978 <HAL_RTC_MspInit+0x2c>)
 801495a:	4293      	cmp	r3, r2
 801495c:	d105      	bne.n	801496a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 801495e:	4b07      	ldr	r3, [pc, #28]	; (801497c <HAL_RTC_MspInit+0x30>)
 8014960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014962:	4a06      	ldr	r2, [pc, #24]	; (801497c <HAL_RTC_MspInit+0x30>)
 8014964:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014968:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 801496a:	bf00      	nop
 801496c:	370c      	adds	r7, #12
 801496e:	46bd      	mov	sp, r7
 8014970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014974:	4770      	bx	lr
 8014976:	bf00      	nop
 8014978:	40002800 	.word	0x40002800
 801497c:	40023800 	.word	0x40023800

08014980 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8014980:	b580      	push	{r7, lr}
 8014982:	b08a      	sub	sp, #40	; 0x28
 8014984:	af00      	add	r7, sp, #0
 8014986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014988:	f107 0314 	add.w	r3, r7, #20
 801498c:	2200      	movs	r2, #0
 801498e:	601a      	str	r2, [r3, #0]
 8014990:	605a      	str	r2, [r3, #4]
 8014992:	609a      	str	r2, [r3, #8]
 8014994:	60da      	str	r2, [r3, #12]
 8014996:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	4a65      	ldr	r2, [pc, #404]	; (8014b34 <HAL_SD_MspInit+0x1b4>)
 801499e:	4293      	cmp	r3, r2
 80149a0:	f040 80c3 	bne.w	8014b2a <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80149a4:	4b64      	ldr	r3, [pc, #400]	; (8014b38 <HAL_SD_MspInit+0x1b8>)
 80149a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80149a8:	4a63      	ldr	r2, [pc, #396]	; (8014b38 <HAL_SD_MspInit+0x1b8>)
 80149aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80149ae:	6453      	str	r3, [r2, #68]	; 0x44
 80149b0:	4b61      	ldr	r3, [pc, #388]	; (8014b38 <HAL_SD_MspInit+0x1b8>)
 80149b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80149b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80149b8:	613b      	str	r3, [r7, #16]
 80149ba:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80149bc:	4b5e      	ldr	r3, [pc, #376]	; (8014b38 <HAL_SD_MspInit+0x1b8>)
 80149be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149c0:	4a5d      	ldr	r2, [pc, #372]	; (8014b38 <HAL_SD_MspInit+0x1b8>)
 80149c2:	f043 0304 	orr.w	r3, r3, #4
 80149c6:	6313      	str	r3, [r2, #48]	; 0x30
 80149c8:	4b5b      	ldr	r3, [pc, #364]	; (8014b38 <HAL_SD_MspInit+0x1b8>)
 80149ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149cc:	f003 0304 	and.w	r3, r3, #4
 80149d0:	60fb      	str	r3, [r7, #12]
 80149d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80149d4:	4b58      	ldr	r3, [pc, #352]	; (8014b38 <HAL_SD_MspInit+0x1b8>)
 80149d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149d8:	4a57      	ldr	r2, [pc, #348]	; (8014b38 <HAL_SD_MspInit+0x1b8>)
 80149da:	f043 0308 	orr.w	r3, r3, #8
 80149de:	6313      	str	r3, [r2, #48]	; 0x30
 80149e0:	4b55      	ldr	r3, [pc, #340]	; (8014b38 <HAL_SD_MspInit+0x1b8>)
 80149e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149e4:	f003 0308 	and.w	r3, r3, #8
 80149e8:	60bb      	str	r3, [r7, #8]
 80149ea:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 80149ec:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80149f0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80149f2:	2302      	movs	r3, #2
 80149f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80149f6:	2300      	movs	r3, #0
 80149f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80149fa:	2303      	movs	r3, #3
 80149fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80149fe:	230c      	movs	r3, #12
 8014a00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014a02:	f107 0314 	add.w	r3, r7, #20
 8014a06:	4619      	mov	r1, r3
 8014a08:	484c      	ldr	r0, [pc, #304]	; (8014b3c <HAL_SD_MspInit+0x1bc>)
 8014a0a:	f7ed f811 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8014a0e:	2304      	movs	r3, #4
 8014a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014a12:	2302      	movs	r3, #2
 8014a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014a16:	2300      	movs	r3, #0
 8014a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014a1a:	2303      	movs	r3, #3
 8014a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8014a1e:	230c      	movs	r3, #12
 8014a20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8014a22:	f107 0314 	add.w	r3, r7, #20
 8014a26:	4619      	mov	r1, r3
 8014a28:	4845      	ldr	r0, [pc, #276]	; (8014b40 <HAL_SD_MspInit+0x1c0>)
 8014a2a:	f7ed f801 	bl	8001a30 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream3;
 8014a2e:	4b45      	ldr	r3, [pc, #276]	; (8014b44 <HAL_SD_MspInit+0x1c4>)
 8014a30:	4a45      	ldr	r2, [pc, #276]	; (8014b48 <HAL_SD_MspInit+0x1c8>)
 8014a32:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8014a34:	4b43      	ldr	r3, [pc, #268]	; (8014b44 <HAL_SD_MspInit+0x1c4>)
 8014a36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8014a3a:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8014a3c:	4b41      	ldr	r3, [pc, #260]	; (8014b44 <HAL_SD_MspInit+0x1c4>)
 8014a3e:	2240      	movs	r2, #64	; 0x40
 8014a40:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8014a42:	4b40      	ldr	r3, [pc, #256]	; (8014b44 <HAL_SD_MspInit+0x1c4>)
 8014a44:	2200      	movs	r2, #0
 8014a46:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8014a48:	4b3e      	ldr	r3, [pc, #248]	; (8014b44 <HAL_SD_MspInit+0x1c4>)
 8014a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014a4e:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8014a50:	4b3c      	ldr	r3, [pc, #240]	; (8014b44 <HAL_SD_MspInit+0x1c4>)
 8014a52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014a56:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8014a58:	4b3a      	ldr	r3, [pc, #232]	; (8014b44 <HAL_SD_MspInit+0x1c4>)
 8014a5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8014a5e:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8014a60:	4b38      	ldr	r3, [pc, #224]	; (8014b44 <HAL_SD_MspInit+0x1c4>)
 8014a62:	2220      	movs	r2, #32
 8014a64:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8014a66:	4b37      	ldr	r3, [pc, #220]	; (8014b44 <HAL_SD_MspInit+0x1c4>)
 8014a68:	2200      	movs	r2, #0
 8014a6a:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8014a6c:	4b35      	ldr	r3, [pc, #212]	; (8014b44 <HAL_SD_MspInit+0x1c4>)
 8014a6e:	2204      	movs	r2, #4
 8014a70:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8014a72:	4b34      	ldr	r3, [pc, #208]	; (8014b44 <HAL_SD_MspInit+0x1c4>)
 8014a74:	2203      	movs	r2, #3
 8014a76:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8014a78:	4b32      	ldr	r3, [pc, #200]	; (8014b44 <HAL_SD_MspInit+0x1c4>)
 8014a7a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8014a7e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8014a80:	4b30      	ldr	r3, [pc, #192]	; (8014b44 <HAL_SD_MspInit+0x1c4>)
 8014a82:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8014a86:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8014a88:	482e      	ldr	r0, [pc, #184]	; (8014b44 <HAL_SD_MspInit+0x1c4>)
 8014a8a:	f7ec fa41 	bl	8000f10 <HAL_DMA_Init>
 8014a8e:	4603      	mov	r3, r0
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d001      	beq.n	8014a98 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 8014a94:	f7ff f9dc 	bl	8013e50 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	4a2a      	ldr	r2, [pc, #168]	; (8014b44 <HAL_SD_MspInit+0x1c4>)
 8014a9c:	641a      	str	r2, [r3, #64]	; 0x40
 8014a9e:	4a29      	ldr	r2, [pc, #164]	; (8014b44 <HAL_SD_MspInit+0x1c4>)
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream6;
 8014aa4:	4b29      	ldr	r3, [pc, #164]	; (8014b4c <HAL_SD_MspInit+0x1cc>)
 8014aa6:	4a2a      	ldr	r2, [pc, #168]	; (8014b50 <HAL_SD_MspInit+0x1d0>)
 8014aa8:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8014aaa:	4b28      	ldr	r3, [pc, #160]	; (8014b4c <HAL_SD_MspInit+0x1cc>)
 8014aac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8014ab0:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8014ab2:	4b26      	ldr	r3, [pc, #152]	; (8014b4c <HAL_SD_MspInit+0x1cc>)
 8014ab4:	2200      	movs	r2, #0
 8014ab6:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8014ab8:	4b24      	ldr	r3, [pc, #144]	; (8014b4c <HAL_SD_MspInit+0x1cc>)
 8014aba:	2200      	movs	r2, #0
 8014abc:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8014abe:	4b23      	ldr	r3, [pc, #140]	; (8014b4c <HAL_SD_MspInit+0x1cc>)
 8014ac0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014ac4:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8014ac6:	4b21      	ldr	r3, [pc, #132]	; (8014b4c <HAL_SD_MspInit+0x1cc>)
 8014ac8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014acc:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8014ace:	4b1f      	ldr	r3, [pc, #124]	; (8014b4c <HAL_SD_MspInit+0x1cc>)
 8014ad0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8014ad4:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8014ad6:	4b1d      	ldr	r3, [pc, #116]	; (8014b4c <HAL_SD_MspInit+0x1cc>)
 8014ad8:	2220      	movs	r2, #32
 8014ada:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8014adc:	4b1b      	ldr	r3, [pc, #108]	; (8014b4c <HAL_SD_MspInit+0x1cc>)
 8014ade:	2200      	movs	r2, #0
 8014ae0:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8014ae2:	4b1a      	ldr	r3, [pc, #104]	; (8014b4c <HAL_SD_MspInit+0x1cc>)
 8014ae4:	2204      	movs	r2, #4
 8014ae6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8014ae8:	4b18      	ldr	r3, [pc, #96]	; (8014b4c <HAL_SD_MspInit+0x1cc>)
 8014aea:	2203      	movs	r2, #3
 8014aec:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8014aee:	4b17      	ldr	r3, [pc, #92]	; (8014b4c <HAL_SD_MspInit+0x1cc>)
 8014af0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8014af4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8014af6:	4b15      	ldr	r3, [pc, #84]	; (8014b4c <HAL_SD_MspInit+0x1cc>)
 8014af8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8014afc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8014afe:	4813      	ldr	r0, [pc, #76]	; (8014b4c <HAL_SD_MspInit+0x1cc>)
 8014b00:	f7ec fa06 	bl	8000f10 <HAL_DMA_Init>
 8014b04:	4603      	mov	r3, r0
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d001      	beq.n	8014b0e <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 8014b0a:	f7ff f9a1 	bl	8013e50 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	4a0e      	ldr	r2, [pc, #56]	; (8014b4c <HAL_SD_MspInit+0x1cc>)
 8014b12:	63da      	str	r2, [r3, #60]	; 0x3c
 8014b14:	4a0d      	ldr	r2, [pc, #52]	; (8014b4c <HAL_SD_MspInit+0x1cc>)
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8014b1a:	2200      	movs	r2, #0
 8014b1c:	2105      	movs	r1, #5
 8014b1e:	2031      	movs	r0, #49	; 0x31
 8014b20:	f7ec f870 	bl	8000c04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8014b24:	2031      	movs	r0, #49	; 0x31
 8014b26:	f7ec f889 	bl	8000c3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8014b2a:	bf00      	nop
 8014b2c:	3728      	adds	r7, #40	; 0x28
 8014b2e:	46bd      	mov	sp, r7
 8014b30:	bd80      	pop	{r7, pc}
 8014b32:	bf00      	nop
 8014b34:	40012c00 	.word	0x40012c00
 8014b38:	40023800 	.word	0x40023800
 8014b3c:	40020800 	.word	0x40020800
 8014b40:	40020c00 	.word	0x40020c00
 8014b44:	200098b0 	.word	0x200098b0
 8014b48:	40026458 	.word	0x40026458
 8014b4c:	200096dc 	.word	0x200096dc
 8014b50:	400264a0 	.word	0x400264a0

08014b54 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8014b54:	b580      	push	{r7, lr}
 8014b56:	b08a      	sub	sp, #40	; 0x28
 8014b58:	af00      	add	r7, sp, #0
 8014b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014b5c:	f107 0314 	add.w	r3, r7, #20
 8014b60:	2200      	movs	r2, #0
 8014b62:	601a      	str	r2, [r3, #0]
 8014b64:	605a      	str	r2, [r3, #4]
 8014b66:	609a      	str	r2, [r3, #8]
 8014b68:	60da      	str	r2, [r3, #12]
 8014b6a:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8014b74:	d127      	bne.n	8014bc6 <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8014b76:	4b16      	ldr	r3, [pc, #88]	; (8014bd0 <HAL_SPDIFRX_MspInit+0x7c>)
 8014b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b7a:	4a15      	ldr	r2, [pc, #84]	; (8014bd0 <HAL_SPDIFRX_MspInit+0x7c>)
 8014b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014b80:	6413      	str	r3, [r2, #64]	; 0x40
 8014b82:	4b13      	ldr	r3, [pc, #76]	; (8014bd0 <HAL_SPDIFRX_MspInit+0x7c>)
 8014b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014b8a:	613b      	str	r3, [r7, #16]
 8014b8c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8014b8e:	4b10      	ldr	r3, [pc, #64]	; (8014bd0 <HAL_SPDIFRX_MspInit+0x7c>)
 8014b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b92:	4a0f      	ldr	r2, [pc, #60]	; (8014bd0 <HAL_SPDIFRX_MspInit+0x7c>)
 8014b94:	f043 0308 	orr.w	r3, r3, #8
 8014b98:	6313      	str	r3, [r2, #48]	; 0x30
 8014b9a:	4b0d      	ldr	r3, [pc, #52]	; (8014bd0 <HAL_SPDIFRX_MspInit+0x7c>)
 8014b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b9e:	f003 0308 	and.w	r3, r3, #8
 8014ba2:	60fb      	str	r3, [r7, #12]
 8014ba4:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8014ba6:	2380      	movs	r3, #128	; 0x80
 8014ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014baa:	2302      	movs	r3, #2
 8014bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014bae:	2300      	movs	r3, #0
 8014bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014bb2:	2300      	movs	r3, #0
 8014bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8014bb6:	2308      	movs	r3, #8
 8014bb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8014bba:	f107 0314 	add.w	r3, r7, #20
 8014bbe:	4619      	mov	r1, r3
 8014bc0:	4804      	ldr	r0, [pc, #16]	; (8014bd4 <HAL_SPDIFRX_MspInit+0x80>)
 8014bc2:	f7ec ff35 	bl	8001a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8014bc6:	bf00      	nop
 8014bc8:	3728      	adds	r7, #40	; 0x28
 8014bca:	46bd      	mov	sp, r7
 8014bcc:	bd80      	pop	{r7, pc}
 8014bce:	bf00      	nop
 8014bd0:	40023800 	.word	0x40023800
 8014bd4:	40020c00 	.word	0x40020c00

08014bd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8014bd8:	b480      	push	{r7}
 8014bda:	b089      	sub	sp, #36	; 0x24
 8014bdc:	af00      	add	r7, sp, #0
 8014bde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	681b      	ldr	r3, [r3, #0]
 8014be4:	4a2e      	ldr	r2, [pc, #184]	; (8014ca0 <HAL_TIM_Base_MspInit+0xc8>)
 8014be6:	4293      	cmp	r3, r2
 8014be8:	d10c      	bne.n	8014c04 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8014bea:	4b2e      	ldr	r3, [pc, #184]	; (8014ca4 <HAL_TIM_Base_MspInit+0xcc>)
 8014bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014bee:	4a2d      	ldr	r2, [pc, #180]	; (8014ca4 <HAL_TIM_Base_MspInit+0xcc>)
 8014bf0:	f043 0301 	orr.w	r3, r3, #1
 8014bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8014bf6:	4b2b      	ldr	r3, [pc, #172]	; (8014ca4 <HAL_TIM_Base_MspInit+0xcc>)
 8014bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014bfa:	f003 0301 	and.w	r3, r3, #1
 8014bfe:	61fb      	str	r3, [r7, #28]
 8014c00:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8014c02:	e046      	b.n	8014c92 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014c0c:	d10c      	bne.n	8014c28 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8014c0e:	4b25      	ldr	r3, [pc, #148]	; (8014ca4 <HAL_TIM_Base_MspInit+0xcc>)
 8014c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c12:	4a24      	ldr	r2, [pc, #144]	; (8014ca4 <HAL_TIM_Base_MspInit+0xcc>)
 8014c14:	f043 0301 	orr.w	r3, r3, #1
 8014c18:	6413      	str	r3, [r2, #64]	; 0x40
 8014c1a:	4b22      	ldr	r3, [pc, #136]	; (8014ca4 <HAL_TIM_Base_MspInit+0xcc>)
 8014c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c1e:	f003 0301 	and.w	r3, r3, #1
 8014c22:	61bb      	str	r3, [r7, #24]
 8014c24:	69bb      	ldr	r3, [r7, #24]
}
 8014c26:	e034      	b.n	8014c92 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	4a1e      	ldr	r2, [pc, #120]	; (8014ca8 <HAL_TIM_Base_MspInit+0xd0>)
 8014c2e:	4293      	cmp	r3, r2
 8014c30:	d10c      	bne.n	8014c4c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8014c32:	4b1c      	ldr	r3, [pc, #112]	; (8014ca4 <HAL_TIM_Base_MspInit+0xcc>)
 8014c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c36:	4a1b      	ldr	r2, [pc, #108]	; (8014ca4 <HAL_TIM_Base_MspInit+0xcc>)
 8014c38:	f043 0302 	orr.w	r3, r3, #2
 8014c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8014c3e:	4b19      	ldr	r3, [pc, #100]	; (8014ca4 <HAL_TIM_Base_MspInit+0xcc>)
 8014c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c42:	f003 0302 	and.w	r3, r3, #2
 8014c46:	617b      	str	r3, [r7, #20]
 8014c48:	697b      	ldr	r3, [r7, #20]
}
 8014c4a:	e022      	b.n	8014c92 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	4a16      	ldr	r2, [pc, #88]	; (8014cac <HAL_TIM_Base_MspInit+0xd4>)
 8014c52:	4293      	cmp	r3, r2
 8014c54:	d10c      	bne.n	8014c70 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8014c56:	4b13      	ldr	r3, [pc, #76]	; (8014ca4 <HAL_TIM_Base_MspInit+0xcc>)
 8014c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c5a:	4a12      	ldr	r2, [pc, #72]	; (8014ca4 <HAL_TIM_Base_MspInit+0xcc>)
 8014c5c:	f043 0308 	orr.w	r3, r3, #8
 8014c60:	6413      	str	r3, [r2, #64]	; 0x40
 8014c62:	4b10      	ldr	r3, [pc, #64]	; (8014ca4 <HAL_TIM_Base_MspInit+0xcc>)
 8014c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c66:	f003 0308 	and.w	r3, r3, #8
 8014c6a:	613b      	str	r3, [r7, #16]
 8014c6c:	693b      	ldr	r3, [r7, #16]
}
 8014c6e:	e010      	b.n	8014c92 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	4a0e      	ldr	r2, [pc, #56]	; (8014cb0 <HAL_TIM_Base_MspInit+0xd8>)
 8014c76:	4293      	cmp	r3, r2
 8014c78:	d10b      	bne.n	8014c92 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8014c7a:	4b0a      	ldr	r3, [pc, #40]	; (8014ca4 <HAL_TIM_Base_MspInit+0xcc>)
 8014c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014c7e:	4a09      	ldr	r2, [pc, #36]	; (8014ca4 <HAL_TIM_Base_MspInit+0xcc>)
 8014c80:	f043 0302 	orr.w	r3, r3, #2
 8014c84:	6453      	str	r3, [r2, #68]	; 0x44
 8014c86:	4b07      	ldr	r3, [pc, #28]	; (8014ca4 <HAL_TIM_Base_MspInit+0xcc>)
 8014c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014c8a:	f003 0302 	and.w	r3, r3, #2
 8014c8e:	60fb      	str	r3, [r7, #12]
 8014c90:	68fb      	ldr	r3, [r7, #12]
}
 8014c92:	bf00      	nop
 8014c94:	3724      	adds	r7, #36	; 0x24
 8014c96:	46bd      	mov	sp, r7
 8014c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c9c:	4770      	bx	lr
 8014c9e:	bf00      	nop
 8014ca0:	40010000 	.word	0x40010000
 8014ca4:	40023800 	.word	0x40023800
 8014ca8:	40000400 	.word	0x40000400
 8014cac:	40000c00 	.word	0x40000c00
 8014cb0:	40010400 	.word	0x40010400

08014cb4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8014cb4:	b480      	push	{r7}
 8014cb6:	b085      	sub	sp, #20
 8014cb8:	af00      	add	r7, sp, #0
 8014cba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	681b      	ldr	r3, [r3, #0]
 8014cc0:	4a0a      	ldr	r2, [pc, #40]	; (8014cec <HAL_TIM_PWM_MspInit+0x38>)
 8014cc2:	4293      	cmp	r3, r2
 8014cc4:	d10b      	bne.n	8014cde <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8014cc6:	4b0a      	ldr	r3, [pc, #40]	; (8014cf0 <HAL_TIM_PWM_MspInit+0x3c>)
 8014cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014cca:	4a09      	ldr	r2, [pc, #36]	; (8014cf0 <HAL_TIM_PWM_MspInit+0x3c>)
 8014ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8014cd2:	4b07      	ldr	r3, [pc, #28]	; (8014cf0 <HAL_TIM_PWM_MspInit+0x3c>)
 8014cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014cda:	60fb      	str	r3, [r7, #12]
 8014cdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8014cde:	bf00      	nop
 8014ce0:	3714      	adds	r7, #20
 8014ce2:	46bd      	mov	sp, r7
 8014ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce8:	4770      	bx	lr
 8014cea:	bf00      	nop
 8014cec:	40001800 	.word	0x40001800
 8014cf0:	40023800 	.word	0x40023800

08014cf4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8014cf4:	b580      	push	{r7, lr}
 8014cf6:	b08c      	sub	sp, #48	; 0x30
 8014cf8:	af00      	add	r7, sp, #0
 8014cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014cfc:	f107 031c 	add.w	r3, r7, #28
 8014d00:	2200      	movs	r2, #0
 8014d02:	601a      	str	r2, [r3, #0]
 8014d04:	605a      	str	r2, [r3, #4]
 8014d06:	609a      	str	r2, [r3, #8]
 8014d08:	60da      	str	r2, [r3, #12]
 8014d0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	681b      	ldr	r3, [r3, #0]
 8014d10:	4a56      	ldr	r2, [pc, #344]	; (8014e6c <HAL_TIM_MspPostInit+0x178>)
 8014d12:	4293      	cmp	r3, r2
 8014d14:	d11d      	bne.n	8014d52 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014d16:	4b56      	ldr	r3, [pc, #344]	; (8014e70 <HAL_TIM_MspPostInit+0x17c>)
 8014d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d1a:	4a55      	ldr	r2, [pc, #340]	; (8014e70 <HAL_TIM_MspPostInit+0x17c>)
 8014d1c:	f043 0301 	orr.w	r3, r3, #1
 8014d20:	6313      	str	r3, [r2, #48]	; 0x30
 8014d22:	4b53      	ldr	r3, [pc, #332]	; (8014e70 <HAL_TIM_MspPostInit+0x17c>)
 8014d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d26:	f003 0301 	and.w	r3, r3, #1
 8014d2a:	61bb      	str	r3, [r7, #24]
 8014d2c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8014d2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014d34:	2302      	movs	r3, #2
 8014d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014d38:	2300      	movs	r3, #0
 8014d3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014d3c:	2300      	movs	r3, #0
 8014d3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8014d40:	2301      	movs	r3, #1
 8014d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8014d44:	f107 031c 	add.w	r3, r7, #28
 8014d48:	4619      	mov	r1, r3
 8014d4a:	484a      	ldr	r0, [pc, #296]	; (8014e74 <HAL_TIM_MspPostInit+0x180>)
 8014d4c:	f7ec fe70 	bl	8001a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8014d50:	e087      	b.n	8014e62 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014d5a:	d11d      	bne.n	8014d98 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014d5c:	4b44      	ldr	r3, [pc, #272]	; (8014e70 <HAL_TIM_MspPostInit+0x17c>)
 8014d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d60:	4a43      	ldr	r2, [pc, #268]	; (8014e70 <HAL_TIM_MspPostInit+0x17c>)
 8014d62:	f043 0301 	orr.w	r3, r3, #1
 8014d66:	6313      	str	r3, [r2, #48]	; 0x30
 8014d68:	4b41      	ldr	r3, [pc, #260]	; (8014e70 <HAL_TIM_MspPostInit+0x17c>)
 8014d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d6c:	f003 0301 	and.w	r3, r3, #1
 8014d70:	617b      	str	r3, [r7, #20]
 8014d72:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8014d74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014d7a:	2302      	movs	r3, #2
 8014d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014d7e:	2300      	movs	r3, #0
 8014d80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014d82:	2300      	movs	r3, #0
 8014d84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8014d86:	2301      	movs	r3, #1
 8014d88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8014d8a:	f107 031c 	add.w	r3, r7, #28
 8014d8e:	4619      	mov	r1, r3
 8014d90:	4838      	ldr	r0, [pc, #224]	; (8014e74 <HAL_TIM_MspPostInit+0x180>)
 8014d92:	f7ec fe4d 	bl	8001a30 <HAL_GPIO_Init>
}
 8014d96:	e064      	b.n	8014e62 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	681b      	ldr	r3, [r3, #0]
 8014d9c:	4a36      	ldr	r2, [pc, #216]	; (8014e78 <HAL_TIM_MspPostInit+0x184>)
 8014d9e:	4293      	cmp	r3, r2
 8014da0:	d11c      	bne.n	8014ddc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014da2:	4b33      	ldr	r3, [pc, #204]	; (8014e70 <HAL_TIM_MspPostInit+0x17c>)
 8014da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014da6:	4a32      	ldr	r2, [pc, #200]	; (8014e70 <HAL_TIM_MspPostInit+0x17c>)
 8014da8:	f043 0302 	orr.w	r3, r3, #2
 8014dac:	6313      	str	r3, [r2, #48]	; 0x30
 8014dae:	4b30      	ldr	r3, [pc, #192]	; (8014e70 <HAL_TIM_MspPostInit+0x17c>)
 8014db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014db2:	f003 0302 	and.w	r3, r3, #2
 8014db6:	613b      	str	r3, [r7, #16]
 8014db8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8014dba:	2310      	movs	r3, #16
 8014dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014dbe:	2302      	movs	r3, #2
 8014dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014dc2:	2300      	movs	r3, #0
 8014dc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014dc6:	2300      	movs	r3, #0
 8014dc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8014dca:	2302      	movs	r3, #2
 8014dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8014dce:	f107 031c 	add.w	r3, r7, #28
 8014dd2:	4619      	mov	r1, r3
 8014dd4:	4829      	ldr	r0, [pc, #164]	; (8014e7c <HAL_TIM_MspPostInit+0x188>)
 8014dd6:	f7ec fe2b 	bl	8001a30 <HAL_GPIO_Init>
}
 8014dda:	e042      	b.n	8014e62 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	4a27      	ldr	r2, [pc, #156]	; (8014e80 <HAL_TIM_MspPostInit+0x18c>)
 8014de2:	4293      	cmp	r3, r2
 8014de4:	d11c      	bne.n	8014e20 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8014de6:	4b22      	ldr	r3, [pc, #136]	; (8014e70 <HAL_TIM_MspPostInit+0x17c>)
 8014de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014dea:	4a21      	ldr	r2, [pc, #132]	; (8014e70 <HAL_TIM_MspPostInit+0x17c>)
 8014dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014df0:	6313      	str	r3, [r2, #48]	; 0x30
 8014df2:	4b1f      	ldr	r3, [pc, #124]	; (8014e70 <HAL_TIM_MspPostInit+0x17c>)
 8014df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014dfa:	60fb      	str	r3, [r7, #12]
 8014dfc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8014dfe:	2301      	movs	r3, #1
 8014e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014e02:	2302      	movs	r3, #2
 8014e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014e06:	2300      	movs	r3, #0
 8014e08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014e0a:	2300      	movs	r3, #0
 8014e0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8014e0e:	2302      	movs	r3, #2
 8014e10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8014e12:	f107 031c 	add.w	r3, r7, #28
 8014e16:	4619      	mov	r1, r3
 8014e18:	481a      	ldr	r0, [pc, #104]	; (8014e84 <HAL_TIM_MspPostInit+0x190>)
 8014e1a:	f7ec fe09 	bl	8001a30 <HAL_GPIO_Init>
}
 8014e1e:	e020      	b.n	8014e62 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	681b      	ldr	r3, [r3, #0]
 8014e24:	4a18      	ldr	r2, [pc, #96]	; (8014e88 <HAL_TIM_MspPostInit+0x194>)
 8014e26:	4293      	cmp	r3, r2
 8014e28:	d11b      	bne.n	8014e62 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8014e2a:	4b11      	ldr	r3, [pc, #68]	; (8014e70 <HAL_TIM_MspPostInit+0x17c>)
 8014e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e2e:	4a10      	ldr	r2, [pc, #64]	; (8014e70 <HAL_TIM_MspPostInit+0x17c>)
 8014e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014e34:	6313      	str	r3, [r2, #48]	; 0x30
 8014e36:	4b0e      	ldr	r3, [pc, #56]	; (8014e70 <HAL_TIM_MspPostInit+0x17c>)
 8014e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014e3e:	60bb      	str	r3, [r7, #8]
 8014e40:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8014e42:	2340      	movs	r3, #64	; 0x40
 8014e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014e46:	2302      	movs	r3, #2
 8014e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014e4a:	2300      	movs	r3, #0
 8014e4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014e4e:	2300      	movs	r3, #0
 8014e50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8014e52:	2309      	movs	r3, #9
 8014e54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8014e56:	f107 031c 	add.w	r3, r7, #28
 8014e5a:	4619      	mov	r1, r3
 8014e5c:	480b      	ldr	r0, [pc, #44]	; (8014e8c <HAL_TIM_MspPostInit+0x198>)
 8014e5e:	f7ec fde7 	bl	8001a30 <HAL_GPIO_Init>
}
 8014e62:	bf00      	nop
 8014e64:	3730      	adds	r7, #48	; 0x30
 8014e66:	46bd      	mov	sp, r7
 8014e68:	bd80      	pop	{r7, pc}
 8014e6a:	bf00      	nop
 8014e6c:	40010000 	.word	0x40010000
 8014e70:	40023800 	.word	0x40023800
 8014e74:	40020000 	.word	0x40020000
 8014e78:	40000400 	.word	0x40000400
 8014e7c:	40020400 	.word	0x40020400
 8014e80:	40000c00 	.word	0x40000c00
 8014e84:	40022000 	.word	0x40022000
 8014e88:	40001800 	.word	0x40001800
 8014e8c:	40021c00 	.word	0x40021c00

08014e90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8014e90:	b580      	push	{r7, lr}
 8014e92:	b08c      	sub	sp, #48	; 0x30
 8014e94:	af00      	add	r7, sp, #0
 8014e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014e98:	f107 031c 	add.w	r3, r7, #28
 8014e9c:	2200      	movs	r2, #0
 8014e9e:	601a      	str	r2, [r3, #0]
 8014ea0:	605a      	str	r2, [r3, #4]
 8014ea2:	609a      	str	r2, [r3, #8]
 8014ea4:	60da      	str	r2, [r3, #12]
 8014ea6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	4a3c      	ldr	r2, [pc, #240]	; (8014fa0 <HAL_UART_MspInit+0x110>)
 8014eae:	4293      	cmp	r3, r2
 8014eb0:	d145      	bne.n	8014f3e <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8014eb2:	4b3c      	ldr	r3, [pc, #240]	; (8014fa4 <HAL_UART_MspInit+0x114>)
 8014eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014eb6:	4a3b      	ldr	r2, [pc, #236]	; (8014fa4 <HAL_UART_MspInit+0x114>)
 8014eb8:	f043 0310 	orr.w	r3, r3, #16
 8014ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8014ebe:	4b39      	ldr	r3, [pc, #228]	; (8014fa4 <HAL_UART_MspInit+0x114>)
 8014ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014ec2:	f003 0310 	and.w	r3, r3, #16
 8014ec6:	61bb      	str	r3, [r7, #24]
 8014ec8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014eca:	4b36      	ldr	r3, [pc, #216]	; (8014fa4 <HAL_UART_MspInit+0x114>)
 8014ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ece:	4a35      	ldr	r2, [pc, #212]	; (8014fa4 <HAL_UART_MspInit+0x114>)
 8014ed0:	f043 0302 	orr.w	r3, r3, #2
 8014ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8014ed6:	4b33      	ldr	r3, [pc, #204]	; (8014fa4 <HAL_UART_MspInit+0x114>)
 8014ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014eda:	f003 0302 	and.w	r3, r3, #2
 8014ede:	617b      	str	r3, [r7, #20]
 8014ee0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014ee2:	4b30      	ldr	r3, [pc, #192]	; (8014fa4 <HAL_UART_MspInit+0x114>)
 8014ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ee6:	4a2f      	ldr	r2, [pc, #188]	; (8014fa4 <HAL_UART_MspInit+0x114>)
 8014ee8:	f043 0301 	orr.w	r3, r3, #1
 8014eec:	6313      	str	r3, [r2, #48]	; 0x30
 8014eee:	4b2d      	ldr	r3, [pc, #180]	; (8014fa4 <HAL_UART_MspInit+0x114>)
 8014ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ef2:	f003 0301 	and.w	r3, r3, #1
 8014ef6:	613b      	str	r3, [r7, #16]
 8014ef8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8014efa:	2380      	movs	r3, #128	; 0x80
 8014efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014efe:	2302      	movs	r3, #2
 8014f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014f02:	2300      	movs	r3, #0
 8014f04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014f06:	2300      	movs	r3, #0
 8014f08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8014f0a:	2307      	movs	r3, #7
 8014f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8014f0e:	f107 031c 	add.w	r3, r7, #28
 8014f12:	4619      	mov	r1, r3
 8014f14:	4824      	ldr	r0, [pc, #144]	; (8014fa8 <HAL_UART_MspInit+0x118>)
 8014f16:	f7ec fd8b 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8014f1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014f20:	2302      	movs	r3, #2
 8014f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014f24:	2300      	movs	r3, #0
 8014f26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014f28:	2300      	movs	r3, #0
 8014f2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8014f2c:	2307      	movs	r3, #7
 8014f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8014f30:	f107 031c 	add.w	r3, r7, #28
 8014f34:	4619      	mov	r1, r3
 8014f36:	481d      	ldr	r0, [pc, #116]	; (8014fac <HAL_UART_MspInit+0x11c>)
 8014f38:	f7ec fd7a 	bl	8001a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8014f3c:	e02c      	b.n	8014f98 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	681b      	ldr	r3, [r3, #0]
 8014f42:	4a1b      	ldr	r2, [pc, #108]	; (8014fb0 <HAL_UART_MspInit+0x120>)
 8014f44:	4293      	cmp	r3, r2
 8014f46:	d127      	bne.n	8014f98 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8014f48:	4b16      	ldr	r3, [pc, #88]	; (8014fa4 <HAL_UART_MspInit+0x114>)
 8014f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014f4c:	4a15      	ldr	r2, [pc, #84]	; (8014fa4 <HAL_UART_MspInit+0x114>)
 8014f4e:	f043 0320 	orr.w	r3, r3, #32
 8014f52:	6453      	str	r3, [r2, #68]	; 0x44
 8014f54:	4b13      	ldr	r3, [pc, #76]	; (8014fa4 <HAL_UART_MspInit+0x114>)
 8014f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014f58:	f003 0320 	and.w	r3, r3, #32
 8014f5c:	60fb      	str	r3, [r7, #12]
 8014f5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8014f60:	4b10      	ldr	r3, [pc, #64]	; (8014fa4 <HAL_UART_MspInit+0x114>)
 8014f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f64:	4a0f      	ldr	r2, [pc, #60]	; (8014fa4 <HAL_UART_MspInit+0x114>)
 8014f66:	f043 0304 	orr.w	r3, r3, #4
 8014f6a:	6313      	str	r3, [r2, #48]	; 0x30
 8014f6c:	4b0d      	ldr	r3, [pc, #52]	; (8014fa4 <HAL_UART_MspInit+0x114>)
 8014f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f70:	f003 0304 	and.w	r3, r3, #4
 8014f74:	60bb      	str	r3, [r7, #8]
 8014f76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8014f78:	23c0      	movs	r3, #192	; 0xc0
 8014f7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014f7c:	2302      	movs	r3, #2
 8014f7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014f80:	2300      	movs	r3, #0
 8014f82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014f84:	2303      	movs	r3, #3
 8014f86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8014f88:	2308      	movs	r3, #8
 8014f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014f8c:	f107 031c 	add.w	r3, r7, #28
 8014f90:	4619      	mov	r1, r3
 8014f92:	4808      	ldr	r0, [pc, #32]	; (8014fb4 <HAL_UART_MspInit+0x124>)
 8014f94:	f7ec fd4c 	bl	8001a30 <HAL_GPIO_Init>
}
 8014f98:	bf00      	nop
 8014f9a:	3730      	adds	r7, #48	; 0x30
 8014f9c:	46bd      	mov	sp, r7
 8014f9e:	bd80      	pop	{r7, pc}
 8014fa0:	40011000 	.word	0x40011000
 8014fa4:	40023800 	.word	0x40023800
 8014fa8:	40020400 	.word	0x40020400
 8014fac:	40020000 	.word	0x40020000
 8014fb0:	40011400 	.word	0x40011400
 8014fb4:	40020800 	.word	0x40020800

08014fb8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8014fb8:	b580      	push	{r7, lr}
 8014fba:	b086      	sub	sp, #24
 8014fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8014fbe:	1d3b      	adds	r3, r7, #4
 8014fc0:	2200      	movs	r2, #0
 8014fc2:	601a      	str	r2, [r3, #0]
 8014fc4:	605a      	str	r2, [r3, #4]
 8014fc6:	609a      	str	r2, [r3, #8]
 8014fc8:	60da      	str	r2, [r3, #12]
 8014fca:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8014fcc:	4b3a      	ldr	r3, [pc, #232]	; (80150b8 <HAL_FMC_MspInit+0x100>)
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d16d      	bne.n	80150b0 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8014fd4:	4b38      	ldr	r3, [pc, #224]	; (80150b8 <HAL_FMC_MspInit+0x100>)
 8014fd6:	2201      	movs	r2, #1
 8014fd8:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8014fda:	4b38      	ldr	r3, [pc, #224]	; (80150bc <HAL_FMC_MspInit+0x104>)
 8014fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014fde:	4a37      	ldr	r2, [pc, #220]	; (80150bc <HAL_FMC_MspInit+0x104>)
 8014fe0:	f043 0301 	orr.w	r3, r3, #1
 8014fe4:	6393      	str	r3, [r2, #56]	; 0x38
 8014fe6:	4b35      	ldr	r3, [pc, #212]	; (80150bc <HAL_FMC_MspInit+0x104>)
 8014fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014fea:	f003 0301 	and.w	r3, r3, #1
 8014fee:	603b      	str	r3, [r7, #0]
 8014ff0:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8014ff2:	f64f 7383 	movw	r3, #65411	; 0xff83
 8014ff6:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014ff8:	2302      	movs	r3, #2
 8014ffa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014ffc:	2300      	movs	r3, #0
 8014ffe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015000:	2303      	movs	r3, #3
 8015002:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8015004:	230c      	movs	r3, #12
 8015006:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8015008:	1d3b      	adds	r3, r7, #4
 801500a:	4619      	mov	r1, r3
 801500c:	482c      	ldr	r0, [pc, #176]	; (80150c0 <HAL_FMC_MspInit+0x108>)
 801500e:	f7ec fd0f 	bl	8001a30 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8015012:	f248 1333 	movw	r3, #33075	; 0x8133
 8015016:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015018:	2302      	movs	r3, #2
 801501a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801501c:	2300      	movs	r3, #0
 801501e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015020:	2303      	movs	r3, #3
 8015022:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8015024:	230c      	movs	r3, #12
 8015026:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8015028:	1d3b      	adds	r3, r7, #4
 801502a:	4619      	mov	r1, r3
 801502c:	4825      	ldr	r0, [pc, #148]	; (80150c4 <HAL_FMC_MspInit+0x10c>)
 801502e:	f7ec fcff 	bl	8001a30 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8015032:	f24c 7303 	movw	r3, #50947	; 0xc703
 8015036:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015038:	2302      	movs	r3, #2
 801503a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801503c:	2300      	movs	r3, #0
 801503e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015040:	2303      	movs	r3, #3
 8015042:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8015044:	230c      	movs	r3, #12
 8015046:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8015048:	1d3b      	adds	r3, r7, #4
 801504a:	4619      	mov	r1, r3
 801504c:	481e      	ldr	r0, [pc, #120]	; (80150c8 <HAL_FMC_MspInit+0x110>)
 801504e:	f7ec fcef 	bl	8001a30 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8015052:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8015056:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015058:	2302      	movs	r3, #2
 801505a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801505c:	2300      	movs	r3, #0
 801505e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015060:	2303      	movs	r3, #3
 8015062:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8015064:	230c      	movs	r3, #12
 8015066:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8015068:	1d3b      	adds	r3, r7, #4
 801506a:	4619      	mov	r1, r3
 801506c:	4817      	ldr	r0, [pc, #92]	; (80150cc <HAL_FMC_MspInit+0x114>)
 801506e:	f7ec fcdf 	bl	8001a30 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8015072:	2328      	movs	r3, #40	; 0x28
 8015074:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015076:	2302      	movs	r3, #2
 8015078:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801507a:	2300      	movs	r3, #0
 801507c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801507e:	2303      	movs	r3, #3
 8015080:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8015082:	230c      	movs	r3, #12
 8015084:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8015086:	1d3b      	adds	r3, r7, #4
 8015088:	4619      	mov	r1, r3
 801508a:	4811      	ldr	r0, [pc, #68]	; (80150d0 <HAL_FMC_MspInit+0x118>)
 801508c:	f7ec fcd0 	bl	8001a30 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8015090:	2308      	movs	r3, #8
 8015092:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015094:	2302      	movs	r3, #2
 8015096:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015098:	2300      	movs	r3, #0
 801509a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801509c:	2303      	movs	r3, #3
 801509e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80150a0:	230c      	movs	r3, #12
 80150a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80150a4:	1d3b      	adds	r3, r7, #4
 80150a6:	4619      	mov	r1, r3
 80150a8:	480a      	ldr	r0, [pc, #40]	; (80150d4 <HAL_FMC_MspInit+0x11c>)
 80150aa:	f7ec fcc1 	bl	8001a30 <HAL_GPIO_Init>
 80150ae:	e000      	b.n	80150b2 <HAL_FMC_MspInit+0xfa>
    return;
 80150b0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80150b2:	3718      	adds	r7, #24
 80150b4:	46bd      	mov	sp, r7
 80150b6:	bd80      	pop	{r7, pc}
 80150b8:	20008438 	.word	0x20008438
 80150bc:	40023800 	.word	0x40023800
 80150c0:	40021000 	.word	0x40021000
 80150c4:	40021800 	.word	0x40021800
 80150c8:	40020c00 	.word	0x40020c00
 80150cc:	40021400 	.word	0x40021400
 80150d0:	40021c00 	.word	0x40021c00
 80150d4:	40020800 	.word	0x40020800

080150d8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80150d8:	b580      	push	{r7, lr}
 80150da:	b082      	sub	sp, #8
 80150dc:	af00      	add	r7, sp, #0
 80150de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80150e0:	f7ff ff6a 	bl	8014fb8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80150e4:	bf00      	nop
 80150e6:	3708      	adds	r7, #8
 80150e8:	46bd      	mov	sp, r7
 80150ea:	bd80      	pop	{r7, pc}

080150ec <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80150ec:	b580      	push	{r7, lr}
 80150ee:	b08a      	sub	sp, #40	; 0x28
 80150f0:	af00      	add	r7, sp, #0
 80150f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	4a2b      	ldr	r2, [pc, #172]	; (80151a8 <HAL_SAI_MspInit+0xbc>)
 80150fa:	4293      	cmp	r3, r2
 80150fc:	d124      	bne.n	8015148 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80150fe:	4b2b      	ldr	r3, [pc, #172]	; (80151ac <HAL_SAI_MspInit+0xc0>)
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	2b00      	cmp	r3, #0
 8015104:	d10b      	bne.n	801511e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8015106:	4b2a      	ldr	r3, [pc, #168]	; (80151b0 <HAL_SAI_MspInit+0xc4>)
 8015108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801510a:	4a29      	ldr	r2, [pc, #164]	; (80151b0 <HAL_SAI_MspInit+0xc4>)
 801510c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015110:	6453      	str	r3, [r2, #68]	; 0x44
 8015112:	4b27      	ldr	r3, [pc, #156]	; (80151b0 <HAL_SAI_MspInit+0xc4>)
 8015114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015116:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801511a:	613b      	str	r3, [r7, #16]
 801511c:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 801511e:	4b23      	ldr	r3, [pc, #140]	; (80151ac <HAL_SAI_MspInit+0xc0>)
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	3301      	adds	r3, #1
 8015124:	4a21      	ldr	r2, [pc, #132]	; (80151ac <HAL_SAI_MspInit+0xc0>)
 8015126:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8015128:	23f0      	movs	r3, #240	; 0xf0
 801512a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801512c:	2302      	movs	r3, #2
 801512e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015130:	2300      	movs	r3, #0
 8015132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015134:	2300      	movs	r3, #0
 8015136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8015138:	230a      	movs	r3, #10
 801513a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801513c:	f107 0314 	add.w	r3, r7, #20
 8015140:	4619      	mov	r1, r3
 8015142:	481c      	ldr	r0, [pc, #112]	; (80151b4 <HAL_SAI_MspInit+0xc8>)
 8015144:	f7ec fc74 	bl	8001a30 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	4a1a      	ldr	r2, [pc, #104]	; (80151b8 <HAL_SAI_MspInit+0xcc>)
 801514e:	4293      	cmp	r3, r2
 8015150:	d125      	bne.n	801519e <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8015152:	4b16      	ldr	r3, [pc, #88]	; (80151ac <HAL_SAI_MspInit+0xc0>)
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	2b00      	cmp	r3, #0
 8015158:	d10b      	bne.n	8015172 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 801515a:	4b15      	ldr	r3, [pc, #84]	; (80151b0 <HAL_SAI_MspInit+0xc4>)
 801515c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801515e:	4a14      	ldr	r2, [pc, #80]	; (80151b0 <HAL_SAI_MspInit+0xc4>)
 8015160:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015164:	6453      	str	r3, [r2, #68]	; 0x44
 8015166:	4b12      	ldr	r3, [pc, #72]	; (80151b0 <HAL_SAI_MspInit+0xc4>)
 8015168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801516a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801516e:	60fb      	str	r3, [r7, #12]
 8015170:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8015172:	4b0e      	ldr	r3, [pc, #56]	; (80151ac <HAL_SAI_MspInit+0xc0>)
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	3301      	adds	r3, #1
 8015178:	4a0c      	ldr	r2, [pc, #48]	; (80151ac <HAL_SAI_MspInit+0xc0>)
 801517a:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 801517c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015182:	2302      	movs	r3, #2
 8015184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015186:	2300      	movs	r3, #0
 8015188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801518a:	2300      	movs	r3, #0
 801518c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 801518e:	230a      	movs	r3, #10
 8015190:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8015192:	f107 0314 	add.w	r3, r7, #20
 8015196:	4619      	mov	r1, r3
 8015198:	4808      	ldr	r0, [pc, #32]	; (80151bc <HAL_SAI_MspInit+0xd0>)
 801519a:	f7ec fc49 	bl	8001a30 <HAL_GPIO_Init>

    }
}
 801519e:	bf00      	nop
 80151a0:	3728      	adds	r7, #40	; 0x28
 80151a2:	46bd      	mov	sp, r7
 80151a4:	bd80      	pop	{r7, pc}
 80151a6:	bf00      	nop
 80151a8:	40015c04 	.word	0x40015c04
 80151ac:	2000843c 	.word	0x2000843c
 80151b0:	40023800 	.word	0x40023800
 80151b4:	40022000 	.word	0x40022000
 80151b8:	40015c24 	.word	0x40015c24
 80151bc:	40021800 	.word	0x40021800

080151c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80151c0:	b580      	push	{r7, lr}
 80151c2:	b08c      	sub	sp, #48	; 0x30
 80151c4:	af00      	add	r7, sp, #0
 80151c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80151c8:	2300      	movs	r3, #0
 80151ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80151cc:	2300      	movs	r3, #0
 80151ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80151d0:	2200      	movs	r2, #0
 80151d2:	6879      	ldr	r1, [r7, #4]
 80151d4:	2036      	movs	r0, #54	; 0x36
 80151d6:	f7eb fd15 	bl	8000c04 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80151da:	2036      	movs	r0, #54	; 0x36
 80151dc:	f7eb fd2e 	bl	8000c3c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80151e0:	4b1f      	ldr	r3, [pc, #124]	; (8015260 <HAL_InitTick+0xa0>)
 80151e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80151e4:	4a1e      	ldr	r2, [pc, #120]	; (8015260 <HAL_InitTick+0xa0>)
 80151e6:	f043 0310 	orr.w	r3, r3, #16
 80151ea:	6413      	str	r3, [r2, #64]	; 0x40
 80151ec:	4b1c      	ldr	r3, [pc, #112]	; (8015260 <HAL_InitTick+0xa0>)
 80151ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80151f0:	f003 0310 	and.w	r3, r3, #16
 80151f4:	60fb      	str	r3, [r7, #12]
 80151f6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80151f8:	f107 0210 	add.w	r2, r7, #16
 80151fc:	f107 0314 	add.w	r3, r7, #20
 8015200:	4611      	mov	r1, r2
 8015202:	4618      	mov	r0, r3
 8015204:	f7ef fc4a 	bl	8004a9c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8015208:	f7ef fc20 	bl	8004a4c <HAL_RCC_GetPCLK1Freq>
 801520c:	4603      	mov	r3, r0
 801520e:	005b      	lsls	r3, r3, #1
 8015210:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8015212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015214:	4a13      	ldr	r2, [pc, #76]	; (8015264 <HAL_InitTick+0xa4>)
 8015216:	fba2 2303 	umull	r2, r3, r2, r3
 801521a:	0c9b      	lsrs	r3, r3, #18
 801521c:	3b01      	subs	r3, #1
 801521e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8015220:	4b11      	ldr	r3, [pc, #68]	; (8015268 <HAL_InitTick+0xa8>)
 8015222:	4a12      	ldr	r2, [pc, #72]	; (801526c <HAL_InitTick+0xac>)
 8015224:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8015226:	4b10      	ldr	r3, [pc, #64]	; (8015268 <HAL_InitTick+0xa8>)
 8015228:	f240 32e7 	movw	r2, #999	; 0x3e7
 801522c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 801522e:	4a0e      	ldr	r2, [pc, #56]	; (8015268 <HAL_InitTick+0xa8>)
 8015230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015232:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8015234:	4b0c      	ldr	r3, [pc, #48]	; (8015268 <HAL_InitTick+0xa8>)
 8015236:	2200      	movs	r2, #0
 8015238:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 801523a:	4b0b      	ldr	r3, [pc, #44]	; (8015268 <HAL_InitTick+0xa8>)
 801523c:	2200      	movs	r2, #0
 801523e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8015240:	4809      	ldr	r0, [pc, #36]	; (8015268 <HAL_InitTick+0xa8>)
 8015242:	f7f2 fa57 	bl	80076f4 <HAL_TIM_Base_Init>
 8015246:	4603      	mov	r3, r0
 8015248:	2b00      	cmp	r3, #0
 801524a:	d104      	bne.n	8015256 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 801524c:	4806      	ldr	r0, [pc, #24]	; (8015268 <HAL_InitTick+0xa8>)
 801524e:	f7f2 fa7d 	bl	800774c <HAL_TIM_Base_Start_IT>
 8015252:	4603      	mov	r3, r0
 8015254:	e000      	b.n	8015258 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8015256:	2301      	movs	r3, #1
}
 8015258:	4618      	mov	r0, r3
 801525a:	3730      	adds	r7, #48	; 0x30
 801525c:	46bd      	mov	sp, r7
 801525e:	bd80      	pop	{r7, pc}
 8015260:	40023800 	.word	0x40023800
 8015264:	431bde83 	.word	0x431bde83
 8015268:	2000995c 	.word	0x2000995c
 801526c:	40001000 	.word	0x40001000

08015270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8015270:	b480      	push	{r7}
 8015272:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8015274:	bf00      	nop
 8015276:	46bd      	mov	sp, r7
 8015278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801527c:	4770      	bx	lr

0801527e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801527e:	b480      	push	{r7}
 8015280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8015282:	e7fe      	b.n	8015282 <HardFault_Handler+0x4>

08015284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8015284:	b480      	push	{r7}
 8015286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8015288:	e7fe      	b.n	8015288 <MemManage_Handler+0x4>

0801528a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801528a:	b480      	push	{r7}
 801528c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801528e:	e7fe      	b.n	801528e <BusFault_Handler+0x4>

08015290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8015290:	b480      	push	{r7}
 8015292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8015294:	e7fe      	b.n	8015294 <UsageFault_Handler+0x4>

08015296 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8015296:	b480      	push	{r7}
 8015298:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 801529a:	bf00      	nop
 801529c:	46bd      	mov	sp, r7
 801529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a2:	4770      	bx	lr

080152a4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80152a4:	b580      	push	{r7, lr}
 80152a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80152a8:	4802      	ldr	r0, [pc, #8]	; (80152b4 <SDMMC1_IRQHandler+0x10>)
 80152aa:	f7f1 f8e1 	bl	8006470 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80152ae:	bf00      	nop
 80152b0:	bd80      	pop	{r7, pc}
 80152b2:	bf00      	nop
 80152b4:	20008b54 	.word	0x20008b54

080152b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80152b8:	b580      	push	{r7, lr}
 80152ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80152bc:	4802      	ldr	r0, [pc, #8]	; (80152c8 <TIM6_DAC_IRQHandler+0x10>)
 80152be:	f7f2 fa9a 	bl	80077f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80152c2:	bf00      	nop
 80152c4:	bd80      	pop	{r7, pc}
 80152c6:	bf00      	nop
 80152c8:	2000995c 	.word	0x2000995c

080152cc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80152cc:	b580      	push	{r7, lr}
 80152ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 80152d0:	4802      	ldr	r0, [pc, #8]	; (80152dc <DMA2_Stream3_IRQHandler+0x10>)
 80152d2:	f7eb ff4d 	bl	8001170 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80152d6:	bf00      	nop
 80152d8:	bd80      	pop	{r7, pc}
 80152da:	bf00      	nop
 80152dc:	200098b0 	.word	0x200098b0

080152e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80152e0:	b580      	push	{r7, lr}
 80152e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80152e4:	4802      	ldr	r0, [pc, #8]	; (80152f0 <OTG_FS_IRQHandler+0x10>)
 80152e6:	f7ec fff7 	bl	80022d8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80152ea:	bf00      	nop
 80152ec:	bd80      	pop	{r7, pc}
 80152ee:	bf00      	nop
 80152f0:	20009d74 	.word	0x20009d74

080152f4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80152f4:	b580      	push	{r7, lr}
 80152f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 80152f8:	4802      	ldr	r0, [pc, #8]	; (8015304 <DMA2_Stream6_IRQHandler+0x10>)
 80152fa:	f7eb ff39 	bl	8001170 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80152fe:	bf00      	nop
 8015300:	bd80      	pop	{r7, pc}
 8015302:	bf00      	nop
 8015304:	200096dc 	.word	0x200096dc

08015308 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8015308:	b580      	push	{r7, lr}
 801530a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 801530c:	4802      	ldr	r0, [pc, #8]	; (8015318 <LTDC_IRQHandler+0x10>)
 801530e:	f7ee fbbd 	bl	8003a8c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8015312:	bf00      	nop
 8015314:	bd80      	pop	{r7, pc}
 8015316:	bf00      	nop
 8015318:	20008c58 	.word	0x20008c58

0801531c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 801531c:	b580      	push	{r7, lr}
 801531e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8015320:	4802      	ldr	r0, [pc, #8]	; (801532c <DMA2D_IRQHandler+0x10>)
 8015322:	f7ec f9e3 	bl	80016ec <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8015326:	bf00      	nop
 8015328:	bd80      	pop	{r7, pc}
 801532a:	bf00      	nop
 801532c:	200097bc 	.word	0x200097bc

08015330 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8015330:	b580      	push	{r7, lr}
 8015332:	b084      	sub	sp, #16
 8015334:	af00      	add	r7, sp, #0
 8015336:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8015338:	4b11      	ldr	r3, [pc, #68]	; (8015380 <_sbrk+0x50>)
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	2b00      	cmp	r3, #0
 801533e:	d102      	bne.n	8015346 <_sbrk+0x16>
		heap_end = &end;
 8015340:	4b0f      	ldr	r3, [pc, #60]	; (8015380 <_sbrk+0x50>)
 8015342:	4a10      	ldr	r2, [pc, #64]	; (8015384 <_sbrk+0x54>)
 8015344:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8015346:	4b0e      	ldr	r3, [pc, #56]	; (8015380 <_sbrk+0x50>)
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 801534c:	4b0c      	ldr	r3, [pc, #48]	; (8015380 <_sbrk+0x50>)
 801534e:	681a      	ldr	r2, [r3, #0]
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	4413      	add	r3, r2
 8015354:	466a      	mov	r2, sp
 8015356:	4293      	cmp	r3, r2
 8015358:	d907      	bls.n	801536a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 801535a:	f000 fb6b 	bl	8015a34 <__errno>
 801535e:	4602      	mov	r2, r0
 8015360:	230c      	movs	r3, #12
 8015362:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8015364:	f04f 33ff 	mov.w	r3, #4294967295
 8015368:	e006      	b.n	8015378 <_sbrk+0x48>
	}

	heap_end += incr;
 801536a:	4b05      	ldr	r3, [pc, #20]	; (8015380 <_sbrk+0x50>)
 801536c:	681a      	ldr	r2, [r3, #0]
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	4413      	add	r3, r2
 8015372:	4a03      	ldr	r2, [pc, #12]	; (8015380 <_sbrk+0x50>)
 8015374:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8015376:	68fb      	ldr	r3, [r7, #12]
}
 8015378:	4618      	mov	r0, r3
 801537a:	3710      	adds	r7, #16
 801537c:	46bd      	mov	sp, r7
 801537e:	bd80      	pop	{r7, pc}
 8015380:	20008440 	.word	0x20008440
 8015384:	2000a040 	.word	0x2000a040

08015388 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8015388:	b480      	push	{r7}
 801538a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801538c:	4b15      	ldr	r3, [pc, #84]	; (80153e4 <SystemInit+0x5c>)
 801538e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015392:	4a14      	ldr	r2, [pc, #80]	; (80153e4 <SystemInit+0x5c>)
 8015394:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015398:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 801539c:	4b12      	ldr	r3, [pc, #72]	; (80153e8 <SystemInit+0x60>)
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	4a11      	ldr	r2, [pc, #68]	; (80153e8 <SystemInit+0x60>)
 80153a2:	f043 0301 	orr.w	r3, r3, #1
 80153a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80153a8:	4b0f      	ldr	r3, [pc, #60]	; (80153e8 <SystemInit+0x60>)
 80153aa:	2200      	movs	r2, #0
 80153ac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80153ae:	4b0e      	ldr	r3, [pc, #56]	; (80153e8 <SystemInit+0x60>)
 80153b0:	681a      	ldr	r2, [r3, #0]
 80153b2:	490d      	ldr	r1, [pc, #52]	; (80153e8 <SystemInit+0x60>)
 80153b4:	4b0d      	ldr	r3, [pc, #52]	; (80153ec <SystemInit+0x64>)
 80153b6:	4013      	ands	r3, r2
 80153b8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80153ba:	4b0b      	ldr	r3, [pc, #44]	; (80153e8 <SystemInit+0x60>)
 80153bc:	4a0c      	ldr	r2, [pc, #48]	; (80153f0 <SystemInit+0x68>)
 80153be:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80153c0:	4b09      	ldr	r3, [pc, #36]	; (80153e8 <SystemInit+0x60>)
 80153c2:	681b      	ldr	r3, [r3, #0]
 80153c4:	4a08      	ldr	r2, [pc, #32]	; (80153e8 <SystemInit+0x60>)
 80153c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80153ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80153cc:	4b06      	ldr	r3, [pc, #24]	; (80153e8 <SystemInit+0x60>)
 80153ce:	2200      	movs	r2, #0
 80153d0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80153d2:	4b04      	ldr	r3, [pc, #16]	; (80153e4 <SystemInit+0x5c>)
 80153d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80153d8:	609a      	str	r2, [r3, #8]
#endif
}
 80153da:	bf00      	nop
 80153dc:	46bd      	mov	sp, r7
 80153de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153e2:	4770      	bx	lr
 80153e4:	e000ed00 	.word	0xe000ed00
 80153e8:	40023800 	.word	0x40023800
 80153ec:	fef6ffff 	.word	0xfef6ffff
 80153f0:	24003010 	.word	0x24003010

080153f4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80153f4:	b580      	push	{r7, lr}
 80153f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80153f8:	2201      	movs	r2, #1
 80153fa:	490e      	ldr	r1, [pc, #56]	; (8015434 <MX_USB_HOST_Init+0x40>)
 80153fc:	480e      	ldr	r0, [pc, #56]	; (8015438 <MX_USB_HOST_Init+0x44>)
 80153fe:	f7f5 feef 	bl	800b1e0 <USBH_Init>
 8015402:	4603      	mov	r3, r0
 8015404:	2b00      	cmp	r3, #0
 8015406:	d001      	beq.n	801540c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8015408:	f7fe fd22 	bl	8013e50 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801540c:	490b      	ldr	r1, [pc, #44]	; (801543c <MX_USB_HOST_Init+0x48>)
 801540e:	480a      	ldr	r0, [pc, #40]	; (8015438 <MX_USB_HOST_Init+0x44>)
 8015410:	f7f5 ff81 	bl	800b316 <USBH_RegisterClass>
 8015414:	4603      	mov	r3, r0
 8015416:	2b00      	cmp	r3, #0
 8015418:	d001      	beq.n	801541e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801541a:	f7fe fd19 	bl	8013e50 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801541e:	4806      	ldr	r0, [pc, #24]	; (8015438 <MX_USB_HOST_Init+0x44>)
 8015420:	f7f6 f806 	bl	800b430 <USBH_Start>
 8015424:	4603      	mov	r3, r0
 8015426:	2b00      	cmp	r3, #0
 8015428:	d001      	beq.n	801542e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801542a:	f7fe fd11 	bl	8013e50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801542e:	bf00      	nop
 8015430:	bd80      	pop	{r7, pc}
 8015432:	bf00      	nop
 8015434:	08015441 	.word	0x08015441
 8015438:	2000999c 	.word	0x2000999c
 801543c:	20000004 	.word	0x20000004

08015440 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8015440:	b480      	push	{r7}
 8015442:	b083      	sub	sp, #12
 8015444:	af00      	add	r7, sp, #0
 8015446:	6078      	str	r0, [r7, #4]
 8015448:	460b      	mov	r3, r1
 801544a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801544c:	78fb      	ldrb	r3, [r7, #3]
 801544e:	3b01      	subs	r3, #1
 8015450:	2b04      	cmp	r3, #4
 8015452:	d819      	bhi.n	8015488 <USBH_UserProcess+0x48>
 8015454:	a201      	add	r2, pc, #4	; (adr r2, 801545c <USBH_UserProcess+0x1c>)
 8015456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801545a:	bf00      	nop
 801545c:	08015489 	.word	0x08015489
 8015460:	08015479 	.word	0x08015479
 8015464:	08015489 	.word	0x08015489
 8015468:	08015481 	.word	0x08015481
 801546c:	08015471 	.word	0x08015471
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8015470:	4b09      	ldr	r3, [pc, #36]	; (8015498 <USBH_UserProcess+0x58>)
 8015472:	2203      	movs	r2, #3
 8015474:	701a      	strb	r2, [r3, #0]
  break;
 8015476:	e008      	b.n	801548a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8015478:	4b07      	ldr	r3, [pc, #28]	; (8015498 <USBH_UserProcess+0x58>)
 801547a:	2202      	movs	r2, #2
 801547c:	701a      	strb	r2, [r3, #0]
  break;
 801547e:	e004      	b.n	801548a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8015480:	4b05      	ldr	r3, [pc, #20]	; (8015498 <USBH_UserProcess+0x58>)
 8015482:	2201      	movs	r2, #1
 8015484:	701a      	strb	r2, [r3, #0]
  break;
 8015486:	e000      	b.n	801548a <USBH_UserProcess+0x4a>

  default:
  break;
 8015488:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801548a:	bf00      	nop
 801548c:	370c      	adds	r7, #12
 801548e:	46bd      	mov	sp, r7
 8015490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015494:	4770      	bx	lr
 8015496:	bf00      	nop
 8015498:	20008444 	.word	0x20008444

0801549c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801549c:	b580      	push	{r7, lr}
 801549e:	b08a      	sub	sp, #40	; 0x28
 80154a0:	af00      	add	r7, sp, #0
 80154a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80154a4:	f107 0314 	add.w	r3, r7, #20
 80154a8:	2200      	movs	r2, #0
 80154aa:	601a      	str	r2, [r3, #0]
 80154ac:	605a      	str	r2, [r3, #4]
 80154ae:	609a      	str	r2, [r3, #8]
 80154b0:	60da      	str	r2, [r3, #12]
 80154b2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	681b      	ldr	r3, [r3, #0]
 80154b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80154bc:	d13c      	bne.n	8015538 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80154be:	4b20      	ldr	r3, [pc, #128]	; (8015540 <HAL_HCD_MspInit+0xa4>)
 80154c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154c2:	4a1f      	ldr	r2, [pc, #124]	; (8015540 <HAL_HCD_MspInit+0xa4>)
 80154c4:	f043 0301 	orr.w	r3, r3, #1
 80154c8:	6313      	str	r3, [r2, #48]	; 0x30
 80154ca:	4b1d      	ldr	r3, [pc, #116]	; (8015540 <HAL_HCD_MspInit+0xa4>)
 80154cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154ce:	f003 0301 	and.w	r3, r3, #1
 80154d2:	613b      	str	r3, [r7, #16]
 80154d4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID 
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80154d6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80154da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80154dc:	2302      	movs	r3, #2
 80154de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80154e0:	2300      	movs	r3, #0
 80154e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80154e4:	2303      	movs	r3, #3
 80154e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80154e8:	230a      	movs	r3, #10
 80154ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80154ec:	f107 0314 	add.w	r3, r7, #20
 80154f0:	4619      	mov	r1, r3
 80154f2:	4814      	ldr	r0, [pc, #80]	; (8015544 <HAL_HCD_MspInit+0xa8>)
 80154f4:	f7ec fa9c 	bl	8001a30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80154f8:	4b11      	ldr	r3, [pc, #68]	; (8015540 <HAL_HCD_MspInit+0xa4>)
 80154fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80154fc:	4a10      	ldr	r2, [pc, #64]	; (8015540 <HAL_HCD_MspInit+0xa4>)
 80154fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015502:	6353      	str	r3, [r2, #52]	; 0x34
 8015504:	4b0e      	ldr	r3, [pc, #56]	; (8015540 <HAL_HCD_MspInit+0xa4>)
 8015506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801550c:	60fb      	str	r3, [r7, #12]
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	4b0b      	ldr	r3, [pc, #44]	; (8015540 <HAL_HCD_MspInit+0xa4>)
 8015512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015514:	4a0a      	ldr	r2, [pc, #40]	; (8015540 <HAL_HCD_MspInit+0xa4>)
 8015516:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801551a:	6453      	str	r3, [r2, #68]	; 0x44
 801551c:	4b08      	ldr	r3, [pc, #32]	; (8015540 <HAL_HCD_MspInit+0xa4>)
 801551e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015520:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015524:	60bb      	str	r3, [r7, #8]
 8015526:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8015528:	2200      	movs	r2, #0
 801552a:	2105      	movs	r1, #5
 801552c:	2043      	movs	r0, #67	; 0x43
 801552e:	f7eb fb69 	bl	8000c04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015532:	2043      	movs	r0, #67	; 0x43
 8015534:	f7eb fb82 	bl	8000c3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015538:	bf00      	nop
 801553a:	3728      	adds	r7, #40	; 0x28
 801553c:	46bd      	mov	sp, r7
 801553e:	bd80      	pop	{r7, pc}
 8015540:	40023800 	.word	0x40023800
 8015544:	40020000 	.word	0x40020000

08015548 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8015548:	b580      	push	{r7, lr}
 801554a:	b082      	sub	sp, #8
 801554c:	af00      	add	r7, sp, #0
 801554e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015556:	4618      	mov	r0, r3
 8015558:	f7f6 fabd 	bl	800bad6 <USBH_LL_IncTimer>
}
 801555c:	bf00      	nop
 801555e:	3708      	adds	r7, #8
 8015560:	46bd      	mov	sp, r7
 8015562:	bd80      	pop	{r7, pc}

08015564 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8015564:	b580      	push	{r7, lr}
 8015566:	b082      	sub	sp, #8
 8015568:	af00      	add	r7, sp, #0
 801556a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015572:	4618      	mov	r0, r3
 8015574:	f7f6 fb02 	bl	800bb7c <USBH_LL_Connect>
}
 8015578:	bf00      	nop
 801557a:	3708      	adds	r7, #8
 801557c:	46bd      	mov	sp, r7
 801557e:	bd80      	pop	{r7, pc}

08015580 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8015580:	b580      	push	{r7, lr}
 8015582:	b082      	sub	sp, #8
 8015584:	af00      	add	r7, sp, #0
 8015586:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801558e:	4618      	mov	r0, r3
 8015590:	f7f6 fb28 	bl	800bbe4 <USBH_LL_Disconnect>
}
 8015594:	bf00      	nop
 8015596:	3708      	adds	r7, #8
 8015598:	46bd      	mov	sp, r7
 801559a:	bd80      	pop	{r7, pc}

0801559c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801559c:	b580      	push	{r7, lr}
 801559e:	b082      	sub	sp, #8
 80155a0:	af00      	add	r7, sp, #0
 80155a2:	6078      	str	r0, [r7, #4]
 80155a4:	460b      	mov	r3, r1
 80155a6:	70fb      	strb	r3, [r7, #3]
 80155a8:	4613      	mov	r3, r2
 80155aa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80155b2:	4618      	mov	r0, r3
 80155b4:	f7f6 fb66 	bl	800bc84 <USBH_LL_NotifyURBChange>
#endif
}
 80155b8:	bf00      	nop
 80155ba:	3708      	adds	r7, #8
 80155bc:	46bd      	mov	sp, r7
 80155be:	bd80      	pop	{r7, pc}

080155c0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80155c0:	b580      	push	{r7, lr}
 80155c2:	b082      	sub	sp, #8
 80155c4:	af00      	add	r7, sp, #0
 80155c6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80155ce:	4618      	mov	r0, r3
 80155d0:	f7f6 faab 	bl	800bb2a <USBH_LL_PortEnabled>
} 
 80155d4:	bf00      	nop
 80155d6:	3708      	adds	r7, #8
 80155d8:	46bd      	mov	sp, r7
 80155da:	bd80      	pop	{r7, pc}

080155dc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80155dc:	b580      	push	{r7, lr}
 80155de:	b082      	sub	sp, #8
 80155e0:	af00      	add	r7, sp, #0
 80155e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80155ea:	4618      	mov	r0, r3
 80155ec:	f7f6 faab 	bl	800bb46 <USBH_LL_PortDisabled>
} 
 80155f0:	bf00      	nop
 80155f2:	3708      	adds	r7, #8
 80155f4:	46bd      	mov	sp, r7
 80155f6:	bd80      	pop	{r7, pc}

080155f8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80155f8:	b580      	push	{r7, lr}
 80155fa:	b082      	sub	sp, #8
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8015606:	2b01      	cmp	r3, #1
 8015608:	d12a      	bne.n	8015660 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801560a:	4a18      	ldr	r2, [pc, #96]	; (801566c <USBH_LL_Init+0x74>)
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	4a15      	ldr	r2, [pc, #84]	; (801566c <USBH_LL_Init+0x74>)
 8015616:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801561a:	4b14      	ldr	r3, [pc, #80]	; (801566c <USBH_LL_Init+0x74>)
 801561c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015620:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8015622:	4b12      	ldr	r3, [pc, #72]	; (801566c <USBH_LL_Init+0x74>)
 8015624:	2208      	movs	r2, #8
 8015626:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8015628:	4b10      	ldr	r3, [pc, #64]	; (801566c <USBH_LL_Init+0x74>)
 801562a:	2203      	movs	r2, #3
 801562c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801562e:	4b0f      	ldr	r3, [pc, #60]	; (801566c <USBH_LL_Init+0x74>)
 8015630:	2200      	movs	r2, #0
 8015632:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8015634:	4b0d      	ldr	r3, [pc, #52]	; (801566c <USBH_LL_Init+0x74>)
 8015636:	2202      	movs	r2, #2
 8015638:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801563a:	4b0c      	ldr	r3, [pc, #48]	; (801566c <USBH_LL_Init+0x74>)
 801563c:	2200      	movs	r2, #0
 801563e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8015640:	480a      	ldr	r0, [pc, #40]	; (801566c <USBH_LL_Init+0x74>)
 8015642:	f7ec fbd0 	bl	8001de6 <HAL_HCD_Init>
 8015646:	4603      	mov	r3, r0
 8015648:	2b00      	cmp	r3, #0
 801564a:	d001      	beq.n	8015650 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801564c:	f7fe fc00 	bl	8013e50 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8015650:	4806      	ldr	r0, [pc, #24]	; (801566c <USBH_LL_Init+0x74>)
 8015652:	f7ec ffbf 	bl	80025d4 <HAL_HCD_GetCurrentFrame>
 8015656:	4603      	mov	r3, r0
 8015658:	4619      	mov	r1, r3
 801565a:	6878      	ldr	r0, [r7, #4]
 801565c:	f7f6 fa2c 	bl	800bab8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8015660:	2300      	movs	r3, #0
}
 8015662:	4618      	mov	r0, r3
 8015664:	3708      	adds	r7, #8
 8015666:	46bd      	mov	sp, r7
 8015668:	bd80      	pop	{r7, pc}
 801566a:	bf00      	nop
 801566c:	20009d74 	.word	0x20009d74

08015670 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8015670:	b580      	push	{r7, lr}
 8015672:	b084      	sub	sp, #16
 8015674:	af00      	add	r7, sp, #0
 8015676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015678:	2300      	movs	r3, #0
 801567a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801567c:	2300      	movs	r3, #0
 801567e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8015686:	4618      	mov	r0, r3
 8015688:	f7ec ff2c 	bl	80024e4 <HAL_HCD_Start>
 801568c:	4603      	mov	r3, r0
 801568e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015690:	7bfb      	ldrb	r3, [r7, #15]
 8015692:	4618      	mov	r0, r3
 8015694:	f000 f95c 	bl	8015950 <USBH_Get_USB_Status>
 8015698:	4603      	mov	r3, r0
 801569a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801569c:	7bbb      	ldrb	r3, [r7, #14]
}
 801569e:	4618      	mov	r0, r3
 80156a0:	3710      	adds	r7, #16
 80156a2:	46bd      	mov	sp, r7
 80156a4:	bd80      	pop	{r7, pc}

080156a6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80156a6:	b580      	push	{r7, lr}
 80156a8:	b084      	sub	sp, #16
 80156aa:	af00      	add	r7, sp, #0
 80156ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80156ae:	2300      	movs	r3, #0
 80156b0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80156b2:	2300      	movs	r3, #0
 80156b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80156bc:	4618      	mov	r0, r3
 80156be:	f7ec ff34 	bl	800252a <HAL_HCD_Stop>
 80156c2:	4603      	mov	r3, r0
 80156c4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80156c6:	7bfb      	ldrb	r3, [r7, #15]
 80156c8:	4618      	mov	r0, r3
 80156ca:	f000 f941 	bl	8015950 <USBH_Get_USB_Status>
 80156ce:	4603      	mov	r3, r0
 80156d0:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80156d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80156d4:	4618      	mov	r0, r3
 80156d6:	3710      	adds	r7, #16
 80156d8:	46bd      	mov	sp, r7
 80156da:	bd80      	pop	{r7, pc}

080156dc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80156dc:	b580      	push	{r7, lr}
 80156de:	b084      	sub	sp, #16
 80156e0:	af00      	add	r7, sp, #0
 80156e2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80156e4:	2301      	movs	r3, #1
 80156e6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80156ee:	4618      	mov	r0, r3
 80156f0:	f7ec ff7e 	bl	80025f0 <HAL_HCD_GetCurrentSpeed>
 80156f4:	4603      	mov	r3, r0
 80156f6:	2b01      	cmp	r3, #1
 80156f8:	d007      	beq.n	801570a <USBH_LL_GetSpeed+0x2e>
 80156fa:	2b01      	cmp	r3, #1
 80156fc:	d302      	bcc.n	8015704 <USBH_LL_GetSpeed+0x28>
 80156fe:	2b02      	cmp	r3, #2
 8015700:	d006      	beq.n	8015710 <USBH_LL_GetSpeed+0x34>
 8015702:	e008      	b.n	8015716 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8015704:	2300      	movs	r3, #0
 8015706:	73fb      	strb	r3, [r7, #15]
    break;
 8015708:	e008      	b.n	801571c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 801570a:	2301      	movs	r3, #1
 801570c:	73fb      	strb	r3, [r7, #15]
    break;
 801570e:	e005      	b.n	801571c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8015710:	2302      	movs	r3, #2
 8015712:	73fb      	strb	r3, [r7, #15]
    break;
 8015714:	e002      	b.n	801571c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8015716:	2301      	movs	r3, #1
 8015718:	73fb      	strb	r3, [r7, #15]
    break;
 801571a:	bf00      	nop
  }
  return  speed;
 801571c:	7bfb      	ldrb	r3, [r7, #15]
}
 801571e:	4618      	mov	r0, r3
 8015720:	3710      	adds	r7, #16
 8015722:	46bd      	mov	sp, r7
 8015724:	bd80      	pop	{r7, pc}

08015726 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8015726:	b580      	push	{r7, lr}
 8015728:	b084      	sub	sp, #16
 801572a:	af00      	add	r7, sp, #0
 801572c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801572e:	2300      	movs	r3, #0
 8015730:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015732:	2300      	movs	r3, #0
 8015734:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801573c:	4618      	mov	r0, r3
 801573e:	f7ec ff11 	bl	8002564 <HAL_HCD_ResetPort>
 8015742:	4603      	mov	r3, r0
 8015744:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8015746:	7bfb      	ldrb	r3, [r7, #15]
 8015748:	4618      	mov	r0, r3
 801574a:	f000 f901 	bl	8015950 <USBH_Get_USB_Status>
 801574e:	4603      	mov	r3, r0
 8015750:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8015752:	7bbb      	ldrb	r3, [r7, #14]
}
 8015754:	4618      	mov	r0, r3
 8015756:	3710      	adds	r7, #16
 8015758:	46bd      	mov	sp, r7
 801575a:	bd80      	pop	{r7, pc}

0801575c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801575c:	b580      	push	{r7, lr}
 801575e:	b082      	sub	sp, #8
 8015760:	af00      	add	r7, sp, #0
 8015762:	6078      	str	r0, [r7, #4]
 8015764:	460b      	mov	r3, r1
 8015766:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801576e:	78fa      	ldrb	r2, [r7, #3]
 8015770:	4611      	mov	r1, r2
 8015772:	4618      	mov	r0, r3
 8015774:	f7ec ff19 	bl	80025aa <HAL_HCD_HC_GetXferCount>
 8015778:	4603      	mov	r3, r0
}
 801577a:	4618      	mov	r0, r3
 801577c:	3708      	adds	r7, #8
 801577e:	46bd      	mov	sp, r7
 8015780:	bd80      	pop	{r7, pc}

08015782 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8015782:	b590      	push	{r4, r7, lr}
 8015784:	b089      	sub	sp, #36	; 0x24
 8015786:	af04      	add	r7, sp, #16
 8015788:	6078      	str	r0, [r7, #4]
 801578a:	4608      	mov	r0, r1
 801578c:	4611      	mov	r1, r2
 801578e:	461a      	mov	r2, r3
 8015790:	4603      	mov	r3, r0
 8015792:	70fb      	strb	r3, [r7, #3]
 8015794:	460b      	mov	r3, r1
 8015796:	70bb      	strb	r3, [r7, #2]
 8015798:	4613      	mov	r3, r2
 801579a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801579c:	2300      	movs	r3, #0
 801579e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80157a0:	2300      	movs	r3, #0
 80157a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80157aa:	787c      	ldrb	r4, [r7, #1]
 80157ac:	78ba      	ldrb	r2, [r7, #2]
 80157ae:	78f9      	ldrb	r1, [r7, #3]
 80157b0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80157b2:	9302      	str	r3, [sp, #8]
 80157b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80157b8:	9301      	str	r3, [sp, #4]
 80157ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80157be:	9300      	str	r3, [sp, #0]
 80157c0:	4623      	mov	r3, r4
 80157c2:	f7ec fb66 	bl	8001e92 <HAL_HCD_HC_Init>
 80157c6:	4603      	mov	r3, r0
 80157c8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80157ca:	7bfb      	ldrb	r3, [r7, #15]
 80157cc:	4618      	mov	r0, r3
 80157ce:	f000 f8bf 	bl	8015950 <USBH_Get_USB_Status>
 80157d2:	4603      	mov	r3, r0
 80157d4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80157d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80157d8:	4618      	mov	r0, r3
 80157da:	3714      	adds	r7, #20
 80157dc:	46bd      	mov	sp, r7
 80157de:	bd90      	pop	{r4, r7, pc}

080157e0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80157e0:	b580      	push	{r7, lr}
 80157e2:	b084      	sub	sp, #16
 80157e4:	af00      	add	r7, sp, #0
 80157e6:	6078      	str	r0, [r7, #4]
 80157e8:	460b      	mov	r3, r1
 80157ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80157ec:	2300      	movs	r3, #0
 80157ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80157f0:	2300      	movs	r3, #0
 80157f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80157fa:	78fa      	ldrb	r2, [r7, #3]
 80157fc:	4611      	mov	r1, r2
 80157fe:	4618      	mov	r0, r3
 8015800:	f7ec fbdf 	bl	8001fc2 <HAL_HCD_HC_Halt>
 8015804:	4603      	mov	r3, r0
 8015806:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015808:	7bfb      	ldrb	r3, [r7, #15]
 801580a:	4618      	mov	r0, r3
 801580c:	f000 f8a0 	bl	8015950 <USBH_Get_USB_Status>
 8015810:	4603      	mov	r3, r0
 8015812:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8015814:	7bbb      	ldrb	r3, [r7, #14]
}
 8015816:	4618      	mov	r0, r3
 8015818:	3710      	adds	r7, #16
 801581a:	46bd      	mov	sp, r7
 801581c:	bd80      	pop	{r7, pc}

0801581e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801581e:	b590      	push	{r4, r7, lr}
 8015820:	b089      	sub	sp, #36	; 0x24
 8015822:	af04      	add	r7, sp, #16
 8015824:	6078      	str	r0, [r7, #4]
 8015826:	4608      	mov	r0, r1
 8015828:	4611      	mov	r1, r2
 801582a:	461a      	mov	r2, r3
 801582c:	4603      	mov	r3, r0
 801582e:	70fb      	strb	r3, [r7, #3]
 8015830:	460b      	mov	r3, r1
 8015832:	70bb      	strb	r3, [r7, #2]
 8015834:	4613      	mov	r3, r2
 8015836:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015838:	2300      	movs	r3, #0
 801583a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801583c:	2300      	movs	r3, #0
 801583e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8015846:	787c      	ldrb	r4, [r7, #1]
 8015848:	78ba      	ldrb	r2, [r7, #2]
 801584a:	78f9      	ldrb	r1, [r7, #3]
 801584c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8015850:	9303      	str	r3, [sp, #12]
 8015852:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8015854:	9302      	str	r3, [sp, #8]
 8015856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015858:	9301      	str	r3, [sp, #4]
 801585a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801585e:	9300      	str	r3, [sp, #0]
 8015860:	4623      	mov	r3, r4
 8015862:	f7ec fbd1 	bl	8002008 <HAL_HCD_HC_SubmitRequest>
 8015866:	4603      	mov	r3, r0
 8015868:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801586a:	7bfb      	ldrb	r3, [r7, #15]
 801586c:	4618      	mov	r0, r3
 801586e:	f000 f86f 	bl	8015950 <USBH_Get_USB_Status>
 8015872:	4603      	mov	r3, r0
 8015874:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8015876:	7bbb      	ldrb	r3, [r7, #14]
}
 8015878:	4618      	mov	r0, r3
 801587a:	3714      	adds	r7, #20
 801587c:	46bd      	mov	sp, r7
 801587e:	bd90      	pop	{r4, r7, pc}

08015880 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8015880:	b580      	push	{r7, lr}
 8015882:	b082      	sub	sp, #8
 8015884:	af00      	add	r7, sp, #0
 8015886:	6078      	str	r0, [r7, #4]
 8015888:	460b      	mov	r3, r1
 801588a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8015892:	78fa      	ldrb	r2, [r7, #3]
 8015894:	4611      	mov	r1, r2
 8015896:	4618      	mov	r0, r3
 8015898:	f7ec fe72 	bl	8002580 <HAL_HCD_HC_GetURBState>
 801589c:	4603      	mov	r3, r0
}
 801589e:	4618      	mov	r0, r3
 80158a0:	3708      	adds	r7, #8
 80158a2:	46bd      	mov	sp, r7
 80158a4:	bd80      	pop	{r7, pc}

080158a6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80158a6:	b580      	push	{r7, lr}
 80158a8:	b082      	sub	sp, #8
 80158aa:	af00      	add	r7, sp, #0
 80158ac:	6078      	str	r0, [r7, #4]
 80158ae:	460b      	mov	r3, r1
 80158b0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 80158b8:	2b01      	cmp	r3, #1
 80158ba:	d103      	bne.n	80158c4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80158bc:	78fb      	ldrb	r3, [r7, #3]
 80158be:	4618      	mov	r0, r3
 80158c0:	f000 f872 	bl	80159a8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80158c4:	20c8      	movs	r0, #200	; 0xc8
 80158c6:	f7ea fe51 	bl	800056c <HAL_Delay>
  return USBH_OK;
 80158ca:	2300      	movs	r3, #0
}
 80158cc:	4618      	mov	r0, r3
 80158ce:	3708      	adds	r7, #8
 80158d0:	46bd      	mov	sp, r7
 80158d2:	bd80      	pop	{r7, pc}

080158d4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80158d4:	b480      	push	{r7}
 80158d6:	b085      	sub	sp, #20
 80158d8:	af00      	add	r7, sp, #0
 80158da:	6078      	str	r0, [r7, #4]
 80158dc:	460b      	mov	r3, r1
 80158de:	70fb      	strb	r3, [r7, #3]
 80158e0:	4613      	mov	r3, r2
 80158e2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80158ea:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80158ec:	78fa      	ldrb	r2, [r7, #3]
 80158ee:	68f9      	ldr	r1, [r7, #12]
 80158f0:	4613      	mov	r3, r2
 80158f2:	009b      	lsls	r3, r3, #2
 80158f4:	4413      	add	r3, r2
 80158f6:	00db      	lsls	r3, r3, #3
 80158f8:	440b      	add	r3, r1
 80158fa:	333b      	adds	r3, #59	; 0x3b
 80158fc:	781b      	ldrb	r3, [r3, #0]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d00a      	beq.n	8015918 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8015902:	78fa      	ldrb	r2, [r7, #3]
 8015904:	68f9      	ldr	r1, [r7, #12]
 8015906:	4613      	mov	r3, r2
 8015908:	009b      	lsls	r3, r3, #2
 801590a:	4413      	add	r3, r2
 801590c:	00db      	lsls	r3, r3, #3
 801590e:	440b      	add	r3, r1
 8015910:	3350      	adds	r3, #80	; 0x50
 8015912:	78ba      	ldrb	r2, [r7, #2]
 8015914:	701a      	strb	r2, [r3, #0]
 8015916:	e009      	b.n	801592c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8015918:	78fa      	ldrb	r2, [r7, #3]
 801591a:	68f9      	ldr	r1, [r7, #12]
 801591c:	4613      	mov	r3, r2
 801591e:	009b      	lsls	r3, r3, #2
 8015920:	4413      	add	r3, r2
 8015922:	00db      	lsls	r3, r3, #3
 8015924:	440b      	add	r3, r1
 8015926:	3351      	adds	r3, #81	; 0x51
 8015928:	78ba      	ldrb	r2, [r7, #2]
 801592a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801592c:	2300      	movs	r3, #0
}
 801592e:	4618      	mov	r0, r3
 8015930:	3714      	adds	r7, #20
 8015932:	46bd      	mov	sp, r7
 8015934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015938:	4770      	bx	lr

0801593a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801593a:	b580      	push	{r7, lr}
 801593c:	b082      	sub	sp, #8
 801593e:	af00      	add	r7, sp, #0
 8015940:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8015942:	6878      	ldr	r0, [r7, #4]
 8015944:	f7ea fe12 	bl	800056c <HAL_Delay>
}
 8015948:	bf00      	nop
 801594a:	3708      	adds	r7, #8
 801594c:	46bd      	mov	sp, r7
 801594e:	bd80      	pop	{r7, pc}

08015950 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015950:	b480      	push	{r7}
 8015952:	b085      	sub	sp, #20
 8015954:	af00      	add	r7, sp, #0
 8015956:	4603      	mov	r3, r0
 8015958:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801595a:	2300      	movs	r3, #0
 801595c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801595e:	79fb      	ldrb	r3, [r7, #7]
 8015960:	2b03      	cmp	r3, #3
 8015962:	d817      	bhi.n	8015994 <USBH_Get_USB_Status+0x44>
 8015964:	a201      	add	r2, pc, #4	; (adr r2, 801596c <USBH_Get_USB_Status+0x1c>)
 8015966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801596a:	bf00      	nop
 801596c:	0801597d 	.word	0x0801597d
 8015970:	08015983 	.word	0x08015983
 8015974:	08015989 	.word	0x08015989
 8015978:	0801598f 	.word	0x0801598f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801597c:	2300      	movs	r3, #0
 801597e:	73fb      	strb	r3, [r7, #15]
    break;
 8015980:	e00b      	b.n	801599a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8015982:	2302      	movs	r3, #2
 8015984:	73fb      	strb	r3, [r7, #15]
    break;
 8015986:	e008      	b.n	801599a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8015988:	2301      	movs	r3, #1
 801598a:	73fb      	strb	r3, [r7, #15]
    break;
 801598c:	e005      	b.n	801599a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801598e:	2302      	movs	r3, #2
 8015990:	73fb      	strb	r3, [r7, #15]
    break;
 8015992:	e002      	b.n	801599a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8015994:	2302      	movs	r3, #2
 8015996:	73fb      	strb	r3, [r7, #15]
    break;
 8015998:	bf00      	nop
  }
  return usb_status;
 801599a:	7bfb      	ldrb	r3, [r7, #15]
}
 801599c:	4618      	mov	r0, r3
 801599e:	3714      	adds	r7, #20
 80159a0:	46bd      	mov	sp, r7
 80159a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159a6:	4770      	bx	lr

080159a8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 80159a8:	b580      	push	{r7, lr}
 80159aa:	b084      	sub	sp, #16
 80159ac:	af00      	add	r7, sp, #0
 80159ae:	4603      	mov	r3, r0
 80159b0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 80159b2:	79fb      	ldrb	r3, [r7, #7]
 80159b4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80159b6:	79fb      	ldrb	r3, [r7, #7]
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d102      	bne.n	80159c2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 80159bc:	2301      	movs	r3, #1
 80159be:	73fb      	strb	r3, [r7, #15]
 80159c0:	e001      	b.n	80159c6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80159c2:	2300      	movs	r3, #0
 80159c4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 80159c6:	7bfb      	ldrb	r3, [r7, #15]
 80159c8:	461a      	mov	r2, r3
 80159ca:	2120      	movs	r1, #32
 80159cc:	4803      	ldr	r0, [pc, #12]	; (80159dc <MX_DriverVbusFS+0x34>)
 80159ce:	f7ec f9f1 	bl	8001db4 <HAL_GPIO_WritePin>
}
 80159d2:	bf00      	nop
 80159d4:	3710      	adds	r7, #16
 80159d6:	46bd      	mov	sp, r7
 80159d8:	bd80      	pop	{r7, pc}
 80159da:	bf00      	nop
 80159dc:	40020c00 	.word	0x40020c00

080159e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80159e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8015a18 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80159e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80159e6:	e003      	b.n	80159f0 <LoopCopyDataInit>

080159e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80159e8:	4b0c      	ldr	r3, [pc, #48]	; (8015a1c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80159ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80159ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80159ee:	3104      	adds	r1, #4

080159f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80159f0:	480b      	ldr	r0, [pc, #44]	; (8015a20 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80159f2:	4b0c      	ldr	r3, [pc, #48]	; (8015a24 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80159f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80159f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80159f8:	d3f6      	bcc.n	80159e8 <CopyDataInit>
  ldr  r2, =_sbss
 80159fa:	4a0b      	ldr	r2, [pc, #44]	; (8015a28 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80159fc:	e002      	b.n	8015a04 <LoopFillZerobss>

080159fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80159fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8015a00:	f842 3b04 	str.w	r3, [r2], #4

08015a04 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8015a04:	4b09      	ldr	r3, [pc, #36]	; (8015a2c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8015a06:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8015a08:	d3f9      	bcc.n	80159fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8015a0a:	f7ff fcbd 	bl	8015388 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8015a0e:	f000 f817 	bl	8015a40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8015a12:	f7fc ff41 	bl	8012898 <main>
  bx  lr    
 8015a16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8015a18:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8015a1c:	08015e10 	.word	0x08015e10
  ldr  r0, =_sdata
 8015a20:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8015a24:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8015a28:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8015a2c:	2000a03c 	.word	0x2000a03c

08015a30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8015a30:	e7fe      	b.n	8015a30 <ADC_IRQHandler>
	...

08015a34 <__errno>:
 8015a34:	4b01      	ldr	r3, [pc, #4]	; (8015a3c <__errno+0x8>)
 8015a36:	6818      	ldr	r0, [r3, #0]
 8015a38:	4770      	bx	lr
 8015a3a:	bf00      	nop
 8015a3c:	20000030 	.word	0x20000030

08015a40 <__libc_init_array>:
 8015a40:	b570      	push	{r4, r5, r6, lr}
 8015a42:	4e0d      	ldr	r6, [pc, #52]	; (8015a78 <__libc_init_array+0x38>)
 8015a44:	4c0d      	ldr	r4, [pc, #52]	; (8015a7c <__libc_init_array+0x3c>)
 8015a46:	1ba4      	subs	r4, r4, r6
 8015a48:	10a4      	asrs	r4, r4, #2
 8015a4a:	2500      	movs	r5, #0
 8015a4c:	42a5      	cmp	r5, r4
 8015a4e:	d109      	bne.n	8015a64 <__libc_init_array+0x24>
 8015a50:	4e0b      	ldr	r6, [pc, #44]	; (8015a80 <__libc_init_array+0x40>)
 8015a52:	4c0c      	ldr	r4, [pc, #48]	; (8015a84 <__libc_init_array+0x44>)
 8015a54:	f000 f8f6 	bl	8015c44 <_init>
 8015a58:	1ba4      	subs	r4, r4, r6
 8015a5a:	10a4      	asrs	r4, r4, #2
 8015a5c:	2500      	movs	r5, #0
 8015a5e:	42a5      	cmp	r5, r4
 8015a60:	d105      	bne.n	8015a6e <__libc_init_array+0x2e>
 8015a62:	bd70      	pop	{r4, r5, r6, pc}
 8015a64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015a68:	4798      	blx	r3
 8015a6a:	3501      	adds	r5, #1
 8015a6c:	e7ee      	b.n	8015a4c <__libc_init_array+0xc>
 8015a6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015a72:	4798      	blx	r3
 8015a74:	3501      	adds	r5, #1
 8015a76:	e7f2      	b.n	8015a5e <__libc_init_array+0x1e>
 8015a78:	08015e08 	.word	0x08015e08
 8015a7c:	08015e08 	.word	0x08015e08
 8015a80:	08015e08 	.word	0x08015e08
 8015a84:	08015e0c 	.word	0x08015e0c

08015a88 <malloc>:
 8015a88:	4b02      	ldr	r3, [pc, #8]	; (8015a94 <malloc+0xc>)
 8015a8a:	4601      	mov	r1, r0
 8015a8c:	6818      	ldr	r0, [r3, #0]
 8015a8e:	f000 b86d 	b.w	8015b6c <_malloc_r>
 8015a92:	bf00      	nop
 8015a94:	20000030 	.word	0x20000030

08015a98 <free>:
 8015a98:	4b02      	ldr	r3, [pc, #8]	; (8015aa4 <free+0xc>)
 8015a9a:	4601      	mov	r1, r0
 8015a9c:	6818      	ldr	r0, [r3, #0]
 8015a9e:	f000 b817 	b.w	8015ad0 <_free_r>
 8015aa2:	bf00      	nop
 8015aa4:	20000030 	.word	0x20000030

08015aa8 <memcpy>:
 8015aa8:	b510      	push	{r4, lr}
 8015aaa:	1e43      	subs	r3, r0, #1
 8015aac:	440a      	add	r2, r1
 8015aae:	4291      	cmp	r1, r2
 8015ab0:	d100      	bne.n	8015ab4 <memcpy+0xc>
 8015ab2:	bd10      	pop	{r4, pc}
 8015ab4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015ab8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015abc:	e7f7      	b.n	8015aae <memcpy+0x6>

08015abe <memset>:
 8015abe:	4402      	add	r2, r0
 8015ac0:	4603      	mov	r3, r0
 8015ac2:	4293      	cmp	r3, r2
 8015ac4:	d100      	bne.n	8015ac8 <memset+0xa>
 8015ac6:	4770      	bx	lr
 8015ac8:	f803 1b01 	strb.w	r1, [r3], #1
 8015acc:	e7f9      	b.n	8015ac2 <memset+0x4>
	...

08015ad0 <_free_r>:
 8015ad0:	b538      	push	{r3, r4, r5, lr}
 8015ad2:	4605      	mov	r5, r0
 8015ad4:	2900      	cmp	r1, #0
 8015ad6:	d045      	beq.n	8015b64 <_free_r+0x94>
 8015ad8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015adc:	1f0c      	subs	r4, r1, #4
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	bfb8      	it	lt
 8015ae2:	18e4      	addlt	r4, r4, r3
 8015ae4:	f000 f8ac 	bl	8015c40 <__malloc_lock>
 8015ae8:	4a1f      	ldr	r2, [pc, #124]	; (8015b68 <_free_r+0x98>)
 8015aea:	6813      	ldr	r3, [r2, #0]
 8015aec:	4610      	mov	r0, r2
 8015aee:	b933      	cbnz	r3, 8015afe <_free_r+0x2e>
 8015af0:	6063      	str	r3, [r4, #4]
 8015af2:	6014      	str	r4, [r2, #0]
 8015af4:	4628      	mov	r0, r5
 8015af6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015afa:	f000 b8a2 	b.w	8015c42 <__malloc_unlock>
 8015afe:	42a3      	cmp	r3, r4
 8015b00:	d90c      	bls.n	8015b1c <_free_r+0x4c>
 8015b02:	6821      	ldr	r1, [r4, #0]
 8015b04:	1862      	adds	r2, r4, r1
 8015b06:	4293      	cmp	r3, r2
 8015b08:	bf04      	itt	eq
 8015b0a:	681a      	ldreq	r2, [r3, #0]
 8015b0c:	685b      	ldreq	r3, [r3, #4]
 8015b0e:	6063      	str	r3, [r4, #4]
 8015b10:	bf04      	itt	eq
 8015b12:	1852      	addeq	r2, r2, r1
 8015b14:	6022      	streq	r2, [r4, #0]
 8015b16:	6004      	str	r4, [r0, #0]
 8015b18:	e7ec      	b.n	8015af4 <_free_r+0x24>
 8015b1a:	4613      	mov	r3, r2
 8015b1c:	685a      	ldr	r2, [r3, #4]
 8015b1e:	b10a      	cbz	r2, 8015b24 <_free_r+0x54>
 8015b20:	42a2      	cmp	r2, r4
 8015b22:	d9fa      	bls.n	8015b1a <_free_r+0x4a>
 8015b24:	6819      	ldr	r1, [r3, #0]
 8015b26:	1858      	adds	r0, r3, r1
 8015b28:	42a0      	cmp	r0, r4
 8015b2a:	d10b      	bne.n	8015b44 <_free_r+0x74>
 8015b2c:	6820      	ldr	r0, [r4, #0]
 8015b2e:	4401      	add	r1, r0
 8015b30:	1858      	adds	r0, r3, r1
 8015b32:	4282      	cmp	r2, r0
 8015b34:	6019      	str	r1, [r3, #0]
 8015b36:	d1dd      	bne.n	8015af4 <_free_r+0x24>
 8015b38:	6810      	ldr	r0, [r2, #0]
 8015b3a:	6852      	ldr	r2, [r2, #4]
 8015b3c:	605a      	str	r2, [r3, #4]
 8015b3e:	4401      	add	r1, r0
 8015b40:	6019      	str	r1, [r3, #0]
 8015b42:	e7d7      	b.n	8015af4 <_free_r+0x24>
 8015b44:	d902      	bls.n	8015b4c <_free_r+0x7c>
 8015b46:	230c      	movs	r3, #12
 8015b48:	602b      	str	r3, [r5, #0]
 8015b4a:	e7d3      	b.n	8015af4 <_free_r+0x24>
 8015b4c:	6820      	ldr	r0, [r4, #0]
 8015b4e:	1821      	adds	r1, r4, r0
 8015b50:	428a      	cmp	r2, r1
 8015b52:	bf04      	itt	eq
 8015b54:	6811      	ldreq	r1, [r2, #0]
 8015b56:	6852      	ldreq	r2, [r2, #4]
 8015b58:	6062      	str	r2, [r4, #4]
 8015b5a:	bf04      	itt	eq
 8015b5c:	1809      	addeq	r1, r1, r0
 8015b5e:	6021      	streq	r1, [r4, #0]
 8015b60:	605c      	str	r4, [r3, #4]
 8015b62:	e7c7      	b.n	8015af4 <_free_r+0x24>
 8015b64:	bd38      	pop	{r3, r4, r5, pc}
 8015b66:	bf00      	nop
 8015b68:	20008448 	.word	0x20008448

08015b6c <_malloc_r>:
 8015b6c:	b570      	push	{r4, r5, r6, lr}
 8015b6e:	1ccd      	adds	r5, r1, #3
 8015b70:	f025 0503 	bic.w	r5, r5, #3
 8015b74:	3508      	adds	r5, #8
 8015b76:	2d0c      	cmp	r5, #12
 8015b78:	bf38      	it	cc
 8015b7a:	250c      	movcc	r5, #12
 8015b7c:	2d00      	cmp	r5, #0
 8015b7e:	4606      	mov	r6, r0
 8015b80:	db01      	blt.n	8015b86 <_malloc_r+0x1a>
 8015b82:	42a9      	cmp	r1, r5
 8015b84:	d903      	bls.n	8015b8e <_malloc_r+0x22>
 8015b86:	230c      	movs	r3, #12
 8015b88:	6033      	str	r3, [r6, #0]
 8015b8a:	2000      	movs	r0, #0
 8015b8c:	bd70      	pop	{r4, r5, r6, pc}
 8015b8e:	f000 f857 	bl	8015c40 <__malloc_lock>
 8015b92:	4a21      	ldr	r2, [pc, #132]	; (8015c18 <_malloc_r+0xac>)
 8015b94:	6814      	ldr	r4, [r2, #0]
 8015b96:	4621      	mov	r1, r4
 8015b98:	b991      	cbnz	r1, 8015bc0 <_malloc_r+0x54>
 8015b9a:	4c20      	ldr	r4, [pc, #128]	; (8015c1c <_malloc_r+0xb0>)
 8015b9c:	6823      	ldr	r3, [r4, #0]
 8015b9e:	b91b      	cbnz	r3, 8015ba8 <_malloc_r+0x3c>
 8015ba0:	4630      	mov	r0, r6
 8015ba2:	f000 f83d 	bl	8015c20 <_sbrk_r>
 8015ba6:	6020      	str	r0, [r4, #0]
 8015ba8:	4629      	mov	r1, r5
 8015baa:	4630      	mov	r0, r6
 8015bac:	f000 f838 	bl	8015c20 <_sbrk_r>
 8015bb0:	1c43      	adds	r3, r0, #1
 8015bb2:	d124      	bne.n	8015bfe <_malloc_r+0x92>
 8015bb4:	230c      	movs	r3, #12
 8015bb6:	6033      	str	r3, [r6, #0]
 8015bb8:	4630      	mov	r0, r6
 8015bba:	f000 f842 	bl	8015c42 <__malloc_unlock>
 8015bbe:	e7e4      	b.n	8015b8a <_malloc_r+0x1e>
 8015bc0:	680b      	ldr	r3, [r1, #0]
 8015bc2:	1b5b      	subs	r3, r3, r5
 8015bc4:	d418      	bmi.n	8015bf8 <_malloc_r+0x8c>
 8015bc6:	2b0b      	cmp	r3, #11
 8015bc8:	d90f      	bls.n	8015bea <_malloc_r+0x7e>
 8015bca:	600b      	str	r3, [r1, #0]
 8015bcc:	50cd      	str	r5, [r1, r3]
 8015bce:	18cc      	adds	r4, r1, r3
 8015bd0:	4630      	mov	r0, r6
 8015bd2:	f000 f836 	bl	8015c42 <__malloc_unlock>
 8015bd6:	f104 000b 	add.w	r0, r4, #11
 8015bda:	1d23      	adds	r3, r4, #4
 8015bdc:	f020 0007 	bic.w	r0, r0, #7
 8015be0:	1ac3      	subs	r3, r0, r3
 8015be2:	d0d3      	beq.n	8015b8c <_malloc_r+0x20>
 8015be4:	425a      	negs	r2, r3
 8015be6:	50e2      	str	r2, [r4, r3]
 8015be8:	e7d0      	b.n	8015b8c <_malloc_r+0x20>
 8015bea:	428c      	cmp	r4, r1
 8015bec:	684b      	ldr	r3, [r1, #4]
 8015bee:	bf16      	itet	ne
 8015bf0:	6063      	strne	r3, [r4, #4]
 8015bf2:	6013      	streq	r3, [r2, #0]
 8015bf4:	460c      	movne	r4, r1
 8015bf6:	e7eb      	b.n	8015bd0 <_malloc_r+0x64>
 8015bf8:	460c      	mov	r4, r1
 8015bfa:	6849      	ldr	r1, [r1, #4]
 8015bfc:	e7cc      	b.n	8015b98 <_malloc_r+0x2c>
 8015bfe:	1cc4      	adds	r4, r0, #3
 8015c00:	f024 0403 	bic.w	r4, r4, #3
 8015c04:	42a0      	cmp	r0, r4
 8015c06:	d005      	beq.n	8015c14 <_malloc_r+0xa8>
 8015c08:	1a21      	subs	r1, r4, r0
 8015c0a:	4630      	mov	r0, r6
 8015c0c:	f000 f808 	bl	8015c20 <_sbrk_r>
 8015c10:	3001      	adds	r0, #1
 8015c12:	d0cf      	beq.n	8015bb4 <_malloc_r+0x48>
 8015c14:	6025      	str	r5, [r4, #0]
 8015c16:	e7db      	b.n	8015bd0 <_malloc_r+0x64>
 8015c18:	20008448 	.word	0x20008448
 8015c1c:	2000844c 	.word	0x2000844c

08015c20 <_sbrk_r>:
 8015c20:	b538      	push	{r3, r4, r5, lr}
 8015c22:	4c06      	ldr	r4, [pc, #24]	; (8015c3c <_sbrk_r+0x1c>)
 8015c24:	2300      	movs	r3, #0
 8015c26:	4605      	mov	r5, r0
 8015c28:	4608      	mov	r0, r1
 8015c2a:	6023      	str	r3, [r4, #0]
 8015c2c:	f7ff fb80 	bl	8015330 <_sbrk>
 8015c30:	1c43      	adds	r3, r0, #1
 8015c32:	d102      	bne.n	8015c3a <_sbrk_r+0x1a>
 8015c34:	6823      	ldr	r3, [r4, #0]
 8015c36:	b103      	cbz	r3, 8015c3a <_sbrk_r+0x1a>
 8015c38:	602b      	str	r3, [r5, #0]
 8015c3a:	bd38      	pop	{r3, r4, r5, pc}
 8015c3c:	2000a038 	.word	0x2000a038

08015c40 <__malloc_lock>:
 8015c40:	4770      	bx	lr

08015c42 <__malloc_unlock>:
 8015c42:	4770      	bx	lr

08015c44 <_init>:
 8015c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c46:	bf00      	nop
 8015c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015c4a:	bc08      	pop	{r3}
 8015c4c:	469e      	mov	lr, r3
 8015c4e:	4770      	bx	lr

08015c50 <_fini>:
 8015c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c52:	bf00      	nop
 8015c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015c56:	bc08      	pop	{r3}
 8015c58:	469e      	mov	lr, r3
 8015c5a:	4770      	bx	lr
