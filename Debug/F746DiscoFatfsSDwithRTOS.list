
F746DiscoFatfsSDwithRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015bd4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08015da4  08015da4  00025da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015f68  08015f68  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  08015f68  08015f68  00025f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015f70  08015f70  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015f70  08015f70  00025f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015f74  08015f74  00025f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08015f78  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009fb8  20000094  0801600c  00030094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a04c  0801600c  0003a04c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00040ffa  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007f1f  00000000  00000000  000710be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003138  00000000  00000000  00078fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002d98  00000000  00000000  0007c118  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035d5c  00000000  00000000  0007eeb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00030f86  00000000  00000000  000b4c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011d09f  00000000  00000000  000e5b92  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00202c31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d124  00000000  00000000  00202cac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000094 	.word	0x20000094
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015d8c 	.word	0x08015d8c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000098 	.word	0x20000098
 800020c:	08015d8c 	.word	0x08015d8c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000514:	2003      	movs	r0, #3
 8000516:	f000 fb6a 	bl	8000bee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800051a:	2000      	movs	r0, #0
 800051c:	f014 feec 	bl	80152f8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000520:	f013 ff5a 	bl	80143d8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000524:	2300      	movs	r3, #0
}
 8000526:	4618      	mov	r0, r3
 8000528:	bd80      	pop	{r7, pc}
	...

0800052c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <HAL_IncTick+0x20>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	461a      	mov	r2, r3
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <HAL_IncTick+0x24>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4413      	add	r3, r2
 800053c:	4a04      	ldr	r2, [pc, #16]	; (8000550 <HAL_IncTick+0x24>)
 800053e:	6013      	str	r3, [r2, #0]
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	20000000 	.word	0x20000000
 8000550:	20008450 	.word	0x20008450

08000554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  return uwTick;
 8000558:	4b03      	ldr	r3, [pc, #12]	; (8000568 <HAL_GetTick+0x14>)
 800055a:	681b      	ldr	r3, [r3, #0]
}
 800055c:	4618      	mov	r0, r3
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	20008450 	.word	0x20008450

0800056c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000574:	f7ff ffee 	bl	8000554 <HAL_GetTick>
 8000578:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000584:	d005      	beq.n	8000592 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <HAL_Delay+0x40>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	461a      	mov	r2, r3
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4413      	add	r3, r2
 8000590:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000592:	bf00      	nop
 8000594:	f7ff ffde 	bl	8000554 <HAL_GetTick>
 8000598:	4602      	mov	r2, r0
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	1ad3      	subs	r3, r2, r3
 800059e:	68fa      	ldr	r2, [r7, #12]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d8f7      	bhi.n	8000594 <HAL_Delay+0x28>
  {
  }
}
 80005a4:	bf00      	nop
 80005a6:	3710      	adds	r7, #16
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000000 	.word	0x20000000

080005b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005b8:	2300      	movs	r3, #0
 80005ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d101      	bne.n	80005c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80005c2:	2301      	movs	r3, #1
 80005c4:	e031      	b.n	800062a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d109      	bne.n	80005e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f013 ff2a 	bl	8014428 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2200      	movs	r2, #0
 80005d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2200      	movs	r2, #0
 80005de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e6:	f003 0310 	and.w	r3, r3, #16
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d116      	bne.n	800061c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005f2:	4b10      	ldr	r3, [pc, #64]	; (8000634 <HAL_ADC_Init+0x84>)
 80005f4:	4013      	ands	r3, r2
 80005f6:	f043 0202 	orr.w	r2, r3, #2
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f000 f94e 	bl	80008a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2200      	movs	r2, #0
 8000608:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060e:	f023 0303 	bic.w	r3, r3, #3
 8000612:	f043 0201 	orr.w	r2, r3, #1
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	641a      	str	r2, [r3, #64]	; 0x40
 800061a:	e001      	b.n	8000620 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800061c:	2301      	movs	r3, #1
 800061e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2200      	movs	r2, #0
 8000624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000628:	7bfb      	ldrb	r3, [r7, #15]
}
 800062a:	4618      	mov	r0, r3
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	ffffeefd 	.word	0xffffeefd

08000638 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800064c:	2b01      	cmp	r3, #1
 800064e:	d101      	bne.n	8000654 <HAL_ADC_ConfigChannel+0x1c>
 8000650:	2302      	movs	r3, #2
 8000652:	e115      	b.n	8000880 <HAL_ADC_ConfigChannel+0x248>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2201      	movs	r2, #1
 8000658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b09      	cmp	r3, #9
 8000662:	d935      	bls.n	80006d0 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	68d9      	ldr	r1, [r3, #12]
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	b29b      	uxth	r3, r3
 8000670:	461a      	mov	r2, r3
 8000672:	4613      	mov	r3, r2
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	4413      	add	r3, r2
 8000678:	3b1e      	subs	r3, #30
 800067a:	2207      	movs	r2, #7
 800067c:	fa02 f303 	lsl.w	r3, r2, r3
 8000680:	43da      	mvns	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	400a      	ands	r2, r1
 8000688:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a7f      	ldr	r2, [pc, #508]	; (800088c <HAL_ADC_ConfigChannel+0x254>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d10a      	bne.n	80006aa <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	68d9      	ldr	r1, [r3, #12]
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	689b      	ldr	r3, [r3, #8]
 800069e:	061a      	lsls	r2, r3, #24
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	430a      	orrs	r2, r1
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	e035      	b.n	8000716 <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	68d9      	ldr	r1, [r3, #12]
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	689a      	ldr	r2, [r3, #8]
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	4618      	mov	r0, r3
 80006bc:	4603      	mov	r3, r0
 80006be:	005b      	lsls	r3, r3, #1
 80006c0:	4403      	add	r3, r0
 80006c2:	3b1e      	subs	r3, #30
 80006c4:	409a      	lsls	r2, r3
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	430a      	orrs	r2, r1
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	e022      	b.n	8000716 <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	6919      	ldr	r1, [r3, #16]
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	b29b      	uxth	r3, r3
 80006dc:	461a      	mov	r2, r3
 80006de:	4613      	mov	r3, r2
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	4413      	add	r3, r2
 80006e4:	2207      	movs	r2, #7
 80006e6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ea:	43da      	mvns	r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	400a      	ands	r2, r1
 80006f2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	6919      	ldr	r1, [r3, #16]
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	689a      	ldr	r2, [r3, #8]
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	b29b      	uxth	r3, r3
 8000704:	4618      	mov	r0, r3
 8000706:	4603      	mov	r3, r0
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	4403      	add	r3, r0
 800070c:	409a      	lsls	r2, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	430a      	orrs	r2, r1
 8000714:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	685b      	ldr	r3, [r3, #4]
 800071a:	2b06      	cmp	r3, #6
 800071c:	d824      	bhi.n	8000768 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	685a      	ldr	r2, [r3, #4]
 8000728:	4613      	mov	r3, r2
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	4413      	add	r3, r2
 800072e:	3b05      	subs	r3, #5
 8000730:	221f      	movs	r2, #31
 8000732:	fa02 f303 	lsl.w	r3, r2, r3
 8000736:	43da      	mvns	r2, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	400a      	ands	r2, r1
 800073e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	b29b      	uxth	r3, r3
 800074c:	4618      	mov	r0, r3
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	685a      	ldr	r2, [r3, #4]
 8000752:	4613      	mov	r3, r2
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	4413      	add	r3, r2
 8000758:	3b05      	subs	r3, #5
 800075a:	fa00 f203 	lsl.w	r2, r0, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	430a      	orrs	r2, r1
 8000764:	635a      	str	r2, [r3, #52]	; 0x34
 8000766:	e04c      	b.n	8000802 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	2b0c      	cmp	r3, #12
 800076e:	d824      	bhi.n	80007ba <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	685a      	ldr	r2, [r3, #4]
 800077a:	4613      	mov	r3, r2
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	4413      	add	r3, r2
 8000780:	3b23      	subs	r3, #35	; 0x23
 8000782:	221f      	movs	r2, #31
 8000784:	fa02 f303 	lsl.w	r3, r2, r3
 8000788:	43da      	mvns	r2, r3
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	400a      	ands	r2, r1
 8000790:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	b29b      	uxth	r3, r3
 800079e:	4618      	mov	r0, r3
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	685a      	ldr	r2, [r3, #4]
 80007a4:	4613      	mov	r3, r2
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	4413      	add	r3, r2
 80007aa:	3b23      	subs	r3, #35	; 0x23
 80007ac:	fa00 f203 	lsl.w	r2, r0, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	430a      	orrs	r2, r1
 80007b6:	631a      	str	r2, [r3, #48]	; 0x30
 80007b8:	e023      	b.n	8000802 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	685a      	ldr	r2, [r3, #4]
 80007c4:	4613      	mov	r3, r2
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	4413      	add	r3, r2
 80007ca:	3b41      	subs	r3, #65	; 0x41
 80007cc:	221f      	movs	r2, #31
 80007ce:	fa02 f303 	lsl.w	r3, r2, r3
 80007d2:	43da      	mvns	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	400a      	ands	r2, r1
 80007da:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	4618      	mov	r0, r3
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	685a      	ldr	r2, [r3, #4]
 80007ee:	4613      	mov	r3, r2
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	4413      	add	r3, r2
 80007f4:	3b41      	subs	r3, #65	; 0x41
 80007f6:	fa00 f203 	lsl.w	r2, r0, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	430a      	orrs	r2, r1
 8000800:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a22      	ldr	r2, [pc, #136]	; (8000890 <HAL_ADC_ConfigChannel+0x258>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d109      	bne.n	8000820 <HAL_ADC_ConfigChannel+0x1e8>
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2b12      	cmp	r3, #18
 8000812:	d105      	bne.n	8000820 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8000814:	4b1f      	ldr	r3, [pc, #124]	; (8000894 <HAL_ADC_ConfigChannel+0x25c>)
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	4a1e      	ldr	r2, [pc, #120]	; (8000894 <HAL_ADC_ConfigChannel+0x25c>)
 800081a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800081e:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a1a      	ldr	r2, [pc, #104]	; (8000890 <HAL_ADC_ConfigChannel+0x258>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d125      	bne.n	8000876 <HAL_ADC_ConfigChannel+0x23e>
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a17      	ldr	r2, [pc, #92]	; (800088c <HAL_ADC_ConfigChannel+0x254>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d003      	beq.n	800083c <HAL_ADC_ConfigChannel+0x204>
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b11      	cmp	r3, #17
 800083a:	d11c      	bne.n	8000876 <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800083c:	4b15      	ldr	r3, [pc, #84]	; (8000894 <HAL_ADC_ConfigChannel+0x25c>)
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	4a14      	ldr	r2, [pc, #80]	; (8000894 <HAL_ADC_ConfigChannel+0x25c>)
 8000842:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000846:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a0f      	ldr	r2, [pc, #60]	; (800088c <HAL_ADC_ConfigChannel+0x254>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d111      	bne.n	8000876 <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <HAL_ADC_ConfigChannel+0x260>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a11      	ldr	r2, [pc, #68]	; (800089c <HAL_ADC_ConfigChannel+0x264>)
 8000858:	fba2 2303 	umull	r2, r3, r2, r3
 800085c:	0c9a      	lsrs	r2, r3, #18
 800085e:	4613      	mov	r3, r2
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	4413      	add	r3, r2
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000868:	e002      	b.n	8000870 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	3b01      	subs	r3, #1
 800086e:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d1f9      	bne.n	800086a <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2200      	movs	r2, #0
 800087a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800087e:	2300      	movs	r3, #0
}
 8000880:	4618      	mov	r0, r3
 8000882:	3714      	adds	r7, #20
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	10000012 	.word	0x10000012
 8000890:	40012000 	.word	0x40012000
 8000894:	40012300 	.word	0x40012300
 8000898:	2000002c 	.word	0x2000002c
 800089c:	431bde83 	.word	0x431bde83

080008a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80008a8:	4b78      	ldr	r3, [pc, #480]	; (8000a8c <ADC_Init+0x1ec>)
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	4a77      	ldr	r2, [pc, #476]	; (8000a8c <ADC_Init+0x1ec>)
 80008ae:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80008b2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80008b4:	4b75      	ldr	r3, [pc, #468]	; (8000a8c <ADC_Init+0x1ec>)
 80008b6:	685a      	ldr	r2, [r3, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	4973      	ldr	r1, [pc, #460]	; (8000a8c <ADC_Init+0x1ec>)
 80008be:	4313      	orrs	r3, r2
 80008c0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	685a      	ldr	r2, [r3, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80008d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	6859      	ldr	r1, [r3, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	691b      	ldr	r3, [r3, #16]
 80008dc:	021a      	lsls	r2, r3, #8
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	430a      	orrs	r2, r1
 80008e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	685a      	ldr	r2, [r3, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80008f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	6859      	ldr	r1, [r3, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	689a      	ldr	r2, [r3, #8]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	430a      	orrs	r2, r1
 8000906:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	689a      	ldr	r2, [r3, #8]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000916:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	6899      	ldr	r1, [r3, #8]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	68da      	ldr	r2, [r3, #12]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	430a      	orrs	r2, r1
 8000928:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800092e:	4a58      	ldr	r2, [pc, #352]	; (8000a90 <ADC_Init+0x1f0>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d022      	beq.n	800097a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	689a      	ldr	r2, [r3, #8]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000942:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	6899      	ldr	r1, [r3, #8]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	430a      	orrs	r2, r1
 8000954:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	689a      	ldr	r2, [r3, #8]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000964:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	6899      	ldr	r1, [r3, #8]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	430a      	orrs	r2, r1
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	e00f      	b.n	800099a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	689a      	ldr	r2, [r3, #8]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000988:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	689a      	ldr	r2, [r3, #8]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000998:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	689a      	ldr	r2, [r3, #8]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f022 0202 	bic.w	r2, r2, #2
 80009a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	6899      	ldr	r1, [r3, #8]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	005a      	lsls	r2, r3, #1
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	430a      	orrs	r2, r1
 80009bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d01b      	beq.n	8000a00 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	685a      	ldr	r2, [r3, #4]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80009d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	685a      	ldr	r2, [r3, #4]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80009e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	6859      	ldr	r1, [r3, #4]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009f2:	3b01      	subs	r3, #1
 80009f4:	035a      	lsls	r2, r3, #13
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	430a      	orrs	r2, r1
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	e007      	b.n	8000a10 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	685a      	ldr	r2, [r3, #4]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000a0e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000a1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	69db      	ldr	r3, [r3, #28]
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	051a      	lsls	r2, r3, #20
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	430a      	orrs	r2, r1
 8000a34:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	689a      	ldr	r2, [r3, #8]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	6899      	ldr	r1, [r3, #8]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000a52:	025a      	lsls	r2, r3, #9
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	430a      	orrs	r2, r1
 8000a5a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	689a      	ldr	r2, [r3, #8]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	6899      	ldr	r1, [r3, #8]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	029a      	lsls	r2, r3, #10
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	609a      	str	r2, [r3, #8]
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	40012300 	.word	0x40012300
 8000a90:	0f000001 	.word	0x0f000001

08000a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa4:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <__NVIC_SetPriorityGrouping+0x40>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ac2:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <__NVIC_SetPriorityGrouping+0x40>)
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	60d3      	str	r3, [r2, #12]
}
 8000ac8:	bf00      	nop
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000ed00 	.word	0xe000ed00
 8000ad8:	05fa0000 	.word	0x05fa0000

08000adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae0:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	0a1b      	lsrs	r3, r3, #8
 8000ae6:	f003 0307 	and.w	r3, r3, #7
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	db0b      	blt.n	8000b22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	f003 021f 	and.w	r2, r3, #31
 8000b10:	4907      	ldr	r1, [pc, #28]	; (8000b30 <__NVIC_EnableIRQ+0x38>)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	095b      	lsrs	r3, r3, #5
 8000b18:	2001      	movs	r0, #1
 8000b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000e100 	.word	0xe000e100

08000b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	6039      	str	r1, [r7, #0]
 8000b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	db0a      	blt.n	8000b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	490c      	ldr	r1, [pc, #48]	; (8000b80 <__NVIC_SetPriority+0x4c>)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	0112      	lsls	r2, r2, #4
 8000b54:	b2d2      	uxtb	r2, r2
 8000b56:	440b      	add	r3, r1
 8000b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b5c:	e00a      	b.n	8000b74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4908      	ldr	r1, [pc, #32]	; (8000b84 <__NVIC_SetPriority+0x50>)
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	3b04      	subs	r3, #4
 8000b6c:	0112      	lsls	r2, r2, #4
 8000b6e:	b2d2      	uxtb	r2, r2
 8000b70:	440b      	add	r3, r1
 8000b72:	761a      	strb	r2, [r3, #24]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000e100 	.word	0xe000e100
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b089      	sub	sp, #36	; 0x24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ba2:	2b04      	cmp	r3, #4
 8000ba4:	bf28      	it	cs
 8000ba6:	2304      	movcs	r3, #4
 8000ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3304      	adds	r3, #4
 8000bae:	2b06      	cmp	r3, #6
 8000bb0:	d902      	bls.n	8000bb8 <NVIC_EncodePriority+0x30>
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3b03      	subs	r3, #3
 8000bb6:	e000      	b.n	8000bba <NVIC_EncodePriority+0x32>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43da      	mvns	r2, r3
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	401a      	ands	r2, r3
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bda:	43d9      	mvns	r1, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be0:	4313      	orrs	r3, r2
         );
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3724      	adds	r7, #36	; 0x24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b082      	sub	sp, #8
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf6:	6878      	ldr	r0, [r7, #4]
 8000bf8:	f7ff ff4c 	bl	8000a94 <__NVIC_SetPriorityGrouping>
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
 8000c10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c16:	f7ff ff61 	bl	8000adc <__NVIC_GetPriorityGrouping>
 8000c1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	68b9      	ldr	r1, [r7, #8]
 8000c20:	6978      	ldr	r0, [r7, #20]
 8000c22:	f7ff ffb1 	bl	8000b88 <NVIC_EncodePriority>
 8000c26:	4602      	mov	r2, r0
 8000c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c2c:	4611      	mov	r1, r2
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff ff80 	bl	8000b34 <__NVIC_SetPriority>
}
 8000c34:	bf00      	nop
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff ff54 	bl	8000af8 <__NVIC_EnableIRQ>
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d101      	bne.n	8000c6a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e054      	b.n	8000d14 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	7f5b      	ldrb	r3, [r3, #29]
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d105      	bne.n	8000c80 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2200      	movs	r2, #0
 8000c78:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f013 fc2e 	bl	80144dc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2202      	movs	r2, #2
 8000c84:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	791b      	ldrb	r3, [r3, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d10c      	bne.n	8000ca8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a22      	ldr	r2, [pc, #136]	; (8000d1c <HAL_CRC_Init+0xc4>)
 8000c94:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	689a      	ldr	r2, [r3, #8]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f022 0218 	bic.w	r2, r2, #24
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	e00c      	b.n	8000cc2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6899      	ldr	r1, [r3, #8]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f000 f834 	bl	8000d20 <HAL_CRCEx_Polynomial_Set>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e028      	b.n	8000d14 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	795b      	ldrb	r3, [r3, #5]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d105      	bne.n	8000cd6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd2:	611a      	str	r2, [r3, #16]
 8000cd4:	e004      	b.n	8000ce0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	6912      	ldr	r2, [r2, #16]
 8000cde:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	695a      	ldr	r2, [r3, #20]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	699a      	ldr	r2, [r3, #24]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2201      	movs	r2, #1
 8000d10:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000d12:	2300      	movs	r3, #0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	04c11db7 	.word	0x04c11db7

08000d20 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b087      	sub	sp, #28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000d30:	231f      	movs	r3, #31
 8000d32:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000d34:	bf00      	nop
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	1e5a      	subs	r2, r3, #1
 8000d3a:	613a      	str	r2, [r7, #16]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d009      	beq.n	8000d54 <HAL_CRCEx_Polynomial_Set+0x34>
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	f003 031f 	and.w	r3, r3, #31
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	fa22 f303 	lsr.w	r3, r2, r3
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d0f0      	beq.n	8000d36 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b18      	cmp	r3, #24
 8000d58:	d846      	bhi.n	8000de8 <HAL_CRCEx_Polynomial_Set+0xc8>
 8000d5a:	a201      	add	r2, pc, #4	; (adr r2, 8000d60 <HAL_CRCEx_Polynomial_Set+0x40>)
 8000d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d60:	08000def 	.word	0x08000def
 8000d64:	08000de9 	.word	0x08000de9
 8000d68:	08000de9 	.word	0x08000de9
 8000d6c:	08000de9 	.word	0x08000de9
 8000d70:	08000de9 	.word	0x08000de9
 8000d74:	08000de9 	.word	0x08000de9
 8000d78:	08000de9 	.word	0x08000de9
 8000d7c:	08000de9 	.word	0x08000de9
 8000d80:	08000ddd 	.word	0x08000ddd
 8000d84:	08000de9 	.word	0x08000de9
 8000d88:	08000de9 	.word	0x08000de9
 8000d8c:	08000de9 	.word	0x08000de9
 8000d90:	08000de9 	.word	0x08000de9
 8000d94:	08000de9 	.word	0x08000de9
 8000d98:	08000de9 	.word	0x08000de9
 8000d9c:	08000de9 	.word	0x08000de9
 8000da0:	08000dd1 	.word	0x08000dd1
 8000da4:	08000de9 	.word	0x08000de9
 8000da8:	08000de9 	.word	0x08000de9
 8000dac:	08000de9 	.word	0x08000de9
 8000db0:	08000de9 	.word	0x08000de9
 8000db4:	08000de9 	.word	0x08000de9
 8000db8:	08000de9 	.word	0x08000de9
 8000dbc:	08000de9 	.word	0x08000de9
 8000dc0:	08000dc5 	.word	0x08000dc5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	2b06      	cmp	r3, #6
 8000dc8:	d913      	bls.n	8000df2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000dce:	e010      	b.n	8000df2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	2b07      	cmp	r3, #7
 8000dd4:	d90f      	bls.n	8000df6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000dda:	e00c      	b.n	8000df6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	2b0f      	cmp	r3, #15
 8000de0:	d90b      	bls.n	8000dfa <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000de6:	e008      	b.n	8000dfa <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	75fb      	strb	r3, [r7, #23]
      break;
 8000dec:	e006      	b.n	8000dfc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000dee:	bf00      	nop
 8000df0:	e004      	b.n	8000dfc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000df2:	bf00      	nop
 8000df4:	e002      	b.n	8000dfc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000df6:	bf00      	nop
 8000df8:	e000      	b.n	8000dfc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000dfa:	bf00      	nop
  }
  if (status == HAL_OK)
 8000dfc:	7dfb      	ldrb	r3, [r7, #23]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d10d      	bne.n	8000e1e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	f023 0118 	bic.w	r1, r3, #24
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	371c      	adds	r7, #28
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{     
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d101      	bne.n	8000e3e <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e062      	b.n	8000f04 <HAL_DCMI_Init+0xd8>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
                
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d102      	bne.n	8000e50 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else  
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f013 fb66 	bl	801451c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  } 
  
  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2202      	movs	r2, #2
 8000e54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	6819      	ldr	r1, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	4b2a      	ldr	r3, [pc, #168]	; (8000f0c <HAL_DCMI_Init+0xe0>)
 8000e64:	400b      	ands	r3, r1
 8000e66:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	6819      	ldr	r1, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	685a      	ldr	r2, [r3, #4]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000e7c:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	691b      	ldr	r3, [r3, #16]
 8000e82:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000e88:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8000e94:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9a:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8000ea0:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea6:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8000eac:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	601a      	str	r2, [r3, #0]
                                     
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	2b10      	cmp	r3, #16
 8000ebc:	d112      	bne.n	8000ee4 <HAL_DCMI_Init+0xb8>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	7f1b      	ldrb	r3, [r3, #28]
 8000ec2:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	7f5b      	ldrb	r3, [r3, #29]
 8000ec8:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8000eca:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	7f9b      	ldrb	r3, [r3, #30]
 8000ed0:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8000ed2:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	7fdb      	ldrb	r3, [r3, #31]
 8000eda:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8000ee0:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8000ee2:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	68da      	ldr	r2, [r3, #12]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f042 021e 	orr.w	r2, r2, #30
 8000ef2:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2201      	movs	r2, #1
 8000efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000f02:	2300      	movs	r3, #0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	ffe0f007 	.word	0xffe0f007

08000f10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f1c:	f7ff fb1a 	bl	8000554 <HAL_GetTick>
 8000f20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d101      	bne.n	8000f2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e099      	b.n	8001060 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2202      	movs	r2, #2
 8000f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f022 0201 	bic.w	r2, r2, #1
 8000f4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f4c:	e00f      	b.n	8000f6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f4e:	f7ff fb01 	bl	8000554 <HAL_GetTick>
 8000f52:	4602      	mov	r2, r0
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	2b05      	cmp	r3, #5
 8000f5a:	d908      	bls.n	8000f6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2220      	movs	r2, #32
 8000f60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2203      	movs	r2, #3
 8000f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e078      	b.n	8001060 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d1e8      	bne.n	8000f4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f84:	697a      	ldr	r2, [r7, #20]
 8000f86:	4b38      	ldr	r3, [pc, #224]	; (8001068 <HAL_DMA_Init+0x158>)
 8000f88:	4013      	ands	r3, r2
 8000f8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685a      	ldr	r2, [r3, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	691b      	ldr	r3, [r3, #16]
 8000fa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6a1b      	ldr	r3, [r3, #32]
 8000fb8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fba:	697a      	ldr	r2, [r7, #20]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc4:	2b04      	cmp	r3, #4
 8000fc6:	d107      	bne.n	8000fd8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	f023 0307 	bic.w	r3, r3, #7
 8000fee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff4:	697a      	ldr	r2, [r7, #20]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	d117      	bne.n	8001032 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	4313      	orrs	r3, r2
 800100a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001010:	2b00      	cmp	r3, #0
 8001012:	d00e      	beq.n	8001032 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f000 faa5 	bl	8001564 <DMA_CheckFifoParam>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d008      	beq.n	8001032 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2240      	movs	r2, #64	; 0x40
 8001024:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2201      	movs	r2, #1
 800102a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800102e:	2301      	movs	r3, #1
 8001030:	e016      	b.n	8001060 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f000 fa5c 	bl	80014f8 <DMA_CalcBaseAndBitshift>
 8001040:	4603      	mov	r3, r0
 8001042:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001048:	223f      	movs	r2, #63	; 0x3f
 800104a:	409a      	lsls	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2201      	movs	r2, #1
 800105a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	f010803f 	.word	0xf010803f

0800106c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
 8001078:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800107a:	2300      	movs	r3, #0
 800107c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001082:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800108a:	2b01      	cmp	r3, #1
 800108c:	d101      	bne.n	8001092 <HAL_DMA_Start_IT+0x26>
 800108e:	2302      	movs	r3, #2
 8001090:	e048      	b.n	8001124 <HAL_DMA_Start_IT+0xb8>
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2201      	movs	r2, #1
 8001096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d137      	bne.n	8001116 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	2202      	movs	r2, #2
 80010aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	2200      	movs	r2, #0
 80010b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	68b9      	ldr	r1, [r7, #8]
 80010ba:	68f8      	ldr	r0, [r7, #12]
 80010bc:	f000 f9ee 	bl	800149c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010c4:	223f      	movs	r2, #63	; 0x3f
 80010c6:	409a      	lsls	r2, r3
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f042 0216 	orr.w	r2, r2, #22
 80010da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	695a      	ldr	r2, [r3, #20]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010ea:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d007      	beq.n	8001104 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f042 0208 	orr.w	r2, r2, #8
 8001102:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f042 0201 	orr.w	r2, r2, #1
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	e005      	b.n	8001122 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800111e:	2302      	movs	r3, #2
 8001120:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001122:	7dfb      	ldrb	r3, [r7, #23]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d004      	beq.n	800114a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2280      	movs	r2, #128	; 0x80
 8001144:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e00c      	b.n	8001164 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2205      	movs	r2, #5
 800114e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f022 0201 	bic.w	r2, r2, #1
 8001160:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001162:	2300      	movs	r3, #0
}
 8001164:	4618      	mov	r0, r3
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800117c:	4b92      	ldr	r3, [pc, #584]	; (80013c8 <HAL_DMA_IRQHandler+0x258>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a92      	ldr	r2, [pc, #584]	; (80013cc <HAL_DMA_IRQHandler+0x25c>)
 8001182:	fba2 2303 	umull	r2, r3, r2, r3
 8001186:	0a9b      	lsrs	r3, r3, #10
 8001188:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800119a:	2208      	movs	r2, #8
 800119c:	409a      	lsls	r2, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	4013      	ands	r3, r2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d01a      	beq.n	80011dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d013      	beq.n	80011dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f022 0204 	bic.w	r2, r2, #4
 80011c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011c8:	2208      	movs	r2, #8
 80011ca:	409a      	lsls	r2, r3
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d4:	f043 0201 	orr.w	r2, r3, #1
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011e0:	2201      	movs	r2, #1
 80011e2:	409a      	lsls	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4013      	ands	r3, r2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d012      	beq.n	8001212 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00b      	beq.n	8001212 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011fe:	2201      	movs	r2, #1
 8001200:	409a      	lsls	r2, r3
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800120a:	f043 0202 	orr.w	r2, r3, #2
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001216:	2204      	movs	r2, #4
 8001218:	409a      	lsls	r2, r3
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	4013      	ands	r3, r2
 800121e:	2b00      	cmp	r3, #0
 8001220:	d012      	beq.n	8001248 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d00b      	beq.n	8001248 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001234:	2204      	movs	r2, #4
 8001236:	409a      	lsls	r2, r3
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001240:	f043 0204 	orr.w	r2, r3, #4
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800124c:	2210      	movs	r2, #16
 800124e:	409a      	lsls	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4013      	ands	r3, r2
 8001254:	2b00      	cmp	r3, #0
 8001256:	d043      	beq.n	80012e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0308 	and.w	r3, r3, #8
 8001262:	2b00      	cmp	r3, #0
 8001264:	d03c      	beq.n	80012e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800126a:	2210      	movs	r2, #16
 800126c:	409a      	lsls	r2, r3
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d018      	beq.n	80012b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d108      	bne.n	80012a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	2b00      	cmp	r3, #0
 8001294:	d024      	beq.n	80012e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	4798      	blx	r3
 800129e:	e01f      	b.n	80012e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d01b      	beq.n	80012e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	4798      	blx	r3
 80012b0:	e016      	b.n	80012e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d107      	bne.n	80012d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f022 0208 	bic.w	r2, r2, #8
 80012ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012e4:	2220      	movs	r2, #32
 80012e6:	409a      	lsls	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4013      	ands	r3, r2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 808e 	beq.w	800140e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0310 	and.w	r3, r3, #16
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 8086 	beq.w	800140e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001306:	2220      	movs	r2, #32
 8001308:	409a      	lsls	r2, r3
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b05      	cmp	r3, #5
 8001318:	d136      	bne.n	8001388 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f022 0216 	bic.w	r2, r2, #22
 8001328:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	695a      	ldr	r2, [r3, #20]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001338:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	2b00      	cmp	r3, #0
 8001340:	d103      	bne.n	800134a <HAL_DMA_IRQHandler+0x1da>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001346:	2b00      	cmp	r3, #0
 8001348:	d007      	beq.n	800135a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f022 0208 	bic.w	r2, r2, #8
 8001358:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800135e:	223f      	movs	r2, #63	; 0x3f
 8001360:	409a      	lsls	r2, r3
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2201      	movs	r2, #1
 8001372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800137a:	2b00      	cmp	r3, #0
 800137c:	d07d      	beq.n	800147a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	4798      	blx	r3
        }
        return;
 8001386:	e078      	b.n	800147a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d01c      	beq.n	80013d0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d108      	bne.n	80013b6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d030      	beq.n	800140e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	4798      	blx	r3
 80013b4:	e02b      	b.n	800140e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d027      	beq.n	800140e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	4798      	blx	r3
 80013c6:	e022      	b.n	800140e <HAL_DMA_IRQHandler+0x29e>
 80013c8:	2000002c 	.word	0x2000002c
 80013cc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d10f      	bne.n	80013fe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 0210 	bic.w	r2, r2, #16
 80013ec:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2201      	movs	r2, #1
 80013fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001412:	2b00      	cmp	r3, #0
 8001414:	d032      	beq.n	800147c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	2b00      	cmp	r3, #0
 8001420:	d022      	beq.n	8001468 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2205      	movs	r2, #5
 8001426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f022 0201 	bic.w	r2, r2, #1
 8001438:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	3301      	adds	r3, #1
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	697a      	ldr	r2, [r7, #20]
 8001442:	429a      	cmp	r2, r3
 8001444:	d307      	bcc.n	8001456 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1f2      	bne.n	800143a <HAL_DMA_IRQHandler+0x2ca>
 8001454:	e000      	b.n	8001458 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001456:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2201      	movs	r2, #1
 8001464:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146c:	2b00      	cmp	r3, #0
 800146e:	d005      	beq.n	800147c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	4798      	blx	r3
 8001478:	e000      	b.n	800147c <HAL_DMA_IRQHandler+0x30c>
        return;
 800147a:	bf00      	nop
    }
  }
}
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop

08001484 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001490:	4618      	mov	r0, r3
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
 80014a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80014b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	2b40      	cmp	r3, #64	; 0x40
 80014c8:	d108      	bne.n	80014dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68ba      	ldr	r2, [r7, #8]
 80014d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80014da:	e007      	b.n	80014ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	68ba      	ldr	r2, [r7, #8]
 80014e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	60da      	str	r2, [r3, #12]
}
 80014ec:	bf00      	nop
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	3b10      	subs	r3, #16
 8001508:	4a13      	ldr	r2, [pc, #76]	; (8001558 <DMA_CalcBaseAndBitshift+0x60>)
 800150a:	fba2 2303 	umull	r2, r3, r2, r3
 800150e:	091b      	lsrs	r3, r3, #4
 8001510:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001512:	4a12      	ldr	r2, [pc, #72]	; (800155c <DMA_CalcBaseAndBitshift+0x64>)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4413      	add	r3, r2
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	461a      	mov	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2b03      	cmp	r3, #3
 8001524:	d908      	bls.n	8001538 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	461a      	mov	r2, r3
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <DMA_CalcBaseAndBitshift+0x68>)
 800152e:	4013      	ands	r3, r2
 8001530:	1d1a      	adds	r2, r3, #4
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	659a      	str	r2, [r3, #88]	; 0x58
 8001536:	e006      	b.n	8001546 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	461a      	mov	r2, r3
 800153e:	4b08      	ldr	r3, [pc, #32]	; (8001560 <DMA_CalcBaseAndBitshift+0x68>)
 8001540:	4013      	ands	r3, r2
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800154a:	4618      	mov	r0, r3
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	aaaaaaab 	.word	0xaaaaaaab
 800155c:	08015e94 	.word	0x08015e94
 8001560:	fffffc00 	.word	0xfffffc00

08001564 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001574:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d11f      	bne.n	80015be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	2b03      	cmp	r3, #3
 8001582:	d855      	bhi.n	8001630 <DMA_CheckFifoParam+0xcc>
 8001584:	a201      	add	r2, pc, #4	; (adr r2, 800158c <DMA_CheckFifoParam+0x28>)
 8001586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800158a:	bf00      	nop
 800158c:	0800159d 	.word	0x0800159d
 8001590:	080015af 	.word	0x080015af
 8001594:	0800159d 	.word	0x0800159d
 8001598:	08001631 	.word	0x08001631
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d045      	beq.n	8001634 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015ac:	e042      	b.n	8001634 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015b6:	d13f      	bne.n	8001638 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015bc:	e03c      	b.n	8001638 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015c6:	d121      	bne.n	800160c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	2b03      	cmp	r3, #3
 80015cc:	d836      	bhi.n	800163c <DMA_CheckFifoParam+0xd8>
 80015ce:	a201      	add	r2, pc, #4	; (adr r2, 80015d4 <DMA_CheckFifoParam+0x70>)
 80015d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d4:	080015e5 	.word	0x080015e5
 80015d8:	080015eb 	.word	0x080015eb
 80015dc:	080015e5 	.word	0x080015e5
 80015e0:	080015fd 	.word	0x080015fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	73fb      	strb	r3, [r7, #15]
      break;
 80015e8:	e02f      	b.n	800164a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d024      	beq.n	8001640 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015fa:	e021      	b.n	8001640 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001600:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001604:	d11e      	bne.n	8001644 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800160a:	e01b      	b.n	8001644 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	2b02      	cmp	r3, #2
 8001610:	d902      	bls.n	8001618 <DMA_CheckFifoParam+0xb4>
 8001612:	2b03      	cmp	r3, #3
 8001614:	d003      	beq.n	800161e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001616:	e018      	b.n	800164a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	73fb      	strb	r3, [r7, #15]
      break;
 800161c:	e015      	b.n	800164a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001622:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00e      	beq.n	8001648 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	73fb      	strb	r3, [r7, #15]
      break;
 800162e:	e00b      	b.n	8001648 <DMA_CheckFifoParam+0xe4>
      break;
 8001630:	bf00      	nop
 8001632:	e00a      	b.n	800164a <DMA_CheckFifoParam+0xe6>
      break;
 8001634:	bf00      	nop
 8001636:	e008      	b.n	800164a <DMA_CheckFifoParam+0xe6>
      break;
 8001638:	bf00      	nop
 800163a:	e006      	b.n	800164a <DMA_CheckFifoParam+0xe6>
      break;
 800163c:	bf00      	nop
 800163e:	e004      	b.n	800164a <DMA_CheckFifoParam+0xe6>
      break;
 8001640:	bf00      	nop
 8001642:	e002      	b.n	800164a <DMA_CheckFifoParam+0xe6>
      break;   
 8001644:	bf00      	nop
 8001646:	e000      	b.n	800164a <DMA_CheckFifoParam+0xe6>
      break;
 8001648:	bf00      	nop
    }
  } 
  
  return status; 
 800164a:	7bfb      	ldrb	r3, [r7, #15]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e039      	b.n	80016de <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d106      	bne.n	8001684 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f013 f80a 	bl	8014698 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2202      	movs	r2, #2
 8001688:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	430a      	orrs	r2, r1
 80016a0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016a8:	f023 0107 	bic.w	r1, r3, #7
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016be:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <HAL_DMA2D_Init+0x90>)
 80016c0:	4013      	ands	r3, r2
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	68d1      	ldr	r1, [r2, #12]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	6812      	ldr	r2, [r2, #0]
 80016ca:	430b      	orrs	r3, r1
 80016cc:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2201      	movs	r2, #1
 80016d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	ffffc000 	.word	0xffffc000

080016ec <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b00      	cmp	r3, #0
 800170c:	d026      	beq.n	800175c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001714:	2b00      	cmp	r3, #0
 8001716:	d021      	beq.n	800175c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001726:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800172c:	f043 0201 	orr.w	r2, r3, #1
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2201      	movs	r2, #1
 800173a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2204      	movs	r2, #4
 8001740:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 0320 	and.w	r3, r3, #32
 8001762:	2b00      	cmp	r3, #0
 8001764:	d026      	beq.n	80017b4 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d021      	beq.n	80017b4 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800177e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2220      	movs	r2, #32
 8001786:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800178c:	f043 0202 	orr.w	r2, r3, #2
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2204      	movs	r2, #4
 8001798:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	695b      	ldr	r3, [r3, #20]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f003 0308 	and.w	r3, r3, #8
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d026      	beq.n	800180c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d021      	beq.n	800180c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017d6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2208      	movs	r2, #8
 80017de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017e4:	f043 0204 	orr.w	r2, r3, #4
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2204      	movs	r2, #4
 80017f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	695b      	ldr	r3, [r3, #20]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f003 0304 	and.w	r3, r3, #4
 8001812:	2b00      	cmp	r3, #0
 8001814:	d013      	beq.n	800183e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800181c:	2b00      	cmp	r3, #0
 800181e:	d00e      	beq.n	800183e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800182e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2204      	movs	r2, #4
 8001836:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f000 f853 	bl	80018e4 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d024      	beq.n	8001892 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800184e:	2b00      	cmp	r3, #0
 8001850:	d01f      	beq.n	8001892 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001860:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2202      	movs	r2, #2
 8001868:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f003 0310 	and.w	r3, r3, #16
 8001898:	2b00      	cmp	r3, #0
 800189a:	d01f      	beq.n	80018dc <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d01a      	beq.n	80018dc <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018b4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2210      	movs	r2, #16
 80018bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 f80e 	bl	80018f8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80018dc:	bf00      	nop
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800190c:	b480      	push	{r7}
 800190e:	b087      	sub	sp, #28
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001924:	2b01      	cmp	r3, #1
 8001926:	d101      	bne.n	800192c <HAL_DMA2D_ConfigLayer+0x20>
 8001928:	2302      	movs	r3, #2
 800192a:	e079      	b.n	8001a20 <HAL_DMA2D_ConfigLayer+0x114>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2202      	movs	r2, #2
 8001938:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	011b      	lsls	r3, r3, #4
 8001940:	3318      	adds	r3, #24
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	041b      	lsls	r3, r3, #16
 8001952:	4313      	orrs	r3, r2
 8001954:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001956:	4b35      	ldr	r3, [pc, #212]	; (8001a2c <HAL_DMA2D_ConfigLayer+0x120>)
 8001958:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b0a      	cmp	r3, #10
 8001960:	d003      	beq.n	800196a <HAL_DMA2D_ConfigLayer+0x5e>
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b09      	cmp	r3, #9
 8001968:	d107      	bne.n	800197a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	4313      	orrs	r3, r2
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	e005      	b.n	8001986 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	061b      	lsls	r3, r3, #24
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	4313      	orrs	r3, r2
 8001984:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d120      	bne.n	80019ce <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	43db      	mvns	r3, r3
 8001996:	ea02 0103 	and.w	r1, r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	430a      	orrs	r2, r1
 80019a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	6812      	ldr	r2, [r2, #0]
 80019ac:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b0a      	cmp	r3, #10
 80019b4:	d003      	beq.n	80019be <HAL_DMA2D_ConfigLayer+0xb2>
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b09      	cmp	r3, #9
 80019bc:	d127      	bne.n	8001a0e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	68da      	ldr	r2, [r3, #12]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80019ca:	629a      	str	r2, [r3, #40]	; 0x28
 80019cc:	e01f      	b.n	8001a0e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	69da      	ldr	r2, [r3, #28]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	43db      	mvns	r3, r3
 80019d8:	ea02 0103 	and.w	r1, r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	430a      	orrs	r2, r1
 80019e4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	6812      	ldr	r2, [r2, #0]
 80019ee:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	2b0a      	cmp	r3, #10
 80019f6:	d003      	beq.n	8001a00 <HAL_DMA2D_ConfigLayer+0xf4>
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b09      	cmp	r3, #9
 80019fe:	d106      	bne.n	8001a0e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	68da      	ldr	r2, [r3, #12]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001a0c:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2201      	movs	r2, #1
 8001a12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	371c      	adds	r7, #28
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	ff03000f 	.word	0xff03000f

08001a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b089      	sub	sp, #36	; 0x24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
 8001a4e:	e175      	b.n	8001d3c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a50:	2201      	movs	r2, #1
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	4013      	ands	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	f040 8164 	bne.w	8001d36 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d003      	beq.n	8001a7e <HAL_GPIO_Init+0x4e>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b12      	cmp	r3, #18
 8001a7c:	d123      	bne.n	8001ac6 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	08da      	lsrs	r2, r3, #3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3208      	adds	r2, #8
 8001a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	220f      	movs	r2, #15
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	691a      	ldr	r2, [r3, #16]
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	08da      	lsrs	r2, r3, #3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3208      	adds	r2, #8
 8001ac0:	69b9      	ldr	r1, [r7, #24]
 8001ac2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4013      	ands	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 0203 	and.w	r2, r3, #3
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d00b      	beq.n	8001b1a <HAL_GPIO_Init+0xea>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d007      	beq.n	8001b1a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b0e:	2b11      	cmp	r3, #17
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b12      	cmp	r3, #18
 8001b18:	d130      	bne.n	8001b7c <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	2203      	movs	r2, #3
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b50:	2201      	movs	r2, #1
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	091b      	lsrs	r3, r3, #4
 8001b66:	f003 0201 	and.w	r2, r3, #1
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	2203      	movs	r2, #3
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 80be 	beq.w	8001d36 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bba:	4b65      	ldr	r3, [pc, #404]	; (8001d50 <HAL_GPIO_Init+0x320>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	4a64      	ldr	r2, [pc, #400]	; (8001d50 <HAL_GPIO_Init+0x320>)
 8001bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bc6:	4b62      	ldr	r3, [pc, #392]	; (8001d50 <HAL_GPIO_Init+0x320>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001bd2:	4a60      	ldr	r2, [pc, #384]	; (8001d54 <HAL_GPIO_Init+0x324>)
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	089b      	lsrs	r3, r3, #2
 8001bd8:	3302      	adds	r3, #2
 8001bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	220f      	movs	r2, #15
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a57      	ldr	r2, [pc, #348]	; (8001d58 <HAL_GPIO_Init+0x328>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d037      	beq.n	8001c6e <HAL_GPIO_Init+0x23e>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a56      	ldr	r2, [pc, #344]	; (8001d5c <HAL_GPIO_Init+0x32c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d031      	beq.n	8001c6a <HAL_GPIO_Init+0x23a>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a55      	ldr	r2, [pc, #340]	; (8001d60 <HAL_GPIO_Init+0x330>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d02b      	beq.n	8001c66 <HAL_GPIO_Init+0x236>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a54      	ldr	r2, [pc, #336]	; (8001d64 <HAL_GPIO_Init+0x334>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d025      	beq.n	8001c62 <HAL_GPIO_Init+0x232>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a53      	ldr	r2, [pc, #332]	; (8001d68 <HAL_GPIO_Init+0x338>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d01f      	beq.n	8001c5e <HAL_GPIO_Init+0x22e>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a52      	ldr	r2, [pc, #328]	; (8001d6c <HAL_GPIO_Init+0x33c>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d019      	beq.n	8001c5a <HAL_GPIO_Init+0x22a>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a51      	ldr	r2, [pc, #324]	; (8001d70 <HAL_GPIO_Init+0x340>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d013      	beq.n	8001c56 <HAL_GPIO_Init+0x226>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a50      	ldr	r2, [pc, #320]	; (8001d74 <HAL_GPIO_Init+0x344>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d00d      	beq.n	8001c52 <HAL_GPIO_Init+0x222>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a4f      	ldr	r2, [pc, #316]	; (8001d78 <HAL_GPIO_Init+0x348>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d007      	beq.n	8001c4e <HAL_GPIO_Init+0x21e>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a4e      	ldr	r2, [pc, #312]	; (8001d7c <HAL_GPIO_Init+0x34c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d101      	bne.n	8001c4a <HAL_GPIO_Init+0x21a>
 8001c46:	2309      	movs	r3, #9
 8001c48:	e012      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c4a:	230a      	movs	r3, #10
 8001c4c:	e010      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c4e:	2308      	movs	r3, #8
 8001c50:	e00e      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c52:	2307      	movs	r3, #7
 8001c54:	e00c      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c56:	2306      	movs	r3, #6
 8001c58:	e00a      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c5a:	2305      	movs	r3, #5
 8001c5c:	e008      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c5e:	2304      	movs	r3, #4
 8001c60:	e006      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c62:	2303      	movs	r3, #3
 8001c64:	e004      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c66:	2302      	movs	r3, #2
 8001c68:	e002      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c6e:	2300      	movs	r3, #0
 8001c70:	69fa      	ldr	r2, [r7, #28]
 8001c72:	f002 0203 	and.w	r2, r2, #3
 8001c76:	0092      	lsls	r2, r2, #2
 8001c78:	4093      	lsls	r3, r2
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c80:	4934      	ldr	r1, [pc, #208]	; (8001d54 <HAL_GPIO_Init+0x324>)
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	089b      	lsrs	r3, r3, #2
 8001c86:	3302      	adds	r3, #2
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c8e:	4b3c      	ldr	r3, [pc, #240]	; (8001d80 <HAL_GPIO_Init+0x350>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	43db      	mvns	r3, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cb2:	4a33      	ldr	r2, [pc, #204]	; (8001d80 <HAL_GPIO_Init+0x350>)
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cb8:	4b31      	ldr	r3, [pc, #196]	; (8001d80 <HAL_GPIO_Init+0x350>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cdc:	4a28      	ldr	r2, [pc, #160]	; (8001d80 <HAL_GPIO_Init+0x350>)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ce2:	4b27      	ldr	r3, [pc, #156]	; (8001d80 <HAL_GPIO_Init+0x350>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	43db      	mvns	r3, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d06:	4a1e      	ldr	r2, [pc, #120]	; (8001d80 <HAL_GPIO_Init+0x350>)
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d0c:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <HAL_GPIO_Init+0x350>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d30:	4a13      	ldr	r2, [pc, #76]	; (8001d80 <HAL_GPIO_Init+0x350>)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	61fb      	str	r3, [r7, #28]
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	2b0f      	cmp	r3, #15
 8001d40:	f67f ae86 	bls.w	8001a50 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d44:	bf00      	nop
 8001d46:	3724      	adds	r7, #36	; 0x24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40013800 	.word	0x40013800
 8001d58:	40020000 	.word	0x40020000
 8001d5c:	40020400 	.word	0x40020400
 8001d60:	40020800 	.word	0x40020800
 8001d64:	40020c00 	.word	0x40020c00
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	40021400 	.word	0x40021400
 8001d70:	40021800 	.word	0x40021800
 8001d74:	40021c00 	.word	0x40021c00
 8001d78:	40022000 	.word	0x40022000
 8001d7c:	40022400 	.word	0x40022400
 8001d80:	40013c00 	.word	0x40013c00

08001d84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691a      	ldr	r2, [r3, #16]
 8001d94:	887b      	ldrh	r3, [r7, #2]
 8001d96:	4013      	ands	r3, r2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d002      	beq.n	8001da2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	73fb      	strb	r3, [r7, #15]
 8001da0:	e001      	b.n	8001da6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001da2:	2300      	movs	r3, #0
 8001da4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	807b      	strh	r3, [r7, #2]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dc4:	787b      	ldrb	r3, [r7, #1]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dca:	887a      	ldrh	r2, [r7, #2]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001dd0:	e003      	b.n	8001dda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001dd2:	887b      	ldrh	r3, [r7, #2]
 8001dd4:	041a      	lsls	r2, r3, #16
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	619a      	str	r2, [r3, #24]
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
	...

08001de8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001df2:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001df4:	695a      	ldr	r2, [r3, #20]
 8001df6:	88fb      	ldrh	r3, [r7, #6]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d006      	beq.n	8001e0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dfe:	4a05      	ldr	r2, [pc, #20]	; (8001e14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e00:	88fb      	ldrh	r3, [r7, #6]
 8001e02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e04:	88fb      	ldrh	r3, [r7, #6]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f011 ff96 	bl	8013d38 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40013c00 	.word	0x40013c00

08001e18 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e1a:	b08d      	sub	sp, #52	; 0x34
 8001e1c:	af0a      	add	r7, sp, #40	; 0x28
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e048      	b.n	8001ebc <HAL_HCD_Init+0xa4>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d106      	bne.n	8001e44 <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f013 fbd0 	bl	80155e4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2203      	movs	r2, #3
 8001e48:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f007 ff5c 	bl	8009d0e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	603b      	str	r3, [r7, #0]
 8001e5c:	687e      	ldr	r6, [r7, #4]
 8001e5e:	466d      	mov	r5, sp
 8001e60:	f106 0410 	add.w	r4, r6, #16
 8001e64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e70:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e74:	1d33      	adds	r3, r6, #4
 8001e76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e78:	6838      	ldr	r0, [r7, #0]
 8001e7a:	f007 fedf 	bl	8009c3c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2101      	movs	r1, #1
 8001e84:	4618      	mov	r0, r3
 8001e86:	f007 ff53 	bl	8009d30 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	603b      	str	r3, [r7, #0]
 8001e90:	687e      	ldr	r6, [r7, #4]
 8001e92:	466d      	mov	r5, sp
 8001e94:	f106 0410 	add.w	r4, r6, #16
 8001e98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ea0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ea4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ea8:	1d33      	adds	r3, r6, #4
 8001eaa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eac:	6838      	ldr	r0, [r7, #0]
 8001eae:	f008 f865 	bl	8009f7c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ec4 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001ec4:	b590      	push	{r4, r7, lr}
 8001ec6:	b089      	sub	sp, #36	; 0x24
 8001ec8:	af04      	add	r7, sp, #16
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	4608      	mov	r0, r1
 8001ece:	4611      	mov	r1, r2
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	70fb      	strb	r3, [r7, #3]
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	70bb      	strb	r3, [r7, #2]
 8001eda:	4613      	mov	r3, r2
 8001edc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d101      	bne.n	8001eec <HAL_HCD_HC_Init+0x28>
 8001ee8:	2302      	movs	r3, #2
 8001eea:	e07f      	b.n	8001fec <HAL_HCD_HC_Init+0x128>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001ef4:	78fa      	ldrb	r2, [r7, #3]
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	440b      	add	r3, r1
 8001f02:	333d      	adds	r3, #61	; 0x3d
 8001f04:	2200      	movs	r2, #0
 8001f06:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001f08:	78fa      	ldrb	r2, [r7, #3]
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4413      	add	r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	440b      	add	r3, r1
 8001f16:	3338      	adds	r3, #56	; 0x38
 8001f18:	787a      	ldrb	r2, [r7, #1]
 8001f1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001f1c:	78fa      	ldrb	r2, [r7, #3]
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	440b      	add	r3, r1
 8001f2a:	3340      	adds	r3, #64	; 0x40
 8001f2c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001f2e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f30:	78fa      	ldrb	r2, [r7, #3]
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	4613      	mov	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	440b      	add	r3, r1
 8001f3e:	3339      	adds	r3, #57	; 0x39
 8001f40:	78fa      	ldrb	r2, [r7, #3]
 8001f42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001f44:	78fa      	ldrb	r2, [r7, #3]
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	440b      	add	r3, r1
 8001f52:	333f      	adds	r3, #63	; 0x3f
 8001f54:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001f58:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001f5a:	78fa      	ldrb	r2, [r7, #3]
 8001f5c:	78bb      	ldrb	r3, [r7, #2]
 8001f5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f62:	b2d8      	uxtb	r0, r3
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	440b      	add	r3, r1
 8001f70:	333a      	adds	r3, #58	; 0x3a
 8001f72:	4602      	mov	r2, r0
 8001f74:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001f76:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	da0a      	bge.n	8001f94 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001f7e:	78fa      	ldrb	r2, [r7, #3]
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	4613      	mov	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	440b      	add	r3, r1
 8001f8c:	333b      	adds	r3, #59	; 0x3b
 8001f8e:	2201      	movs	r2, #1
 8001f90:	701a      	strb	r2, [r3, #0]
 8001f92:	e009      	b.n	8001fa8 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001f94:	78fa      	ldrb	r2, [r7, #3]
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	440b      	add	r3, r1
 8001fa2:	333b      	adds	r3, #59	; 0x3b
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001fa8:	78fa      	ldrb	r2, [r7, #3]
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	440b      	add	r3, r1
 8001fb6:	333c      	adds	r3, #60	; 0x3c
 8001fb8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001fbc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6818      	ldr	r0, [r3, #0]
 8001fc2:	787c      	ldrb	r4, [r7, #1]
 8001fc4:	78ba      	ldrb	r2, [r7, #2]
 8001fc6:	78f9      	ldrb	r1, [r7, #3]
 8001fc8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001fca:	9302      	str	r3, [sp, #8]
 8001fcc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001fd0:	9301      	str	r3, [sp, #4]
 8001fd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	4623      	mov	r3, r4
 8001fda:	f008 f945 	bl	800a268 <USB_HC_Init>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd90      	pop	{r4, r7, pc}

08001ff4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002000:	2300      	movs	r3, #0
 8002002:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800200a:	2b01      	cmp	r3, #1
 800200c:	d101      	bne.n	8002012 <HAL_HCD_HC_Halt+0x1e>
 800200e:	2302      	movs	r3, #2
 8002010:	e00f      	b.n	8002032 <HAL_HCD_HC_Halt+0x3e>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	78fa      	ldrb	r2, [r7, #3]
 8002020:	4611      	mov	r1, r2
 8002022:	4618      	mov	r0, r3
 8002024:	f008 fb7f 	bl	800a726 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002030:	7bfb      	ldrb	r3, [r7, #15]
}
 8002032:	4618      	mov	r0, r3
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	4608      	mov	r0, r1
 8002046:	4611      	mov	r1, r2
 8002048:	461a      	mov	r2, r3
 800204a:	4603      	mov	r3, r0
 800204c:	70fb      	strb	r3, [r7, #3]
 800204e:	460b      	mov	r3, r1
 8002050:	70bb      	strb	r3, [r7, #2]
 8002052:	4613      	mov	r3, r2
 8002054:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8002056:	78fa      	ldrb	r2, [r7, #3]
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	440b      	add	r3, r1
 8002064:	333b      	adds	r3, #59	; 0x3b
 8002066:	78ba      	ldrb	r2, [r7, #2]
 8002068:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800206a:	78fa      	ldrb	r2, [r7, #3]
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	440b      	add	r3, r1
 8002078:	333f      	adds	r3, #63	; 0x3f
 800207a:	787a      	ldrb	r2, [r7, #1]
 800207c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800207e:	7c3b      	ldrb	r3, [r7, #16]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10a      	bne.n	800209a <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002084:	78fa      	ldrb	r2, [r7, #3]
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	4613      	mov	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	440b      	add	r3, r1
 8002092:	3342      	adds	r3, #66	; 0x42
 8002094:	2203      	movs	r2, #3
 8002096:	701a      	strb	r2, [r3, #0]
 8002098:	e009      	b.n	80020ae <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800209a:	78fa      	ldrb	r2, [r7, #3]
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	440b      	add	r3, r1
 80020a8:	3342      	adds	r3, #66	; 0x42
 80020aa:	2202      	movs	r2, #2
 80020ac:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80020ae:	787b      	ldrb	r3, [r7, #1]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	f200 80d6 	bhi.w	8002262 <HAL_HCD_HC_SubmitRequest+0x226>
 80020b6:	a201      	add	r2, pc, #4	; (adr r2, 80020bc <HAL_HCD_HC_SubmitRequest+0x80>)
 80020b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020bc:	080020cd 	.word	0x080020cd
 80020c0:	0800224d 	.word	0x0800224d
 80020c4:	08002139 	.word	0x08002139
 80020c8:	080021c3 	.word	0x080021c3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80020cc:	7c3b      	ldrb	r3, [r7, #16]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	f040 80c9 	bne.w	8002266 <HAL_HCD_HC_SubmitRequest+0x22a>
 80020d4:	78bb      	ldrb	r3, [r7, #2]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f040 80c5 	bne.w	8002266 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 80020dc:	8b3b      	ldrh	r3, [r7, #24]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d109      	bne.n	80020f6 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80020e2:	78fa      	ldrb	r2, [r7, #3]
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	440b      	add	r3, r1
 80020f0:	3351      	adds	r3, #81	; 0x51
 80020f2:	2201      	movs	r2, #1
 80020f4:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80020f6:	78fa      	ldrb	r2, [r7, #3]
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	4613      	mov	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	440b      	add	r3, r1
 8002104:	3351      	adds	r3, #81	; 0x51
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10a      	bne.n	8002122 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800210c:	78fa      	ldrb	r2, [r7, #3]
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	4613      	mov	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	440b      	add	r3, r1
 800211a:	3342      	adds	r3, #66	; 0x42
 800211c:	2200      	movs	r2, #0
 800211e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002120:	e0a1      	b.n	8002266 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002122:	78fa      	ldrb	r2, [r7, #3]
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	440b      	add	r3, r1
 8002130:	3342      	adds	r3, #66	; 0x42
 8002132:	2202      	movs	r2, #2
 8002134:	701a      	strb	r2, [r3, #0]
      break;
 8002136:	e096      	b.n	8002266 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002138:	78bb      	ldrb	r3, [r7, #2]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d120      	bne.n	8002180 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800213e:	78fa      	ldrb	r2, [r7, #3]
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	4613      	mov	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	440b      	add	r3, r1
 800214c:	3351      	adds	r3, #81	; 0x51
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d10a      	bne.n	800216a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002154:	78fa      	ldrb	r2, [r7, #3]
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	440b      	add	r3, r1
 8002162:	3342      	adds	r3, #66	; 0x42
 8002164:	2200      	movs	r2, #0
 8002166:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002168:	e07e      	b.n	8002268 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800216a:	78fa      	ldrb	r2, [r7, #3]
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	440b      	add	r3, r1
 8002178:	3342      	adds	r3, #66	; 0x42
 800217a:	2202      	movs	r2, #2
 800217c:	701a      	strb	r2, [r3, #0]
      break;
 800217e:	e073      	b.n	8002268 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002180:	78fa      	ldrb	r2, [r7, #3]
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	4613      	mov	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	440b      	add	r3, r1
 800218e:	3350      	adds	r3, #80	; 0x50
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10a      	bne.n	80021ac <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002196:	78fa      	ldrb	r2, [r7, #3]
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	440b      	add	r3, r1
 80021a4:	3342      	adds	r3, #66	; 0x42
 80021a6:	2200      	movs	r2, #0
 80021a8:	701a      	strb	r2, [r3, #0]
      break;
 80021aa:	e05d      	b.n	8002268 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021ac:	78fa      	ldrb	r2, [r7, #3]
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	4613      	mov	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	440b      	add	r3, r1
 80021ba:	3342      	adds	r3, #66	; 0x42
 80021bc:	2202      	movs	r2, #2
 80021be:	701a      	strb	r2, [r3, #0]
      break;
 80021c0:	e052      	b.n	8002268 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80021c2:	78bb      	ldrb	r3, [r7, #2]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d120      	bne.n	800220a <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80021c8:	78fa      	ldrb	r2, [r7, #3]
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	4613      	mov	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	440b      	add	r3, r1
 80021d6:	3351      	adds	r3, #81	; 0x51
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10a      	bne.n	80021f4 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021de:	78fa      	ldrb	r2, [r7, #3]
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	440b      	add	r3, r1
 80021ec:	3342      	adds	r3, #66	; 0x42
 80021ee:	2200      	movs	r2, #0
 80021f0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80021f2:	e039      	b.n	8002268 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021f4:	78fa      	ldrb	r2, [r7, #3]
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	4613      	mov	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	440b      	add	r3, r1
 8002202:	3342      	adds	r3, #66	; 0x42
 8002204:	2202      	movs	r2, #2
 8002206:	701a      	strb	r2, [r3, #0]
      break;
 8002208:	e02e      	b.n	8002268 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800220a:	78fa      	ldrb	r2, [r7, #3]
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	4613      	mov	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	440b      	add	r3, r1
 8002218:	3350      	adds	r3, #80	; 0x50
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10a      	bne.n	8002236 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002220:	78fa      	ldrb	r2, [r7, #3]
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	440b      	add	r3, r1
 800222e:	3342      	adds	r3, #66	; 0x42
 8002230:	2200      	movs	r2, #0
 8002232:	701a      	strb	r2, [r3, #0]
      break;
 8002234:	e018      	b.n	8002268 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002236:	78fa      	ldrb	r2, [r7, #3]
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	440b      	add	r3, r1
 8002244:	3342      	adds	r3, #66	; 0x42
 8002246:	2202      	movs	r2, #2
 8002248:	701a      	strb	r2, [r3, #0]
      break;
 800224a:	e00d      	b.n	8002268 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800224c:	78fa      	ldrb	r2, [r7, #3]
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	4613      	mov	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	440b      	add	r3, r1
 800225a:	3342      	adds	r3, #66	; 0x42
 800225c:	2200      	movs	r2, #0
 800225e:	701a      	strb	r2, [r3, #0]
      break;
 8002260:	e002      	b.n	8002268 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8002262:	bf00      	nop
 8002264:	e000      	b.n	8002268 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8002266:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002268:	78fa      	ldrb	r2, [r7, #3]
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	440b      	add	r3, r1
 8002276:	3344      	adds	r3, #68	; 0x44
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800227c:	78fa      	ldrb	r2, [r7, #3]
 800227e:	8b39      	ldrh	r1, [r7, #24]
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	4403      	add	r3, r0
 800228c:	3348      	adds	r3, #72	; 0x48
 800228e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002290:	78fa      	ldrb	r2, [r7, #3]
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	4613      	mov	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	440b      	add	r3, r1
 800229e:	335c      	adds	r3, #92	; 0x5c
 80022a0:	2200      	movs	r2, #0
 80022a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80022a4:	78fa      	ldrb	r2, [r7, #3]
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	4613      	mov	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	440b      	add	r3, r1
 80022b2:	334c      	adds	r3, #76	; 0x4c
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80022b8:	78fa      	ldrb	r2, [r7, #3]
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	440b      	add	r3, r1
 80022c6:	3339      	adds	r3, #57	; 0x39
 80022c8:	78fa      	ldrb	r2, [r7, #3]
 80022ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80022cc:	78fa      	ldrb	r2, [r7, #3]
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	4613      	mov	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	440b      	add	r3, r1
 80022da:	335d      	adds	r3, #93	; 0x5d
 80022dc:	2200      	movs	r2, #0
 80022de:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6818      	ldr	r0, [r3, #0]
 80022e4:	78fa      	ldrb	r2, [r7, #3]
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	3338      	adds	r3, #56	; 0x38
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	18d1      	adds	r1, r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	461a      	mov	r2, r3
 80022fc:	f008 f8be 	bl	800a47c <USB_HC_StartXfer>
 8002300:	4603      	mov	r3, r0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop

0800230c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f007 fde7 	bl	8009ef6 <USB_GetMode>
 8002328:	4603      	mov	r3, r0
 800232a:	2b01      	cmp	r3, #1
 800232c:	f040 80f1 	bne.w	8002512 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f007 fdcb 	bl	8009ed0 <USB_ReadInterrupts>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 80e7 	beq.w	8002510 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f007 fdc2 	bl	8009ed0 <USB_ReadInterrupts>
 800234c:	4603      	mov	r3, r0
 800234e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002352:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002356:	d104      	bne.n	8002362 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002360:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f007 fdb2 	bl	8009ed0 <USB_ReadInterrupts>
 800236c:	4603      	mov	r3, r0
 800236e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002372:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002376:	d104      	bne.n	8002382 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002380:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f007 fda2 	bl	8009ed0 <USB_ReadInterrupts>
 800238c:	4603      	mov	r3, r0
 800238e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002392:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002396:	d104      	bne.n	80023a2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f007 fd92 	bl	8009ed0 <USB_ReadInterrupts>
 80023ac:	4603      	mov	r3, r0
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d103      	bne.n	80023be <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2202      	movs	r2, #2
 80023bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f007 fd84 	bl	8009ed0 <USB_ReadInterrupts>
 80023c8:	4603      	mov	r3, r0
 80023ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023d2:	d117      	bne.n	8002404 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80023e2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80023e6:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f013 f96d 	bl	80156c8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2101      	movs	r1, #1
 80023f4:	4618      	mov	r0, r3
 80023f6:	f007 fe71 	bl	800a0dc <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002402:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f007 fd61 	bl	8009ed0 <USB_ReadInterrupts>
 800240e:	4603      	mov	r3, r0
 8002410:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002414:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002418:	d102      	bne.n	8002420 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f001 f8c8 	bl	80035b0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f007 fd53 	bl	8009ed0 <USB_ReadInterrupts>
 800242a:	4603      	mov	r3, r0
 800242c:	f003 0308 	and.w	r3, r3, #8
 8002430:	2b08      	cmp	r3, #8
 8002432:	d106      	bne.n	8002442 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f013 f92b 	bl	8015690 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2208      	movs	r2, #8
 8002440:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f007 fd42 	bl	8009ed0 <USB_ReadInterrupts>
 800244c:	4603      	mov	r3, r0
 800244e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002452:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002456:	d138      	bne.n	80024ca <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f008 f951 	bl	800a704 <USB_HC_ReadInterrupt>
 8002462:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	e025      	b.n	80024b6 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f003 030f 	and.w	r3, r3, #15
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	fa22 f303 	lsr.w	r3, r2, r3
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d018      	beq.n	80024b0 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	015a      	lsls	r2, r3, #5
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	4413      	add	r3, r2
 8002486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002494:	d106      	bne.n	80024a4 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	b2db      	uxtb	r3, r3
 800249a:	4619      	mov	r1, r3
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 f8cf 	bl	8002640 <HCD_HC_IN_IRQHandler>
 80024a2:	e005      	b.n	80024b0 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	4619      	mov	r1, r3
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 fc5f 	bl	8002d6e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	3301      	adds	r3, #1
 80024b4:	617b      	str	r3, [r7, #20]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d3d4      	bcc.n	800246a <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f007 fcfe 	bl	8009ed0 <USB_ReadInterrupts>
 80024d4:	4603      	mov	r3, r0
 80024d6:	f003 0310 	and.w	r3, r3, #16
 80024da:	2b10      	cmp	r3, #16
 80024dc:	d101      	bne.n	80024e2 <HAL_HCD_IRQHandler+0x1d6>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <HAL_HCD_IRQHandler+0x1d8>
 80024e2:	2300      	movs	r3, #0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d014      	beq.n	8002512 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	699a      	ldr	r2, [r3, #24]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 0210 	bic.w	r2, r2, #16
 80024f6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 ffad 	bl	8003458 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	699a      	ldr	r2, [r3, #24]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f042 0210 	orr.w	r2, r2, #16
 800250c:	619a      	str	r2, [r3, #24]
 800250e:	e000      	b.n	8002512 <HAL_HCD_IRQHandler+0x206>
      return;
 8002510:	bf00      	nop
    }
  }
}
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002526:	2b01      	cmp	r3, #1
 8002528:	d101      	bne.n	800252e <HAL_HCD_Start+0x16>
 800252a:	2302      	movs	r3, #2
 800252c:	e013      	b.n	8002556 <HAL_HCD_Start+0x3e>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f007 fbd6 	bl	8009cec <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2101      	movs	r1, #1
 8002546:	4618      	mov	r0, r3
 8002548:	f007 fe2c 	bl	800a1a4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800256c:	2b01      	cmp	r3, #1
 800256e:	d101      	bne.n	8002574 <HAL_HCD_Stop+0x16>
 8002570:	2302      	movs	r3, #2
 8002572:	e00d      	b.n	8002590 <HAL_HCD_Stop+0x32>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f008 fa0b 	bl	800a99c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f007 fdd3 	bl	800a150 <USB_ResetPort>
 80025aa:	4603      	mov	r3, r0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80025c0:	78fa      	ldrb	r2, [r7, #3]
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4413      	add	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	440b      	add	r3, r1
 80025ce:	335c      	adds	r3, #92	; 0x5c
 80025d0:	781b      	ldrb	r3, [r3, #0]
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
 80025e6:	460b      	mov	r3, r1
 80025e8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80025ea:	78fa      	ldrb	r2, [r7, #3]
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	440b      	add	r3, r1
 80025f8:	334c      	adds	r3, #76	; 0x4c
 80025fa:	681b      	ldr	r3, [r3, #0]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f007 fe15 	bl	800a244 <USB_GetCurrentFrame>
 800261a:	4603      	mov	r3, r0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f007 fdf0 	bl	800a216 <USB_GetHostSpeed>
 8002636:	4603      	mov	r3, r0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002656:	78fb      	ldrb	r3, [r7, #3]
 8002658:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	015a      	lsls	r2, r3, #5
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	4413      	add	r3, r2
 8002662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b04      	cmp	r3, #4
 800266e:	d119      	bne.n	80026a4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4413      	add	r3, r2
 8002678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267c:	461a      	mov	r2, r3
 800267e:	2304      	movs	r3, #4
 8002680:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	015a      	lsls	r2, r3, #5
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4413      	add	r3, r2
 800268a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	0151      	lsls	r1, r2, #5
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	440a      	add	r2, r1
 8002698:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800269c:	f043 0302 	orr.w	r3, r3, #2
 80026a0:	60d3      	str	r3, [r2, #12]
 80026a2:	e095      	b.n	80027d0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	015a      	lsls	r2, r3, #5
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 0320 	and.w	r3, r3, #32
 80026b6:	2b20      	cmp	r3, #32
 80026b8:	d109      	bne.n	80026ce <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	015a      	lsls	r2, r3, #5
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	4413      	add	r3, r2
 80026c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c6:	461a      	mov	r2, r3
 80026c8:	2320      	movs	r3, #32
 80026ca:	6093      	str	r3, [r2, #8]
 80026cc:	e080      	b.n	80027d0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	015a      	lsls	r2, r3, #5
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	4413      	add	r3, r2
 80026d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 0308 	and.w	r3, r3, #8
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	d134      	bne.n	800274e <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	015a      	lsls	r2, r3, #5
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	0151      	lsls	r1, r2, #5
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	440a      	add	r2, r1
 80026fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026fe:	f043 0302 	orr.w	r3, r3, #2
 8002702:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	4613      	mov	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	440b      	add	r3, r1
 8002712:	335d      	adds	r3, #93	; 0x5d
 8002714:	2205      	movs	r2, #5
 8002716:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	015a      	lsls	r2, r3, #5
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4413      	add	r3, r2
 8002720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002724:	461a      	mov	r2, r3
 8002726:	2310      	movs	r3, #16
 8002728:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	015a      	lsls	r2, r3, #5
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	4413      	add	r3, r2
 8002732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002736:	461a      	mov	r2, r3
 8002738:	2308      	movs	r3, #8
 800273a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	4611      	mov	r1, r2
 8002746:	4618      	mov	r0, r3
 8002748:	f007 ffed 	bl	800a726 <USB_HC_Halt>
 800274c:	e040      	b.n	80027d0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	015a      	lsls	r2, r3, #5
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	4413      	add	r3, r2
 8002756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002764:	d134      	bne.n	80027d0 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	015a      	lsls	r2, r3, #5
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4413      	add	r3, r2
 800276e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	0151      	lsls	r1, r2, #5
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	440a      	add	r2, r1
 800277c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002780:	f043 0302 	orr.w	r3, r3, #2
 8002784:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	4611      	mov	r1, r2
 8002790:	4618      	mov	r0, r3
 8002792:	f007 ffc8 	bl	800a726 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	015a      	lsls	r2, r3, #5
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4413      	add	r3, r2
 800279e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a2:	461a      	mov	r2, r3
 80027a4:	2310      	movs	r3, #16
 80027a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	4613      	mov	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	440b      	add	r3, r1
 80027b6:	335d      	adds	r3, #93	; 0x5d
 80027b8:	2208      	movs	r2, #8
 80027ba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	015a      	lsls	r2, r3, #5
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	4413      	add	r3, r2
 80027c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c8:	461a      	mov	r2, r3
 80027ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027ce:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	015a      	lsls	r2, r3, #5
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	4413      	add	r3, r2
 80027d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027e6:	d122      	bne.n	800282e <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	015a      	lsls	r2, r3, #5
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	4413      	add	r3, r2
 80027f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	0151      	lsls	r1, r2, #5
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	440a      	add	r2, r1
 80027fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002802:	f043 0302 	orr.w	r3, r3, #2
 8002806:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	4611      	mov	r1, r2
 8002812:	4618      	mov	r0, r3
 8002814:	f007 ff87 	bl	800a726 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4413      	add	r3, r2
 8002820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002824:	461a      	mov	r2, r3
 8002826:	f44f 7300 	mov.w	r3, #512	; 0x200
 800282a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800282c:	e29b      	b.n	8002d66 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	015a      	lsls	r2, r3, #5
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4413      	add	r3, r2
 8002836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b01      	cmp	r3, #1
 8002842:	f040 80c1 	bne.w	80029c8 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d01b      	beq.n	8002886 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	4613      	mov	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	440b      	add	r3, r1
 800285c:	3348      	adds	r3, #72	; 0x48
 800285e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	0159      	lsls	r1, r3, #5
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	440b      	add	r3, r1
 8002868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002872:	1ad1      	subs	r1, r2, r3
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	4613      	mov	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	4403      	add	r3, r0
 8002882:	334c      	adds	r3, #76	; 0x4c
 8002884:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	4613      	mov	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	440b      	add	r3, r1
 8002894:	335d      	adds	r3, #93	; 0x5d
 8002896:	2201      	movs	r2, #1
 8002898:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	440b      	add	r3, r1
 80028a8:	3358      	adds	r3, #88	; 0x58
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	015a      	lsls	r2, r3, #5
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	4413      	add	r3, r2
 80028b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ba:	461a      	mov	r2, r3
 80028bc:	2301      	movs	r3, #1
 80028be:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	4613      	mov	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	440b      	add	r3, r1
 80028ce:	333f      	adds	r3, #63	; 0x3f
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00a      	beq.n	80028ec <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4613      	mov	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	440b      	add	r3, r1
 80028e4:	333f      	adds	r3, #63	; 0x3f
 80028e6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d121      	bne.n	8002930 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	015a      	lsls	r2, r3, #5
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	4413      	add	r3, r2
 80028f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	0151      	lsls	r1, r2, #5
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	440a      	add	r2, r1
 8002902:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002906:	f043 0302 	orr.w	r3, r3, #2
 800290a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	4611      	mov	r1, r2
 8002916:	4618      	mov	r0, r3
 8002918:	f007 ff05 	bl	800a726 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	015a      	lsls	r2, r3, #5
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	4413      	add	r3, r2
 8002924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002928:	461a      	mov	r2, r3
 800292a:	2310      	movs	r3, #16
 800292c:	6093      	str	r3, [r2, #8]
 800292e:	e034      	b.n	800299a <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	4613      	mov	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	440b      	add	r3, r1
 800293e:	333f      	adds	r3, #63	; 0x3f
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	2b03      	cmp	r3, #3
 8002944:	d129      	bne.n	800299a <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	015a      	lsls	r2, r3, #5
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	4413      	add	r3, r2
 800294e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	0151      	lsls	r1, r2, #5
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	440a      	add	r2, r1
 800295c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002960:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002964:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4613      	mov	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	440b      	add	r3, r1
 8002974:	335c      	adds	r3, #92	; 0x5c
 8002976:	2201      	movs	r2, #1
 8002978:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	b2d8      	uxtb	r0, r3
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	4613      	mov	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	440b      	add	r3, r1
 800298c:	335c      	adds	r3, #92	; 0x5c
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	461a      	mov	r2, r3
 8002992:	4601      	mov	r1, r0
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f012 fea5 	bl	80156e4 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	4613      	mov	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	00db      	lsls	r3, r3, #3
 80029a6:	440b      	add	r3, r1
 80029a8:	3350      	adds	r3, #80	; 0x50
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	f083 0301 	eor.w	r3, r3, #1
 80029b0:	b2d8      	uxtb	r0, r3
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	4613      	mov	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	440b      	add	r3, r1
 80029c0:	3350      	adds	r3, #80	; 0x50
 80029c2:	4602      	mov	r2, r0
 80029c4:	701a      	strb	r2, [r3, #0]
}
 80029c6:	e1ce      	b.n	8002d66 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	015a      	lsls	r2, r3, #5
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4413      	add	r3, r2
 80029d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b02      	cmp	r3, #2
 80029dc:	f040 80f1 	bne.w	8002bc2 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	015a      	lsls	r2, r3, #5
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	4413      	add	r3, r2
 80029e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	0151      	lsls	r1, r2, #5
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	440a      	add	r2, r1
 80029f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029fa:	f023 0302 	bic.w	r3, r3, #2
 80029fe:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4613      	mov	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	440b      	add	r3, r1
 8002a0e:	335d      	adds	r3, #93	; 0x5d
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d10a      	bne.n	8002a2c <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	440b      	add	r3, r1
 8002a24:	335c      	adds	r3, #92	; 0x5c
 8002a26:	2201      	movs	r2, #1
 8002a28:	701a      	strb	r2, [r3, #0]
 8002a2a:	e0b0      	b.n	8002b8e <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	440b      	add	r3, r1
 8002a3a:	335d      	adds	r3, #93	; 0x5d
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b05      	cmp	r3, #5
 8002a40:	d10a      	bne.n	8002a58 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	440b      	add	r3, r1
 8002a50:	335c      	adds	r3, #92	; 0x5c
 8002a52:	2205      	movs	r2, #5
 8002a54:	701a      	strb	r2, [r3, #0]
 8002a56:	e09a      	b.n	8002b8e <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	440b      	add	r3, r1
 8002a66:	335d      	adds	r3, #93	; 0x5d
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	2b06      	cmp	r3, #6
 8002a6c:	d00a      	beq.n	8002a84 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	4613      	mov	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	440b      	add	r3, r1
 8002a7c:	335d      	adds	r3, #93	; 0x5d
 8002a7e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a80:	2b08      	cmp	r3, #8
 8002a82:	d156      	bne.n	8002b32 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	440b      	add	r3, r1
 8002a92:	3358      	adds	r3, #88	; 0x58
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	1c59      	adds	r1, r3, #1
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	4403      	add	r3, r0
 8002aa6:	3358      	adds	r3, #88	; 0x58
 8002aa8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	440b      	add	r3, r1
 8002ab8:	3358      	adds	r3, #88	; 0x58
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b03      	cmp	r3, #3
 8002abe:	d914      	bls.n	8002aea <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	440b      	add	r3, r1
 8002ace:	3358      	adds	r3, #88	; 0x58
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	440b      	add	r3, r1
 8002ae2:	335c      	adds	r3, #92	; 0x5c
 8002ae4:	2204      	movs	r2, #4
 8002ae6:	701a      	strb	r2, [r3, #0]
 8002ae8:	e009      	b.n	8002afe <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	4613      	mov	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	440b      	add	r3, r1
 8002af8:	335c      	adds	r3, #92	; 0x5c
 8002afa:	2202      	movs	r2, #2
 8002afc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	015a      	lsls	r2, r3, #5
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	4413      	add	r3, r2
 8002b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b14:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b1c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	015a      	lsls	r2, r3, #5
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	4413      	add	r3, r2
 8002b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	6013      	str	r3, [r2, #0]
 8002b30:	e02d      	b.n	8002b8e <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	4613      	mov	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	440b      	add	r3, r1
 8002b40:	335d      	adds	r3, #93	; 0x5d
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b03      	cmp	r3, #3
 8002b46:	d122      	bne.n	8002b8e <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b48:	6879      	ldr	r1, [r7, #4]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	440b      	add	r3, r1
 8002b56:	335c      	adds	r3, #92	; 0x5c
 8002b58:	2202      	movs	r2, #2
 8002b5a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	015a      	lsls	r2, r3, #5
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	4413      	add	r3, r2
 8002b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b72:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b7a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b88:	461a      	mov	r2, r3
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	015a      	lsls	r2, r3, #5
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	4413      	add	r3, r2
 8002b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	b2d8      	uxtb	r0, r3
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	440b      	add	r3, r1
 8002bb2:	335c      	adds	r3, #92	; 0x5c
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	4601      	mov	r1, r0
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f012 fd92 	bl	80156e4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002bc0:	e0d1      	b.n	8002d66 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	015a      	lsls	r2, r3, #5
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	4413      	add	r3, r2
 8002bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd4:	2b80      	cmp	r3, #128	; 0x80
 8002bd6:	d13e      	bne.n	8002c56 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	015a      	lsls	r2, r3, #5
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	4413      	add	r3, r2
 8002be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	0151      	lsls	r1, r2, #5
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	440a      	add	r2, r1
 8002bee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bf2:	f043 0302 	orr.w	r3, r3, #2
 8002bf6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4413      	add	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	440b      	add	r3, r1
 8002c06:	3358      	adds	r3, #88	; 0x58
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	1c59      	adds	r1, r3, #1
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	4613      	mov	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	4403      	add	r3, r0
 8002c1a:	3358      	adds	r3, #88	; 0x58
 8002c1c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	4613      	mov	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	440b      	add	r3, r1
 8002c2c:	335d      	adds	r3, #93	; 0x5d
 8002c2e:	2206      	movs	r2, #6
 8002c30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f007 fd72 	bl	800a726 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	015a      	lsls	r2, r3, #5
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	4413      	add	r3, r2
 8002c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c4e:	461a      	mov	r2, r3
 8002c50:	2380      	movs	r3, #128	; 0x80
 8002c52:	6093      	str	r3, [r2, #8]
}
 8002c54:	e087      	b.n	8002d66 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	015a      	lsls	r2, r3, #5
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 0310 	and.w	r3, r3, #16
 8002c68:	2b10      	cmp	r3, #16
 8002c6a:	d17c      	bne.n	8002d66 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	440b      	add	r3, r1
 8002c7a:	333f      	adds	r3, #63	; 0x3f
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	d122      	bne.n	8002cc8 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	440b      	add	r3, r1
 8002c90:	3358      	adds	r3, #88	; 0x58
 8002c92:	2200      	movs	r2, #0
 8002c94:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	015a      	lsls	r2, r3, #5
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	0151      	lsls	r1, r2, #5
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	440a      	add	r2, r1
 8002cac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cb0:	f043 0302 	orr.w	r3, r3, #2
 8002cb4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	b2d2      	uxtb	r2, r2
 8002cbe:	4611      	mov	r1, r2
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f007 fd30 	bl	800a726 <USB_HC_Halt>
 8002cc6:	e045      	b.n	8002d54 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	440b      	add	r3, r1
 8002cd6:	333f      	adds	r3, #63	; 0x3f
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00a      	beq.n	8002cf4 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	68fa      	ldr	r2, [r7, #12]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4413      	add	r3, r2
 8002ce8:	00db      	lsls	r3, r3, #3
 8002cea:	440b      	add	r3, r1
 8002cec:	333f      	adds	r3, #63	; 0x3f
 8002cee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d12f      	bne.n	8002d54 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002cf4:	6879      	ldr	r1, [r7, #4]
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	440b      	add	r3, r1
 8002d02:	3358      	adds	r3, #88	; 0x58
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d121      	bne.n	8002d54 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	4613      	mov	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	440b      	add	r3, r1
 8002d1e:	335d      	adds	r3, #93	; 0x5d
 8002d20:	2203      	movs	r2, #3
 8002d22:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	015a      	lsls	r2, r3, #5
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	68fa      	ldr	r2, [r7, #12]
 8002d34:	0151      	lsls	r1, r2, #5
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	440a      	add	r2, r1
 8002d3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d3e:	f043 0302 	orr.w	r3, r3, #2
 8002d42:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	4611      	mov	r1, r2
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f007 fce9 	bl	800a726 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	015a      	lsls	r2, r3, #5
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d60:	461a      	mov	r2, r3
 8002d62:	2310      	movs	r3, #16
 8002d64:	6093      	str	r3, [r2, #8]
}
 8002d66:	bf00      	nop
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b086      	sub	sp, #24
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
 8002d76:	460b      	mov	r3, r1
 8002d78:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002d84:	78fb      	ldrb	r3, [r7, #3]
 8002d86:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	015a      	lsls	r2, r3, #5
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	4413      	add	r3, r2
 8002d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 0304 	and.w	r3, r3, #4
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d119      	bne.n	8002dd2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	015a      	lsls	r2, r3, #5
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4413      	add	r3, r2
 8002da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002daa:	461a      	mov	r2, r3
 8002dac:	2304      	movs	r3, #4
 8002dae:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	015a      	lsls	r2, r3, #5
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4413      	add	r3, r2
 8002db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	0151      	lsls	r1, r2, #5
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	440a      	add	r2, r1
 8002dc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dca:	f043 0302 	orr.w	r3, r3, #2
 8002dce:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002dd0:	e33e      	b.n	8003450 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	015a      	lsls	r2, r3, #5
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	4413      	add	r3, r2
 8002dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f003 0320 	and.w	r3, r3, #32
 8002de4:	2b20      	cmp	r3, #32
 8002de6:	d141      	bne.n	8002e6c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	015a      	lsls	r2, r3, #5
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	4413      	add	r3, r2
 8002df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df4:	461a      	mov	r2, r3
 8002df6:	2320      	movs	r3, #32
 8002df8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	440b      	add	r3, r1
 8002e08:	333d      	adds	r3, #61	; 0x3d
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	f040 831f 	bne.w	8003450 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	4613      	mov	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	440b      	add	r3, r1
 8002e20:	333d      	adds	r3, #61	; 0x3d
 8002e22:	2200      	movs	r2, #0
 8002e24:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	440b      	add	r3, r1
 8002e34:	335c      	adds	r3, #92	; 0x5c
 8002e36:	2202      	movs	r2, #2
 8002e38:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	015a      	lsls	r2, r3, #5
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4413      	add	r3, r2
 8002e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	0151      	lsls	r1, r2, #5
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	440a      	add	r2, r1
 8002e50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e54:	f043 0302 	orr.w	r3, r3, #2
 8002e58:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	4611      	mov	r1, r2
 8002e64:	4618      	mov	r0, r3
 8002e66:	f007 fc5e 	bl	800a726 <USB_HC_Halt>
}
 8002e6a:	e2f1      	b.n	8003450 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	015a      	lsls	r2, r3, #5
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	4413      	add	r3, r2
 8002e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7e:	2b40      	cmp	r3, #64	; 0x40
 8002e80:	d13f      	bne.n	8002f02 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	4613      	mov	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4413      	add	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	440b      	add	r3, r1
 8002e90:	335d      	adds	r3, #93	; 0x5d
 8002e92:	2204      	movs	r2, #4
 8002e94:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	440b      	add	r3, r1
 8002ea4:	333d      	adds	r3, #61	; 0x3d
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	440b      	add	r3, r1
 8002eb8:	3358      	adds	r3, #88	; 0x58
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	015a      	lsls	r2, r3, #5
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	0151      	lsls	r1, r2, #5
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	440a      	add	r2, r1
 8002ed4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ed8:	f043 0302 	orr.w	r3, r3, #2
 8002edc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f007 fc1c 	bl	800a726 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	015a      	lsls	r2, r3, #5
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002efa:	461a      	mov	r2, r3
 8002efc:	2340      	movs	r3, #64	; 0x40
 8002efe:	6093      	str	r3, [r2, #8]
}
 8002f00:	e2a6      	b.n	8003450 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	015a      	lsls	r2, r3, #5
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f18:	d122      	bne.n	8002f60 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	015a      	lsls	r2, r3, #5
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	4413      	add	r3, r2
 8002f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	0151      	lsls	r1, r2, #5
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	440a      	add	r2, r1
 8002f30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f34:	f043 0302 	orr.w	r3, r3, #2
 8002f38:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	4611      	mov	r1, r2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f007 fbee 	bl	800a726 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	015a      	lsls	r2, r3, #5
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	4413      	add	r3, r2
 8002f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f56:	461a      	mov	r2, r3
 8002f58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f5c:	6093      	str	r3, [r2, #8]
}
 8002f5e:	e277      	b.n	8003450 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	015a      	lsls	r2, r3, #5
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	4413      	add	r3, r2
 8002f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d135      	bne.n	8002fe2 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	440b      	add	r3, r1
 8002f84:	3358      	adds	r3, #88	; 0x58
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	015a      	lsls	r2, r3, #5
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	4413      	add	r3, r2
 8002f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	0151      	lsls	r1, r2, #5
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	440a      	add	r2, r1
 8002fa0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fa4:	f043 0302 	orr.w	r3, r3, #2
 8002fa8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	4611      	mov	r1, r2
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f007 fbb6 	bl	800a726 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	015a      	lsls	r2, r3, #5
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	2301      	movs	r3, #1
 8002fca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4413      	add	r3, r2
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	440b      	add	r3, r1
 8002fda:	335d      	adds	r3, #93	; 0x5d
 8002fdc:	2201      	movs	r2, #1
 8002fde:	701a      	strb	r2, [r3, #0]
}
 8002fe0:	e236      	b.n	8003450 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	015a      	lsls	r2, r3, #5
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	4413      	add	r3, r2
 8002fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 0308 	and.w	r3, r3, #8
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	d12b      	bne.n	8003050 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	015a      	lsls	r2, r3, #5
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	4413      	add	r3, r2
 8003000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003004:	461a      	mov	r2, r3
 8003006:	2308      	movs	r3, #8
 8003008:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	015a      	lsls	r2, r3, #5
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	4413      	add	r3, r2
 8003012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	0151      	lsls	r1, r2, #5
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	440a      	add	r2, r1
 8003020:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003024:	f043 0302 	orr.w	r3, r3, #2
 8003028:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	b2d2      	uxtb	r2, r2
 8003032:	4611      	mov	r1, r2
 8003034:	4618      	mov	r0, r3
 8003036:	f007 fb76 	bl	800a726 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	4613      	mov	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	440b      	add	r3, r1
 8003048:	335d      	adds	r3, #93	; 0x5d
 800304a:	2205      	movs	r2, #5
 800304c:	701a      	strb	r2, [r3, #0]
}
 800304e:	e1ff      	b.n	8003450 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	015a      	lsls	r2, r3, #5
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	4413      	add	r3, r2
 8003058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 0310 	and.w	r3, r3, #16
 8003062:	2b10      	cmp	r3, #16
 8003064:	d155      	bne.n	8003112 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	4613      	mov	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	440b      	add	r3, r1
 8003074:	3358      	adds	r3, #88	; 0x58
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	4613      	mov	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4413      	add	r3, r2
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	440b      	add	r3, r1
 8003088:	335d      	adds	r3, #93	; 0x5d
 800308a:	2203      	movs	r2, #3
 800308c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	4613      	mov	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	440b      	add	r3, r1
 800309c:	333d      	adds	r3, #61	; 0x3d
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d114      	bne.n	80030ce <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	4613      	mov	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	440b      	add	r3, r1
 80030b2:	333c      	adds	r3, #60	; 0x3c
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d109      	bne.n	80030ce <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	4613      	mov	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	440b      	add	r3, r1
 80030c8:	333d      	adds	r3, #61	; 0x3d
 80030ca:	2201      	movs	r2, #1
 80030cc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	015a      	lsls	r2, r3, #5
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	0151      	lsls	r1, r2, #5
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	440a      	add	r2, r1
 80030e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030e8:	f043 0302 	orr.w	r3, r3, #2
 80030ec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	b2d2      	uxtb	r2, r2
 80030f6:	4611      	mov	r1, r2
 80030f8:	4618      	mov	r0, r3
 80030fa:	f007 fb14 	bl	800a726 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	015a      	lsls	r2, r3, #5
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	4413      	add	r3, r2
 8003106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310a:	461a      	mov	r2, r3
 800310c:	2310      	movs	r3, #16
 800310e:	6093      	str	r3, [r2, #8]
}
 8003110:	e19e      	b.n	8003450 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	015a      	lsls	r2, r3, #5
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	4413      	add	r3, r2
 800311a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003124:	2b80      	cmp	r3, #128	; 0x80
 8003126:	d12b      	bne.n	8003180 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	015a      	lsls	r2, r3, #5
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	4413      	add	r3, r2
 8003130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	0151      	lsls	r1, r2, #5
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	440a      	add	r2, r1
 800313e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003142:	f043 0302 	orr.w	r3, r3, #2
 8003146:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	4611      	mov	r1, r2
 8003152:	4618      	mov	r0, r3
 8003154:	f007 fae7 	bl	800a726 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	4613      	mov	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	440b      	add	r3, r1
 8003166:	335d      	adds	r3, #93	; 0x5d
 8003168:	2206      	movs	r2, #6
 800316a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	015a      	lsls	r2, r3, #5
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	4413      	add	r3, r2
 8003174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003178:	461a      	mov	r2, r3
 800317a:	2380      	movs	r3, #128	; 0x80
 800317c:	6093      	str	r3, [r2, #8]
}
 800317e:	e167      	b.n	8003450 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	015a      	lsls	r2, r3, #5
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	4413      	add	r3, r2
 8003188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003196:	d135      	bne.n	8003204 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	015a      	lsls	r2, r3, #5
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	4413      	add	r3, r2
 80031a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	0151      	lsls	r1, r2, #5
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	440a      	add	r2, r1
 80031ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031b2:	f043 0302 	orr.w	r3, r3, #2
 80031b6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	4611      	mov	r1, r2
 80031c2:	4618      	mov	r0, r3
 80031c4:	f007 faaf 	bl	800a726 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	015a      	lsls	r2, r3, #5
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	4413      	add	r3, r2
 80031d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d4:	461a      	mov	r2, r3
 80031d6:	2310      	movs	r3, #16
 80031d8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	015a      	lsls	r2, r3, #5
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	4413      	add	r3, r2
 80031e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e6:	461a      	mov	r2, r3
 80031e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	4613      	mov	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	440b      	add	r3, r1
 80031fc:	335d      	adds	r3, #93	; 0x5d
 80031fe:	2208      	movs	r2, #8
 8003200:	701a      	strb	r2, [r3, #0]
}
 8003202:	e125      	b.n	8003450 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	015a      	lsls	r2, r3, #5
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	4413      	add	r3, r2
 800320c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b02      	cmp	r3, #2
 8003218:	f040 811a 	bne.w	8003450 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	015a      	lsls	r2, r3, #5
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	4413      	add	r3, r2
 8003224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	0151      	lsls	r1, r2, #5
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	440a      	add	r2, r1
 8003232:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003236:	f023 0302 	bic.w	r3, r3, #2
 800323a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	440b      	add	r3, r1
 800324a:	335d      	adds	r3, #93	; 0x5d
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d137      	bne.n	80032c2 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	4613      	mov	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	440b      	add	r3, r1
 8003260:	335c      	adds	r3, #92	; 0x5c
 8003262:	2201      	movs	r2, #1
 8003264:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4613      	mov	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	440b      	add	r3, r1
 8003274:	333f      	adds	r3, #63	; 0x3f
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b02      	cmp	r3, #2
 800327a:	d00b      	beq.n	8003294 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	4613      	mov	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	440b      	add	r3, r1
 800328a:	333f      	adds	r3, #63	; 0x3f
 800328c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800328e:	2b03      	cmp	r3, #3
 8003290:	f040 80c5 	bne.w	800341e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	4613      	mov	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	440b      	add	r3, r1
 80032a2:	3351      	adds	r3, #81	; 0x51
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	f083 0301 	eor.w	r3, r3, #1
 80032aa:	b2d8      	uxtb	r0, r3
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	4613      	mov	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4413      	add	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	440b      	add	r3, r1
 80032ba:	3351      	adds	r3, #81	; 0x51
 80032bc:	4602      	mov	r2, r0
 80032be:	701a      	strb	r2, [r3, #0]
 80032c0:	e0ad      	b.n	800341e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	4613      	mov	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	440b      	add	r3, r1
 80032d0:	335d      	adds	r3, #93	; 0x5d
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b03      	cmp	r3, #3
 80032d6:	d10a      	bne.n	80032ee <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	4613      	mov	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	440b      	add	r3, r1
 80032e6:	335c      	adds	r3, #92	; 0x5c
 80032e8:	2202      	movs	r2, #2
 80032ea:	701a      	strb	r2, [r3, #0]
 80032ec:	e097      	b.n	800341e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	4613      	mov	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	440b      	add	r3, r1
 80032fc:	335d      	adds	r3, #93	; 0x5d
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	2b04      	cmp	r3, #4
 8003302:	d10a      	bne.n	800331a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	440b      	add	r3, r1
 8003312:	335c      	adds	r3, #92	; 0x5c
 8003314:	2202      	movs	r2, #2
 8003316:	701a      	strb	r2, [r3, #0]
 8003318:	e081      	b.n	800341e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	4613      	mov	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4413      	add	r3, r2
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	440b      	add	r3, r1
 8003328:	335d      	adds	r3, #93	; 0x5d
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b05      	cmp	r3, #5
 800332e:	d10a      	bne.n	8003346 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	4613      	mov	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	440b      	add	r3, r1
 800333e:	335c      	adds	r3, #92	; 0x5c
 8003340:	2205      	movs	r2, #5
 8003342:	701a      	strb	r2, [r3, #0]
 8003344:	e06b      	b.n	800341e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	4613      	mov	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	440b      	add	r3, r1
 8003354:	335d      	adds	r3, #93	; 0x5d
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b06      	cmp	r3, #6
 800335a:	d00a      	beq.n	8003372 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	4613      	mov	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	440b      	add	r3, r1
 800336a:	335d      	adds	r3, #93	; 0x5d
 800336c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800336e:	2b08      	cmp	r3, #8
 8003370:	d155      	bne.n	800341e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	4613      	mov	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	440b      	add	r3, r1
 8003380:	3358      	adds	r3, #88	; 0x58
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	1c59      	adds	r1, r3, #1
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	4613      	mov	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4413      	add	r3, r2
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	4403      	add	r3, r0
 8003394:	3358      	adds	r3, #88	; 0x58
 8003396:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	4613      	mov	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	440b      	add	r3, r1
 80033a6:	3358      	adds	r3, #88	; 0x58
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b03      	cmp	r3, #3
 80033ac:	d914      	bls.n	80033d8 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	4613      	mov	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	440b      	add	r3, r1
 80033bc:	3358      	adds	r3, #88	; 0x58
 80033be:	2200      	movs	r2, #0
 80033c0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	4613      	mov	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	440b      	add	r3, r1
 80033d0:	335c      	adds	r3, #92	; 0x5c
 80033d2:	2204      	movs	r2, #4
 80033d4:	701a      	strb	r2, [r3, #0]
 80033d6:	e009      	b.n	80033ec <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	4613      	mov	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	440b      	add	r3, r1
 80033e6:	335c      	adds	r3, #92	; 0x5c
 80033e8:	2202      	movs	r2, #2
 80033ea:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	015a      	lsls	r2, r3, #5
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	4413      	add	r3, r2
 80033f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003402:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800340a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	015a      	lsls	r2, r3, #5
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	4413      	add	r3, r2
 8003414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003418:	461a      	mov	r2, r3
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	015a      	lsls	r2, r3, #5
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	4413      	add	r3, r2
 8003426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800342a:	461a      	mov	r2, r3
 800342c:	2302      	movs	r3, #2
 800342e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	b2d8      	uxtb	r0, r3
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	4613      	mov	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	440b      	add	r3, r1
 8003442:	335c      	adds	r3, #92	; 0x5c
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	461a      	mov	r2, r3
 8003448:	4601      	mov	r1, r0
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f012 f94a 	bl	80156e4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003450:	bf00      	nop
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b08a      	sub	sp, #40	; 0x28
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	f003 030f 	and.w	r3, r3, #15
 8003478:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	0c5b      	lsrs	r3, r3, #17
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	091b      	lsrs	r3, r3, #4
 8003488:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800348c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2b02      	cmp	r3, #2
 8003492:	d003      	beq.n	800349c <HCD_RXQLVL_IRQHandler+0x44>
 8003494:	2b05      	cmp	r3, #5
 8003496:	f000 8082 	beq.w	800359e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800349a:	e083      	b.n	80035a4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d07f      	beq.n	80035a2 <HCD_RXQLVL_IRQHandler+0x14a>
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	4613      	mov	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	440b      	add	r3, r1
 80034b0:	3344      	adds	r3, #68	; 0x44
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d074      	beq.n	80035a2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6818      	ldr	r0, [r3, #0]
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	4613      	mov	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4413      	add	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	440b      	add	r3, r1
 80034ca:	3344      	adds	r3, #68	; 0x44
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	b292      	uxth	r2, r2
 80034d2:	4619      	mov	r1, r3
 80034d4:	f006 fcd3 	bl	8009e7e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	4613      	mov	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4413      	add	r3, r2
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	440b      	add	r3, r1
 80034e6:	3344      	adds	r3, #68	; 0x44
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	18d1      	adds	r1, r2, r3
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4613      	mov	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	4403      	add	r3, r0
 80034fc:	3344      	adds	r3, #68	; 0x44
 80034fe:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	4613      	mov	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	440b      	add	r3, r1
 800350e:	334c      	adds	r3, #76	; 0x4c
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	18d1      	adds	r1, r2, r3
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	4613      	mov	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	4403      	add	r3, r0
 8003524:	334c      	adds	r3, #76	; 0x4c
 8003526:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	015a      	lsls	r2, r3, #5
 800352c:	6a3b      	ldr	r3, [r7, #32]
 800352e:	4413      	add	r3, r2
 8003530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003534:	691a      	ldr	r2, [r3, #16]
 8003536:	4b1d      	ldr	r3, [pc, #116]	; (80035ac <HCD_RXQLVL_IRQHandler+0x154>)
 8003538:	4013      	ands	r3, r2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d031      	beq.n	80035a2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	015a      	lsls	r2, r3, #5
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	4413      	add	r3, r2
 8003546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003554:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800355c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	015a      	lsls	r2, r3, #5
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	4413      	add	r3, r2
 8003566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356a:	461a      	mov	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4613      	mov	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	440b      	add	r3, r1
 800357e:	3350      	adds	r3, #80	; 0x50
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	f083 0301 	eor.w	r3, r3, #1
 8003586:	b2d8      	uxtb	r0, r3
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	4613      	mov	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	440b      	add	r3, r1
 8003596:	3350      	adds	r3, #80	; 0x50
 8003598:	4602      	mov	r2, r0
 800359a:	701a      	strb	r2, [r3, #0]
      break;
 800359c:	e001      	b.n	80035a2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800359e:	bf00      	nop
 80035a0:	e000      	b.n	80035a4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80035a2:	bf00      	nop
  }
}
 80035a4:	bf00      	nop
 80035a6:	3728      	adds	r7, #40	; 0x28
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	1ff80000 	.word	0x1ff80000

080035b0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80035dc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d113      	bne.n	8003610 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d10a      	bne.n	8003608 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	699a      	ldr	r2, [r3, #24]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003600:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f012 f852 	bl	80156ac <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	f043 0302 	orr.w	r3, r3, #2
 800360e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b08      	cmp	r3, #8
 8003618:	d147      	bne.n	80036aa <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	f043 0308 	orr.w	r3, r3, #8
 8003620:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b04      	cmp	r3, #4
 800362a:	d129      	bne.n	8003680 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	2b02      	cmp	r3, #2
 8003632:	d113      	bne.n	800365c <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800363a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800363e:	d106      	bne.n	800364e <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2102      	movs	r1, #2
 8003646:	4618      	mov	r0, r3
 8003648:	f006 fd48 	bl	800a0dc <USB_InitFSLSPClkSel>
 800364c:	e011      	b.n	8003672 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2101      	movs	r1, #1
 8003654:	4618      	mov	r0, r3
 8003656:	f006 fd41 	bl	800a0dc <USB_InitFSLSPClkSel>
 800365a:	e00a      	b.n	8003672 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	2b03      	cmp	r3, #3
 8003662:	d106      	bne.n	8003672 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800366a:	461a      	mov	r2, r3
 800366c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003670:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f012 f848 	bl	8015708 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f012 f817 	bl	80156ac <HAL_HCD_Connect_Callback>
 800367e:	e014      	b.n	80036aa <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f012 f84f 	bl	8015724 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003694:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003698:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	699a      	ldr	r2, [r3, #24]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80036a8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f003 0320 	and.w	r3, r3, #32
 80036b0:	2b20      	cmp	r3, #32
 80036b2:	d103      	bne.n	80036bc <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f043 0320 	orr.w	r3, r3, #32
 80036ba:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036c2:	461a      	mov	r2, r3
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	6013      	str	r3, [r2, #0]
}
 80036c8:	bf00      	nop
 80036ca:	3718      	adds	r7, #24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e07f      	b.n	80037e2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d106      	bne.n	80036fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f010 fff4 	bl	80146e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2224      	movs	r2, #36	; 0x24
 8003700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0201 	bic.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003720:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003730:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d107      	bne.n	800374a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003746:	609a      	str	r2, [r3, #8]
 8003748:	e006      	b.n	8003758 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689a      	ldr	r2, [r3, #8]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003756:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	2b02      	cmp	r3, #2
 800375e:	d104      	bne.n	800376a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003768:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6859      	ldr	r1, [r3, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	4b1d      	ldr	r3, [pc, #116]	; (80037ec <HAL_I2C_Init+0x11c>)
 8003776:	430b      	orrs	r3, r1
 8003778:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003788:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691a      	ldr	r2, [r3, #16]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	ea42 0103 	orr.w	r1, r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	021a      	lsls	r2, r3, #8
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	69d9      	ldr	r1, [r3, #28]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a1a      	ldr	r2, [r3, #32]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0201 	orr.w	r2, r2, #1
 80037c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2220      	movs	r2, #32
 80037ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	02008000 	.word	0x02008000

080037f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b20      	cmp	r3, #32
 8003804:	d138      	bne.n	8003878 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800380c:	2b01      	cmp	r3, #1
 800380e:	d101      	bne.n	8003814 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003810:	2302      	movs	r3, #2
 8003812:	e032      	b.n	800387a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2224      	movs	r2, #36	; 0x24
 8003820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0201 	bic.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003842:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6819      	ldr	r1, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0201 	orr.w	r2, r2, #1
 8003862:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2220      	movs	r2, #32
 8003868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003874:	2300      	movs	r3, #0
 8003876:	e000      	b.n	800387a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003878:	2302      	movs	r3, #2
  }
}
 800387a:	4618      	mov	r0, r3
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003886:	b480      	push	{r7}
 8003888:	b085      	sub	sp, #20
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
 800388e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b20      	cmp	r3, #32
 800389a:	d139      	bne.n	8003910 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d101      	bne.n	80038aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038a6:	2302      	movs	r3, #2
 80038a8:	e033      	b.n	8003912 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2224      	movs	r2, #36	; 0x24
 80038b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0201 	bic.w	r2, r2, #1
 80038c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	021b      	lsls	r3, r3, #8
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0201 	orr.w	r2, r2, #1
 80038fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2220      	movs	r2, #32
 8003900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800390c:	2300      	movs	r3, #0
 800390e:	e000      	b.n	8003912 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003910:	2302      	movs	r3, #2
  }
}
 8003912:	4618      	mov	r0, r3
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
	...

08003920 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e0bf      	b.n	8003ab2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d106      	bne.n	800394c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f010 ff44 	bl	80147d4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2202      	movs	r2, #2
 8003950:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	699a      	ldr	r2, [r3, #24]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003962:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6999      	ldr	r1, [r3, #24]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003978:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6899      	ldr	r1, [r3, #8]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	4b4a      	ldr	r3, [pc, #296]	; (8003abc <HAL_LTDC_Init+0x19c>)
 8003994:	400b      	ands	r3, r1
 8003996:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	041b      	lsls	r3, r3, #16
 800399e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6899      	ldr	r1, [r3, #8]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699a      	ldr	r2, [r3, #24]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	431a      	orrs	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68d9      	ldr	r1, [r3, #12]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	4b3e      	ldr	r3, [pc, #248]	; (8003abc <HAL_LTDC_Init+0x19c>)
 80039c2:	400b      	ands	r3, r1
 80039c4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	041b      	lsls	r3, r3, #16
 80039cc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68d9      	ldr	r1, [r3, #12]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a1a      	ldr	r2, [r3, #32]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6919      	ldr	r1, [r3, #16]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	4b33      	ldr	r3, [pc, #204]	; (8003abc <HAL_LTDC_Init+0x19c>)
 80039f0:	400b      	ands	r3, r1
 80039f2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	041b      	lsls	r3, r3, #16
 80039fa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6919      	ldr	r1, [r3, #16]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	6959      	ldr	r1, [r3, #20]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	4b27      	ldr	r3, [pc, #156]	; (8003abc <HAL_LTDC_Init+0x19c>)
 8003a1e:	400b      	ands	r3, r1
 8003a20:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a26:	041b      	lsls	r3, r3, #16
 8003a28:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6959      	ldr	r1, [r3, #20]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	431a      	orrs	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a46:	021b      	lsls	r3, r3, #8
 8003a48:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003a50:	041b      	lsls	r3, r3, #16
 8003a52:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003a62:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0206 	orr.w	r2, r2, #6
 8003a8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699a      	ldr	r2, [r3, #24]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0201 	orr.w	r2, r2, #1
 8003a9e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	f000f800 	.word	0xf000f800

08003ac0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ace:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f003 0304 	and.w	r3, r3, #4
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d023      	beq.n	8003b2a <HAL_LTDC_IRQHandler+0x6a>
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d01e      	beq.n	8003b2a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0204 	bic.w	r2, r2, #4
 8003afa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2204      	movs	r2, #4
 8003b02:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b0a:	f043 0201 	orr.w	r2, r3, #1
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2204      	movs	r2, #4
 8003b18:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 f86f 	bl	8003c08 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d023      	beq.n	8003b7c <HAL_LTDC_IRQHandler+0xbc>
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d01e      	beq.n	8003b7c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 0202 	bic.w	r2, r2, #2
 8003b4c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2202      	movs	r2, #2
 8003b54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b5c:	f043 0202 	orr.w	r2, r3, #2
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2204      	movs	r2, #4
 8003b6a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f846 	bl	8003c08 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d01b      	beq.n	8003bbe <HAL_LTDC_IRQHandler+0xfe>
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d016      	beq.n	8003bbe <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0201 	bic.w	r2, r2, #1
 8003b9e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f82f 	bl	8003c1c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d01b      	beq.n	8003c00 <HAL_LTDC_IRQHandler+0x140>
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d016      	beq.n	8003c00 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0208 	bic.w	r2, r2, #8
 8003be0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2208      	movs	r2, #8
 8003be8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f818 	bl	8003c30 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003c00:	bf00      	nop
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003c44:	b5b0      	push	{r4, r5, r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d101      	bne.n	8003c5e <HAL_LTDC_ConfigLayer+0x1a>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e02c      	b.n	8003cb8 <HAL_LTDC_ConfigLayer+0x74>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2202      	movs	r2, #2
 8003c6a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2134      	movs	r1, #52	; 0x34
 8003c74:	fb01 f303 	mul.w	r3, r1, r3
 8003c78:	4413      	add	r3, r2
 8003c7a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	4614      	mov	r4, r2
 8003c82:	461d      	mov	r5, r3
 8003c84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c90:	682b      	ldr	r3, [r5, #0]
 8003c92:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	68b9      	ldr	r1, [r7, #8]
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 f811 	bl	8003cc0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bdb0      	pop	{r4, r5, r7, pc}

08003cc0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b089      	sub	sp, #36	; 0x24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	685a      	ldr	r2, [r3, #4]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	0c1b      	lsrs	r3, r3, #16
 8003cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cdc:	4413      	add	r3, r2
 8003cde:	041b      	lsls	r3, r3, #16
 8003ce0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	01db      	lsls	r3, r3, #7
 8003cec:	4413      	add	r3, r2
 8003cee:	3384      	adds	r3, #132	; 0x84
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	6812      	ldr	r2, [r2, #0]
 8003cf6:	4611      	mov	r1, r2
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	01d2      	lsls	r2, r2, #7
 8003cfc:	440a      	add	r2, r1
 8003cfe:	3284      	adds	r2, #132	; 0x84
 8003d00:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003d04:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	0c1b      	lsrs	r3, r3, #16
 8003d12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d16:	4413      	add	r3, r2
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4619      	mov	r1, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	01db      	lsls	r3, r3, #7
 8003d24:	440b      	add	r3, r1
 8003d26:	3384      	adds	r3, #132	; 0x84
 8003d28:	4619      	mov	r1, r3
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	68da      	ldr	r2, [r3, #12]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d3e:	4413      	add	r3, r2
 8003d40:	041b      	lsls	r3, r3, #16
 8003d42:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	461a      	mov	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	01db      	lsls	r3, r3, #7
 8003d4e:	4413      	add	r3, r2
 8003d50:	3384      	adds	r3, #132	; 0x84
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	6812      	ldr	r2, [r2, #0]
 8003d58:	4611      	mov	r1, r2
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	01d2      	lsls	r2, r2, #7
 8003d5e:	440a      	add	r2, r1
 8003d60:	3284      	adds	r2, #132	; 0x84
 8003d62:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003d66:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d76:	4413      	add	r3, r2
 8003d78:	1c5a      	adds	r2, r3, #1
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4619      	mov	r1, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	01db      	lsls	r3, r3, #7
 8003d84:	440b      	add	r3, r1
 8003d86:	3384      	adds	r3, #132	; 0x84
 8003d88:	4619      	mov	r1, r3
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	461a      	mov	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	01db      	lsls	r3, r3, #7
 8003d9a:	4413      	add	r3, r2
 8003d9c:	3384      	adds	r3, #132	; 0x84
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	6812      	ldr	r2, [r2, #0]
 8003da4:	4611      	mov	r1, r2
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	01d2      	lsls	r2, r2, #7
 8003daa:	440a      	add	r2, r1
 8003dac:	3284      	adds	r2, #132	; 0x84
 8003dae:	f023 0307 	bic.w	r3, r3, #7
 8003db2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	461a      	mov	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	01db      	lsls	r3, r3, #7
 8003dbe:	4413      	add	r3, r2
 8003dc0:	3384      	adds	r3, #132	; 0x84
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003dd0:	021b      	lsls	r3, r3, #8
 8003dd2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003dda:	041b      	lsls	r3, r3, #16
 8003ddc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	061b      	lsls	r3, r3, #24
 8003de4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	461a      	mov	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	01db      	lsls	r3, r3, #7
 8003df0:	4413      	add	r3, r2
 8003df2:	3384      	adds	r3, #132	; 0x84
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	01db      	lsls	r3, r3, #7
 8003e00:	4413      	add	r3, r2
 8003e02:	3384      	adds	r3, #132	; 0x84
 8003e04:	461a      	mov	r2, r3
 8003e06:	2300      	movs	r3, #0
 8003e08:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e10:	461a      	mov	r2, r3
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	431a      	orrs	r2, r3
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4619      	mov	r1, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	01db      	lsls	r3, r3, #7
 8003e24:	440b      	add	r3, r1
 8003e26:	3384      	adds	r3, #132	; 0x84
 8003e28:	4619      	mov	r1, r3
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	461a      	mov	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	01db      	lsls	r3, r3, #7
 8003e3a:	4413      	add	r3, r2
 8003e3c:	3384      	adds	r3, #132	; 0x84
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	6812      	ldr	r2, [r2, #0]
 8003e44:	4611      	mov	r1, r2
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	01d2      	lsls	r2, r2, #7
 8003e4a:	440a      	add	r2, r1
 8003e4c:	3284      	adds	r2, #132	; 0x84
 8003e4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e52:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	461a      	mov	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	01db      	lsls	r3, r3, #7
 8003e5e:	4413      	add	r3, r2
 8003e60:	3384      	adds	r3, #132	; 0x84
 8003e62:	461a      	mov	r2, r3
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	01db      	lsls	r3, r3, #7
 8003e74:	4413      	add	r3, r2
 8003e76:	3384      	adds	r3, #132	; 0x84
 8003e78:	69da      	ldr	r2, [r3, #28]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4619      	mov	r1, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	01db      	lsls	r3, r3, #7
 8003e84:	440b      	add	r3, r1
 8003e86:	3384      	adds	r3, #132	; 0x84
 8003e88:	4619      	mov	r1, r3
 8003e8a:	4b58      	ldr	r3, [pc, #352]	; (8003fec <LTDC_SetConfig+0x32c>)
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	69da      	ldr	r2, [r3, #28]
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	68f9      	ldr	r1, [r7, #12]
 8003e9a:	6809      	ldr	r1, [r1, #0]
 8003e9c:	4608      	mov	r0, r1
 8003e9e:	6879      	ldr	r1, [r7, #4]
 8003ea0:	01c9      	lsls	r1, r1, #7
 8003ea2:	4401      	add	r1, r0
 8003ea4:	3184      	adds	r1, #132	; 0x84
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	01db      	lsls	r3, r3, #7
 8003eb4:	4413      	add	r3, r2
 8003eb6:	3384      	adds	r3, #132	; 0x84
 8003eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	01db      	lsls	r3, r3, #7
 8003ec4:	4413      	add	r3, r2
 8003ec6:	3384      	adds	r3, #132	; 0x84
 8003ec8:	461a      	mov	r2, r3
 8003eca:	2300      	movs	r3, #0
 8003ecc:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	01db      	lsls	r3, r3, #7
 8003ed8:	4413      	add	r3, r2
 8003eda:	3384      	adds	r3, #132	; 0x84
 8003edc:	461a      	mov	r2, r3
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d102      	bne.n	8003ef2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8003eec:	2304      	movs	r3, #4
 8003eee:	61fb      	str	r3, [r7, #28]
 8003ef0:	e01b      	b.n	8003f2a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d102      	bne.n	8003f00 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8003efa:	2303      	movs	r3, #3
 8003efc:	61fb      	str	r3, [r7, #28]
 8003efe:	e014      	b.n	8003f2a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	2b04      	cmp	r3, #4
 8003f06:	d00b      	beq.n	8003f20 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d007      	beq.n	8003f20 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003f14:	2b03      	cmp	r3, #3
 8003f16:	d003      	beq.n	8003f20 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003f1c:	2b07      	cmp	r3, #7
 8003f1e:	d102      	bne.n	8003f26 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8003f20:	2302      	movs	r3, #2
 8003f22:	61fb      	str	r3, [r7, #28]
 8003f24:	e001      	b.n	8003f2a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8003f26:	2301      	movs	r3, #1
 8003f28:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	01db      	lsls	r3, r3, #7
 8003f34:	4413      	add	r3, r2
 8003f36:	3384      	adds	r3, #132	; 0x84
 8003f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	6812      	ldr	r2, [r2, #0]
 8003f3e:	4611      	mov	r1, r2
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	01d2      	lsls	r2, r2, #7
 8003f44:	440a      	add	r2, r1
 8003f46:	3284      	adds	r2, #132	; 0x84
 8003f48:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003f4c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f52:	69fa      	ldr	r2, [r7, #28]
 8003f54:	fb02 f303 	mul.w	r3, r2, r3
 8003f58:	041a      	lsls	r2, r3, #16
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	6859      	ldr	r1, [r3, #4]
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	1acb      	subs	r3, r1, r3
 8003f64:	69f9      	ldr	r1, [r7, #28]
 8003f66:	fb01 f303 	mul.w	r3, r1, r3
 8003f6a:	3303      	adds	r3, #3
 8003f6c:	68f9      	ldr	r1, [r7, #12]
 8003f6e:	6809      	ldr	r1, [r1, #0]
 8003f70:	4608      	mov	r0, r1
 8003f72:	6879      	ldr	r1, [r7, #4]
 8003f74:	01c9      	lsls	r1, r1, #7
 8003f76:	4401      	add	r1, r0
 8003f78:	3184      	adds	r1, #132	; 0x84
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	01db      	lsls	r3, r3, #7
 8003f88:	4413      	add	r3, r2
 8003f8a:	3384      	adds	r3, #132	; 0x84
 8003f8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4619      	mov	r1, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	01db      	lsls	r3, r3, #7
 8003f98:	440b      	add	r3, r1
 8003f9a:	3384      	adds	r3, #132	; 0x84
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	4b14      	ldr	r3, [pc, #80]	; (8003ff0 <LTDC_SetConfig+0x330>)
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	01db      	lsls	r3, r3, #7
 8003fae:	4413      	add	r3, r2
 8003fb0:	3384      	adds	r3, #132	; 0x84
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	01db      	lsls	r3, r3, #7
 8003fc4:	4413      	add	r3, r2
 8003fc6:	3384      	adds	r3, #132	; 0x84
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	6812      	ldr	r2, [r2, #0]
 8003fce:	4611      	mov	r1, r2
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	01d2      	lsls	r2, r2, #7
 8003fd4:	440a      	add	r2, r1
 8003fd6:	3284      	adds	r2, #132	; 0x84
 8003fd8:	f043 0301 	orr.w	r3, r3, #1
 8003fdc:	6013      	str	r3, [r2, #0]
}
 8003fde:	bf00      	nop
 8003fe0:	3724      	adds	r7, #36	; 0x24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	fffff8f8 	.word	0xfffff8f8
 8003ff0:	fffff800 	.word	0xfffff800

08003ff4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ff8:	4b05      	ldr	r3, [pc, #20]	; (8004010 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a04      	ldr	r2, [pc, #16]	; (8004010 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004002:	6013      	str	r3, [r2, #0]
}
 8004004:	bf00      	nop
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	40007000 	.word	0x40007000

08004014 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800401a:	2300      	movs	r3, #0
 800401c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800401e:	4b23      	ldr	r3, [pc, #140]	; (80040ac <HAL_PWREx_EnableOverDrive+0x98>)
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	4a22      	ldr	r2, [pc, #136]	; (80040ac <HAL_PWREx_EnableOverDrive+0x98>)
 8004024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004028:	6413      	str	r3, [r2, #64]	; 0x40
 800402a:	4b20      	ldr	r3, [pc, #128]	; (80040ac <HAL_PWREx_EnableOverDrive+0x98>)
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004032:	603b      	str	r3, [r7, #0]
 8004034:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004036:	4b1e      	ldr	r3, [pc, #120]	; (80040b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a1d      	ldr	r2, [pc, #116]	; (80040b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800403c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004040:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004042:	f7fc fa87 	bl	8000554 <HAL_GetTick>
 8004046:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004048:	e009      	b.n	800405e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800404a:	f7fc fa83 	bl	8000554 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004058:	d901      	bls.n	800405e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e022      	b.n	80040a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800405e:	4b14      	ldr	r3, [pc, #80]	; (80040b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800406a:	d1ee      	bne.n	800404a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800406c:	4b10      	ldr	r3, [pc, #64]	; (80040b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a0f      	ldr	r2, [pc, #60]	; (80040b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004076:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004078:	f7fc fa6c 	bl	8000554 <HAL_GetTick>
 800407c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800407e:	e009      	b.n	8004094 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004080:	f7fc fa68 	bl	8000554 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800408e:	d901      	bls.n	8004094 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e007      	b.n	80040a4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004094:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040a0:	d1ee      	bne.n	8004080 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3708      	adds	r7, #8
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	40023800 	.word	0x40023800
 80040b0:	40007000 	.word	0x40007000

080040b4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af02      	add	r7, sp, #8
 80040ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80040c0:	f7fc fa48 	bl	8000554 <HAL_GetTick>
 80040c4:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e073      	b.n	80041b8 <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d101      	bne.n	80040e0 <HAL_QSPI_Init+0x2c>
 80040dc:	2302      	movs	r3, #2
 80040de:	e06b      	b.n	80041b8 <HAL_QSPI_Init+0x104>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10b      	bne.n	800410c <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f010 fc31 	bl	8014964 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8004102:	f241 3188 	movw	r1, #5000	; 0x1388
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f85e 	bl	80041c8 <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	3b01      	subs	r3, #1
 800411c:	021a      	lsls	r2, r3, #8
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2200      	movs	r2, #0
 8004130:	2120      	movs	r1, #32
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f856 	bl	80041e4 <QSPI_WaitFlagStateUntilTimeout>
 8004138:	4603      	mov	r3, r0
 800413a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800413c:	7bfb      	ldrb	r3, [r7, #15]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d135      	bne.n	80041ae <HAL_QSPI_Init+0xfa>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	4b1d      	ldr	r3, [pc, #116]	; (80041c0 <HAL_QSPI_Init+0x10c>)
 800414a:	4013      	ands	r3, r2
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6852      	ldr	r2, [r2, #4]
 8004150:	0611      	lsls	r1, r2, #24
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	68d2      	ldr	r2, [r2, #12]
 8004156:	4311      	orrs	r1, r2
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	69d2      	ldr	r2, [r2, #28]
 800415c:	4311      	orrs	r1, r2
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	6a12      	ldr	r2, [r2, #32]
 8004162:	4311      	orrs	r1, r2
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6812      	ldr	r2, [r2, #0]
 8004168:	430b      	orrs	r3, r1
 800416a:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	4b14      	ldr	r3, [pc, #80]	; (80041c4 <HAL_QSPI_Init+0x110>)
 8004174:	4013      	ands	r3, r2
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6912      	ldr	r2, [r2, #16]
 800417a:	0411      	lsls	r1, r2, #16
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	6952      	ldr	r2, [r2, #20]
 8004180:	4311      	orrs	r1, r2
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6992      	ldr	r2, [r2, #24]
 8004186:	4311      	orrs	r1, r2
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6812      	ldr	r2, [r2, #0]
 800418c:	430b      	orrs	r3, r1
 800418e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f042 0201 	orr.w	r2, r2, #1
 800419e:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80041b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	00ffff2f 	.word	0x00ffff2f
 80041c4:	ffe0f8fe 	.word	0xffe0f8fe

080041c8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	649a      	str	r2, [r3, #72]	; 0x48
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	603b      	str	r3, [r7, #0]
 80041f0:	4613      	mov	r3, r2
 80041f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80041f4:	e01a      	b.n	800422c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fc:	d016      	beq.n	800422c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d007      	beq.n	8004214 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004204:	f7fc f9a6 	bl	8000554 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	429a      	cmp	r2, r3
 8004212:	d20b      	bcs.n	800422c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2204      	movs	r2, #4
 8004218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004220:	f043 0201 	orr.w	r2, r3, #1
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e00e      	b.n	800424a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689a      	ldr	r2, [r3, #8]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	4013      	ands	r3, r2
 8004236:	2b00      	cmp	r3, #0
 8004238:	bf14      	ite	ne
 800423a:	2301      	movne	r3, #1
 800423c:	2300      	moveq	r3, #0
 800423e:	b2db      	uxtb	r3, r3
 8004240:	461a      	mov	r2, r3
 8004242:	79fb      	ldrb	r3, [r7, #7]
 8004244:	429a      	cmp	r2, r3
 8004246:	d1d6      	bne.n	80041f6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
	...

08004254 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 800425c:	2300      	movs	r3, #0
 800425e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e25c      	b.n	8004724 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 8087 	beq.w	8004386 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004278:	4b96      	ldr	r3, [pc, #600]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f003 030c 	and.w	r3, r3, #12
 8004280:	2b04      	cmp	r3, #4
 8004282:	d00c      	beq.n	800429e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004284:	4b93      	ldr	r3, [pc, #588]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f003 030c 	and.w	r3, r3, #12
 800428c:	2b08      	cmp	r3, #8
 800428e:	d112      	bne.n	80042b6 <HAL_RCC_OscConfig+0x62>
 8004290:	4b90      	ldr	r3, [pc, #576]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004298:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800429c:	d10b      	bne.n	80042b6 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800429e:	4b8d      	ldr	r3, [pc, #564]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d06c      	beq.n	8004384 <HAL_RCC_OscConfig+0x130>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d168      	bne.n	8004384 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e236      	b.n	8004724 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042be:	d106      	bne.n	80042ce <HAL_RCC_OscConfig+0x7a>
 80042c0:	4b84      	ldr	r3, [pc, #528]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a83      	ldr	r2, [pc, #524]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 80042c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ca:	6013      	str	r3, [r2, #0]
 80042cc:	e02e      	b.n	800432c <HAL_RCC_OscConfig+0xd8>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10c      	bne.n	80042f0 <HAL_RCC_OscConfig+0x9c>
 80042d6:	4b7f      	ldr	r3, [pc, #508]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a7e      	ldr	r2, [pc, #504]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 80042dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042e0:	6013      	str	r3, [r2, #0]
 80042e2:	4b7c      	ldr	r3, [pc, #496]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a7b      	ldr	r2, [pc, #492]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 80042e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042ec:	6013      	str	r3, [r2, #0]
 80042ee:	e01d      	b.n	800432c <HAL_RCC_OscConfig+0xd8>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042f8:	d10c      	bne.n	8004314 <HAL_RCC_OscConfig+0xc0>
 80042fa:	4b76      	ldr	r3, [pc, #472]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a75      	ldr	r2, [pc, #468]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 8004300:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004304:	6013      	str	r3, [r2, #0]
 8004306:	4b73      	ldr	r3, [pc, #460]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a72      	ldr	r2, [pc, #456]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 800430c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004310:	6013      	str	r3, [r2, #0]
 8004312:	e00b      	b.n	800432c <HAL_RCC_OscConfig+0xd8>
 8004314:	4b6f      	ldr	r3, [pc, #444]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a6e      	ldr	r2, [pc, #440]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 800431a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800431e:	6013      	str	r3, [r2, #0]
 8004320:	4b6c      	ldr	r3, [pc, #432]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a6b      	ldr	r2, [pc, #428]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 8004326:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800432a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d013      	beq.n	800435c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004334:	f7fc f90e 	bl	8000554 <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800433c:	f7fc f90a 	bl	8000554 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b64      	cmp	r3, #100	; 0x64
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e1ea      	b.n	8004724 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800434e:	4b61      	ldr	r3, [pc, #388]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0f0      	beq.n	800433c <HAL_RCC_OscConfig+0xe8>
 800435a:	e014      	b.n	8004386 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435c:	f7fc f8fa 	bl	8000554 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004364:	f7fc f8f6 	bl	8000554 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b64      	cmp	r3, #100	; 0x64
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e1d6      	b.n	8004724 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004376:	4b57      	ldr	r3, [pc, #348]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1f0      	bne.n	8004364 <HAL_RCC_OscConfig+0x110>
 8004382:	e000      	b.n	8004386 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004384:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d069      	beq.n	8004466 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004392:	4b50      	ldr	r3, [pc, #320]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 030c 	and.w	r3, r3, #12
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00b      	beq.n	80043b6 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800439e:	4b4d      	ldr	r3, [pc, #308]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 030c 	and.w	r3, r3, #12
 80043a6:	2b08      	cmp	r3, #8
 80043a8:	d11c      	bne.n	80043e4 <HAL_RCC_OscConfig+0x190>
 80043aa:	4b4a      	ldr	r3, [pc, #296]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d116      	bne.n	80043e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043b6:	4b47      	ldr	r3, [pc, #284]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d005      	beq.n	80043ce <HAL_RCC_OscConfig+0x17a>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d001      	beq.n	80043ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e1aa      	b.n	8004724 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ce:	4b41      	ldr	r3, [pc, #260]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	493d      	ldr	r1, [pc, #244]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043e2:	e040      	b.n	8004466 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d023      	beq.n	8004434 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043ec:	4b39      	ldr	r3, [pc, #228]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a38      	ldr	r2, [pc, #224]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 80043f2:	f043 0301 	orr.w	r3, r3, #1
 80043f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f8:	f7fc f8ac 	bl	8000554 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004400:	f7fc f8a8 	bl	8000554 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e188      	b.n	8004724 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004412:	4b30      	ldr	r3, [pc, #192]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0f0      	beq.n	8004400 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800441e:	4b2d      	ldr	r3, [pc, #180]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	4929      	ldr	r1, [pc, #164]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 800442e:	4313      	orrs	r3, r2
 8004430:	600b      	str	r3, [r1, #0]
 8004432:	e018      	b.n	8004466 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004434:	4b27      	ldr	r3, [pc, #156]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a26      	ldr	r2, [pc, #152]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 800443a:	f023 0301 	bic.w	r3, r3, #1
 800443e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004440:	f7fc f888 	bl	8000554 <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004448:	f7fc f884 	bl	8000554 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e164      	b.n	8004724 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800445a:	4b1e      	ldr	r3, [pc, #120]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1f0      	bne.n	8004448 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	2b00      	cmp	r3, #0
 8004470:	d038      	beq.n	80044e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d019      	beq.n	80044ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800447a:	4b16      	ldr	r3, [pc, #88]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 800447c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800447e:	4a15      	ldr	r2, [pc, #84]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 8004480:	f043 0301 	orr.w	r3, r3, #1
 8004484:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004486:	f7fc f865 	bl	8000554 <HAL_GetTick>
 800448a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800448c:	e008      	b.n	80044a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800448e:	f7fc f861 	bl	8000554 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d901      	bls.n	80044a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e141      	b.n	8004724 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044a0:	4b0c      	ldr	r3, [pc, #48]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 80044a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d0f0      	beq.n	800448e <HAL_RCC_OscConfig+0x23a>
 80044ac:	e01a      	b.n	80044e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044ae:	4b09      	ldr	r3, [pc, #36]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 80044b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044b2:	4a08      	ldr	r2, [pc, #32]	; (80044d4 <HAL_RCC_OscConfig+0x280>)
 80044b4:	f023 0301 	bic.w	r3, r3, #1
 80044b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ba:	f7fc f84b 	bl	8000554 <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044c0:	e00a      	b.n	80044d8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044c2:	f7fc f847 	bl	8000554 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d903      	bls.n	80044d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e127      	b.n	8004724 <HAL_RCC_OscConfig+0x4d0>
 80044d4:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044d8:	4b94      	ldr	r3, [pc, #592]	; (800472c <HAL_RCC_OscConfig+0x4d8>)
 80044da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1ee      	bne.n	80044c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f000 80a4 	beq.w	800463a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044f2:	4b8e      	ldr	r3, [pc, #568]	; (800472c <HAL_RCC_OscConfig+0x4d8>)
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10d      	bne.n	800451a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80044fe:	4b8b      	ldr	r3, [pc, #556]	; (800472c <HAL_RCC_OscConfig+0x4d8>)
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	4a8a      	ldr	r2, [pc, #552]	; (800472c <HAL_RCC_OscConfig+0x4d8>)
 8004504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004508:	6413      	str	r3, [r2, #64]	; 0x40
 800450a:	4b88      	ldr	r3, [pc, #544]	; (800472c <HAL_RCC_OscConfig+0x4d8>)
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004516:	2301      	movs	r3, #1
 8004518:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800451a:	4b85      	ldr	r3, [pc, #532]	; (8004730 <HAL_RCC_OscConfig+0x4dc>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004522:	2b00      	cmp	r3, #0
 8004524:	d118      	bne.n	8004558 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004526:	4b82      	ldr	r3, [pc, #520]	; (8004730 <HAL_RCC_OscConfig+0x4dc>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a81      	ldr	r2, [pc, #516]	; (8004730 <HAL_RCC_OscConfig+0x4dc>)
 800452c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004530:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004532:	f7fc f80f 	bl	8000554 <HAL_GetTick>
 8004536:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004538:	e008      	b.n	800454c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800453a:	f7fc f80b 	bl	8000554 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b64      	cmp	r3, #100	; 0x64
 8004546:	d901      	bls.n	800454c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e0eb      	b.n	8004724 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800454c:	4b78      	ldr	r3, [pc, #480]	; (8004730 <HAL_RCC_OscConfig+0x4dc>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0f0      	beq.n	800453a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d106      	bne.n	800456e <HAL_RCC_OscConfig+0x31a>
 8004560:	4b72      	ldr	r3, [pc, #456]	; (800472c <HAL_RCC_OscConfig+0x4d8>)
 8004562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004564:	4a71      	ldr	r2, [pc, #452]	; (800472c <HAL_RCC_OscConfig+0x4d8>)
 8004566:	f043 0301 	orr.w	r3, r3, #1
 800456a:	6713      	str	r3, [r2, #112]	; 0x70
 800456c:	e02d      	b.n	80045ca <HAL_RCC_OscConfig+0x376>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10c      	bne.n	8004590 <HAL_RCC_OscConfig+0x33c>
 8004576:	4b6d      	ldr	r3, [pc, #436]	; (800472c <HAL_RCC_OscConfig+0x4d8>)
 8004578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457a:	4a6c      	ldr	r2, [pc, #432]	; (800472c <HAL_RCC_OscConfig+0x4d8>)
 800457c:	f023 0301 	bic.w	r3, r3, #1
 8004580:	6713      	str	r3, [r2, #112]	; 0x70
 8004582:	4b6a      	ldr	r3, [pc, #424]	; (800472c <HAL_RCC_OscConfig+0x4d8>)
 8004584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004586:	4a69      	ldr	r2, [pc, #420]	; (800472c <HAL_RCC_OscConfig+0x4d8>)
 8004588:	f023 0304 	bic.w	r3, r3, #4
 800458c:	6713      	str	r3, [r2, #112]	; 0x70
 800458e:	e01c      	b.n	80045ca <HAL_RCC_OscConfig+0x376>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	2b05      	cmp	r3, #5
 8004596:	d10c      	bne.n	80045b2 <HAL_RCC_OscConfig+0x35e>
 8004598:	4b64      	ldr	r3, [pc, #400]	; (800472c <HAL_RCC_OscConfig+0x4d8>)
 800459a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459c:	4a63      	ldr	r2, [pc, #396]	; (800472c <HAL_RCC_OscConfig+0x4d8>)
 800459e:	f043 0304 	orr.w	r3, r3, #4
 80045a2:	6713      	str	r3, [r2, #112]	; 0x70
 80045a4:	4b61      	ldr	r3, [pc, #388]	; (800472c <HAL_RCC_OscConfig+0x4d8>)
 80045a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a8:	4a60      	ldr	r2, [pc, #384]	; (800472c <HAL_RCC_OscConfig+0x4d8>)
 80045aa:	f043 0301 	orr.w	r3, r3, #1
 80045ae:	6713      	str	r3, [r2, #112]	; 0x70
 80045b0:	e00b      	b.n	80045ca <HAL_RCC_OscConfig+0x376>
 80045b2:	4b5e      	ldr	r3, [pc, #376]	; (800472c <HAL_RCC_OscConfig+0x4d8>)
 80045b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b6:	4a5d      	ldr	r2, [pc, #372]	; (800472c <HAL_RCC_OscConfig+0x4d8>)
 80045b8:	f023 0301 	bic.w	r3, r3, #1
 80045bc:	6713      	str	r3, [r2, #112]	; 0x70
 80045be:	4b5b      	ldr	r3, [pc, #364]	; (800472c <HAL_RCC_OscConfig+0x4d8>)
 80045c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c2:	4a5a      	ldr	r2, [pc, #360]	; (800472c <HAL_RCC_OscConfig+0x4d8>)
 80045c4:	f023 0304 	bic.w	r3, r3, #4
 80045c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d015      	beq.n	80045fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d2:	f7fb ffbf 	bl	8000554 <HAL_GetTick>
 80045d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d8:	e00a      	b.n	80045f0 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045da:	f7fb ffbb 	bl	8000554 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d901      	bls.n	80045f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e099      	b.n	8004724 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f0:	4b4e      	ldr	r3, [pc, #312]	; (800472c <HAL_RCC_OscConfig+0x4d8>)
 80045f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d0ee      	beq.n	80045da <HAL_RCC_OscConfig+0x386>
 80045fc:	e014      	b.n	8004628 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045fe:	f7fb ffa9 	bl	8000554 <HAL_GetTick>
 8004602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004604:	e00a      	b.n	800461c <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004606:	f7fb ffa5 	bl	8000554 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	f241 3288 	movw	r2, #5000	; 0x1388
 8004614:	4293      	cmp	r3, r2
 8004616:	d901      	bls.n	800461c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e083      	b.n	8004724 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800461c:	4b43      	ldr	r3, [pc, #268]	; (800472c <HAL_RCC_OscConfig+0x4d8>)
 800461e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1ee      	bne.n	8004606 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004628:	7dfb      	ldrb	r3, [r7, #23]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d105      	bne.n	800463a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800462e:	4b3f      	ldr	r3, [pc, #252]	; (800472c <HAL_RCC_OscConfig+0x4d8>)
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	4a3e      	ldr	r2, [pc, #248]	; (800472c <HAL_RCC_OscConfig+0x4d8>)
 8004634:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004638:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d06f      	beq.n	8004722 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004642:	4b3a      	ldr	r3, [pc, #232]	; (800472c <HAL_RCC_OscConfig+0x4d8>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 030c 	and.w	r3, r3, #12
 800464a:	2b08      	cmp	r3, #8
 800464c:	d067      	beq.n	800471e <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	2b02      	cmp	r3, #2
 8004654:	d149      	bne.n	80046ea <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004656:	4b35      	ldr	r3, [pc, #212]	; (800472c <HAL_RCC_OscConfig+0x4d8>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a34      	ldr	r2, [pc, #208]	; (800472c <HAL_RCC_OscConfig+0x4d8>)
 800465c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004660:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004662:	f7fb ff77 	bl	8000554 <HAL_GetTick>
 8004666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004668:	e008      	b.n	800467c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800466a:	f7fb ff73 	bl	8000554 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b02      	cmp	r3, #2
 8004676:	d901      	bls.n	800467c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e053      	b.n	8004724 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800467c:	4b2b      	ldr	r3, [pc, #172]	; (800472c <HAL_RCC_OscConfig+0x4d8>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1f0      	bne.n	800466a <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	69da      	ldr	r2, [r3, #28]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	431a      	orrs	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	019b      	lsls	r3, r3, #6
 8004698:	431a      	orrs	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469e:	085b      	lsrs	r3, r3, #1
 80046a0:	3b01      	subs	r3, #1
 80046a2:	041b      	lsls	r3, r3, #16
 80046a4:	431a      	orrs	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046aa:	061b      	lsls	r3, r3, #24
 80046ac:	4313      	orrs	r3, r2
 80046ae:	4a1f      	ldr	r2, [pc, #124]	; (800472c <HAL_RCC_OscConfig+0x4d8>)
 80046b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80046b4:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046b6:	4b1d      	ldr	r3, [pc, #116]	; (800472c <HAL_RCC_OscConfig+0x4d8>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a1c      	ldr	r2, [pc, #112]	; (800472c <HAL_RCC_OscConfig+0x4d8>)
 80046bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c2:	f7fb ff47 	bl	8000554 <HAL_GetTick>
 80046c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c8:	e008      	b.n	80046dc <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ca:	f7fb ff43 	bl	8000554 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e023      	b.n	8004724 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046dc:	4b13      	ldr	r3, [pc, #76]	; (800472c <HAL_RCC_OscConfig+0x4d8>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d0f0      	beq.n	80046ca <HAL_RCC_OscConfig+0x476>
 80046e8:	e01b      	b.n	8004722 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ea:	4b10      	ldr	r3, [pc, #64]	; (800472c <HAL_RCC_OscConfig+0x4d8>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a0f      	ldr	r2, [pc, #60]	; (800472c <HAL_RCC_OscConfig+0x4d8>)
 80046f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f6:	f7fb ff2d 	bl	8000554 <HAL_GetTick>
 80046fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fc:	e008      	b.n	8004710 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046fe:	f7fb ff29 	bl	8000554 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d901      	bls.n	8004710 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e009      	b.n	8004724 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004710:	4b06      	ldr	r3, [pc, #24]	; (800472c <HAL_RCC_OscConfig+0x4d8>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1f0      	bne.n	80046fe <HAL_RCC_OscConfig+0x4aa>
 800471c:	e001      	b.n	8004722 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e000      	b.n	8004724 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3718      	adds	r7, #24
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	40023800 	.word	0x40023800
 8004730:	40007000 	.word	0x40007000

08004734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800473e:	2300      	movs	r3, #0
 8004740:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d101      	bne.n	800474c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e0ce      	b.n	80048ea <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800474c:	4b69      	ldr	r3, [pc, #420]	; (80048f4 <HAL_RCC_ClockConfig+0x1c0>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 030f 	and.w	r3, r3, #15
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	429a      	cmp	r2, r3
 8004758:	d910      	bls.n	800477c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800475a:	4b66      	ldr	r3, [pc, #408]	; (80048f4 <HAL_RCC_ClockConfig+0x1c0>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f023 020f 	bic.w	r2, r3, #15
 8004762:	4964      	ldr	r1, [pc, #400]	; (80048f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	4313      	orrs	r3, r2
 8004768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800476a:	4b62      	ldr	r3, [pc, #392]	; (80048f4 <HAL_RCC_ClockConfig+0x1c0>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 030f 	and.w	r3, r3, #15
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	429a      	cmp	r2, r3
 8004776:	d001      	beq.n	800477c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e0b6      	b.n	80048ea <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d020      	beq.n	80047ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b00      	cmp	r3, #0
 8004792:	d005      	beq.n	80047a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004794:	4b58      	ldr	r3, [pc, #352]	; (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	4a57      	ldr	r2, [pc, #348]	; (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 800479a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800479e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0308 	and.w	r3, r3, #8
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d005      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047ac:	4b52      	ldr	r3, [pc, #328]	; (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	4a51      	ldr	r2, [pc, #324]	; (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 80047b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047b8:	4b4f      	ldr	r3, [pc, #316]	; (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	494c      	ldr	r1, [pc, #304]	; (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d040      	beq.n	8004858 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d107      	bne.n	80047ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047de:	4b46      	ldr	r3, [pc, #280]	; (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d115      	bne.n	8004816 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e07d      	b.n	80048ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d107      	bne.n	8004806 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047f6:	4b40      	ldr	r3, [pc, #256]	; (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d109      	bne.n	8004816 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e071      	b.n	80048ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004806:	4b3c      	ldr	r3, [pc, #240]	; (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e069      	b.n	80048ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004816:	4b38      	ldr	r3, [pc, #224]	; (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f023 0203 	bic.w	r2, r3, #3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	4935      	ldr	r1, [pc, #212]	; (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004824:	4313      	orrs	r3, r2
 8004826:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004828:	f7fb fe94 	bl	8000554 <HAL_GetTick>
 800482c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800482e:	e00a      	b.n	8004846 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004830:	f7fb fe90 	bl	8000554 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	f241 3288 	movw	r2, #5000	; 0x1388
 800483e:	4293      	cmp	r3, r2
 8004840:	d901      	bls.n	8004846 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e051      	b.n	80048ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004846:	4b2c      	ldr	r3, [pc, #176]	; (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 020c 	and.w	r2, r3, #12
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	429a      	cmp	r2, r3
 8004856:	d1eb      	bne.n	8004830 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004858:	4b26      	ldr	r3, [pc, #152]	; (80048f4 <HAL_RCC_ClockConfig+0x1c0>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 030f 	and.w	r3, r3, #15
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	d210      	bcs.n	8004888 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004866:	4b23      	ldr	r3, [pc, #140]	; (80048f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f023 020f 	bic.w	r2, r3, #15
 800486e:	4921      	ldr	r1, [pc, #132]	; (80048f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	4313      	orrs	r3, r2
 8004874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004876:	4b1f      	ldr	r3, [pc, #124]	; (80048f4 <HAL_RCC_ClockConfig+0x1c0>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 030f 	and.w	r3, r3, #15
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	429a      	cmp	r2, r3
 8004882:	d001      	beq.n	8004888 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e030      	b.n	80048ea <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0304 	and.w	r3, r3, #4
 8004890:	2b00      	cmp	r3, #0
 8004892:	d008      	beq.n	80048a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004894:	4b18      	ldr	r3, [pc, #96]	; (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	4915      	ldr	r1, [pc, #84]	; (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0308 	and.w	r3, r3, #8
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d009      	beq.n	80048c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048b2:	4b11      	ldr	r3, [pc, #68]	; (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	490d      	ldr	r1, [pc, #52]	; (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048c6:	f000 f81d 	bl	8004904 <HAL_RCC_GetSysClockFreq>
 80048ca:	4601      	mov	r1, r0
 80048cc:	4b0a      	ldr	r3, [pc, #40]	; (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	091b      	lsrs	r3, r3, #4
 80048d2:	f003 030f 	and.w	r3, r3, #15
 80048d6:	4a09      	ldr	r2, [pc, #36]	; (80048fc <HAL_RCC_ClockConfig+0x1c8>)
 80048d8:	5cd3      	ldrb	r3, [r2, r3]
 80048da:	fa21 f303 	lsr.w	r3, r1, r3
 80048de:	4a08      	ldr	r2, [pc, #32]	; (8004900 <HAL_RCC_ClockConfig+0x1cc>)
 80048e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80048e2:	2000      	movs	r0, #0
 80048e4:	f010 fd08 	bl	80152f8 <HAL_InitTick>

  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	40023c00 	.word	0x40023c00
 80048f8:	40023800 	.word	0x40023800
 80048fc:	08015f50 	.word	0x08015f50
 8004900:	2000002c 	.word	0x2000002c

08004904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800490a:	2300      	movs	r3, #0
 800490c:	607b      	str	r3, [r7, #4]
 800490e:	2300      	movs	r3, #0
 8004910:	60fb      	str	r3, [r7, #12]
 8004912:	2300      	movs	r3, #0
 8004914:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004916:	2300      	movs	r3, #0
 8004918:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800491a:	4b50      	ldr	r3, [pc, #320]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x158>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 030c 	and.w	r3, r3, #12
 8004922:	2b04      	cmp	r3, #4
 8004924:	d007      	beq.n	8004936 <HAL_RCC_GetSysClockFreq+0x32>
 8004926:	2b08      	cmp	r3, #8
 8004928:	d008      	beq.n	800493c <HAL_RCC_GetSysClockFreq+0x38>
 800492a:	2b00      	cmp	r3, #0
 800492c:	f040 808d 	bne.w	8004a4a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004930:	4b4b      	ldr	r3, [pc, #300]	; (8004a60 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004932:	60bb      	str	r3, [r7, #8]
       break;
 8004934:	e08c      	b.n	8004a50 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004936:	4b4b      	ldr	r3, [pc, #300]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x160>)
 8004938:	60bb      	str	r3, [r7, #8]
      break;
 800493a:	e089      	b.n	8004a50 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800493c:	4b47      	ldr	r3, [pc, #284]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x158>)
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004944:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004946:	4b45      	ldr	r3, [pc, #276]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x158>)
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d023      	beq.n	800499a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004952:	4b42      	ldr	r3, [pc, #264]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x158>)
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	099b      	lsrs	r3, r3, #6
 8004958:	f04f 0400 	mov.w	r4, #0
 800495c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004960:	f04f 0200 	mov.w	r2, #0
 8004964:	ea03 0501 	and.w	r5, r3, r1
 8004968:	ea04 0602 	and.w	r6, r4, r2
 800496c:	4a3d      	ldr	r2, [pc, #244]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x160>)
 800496e:	fb02 f106 	mul.w	r1, r2, r6
 8004972:	2200      	movs	r2, #0
 8004974:	fb02 f205 	mul.w	r2, r2, r5
 8004978:	440a      	add	r2, r1
 800497a:	493a      	ldr	r1, [pc, #232]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x160>)
 800497c:	fba5 0101 	umull	r0, r1, r5, r1
 8004980:	1853      	adds	r3, r2, r1
 8004982:	4619      	mov	r1, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f04f 0400 	mov.w	r4, #0
 800498a:	461a      	mov	r2, r3
 800498c:	4623      	mov	r3, r4
 800498e:	f7fb fc3f 	bl	8000210 <__aeabi_uldivmod>
 8004992:	4603      	mov	r3, r0
 8004994:	460c      	mov	r4, r1
 8004996:	60fb      	str	r3, [r7, #12]
 8004998:	e049      	b.n	8004a2e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800499a:	4b30      	ldr	r3, [pc, #192]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x158>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	099b      	lsrs	r3, r3, #6
 80049a0:	f04f 0400 	mov.w	r4, #0
 80049a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80049a8:	f04f 0200 	mov.w	r2, #0
 80049ac:	ea03 0501 	and.w	r5, r3, r1
 80049b0:	ea04 0602 	and.w	r6, r4, r2
 80049b4:	4629      	mov	r1, r5
 80049b6:	4632      	mov	r2, r6
 80049b8:	f04f 0300 	mov.w	r3, #0
 80049bc:	f04f 0400 	mov.w	r4, #0
 80049c0:	0154      	lsls	r4, r2, #5
 80049c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80049c6:	014b      	lsls	r3, r1, #5
 80049c8:	4619      	mov	r1, r3
 80049ca:	4622      	mov	r2, r4
 80049cc:	1b49      	subs	r1, r1, r5
 80049ce:	eb62 0206 	sbc.w	r2, r2, r6
 80049d2:	f04f 0300 	mov.w	r3, #0
 80049d6:	f04f 0400 	mov.w	r4, #0
 80049da:	0194      	lsls	r4, r2, #6
 80049dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80049e0:	018b      	lsls	r3, r1, #6
 80049e2:	1a5b      	subs	r3, r3, r1
 80049e4:	eb64 0402 	sbc.w	r4, r4, r2
 80049e8:	f04f 0100 	mov.w	r1, #0
 80049ec:	f04f 0200 	mov.w	r2, #0
 80049f0:	00e2      	lsls	r2, r4, #3
 80049f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80049f6:	00d9      	lsls	r1, r3, #3
 80049f8:	460b      	mov	r3, r1
 80049fa:	4614      	mov	r4, r2
 80049fc:	195b      	adds	r3, r3, r5
 80049fe:	eb44 0406 	adc.w	r4, r4, r6
 8004a02:	f04f 0100 	mov.w	r1, #0
 8004a06:	f04f 0200 	mov.w	r2, #0
 8004a0a:	02a2      	lsls	r2, r4, #10
 8004a0c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004a10:	0299      	lsls	r1, r3, #10
 8004a12:	460b      	mov	r3, r1
 8004a14:	4614      	mov	r4, r2
 8004a16:	4618      	mov	r0, r3
 8004a18:	4621      	mov	r1, r4
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f04f 0400 	mov.w	r4, #0
 8004a20:	461a      	mov	r2, r3
 8004a22:	4623      	mov	r3, r4
 8004a24:	f7fb fbf4 	bl	8000210 <__aeabi_uldivmod>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	460c      	mov	r4, r1
 8004a2c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8004a2e:	4b0b      	ldr	r3, [pc, #44]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x158>)
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	0c1b      	lsrs	r3, r3, #16
 8004a34:	f003 0303 	and.w	r3, r3, #3
 8004a38:	3301      	adds	r3, #1
 8004a3a:	005b      	lsls	r3, r3, #1
 8004a3c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a46:	60bb      	str	r3, [r7, #8]
      break;
 8004a48:	e002      	b.n	8004a50 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a4a:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004a4c:	60bb      	str	r3, [r7, #8]
      break;
 8004a4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a50:	68bb      	ldr	r3, [r7, #8]
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3714      	adds	r7, #20
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	40023800 	.word	0x40023800
 8004a60:	00f42400 	.word	0x00f42400
 8004a64:	017d7840 	.word	0x017d7840

08004a68 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a6c:	4b03      	ldr	r3, [pc, #12]	; (8004a7c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	2000002c 	.word	0x2000002c

08004a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a84:	f7ff fff0 	bl	8004a68 <HAL_RCC_GetHCLKFreq>
 8004a88:	4601      	mov	r1, r0
 8004a8a:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	0a9b      	lsrs	r3, r3, #10
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	4a03      	ldr	r2, [pc, #12]	; (8004aa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a96:	5cd3      	ldrb	r3, [r2, r3]
 8004a98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	40023800 	.word	0x40023800
 8004aa4:	08015f60 	.word	0x08015f60

08004aa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004aac:	f7ff ffdc 	bl	8004a68 <HAL_RCC_GetHCLKFreq>
 8004ab0:	4601      	mov	r1, r0
 8004ab2:	4b05      	ldr	r3, [pc, #20]	; (8004ac8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	0b5b      	lsrs	r3, r3, #13
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	4a03      	ldr	r2, [pc, #12]	; (8004acc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004abe:	5cd3      	ldrb	r3, [r2, r3]
 8004ac0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	08015f60 	.word	0x08015f60

08004ad0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	220f      	movs	r2, #15
 8004ade:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ae0:	4b12      	ldr	r3, [pc, #72]	; (8004b2c <HAL_RCC_GetClockConfig+0x5c>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f003 0203 	and.w	r2, r3, #3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004aec:	4b0f      	ldr	r3, [pc, #60]	; (8004b2c <HAL_RCC_GetClockConfig+0x5c>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004af8:	4b0c      	ldr	r3, [pc, #48]	; (8004b2c <HAL_RCC_GetClockConfig+0x5c>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004b04:	4b09      	ldr	r3, [pc, #36]	; (8004b2c <HAL_RCC_GetClockConfig+0x5c>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	08db      	lsrs	r3, r3, #3
 8004b0a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b12:	4b07      	ldr	r3, [pc, #28]	; (8004b30 <HAL_RCC_GetClockConfig+0x60>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 020f 	and.w	r2, r3, #15
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	601a      	str	r2, [r3, #0]
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	40023800 	.word	0x40023800
 8004b30:	40023c00 	.word	0x40023c00

08004b34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b088      	sub	sp, #32
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004b40:	2300      	movs	r3, #0
 8004b42:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004b44:	2300      	movs	r3, #0
 8004b46:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d012      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b5c:	4b69      	ldr	r3, [pc, #420]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	4a68      	ldr	r2, [pc, #416]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b62:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004b66:	6093      	str	r3, [r2, #8]
 8004b68:	4b66      	ldr	r3, [pc, #408]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b70:	4964      	ldr	r1, [pc, #400]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d017      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b8e:	4b5d      	ldr	r3, [pc, #372]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9c:	4959      	ldr	r1, [pc, #356]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bac:	d101      	bne.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d017      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004bca:	4b4e      	ldr	r3, [pc, #312]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bd0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd8:	494a      	ldr	r1, [pc, #296]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004be8:	d101      	bne.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004bea:	2301      	movs	r3, #1
 8004bec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004c06:	2301      	movs	r3, #1
 8004c08:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0320 	and.w	r3, r3, #32
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f000 808b 	beq.w	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c18:	4b3a      	ldr	r3, [pc, #232]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1c:	4a39      	ldr	r2, [pc, #228]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c22:	6413      	str	r3, [r2, #64]	; 0x40
 8004c24:	4b37      	ldr	r3, [pc, #220]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c2c:	60bb      	str	r3, [r7, #8]
 8004c2e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004c30:	4b35      	ldr	r3, [pc, #212]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a34      	ldr	r2, [pc, #208]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c3c:	f7fb fc8a 	bl	8000554 <HAL_GetTick>
 8004c40:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c42:	e008      	b.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c44:	f7fb fc86 	bl	8000554 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b64      	cmp	r3, #100	; 0x64
 8004c50:	d901      	bls.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e355      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c56:	4b2c      	ldr	r3, [pc, #176]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d0f0      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c62:	4b28      	ldr	r3, [pc, #160]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c6a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d035      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d02e      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c80:	4b20      	ldr	r3, [pc, #128]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c88:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c8a:	4b1e      	ldr	r3, [pc, #120]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8e:	4a1d      	ldr	r2, [pc, #116]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c94:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c96:	4b1b      	ldr	r3, [pc, #108]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9a:	4a1a      	ldr	r2, [pc, #104]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ca0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004ca2:	4a18      	ldr	r2, [pc, #96]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ca8:	4b16      	ldr	r3, [pc, #88]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d114      	bne.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb4:	f7fb fc4e 	bl	8000554 <HAL_GetTick>
 8004cb8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cba:	e00a      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cbc:	f7fb fc4a 	bl	8000554 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e317      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cd2:	4b0c      	ldr	r3, [pc, #48]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d0ee      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ce6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cea:	d111      	bne.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004cec:	4b05      	ldr	r3, [pc, #20]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004cf8:	4b04      	ldr	r3, [pc, #16]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004cfa:	400b      	ands	r3, r1
 8004cfc:	4901      	ldr	r1, [pc, #4]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	608b      	str	r3, [r1, #8]
 8004d02:	e00b      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004d04:	40023800 	.word	0x40023800
 8004d08:	40007000 	.word	0x40007000
 8004d0c:	0ffffcff 	.word	0x0ffffcff
 8004d10:	4bb0      	ldr	r3, [pc, #704]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	4aaf      	ldr	r2, [pc, #700]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d16:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d1a:	6093      	str	r3, [r2, #8]
 8004d1c:	4bad      	ldr	r3, [pc, #692]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d28:	49aa      	ldr	r1, [pc, #680]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0310 	and.w	r3, r3, #16
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d010      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d3a:	4ba6      	ldr	r3, [pc, #664]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d40:	4aa4      	ldr	r2, [pc, #656]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d46:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004d4a:	4ba2      	ldr	r3, [pc, #648]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d4c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d54:	499f      	ldr	r1, [pc, #636]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00a      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d68:	4b9a      	ldr	r3, [pc, #616]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d76:	4997      	ldr	r1, [pc, #604]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00a      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d8a:	4b92      	ldr	r3, [pc, #584]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d98:	498e      	ldr	r1, [pc, #568]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00a      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004dac:	4b89      	ldr	r3, [pc, #548]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dba:	4986      	ldr	r1, [pc, #536]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00a      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004dce:	4b81      	ldr	r3, [pc, #516]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ddc:	497d      	ldr	r1, [pc, #500]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00a      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004df0:	4b78      	ldr	r3, [pc, #480]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df6:	f023 0203 	bic.w	r2, r3, #3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfe:	4975      	ldr	r1, [pc, #468]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00a      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e12:	4b70      	ldr	r3, [pc, #448]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e18:	f023 020c 	bic.w	r2, r3, #12
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e20:	496c      	ldr	r1, [pc, #432]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00a      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e34:	4b67      	ldr	r3, [pc, #412]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e3a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e42:	4964      	ldr	r1, [pc, #400]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00a      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e56:	4b5f      	ldr	r3, [pc, #380]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e5c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e64:	495b      	ldr	r1, [pc, #364]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00a      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e78:	4b56      	ldr	r3, [pc, #344]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e86:	4953      	ldr	r1, [pc, #332]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00a      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004e9a:	4b4e      	ldr	r3, [pc, #312]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea8:	494a      	ldr	r1, [pc, #296]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00a      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004ebc:	4b45      	ldr	r3, [pc, #276]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eca:	4942      	ldr	r1, [pc, #264]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00a      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004ede:	4b3d      	ldr	r3, [pc, #244]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eec:	4939      	ldr	r1, [pc, #228]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00a      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f00:	4b34      	ldr	r3, [pc, #208]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f06:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f0e:	4931      	ldr	r1, [pc, #196]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d011      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004f22:	4b2c      	ldr	r3, [pc, #176]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f28:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f30:	4928      	ldr	r1, [pc, #160]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f40:	d101      	bne.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004f42:	2301      	movs	r3, #1
 8004f44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0308 	and.w	r3, r3, #8
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d001      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004f52:	2301      	movs	r3, #1
 8004f54:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00a      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f62:	4b1c      	ldr	r3, [pc, #112]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f68:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f70:	4918      	ldr	r1, [pc, #96]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00b      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f84:	4b13      	ldr	r3, [pc, #76]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f8a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f94:	490f      	ldr	r1, [pc, #60]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d005      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004faa:	f040 80d8 	bne.w	800515e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004fae:	4b09      	ldr	r3, [pc, #36]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a08      	ldr	r2, [pc, #32]	; (8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004fb4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004fb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fba:	f7fb facb 	bl	8000554 <HAL_GetTick>
 8004fbe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fc0:	e00a      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004fc2:	f7fb fac7 	bl	8000554 <HAL_GetTick>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	2b64      	cmp	r3, #100	; 0x64
 8004fce:	d903      	bls.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e196      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8004fd4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fd8:	4b6c      	ldr	r3, [pc, #432]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1ee      	bne.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d021      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d11d      	bne.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004ff8:	4b64      	ldr	r3, [pc, #400]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ffe:	0c1b      	lsrs	r3, r3, #16
 8005000:	f003 0303 	and.w	r3, r3, #3
 8005004:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005006:	4b61      	ldr	r3, [pc, #388]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005008:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800500c:	0e1b      	lsrs	r3, r3, #24
 800500e:	f003 030f 	and.w	r3, r3, #15
 8005012:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	019a      	lsls	r2, r3, #6
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	041b      	lsls	r3, r3, #16
 800501e:	431a      	orrs	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	061b      	lsls	r3, r3, #24
 8005024:	431a      	orrs	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	071b      	lsls	r3, r3, #28
 800502c:	4957      	ldr	r1, [pc, #348]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800502e:	4313      	orrs	r3, r2
 8005030:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d004      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x516>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005044:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005048:	d00a      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005052:	2b00      	cmp	r3, #0
 8005054:	d02e      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800505e:	d129      	bne.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005060:	4b4a      	ldr	r3, [pc, #296]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005062:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005066:	0c1b      	lsrs	r3, r3, #16
 8005068:	f003 0303 	and.w	r3, r3, #3
 800506c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800506e:	4b47      	ldr	r3, [pc, #284]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005074:	0f1b      	lsrs	r3, r3, #28
 8005076:	f003 0307 	and.w	r3, r3, #7
 800507a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	019a      	lsls	r2, r3, #6
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	041b      	lsls	r3, r3, #16
 8005086:	431a      	orrs	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	061b      	lsls	r3, r3, #24
 800508e:	431a      	orrs	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	071b      	lsls	r3, r3, #28
 8005094:	493d      	ldr	r1, [pc, #244]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005096:	4313      	orrs	r3, r2
 8005098:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800509c:	4b3b      	ldr	r3, [pc, #236]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800509e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050a2:	f023 021f 	bic.w	r2, r3, #31
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050aa:	3b01      	subs	r3, #1
 80050ac:	4937      	ldr	r1, [pc, #220]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d01d      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80050c0:	4b32      	ldr	r3, [pc, #200]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80050c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050c6:	0e1b      	lsrs	r3, r3, #24
 80050c8:	f003 030f 	and.w	r3, r3, #15
 80050cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80050ce:	4b2f      	ldr	r3, [pc, #188]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80050d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050d4:	0f1b      	lsrs	r3, r3, #28
 80050d6:	f003 0307 	and.w	r3, r3, #7
 80050da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	019a      	lsls	r2, r3, #6
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	041b      	lsls	r3, r3, #16
 80050e8:	431a      	orrs	r2, r3
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	061b      	lsls	r3, r3, #24
 80050ee:	431a      	orrs	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	071b      	lsls	r3, r3, #28
 80050f4:	4925      	ldr	r1, [pc, #148]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d011      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	019a      	lsls	r2, r3, #6
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	041b      	lsls	r3, r3, #16
 8005114:	431a      	orrs	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	061b      	lsls	r3, r3, #24
 800511c:	431a      	orrs	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	071b      	lsls	r3, r3, #28
 8005124:	4919      	ldr	r1, [pc, #100]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005126:	4313      	orrs	r3, r2
 8005128:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800512c:	4b17      	ldr	r3, [pc, #92]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a16      	ldr	r2, [pc, #88]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005132:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005136:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005138:	f7fb fa0c 	bl	8000554 <HAL_GetTick>
 800513c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800513e:	e008      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005140:	f7fb fa08 	bl	8000554 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b64      	cmp	r3, #100	; 0x64
 800514c:	d901      	bls.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e0d7      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005152:	4b0e      	ldr	r3, [pc, #56]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d0f0      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	2b01      	cmp	r3, #1
 8005162:	f040 80cd 	bne.w	8005300 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005166:	4b09      	ldr	r3, [pc, #36]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a08      	ldr	r2, [pc, #32]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800516c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005170:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005172:	f7fb f9ef 	bl	8000554 <HAL_GetTick>
 8005176:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005178:	e00a      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800517a:	f7fb f9eb 	bl	8000554 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b64      	cmp	r3, #100	; 0x64
 8005186:	d903      	bls.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e0ba      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800518c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005190:	4b5e      	ldr	r3, [pc, #376]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005198:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800519c:	d0ed      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d003      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d009      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d02e      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d12a      	bne.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80051c6:	4b51      	ldr	r3, [pc, #324]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80051c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051cc:	0c1b      	lsrs	r3, r3, #16
 80051ce:	f003 0303 	and.w	r3, r3, #3
 80051d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80051d4:	4b4d      	ldr	r3, [pc, #308]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80051d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051da:	0f1b      	lsrs	r3, r3, #28
 80051dc:	f003 0307 	and.w	r3, r3, #7
 80051e0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	019a      	lsls	r2, r3, #6
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	041b      	lsls	r3, r3, #16
 80051ec:	431a      	orrs	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	061b      	lsls	r3, r3, #24
 80051f4:	431a      	orrs	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	071b      	lsls	r3, r3, #28
 80051fa:	4944      	ldr	r1, [pc, #272]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005202:	4b42      	ldr	r3, [pc, #264]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005204:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005208:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005210:	3b01      	subs	r3, #1
 8005212:	021b      	lsls	r3, r3, #8
 8005214:	493d      	ldr	r1, [pc, #244]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005216:	4313      	orrs	r3, r2
 8005218:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d022      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800522c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005230:	d11d      	bne.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005232:	4b36      	ldr	r3, [pc, #216]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005238:	0e1b      	lsrs	r3, r3, #24
 800523a:	f003 030f 	and.w	r3, r3, #15
 800523e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005240:	4b32      	ldr	r3, [pc, #200]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005246:	0f1b      	lsrs	r3, r3, #28
 8005248:	f003 0307 	and.w	r3, r3, #7
 800524c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	695b      	ldr	r3, [r3, #20]
 8005252:	019a      	lsls	r2, r3, #6
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a1b      	ldr	r3, [r3, #32]
 8005258:	041b      	lsls	r3, r3, #16
 800525a:	431a      	orrs	r2, r3
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	061b      	lsls	r3, r3, #24
 8005260:	431a      	orrs	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	071b      	lsls	r3, r3, #28
 8005266:	4929      	ldr	r1, [pc, #164]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005268:	4313      	orrs	r3, r2
 800526a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0308 	and.w	r3, r3, #8
 8005276:	2b00      	cmp	r3, #0
 8005278:	d028      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800527a:	4b24      	ldr	r3, [pc, #144]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800527c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005280:	0e1b      	lsrs	r3, r3, #24
 8005282:	f003 030f 	and.w	r3, r3, #15
 8005286:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005288:	4b20      	ldr	r3, [pc, #128]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800528a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800528e:	0c1b      	lsrs	r3, r3, #16
 8005290:	f003 0303 	and.w	r3, r3, #3
 8005294:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	019a      	lsls	r2, r3, #6
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	041b      	lsls	r3, r3, #16
 80052a0:	431a      	orrs	r2, r3
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	061b      	lsls	r3, r3, #24
 80052a6:	431a      	orrs	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	69db      	ldr	r3, [r3, #28]
 80052ac:	071b      	lsls	r3, r3, #28
 80052ae:	4917      	ldr	r1, [pc, #92]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80052b6:	4b15      	ldr	r3, [pc, #84]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80052b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c4:	4911      	ldr	r1, [pc, #68]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80052cc:	4b0f      	ldr	r3, [pc, #60]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a0e      	ldr	r2, [pc, #56]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80052d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052d8:	f7fb f93c 	bl	8000554 <HAL_GetTick>
 80052dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052de:	e008      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80052e0:	f7fb f938 	bl	8000554 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b64      	cmp	r3, #100	; 0x64
 80052ec:	d901      	bls.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e007      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052f2:	4b06      	ldr	r3, [pc, #24]	; (800530c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052fe:	d1ef      	bne.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3720      	adds	r7, #32
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	40023800 	.word	0x40023800

08005310 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005310:	b480      	push	{r7}
 8005312:	b087      	sub	sp, #28
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005318:	2300      	movs	r3, #0
 800531a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800531c:	2300      	movs	r3, #0
 800531e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8005320:	2300      	movs	r3, #0
 8005322:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8005324:	2300      	movs	r3, #0
 8005326:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800532e:	f040 8086 	bne.w	800543e <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 8005332:	4b8d      	ldr	r3, [pc, #564]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005338:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005340:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005348:	d03e      	beq.n	80053c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 800534a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800534e:	d073      	beq.n	8005438 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8005350:	2b00      	cmp	r3, #0
 8005352:	d000      	beq.n	8005356 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8005354:	e074      	b.n	8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005356:	4b84      	ldr	r3, [pc, #528]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d108      	bne.n	8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005362:	4b81      	ldr	r3, [pc, #516]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800536a:	4a80      	ldr	r2, [pc, #512]	; (800556c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800536c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005370:	613b      	str	r3, [r7, #16]
 8005372:	e007      	b.n	8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005374:	4b7c      	ldr	r3, [pc, #496]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800537c:	4a7c      	ldr	r2, [pc, #496]	; (8005570 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800537e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005382:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8005384:	4b78      	ldr	r3, [pc, #480]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800538a:	0e1b      	lsrs	r3, r3, #24
 800538c:	f003 030f 	and.w	r3, r3, #15
 8005390:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005392:	4b75      	ldr	r3, [pc, #468]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005398:	099b      	lsrs	r3, r3, #6
 800539a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	fb02 f203 	mul.w	r2, r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053aa:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80053ac:	4b6e      	ldr	r3, [pc, #440]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80053ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053b2:	0a1b      	lsrs	r3, r3, #8
 80053b4:	f003 031f 	and.w	r3, r3, #31
 80053b8:	3301      	adds	r3, #1
 80053ba:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c4:	617b      	str	r3, [r7, #20]
        break;
 80053c6:	e03b      	b.n	8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80053c8:	4b67      	ldr	r3, [pc, #412]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d108      	bne.n	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80053d4:	4b64      	ldr	r3, [pc, #400]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053dc:	4a63      	ldr	r2, [pc, #396]	; (800556c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80053de:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e2:	613b      	str	r3, [r7, #16]
 80053e4:	e007      	b.n	80053f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80053e6:	4b60      	ldr	r3, [pc, #384]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053ee:	4a60      	ldr	r2, [pc, #384]	; (8005570 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80053f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80053f6:	4b5c      	ldr	r3, [pc, #368]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80053f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053fc:	0e1b      	lsrs	r3, r3, #24
 80053fe:	f003 030f 	and.w	r3, r3, #15
 8005402:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005404:	4b58      	ldr	r3, [pc, #352]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005406:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800540a:	099b      	lsrs	r3, r3, #6
 800540c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	fb02 f203 	mul.w	r2, r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	fbb2 f3f3 	udiv	r3, r2, r3
 800541c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800541e:	4b52      	ldr	r3, [pc, #328]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005420:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005424:	f003 031f 	and.w	r3, r3, #31
 8005428:	3301      	adds	r3, #1
 800542a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800542c:	697a      	ldr	r2, [r7, #20]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	fbb2 f3f3 	udiv	r3, r2, r3
 8005434:	617b      	str	r3, [r7, #20]
        break;
 8005436:	e003      	b.n	8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005438:	4b4e      	ldr	r3, [pc, #312]	; (8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800543a:	617b      	str	r3, [r7, #20]
        break;
 800543c:	e000      	b.n	8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 800543e:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005446:	f040 8086 	bne.w	8005556 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 800544a:	4b47      	ldr	r3, [pc, #284]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800544c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005450:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005458:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005460:	d03e      	beq.n	80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8005462:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005466:	d073      	beq.n	8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8005468:	2b00      	cmp	r3, #0
 800546a:	d000      	beq.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800546c:	e074      	b.n	8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800546e:	4b3e      	ldr	r3, [pc, #248]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d108      	bne.n	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800547a:	4b3b      	ldr	r3, [pc, #236]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005482:	4a3a      	ldr	r2, [pc, #232]	; (800556c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8005484:	fbb2 f3f3 	udiv	r3, r2, r3
 8005488:	613b      	str	r3, [r7, #16]
 800548a:	e007      	b.n	800549c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800548c:	4b36      	ldr	r3, [pc, #216]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005494:	4a36      	ldr	r2, [pc, #216]	; (8005570 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005496:	fbb2 f3f3 	udiv	r3, r2, r3
 800549a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800549c:	4b32      	ldr	r3, [pc, #200]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800549e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a2:	0e1b      	lsrs	r3, r3, #24
 80054a4:	f003 030f 	and.w	r3, r3, #15
 80054a8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80054aa:	4b2f      	ldr	r3, [pc, #188]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80054ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b0:	099b      	lsrs	r3, r3, #6
 80054b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	fb02 f203 	mul.w	r2, r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80054c4:	4b28      	ldr	r3, [pc, #160]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80054c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054ca:	0a1b      	lsrs	r3, r3, #8
 80054cc:	f003 031f 	and.w	r3, r3, #31
 80054d0:	3301      	adds	r3, #1
 80054d2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054dc:	617b      	str	r3, [r7, #20]
        break;
 80054de:	e03b      	b.n	8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80054e0:	4b21      	ldr	r3, [pc, #132]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d108      	bne.n	80054fe <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80054ec:	4b1e      	ldr	r3, [pc, #120]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054f4:	4a1d      	ldr	r2, [pc, #116]	; (800556c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80054f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054fa:	613b      	str	r3, [r7, #16]
 80054fc:	e007      	b.n	800550e <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80054fe:	4b1a      	ldr	r3, [pc, #104]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005506:	4a1a      	ldr	r2, [pc, #104]	; (8005570 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8005508:	fbb2 f3f3 	udiv	r3, r2, r3
 800550c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800550e:	4b16      	ldr	r3, [pc, #88]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005510:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005514:	0e1b      	lsrs	r3, r3, #24
 8005516:	f003 030f 	and.w	r3, r3, #15
 800551a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800551c:	4b12      	ldr	r3, [pc, #72]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800551e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005522:	099b      	lsrs	r3, r3, #6
 8005524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	fb02 f203 	mul.w	r2, r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	fbb2 f3f3 	udiv	r3, r2, r3
 8005534:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8005536:	4b0c      	ldr	r3, [pc, #48]	; (8005568 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8005538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800553c:	f003 031f 	and.w	r3, r3, #31
 8005540:	3301      	adds	r3, #1
 8005542:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	fbb2 f3f3 	udiv	r3, r2, r3
 800554c:	617b      	str	r3, [r7, #20]
        break;
 800554e:	e003      	b.n	8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005550:	4b08      	ldr	r3, [pc, #32]	; (8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8005552:	617b      	str	r3, [r7, #20]
        break;
 8005554:	e000      	b.n	8005558 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 8005556:	bf00      	nop

  return frequency;
 8005558:	697b      	ldr	r3, [r7, #20]
}
 800555a:	4618      	mov	r0, r3
 800555c:	371c      	adds	r7, #28
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	40023800 	.word	0x40023800
 800556c:	00f42400 	.word	0x00f42400
 8005570:	017d7840 	.word	0x017d7840
 8005574:	00bb8000 	.word	0x00bb8000

08005578 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e06b      	b.n	8005662 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	7f5b      	ldrb	r3, [r3, #29]
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	d105      	bne.n	80055a0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f00f fa72 	bl	8014a84 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	22ca      	movs	r2, #202	; 0xca
 80055ac:	625a      	str	r2, [r3, #36]	; 0x24
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2253      	movs	r2, #83	; 0x53
 80055b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 fb00 	bl	8005bbc <RTC_EnterInitMode>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d008      	beq.n	80055d4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	22ff      	movs	r2, #255	; 0xff
 80055c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2204      	movs	r2, #4
 80055ce:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e046      	b.n	8005662 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6899      	ldr	r1, [r3, #8]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	4b23      	ldr	r3, [pc, #140]	; (800566c <HAL_RTC_Init+0xf4>)
 80055e0:	400b      	ands	r3, r1
 80055e2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6899      	ldr	r1, [r3, #8]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	431a      	orrs	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	695b      	ldr	r3, [r3, #20]
 80055f8:	431a      	orrs	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	68d2      	ldr	r2, [r2, #12]
 800560a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6919      	ldr	r1, [r3, #16]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	041a      	lsls	r2, r3, #16
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	430a      	orrs	r2, r1
 800561e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68da      	ldr	r2, [r3, #12]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800562e:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f022 0208 	bic.w	r2, r2, #8
 800563e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	699a      	ldr	r2, [r3, #24]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	430a      	orrs	r2, r1
 8005650:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	22ff      	movs	r2, #255	; 0xff
 8005658:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005660:	2300      	movs	r3, #0
  }
}
 8005662:	4618      	mov	r0, r3
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	ff8fffbf 	.word	0xff8fffbf

08005670 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005670:	b590      	push	{r4, r7, lr}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800567c:	2300      	movs	r3, #0
 800567e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	7f1b      	ldrb	r3, [r3, #28]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d101      	bne.n	800568c <HAL_RTC_SetTime+0x1c>
 8005688:	2302      	movs	r3, #2
 800568a:	e0a8      	b.n	80057de <HAL_RTC_SetTime+0x16e>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2201      	movs	r2, #1
 8005690:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2202      	movs	r2, #2
 8005696:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d126      	bne.n	80056ec <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d102      	bne.n	80056b2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	2200      	movs	r2, #0
 80056b0:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 faac 	bl	8005c14 <RTC_ByteToBcd2>
 80056bc:	4603      	mov	r3, r0
 80056be:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	785b      	ldrb	r3, [r3, #1]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f000 faa5 	bl	8005c14 <RTC_ByteToBcd2>
 80056ca:	4603      	mov	r3, r0
 80056cc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80056ce:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	789b      	ldrb	r3, [r3, #2]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 fa9d 	bl	8005c14 <RTC_ByteToBcd2>
 80056da:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80056dc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	7b1b      	ldrb	r3, [r3, #12]
 80056e4:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80056e6:	4313      	orrs	r3, r2
 80056e8:	617b      	str	r3, [r7, #20]
 80056ea:	e018      	b.n	800571e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d102      	bne.n	8005700 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	2200      	movs	r2, #0
 80056fe:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	785b      	ldrb	r3, [r3, #1]
 800570a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800570c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8005712:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	7b1b      	ldrb	r3, [r3, #12]
 8005718:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800571a:	4313      	orrs	r3, r2
 800571c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	22ca      	movs	r2, #202	; 0xca
 8005724:	625a      	str	r2, [r3, #36]	; 0x24
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2253      	movs	r2, #83	; 0x53
 800572c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f000 fa44 	bl	8005bbc <RTC_EnterInitMode>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00b      	beq.n	8005752 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	22ff      	movs	r2, #255	; 0xff
 8005740:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2204      	movs	r2, #4
 8005746:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e045      	b.n	80057de <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	6979      	ldr	r1, [r7, #20]
 8005758:	4b23      	ldr	r3, [pc, #140]	; (80057e8 <HAL_RTC_SetTime+0x178>)
 800575a:	400b      	ands	r3, r1
 800575c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800576c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	6899      	ldr	r1, [r3, #8]
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	691a      	ldr	r2, [r3, #16]
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	431a      	orrs	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	430a      	orrs	r2, r1
 8005784:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68da      	ldr	r2, [r3, #12]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005794:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f003 0320 	and.w	r3, r3, #32
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d111      	bne.n	80057c8 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f000 f9e1 	bl	8005b6c <HAL_RTC_WaitForSynchro>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00b      	beq.n	80057c8 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	22ff      	movs	r2, #255	; 0xff
 80057b6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2204      	movs	r2, #4
 80057bc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e00a      	b.n	80057de <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	22ff      	movs	r2, #255	; 0xff
 80057ce:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2201      	movs	r2, #1
 80057d4:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80057dc:	2300      	movs	r3, #0
  }
}
 80057de:	4618      	mov	r0, r3
 80057e0:	371c      	adds	r7, #28
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd90      	pop	{r4, r7, pc}
 80057e6:	bf00      	nop
 80057e8:	007f7f7f 	.word	0x007f7f7f

080057ec <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80057ec:	b590      	push	{r4, r7, lr}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80057f8:	2300      	movs	r3, #0
 80057fa:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	7f1b      	ldrb	r3, [r3, #28]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d101      	bne.n	8005808 <HAL_RTC_SetDate+0x1c>
 8005804:	2302      	movs	r3, #2
 8005806:	e092      	b.n	800592e <HAL_RTC_SetDate+0x142>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2201      	movs	r2, #1
 800580c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2202      	movs	r2, #2
 8005812:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d10e      	bne.n	8005838 <HAL_RTC_SetDate+0x4c>
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	785b      	ldrb	r3, [r3, #1]
 800581e:	f003 0310 	and.w	r3, r3, #16
 8005822:	2b00      	cmp	r3, #0
 8005824:	d008      	beq.n	8005838 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	785b      	ldrb	r3, [r3, #1]
 800582a:	f023 0310 	bic.w	r3, r3, #16
 800582e:	b2db      	uxtb	r3, r3
 8005830:	330a      	adds	r3, #10
 8005832:	b2da      	uxtb	r2, r3
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d11c      	bne.n	8005878 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	78db      	ldrb	r3, [r3, #3]
 8005842:	4618      	mov	r0, r3
 8005844:	f000 f9e6 	bl	8005c14 <RTC_ByteToBcd2>
 8005848:	4603      	mov	r3, r0
 800584a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	785b      	ldrb	r3, [r3, #1]
 8005850:	4618      	mov	r0, r3
 8005852:	f000 f9df 	bl	8005c14 <RTC_ByteToBcd2>
 8005856:	4603      	mov	r3, r0
 8005858:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800585a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	789b      	ldrb	r3, [r3, #2]
 8005860:	4618      	mov	r0, r3
 8005862:	f000 f9d7 	bl	8005c14 <RTC_ByteToBcd2>
 8005866:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8005868:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8005872:	4313      	orrs	r3, r2
 8005874:	617b      	str	r3, [r7, #20]
 8005876:	e00e      	b.n	8005896 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	78db      	ldrb	r3, [r3, #3]
 800587c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	785b      	ldrb	r3, [r3, #1]
 8005882:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005884:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800588a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8005892:	4313      	orrs	r3, r2
 8005894:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	22ca      	movs	r2, #202	; 0xca
 800589c:	625a      	str	r2, [r3, #36]	; 0x24
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2253      	movs	r2, #83	; 0x53
 80058a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f000 f988 	bl	8005bbc <RTC_EnterInitMode>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00b      	beq.n	80058ca <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	22ff      	movs	r2, #255	; 0xff
 80058b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2204      	movs	r2, #4
 80058be:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e031      	b.n	800592e <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	6979      	ldr	r1, [r7, #20]
 80058d0:	4b19      	ldr	r3, [pc, #100]	; (8005938 <HAL_RTC_SetDate+0x14c>)
 80058d2:	400b      	ands	r3, r1
 80058d4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68da      	ldr	r2, [r3, #12]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058e4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f003 0320 	and.w	r3, r3, #32
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d111      	bne.n	8005918 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f000 f939 	bl	8005b6c <HAL_RTC_WaitForSynchro>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00b      	beq.n	8005918 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	22ff      	movs	r2, #255	; 0xff
 8005906:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2204      	movs	r2, #4
 800590c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e00a      	b.n	800592e <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	22ff      	movs	r2, #255	; 0xff
 800591e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2201      	movs	r2, #1
 8005924:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800592c:	2300      	movs	r3, #0
  }
}
 800592e:	4618      	mov	r0, r3
 8005930:	371c      	adds	r7, #28
 8005932:	46bd      	mov	sp, r7
 8005934:	bd90      	pop	{r4, r7, pc}
 8005936:	bf00      	nop
 8005938:	00ffff3f 	.word	0x00ffff3f

0800593c <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800593c:	b590      	push	{r4, r7, lr}
 800593e:	b089      	sub	sp, #36	; 0x24
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8005948:	2300      	movs	r3, #0
 800594a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800594c:	2300      	movs	r3, #0
 800594e:	61fb      	str	r3, [r7, #28]
 8005950:	2300      	movs	r3, #0
 8005952:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	7f1b      	ldrb	r3, [r3, #28]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d101      	bne.n	8005960 <HAL_RTC_SetAlarm+0x24>
 800595c:	2302      	movs	r3, #2
 800595e:	e101      	b.n	8005b64 <HAL_RTC_SetAlarm+0x228>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2201      	movs	r2, #1
 8005964:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2202      	movs	r2, #2
 800596a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d137      	bne.n	80059e2 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800597c:	2b00      	cmp	r3, #0
 800597e:	d102      	bne.n	8005986 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	2200      	movs	r2, #0
 8005984:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	4618      	mov	r0, r3
 800598c:	f000 f942 	bl	8005c14 <RTC_ByteToBcd2>
 8005990:	4603      	mov	r3, r0
 8005992:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	785b      	ldrb	r3, [r3, #1]
 8005998:	4618      	mov	r0, r3
 800599a:	f000 f93b 	bl	8005c14 <RTC_ByteToBcd2>
 800599e:	4603      	mov	r3, r0
 80059a0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80059a2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	789b      	ldrb	r3, [r3, #2]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f000 f933 	bl	8005c14 <RTC_ByteToBcd2>
 80059ae:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80059b0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	7b1b      	ldrb	r3, [r3, #12]
 80059b8:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80059ba:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80059c4:	4618      	mov	r0, r3
 80059c6:	f000 f925 	bl	8005c14 <RTC_ByteToBcd2>
 80059ca:	4603      	mov	r3, r0
 80059cc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80059ce:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80059d6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80059dc:	4313      	orrs	r3, r2
 80059de:	61fb      	str	r3, [r7, #28]
 80059e0:	e023      	b.n	8005a2a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d102      	bne.n	80059f6 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	2200      	movs	r2, #0
 80059f4:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	785b      	ldrb	r3, [r3, #1]
 8005a00:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8005a02:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8005a08:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	7b1b      	ldrb	r3, [r3, #12]
 8005a0e:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005a10:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a18:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005a1a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8005a20:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8005a26:	4313      	orrs	r3, r2
 8005a28:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	22ca      	movs	r2, #202	; 0xca
 8005a3c:	625a      	str	r2, [r3, #36]	; 0x24
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2253      	movs	r2, #83	; 0x53
 8005a44:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a4e:	d13f      	bne.n	8005ad0 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689a      	ldr	r2, [r3, #8]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a5e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689a      	ldr	r2, [r3, #8]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a6e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a70:	f7fa fd70 	bl	8000554 <HAL_GetTick>
 8005a74:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005a76:	e013      	b.n	8005aa0 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005a78:	f7fa fd6c 	bl	8000554 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a86:	d90b      	bls.n	8005aa0 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	22ff      	movs	r2, #255	; 0xff
 8005a8e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2203      	movs	r2, #3
 8005a94:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e061      	b.n	8005b64 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d0e4      	beq.n	8005a78 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	69fa      	ldr	r2, [r7, #28]
 8005ab4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	689a      	ldr	r2, [r3, #8]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005acc:	609a      	str	r2, [r3, #8]
 8005ace:	e03e      	b.n	8005b4e <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689a      	ldr	r2, [r3, #8]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005ade:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689a      	ldr	r2, [r3, #8]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005aee:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005af0:	f7fa fd30 	bl	8000554 <HAL_GetTick>
 8005af4:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8005af6:	e013      	b.n	8005b20 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005af8:	f7fa fd2c 	bl	8000554 <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b06:	d90b      	bls.n	8005b20 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	22ff      	movs	r2, #255	; 0xff
 8005b0e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2203      	movs	r2, #3
 8005b14:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	e021      	b.n	8005b64 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d0e4      	beq.n	8005af8 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	69fa      	ldr	r2, [r7, #28]
 8005b34:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689a      	ldr	r2, [r3, #8]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b4c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	22ff      	movs	r2, #255	; 0xff
 8005b54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3724      	adds	r7, #36	; 0x24
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd90      	pop	{r4, r7, pc}

08005b6c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005b74:	2300      	movs	r3, #0
 8005b76:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68da      	ldr	r2, [r3, #12]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b86:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b88:	f7fa fce4 	bl	8000554 <HAL_GetTick>
 8005b8c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005b8e:	e009      	b.n	8005ba4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005b90:	f7fa fce0 	bl	8000554 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b9e:	d901      	bls.n	8005ba4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005ba0:	2303      	movs	r3, #3
 8005ba2:	e007      	b.n	8005bb4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	f003 0320 	and.w	r3, r3, #32
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d0ee      	beq.n	8005b90 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d119      	bne.n	8005c0a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f04f 32ff 	mov.w	r2, #4294967295
 8005bde:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005be0:	f7fa fcb8 	bl	8000554 <HAL_GetTick>
 8005be4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005be6:	e009      	b.n	8005bfc <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005be8:	f7fa fcb4 	bl	8000554 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bf6:	d901      	bls.n	8005bfc <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e007      	b.n	8005c0c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d0ee      	beq.n	8005be8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8005c22:	e005      	b.n	8005c30 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	3301      	adds	r3, #1
 8005c28:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8005c2a:	79fb      	ldrb	r3, [r7, #7]
 8005c2c:	3b0a      	subs	r3, #10
 8005c2e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8005c30:	79fb      	ldrb	r3, [r7, #7]
 8005c32:	2b09      	cmp	r3, #9
 8005c34:	d8f6      	bhi.n	8005c24 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	011b      	lsls	r3, r3, #4
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	79fb      	ldrb	r3, [r7, #7]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	b2db      	uxtb	r3, r3
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3714      	adds	r7, #20
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b087      	sub	sp, #28
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	7f1b      	ldrb	r3, [r3, #28]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d101      	bne.n	8005c6c <HAL_RTCEx_SetTimeStamp+0x1c>
 8005c68:	2302      	movs	r3, #2
 8005c6a:	e03e      	b.n	8005cea <HAL_RTCEx_SetTimeStamp+0x9a>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2202      	movs	r2, #2
 8005c76:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689a      	ldr	r2, [r3, #8]
 8005c7e:	4b1e      	ldr	r3, [pc, #120]	; (8005cf8 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8005c80:	4013      	ands	r3, r2
 8005c82:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8005c84:	697a      	ldr	r2, [r7, #20]
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	22ca      	movs	r2, #202	; 0xca
 8005c92:	625a      	str	r2, [r3, #36]	; 0x24
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2253      	movs	r2, #83	; 0x53
 8005c9a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f022 0206 	bic.w	r2, r2, #6
 8005caa:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689a      	ldr	r2, [r3, #8]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cd2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	22ff      	movs	r2, #255	; 0xff
 8005cda:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	371c      	adds	r7, #28
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	fffff7f7 	.word	0xfffff7f7

08005cfc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b088      	sub	sp, #32
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8005d04:	2300      	movs	r3, #0
 8005d06:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e149      	b.n	8005fae <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d106      	bne.n	8005d34 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f00f fa78 	bl	8015224 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2202      	movs	r2, #2
 8005d38:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 f94f 	bl	8005fe0 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d007      	beq.n	8005d5a <HAL_SAI_Init+0x5e>
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d302      	bcc.n	8005d54 <HAL_SAI_Init+0x58>
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d006      	beq.n	8005d60 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8005d52:	e008      	b.n	8005d66 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 8005d54:	2300      	movs	r3, #0
 8005d56:	61fb      	str	r3, [r7, #28]
      break;
 8005d58:	e005      	b.n	8005d66 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005d5a:	2310      	movs	r3, #16
 8005d5c:	61fb      	str	r3, [r7, #28]
      break;
 8005d5e:	e002      	b.n	8005d66 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005d60:	2320      	movs	r3, #32
 8005d62:	61fb      	str	r3, [r7, #28]
      break;
 8005d64:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	2b03      	cmp	r3, #3
 8005d6c:	d81d      	bhi.n	8005daa <HAL_SAI_Init+0xae>
 8005d6e:	a201      	add	r2, pc, #4	; (adr r2, 8005d74 <HAL_SAI_Init+0x78>)
 8005d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d74:	08005d85 	.word	0x08005d85
 8005d78:	08005d8b 	.word	0x08005d8b
 8005d7c:	08005d93 	.word	0x08005d93
 8005d80:	08005d9b 	.word	0x08005d9b
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8005d84:	2300      	movs	r3, #0
 8005d86:	617b      	str	r3, [r7, #20]
      }
      break;
 8005d88:	e010      	b.n	8005dac <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8005d8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d8e:	617b      	str	r3, [r7, #20]
      }
      break;
 8005d90:	e00c      	b.n	8005dac <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8005d92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d96:	617b      	str	r3, [r7, #20]
      }
      break;
 8005d98:	e008      	b.n	8005dac <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8005d9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d9e:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	f043 0301 	orr.w	r3, r3, #1
 8005da6:	61fb      	str	r3, [r7, #28]
      }
      break;
 8005da8:	e000      	b.n	8005dac <HAL_SAI_Init+0xb0>
  default:
    break;
 8005daa:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a81      	ldr	r2, [pc, #516]	; (8005fb8 <HAL_SAI_Init+0x2bc>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d004      	beq.n	8005dc0 <HAL_SAI_Init+0xc4>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a80      	ldr	r2, [pc, #512]	; (8005fbc <HAL_SAI_Init+0x2c0>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d103      	bne.n	8005dc8 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8005dc0:	4a7f      	ldr	r2, [pc, #508]	; (8005fc0 <HAL_SAI_Init+0x2c4>)
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	6013      	str	r3, [r2, #0]
 8005dc6:	e002      	b.n	8005dce <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005dc8:	4a7e      	ldr	r2, [pc, #504]	; (8005fc4 <HAL_SAI_Init+0x2c8>)
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	69db      	ldr	r3, [r3, #28]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d043      	beq.n	8005e5e <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a76      	ldr	r2, [pc, #472]	; (8005fb8 <HAL_SAI_Init+0x2bc>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d004      	beq.n	8005dee <HAL_SAI_Init+0xf2>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a74      	ldr	r2, [pc, #464]	; (8005fbc <HAL_SAI_Init+0x2c0>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d104      	bne.n	8005df8 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005dee:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005df2:	f7ff fa8d 	bl	8005310 <HAL_RCCEx_GetPeriphCLKFreq>
 8005df6:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a72      	ldr	r2, [pc, #456]	; (8005fc8 <HAL_SAI_Init+0x2cc>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d004      	beq.n	8005e0c <HAL_SAI_Init+0x110>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a71      	ldr	r2, [pc, #452]	; (8005fcc <HAL_SAI_Init+0x2d0>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d104      	bne.n	8005e16 <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005e0c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005e10:	f7ff fa7e 	bl	8005310 <HAL_RCCEx_GetPeriphCLKFreq>
 8005e14:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	4413      	add	r3, r2
 8005e1e:	005b      	lsls	r3, r3, #1
 8005e20:	461a      	mov	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	69db      	ldr	r3, [r3, #28]
 8005e26:	025b      	lsls	r3, r3, #9
 8005e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e2c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	4a67      	ldr	r2, [pc, #412]	; (8005fd0 <HAL_SAI_Init+0x2d4>)
 8005e32:	fba2 2303 	umull	r2, r3, r2, r3
 8005e36:	08da      	lsrs	r2, r3, #3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8005e3c:	68f9      	ldr	r1, [r7, #12]
 8005e3e:	4b64      	ldr	r3, [pc, #400]	; (8005fd0 <HAL_SAI_Init+0x2d4>)
 8005e40:	fba3 2301 	umull	r2, r3, r3, r1
 8005e44:	08da      	lsrs	r2, r3, #3
 8005e46:	4613      	mov	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	005b      	lsls	r3, r3, #1
 8005e4e:	1aca      	subs	r2, r1, r3
 8005e50:	2a08      	cmp	r2, #8
 8005e52:	d904      	bls.n	8005e5e <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a1b      	ldr	r3, [r3, #32]
 8005e58:	1c5a      	adds	r2, r3, #1
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	621a      	str	r2, [r3, #32]
    }
  }

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d003      	beq.n	8005e6e <HAL_SAI_Init+0x172>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d109      	bne.n	8005e82 <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d101      	bne.n	8005e7a <HAL_SAI_Init+0x17e>
 8005e76:	2300      	movs	r3, #0
 8005e78:	e001      	b.n	8005e7e <HAL_SAI_Init+0x182>
 8005e7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e7e:	61bb      	str	r3, [r7, #24]
 8005e80:	e008      	b.n	8005e94 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d102      	bne.n	8005e90 <HAL_SAI_Init+0x194>
 8005e8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e8e:	e000      	b.n	8005e92 <HAL_SAI_Init+0x196>
 8005e90:	2300      	movs	r3, #0
 8005e92:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6819      	ldr	r1, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	4b4d      	ldr	r3, [pc, #308]	; (8005fd4 <HAL_SAI_Init+0x2d8>)
 8005ea0:	400b      	ands	r3, r1
 8005ea2:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6819      	ldr	r1, [r3, #0]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb2:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005eb8:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8005ecc:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005ed8:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	051b      	lsls	r3, r3, #20
 8005ee0:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	6859      	ldr	r1, [r3, #4]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	4b38      	ldr	r3, [pc, #224]	; (8005fd8 <HAL_SAI_Init+0x2dc>)
 8005ef6:	400b      	ands	r3, r1
 8005ef8:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	6859      	ldr	r1, [r3, #4]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	699a      	ldr	r2, [r3, #24]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f08:	431a      	orrs	r2, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0e:	431a      	orrs	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	430a      	orrs	r2, r1
 8005f16:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6899      	ldr	r1, [r3, #8]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	4b2e      	ldr	r3, [pc, #184]	; (8005fdc <HAL_SAI_Init+0x2e0>)
 8005f24:	400b      	ands	r3, r1
 8005f26:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	6899      	ldr	r1, [r3, #8]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f32:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8005f38:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8005f3e:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8005f44:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8005f4e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	430a      	orrs	r2, r1
 8005f56:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68d9      	ldr	r1, [r3, #12]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	f24f 0320 	movw	r3, #61472	; 0xf020
 8005f66:	400b      	ands	r3, r1
 8005f68:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68d9      	ldr	r1, [r3, #12]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f78:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f7e:	041b      	lsls	r3, r3, #16
 8005f80:	431a      	orrs	r2, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f86:	3b01      	subs	r3, #1
 8005f88:	021b      	lsls	r3, r3, #8
 8005f8a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	430a      	orrs	r2, r1
 8005f92:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3720      	adds	r7, #32
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	40015804 	.word	0x40015804
 8005fbc:	40015824 	.word	0x40015824
 8005fc0:	40015800 	.word	0x40015800
 8005fc4:	40015c00 	.word	0x40015c00
 8005fc8:	40015c04 	.word	0x40015c04
 8005fcc:	40015c24 	.word	0x40015c24
 8005fd0:	cccccccd 	.word	0xcccccccd
 8005fd4:	ff05c010 	.word	0xff05c010
 8005fd8:	ffff1ff0 	.word	0xffff1ff0
 8005fdc:	fff88000 	.word	0xfff88000

08005fe0 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005fe0:	b490      	push	{r4, r7}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8005fe8:	4b16      	ldr	r3, [pc, #88]	; (8006044 <SAI_Disable+0x64>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a16      	ldr	r2, [pc, #88]	; (8006048 <SAI_Disable+0x68>)
 8005fee:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff2:	0b1b      	lsrs	r3, r3, #12
 8005ff4:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006008:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800600a:	4623      	mov	r3, r4
 800600c:	1e5c      	subs	r4, r3, #1
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10a      	bne.n	8006028 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006018:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	73fb      	strb	r3, [r7, #15]
      break;
 8006026:	e006      	b.n	8006036 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1e9      	bne.n	800600a <SAI_Disable+0x2a>

  return status;
 8006036:	7bfb      	ldrb	r3, [r7, #15]
}
 8006038:	4618      	mov	r0, r3
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bc90      	pop	{r4, r7}
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	2000002c 	.word	0x2000002c
 8006048:	95cbec1b 	.word	0x95cbec1b

0800604c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e01d      	b.n	800609a <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b00      	cmp	r3, #0
 8006068:	d105      	bne.n	8006076 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f00e fd21 	bl	8014ab8 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2203      	movs	r2, #3
 800607a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f80f 	bl	80060a2 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3708      	adds	r7, #8
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80060a2:	b5b0      	push	{r4, r5, r7, lr}
 80060a4:	b08e      	sub	sp, #56	; 0x38
 80060a6:	af04      	add	r7, sp, #16
 80060a8:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80060aa:	2300      	movs	r3, #0
 80060ac:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80060ae:	2300      	movs	r3, #0
 80060b0:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80060b2:	2300      	movs	r3, #0
 80060b4:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80060b6:	2300      	movs	r3, #0
 80060b8:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80060ba:	2300      	movs	r3, #0
 80060bc:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80060be:	2300      	movs	r3, #0
 80060c0:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80060c2:	2376      	movs	r3, #118	; 0x76
 80060c4:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681d      	ldr	r5, [r3, #0]
 80060ca:	466c      	mov	r4, sp
 80060cc:	f107 0318 	add.w	r3, r7, #24
 80060d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80060d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80060d8:	f107 030c 	add.w	r3, r7, #12
 80060dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060de:	4628      	mov	r0, r5
 80060e0:	f003 f84a 	bl	8009178 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	685a      	ldr	r2, [r3, #4]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060f2:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4618      	mov	r0, r3
 80060fa:	f003 f887 	bl	800920c <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	685a      	ldr	r2, [r3, #4]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800610c:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 800610e:	2002      	movs	r0, #2
 8006110:	f7fa fa2c 	bl	800056c <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 fff4 	bl	8007102 <SD_PowerON>
 800611a:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00b      	beq.n	800613a <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	431a      	orrs	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e013      	b.n	8006162 <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 ff18 	bl	8006f70 <SD_InitCard>
 8006140:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8006142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00b      	beq.n	8006160 <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006156:	431a      	orrs	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e000      	b.n	8006162 <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3728      	adds	r7, #40	; 0x28
 8006166:	46bd      	mov	sp, r7
 8006168:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800616c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read  
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b08c      	sub	sp, #48	; 0x30
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
 8006178:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800617a:	2300      	movs	r3, #0
 800617c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d107      	bne.n	8006194 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006188:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e0b0      	b.n	80062f6 <HAL_SD_ReadBlocks_DMA+0x18a>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b01      	cmp	r3, #1
 800619e:	f040 80a9 	bne.w	80062f4 <HAL_SD_ReadBlocks_DMA+0x188>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2200      	movs	r2, #0
 80061a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	441a      	add	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d907      	bls.n	80061c6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e097      	b.n	80062f6 <HAL_SD_ReadBlocks_DMA+0x18a>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2203      	movs	r2, #3
 80061ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2200      	movs	r2, #0
 80061d4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80061e4:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ea:	4a45      	ldr	r2, [pc, #276]	; (8006300 <HAL_SD_ReadBlocks_DMA+0x194>)
 80061ec:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f2:	4a44      	ldr	r2, [pc, #272]	; (8006304 <HAL_SD_ReadBlocks_DMA+0x198>)
 80061f4:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061fa:	2200      	movs	r2, #0
 80061fc:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	3380      	adds	r3, #128	; 0x80
 8006208:	4619      	mov	r1, r3
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	025b      	lsls	r3, r3, #9
 8006210:	089b      	lsrs	r3, r3, #2
 8006212:	f7fa ff2b 	bl	800106c <HAL_DMA_Start_IT>
    
    /* Enable SD DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f042 0208 	orr.w	r2, r2, #8
 8006224:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800622a:	2b01      	cmp	r3, #1
 800622c:	d002      	beq.n	8006234 <HAL_SD_ReadBlocks_DMA+0xc8>
    {
      BlockAdd *= 512U;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	025b      	lsls	r3, r3, #9
 8006232:	607b      	str	r3, [r7, #4]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006234:	f04f 33ff 	mov.w	r3, #4294967295
 8006238:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	025b      	lsls	r3, r3, #9
 800623e:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006240:	2390      	movs	r3, #144	; 0x90
 8006242:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006244:	2302      	movs	r3, #2
 8006246:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006248:	2300      	movs	r3, #0
 800624a:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800624c:	2301      	movs	r3, #1
 800624e:	62bb      	str	r3, [r7, #40]	; 0x28
    SDMMC_ConfigData(hsd->Instance, &config);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f107 0214 	add.w	r2, r7, #20
 8006258:	4611      	mov	r1, r2
 800625a:	4618      	mov	r0, r3
 800625c:	f003 f83e 	bl	80092dc <SDMMC_ConfigData>

    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006268:	4618      	mov	r0, r3
 800626a:	f003 f863 	bl	8009334 <SDMMC_CmdBlockLength>
 800626e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006272:	2b00      	cmp	r3, #0
 8006274:	d010      	beq.n	8006298 <HAL_SD_ReadBlocks_DMA+0x12c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800627e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006286:	431a      	orrs	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e02e      	b.n	80062f6 <HAL_SD_ReadBlocks_DMA+0x18a>
    }
        
    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d90a      	bls.n	80062b4 <HAL_SD_ReadBlocks_DMA+0x148>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2282      	movs	r2, #130	; 0x82
 80062a2:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6879      	ldr	r1, [r7, #4]
 80062aa:	4618      	mov	r0, r3
 80062ac:	f003 f88a 	bl	80093c4 <SDMMC_CmdReadMultiBlock>
 80062b0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80062b2:	e009      	b.n	80062c8 <HAL_SD_ReadBlocks_DMA+0x15c>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2281      	movs	r2, #129	; 0x81
 80062b8:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */ 
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	6879      	ldr	r1, [r7, #4]
 80062c0:	4618      	mov	r0, r3
 80062c2:	f003 f85b 	bl	800937c <SDMMC_CmdReadSingleBlock>
 80062c6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80062c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d010      	beq.n	80062f0 <HAL_SD_ReadBlocks_DMA+0x184>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80062d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062de:	431a      	orrs	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e002      	b.n	80062f6 <HAL_SD_ReadBlocks_DMA+0x18a>
    }

    return HAL_OK;
 80062f0:	2300      	movs	r3, #0
 80062f2:	e000      	b.n	80062f6 <HAL_SD_ReadBlocks_DMA+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80062f4:	2302      	movs	r3, #2
  }
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3730      	adds	r7, #48	; 0x30
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	08006d75 	.word	0x08006d75
 8006304:	08006de3 	.word	0x08006de3

08006308 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b08c      	sub	sp, #48	; 0x30
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]
 8006314:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006316:	2300      	movs	r3, #0
 8006318:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d107      	bne.n	8006330 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006324:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e0b0      	b.n	8006492 <HAL_SD_WriteBlocks_DMA+0x18a>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b01      	cmp	r3, #1
 800633a:	f040 80a9 	bne.w	8006490 <HAL_SD_WriteBlocks_DMA+0x188>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	441a      	add	r2, r3
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800634e:	429a      	cmp	r2, r3
 8006350:	d907      	bls.n	8006362 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006356:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e097      	b.n	8006492 <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2203      	movs	r2, #3
 8006366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2200      	movs	r2, #0
 8006370:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));    
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f042 021a 	orr.w	r2, r2, #26
 8006380:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006386:	4a45      	ldr	r2, [pc, #276]	; (800649c <HAL_SD_WriteBlocks_DMA+0x194>)
 8006388:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638e:	4a44      	ldr	r2, [pc, #272]	; (80064a0 <HAL_SD_WriteBlocks_DMA+0x198>)
 8006390:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006396:	2200      	movs	r2, #0
 8006398:	651a      	str	r2, [r3, #80]	; 0x50
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d002      	beq.n	80063a8 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      BlockAdd *= 512U;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	025b      	lsls	r3, r3, #9
 80063a6:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80063b0:	4618      	mov	r0, r3
 80063b2:	f002 ffbf 	bl	8009334 <SDMMC_CmdBlockLength>
 80063b6:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 80063b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d010      	beq.n	80063e0 <HAL_SD_WriteBlocks_DMA+0xd8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80063c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ce:	431a      	orrs	r2, r3
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e058      	b.n	8006492 <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d90a      	bls.n	80063fc <HAL_SD_WriteBlocks_DMA+0xf4>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	22a0      	movs	r2, #160	; 0xa0
 80063ea:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6879      	ldr	r1, [r7, #4]
 80063f2:	4618      	mov	r0, r3
 80063f4:	f003 f82e 	bl	8009454 <SDMMC_CmdWriteMultiBlock>
 80063f8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80063fa:	e009      	b.n	8006410 <HAL_SD_WriteBlocks_DMA+0x108>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2290      	movs	r2, #144	; 0x90
 8006400:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	6879      	ldr	r1, [r7, #4]
 8006408:	4618      	mov	r0, r3
 800640a:	f002 ffff 	bl	800940c <SDMMC_CmdWriteSingleBlock>
 800640e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006412:	2b00      	cmp	r3, #0
 8006414:	d010      	beq.n	8006438 <HAL_SD_WriteBlocks_DMA+0x130>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800641e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006426:	431a      	orrs	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e02c      	b.n	8006492 <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f042 0208 	orr.w	r2, r2, #8
 8006446:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800644c:	68b9      	ldr	r1, [r7, #8]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	3380      	adds	r3, #128	; 0x80
 8006454:	461a      	mov	r2, r3
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	025b      	lsls	r3, r3, #9
 800645a:	089b      	lsrs	r3, r3, #2
 800645c:	f7fa fe06 	bl	800106c <HAL_DMA_Start_IT>
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006460:	f04f 33ff 	mov.w	r3, #4294967295
 8006464:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	025b      	lsls	r3, r3, #9
 800646a:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800646c:	2390      	movs	r3, #144	; 0x90
 800646e:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006470:	2300      	movs	r3, #0
 8006472:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006474:	2300      	movs	r3, #0
 8006476:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8006478:	2301      	movs	r3, #1
 800647a:	62bb      	str	r3, [r7, #40]	; 0x28
    SDMMC_ConfigData(hsd->Instance, &config);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f107 0214 	add.w	r2, r7, #20
 8006484:	4611      	mov	r1, r2
 8006486:	4618      	mov	r0, r3
 8006488:	f002 ff28 	bl	80092dc <SDMMC_ConfigData>
    
    return HAL_OK;
 800648c:	2300      	movs	r3, #0
 800648e:	e000      	b.n	8006492 <HAL_SD_WriteBlocks_DMA+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8006490:	2302      	movs	r3, #2
  }
}
 8006492:	4618      	mov	r0, r3
 8006494:	3730      	adds	r7, #48	; 0x30
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	08006d4b 	.word	0x08006d4b
 80064a0:	08006de3 	.word	0x08006de3

080064a4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80064ac:	2300      	movs	r3, #0
 80064ae:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDMMC interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DATAEND) != RESET)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f000 808b 	beq.w	80065d6 <HAL_SD_IRQHandler+0x132>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND); 
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80064d8:	63da      	str	r2, [r3, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064de:	f003 0308 	and.w	r3, r3, #8
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d03a      	beq.n	800655c <HAL_SD_IRQHandler+0xb8>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ea:	f003 0302 	and.w	r3, r3, #2
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d105      	bne.n	80064fe <HAL_SD_IRQHandler+0x5a>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f6:	f003 0320 	and.w	r3, r3, #32
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d011      	beq.n	8006522 <HAL_SD_IRQHandler+0x7e>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4618      	mov	r0, r3
 8006504:	f002 ffca 	bl	800949c <SDMMC_CmdStopTransfer>
 8006508:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d008      	beq.n	8006522 <HAL_SD_IRQHandler+0x7e>
        {
          hsd->ErrorCode |= errorstate;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	431a      	orrs	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 f915 	bl	800674c <HAL_SD_ErrorCallback>
#endif
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800652a:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006538:	f003 0301 	and.w	r3, r3, #1
 800653c:	2b00      	cmp	r3, #0
 800653e:	d105      	bne.n	800654c <HAL_SD_IRQHandler+0xa8>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006544:	f003 0302 	and.w	r3, r3, #2
 8006548:	2b00      	cmp	r3, #0
 800654a:	d003      	beq.n	8006554 <HAL_SD_IRQHandler+0xb0>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f00c f90d 	bl	801276c <HAL_SD_RxCpltCallback>
#else
      HAL_SD_ErrorCallback(hsd);
#endif
    }
  }
}
 8006552:	e0f3      	b.n	800673c <HAL_SD_IRQHandler+0x298>
        HAL_SD_TxCpltCallback(hsd);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f00c f8ff 	bl	8012758 <HAL_SD_TxCpltCallback>
}
 800655a:	e0ef      	b.n	800673c <HAL_SD_IRQHandler+0x298>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 80e9 	beq.w	800673c <HAL_SD_IRQHandler+0x298>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656e:	f003 0320 	and.w	r3, r3, #32
 8006572:	2b00      	cmp	r3, #0
 8006574:	d011      	beq.n	800659a <HAL_SD_IRQHandler+0xf6>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4618      	mov	r0, r3
 800657c:	f002 ff8e 	bl	800949c <SDMMC_CmdStopTransfer>
 8006580:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d008      	beq.n	800659a <HAL_SD_IRQHandler+0xf6>
          hsd->ErrorCode |= errorstate;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	431a      	orrs	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 f8d9 	bl	800674c <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f040 80ca 	bne.w	800673c <HAL_SD_IRQHandler+0x298>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ac:	f003 0302 	and.w	r3, r3, #2
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f040 80c3 	bne.w	800673c <HAL_SD_IRQHandler+0x298>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f022 0208 	bic.w	r2, r2, #8
 80065c4:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f00c f8c2 	bl	8012758 <HAL_SD_TxCpltCallback>
}
 80065d4:	e0b2      	b.n	800673c <HAL_SD_IRQHandler+0x298>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXFIFOHE) != RESET)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d008      	beq.n	80065f6 <HAL_SD_IRQHandler+0x152>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_TXFIFOHE);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80065ec:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 ffe4 	bl	80075bc <SD_Write_IT>
}
 80065f4:	e0a2      	b.n	800673c <HAL_SD_IRQHandler+0x298>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXFIFOHF) != RESET)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d008      	beq.n	8006616 <HAL_SD_IRQHandler+0x172>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXFIFOHF);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800660c:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 ffac 	bl	800756c <SD_Read_IT>
}
 8006614:	e092      	b.n	800673c <HAL_SD_IRQHandler+0x298>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_TXUNDERR) != RESET)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800661c:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006620:	2b00      	cmp	r3, #0
 8006622:	f000 808b 	beq.w	800673c <HAL_SD_IRQHandler+0x298>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800662c:	f003 0302 	and.w	r3, r3, #2
 8006630:	2b00      	cmp	r3, #0
 8006632:	d005      	beq.n	8006640 <HAL_SD_IRQHandler+0x19c>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006638:	f043 0202 	orr.w	r2, r3, #2
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006646:	f003 0308 	and.w	r3, r3, #8
 800664a:	2b00      	cmp	r3, #0
 800664c:	d005      	beq.n	800665a <HAL_SD_IRQHandler+0x1b6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006652:	f043 0208 	orr.w	r2, r3, #8
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006660:	f003 0320 	and.w	r3, r3, #32
 8006664:	2b00      	cmp	r3, #0
 8006666:	d005      	beq.n	8006674 <HAL_SD_IRQHandler+0x1d0>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666c:	f043 0220 	orr.w	r2, r3, #32
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800667a:	f003 0310 	and.w	r3, r3, #16
 800667e:	2b00      	cmp	r3, #0
 8006680:	d005      	beq.n	800668e <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006686:	f043 0210 	orr.w	r2, r3, #16
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006696:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80066a6:	63da      	str	r2, [r3, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d036      	beq.n	8006722 <HAL_SD_IRQHandler+0x27e>
      if(hsd->hdmatx != NULL)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d011      	beq.n	80066e0 <HAL_SD_IRQHandler+0x23c>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c0:	4a20      	ldr	r2, [pc, #128]	; (8006744 <HAL_SD_IRQHandler+0x2a0>)
 80066c2:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7fa fd2f 	bl	800112c <HAL_DMA_Abort_IT>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d033      	beq.n	800673c <HAL_SD_IRQHandler+0x298>
          SD_DMATxAbort(hsd->hdmatx);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d8:	4618      	mov	r0, r3
 80066da:	f000 fbcd 	bl	8006e78 <SD_DMATxAbort>
}
 80066de:	e02d      	b.n	800673c <HAL_SD_IRQHandler+0x298>
      else if(hsd->hdmarx != NULL)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d011      	beq.n	800670c <HAL_SD_IRQHandler+0x268>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ec:	4a16      	ldr	r2, [pc, #88]	; (8006748 <HAL_SD_IRQHandler+0x2a4>)
 80066ee:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066f4:	4618      	mov	r0, r3
 80066f6:	f7fa fd19 	bl	800112c <HAL_DMA_Abort_IT>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d01d      	beq.n	800673c <HAL_SD_IRQHandler+0x298>
          SD_DMARxAbort(hsd->hdmarx);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006704:	4618      	mov	r0, r3
 8006706:	f000 fbf5 	bl	8006ef4 <SD_DMARxAbort>
}
 800670a:	e017      	b.n	800673c <HAL_SD_IRQHandler+0x298>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f00c f812 	bl	8012744 <HAL_SD_AbortCallback>
}
 8006720:	e00c      	b.n	800673c <HAL_SD_IRQHandler+0x298>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006726:	f003 0308 	and.w	r3, r3, #8
 800672a:	2b00      	cmp	r3, #0
 800672c:	d006      	beq.n	800673c <HAL_SD_IRQHandler+0x298>
      hsd->State = HAL_SD_STATE_READY;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2201      	movs	r2, #1
 8006732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 f808 	bl	800674c <HAL_SD_ErrorCallback>
}
 800673c:	bf00      	nop
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	08006e79 	.word	0x08006e79
 8006748:	08006ef5 	.word	0x08006ef5

0800674c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 800676a:	2300      	movs	r3, #0
 800676c:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006772:	0e1b      	lsrs	r3, r3, #24
 8006774:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	099b      	lsrs	r3, r3, #6
 800677a:	b2db      	uxtb	r3, r3
 800677c:	f003 0303 	and.w	r3, r3, #3
 8006780:	b2da      	uxtb	r2, r3
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	089b      	lsrs	r3, r3, #2
 800678a:	b2db      	uxtb	r3, r3
 800678c:	f003 030f 	and.w	r3, r3, #15
 8006790:	b2da      	uxtb	r2, r3
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	b2db      	uxtb	r3, r3
 800679a:	f003 0303 	and.w	r3, r3, #3
 800679e:	b2da      	uxtb	r2, r3
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067a8:	0c1b      	lsrs	r3, r3, #16
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	b2da      	uxtb	r2, r3
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067ba:	0a1b      	lsrs	r3, r3, #8
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	b2da      	uxtb	r2, r3
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	b2da      	uxtb	r2, r3
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067dc:	0e1b      	lsrs	r3, r3, #24
 80067de:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	011b      	lsls	r3, r3, #4
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067f0:	0c1b      	lsrs	r3, r3, #16
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	88db      	ldrh	r3, [r3, #6]
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	091b      	lsrs	r3, r3, #4
 8006800:	b29b      	uxth	r3, r3
 8006802:	f003 030f 	and.w	r3, r3, #15
 8006806:	b29b      	uxth	r3, r3
 8006808:	4313      	orrs	r3, r2
 800680a:	b29a      	uxth	r2, r3
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	b2db      	uxtb	r3, r3
 8006814:	f003 030f 	and.w	r3, r3, #15
 8006818:	b2da      	uxtb	r2, r3
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006822:	0a1b      	lsrs	r3, r3, #8
 8006824:	b2db      	uxtb	r3, r3
 8006826:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	09db      	lsrs	r3, r3, #7
 800682c:	b2db      	uxtb	r3, r3
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	b2da      	uxtb	r2, r3
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	099b      	lsrs	r3, r3, #6
 800683c:	b2db      	uxtb	r3, r3
 800683e:	f003 0301 	and.w	r3, r3, #1
 8006842:	b2da      	uxtb	r2, r3
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	095b      	lsrs	r3, r3, #5
 800684c:	b2db      	uxtb	r3, r3
 800684e:	f003 0301 	and.w	r3, r3, #1
 8006852:	b2da      	uxtb	r2, r3
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	091b      	lsrs	r3, r3, #4
 800685c:	b2db      	uxtb	r3, r3
 800685e:	f003 0301 	and.w	r3, r3, #1
 8006862:	b2da      	uxtb	r2, r3
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	2200      	movs	r2, #0
 800686c:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006872:	2b00      	cmp	r3, #0
 8006874:	f040 8086 	bne.w	8006984 <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	029b      	lsls	r3, r3, #10
 800687c:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006888:	b2db      	uxtb	r3, r3
 800688a:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	691a      	ldr	r2, [r3, #16]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	431a      	orrs	r2, r3
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800689e:	0e1b      	lsrs	r3, r3, #24
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	691a      	ldr	r2, [r3, #16]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	099b      	lsrs	r3, r3, #6
 80068ac:	f003 0303 	and.w	r3, r3, #3
 80068b0:	431a      	orrs	r2, r3
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	08db      	lsrs	r3, r3, #3
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	f003 0307 	and.w	r3, r3, #7
 80068c0:	b2da      	uxtb	r2, r3
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	f003 0307 	and.w	r3, r3, #7
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068d8:	0c1b      	lsrs	r3, r3, #16
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	095b      	lsrs	r3, r3, #5
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	f003 0307 	and.w	r3, r3, #7
 80068e8:	b2da      	uxtb	r2, r3
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	089b      	lsrs	r3, r3, #2
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	f003 0307 	and.w	r3, r3, #7
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	b2db      	uxtb	r3, r3
 8006902:	005b      	lsls	r3, r3, #1
 8006904:	b2db      	uxtb	r3, r3
 8006906:	f003 0306 	and.w	r3, r3, #6
 800690a:	b2da      	uxtb	r2, r3
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006914:	0a1b      	lsrs	r3, r3, #8
 8006916:	b2db      	uxtb	r3, r3
 8006918:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	7e1b      	ldrb	r3, [r3, #24]
 800691e:	b2da      	uxtb	r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	09db      	lsrs	r3, r3, #7
 8006924:	b2db      	uxtb	r3, r3
 8006926:	f003 0301 	and.w	r3, r3, #1
 800692a:	b2db      	uxtb	r3, r3
 800692c:	4313      	orrs	r3, r2
 800692e:	b2da      	uxtb	r2, r3
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	1c5a      	adds	r2, r3, #1
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	7e1b      	ldrb	r3, [r3, #24]
 8006942:	b2db      	uxtb	r3, r3
 8006944:	3302      	adds	r3, #2
 8006946:	2201      	movs	r2, #1
 8006948:	409a      	lsls	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800694e:	fb02 f203 	mul.w	r2, r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	7a1b      	ldrb	r3, [r3, #8]
 800695a:	b2db      	uxtb	r3, r3
 800695c:	461a      	mov	r2, r3
 800695e:	2301      	movs	r3, #1
 8006960:	4093      	lsls	r3, r2
 8006962:	461a      	mov	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006970:	0a52      	lsrs	r2, r2, #9
 8006972:	fb02 f203 	mul.w	r2, r2, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006980:	661a      	str	r2, [r3, #96]	; 0x60
 8006982:	e04d      	b.n	8006a20 <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006988:	2b01      	cmp	r3, #1
 800698a:	d138      	bne.n	80069fe <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006990:	b2db      	uxtb	r3, r3
 8006992:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	041b      	lsls	r3, r3, #16
 8006998:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069a4:	0e1b      	lsrs	r3, r3, #24
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	691a      	ldr	r2, [r3, #16]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	021b      	lsls	r3, r3, #8
 80069b2:	431a      	orrs	r2, r3
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069bc:	0c1b      	lsrs	r3, r3, #16
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	691a      	ldr	r2, [r3, #16]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	431a      	orrs	r2, r3
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069d2:	0a1b      	lsrs	r3, r3, #8
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	3301      	adds	r3, #1
 80069de:	029a      	lsls	r2, r3, #10
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	655a      	str	r2, [r3, #84]	; 0x54
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069f2:	659a      	str	r2, [r3, #88]	; 0x58
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	661a      	str	r2, [r3, #96]	; 0x60
 80069fc:	e010      	b.n	8006a20 <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006a06:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e0c1      	b.n	8006ba4 <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	099b      	lsrs	r3, r3, #6
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	f003 0301 	and.w	r3, r3, #1
 8006a2a:	b2da      	uxtb	r2, r3
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	005b      	lsls	r3, r3, #1
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006a3c:	b2da      	uxtb	r2, r3
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	7e9b      	ldrb	r3, [r3, #26]
 8006a4e:	b2da      	uxtb	r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	09db      	lsrs	r3, r3, #7
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	f003 0301 	and.w	r3, r3, #1
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	b2da      	uxtb	r2, r3
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a6c:	b2da      	uxtb	r2, r3
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a76:	0e1b      	lsrs	r3, r3, #24
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	09db      	lsrs	r3, r3, #7
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	b2da      	uxtb	r2, r3
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	095b      	lsrs	r3, r3, #5
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	f003 0303 	and.w	r3, r3, #3
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	089b      	lsrs	r3, r3, #2
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	f003 0307 	and.w	r3, r3, #7
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	f003 030c 	and.w	r3, r3, #12
 8006ab8:	b2da      	uxtb	r2, r3
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ac2:	0c1b      	lsrs	r3, r3, #16
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	7fdb      	ldrb	r3, [r3, #31]
 8006acc:	b2da      	uxtb	r2, r3
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	099b      	lsrs	r3, r3, #6
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	f003 0303 	and.w	r3, r3, #3
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	4313      	orrs	r3, r2
 8006adc:	b2da      	uxtb	r2, r3
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	095b      	lsrs	r3, r3, #5
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	f003 0301 	and.w	r3, r3, #1
 8006aec:	b2da      	uxtb	r2, r3
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	f003 0301 	and.w	r3, r3, #1
 8006b04:	b2da      	uxtb	r2, r3
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b10:	0a1b      	lsrs	r3, r3, #8
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	09db      	lsrs	r3, r3, #7
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	f003 0301 	and.w	r3, r3, #1
 8006b20:	b2da      	uxtb	r2, r3
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	099b      	lsrs	r3, r3, #6
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	f003 0301 	and.w	r3, r3, #1
 8006b32:	b2da      	uxtb	r2, r3
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	095b      	lsrs	r3, r3, #5
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	f003 0301 	and.w	r3, r3, #1
 8006b44:	b2da      	uxtb	r2, r3
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	091b      	lsrs	r3, r3, #4
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	b2da      	uxtb	r2, r3
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	089b      	lsrs	r3, r3, #2
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	f003 0303 	and.w	r3, r3, #3
 8006b68:	b2da      	uxtb	r2, r3
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	f003 0303 	and.w	r3, r3, #3
 8006b78:	b2da      	uxtb	r2, r3
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	085b      	lsrs	r3, r3, #1
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b92:	b2da      	uxtb	r2, r3
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3714      	adds	r7, #20
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006c08:	b5b0      	push	{r4, r5, r7, lr}
 8006c0a:	b08e      	sub	sp, #56	; 0x38
 8006c0c:	af04      	add	r7, sp, #16
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006c12:	2300      	movs	r3, #0
 8006c14:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2203      	movs	r2, #3
 8006c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c22:	2b03      	cmp	r3, #3
 8006c24:	d02e      	beq.n	8006c84 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c2c:	d106      	bne.n	8006c3c <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c32:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	639a      	str	r2, [r3, #56]	; 0x38
 8006c3a:	e029      	b.n	8006c90 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c42:	d10a      	bne.n	8006c5a <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 fb2e 	bl	80072a6 <SD_WideBus_Enable>
 8006c4a:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c52:	431a      	orrs	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	639a      	str	r2, [r3, #56]	; 0x38
 8006c58:	e01a      	b.n	8006c90 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d10a      	bne.n	8006c76 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 fb6d 	bl	8007340 <SD_WideBus_Disable>
 8006c66:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6e:	431a      	orrs	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	639a      	str	r2, [r3, #56]	; 0x38
 8006c74:	e00c      	b.n	8006c90 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	639a      	str	r2, [r3, #56]	; 0x38
 8006c82:	e005      	b.n	8006c90 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c88:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00a      	beq.n	8006cae <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006ca0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e024      	b.n	8006cf8 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	695b      	ldr	r3, [r3, #20]
 8006cc8:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	699b      	ldr	r3, [r3, #24]
 8006cce:	623b      	str	r3, [r7, #32]
    SDMMC_Init(hsd->Instance, Init);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681d      	ldr	r5, [r3, #0]
 8006cd4:	466c      	mov	r4, sp
 8006cd6:	f107 0318 	add.w	r3, r7, #24
 8006cda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006cde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006ce2:	f107 030c 	add.w	r3, r7, #12
 8006ce6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ce8:	4628      	mov	r0, r5
 8006cea:	f002 fa45 	bl	8009178 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3728      	adds	r7, #40	; 0x28
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bdb0      	pop	{r4, r5, r7, pc}

08006d00 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b086      	sub	sp, #24
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 8006d08:	2304      	movs	r3, #4
 8006d0a:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8006d10:	2300      	movs	r3, #0
 8006d12:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8006d14:	f107 030c 	add.w	r3, r7, #12
 8006d18:	4619      	mov	r1, r3
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fa99 	bl	8007252 <SD_SendStatus>
 8006d20:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d005      	beq.n	8006d34 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	431a      	orrs	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	0a5b      	lsrs	r3, r3, #9
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	f003 030f 	and.w	r3, r3, #15
 8006d3e:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8006d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3718      	adds	r7, #24
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 8006d4a:	b480      	push	{r7}
 8006d4c:	b085      	sub	sp, #20
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d56:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d66:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006d68:	bf00      	nop
 8006d6a:	3714      	adds	r7, #20
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d80:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006d82:	2300      	movs	r3, #0
 8006d84:	60bb      	str	r3, [r7, #8]
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8a:	2b82      	cmp	r3, #130	; 0x82
 8006d8c:	d111      	bne.n	8006db2 <SD_DMAReceiveCplt+0x3e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4618      	mov	r0, r3
 8006d94:	f002 fb82 	bl	800949c <SDMMC_CmdStopTransfer>
 8006d98:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d008      	beq.n	8006db2 <SD_DMAReceiveCplt+0x3e>
    {
      hsd->ErrorCode |= errorstate;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	431a      	orrs	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f7ff fccd 	bl	800674c <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f022 0208 	bic.w	r2, r2, #8
 8006dc0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006dca:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f00b fcc9 	bl	801276c <HAL_SD_RxCpltCallback>
#endif
}
 8006dda:	bf00      	nop
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <SD_DMAError>:
* @brief  DMA SD communication error callback 
* @param  hdma DMA handle
* @retval None
*/
static void SD_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b084      	sub	sp, #16
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dee:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f7fa fb47 	bl	8001484 <HAL_DMA_GetError>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d039      	beq.n	8006e70 <SD_DMAError+0x8e>
  {
    if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d004      	beq.n	8006e10 <SD_DMAError+0x2e>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d12c      	bne.n	8006e6a <SD_DMAError+0x88>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006e18:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006e28:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);
      
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	f7ff ff62 	bl	8006d00 <HAL_SD_GetCardState>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	72fb      	strb	r3, [r7, #11]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006e40:	7afb      	ldrb	r3, [r7, #11]
 8006e42:	2b06      	cmp	r3, #6
 8006e44:	d002      	beq.n	8006e4c <SD_DMAError+0x6a>
 8006e46:	7afb      	ldrb	r3, [r7, #11]
 8006e48:	2b05      	cmp	r3, #5
 8006e4a:	d10a      	bne.n	8006e62 <SD_DMAError+0x80>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4618      	mov	r0, r3
 8006e52:	f002 fb23 	bl	800949c <SDMMC_CmdStopTransfer>
 8006e56:	4602      	mov	r2, r0
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5c:	431a      	orrs	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	639a      	str	r2, [r3, #56]	; 0x38
      }
      
      hsd->State= HAL_SD_STATE_READY;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2201      	movs	r2, #1
 8006e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f7ff fc6e 	bl	800674c <HAL_SD_ErrorCallback>
#endif
  }
}
 8006e70:	bf00      	nop
 8006e72:	3710      	adds	r7, #16
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e84:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d002      	beq.n	8006e94 <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d127      	bne.n	8006eec <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f7ff ff2f 	bl	8006d00 <HAL_SD_GetCardState>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006eb4:	7afb      	ldrb	r3, [r7, #11]
 8006eb6:	2b06      	cmp	r3, #6
 8006eb8:	d002      	beq.n	8006ec0 <SD_DMATxAbort+0x48>
 8006eba:	7afb      	ldrb	r3, [r7, #11]
 8006ebc:	2b05      	cmp	r3, #5
 8006ebe:	d115      	bne.n	8006eec <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f002 fae9 	bl	800949c <SDMMC_CmdStopTransfer>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed0:	431a      	orrs	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d003      	beq.n	8006ee6 <SD_DMATxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f00b fc30 	bl	8012744 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 8006ee4:	e002      	b.n	8006eec <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8006ee6:	68f8      	ldr	r0, [r7, #12]
 8006ee8:	f7ff fc30 	bl	800674c <HAL_SD_ErrorCallback>
}
 8006eec:	bf00      	nop
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f00:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d002      	beq.n	8006f10 <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d127      	bne.n	8006f68 <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f7ff fef1 	bl	8006d00 <HAL_SD_GetCardState>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2200      	movs	r2, #0
 8006f26:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006f30:	7afb      	ldrb	r3, [r7, #11]
 8006f32:	2b06      	cmp	r3, #6
 8006f34:	d002      	beq.n	8006f3c <SD_DMARxAbort+0x48>
 8006f36:	7afb      	ldrb	r3, [r7, #11]
 8006f38:	2b05      	cmp	r3, #5
 8006f3a:	d115      	bne.n	8006f68 <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4618      	mov	r0, r3
 8006f42:	f002 faab 	bl	800949c <SDMMC_CmdStopTransfer>
 8006f46:	4602      	mov	r2, r0
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4c:	431a      	orrs	r2, r3
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d003      	beq.n	8006f62 <SD_DMARxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f00b fbf2 	bl	8012744 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 8006f60:	e002      	b.n	8006f68 <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f7ff fbf2 	bl	800674c <HAL_SD_ErrorCallback>
}
 8006f68:	bf00      	nop
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006f70:	b5b0      	push	{r4, r5, r7, lr}
 8006f72:	b094      	sub	sp, #80	; 0x50
 8006f74:	af04      	add	r7, sp, #16
 8006f76:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4618      	mov	r0, r3
 8006f86:	f002 f94f 	bl	8009228 <SDMMC_GetPowerState>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d102      	bne.n	8006f96 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006f90:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006f94:	e0b1      	b.n	80070fa <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f9a:	2b03      	cmp	r3, #3
 8006f9c:	d02f      	beq.n	8006ffe <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f002 fb95 	bl	80096d2 <SDMMC_CmdSendCID>
 8006fa8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d001      	beq.n	8006fb4 <SD_InitCard+0x44>
    {
      return errorstate;
 8006fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fb2:	e0a2      	b.n	80070fa <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2100      	movs	r1, #0
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f002 f979 	bl	80092b2 <SDMMC_GetResponse>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2104      	movs	r1, #4
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f002 f970 	bl	80092b2 <SDMMC_GetResponse>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2108      	movs	r1, #8
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f002 f967 	bl	80092b2 <SDMMC_GetResponse>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	210c      	movs	r1, #12
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f002 f95e 	bl	80092b2 <SDMMC_GetResponse>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007002:	2b03      	cmp	r3, #3
 8007004:	d00d      	beq.n	8007022 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f107 020e 	add.w	r2, r7, #14
 800700e:	4611      	mov	r1, r2
 8007010:	4618      	mov	r0, r3
 8007012:	f002 fb9f 	bl	8009754 <SDMMC_CmdSetRelAdd>
 8007016:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800701a:	2b00      	cmp	r3, #0
 800701c:	d001      	beq.n	8007022 <SD_InitCard+0xb2>
    {
      return errorstate;
 800701e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007020:	e06b      	b.n	80070fa <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007026:	2b03      	cmp	r3, #3
 8007028:	d036      	beq.n	8007098 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800702a:	89fb      	ldrh	r3, [r7, #14]
 800702c:	461a      	mov	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800703a:	041b      	lsls	r3, r3, #16
 800703c:	4619      	mov	r1, r3
 800703e:	4610      	mov	r0, r2
 8007040:	f002 fb67 	bl	8009712 <SDMMC_CmdSendCSD>
 8007044:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007048:	2b00      	cmp	r3, #0
 800704a:	d001      	beq.n	8007050 <SD_InitCard+0xe0>
    {
      return errorstate;
 800704c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800704e:	e054      	b.n	80070fa <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2100      	movs	r1, #0
 8007056:	4618      	mov	r0, r3
 8007058:	f002 f92b 	bl	80092b2 <SDMMC_GetResponse>
 800705c:	4602      	mov	r2, r0
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2104      	movs	r1, #4
 8007068:	4618      	mov	r0, r3
 800706a:	f002 f922 	bl	80092b2 <SDMMC_GetResponse>
 800706e:	4602      	mov	r2, r0
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2108      	movs	r1, #8
 800707a:	4618      	mov	r0, r3
 800707c:	f002 f919 	bl	80092b2 <SDMMC_GetResponse>
 8007080:	4602      	mov	r2, r0
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	210c      	movs	r1, #12
 800708c:	4618      	mov	r0, r3
 800708e:	f002 f910 	bl	80092b2 <SDMMC_GetResponse>
 8007092:	4602      	mov	r2, r0
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2104      	movs	r1, #4
 800709e:	4618      	mov	r0, r3
 80070a0:	f002 f907 	bl	80092b2 <SDMMC_GetResponse>
 80070a4:	4603      	mov	r3, r0
 80070a6:	0d1a      	lsrs	r2, r3, #20
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 80070ac:	f107 0310 	add.w	r3, r7, #16
 80070b0:	4619      	mov	r1, r3
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f7ff fb54 	bl	8006760 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6819      	ldr	r1, [r3, #0]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070c0:	041b      	lsls	r3, r3, #16
 80070c2:	f04f 0400 	mov.w	r4, #0
 80070c6:	461a      	mov	r2, r3
 80070c8:	4623      	mov	r3, r4
 80070ca:	4608      	mov	r0, r1
 80070cc:	f002 fa0a 	bl	80094e4 <SDMMC_CmdSelDesel>
 80070d0:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80070d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d001      	beq.n	80070dc <SD_InitCard+0x16c>
  {
    return errorstate;
 80070d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070da:	e00e      	b.n	80070fa <SD_InitCard+0x18a>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681d      	ldr	r5, [r3, #0]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	466c      	mov	r4, sp
 80070e4:	f103 0210 	add.w	r2, r3, #16
 80070e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80070ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80070ee:	3304      	adds	r3, #4
 80070f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80070f2:	4628      	mov	r0, r5
 80070f4:	f002 f840 	bl	8009178 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3740      	adds	r7, #64	; 0x40
 80070fe:	46bd      	mov	sp, r7
 8007100:	bdb0      	pop	{r4, r5, r7, pc}

08007102 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b086      	sub	sp, #24
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800710a:	2300      	movs	r3, #0
 800710c:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 800710e:	2300      	movs	r3, #0
 8007110:	617b      	str	r3, [r7, #20]
 8007112:	2300      	movs	r3, #0
 8007114:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007116:	2300      	movs	r3, #0
 8007118:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4618      	mov	r0, r3
 8007120:	f002 fa05 	bl	800952e <SDMMC_CmdGoIdleState>
 8007124:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d001      	beq.n	8007130 <SD_PowerON+0x2e>
  {
    return errorstate;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	e08c      	b.n	800724a <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4618      	mov	r0, r3
 8007136:	f002 fa1a 	bl	800956e <SDMMC_CmdOperCond>
 800713a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d03d      	beq.n	80071be <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8007148:	e032      	b.n	80071b0 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	1c5a      	adds	r2, r3, #1
 800714e:	60ba      	str	r2, [r7, #8]
 8007150:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007154:	4293      	cmp	r3, r2
 8007156:	d102      	bne.n	800715e <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007158:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800715c:	e075      	b.n	800724a <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2100      	movs	r1, #0
 8007164:	4618      	mov	r0, r3
 8007166:	f002 fa23 	bl	80095b0 <SDMMC_CmdAppCommand>
 800716a:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d002      	beq.n	8007178 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007172:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007176:	e068      	b.n	800724a <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2100      	movs	r1, #0
 800717e:	4618      	mov	r0, r3
 8007180:	f002 fa3a 	bl	80095f8 <SDMMC_CmdAppOperCommand>
 8007184:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d002      	beq.n	8007192 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800718c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007190:	e05b      	b.n	800724a <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2100      	movs	r1, #0
 8007198:	4618      	mov	r0, r3
 800719a:	f002 f88a 	bl	80092b2 <SDMMC_GetResponse>
 800719e:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	0fdb      	lsrs	r3, r3, #31
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	bf0c      	ite	eq
 80071a8:	2301      	moveq	r3, #1
 80071aa:	2300      	movne	r3, #0
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d0c9      	beq.n	800714a <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	645a      	str	r2, [r3, #68]	; 0x44
 80071bc:	e044      	b.n	8007248 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 80071c4:	e031      	b.n	800722a <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	1c5a      	adds	r2, r3, #1
 80071ca:	60ba      	str	r2, [r7, #8]
 80071cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d102      	bne.n	80071da <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80071d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80071d8:	e037      	b.n	800724a <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2100      	movs	r1, #0
 80071e0:	4618      	mov	r0, r3
 80071e2:	f002 f9e5 	bl	80095b0 <SDMMC_CmdAppCommand>
 80071e6:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d001      	beq.n	80071f2 <SD_PowerON+0xf0>
      {
        return errorstate;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	e02b      	b.n	800724a <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80071fa:	4618      	mov	r0, r3
 80071fc:	f002 f9fc 	bl	80095f8 <SDMMC_CmdAppOperCommand>
 8007200:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d001      	beq.n	800720c <SD_PowerON+0x10a>
      {
        return errorstate;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	e01e      	b.n	800724a <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2100      	movs	r1, #0
 8007212:	4618      	mov	r0, r3
 8007214:	f002 f84d 	bl	80092b2 <SDMMC_GetResponse>
 8007218:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	0fdb      	lsrs	r3, r3, #31
 800721e:	2b01      	cmp	r3, #1
 8007220:	bf0c      	ite	eq
 8007222:	2301      	moveq	r3, #1
 8007224:	2300      	movne	r3, #0
 8007226:	b2db      	uxtb	r3, r3
 8007228:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d0ca      	beq.n	80071c6 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007236:	2b00      	cmp	r3, #0
 8007238:	d003      	beq.n	8007242 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2201      	movs	r2, #1
 800723e:	645a      	str	r2, [r3, #68]	; 0x44
 8007240:	e002      	b.n	8007248 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3718      	adds	r7, #24
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b084      	sub	sp, #16
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
 800725a:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800725c:	2300      	movs	r3, #0
 800725e:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d102      	bne.n	800726c <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8007266:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800726a:	e018      	b.n	800729e <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007274:	041b      	lsls	r3, r3, #16
 8007276:	4619      	mov	r1, r3
 8007278:	4610      	mov	r0, r2
 800727a:	f002 fa8e 	bl	800979a <SDMMC_CmdSendStatus>
 800727e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d001      	beq.n	800728a <SD_SendStatus+0x38>
  {
    return errorstate;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	e009      	b.n	800729e <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2100      	movs	r1, #0
 8007290:	4618      	mov	r0, r3
 8007292:	f002 f80e 	bl	80092b2 <SDMMC_GetResponse>
 8007296:	4602      	mov	r2, r0
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b086      	sub	sp, #24
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 80072ae:	2300      	movs	r3, #0
 80072b0:	60fb      	str	r3, [r7, #12]
 80072b2:	2300      	movs	r3, #0
 80072b4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80072b6:	2300      	movs	r3, #0
 80072b8:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2100      	movs	r1, #0
 80072c0:	4618      	mov	r0, r3
 80072c2:	f001 fff6 	bl	80092b2 <SDMMC_GetResponse>
 80072c6:	4603      	mov	r3, r0
 80072c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072d0:	d102      	bne.n	80072d8 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80072d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80072d6:	e02f      	b.n	8007338 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80072d8:	f107 030c 	add.w	r3, r7, #12
 80072dc:	4619      	mov	r1, r3
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f87b 	bl	80073da <SD_FindSCR>
 80072e4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d001      	beq.n	80072f0 <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	e023      	b.n	8007338 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d01c      	beq.n	8007334 <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007302:	041b      	lsls	r3, r3, #16
 8007304:	4619      	mov	r1, r3
 8007306:	4610      	mov	r0, r2
 8007308:	f002 f952 	bl	80095b0 <SDMMC_CmdAppCommand>
 800730c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d001      	beq.n	8007318 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	e00f      	b.n	8007338 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2102      	movs	r1, #2
 800731e:	4618      	mov	r0, r3
 8007320:	f002 f990 	bl	8009644 <SDMMC_CmdBusWidth>
 8007324:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d001      	beq.n	8007330 <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	e003      	b.n	8007338 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 8007330:	2300      	movs	r3, #0
 8007332:	e001      	b.n	8007338 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007334:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007338:	4618      	mov	r0, r3
 800733a:	3718      	adds	r7, #24
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b086      	sub	sp, #24
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 8007348:	2300      	movs	r3, #0
 800734a:	60fb      	str	r3, [r7, #12]
 800734c:	2300      	movs	r3, #0
 800734e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007350:	2300      	movs	r3, #0
 8007352:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2100      	movs	r1, #0
 800735a:	4618      	mov	r0, r3
 800735c:	f001 ffa9 	bl	80092b2 <SDMMC_GetResponse>
 8007360:	4603      	mov	r3, r0
 8007362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007366:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800736a:	d102      	bne.n	8007372 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800736c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007370:	e02f      	b.n	80073d2 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007372:	f107 030c 	add.w	r3, r7, #12
 8007376:	4619      	mov	r1, r3
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 f82e 	bl	80073da <SD_FindSCR>
 800737e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d001      	beq.n	800738a <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	e023      	b.n	80073d2 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007390:	2b00      	cmp	r3, #0
 8007392:	d01c      	beq.n	80073ce <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800739c:	041b      	lsls	r3, r3, #16
 800739e:	4619      	mov	r1, r3
 80073a0:	4610      	mov	r0, r2
 80073a2:	f002 f905 	bl	80095b0 <SDMMC_CmdAppCommand>
 80073a6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d001      	beq.n	80073b2 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	e00f      	b.n	80073d2 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2100      	movs	r1, #0
 80073b8:	4618      	mov	r0, r3
 80073ba:	f002 f943 	bl	8009644 <SDMMC_CmdBusWidth>
 80073be:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d001      	beq.n	80073ca <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	e003      	b.n	80073d2 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 80073ca:	2300      	movs	r3, #0
 80073cc:	e001      	b.n	80073d2 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80073ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3718      	adds	r7, #24
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80073da:	b590      	push	{r4, r7, lr}
 80073dc:	b08f      	sub	sp, #60	; 0x3c
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
 80073e2:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80073e4:	2300      	movs	r3, #0
 80073e6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80073e8:	f7f9 f8b4 	bl	8000554 <HAL_GetTick>
 80073ec:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0;
 80073ee:	2300      	movs	r3, #0
 80073f0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2] = {0, 0};
 80073f2:	2300      	movs	r3, #0
 80073f4:	60fb      	str	r3, [r7, #12]
 80073f6:	2300      	movs	r3, #0
 80073f8:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2108      	movs	r1, #8
 8007400:	4618      	mov	r0, r3
 8007402:	f001 ff97 	bl	8009334 <SDMMC_CmdBlockLength>
 8007406:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8007408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740a:	2b00      	cmp	r3, #0
 800740c:	d001      	beq.n	8007412 <SD_FindSCR+0x38>
  {
    return errorstate;
 800740e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007410:	e0a8      	b.n	8007564 <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800741a:	041b      	lsls	r3, r3, #16
 800741c:	4619      	mov	r1, r3
 800741e:	4610      	mov	r0, r2
 8007420:	f002 f8c6 	bl	80095b0 <SDMMC_CmdAppCommand>
 8007424:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8007426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007428:	2b00      	cmp	r3, #0
 800742a:	d001      	beq.n	8007430 <SD_FindSCR+0x56>
  {
    return errorstate;
 800742c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742e:	e099      	b.n	8007564 <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007430:	f04f 33ff 	mov.w	r3, #4294967295
 8007434:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8;
 8007436:	2308      	movs	r3, #8
 8007438:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800743a:	2330      	movs	r3, #48	; 0x30
 800743c:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800743e:	2302      	movs	r3, #2
 8007440:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007442:	2300      	movs	r3, #0
 8007444:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007446:	2301      	movs	r3, #1
 8007448:	62bb      	str	r3, [r7, #40]	; 0x28
  SDMMC_ConfigData(hsd->Instance, &config);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f107 0214 	add.w	r2, r7, #20
 8007452:	4611      	mov	r1, r2
 8007454:	4618      	mov	r0, r3
 8007456:	f001 ff41 	bl	80092dc <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4618      	mov	r0, r3
 8007460:	f002 f914 	bl	800968c <SDMMC_CmdSendSCR>
 8007464:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8007466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007468:	2b00      	cmp	r3, #0
 800746a:	d022      	beq.n	80074b2 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800746c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746e:	e079      	b.n	8007564 <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007476:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00e      	beq.n	800749c <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6819      	ldr	r1, [r3, #0]
 8007482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	f107 020c 	add.w	r2, r7, #12
 800748a:	18d4      	adds	r4, r2, r3
 800748c:	4608      	mov	r0, r1
 800748e:	f001 fe9f 	bl	80091d0 <SDMMC_ReadFIFO>
 8007492:	4603      	mov	r3, r0
 8007494:	6023      	str	r3, [r4, #0]
      index++;
 8007496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007498:	3301      	adds	r3, #1
 800749a:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800749c:	f7f9 f85a 	bl	8000554 <HAL_GetTick>
 80074a0:	4602      	mov	r2, r0
 80074a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074aa:	d102      	bne.n	80074b2 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80074ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80074b0:	e058      	b.n	8007564 <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074b8:	f240 432a 	movw	r3, #1066	; 0x42a
 80074bc:	4013      	ands	r3, r2
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d0d6      	beq.n	8007470 <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074c8:	f003 0308 	and.w	r3, r3, #8
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d005      	beq.n	80074dc <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2208      	movs	r2, #8
 80074d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80074d8:	2308      	movs	r3, #8
 80074da:	e043      	b.n	8007564 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074e2:	f003 0302 	and.w	r3, r3, #2
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d005      	beq.n	80074f6 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2202      	movs	r2, #2
 80074f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80074f2:	2302      	movs	r3, #2
 80074f4:	e036      	b.n	8007564 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074fc:	f003 0320 	and.w	r3, r3, #32
 8007500:	2b00      	cmp	r3, #0
 8007502:	d005      	beq.n	8007510 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2220      	movs	r2, #32
 800750a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 800750c:	2320      	movs	r3, #32
 800750e:	e029      	b.n	8007564 <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007518:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	061a      	lsls	r2, r3, #24
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	021b      	lsls	r3, r3, #8
 8007522:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007526:	431a      	orrs	r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	0a1b      	lsrs	r3, r3, #8
 800752c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007530:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	3304      	adds	r3, #4
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 800753c:	430a      	orrs	r2, r1
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800753e:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	061a      	lsls	r2, r3, #24
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	021b      	lsls	r3, r3, #8
 8007548:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800754c:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	0a1b      	lsrs	r3, r3, #8
 8007552:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007556:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	0e1b      	lsrs	r3, r3, #24
 800755c:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	373c      	adds	r7, #60	; 0x3c
 8007568:	46bd      	mov	sp, r7
 800756a:	bd90      	pop	{r4, r7, pc}

0800756c <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800756c:	b590      	push	{r4, r7, lr}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007574:	2300      	movs	r3, #0
 8007576:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757c:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDMMC Rx FIFO */
  for(count = 0; count < 8; count++)
 800757e:	2300      	movs	r3, #0
 8007580:	60fb      	str	r3, [r7, #12]
 8007582:	e00d      	b.n	80075a0 <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDMMC_ReadFIFO(hsd->Instance);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6819      	ldr	r1, [r3, #0]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	18d4      	adds	r4, r2, r3
 8007590:	4608      	mov	r0, r1
 8007592:	f001 fe1d 	bl	80091d0 <SDMMC_ReadFIFO>
 8007596:	4603      	mov	r3, r0
 8007598:	6023      	str	r3, [r4, #0]
  for(count = 0; count < 8; count++)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	3301      	adds	r3, #1
 800759e:	60fb      	str	r3, [r7, #12]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2b07      	cmp	r3, #7
 80075a4:	d9ee      	bls.n	8007584 <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075aa:	f103 0220 	add.w	r2, r3, #32
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3714      	adds	r7, #20
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd90      	pop	{r4, r7, pc}

080075bc <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80075c4:	2300      	movs	r3, #0
 80075c6:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6a1b      	ldr	r3, [r3, #32]
 80075cc:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDMMC Tx FIFO */
  for(count = 0; count < 8; count++)
 80075ce:	2300      	movs	r3, #0
 80075d0:	60fb      	str	r3, [r7, #12]
 80075d2:	e00b      	b.n	80075ec <SD_Write_IT+0x30>
  {
    SDMMC_WriteFIFO(hsd->Instance, (tmp + count));
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6818      	ldr	r0, [r3, #0]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	4413      	add	r3, r2
 80075e0:	4619      	mov	r1, r3
 80075e2:	f001 fe02 	bl	80091ea <SDMMC_WriteFIFO>
  for(count = 0; count < 8; count++)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	3301      	adds	r3, #1
 80075ea:	60fb      	str	r3, [r7, #12]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2b07      	cmp	r3, #7
 80075f0:	d9f0      	bls.n	80075d4 <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	f103 0220 	add.w	r2, r3, #32
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d101      	bne.n	800761c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	e025      	b.n	8007668 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007622:	b2db      	uxtb	r3, r3
 8007624:	2b00      	cmp	r3, #0
 8007626:	d106      	bne.n	8007636 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f00d fded 	bl	8015210 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2202      	movs	r2, #2
 800763a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	3304      	adds	r3, #4
 8007646:	4619      	mov	r1, r3
 8007648:	4610      	mov	r0, r2
 800764a:	f001 fca3 	bl	8008f94 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6818      	ldr	r0, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	461a      	mov	r2, r3
 8007658:	6839      	ldr	r1, [r7, #0]
 800765a:	f001 fd0d 	bl	8009078 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2201      	movs	r2, #1
 8007662:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	3708      	adds	r7, #8
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d101      	bne.n	8007682 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	e04c      	b.n	800771c <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007688:	b2db      	uxtb	r3, r3
 800768a:	2b00      	cmp	r3, #0
 800768c:	d106      	bne.n	800769c <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f00d faf8 	bl	8014c8c <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2202      	movs	r2, #2
 80076a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f022 0203 	bic.w	r2, r2, #3
 80076b2:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 80076bc:	68fa      	ldr	r2, [r7, #12]
 80076be:	4b19      	ldr	r3, [pc, #100]	; (8007724 <HAL_SPDIFRX_Init+0xb4>)
 80076c0:	4013      	ands	r3, r2
 80076c2:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 80076cc:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 80076d2:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 80076d8:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 80076de:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 80076e4:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 80076ea:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 80076f0:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 80076f6:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 80076fc:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 80076fe:	68fa      	ldr	r2, [r7, #12]
 8007700:	4313      	orrs	r3, r2
 8007702:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2201      	movs	r2, #1
 8007716:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	fff88407 	.word	0xfff88407

08007728 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d101      	bne.n	800773a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	e01d      	b.n	8007776 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007740:	b2db      	uxtb	r3, r3
 8007742:	2b00      	cmp	r3, #0
 8007744:	d106      	bne.n	8007754 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f00d fade 	bl	8014d10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2202      	movs	r2, #2
 8007758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	3304      	adds	r3, #4
 8007764:	4619      	mov	r1, r3
 8007766:	4610      	mov	r0, r2
 8007768:	f000 fb78 	bl	8007e5c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	3708      	adds	r7, #8
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
	...

08007780 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	68da      	ldr	r2, [r3, #12]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f042 0201 	orr.w	r2, r2, #1
 8007796:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	689a      	ldr	r2, [r3, #8]
 800779e:	4b0c      	ldr	r3, [pc, #48]	; (80077d0 <HAL_TIM_Base_Start_IT+0x50>)
 80077a0:	4013      	ands	r3, r2
 80077a2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2b06      	cmp	r3, #6
 80077a8:	d00b      	beq.n	80077c2 <HAL_TIM_Base_Start_IT+0x42>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077b0:	d007      	beq.n	80077c2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f042 0201 	orr.w	r2, r2, #1
 80077c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3714      	adds	r7, #20
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr
 80077d0:	00010007 	.word	0x00010007

080077d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d101      	bne.n	80077e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e01d      	b.n	8007822 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d106      	bne.n	8007800 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f00d faf6 	bl	8014dec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2202      	movs	r2, #2
 8007804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	3304      	adds	r3, #4
 8007810:	4619      	mov	r1, r3
 8007812:	4610      	mov	r0, r2
 8007814:	f000 fb22 	bl	8007e5c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3708      	adds	r7, #8
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800782a:	b580      	push	{r7, lr}
 800782c:	b082      	sub	sp, #8
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	f003 0302 	and.w	r3, r3, #2
 800783c:	2b02      	cmp	r3, #2
 800783e:	d122      	bne.n	8007886 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	f003 0302 	and.w	r3, r3, #2
 800784a:	2b02      	cmp	r3, #2
 800784c:	d11b      	bne.n	8007886 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f06f 0202 	mvn.w	r2, #2
 8007856:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	699b      	ldr	r3, [r3, #24]
 8007864:	f003 0303 	and.w	r3, r3, #3
 8007868:	2b00      	cmp	r3, #0
 800786a:	d003      	beq.n	8007874 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 fad7 	bl	8007e20 <HAL_TIM_IC_CaptureCallback>
 8007872:	e005      	b.n	8007880 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 fac9 	bl	8007e0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fada 	bl	8007e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	f003 0304 	and.w	r3, r3, #4
 8007890:	2b04      	cmp	r3, #4
 8007892:	d122      	bne.n	80078da <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	f003 0304 	and.w	r3, r3, #4
 800789e:	2b04      	cmp	r3, #4
 80078a0:	d11b      	bne.n	80078da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f06f 0204 	mvn.w	r2, #4
 80078aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2202      	movs	r2, #2
 80078b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	699b      	ldr	r3, [r3, #24]
 80078b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d003      	beq.n	80078c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 faad 	bl	8007e20 <HAL_TIM_IC_CaptureCallback>
 80078c6:	e005      	b.n	80078d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fa9f 	bl	8007e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fab0 	bl	8007e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	691b      	ldr	r3, [r3, #16]
 80078e0:	f003 0308 	and.w	r3, r3, #8
 80078e4:	2b08      	cmp	r3, #8
 80078e6:	d122      	bne.n	800792e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	f003 0308 	and.w	r3, r3, #8
 80078f2:	2b08      	cmp	r3, #8
 80078f4:	d11b      	bne.n	800792e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f06f 0208 	mvn.w	r2, #8
 80078fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2204      	movs	r2, #4
 8007904:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	69db      	ldr	r3, [r3, #28]
 800790c:	f003 0303 	and.w	r3, r3, #3
 8007910:	2b00      	cmp	r3, #0
 8007912:	d003      	beq.n	800791c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 fa83 	bl	8007e20 <HAL_TIM_IC_CaptureCallback>
 800791a:	e005      	b.n	8007928 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fa75 	bl	8007e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 fa86 	bl	8007e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	f003 0310 	and.w	r3, r3, #16
 8007938:	2b10      	cmp	r3, #16
 800793a:	d122      	bne.n	8007982 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	f003 0310 	and.w	r3, r3, #16
 8007946:	2b10      	cmp	r3, #16
 8007948:	d11b      	bne.n	8007982 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f06f 0210 	mvn.w	r2, #16
 8007952:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2208      	movs	r2, #8
 8007958:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	69db      	ldr	r3, [r3, #28]
 8007960:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007964:	2b00      	cmp	r3, #0
 8007966:	d003      	beq.n	8007970 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 fa59 	bl	8007e20 <HAL_TIM_IC_CaptureCallback>
 800796e:	e005      	b.n	800797c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 fa4b 	bl	8007e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fa5c 	bl	8007e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	f003 0301 	and.w	r3, r3, #1
 800798c:	2b01      	cmp	r3, #1
 800798e:	d10e      	bne.n	80079ae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	f003 0301 	and.w	r3, r3, #1
 800799a:	2b01      	cmp	r3, #1
 800799c:	d107      	bne.n	80079ae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f06f 0201 	mvn.w	r2, #1
 80079a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f00c fadb 	bl	8013f64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079b8:	2b80      	cmp	r3, #128	; 0x80
 80079ba:	d10e      	bne.n	80079da <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c6:	2b80      	cmp	r3, #128	; 0x80
 80079c8:	d107      	bne.n	80079da <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80079d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 febd 	bl	8008754 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079e8:	d10e      	bne.n	8007a08 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079f4:	2b80      	cmp	r3, #128	; 0x80
 80079f6:	d107      	bne.n	8007a08 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 feb0 	bl	8008768 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a12:	2b40      	cmp	r3, #64	; 0x40
 8007a14:	d10e      	bne.n	8007a34 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a20:	2b40      	cmp	r3, #64	; 0x40
 8007a22:	d107      	bne.n	8007a34 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fa0a 	bl	8007e48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	f003 0320 	and.w	r3, r3, #32
 8007a3e:	2b20      	cmp	r3, #32
 8007a40:	d10e      	bne.n	8007a60 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	f003 0320 	and.w	r3, r3, #32
 8007a4c:	2b20      	cmp	r3, #32
 8007a4e:	d107      	bne.n	8007a60 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f06f 0220 	mvn.w	r2, #32
 8007a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 fe70 	bl	8008740 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a60:	bf00      	nop
 8007a62:	3708      	adds	r7, #8
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d101      	bne.n	8007a82 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007a7e:	2302      	movs	r3, #2
 8007a80:	e105      	b.n	8007c8e <HAL_TIM_PWM_ConfigChannel+0x226>
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2201      	movs	r2, #1
 8007a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2202      	movs	r2, #2
 8007a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2b14      	cmp	r3, #20
 8007a96:	f200 80f0 	bhi.w	8007c7a <HAL_TIM_PWM_ConfigChannel+0x212>
 8007a9a:	a201      	add	r2, pc, #4	; (adr r2, 8007aa0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa0:	08007af5 	.word	0x08007af5
 8007aa4:	08007c7b 	.word	0x08007c7b
 8007aa8:	08007c7b 	.word	0x08007c7b
 8007aac:	08007c7b 	.word	0x08007c7b
 8007ab0:	08007b35 	.word	0x08007b35
 8007ab4:	08007c7b 	.word	0x08007c7b
 8007ab8:	08007c7b 	.word	0x08007c7b
 8007abc:	08007c7b 	.word	0x08007c7b
 8007ac0:	08007b77 	.word	0x08007b77
 8007ac4:	08007c7b 	.word	0x08007c7b
 8007ac8:	08007c7b 	.word	0x08007c7b
 8007acc:	08007c7b 	.word	0x08007c7b
 8007ad0:	08007bb7 	.word	0x08007bb7
 8007ad4:	08007c7b 	.word	0x08007c7b
 8007ad8:	08007c7b 	.word	0x08007c7b
 8007adc:	08007c7b 	.word	0x08007c7b
 8007ae0:	08007bf9 	.word	0x08007bf9
 8007ae4:	08007c7b 	.word	0x08007c7b
 8007ae8:	08007c7b 	.word	0x08007c7b
 8007aec:	08007c7b 	.word	0x08007c7b
 8007af0:	08007c39 	.word	0x08007c39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68b9      	ldr	r1, [r7, #8]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f000 fa4e 	bl	8007f9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	699a      	ldr	r2, [r3, #24]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f042 0208 	orr.w	r2, r2, #8
 8007b0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	699a      	ldr	r2, [r3, #24]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f022 0204 	bic.w	r2, r2, #4
 8007b1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	6999      	ldr	r1, [r3, #24]
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	691a      	ldr	r2, [r3, #16]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	430a      	orrs	r2, r1
 8007b30:	619a      	str	r2, [r3, #24]
      break;
 8007b32:	e0a3      	b.n	8007c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	68b9      	ldr	r1, [r7, #8]
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f000 faa0 	bl	8008080 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	699a      	ldr	r2, [r3, #24]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	699a      	ldr	r2, [r3, #24]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	6999      	ldr	r1, [r3, #24]
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	021a      	lsls	r2, r3, #8
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	430a      	orrs	r2, r1
 8007b72:	619a      	str	r2, [r3, #24]
      break;
 8007b74:	e082      	b.n	8007c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	68b9      	ldr	r1, [r7, #8]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f000 faf7 	bl	8008170 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	69da      	ldr	r2, [r3, #28]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f042 0208 	orr.w	r2, r2, #8
 8007b90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	69da      	ldr	r2, [r3, #28]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f022 0204 	bic.w	r2, r2, #4
 8007ba0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	69d9      	ldr	r1, [r3, #28]
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	691a      	ldr	r2, [r3, #16]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	430a      	orrs	r2, r1
 8007bb2:	61da      	str	r2, [r3, #28]
      break;
 8007bb4:	e062      	b.n	8007c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68b9      	ldr	r1, [r7, #8]
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f000 fb4d 	bl	800825c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	69da      	ldr	r2, [r3, #28]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	69da      	ldr	r2, [r3, #28]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007be0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	69d9      	ldr	r1, [r3, #28]
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	691b      	ldr	r3, [r3, #16]
 8007bec:	021a      	lsls	r2, r3, #8
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	430a      	orrs	r2, r1
 8007bf4:	61da      	str	r2, [r3, #28]
      break;
 8007bf6:	e041      	b.n	8007c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68b9      	ldr	r1, [r7, #8]
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f000 fb84 	bl	800830c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f042 0208 	orr.w	r2, r2, #8
 8007c12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f022 0204 	bic.w	r2, r2, #4
 8007c22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	691a      	ldr	r2, [r3, #16]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	430a      	orrs	r2, r1
 8007c34:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007c36:	e021      	b.n	8007c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68b9      	ldr	r1, [r7, #8]
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f000 fbb6 	bl	80083b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	021a      	lsls	r2, r3, #8
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	430a      	orrs	r2, r1
 8007c76:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007c78:	e000      	b.n	8007c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8007c7a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop

08007c98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d101      	bne.n	8007cb0 <HAL_TIM_ConfigClockSource+0x18>
 8007cac:	2302      	movs	r3, #2
 8007cae:	e0a6      	b.n	8007dfe <HAL_TIM_ConfigClockSource+0x166>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2202      	movs	r2, #2
 8007cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	4b4f      	ldr	r3, [pc, #316]	; (8007e08 <HAL_TIM_ConfigClockSource+0x170>)
 8007ccc:	4013      	ands	r3, r2
 8007cce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cd6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2b40      	cmp	r3, #64	; 0x40
 8007ce6:	d067      	beq.n	8007db8 <HAL_TIM_ConfigClockSource+0x120>
 8007ce8:	2b40      	cmp	r3, #64	; 0x40
 8007cea:	d80b      	bhi.n	8007d04 <HAL_TIM_ConfigClockSource+0x6c>
 8007cec:	2b10      	cmp	r3, #16
 8007cee:	d073      	beq.n	8007dd8 <HAL_TIM_ConfigClockSource+0x140>
 8007cf0:	2b10      	cmp	r3, #16
 8007cf2:	d802      	bhi.n	8007cfa <HAL_TIM_ConfigClockSource+0x62>
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d06f      	beq.n	8007dd8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007cf8:	e078      	b.n	8007dec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007cfa:	2b20      	cmp	r3, #32
 8007cfc:	d06c      	beq.n	8007dd8 <HAL_TIM_ConfigClockSource+0x140>
 8007cfe:	2b30      	cmp	r3, #48	; 0x30
 8007d00:	d06a      	beq.n	8007dd8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007d02:	e073      	b.n	8007dec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007d04:	2b70      	cmp	r3, #112	; 0x70
 8007d06:	d00d      	beq.n	8007d24 <HAL_TIM_ConfigClockSource+0x8c>
 8007d08:	2b70      	cmp	r3, #112	; 0x70
 8007d0a:	d804      	bhi.n	8007d16 <HAL_TIM_ConfigClockSource+0x7e>
 8007d0c:	2b50      	cmp	r3, #80	; 0x50
 8007d0e:	d033      	beq.n	8007d78 <HAL_TIM_ConfigClockSource+0xe0>
 8007d10:	2b60      	cmp	r3, #96	; 0x60
 8007d12:	d041      	beq.n	8007d98 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007d14:	e06a      	b.n	8007dec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d1a:	d066      	beq.n	8007dea <HAL_TIM_ConfigClockSource+0x152>
 8007d1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d20:	d017      	beq.n	8007d52 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007d22:	e063      	b.n	8007dec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6818      	ldr	r0, [r3, #0]
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	6899      	ldr	r1, [r3, #8]
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	685a      	ldr	r2, [r3, #4]
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	f000 fc0a 	bl	800854c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007d46:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	609a      	str	r2, [r3, #8]
      break;
 8007d50:	e04c      	b.n	8007dec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6818      	ldr	r0, [r3, #0]
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	6899      	ldr	r1, [r3, #8]
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	685a      	ldr	r2, [r3, #4]
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	f000 fbf3 	bl	800854c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	689a      	ldr	r2, [r3, #8]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d74:	609a      	str	r2, [r3, #8]
      break;
 8007d76:	e039      	b.n	8007dec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6818      	ldr	r0, [r3, #0]
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	6859      	ldr	r1, [r3, #4]
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	461a      	mov	r2, r3
 8007d86:	f000 fb67 	bl	8008458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2150      	movs	r1, #80	; 0x50
 8007d90:	4618      	mov	r0, r3
 8007d92:	f000 fbc0 	bl	8008516 <TIM_ITRx_SetConfig>
      break;
 8007d96:	e029      	b.n	8007dec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6818      	ldr	r0, [r3, #0]
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	6859      	ldr	r1, [r3, #4]
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	461a      	mov	r2, r3
 8007da6:	f000 fb86 	bl	80084b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2160      	movs	r1, #96	; 0x60
 8007db0:	4618      	mov	r0, r3
 8007db2:	f000 fbb0 	bl	8008516 <TIM_ITRx_SetConfig>
      break;
 8007db6:	e019      	b.n	8007dec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6818      	ldr	r0, [r3, #0]
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	6859      	ldr	r1, [r3, #4]
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	f000 fb47 	bl	8008458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2140      	movs	r1, #64	; 0x40
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f000 fba0 	bl	8008516 <TIM_ITRx_SetConfig>
      break;
 8007dd6:	e009      	b.n	8007dec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4619      	mov	r1, r3
 8007de2:	4610      	mov	r0, r2
 8007de4:	f000 fb97 	bl	8008516 <TIM_ITRx_SetConfig>
      break;
 8007de8:	e000      	b.n	8007dec <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007dea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3710      	adds	r7, #16
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	fffeff88 	.word	0xfffeff88

08007e0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e28:	bf00      	nop
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e3c:	bf00      	nop
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e50:	bf00      	nop
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b085      	sub	sp, #20
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4a40      	ldr	r2, [pc, #256]	; (8007f70 <TIM_Base_SetConfig+0x114>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d013      	beq.n	8007e9c <TIM_Base_SetConfig+0x40>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e7a:	d00f      	beq.n	8007e9c <TIM_Base_SetConfig+0x40>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	4a3d      	ldr	r2, [pc, #244]	; (8007f74 <TIM_Base_SetConfig+0x118>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d00b      	beq.n	8007e9c <TIM_Base_SetConfig+0x40>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	4a3c      	ldr	r2, [pc, #240]	; (8007f78 <TIM_Base_SetConfig+0x11c>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d007      	beq.n	8007e9c <TIM_Base_SetConfig+0x40>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	4a3b      	ldr	r2, [pc, #236]	; (8007f7c <TIM_Base_SetConfig+0x120>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d003      	beq.n	8007e9c <TIM_Base_SetConfig+0x40>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4a3a      	ldr	r2, [pc, #232]	; (8007f80 <TIM_Base_SetConfig+0x124>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d108      	bne.n	8007eae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	68fa      	ldr	r2, [r7, #12]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a2f      	ldr	r2, [pc, #188]	; (8007f70 <TIM_Base_SetConfig+0x114>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d02b      	beq.n	8007f0e <TIM_Base_SetConfig+0xb2>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ebc:	d027      	beq.n	8007f0e <TIM_Base_SetConfig+0xb2>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4a2c      	ldr	r2, [pc, #176]	; (8007f74 <TIM_Base_SetConfig+0x118>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d023      	beq.n	8007f0e <TIM_Base_SetConfig+0xb2>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a2b      	ldr	r2, [pc, #172]	; (8007f78 <TIM_Base_SetConfig+0x11c>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d01f      	beq.n	8007f0e <TIM_Base_SetConfig+0xb2>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a2a      	ldr	r2, [pc, #168]	; (8007f7c <TIM_Base_SetConfig+0x120>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d01b      	beq.n	8007f0e <TIM_Base_SetConfig+0xb2>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a29      	ldr	r2, [pc, #164]	; (8007f80 <TIM_Base_SetConfig+0x124>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d017      	beq.n	8007f0e <TIM_Base_SetConfig+0xb2>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a28      	ldr	r2, [pc, #160]	; (8007f84 <TIM_Base_SetConfig+0x128>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d013      	beq.n	8007f0e <TIM_Base_SetConfig+0xb2>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a27      	ldr	r2, [pc, #156]	; (8007f88 <TIM_Base_SetConfig+0x12c>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d00f      	beq.n	8007f0e <TIM_Base_SetConfig+0xb2>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a26      	ldr	r2, [pc, #152]	; (8007f8c <TIM_Base_SetConfig+0x130>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d00b      	beq.n	8007f0e <TIM_Base_SetConfig+0xb2>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a25      	ldr	r2, [pc, #148]	; (8007f90 <TIM_Base_SetConfig+0x134>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d007      	beq.n	8007f0e <TIM_Base_SetConfig+0xb2>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a24      	ldr	r2, [pc, #144]	; (8007f94 <TIM_Base_SetConfig+0x138>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d003      	beq.n	8007f0e <TIM_Base_SetConfig+0xb2>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a23      	ldr	r2, [pc, #140]	; (8007f98 <TIM_Base_SetConfig+0x13c>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d108      	bne.n	8007f20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	695b      	ldr	r3, [r3, #20]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	689a      	ldr	r2, [r3, #8]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4a0a      	ldr	r2, [pc, #40]	; (8007f70 <TIM_Base_SetConfig+0x114>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d003      	beq.n	8007f54 <TIM_Base_SetConfig+0xf8>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	4a0c      	ldr	r2, [pc, #48]	; (8007f80 <TIM_Base_SetConfig+0x124>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d103      	bne.n	8007f5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	691a      	ldr	r2, [r3, #16]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	615a      	str	r2, [r3, #20]
}
 8007f62:	bf00      	nop
 8007f64:	3714      	adds	r7, #20
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop
 8007f70:	40010000 	.word	0x40010000
 8007f74:	40000400 	.word	0x40000400
 8007f78:	40000800 	.word	0x40000800
 8007f7c:	40000c00 	.word	0x40000c00
 8007f80:	40010400 	.word	0x40010400
 8007f84:	40014000 	.word	0x40014000
 8007f88:	40014400 	.word	0x40014400
 8007f8c:	40014800 	.word	0x40014800
 8007f90:	40001800 	.word	0x40001800
 8007f94:	40001c00 	.word	0x40001c00
 8007f98:	40002000 	.word	0x40002000

08007f9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b087      	sub	sp, #28
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a1b      	ldr	r3, [r3, #32]
 8007faa:	f023 0201 	bic.w	r2, r3, #1
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a1b      	ldr	r3, [r3, #32]
 8007fb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	699b      	ldr	r3, [r3, #24]
 8007fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	4b2b      	ldr	r3, [pc, #172]	; (8008074 <TIM_OC1_SetConfig+0xd8>)
 8007fc8:	4013      	ands	r3, r2
 8007fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f023 0303 	bic.w	r3, r3, #3
 8007fd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	f023 0302 	bic.w	r3, r3, #2
 8007fe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	697a      	ldr	r2, [r7, #20]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	4a21      	ldr	r2, [pc, #132]	; (8008078 <TIM_OC1_SetConfig+0xdc>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d003      	beq.n	8008000 <TIM_OC1_SetConfig+0x64>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4a20      	ldr	r2, [pc, #128]	; (800807c <TIM_OC1_SetConfig+0xe0>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d10c      	bne.n	800801a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	f023 0308 	bic.w	r3, r3, #8
 8008006:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	697a      	ldr	r2, [r7, #20]
 800800e:	4313      	orrs	r3, r2
 8008010:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	f023 0304 	bic.w	r3, r3, #4
 8008018:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4a16      	ldr	r2, [pc, #88]	; (8008078 <TIM_OC1_SetConfig+0xdc>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d003      	beq.n	800802a <TIM_OC1_SetConfig+0x8e>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	4a15      	ldr	r2, [pc, #84]	; (800807c <TIM_OC1_SetConfig+0xe0>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d111      	bne.n	800804e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008030:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008038:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	695b      	ldr	r3, [r3, #20]
 800803e:	693a      	ldr	r2, [r7, #16]
 8008040:	4313      	orrs	r3, r2
 8008042:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	699b      	ldr	r3, [r3, #24]
 8008048:	693a      	ldr	r2, [r7, #16]
 800804a:	4313      	orrs	r3, r2
 800804c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	693a      	ldr	r2, [r7, #16]
 8008052:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	68fa      	ldr	r2, [r7, #12]
 8008058:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	685a      	ldr	r2, [r3, #4]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	697a      	ldr	r2, [r7, #20]
 8008066:	621a      	str	r2, [r3, #32]
}
 8008068:	bf00      	nop
 800806a:	371c      	adds	r7, #28
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr
 8008074:	fffeff8f 	.word	0xfffeff8f
 8008078:	40010000 	.word	0x40010000
 800807c:	40010400 	.word	0x40010400

08008080 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008080:	b480      	push	{r7}
 8008082:	b087      	sub	sp, #28
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a1b      	ldr	r3, [r3, #32]
 800808e:	f023 0210 	bic.w	r2, r3, #16
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6a1b      	ldr	r3, [r3, #32]
 800809a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	4b2e      	ldr	r3, [pc, #184]	; (8008164 <TIM_OC2_SetConfig+0xe4>)
 80080ac:	4013      	ands	r3, r2
 80080ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	021b      	lsls	r3, r3, #8
 80080be:	68fa      	ldr	r2, [r7, #12]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	f023 0320 	bic.w	r3, r3, #32
 80080ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	011b      	lsls	r3, r3, #4
 80080d2:	697a      	ldr	r2, [r7, #20]
 80080d4:	4313      	orrs	r3, r2
 80080d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a23      	ldr	r2, [pc, #140]	; (8008168 <TIM_OC2_SetConfig+0xe8>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d003      	beq.n	80080e8 <TIM_OC2_SetConfig+0x68>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a22      	ldr	r2, [pc, #136]	; (800816c <TIM_OC2_SetConfig+0xec>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d10d      	bne.n	8008104 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	011b      	lsls	r3, r3, #4
 80080f6:	697a      	ldr	r2, [r7, #20]
 80080f8:	4313      	orrs	r3, r2
 80080fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008102:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4a18      	ldr	r2, [pc, #96]	; (8008168 <TIM_OC2_SetConfig+0xe8>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d003      	beq.n	8008114 <TIM_OC2_SetConfig+0x94>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4a17      	ldr	r2, [pc, #92]	; (800816c <TIM_OC2_SetConfig+0xec>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d113      	bne.n	800813c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800811a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008122:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	695b      	ldr	r3, [r3, #20]
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	693a      	ldr	r2, [r7, #16]
 800812c:	4313      	orrs	r3, r2
 800812e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	699b      	ldr	r3, [r3, #24]
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	693a      	ldr	r2, [r7, #16]
 8008138:	4313      	orrs	r3, r2
 800813a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	693a      	ldr	r2, [r7, #16]
 8008140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	685a      	ldr	r2, [r3, #4]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	697a      	ldr	r2, [r7, #20]
 8008154:	621a      	str	r2, [r3, #32]
}
 8008156:	bf00      	nop
 8008158:	371c      	adds	r7, #28
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	feff8fff 	.word	0xfeff8fff
 8008168:	40010000 	.word	0x40010000
 800816c:	40010400 	.word	0x40010400

08008170 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008170:	b480      	push	{r7}
 8008172:	b087      	sub	sp, #28
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6a1b      	ldr	r3, [r3, #32]
 800817e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a1b      	ldr	r3, [r3, #32]
 800818a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	69db      	ldr	r3, [r3, #28]
 8008196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008198:	68fa      	ldr	r2, [r7, #12]
 800819a:	4b2d      	ldr	r3, [pc, #180]	; (8008250 <TIM_OC3_SetConfig+0xe0>)
 800819c:	4013      	ands	r3, r2
 800819e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f023 0303 	bic.w	r3, r3, #3
 80081a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80081b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	021b      	lsls	r3, r3, #8
 80081c0:	697a      	ldr	r2, [r7, #20]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a22      	ldr	r2, [pc, #136]	; (8008254 <TIM_OC3_SetConfig+0xe4>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d003      	beq.n	80081d6 <TIM_OC3_SetConfig+0x66>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a21      	ldr	r2, [pc, #132]	; (8008258 <TIM_OC3_SetConfig+0xe8>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d10d      	bne.n	80081f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	021b      	lsls	r3, r3, #8
 80081e4:	697a      	ldr	r2, [r7, #20]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4a17      	ldr	r2, [pc, #92]	; (8008254 <TIM_OC3_SetConfig+0xe4>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d003      	beq.n	8008202 <TIM_OC3_SetConfig+0x92>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4a16      	ldr	r2, [pc, #88]	; (8008258 <TIM_OC3_SetConfig+0xe8>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d113      	bne.n	800822a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	695b      	ldr	r3, [r3, #20]
 8008216:	011b      	lsls	r3, r3, #4
 8008218:	693a      	ldr	r2, [r7, #16]
 800821a:	4313      	orrs	r3, r2
 800821c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	699b      	ldr	r3, [r3, #24]
 8008222:	011b      	lsls	r3, r3, #4
 8008224:	693a      	ldr	r2, [r7, #16]
 8008226:	4313      	orrs	r3, r2
 8008228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	693a      	ldr	r2, [r7, #16]
 800822e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	685a      	ldr	r2, [r3, #4]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	697a      	ldr	r2, [r7, #20]
 8008242:	621a      	str	r2, [r3, #32]
}
 8008244:	bf00      	nop
 8008246:	371c      	adds	r7, #28
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr
 8008250:	fffeff8f 	.word	0xfffeff8f
 8008254:	40010000 	.word	0x40010000
 8008258:	40010400 	.word	0x40010400

0800825c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800825c:	b480      	push	{r7}
 800825e:	b087      	sub	sp, #28
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a1b      	ldr	r3, [r3, #32]
 800826a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a1b      	ldr	r3, [r3, #32]
 8008276:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	69db      	ldr	r3, [r3, #28]
 8008282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008284:	68fa      	ldr	r2, [r7, #12]
 8008286:	4b1e      	ldr	r3, [pc, #120]	; (8008300 <TIM_OC4_SetConfig+0xa4>)
 8008288:	4013      	ands	r3, r2
 800828a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008292:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	021b      	lsls	r3, r3, #8
 800829a:	68fa      	ldr	r2, [r7, #12]
 800829c:	4313      	orrs	r3, r2
 800829e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	031b      	lsls	r3, r3, #12
 80082ae:	693a      	ldr	r2, [r7, #16]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	4a13      	ldr	r2, [pc, #76]	; (8008304 <TIM_OC4_SetConfig+0xa8>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d003      	beq.n	80082c4 <TIM_OC4_SetConfig+0x68>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4a12      	ldr	r2, [pc, #72]	; (8008308 <TIM_OC4_SetConfig+0xac>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d109      	bne.n	80082d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	695b      	ldr	r3, [r3, #20]
 80082d0:	019b      	lsls	r3, r3, #6
 80082d2:	697a      	ldr	r2, [r7, #20]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	697a      	ldr	r2, [r7, #20]
 80082dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	68fa      	ldr	r2, [r7, #12]
 80082e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	685a      	ldr	r2, [r3, #4]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	693a      	ldr	r2, [r7, #16]
 80082f0:	621a      	str	r2, [r3, #32]
}
 80082f2:	bf00      	nop
 80082f4:	371c      	adds	r7, #28
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop
 8008300:	feff8fff 	.word	0xfeff8fff
 8008304:	40010000 	.word	0x40010000
 8008308:	40010400 	.word	0x40010400

0800830c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800830c:	b480      	push	{r7}
 800830e:	b087      	sub	sp, #28
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6a1b      	ldr	r3, [r3, #32]
 800831a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6a1b      	ldr	r3, [r3, #32]
 8008326:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	4b1b      	ldr	r3, [pc, #108]	; (80083a4 <TIM_OC5_SetConfig+0x98>)
 8008338:	4013      	ands	r3, r2
 800833a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	68fa      	ldr	r2, [r7, #12]
 8008342:	4313      	orrs	r3, r2
 8008344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800834c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	041b      	lsls	r3, r3, #16
 8008354:	693a      	ldr	r2, [r7, #16]
 8008356:	4313      	orrs	r3, r2
 8008358:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a12      	ldr	r2, [pc, #72]	; (80083a8 <TIM_OC5_SetConfig+0x9c>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d003      	beq.n	800836a <TIM_OC5_SetConfig+0x5e>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4a11      	ldr	r2, [pc, #68]	; (80083ac <TIM_OC5_SetConfig+0xa0>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d109      	bne.n	800837e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008370:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	695b      	ldr	r3, [r3, #20]
 8008376:	021b      	lsls	r3, r3, #8
 8008378:	697a      	ldr	r2, [r7, #20]
 800837a:	4313      	orrs	r3, r2
 800837c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	697a      	ldr	r2, [r7, #20]
 8008382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	685a      	ldr	r2, [r3, #4]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	693a      	ldr	r2, [r7, #16]
 8008396:	621a      	str	r2, [r3, #32]
}
 8008398:	bf00      	nop
 800839a:	371c      	adds	r7, #28
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr
 80083a4:	fffeff8f 	.word	0xfffeff8f
 80083a8:	40010000 	.word	0x40010000
 80083ac:	40010400 	.word	0x40010400

080083b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b087      	sub	sp, #28
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a1b      	ldr	r3, [r3, #32]
 80083be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a1b      	ldr	r3, [r3, #32]
 80083ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80083d8:	68fa      	ldr	r2, [r7, #12]
 80083da:	4b1c      	ldr	r3, [pc, #112]	; (800844c <TIM_OC6_SetConfig+0x9c>)
 80083dc:	4013      	ands	r3, r2
 80083de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	021b      	lsls	r3, r3, #8
 80083e6:	68fa      	ldr	r2, [r7, #12]
 80083e8:	4313      	orrs	r3, r2
 80083ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80083f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	051b      	lsls	r3, r3, #20
 80083fa:	693a      	ldr	r2, [r7, #16]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	4a13      	ldr	r2, [pc, #76]	; (8008450 <TIM_OC6_SetConfig+0xa0>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d003      	beq.n	8008410 <TIM_OC6_SetConfig+0x60>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4a12      	ldr	r2, [pc, #72]	; (8008454 <TIM_OC6_SetConfig+0xa4>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d109      	bne.n	8008424 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008416:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	695b      	ldr	r3, [r3, #20]
 800841c:	029b      	lsls	r3, r3, #10
 800841e:	697a      	ldr	r2, [r7, #20]
 8008420:	4313      	orrs	r3, r2
 8008422:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	697a      	ldr	r2, [r7, #20]
 8008428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	685a      	ldr	r2, [r3, #4]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	693a      	ldr	r2, [r7, #16]
 800843c:	621a      	str	r2, [r3, #32]
}
 800843e:	bf00      	nop
 8008440:	371c      	adds	r7, #28
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr
 800844a:	bf00      	nop
 800844c:	feff8fff 	.word	0xfeff8fff
 8008450:	40010000 	.word	0x40010000
 8008454:	40010400 	.word	0x40010400

08008458 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008458:	b480      	push	{r7}
 800845a:	b087      	sub	sp, #28
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6a1b      	ldr	r3, [r3, #32]
 8008468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6a1b      	ldr	r3, [r3, #32]
 800846e:	f023 0201 	bic.w	r2, r3, #1
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	699b      	ldr	r3, [r3, #24]
 800847a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	011b      	lsls	r3, r3, #4
 8008488:	693a      	ldr	r2, [r7, #16]
 800848a:	4313      	orrs	r3, r2
 800848c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	f023 030a 	bic.w	r3, r3, #10
 8008494:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008496:	697a      	ldr	r2, [r7, #20]
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	4313      	orrs	r3, r2
 800849c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	693a      	ldr	r2, [r7, #16]
 80084a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	697a      	ldr	r2, [r7, #20]
 80084a8:	621a      	str	r2, [r3, #32]
}
 80084aa:	bf00      	nop
 80084ac:	371c      	adds	r7, #28
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr

080084b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084b6:	b480      	push	{r7}
 80084b8:	b087      	sub	sp, #28
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	60f8      	str	r0, [r7, #12]
 80084be:	60b9      	str	r1, [r7, #8]
 80084c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6a1b      	ldr	r3, [r3, #32]
 80084c6:	f023 0210 	bic.w	r2, r3, #16
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	699b      	ldr	r3, [r3, #24]
 80084d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6a1b      	ldr	r3, [r3, #32]
 80084d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80084e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	031b      	lsls	r3, r3, #12
 80084e6:	697a      	ldr	r2, [r7, #20]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80084f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	011b      	lsls	r3, r3, #4
 80084f8:	693a      	ldr	r2, [r7, #16]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	697a      	ldr	r2, [r7, #20]
 8008502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	693a      	ldr	r2, [r7, #16]
 8008508:	621a      	str	r2, [r3, #32]
}
 800850a:	bf00      	nop
 800850c:	371c      	adds	r7, #28
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr

08008516 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008516:	b480      	push	{r7}
 8008518:	b085      	sub	sp, #20
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
 800851e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800852c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800852e:	683a      	ldr	r2, [r7, #0]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	4313      	orrs	r3, r2
 8008534:	f043 0307 	orr.w	r3, r3, #7
 8008538:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	609a      	str	r2, [r3, #8]
}
 8008540:	bf00      	nop
 8008542:	3714      	adds	r7, #20
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800854c:	b480      	push	{r7}
 800854e:	b087      	sub	sp, #28
 8008550:	af00      	add	r7, sp, #0
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	60b9      	str	r1, [r7, #8]
 8008556:	607a      	str	r2, [r7, #4]
 8008558:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008566:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	021a      	lsls	r2, r3, #8
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	431a      	orrs	r2, r3
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	4313      	orrs	r3, r2
 8008574:	697a      	ldr	r2, [r7, #20]
 8008576:	4313      	orrs	r3, r2
 8008578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	697a      	ldr	r2, [r7, #20]
 800857e:	609a      	str	r2, [r3, #8]
}
 8008580:	bf00      	nop
 8008582:	371c      	adds	r7, #28
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800858c:	b480      	push	{r7}
 800858e:	b085      	sub	sp, #20
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800859c:	2b01      	cmp	r3, #1
 800859e:	d101      	bne.n	80085a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085a0:	2302      	movs	r3, #2
 80085a2:	e045      	b.n	8008630 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2202      	movs	r2, #2
 80085b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a1c      	ldr	r2, [pc, #112]	; (800863c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d004      	beq.n	80085d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a1b      	ldr	r2, [pc, #108]	; (8008640 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d108      	bne.n	80085ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80085de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	4313      	orrs	r3, r2
 80085fa:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008602:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	68ba      	ldr	r2, [r7, #8]
 800860a:	4313      	orrs	r3, r2
 800860c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	68ba      	ldr	r2, [r7, #8]
 800861c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2201      	movs	r2, #1
 8008622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800862e:	2300      	movs	r3, #0
}
 8008630:	4618      	mov	r0, r3
 8008632:	3714      	adds	r7, #20
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr
 800863c:	40010000 	.word	0x40010000
 8008640:	40010400 	.word	0x40010400

08008644 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800864e:	2300      	movs	r3, #0
 8008650:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008658:	2b01      	cmp	r3, #1
 800865a:	d101      	bne.n	8008660 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800865c:	2302      	movs	r3, #2
 800865e:	e065      	b.n	800872c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2201      	movs	r2, #1
 8008664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	4313      	orrs	r3, r2
 8008674:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	4313      	orrs	r3, r2
 8008682:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	4313      	orrs	r3, r2
 8008690:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4313      	orrs	r3, r2
 800869e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	4313      	orrs	r3, r2
 80086ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	695b      	ldr	r3, [r3, #20]
 80086b8:	4313      	orrs	r3, r2
 80086ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c6:	4313      	orrs	r3, r2
 80086c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	699b      	ldr	r3, [r3, #24]
 80086d4:	041b      	lsls	r3, r3, #16
 80086d6:	4313      	orrs	r3, r2
 80086d8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a16      	ldr	r2, [pc, #88]	; (8008738 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d004      	beq.n	80086ee <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a14      	ldr	r2, [pc, #80]	; (800873c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d115      	bne.n	800871a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f8:	051b      	lsls	r3, r3, #20
 80086fa:	4313      	orrs	r3, r2
 80086fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	69db      	ldr	r3, [r3, #28]
 8008708:	4313      	orrs	r3, r2
 800870a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	6a1b      	ldr	r3, [r3, #32]
 8008716:	4313      	orrs	r3, r2
 8008718:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	68fa      	ldr	r2, [r7, #12]
 8008720:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	3714      	adds	r7, #20
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr
 8008738:	40010000 	.word	0x40010000
 800873c:	40010400 	.word	0x40010400

08008740 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800875c:	bf00      	nop
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008770:	bf00      	nop
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d101      	bne.n	800878e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	e040      	b.n	8008810 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008792:	2b00      	cmp	r3, #0
 8008794:	d106      	bne.n	80087a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f00c fc12 	bl	8014fc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2224      	movs	r2, #36	; 0x24
 80087a8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	681a      	ldr	r2, [r3, #0]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f022 0201 	bic.w	r2, r2, #1
 80087b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f82c 	bl	8008818 <UART_SetConfig>
 80087c0:	4603      	mov	r3, r0
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d101      	bne.n	80087ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	e022      	b.n	8008810 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d002      	beq.n	80087d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 fac4 	bl	8008d60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	685a      	ldr	r2, [r3, #4]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80087e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	689a      	ldr	r2, [r3, #8]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80087f6:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f042 0201 	orr.w	r2, r2, #1
 8008806:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 fb4b 	bl	8008ea4 <UART_CheckIdleState>
 800880e:	4603      	mov	r3, r0
}
 8008810:	4618      	mov	r0, r3
 8008812:	3708      	adds	r7, #8
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b088      	sub	sp, #32
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008820:	2300      	movs	r3, #0
 8008822:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008824:	2300      	movs	r3, #0
 8008826:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	689a      	ldr	r2, [r3, #8]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	691b      	ldr	r3, [r3, #16]
 8008830:	431a      	orrs	r2, r3
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	695b      	ldr	r3, [r3, #20]
 8008836:	431a      	orrs	r2, r3
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	69db      	ldr	r3, [r3, #28]
 800883c:	4313      	orrs	r3, r2
 800883e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	4bb1      	ldr	r3, [pc, #708]	; (8008b0c <UART_SetConfig+0x2f4>)
 8008848:	4013      	ands	r3, r2
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	6812      	ldr	r2, [r2, #0]
 800884e:	6939      	ldr	r1, [r7, #16]
 8008850:	430b      	orrs	r3, r1
 8008852:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	68da      	ldr	r2, [r3, #12]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	430a      	orrs	r2, r1
 8008868:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	699b      	ldr	r3, [r3, #24]
 800886e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6a1b      	ldr	r3, [r3, #32]
 8008874:	693a      	ldr	r2, [r7, #16]
 8008876:	4313      	orrs	r3, r2
 8008878:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	693a      	ldr	r2, [r7, #16]
 800888a:	430a      	orrs	r2, r1
 800888c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a9f      	ldr	r2, [pc, #636]	; (8008b10 <UART_SetConfig+0x2f8>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d121      	bne.n	80088dc <UART_SetConfig+0xc4>
 8008898:	4b9e      	ldr	r3, [pc, #632]	; (8008b14 <UART_SetConfig+0x2fc>)
 800889a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800889e:	f003 0303 	and.w	r3, r3, #3
 80088a2:	2b03      	cmp	r3, #3
 80088a4:	d816      	bhi.n	80088d4 <UART_SetConfig+0xbc>
 80088a6:	a201      	add	r2, pc, #4	; (adr r2, 80088ac <UART_SetConfig+0x94>)
 80088a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ac:	080088bd 	.word	0x080088bd
 80088b0:	080088c9 	.word	0x080088c9
 80088b4:	080088c3 	.word	0x080088c3
 80088b8:	080088cf 	.word	0x080088cf
 80088bc:	2301      	movs	r3, #1
 80088be:	77fb      	strb	r3, [r7, #31]
 80088c0:	e151      	b.n	8008b66 <UART_SetConfig+0x34e>
 80088c2:	2302      	movs	r3, #2
 80088c4:	77fb      	strb	r3, [r7, #31]
 80088c6:	e14e      	b.n	8008b66 <UART_SetConfig+0x34e>
 80088c8:	2304      	movs	r3, #4
 80088ca:	77fb      	strb	r3, [r7, #31]
 80088cc:	e14b      	b.n	8008b66 <UART_SetConfig+0x34e>
 80088ce:	2308      	movs	r3, #8
 80088d0:	77fb      	strb	r3, [r7, #31]
 80088d2:	e148      	b.n	8008b66 <UART_SetConfig+0x34e>
 80088d4:	2310      	movs	r3, #16
 80088d6:	77fb      	strb	r3, [r7, #31]
 80088d8:	bf00      	nop
 80088da:	e144      	b.n	8008b66 <UART_SetConfig+0x34e>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a8d      	ldr	r2, [pc, #564]	; (8008b18 <UART_SetConfig+0x300>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d134      	bne.n	8008950 <UART_SetConfig+0x138>
 80088e6:	4b8b      	ldr	r3, [pc, #556]	; (8008b14 <UART_SetConfig+0x2fc>)
 80088e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088ec:	f003 030c 	and.w	r3, r3, #12
 80088f0:	2b0c      	cmp	r3, #12
 80088f2:	d829      	bhi.n	8008948 <UART_SetConfig+0x130>
 80088f4:	a201      	add	r2, pc, #4	; (adr r2, 80088fc <UART_SetConfig+0xe4>)
 80088f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088fa:	bf00      	nop
 80088fc:	08008931 	.word	0x08008931
 8008900:	08008949 	.word	0x08008949
 8008904:	08008949 	.word	0x08008949
 8008908:	08008949 	.word	0x08008949
 800890c:	0800893d 	.word	0x0800893d
 8008910:	08008949 	.word	0x08008949
 8008914:	08008949 	.word	0x08008949
 8008918:	08008949 	.word	0x08008949
 800891c:	08008937 	.word	0x08008937
 8008920:	08008949 	.word	0x08008949
 8008924:	08008949 	.word	0x08008949
 8008928:	08008949 	.word	0x08008949
 800892c:	08008943 	.word	0x08008943
 8008930:	2300      	movs	r3, #0
 8008932:	77fb      	strb	r3, [r7, #31]
 8008934:	e117      	b.n	8008b66 <UART_SetConfig+0x34e>
 8008936:	2302      	movs	r3, #2
 8008938:	77fb      	strb	r3, [r7, #31]
 800893a:	e114      	b.n	8008b66 <UART_SetConfig+0x34e>
 800893c:	2304      	movs	r3, #4
 800893e:	77fb      	strb	r3, [r7, #31]
 8008940:	e111      	b.n	8008b66 <UART_SetConfig+0x34e>
 8008942:	2308      	movs	r3, #8
 8008944:	77fb      	strb	r3, [r7, #31]
 8008946:	e10e      	b.n	8008b66 <UART_SetConfig+0x34e>
 8008948:	2310      	movs	r3, #16
 800894a:	77fb      	strb	r3, [r7, #31]
 800894c:	bf00      	nop
 800894e:	e10a      	b.n	8008b66 <UART_SetConfig+0x34e>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a71      	ldr	r2, [pc, #452]	; (8008b1c <UART_SetConfig+0x304>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d120      	bne.n	800899c <UART_SetConfig+0x184>
 800895a:	4b6e      	ldr	r3, [pc, #440]	; (8008b14 <UART_SetConfig+0x2fc>)
 800895c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008960:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008964:	2b10      	cmp	r3, #16
 8008966:	d00f      	beq.n	8008988 <UART_SetConfig+0x170>
 8008968:	2b10      	cmp	r3, #16
 800896a:	d802      	bhi.n	8008972 <UART_SetConfig+0x15a>
 800896c:	2b00      	cmp	r3, #0
 800896e:	d005      	beq.n	800897c <UART_SetConfig+0x164>
 8008970:	e010      	b.n	8008994 <UART_SetConfig+0x17c>
 8008972:	2b20      	cmp	r3, #32
 8008974:	d005      	beq.n	8008982 <UART_SetConfig+0x16a>
 8008976:	2b30      	cmp	r3, #48	; 0x30
 8008978:	d009      	beq.n	800898e <UART_SetConfig+0x176>
 800897a:	e00b      	b.n	8008994 <UART_SetConfig+0x17c>
 800897c:	2300      	movs	r3, #0
 800897e:	77fb      	strb	r3, [r7, #31]
 8008980:	e0f1      	b.n	8008b66 <UART_SetConfig+0x34e>
 8008982:	2302      	movs	r3, #2
 8008984:	77fb      	strb	r3, [r7, #31]
 8008986:	e0ee      	b.n	8008b66 <UART_SetConfig+0x34e>
 8008988:	2304      	movs	r3, #4
 800898a:	77fb      	strb	r3, [r7, #31]
 800898c:	e0eb      	b.n	8008b66 <UART_SetConfig+0x34e>
 800898e:	2308      	movs	r3, #8
 8008990:	77fb      	strb	r3, [r7, #31]
 8008992:	e0e8      	b.n	8008b66 <UART_SetConfig+0x34e>
 8008994:	2310      	movs	r3, #16
 8008996:	77fb      	strb	r3, [r7, #31]
 8008998:	bf00      	nop
 800899a:	e0e4      	b.n	8008b66 <UART_SetConfig+0x34e>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a5f      	ldr	r2, [pc, #380]	; (8008b20 <UART_SetConfig+0x308>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d120      	bne.n	80089e8 <UART_SetConfig+0x1d0>
 80089a6:	4b5b      	ldr	r3, [pc, #364]	; (8008b14 <UART_SetConfig+0x2fc>)
 80089a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80089b0:	2b40      	cmp	r3, #64	; 0x40
 80089b2:	d00f      	beq.n	80089d4 <UART_SetConfig+0x1bc>
 80089b4:	2b40      	cmp	r3, #64	; 0x40
 80089b6:	d802      	bhi.n	80089be <UART_SetConfig+0x1a6>
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d005      	beq.n	80089c8 <UART_SetConfig+0x1b0>
 80089bc:	e010      	b.n	80089e0 <UART_SetConfig+0x1c8>
 80089be:	2b80      	cmp	r3, #128	; 0x80
 80089c0:	d005      	beq.n	80089ce <UART_SetConfig+0x1b6>
 80089c2:	2bc0      	cmp	r3, #192	; 0xc0
 80089c4:	d009      	beq.n	80089da <UART_SetConfig+0x1c2>
 80089c6:	e00b      	b.n	80089e0 <UART_SetConfig+0x1c8>
 80089c8:	2300      	movs	r3, #0
 80089ca:	77fb      	strb	r3, [r7, #31]
 80089cc:	e0cb      	b.n	8008b66 <UART_SetConfig+0x34e>
 80089ce:	2302      	movs	r3, #2
 80089d0:	77fb      	strb	r3, [r7, #31]
 80089d2:	e0c8      	b.n	8008b66 <UART_SetConfig+0x34e>
 80089d4:	2304      	movs	r3, #4
 80089d6:	77fb      	strb	r3, [r7, #31]
 80089d8:	e0c5      	b.n	8008b66 <UART_SetConfig+0x34e>
 80089da:	2308      	movs	r3, #8
 80089dc:	77fb      	strb	r3, [r7, #31]
 80089de:	e0c2      	b.n	8008b66 <UART_SetConfig+0x34e>
 80089e0:	2310      	movs	r3, #16
 80089e2:	77fb      	strb	r3, [r7, #31]
 80089e4:	bf00      	nop
 80089e6:	e0be      	b.n	8008b66 <UART_SetConfig+0x34e>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a4d      	ldr	r2, [pc, #308]	; (8008b24 <UART_SetConfig+0x30c>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d124      	bne.n	8008a3c <UART_SetConfig+0x224>
 80089f2:	4b48      	ldr	r3, [pc, #288]	; (8008b14 <UART_SetConfig+0x2fc>)
 80089f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a00:	d012      	beq.n	8008a28 <UART_SetConfig+0x210>
 8008a02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a06:	d802      	bhi.n	8008a0e <UART_SetConfig+0x1f6>
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d007      	beq.n	8008a1c <UART_SetConfig+0x204>
 8008a0c:	e012      	b.n	8008a34 <UART_SetConfig+0x21c>
 8008a0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a12:	d006      	beq.n	8008a22 <UART_SetConfig+0x20a>
 8008a14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a18:	d009      	beq.n	8008a2e <UART_SetConfig+0x216>
 8008a1a:	e00b      	b.n	8008a34 <UART_SetConfig+0x21c>
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	77fb      	strb	r3, [r7, #31]
 8008a20:	e0a1      	b.n	8008b66 <UART_SetConfig+0x34e>
 8008a22:	2302      	movs	r3, #2
 8008a24:	77fb      	strb	r3, [r7, #31]
 8008a26:	e09e      	b.n	8008b66 <UART_SetConfig+0x34e>
 8008a28:	2304      	movs	r3, #4
 8008a2a:	77fb      	strb	r3, [r7, #31]
 8008a2c:	e09b      	b.n	8008b66 <UART_SetConfig+0x34e>
 8008a2e:	2308      	movs	r3, #8
 8008a30:	77fb      	strb	r3, [r7, #31]
 8008a32:	e098      	b.n	8008b66 <UART_SetConfig+0x34e>
 8008a34:	2310      	movs	r3, #16
 8008a36:	77fb      	strb	r3, [r7, #31]
 8008a38:	bf00      	nop
 8008a3a:	e094      	b.n	8008b66 <UART_SetConfig+0x34e>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a39      	ldr	r2, [pc, #228]	; (8008b28 <UART_SetConfig+0x310>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d124      	bne.n	8008a90 <UART_SetConfig+0x278>
 8008a46:	4b33      	ldr	r3, [pc, #204]	; (8008b14 <UART_SetConfig+0x2fc>)
 8008a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a54:	d012      	beq.n	8008a7c <UART_SetConfig+0x264>
 8008a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a5a:	d802      	bhi.n	8008a62 <UART_SetConfig+0x24a>
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d007      	beq.n	8008a70 <UART_SetConfig+0x258>
 8008a60:	e012      	b.n	8008a88 <UART_SetConfig+0x270>
 8008a62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a66:	d006      	beq.n	8008a76 <UART_SetConfig+0x25e>
 8008a68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a6c:	d009      	beq.n	8008a82 <UART_SetConfig+0x26a>
 8008a6e:	e00b      	b.n	8008a88 <UART_SetConfig+0x270>
 8008a70:	2301      	movs	r3, #1
 8008a72:	77fb      	strb	r3, [r7, #31]
 8008a74:	e077      	b.n	8008b66 <UART_SetConfig+0x34e>
 8008a76:	2302      	movs	r3, #2
 8008a78:	77fb      	strb	r3, [r7, #31]
 8008a7a:	e074      	b.n	8008b66 <UART_SetConfig+0x34e>
 8008a7c:	2304      	movs	r3, #4
 8008a7e:	77fb      	strb	r3, [r7, #31]
 8008a80:	e071      	b.n	8008b66 <UART_SetConfig+0x34e>
 8008a82:	2308      	movs	r3, #8
 8008a84:	77fb      	strb	r3, [r7, #31]
 8008a86:	e06e      	b.n	8008b66 <UART_SetConfig+0x34e>
 8008a88:	2310      	movs	r3, #16
 8008a8a:	77fb      	strb	r3, [r7, #31]
 8008a8c:	bf00      	nop
 8008a8e:	e06a      	b.n	8008b66 <UART_SetConfig+0x34e>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a25      	ldr	r2, [pc, #148]	; (8008b2c <UART_SetConfig+0x314>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d124      	bne.n	8008ae4 <UART_SetConfig+0x2cc>
 8008a9a:	4b1e      	ldr	r3, [pc, #120]	; (8008b14 <UART_SetConfig+0x2fc>)
 8008a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008aa0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008aa8:	d012      	beq.n	8008ad0 <UART_SetConfig+0x2b8>
 8008aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008aae:	d802      	bhi.n	8008ab6 <UART_SetConfig+0x29e>
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d007      	beq.n	8008ac4 <UART_SetConfig+0x2ac>
 8008ab4:	e012      	b.n	8008adc <UART_SetConfig+0x2c4>
 8008ab6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008aba:	d006      	beq.n	8008aca <UART_SetConfig+0x2b2>
 8008abc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008ac0:	d009      	beq.n	8008ad6 <UART_SetConfig+0x2be>
 8008ac2:	e00b      	b.n	8008adc <UART_SetConfig+0x2c4>
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	77fb      	strb	r3, [r7, #31]
 8008ac8:	e04d      	b.n	8008b66 <UART_SetConfig+0x34e>
 8008aca:	2302      	movs	r3, #2
 8008acc:	77fb      	strb	r3, [r7, #31]
 8008ace:	e04a      	b.n	8008b66 <UART_SetConfig+0x34e>
 8008ad0:	2304      	movs	r3, #4
 8008ad2:	77fb      	strb	r3, [r7, #31]
 8008ad4:	e047      	b.n	8008b66 <UART_SetConfig+0x34e>
 8008ad6:	2308      	movs	r3, #8
 8008ad8:	77fb      	strb	r3, [r7, #31]
 8008ada:	e044      	b.n	8008b66 <UART_SetConfig+0x34e>
 8008adc:	2310      	movs	r3, #16
 8008ade:	77fb      	strb	r3, [r7, #31]
 8008ae0:	bf00      	nop
 8008ae2:	e040      	b.n	8008b66 <UART_SetConfig+0x34e>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a11      	ldr	r2, [pc, #68]	; (8008b30 <UART_SetConfig+0x318>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d139      	bne.n	8008b62 <UART_SetConfig+0x34a>
 8008aee:	4b09      	ldr	r3, [pc, #36]	; (8008b14 <UART_SetConfig+0x2fc>)
 8008af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008af4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008af8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008afc:	d027      	beq.n	8008b4e <UART_SetConfig+0x336>
 8008afe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b02:	d817      	bhi.n	8008b34 <UART_SetConfig+0x31c>
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d01c      	beq.n	8008b42 <UART_SetConfig+0x32a>
 8008b08:	e027      	b.n	8008b5a <UART_SetConfig+0x342>
 8008b0a:	bf00      	nop
 8008b0c:	efff69f3 	.word	0xefff69f3
 8008b10:	40011000 	.word	0x40011000
 8008b14:	40023800 	.word	0x40023800
 8008b18:	40004400 	.word	0x40004400
 8008b1c:	40004800 	.word	0x40004800
 8008b20:	40004c00 	.word	0x40004c00
 8008b24:	40005000 	.word	0x40005000
 8008b28:	40011400 	.word	0x40011400
 8008b2c:	40007800 	.word	0x40007800
 8008b30:	40007c00 	.word	0x40007c00
 8008b34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b38:	d006      	beq.n	8008b48 <UART_SetConfig+0x330>
 8008b3a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008b3e:	d009      	beq.n	8008b54 <UART_SetConfig+0x33c>
 8008b40:	e00b      	b.n	8008b5a <UART_SetConfig+0x342>
 8008b42:	2300      	movs	r3, #0
 8008b44:	77fb      	strb	r3, [r7, #31]
 8008b46:	e00e      	b.n	8008b66 <UART_SetConfig+0x34e>
 8008b48:	2302      	movs	r3, #2
 8008b4a:	77fb      	strb	r3, [r7, #31]
 8008b4c:	e00b      	b.n	8008b66 <UART_SetConfig+0x34e>
 8008b4e:	2304      	movs	r3, #4
 8008b50:	77fb      	strb	r3, [r7, #31]
 8008b52:	e008      	b.n	8008b66 <UART_SetConfig+0x34e>
 8008b54:	2308      	movs	r3, #8
 8008b56:	77fb      	strb	r3, [r7, #31]
 8008b58:	e005      	b.n	8008b66 <UART_SetConfig+0x34e>
 8008b5a:	2310      	movs	r3, #16
 8008b5c:	77fb      	strb	r3, [r7, #31]
 8008b5e:	bf00      	nop
 8008b60:	e001      	b.n	8008b66 <UART_SetConfig+0x34e>
 8008b62:	2310      	movs	r3, #16
 8008b64:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	69db      	ldr	r3, [r3, #28]
 8008b6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b6e:	d17c      	bne.n	8008c6a <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8008b70:	7ffb      	ldrb	r3, [r7, #31]
 8008b72:	2b08      	cmp	r3, #8
 8008b74:	d859      	bhi.n	8008c2a <UART_SetConfig+0x412>
 8008b76:	a201      	add	r2, pc, #4	; (adr r2, 8008b7c <UART_SetConfig+0x364>)
 8008b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b7c:	08008ba1 	.word	0x08008ba1
 8008b80:	08008bbf 	.word	0x08008bbf
 8008b84:	08008bdd 	.word	0x08008bdd
 8008b88:	08008c2b 	.word	0x08008c2b
 8008b8c:	08008bf5 	.word	0x08008bf5
 8008b90:	08008c2b 	.word	0x08008c2b
 8008b94:	08008c2b 	.word	0x08008c2b
 8008b98:	08008c2b 	.word	0x08008c2b
 8008b9c:	08008c13 	.word	0x08008c13
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8008ba0:	f7fb ff6e 	bl	8004a80 <HAL_RCC_GetPCLK1Freq>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	005a      	lsls	r2, r3, #1
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	085b      	lsrs	r3, r3, #1
 8008bae:	441a      	add	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	61bb      	str	r3, [r7, #24]
        break;
 8008bbc:	e038      	b.n	8008c30 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8008bbe:	f7fb ff73 	bl	8004aa8 <HAL_RCC_GetPCLK2Freq>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	005a      	lsls	r2, r3, #1
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	085b      	lsrs	r3, r3, #1
 8008bcc:	441a      	add	r2, r3
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	61bb      	str	r3, [r7, #24]
        break;
 8008bda:	e029      	b.n	8008c30 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	085a      	lsrs	r2, r3, #1
 8008be2:	4b5d      	ldr	r3, [pc, #372]	; (8008d58 <UART_SetConfig+0x540>)
 8008be4:	4413      	add	r3, r2
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	6852      	ldr	r2, [r2, #4]
 8008bea:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	61bb      	str	r3, [r7, #24]
        break;
 8008bf2:	e01d      	b.n	8008c30 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8008bf4:	f7fb fe86 	bl	8004904 <HAL_RCC_GetSysClockFreq>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	005a      	lsls	r2, r3, #1
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	085b      	lsrs	r3, r3, #1
 8008c02:	441a      	add	r2, r3
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	61bb      	str	r3, [r7, #24]
        break;
 8008c10:	e00e      	b.n	8008c30 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	085b      	lsrs	r3, r3, #1
 8008c18:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	61bb      	str	r3, [r7, #24]
        break;
 8008c28:	e002      	b.n	8008c30 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	75fb      	strb	r3, [r7, #23]
        break;
 8008c2e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	2b0f      	cmp	r3, #15
 8008c34:	d916      	bls.n	8008c64 <UART_SetConfig+0x44c>
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c3c:	d212      	bcs.n	8008c64 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c3e:	69bb      	ldr	r3, [r7, #24]
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	f023 030f 	bic.w	r3, r3, #15
 8008c46:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c48:	69bb      	ldr	r3, [r7, #24]
 8008c4a:	085b      	lsrs	r3, r3, #1
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	f003 0307 	and.w	r3, r3, #7
 8008c52:	b29a      	uxth	r2, r3
 8008c54:	89fb      	ldrh	r3, [r7, #14]
 8008c56:	4313      	orrs	r3, r2
 8008c58:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	89fa      	ldrh	r2, [r7, #14]
 8008c60:	60da      	str	r2, [r3, #12]
 8008c62:	e06e      	b.n	8008d42 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	75fb      	strb	r3, [r7, #23]
 8008c68:	e06b      	b.n	8008d42 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8008c6a:	7ffb      	ldrb	r3, [r7, #31]
 8008c6c:	2b08      	cmp	r3, #8
 8008c6e:	d857      	bhi.n	8008d20 <UART_SetConfig+0x508>
 8008c70:	a201      	add	r2, pc, #4	; (adr r2, 8008c78 <UART_SetConfig+0x460>)
 8008c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c76:	bf00      	nop
 8008c78:	08008c9d 	.word	0x08008c9d
 8008c7c:	08008cb9 	.word	0x08008cb9
 8008c80:	08008cd5 	.word	0x08008cd5
 8008c84:	08008d21 	.word	0x08008d21
 8008c88:	08008ced 	.word	0x08008ced
 8008c8c:	08008d21 	.word	0x08008d21
 8008c90:	08008d21 	.word	0x08008d21
 8008c94:	08008d21 	.word	0x08008d21
 8008c98:	08008d09 	.word	0x08008d09
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8008c9c:	f7fb fef0 	bl	8004a80 <HAL_RCC_GetPCLK1Freq>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	085b      	lsrs	r3, r3, #1
 8008ca8:	441a      	add	r2, r3
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	61bb      	str	r3, [r7, #24]
        break;
 8008cb6:	e036      	b.n	8008d26 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8008cb8:	f7fb fef6 	bl	8004aa8 <HAL_RCC_GetPCLK2Freq>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	085b      	lsrs	r3, r3, #1
 8008cc4:	441a      	add	r2, r3
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	61bb      	str	r3, [r7, #24]
        break;
 8008cd2:	e028      	b.n	8008d26 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	085a      	lsrs	r2, r3, #1
 8008cda:	4b20      	ldr	r3, [pc, #128]	; (8008d5c <UART_SetConfig+0x544>)
 8008cdc:	4413      	add	r3, r2
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	6852      	ldr	r2, [r2, #4]
 8008ce2:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	61bb      	str	r3, [r7, #24]
        break;
 8008cea:	e01c      	b.n	8008d26 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8008cec:	f7fb fe0a 	bl	8004904 <HAL_RCC_GetSysClockFreq>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	085b      	lsrs	r3, r3, #1
 8008cf8:	441a      	add	r2, r3
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	61bb      	str	r3, [r7, #24]
        break;
 8008d06:	e00e      	b.n	8008d26 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	085b      	lsrs	r3, r3, #1
 8008d0e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	61bb      	str	r3, [r7, #24]
        break;
 8008d1e:	e002      	b.n	8008d26 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8008d20:	2301      	movs	r3, #1
 8008d22:	75fb      	strb	r3, [r7, #23]
        break;
 8008d24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	2b0f      	cmp	r3, #15
 8008d2a:	d908      	bls.n	8008d3e <UART_SetConfig+0x526>
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d32:	d204      	bcs.n	8008d3e <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	69ba      	ldr	r2, [r7, #24]
 8008d3a:	60da      	str	r2, [r3, #12]
 8008d3c:	e001      	b.n	8008d42 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2200      	movs	r2, #0
 8008d46:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3720      	adds	r7, #32
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	01e84800 	.word	0x01e84800
 8008d5c:	00f42400 	.word	0x00f42400

08008d60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b083      	sub	sp, #12
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6c:	f003 0301 	and.w	r3, r3, #1
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d00a      	beq.n	8008d8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	430a      	orrs	r2, r1
 8008d88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8e:	f003 0302 	and.w	r3, r3, #2
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d00a      	beq.n	8008dac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	430a      	orrs	r2, r1
 8008daa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db0:	f003 0304 	and.w	r3, r3, #4
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d00a      	beq.n	8008dce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	430a      	orrs	r2, r1
 8008dcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd2:	f003 0308 	and.w	r3, r3, #8
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00a      	beq.n	8008df0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	430a      	orrs	r2, r1
 8008dee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008df4:	f003 0310 	and.w	r3, r3, #16
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d00a      	beq.n	8008e12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	430a      	orrs	r2, r1
 8008e10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e16:	f003 0320 	and.w	r3, r3, #32
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d00a      	beq.n	8008e34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	430a      	orrs	r2, r1
 8008e32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d01a      	beq.n	8008e76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	430a      	orrs	r2, r1
 8008e54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e5e:	d10a      	bne.n	8008e76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	430a      	orrs	r2, r1
 8008e74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d00a      	beq.n	8008e98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	430a      	orrs	r2, r1
 8008e96:	605a      	str	r2, [r3, #4]
  }
}
 8008e98:	bf00      	nop
 8008e9a:	370c      	adds	r7, #12
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr

08008ea4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b086      	sub	sp, #24
 8008ea8:	af02      	add	r7, sp, #8
 8008eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008eb2:	f7f7 fb4f 	bl	8000554 <HAL_GetTick>
 8008eb6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f003 0308 	and.w	r3, r3, #8
 8008ec2:	2b08      	cmp	r3, #8
 8008ec4:	d10e      	bne.n	8008ee4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ec6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008eca:	9300      	str	r3, [sp, #0]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 f814 	bl	8008f02 <UART_WaitOnFlagUntilTimeout>
 8008eda:	4603      	mov	r3, r0
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d001      	beq.n	8008ee4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ee0:	2303      	movs	r3, #3
 8008ee2:	e00a      	b.n	8008efa <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2220      	movs	r2, #32
 8008ee8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2220      	movs	r2, #32
 8008eee:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3710      	adds	r7, #16
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}

08008f02 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008f02:	b580      	push	{r7, lr}
 8008f04:	b084      	sub	sp, #16
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	60f8      	str	r0, [r7, #12]
 8008f0a:	60b9      	str	r1, [r7, #8]
 8008f0c:	603b      	str	r3, [r7, #0]
 8008f0e:	4613      	mov	r3, r2
 8008f10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f12:	e02a      	b.n	8008f6a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f14:	69bb      	ldr	r3, [r7, #24]
 8008f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f1a:	d026      	beq.n	8008f6a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f1c:	f7f7 fb1a 	bl	8000554 <HAL_GetTick>
 8008f20:	4602      	mov	r2, r0
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	1ad3      	subs	r3, r2, r3
 8008f26:	69ba      	ldr	r2, [r7, #24]
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d302      	bcc.n	8008f32 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f2c:	69bb      	ldr	r3, [r7, #24]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d11b      	bne.n	8008f6a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008f40:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	689a      	ldr	r2, [r3, #8]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f022 0201 	bic.w	r2, r2, #1
 8008f50:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2220      	movs	r2, #32
 8008f56:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2220      	movs	r2, #32
 8008f5c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2200      	movs	r2, #0
 8008f62:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008f66:	2303      	movs	r3, #3
 8008f68:	e00f      	b.n	8008f8a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	69da      	ldr	r2, [r3, #28]
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	4013      	ands	r3, r2
 8008f74:	68ba      	ldr	r2, [r7, #8]
 8008f76:	429a      	cmp	r2, r3
 8008f78:	bf0c      	ite	eq
 8008f7a:	2301      	moveq	r3, #1
 8008f7c:	2300      	movne	r3, #0
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	461a      	mov	r2, r3
 8008f82:	79fb      	ldrb	r3, [r7, #7]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d0c5      	beq.n	8008f14 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3710      	adds	r7, #16
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
	...

08008f94 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b085      	sub	sp, #20
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d027      	beq.n	8008ffe <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008fb4:	68fa      	ldr	r2, [r7, #12]
 8008fb6:	4b2f      	ldr	r3, [pc, #188]	; (8009074 <FMC_SDRAM_Init+0xe0>)
 8008fb8:	4013      	ands	r3, r2
 8008fba:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008fc4:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8008fca:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8008fd0:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8008fd6:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8008fdc:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8008fe2:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8008fe8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008fee:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008ff0:	68fa      	ldr	r2, [r7, #12]
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	601a      	str	r2, [r3, #0]
 8008ffc:	e032      	b.n	8009064 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800900a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009014:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800901a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800901c:	68fa      	ldr	r2, [r7, #12]
 800901e:	4313      	orrs	r3, r2
 8009020:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009028:	68ba      	ldr	r2, [r7, #8]
 800902a:	4b12      	ldr	r3, [pc, #72]	; (8009074 <FMC_SDRAM_Init+0xe0>)
 800902c:	4013      	ands	r3, r2
 800902e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009038:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800903e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8009044:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800904a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8009050:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	4313      	orrs	r3, r2
 8009056:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	68ba      	ldr	r2, [r7, #8]
 8009062:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3714      	adds	r7, #20
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr
 8009072:	bf00      	nop
 8009074:	ffff8000 	.word	0xffff8000

08009078 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009078:	b480      	push	{r7}
 800907a:	b087      	sub	sp, #28
 800907c:	af00      	add	r7, sp, #0
 800907e:	60f8      	str	r0, [r7, #12]
 8009080:	60b9      	str	r1, [r7, #8]
 8009082:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8009084:	2300      	movs	r3, #0
 8009086:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8009088:	2300      	movs	r3, #0
 800908a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2b01      	cmp	r3, #1
 8009090:	d02e      	beq.n	80090f0 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800909e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	3b01      	subs	r3, #1
 80090ac:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80090ae:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	3b01      	subs	r3, #1
 80090b6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 80090b8:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	68db      	ldr	r3, [r3, #12]
 80090be:	3b01      	subs	r3, #1
 80090c0:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80090c2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	3b01      	subs	r3, #1
 80090ca:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 80090cc:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	695b      	ldr	r3, [r3, #20]
 80090d2:	3b01      	subs	r3, #1
 80090d4:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 80090d6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	699b      	ldr	r3, [r3, #24]
 80090dc:	3b01      	subs	r3, #1
 80090de:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80090e0:	4313      	orrs	r3, r2
 80090e2:	697a      	ldr	r2, [r7, #20]
 80090e4:	4313      	orrs	r3, r2
 80090e6:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	697a      	ldr	r2, [r7, #20]
 80090ec:	609a      	str	r2, [r3, #8]
 80090ee:	e039      	b.n	8009164 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80090f6:	697a      	ldr	r2, [r7, #20]
 80090f8:	4b1e      	ldr	r3, [pc, #120]	; (8009174 <FMC_SDRAM_Timing_Init+0xfc>)
 80090fa:	4013      	ands	r3, r2
 80090fc:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	3b01      	subs	r3, #1
 8009104:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	695b      	ldr	r3, [r3, #20]
 800910a:	3b01      	subs	r3, #1
 800910c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800910e:	4313      	orrs	r3, r2
 8009110:	697a      	ldr	r2, [r7, #20]
 8009112:	4313      	orrs	r3, r2
 8009114:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009122:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	3b01      	subs	r3, #1
 8009130:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009132:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	3b01      	subs	r3, #1
 800913a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800913c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	3b01      	subs	r3, #1
 8009144:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8009146:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	699b      	ldr	r3, [r3, #24]
 800914c:	3b01      	subs	r3, #1
 800914e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009150:	4313      	orrs	r3, r2
 8009152:	693a      	ldr	r2, [r7, #16]
 8009154:	4313      	orrs	r3, r2
 8009156:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	697a      	ldr	r2, [r7, #20]
 800915c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	693a      	ldr	r2, [r7, #16]
 8009162:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	371c      	adds	r7, #28
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr
 8009172:	bf00      	nop
 8009174:	ff0f0fff 	.word	0xff0f0fff

08009178 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009178:	b084      	sub	sp, #16
 800917a:	b480      	push	{r7}
 800917c:	b085      	sub	sp, #20
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
 8009182:	f107 001c 	add.w	r0, r7, #28
 8009186:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800918a:	2300      	movs	r3, #0
 800918c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800918e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009190:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009192:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009196:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009198:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800919a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800919c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800919e:	431a      	orrs	r2, r3
             Init.ClockDiv
 80091a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80091a2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80091a4:	68fa      	ldr	r2, [r7, #12]
 80091a6:	4313      	orrs	r3, r2
 80091a8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	685a      	ldr	r2, [r3, #4]
 80091ae:	4b07      	ldr	r3, [pc, #28]	; (80091cc <SDMMC_Init+0x54>)
 80091b0:	4013      	ands	r3, r2
 80091b2:	68fa      	ldr	r2, [r7, #12]
 80091b4:	431a      	orrs	r2, r3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80091ba:	2300      	movs	r3, #0
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3714      	adds	r7, #20
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	b004      	add	sp, #16
 80091c8:	4770      	bx	lr
 80091ca:	bf00      	nop
 80091cc:	ffff8100 	.word	0xffff8100

080091d0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80091de:	4618      	mov	r0, r3
 80091e0:	370c      	adds	r7, #12
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr

080091ea <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80091ea:	b480      	push	{r7}
 80091ec:	b083      	sub	sp, #12
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
 80091f2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80091fe:	2300      	movs	r3, #0
}
 8009200:	4618      	mov	r0, r3
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2203      	movs	r2, #3
 8009218:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 800921a:	2300      	movs	r3, #0
}
 800921c:	4618      	mov	r0, r3
 800921e:	370c      	adds	r7, #12
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8009228:	b480      	push	{r7}
 800922a:	b083      	sub	sp, #12
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f003 0303 	and.w	r3, r3, #3
}
 8009238:	4618      	mov	r0, r3
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800924e:	2300      	movs	r3, #0
 8009250:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009262:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009268:	431a      	orrs	r2, r3
                       Command->CPSM);
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800926e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009270:	68fa      	ldr	r2, [r7, #12]
 8009272:	4313      	orrs	r3, r2
 8009274:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	68da      	ldr	r2, [r3, #12]
 800927a:	4b06      	ldr	r3, [pc, #24]	; (8009294 <SDMMC_SendCommand+0x50>)
 800927c:	4013      	ands	r3, r2
 800927e:	68fa      	ldr	r2, [r7, #12]
 8009280:	431a      	orrs	r2, r3
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009286:	2300      	movs	r3, #0
}
 8009288:	4618      	mov	r0, r3
 800928a:	3714      	adds	r7, #20
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr
 8009294:	fffff000 	.word	0xfffff000

08009298 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	691b      	ldr	r3, [r3, #16]
 80092a4:	b2db      	uxtb	r3, r3
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	370c      	adds	r7, #12
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr

080092b2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80092b2:	b480      	push	{r7}
 80092b4:	b085      	sub	sp, #20
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
 80092ba:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 80092bc:	2300      	movs	r3, #0
 80092be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	3314      	adds	r3, #20
 80092c4:	461a      	mov	r2, r3
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	4413      	add	r3, r2
 80092ca:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
}  
 80092d0:	4618      	mov	r0, r3
 80092d2:	3714      	adds	r7, #20
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80092dc:	b480      	push	{r7}
 80092de:	b085      	sub	sp, #20
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80092e6:	2300      	movs	r3, #0
 80092e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	685a      	ldr	r2, [r3, #4]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009302:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009308:	431a      	orrs	r2, r3
                       Data->DPSM);
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800930e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009310:	68fa      	ldr	r2, [r7, #12]
 8009312:	4313      	orrs	r3, r2
 8009314:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800931a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	431a      	orrs	r2, r3
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009326:	2300      	movs	r3, #0

}
 8009328:	4618      	mov	r0, r3
 800932a:	3714      	adds	r7, #20
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b088      	sub	sp, #32
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800933e:	2300      	movs	r3, #0
 8009340:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009346:	2310      	movs	r3, #16
 8009348:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800934a:	2340      	movs	r3, #64	; 0x40
 800934c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800934e:	2300      	movs	r3, #0
 8009350:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009356:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009358:	f107 0308 	add.w	r3, r7, #8
 800935c:	4619      	mov	r1, r3
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f7ff ff70 	bl	8009244 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009364:	f241 3288 	movw	r2, #5000	; 0x1388
 8009368:	2110      	movs	r1, #16
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 fa64 	bl	8009838 <SDMMC_GetCmdResp1>
 8009370:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009372:	69fb      	ldr	r3, [r7, #28]
}
 8009374:	4618      	mov	r0, r3
 8009376:	3720      	adds	r7, #32
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b088      	sub	sp, #32
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009386:	2300      	movs	r3, #0
 8009388:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800938e:	2311      	movs	r3, #17
 8009390:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009392:	2340      	movs	r3, #64	; 0x40
 8009394:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009396:	2300      	movs	r3, #0
 8009398:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800939a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800939e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80093a0:	f107 0308 	add.w	r3, r7, #8
 80093a4:	4619      	mov	r1, r3
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f7ff ff4c 	bl	8009244 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80093ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80093b0:	2111      	movs	r1, #17
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 fa40 	bl	8009838 <SDMMC_GetCmdResp1>
 80093b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093ba:	69fb      	ldr	r3, [r7, #28]
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3720      	adds	r7, #32
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b088      	sub	sp, #32
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80093ce:	2300      	movs	r3, #0
 80093d0:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80093d6:	2312      	movs	r3, #18
 80093d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80093da:	2340      	movs	r3, #64	; 0x40
 80093dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80093de:	2300      	movs	r3, #0
 80093e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80093e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093e6:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80093e8:	f107 0308 	add.w	r3, r7, #8
 80093ec:	4619      	mov	r1, r3
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f7ff ff28 	bl	8009244 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80093f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80093f8:	2112      	movs	r1, #18
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 fa1c 	bl	8009838 <SDMMC_GetCmdResp1>
 8009400:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009402:	69fb      	ldr	r3, [r7, #28]
}
 8009404:	4618      	mov	r0, r3
 8009406:	3720      	adds	r7, #32
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b088      	sub	sp, #32
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009416:	2300      	movs	r3, #0
 8009418:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800941e:	2318      	movs	r3, #24
 8009420:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009422:	2340      	movs	r3, #64	; 0x40
 8009424:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009426:	2300      	movs	r3, #0
 8009428:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800942a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800942e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009430:	f107 0308 	add.w	r3, r7, #8
 8009434:	4619      	mov	r1, r3
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f7ff ff04 	bl	8009244 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800943c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009440:	2118      	movs	r1, #24
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 f9f8 	bl	8009838 <SDMMC_GetCmdResp1>
 8009448:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800944a:	69fb      	ldr	r3, [r7, #28]
}
 800944c:	4618      	mov	r0, r3
 800944e:	3720      	adds	r7, #32
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b088      	sub	sp, #32
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800945e:	2300      	movs	r3, #0
 8009460:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009466:	2319      	movs	r3, #25
 8009468:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800946a:	2340      	movs	r3, #64	; 0x40
 800946c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800946e:	2300      	movs	r3, #0
 8009470:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009476:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009478:	f107 0308 	add.w	r3, r7, #8
 800947c:	4619      	mov	r1, r3
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f7ff fee0 	bl	8009244 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009484:	f241 3288 	movw	r2, #5000	; 0x1388
 8009488:	2119      	movs	r1, #25
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 f9d4 	bl	8009838 <SDMMC_GetCmdResp1>
 8009490:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009492:	69fb      	ldr	r3, [r7, #28]
}
 8009494:	4618      	mov	r0, r3
 8009496:	3720      	adds	r7, #32
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b088      	sub	sp, #32
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80094a4:	2300      	movs	r3, #0
 80094a6:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0;
 80094a8:	2300      	movs	r3, #0
 80094aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80094ac:	230c      	movs	r3, #12
 80094ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80094b0:	2340      	movs	r3, #64	; 0x40
 80094b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80094b4:	2300      	movs	r3, #0
 80094b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80094b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094bc:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80094be:	f107 0308 	add.w	r3, r7, #8
 80094c2:	4619      	mov	r1, r3
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f7ff febd 	bl	8009244 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 80094ca:	4a05      	ldr	r2, [pc, #20]	; (80094e0 <SDMMC_CmdStopTransfer+0x44>)
 80094cc:	210c      	movs	r1, #12
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 f9b2 	bl	8009838 <SDMMC_GetCmdResp1>
 80094d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094d6:	69fb      	ldr	r3, [r7, #28]
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3720      	adds	r7, #32
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}
 80094e0:	05f5e100 	.word	0x05f5e100

080094e4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b08a      	sub	sp, #40	; 0x28
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80094f0:	2300      	movs	r3, #0
 80094f2:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80094f8:	2307      	movs	r3, #7
 80094fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80094fc:	2340      	movs	r3, #64	; 0x40
 80094fe:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009500:	2300      	movs	r3, #0
 8009502:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009504:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009508:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800950a:	f107 0310 	add.w	r3, r7, #16
 800950e:	4619      	mov	r1, r3
 8009510:	68f8      	ldr	r0, [r7, #12]
 8009512:	f7ff fe97 	bl	8009244 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009516:	f241 3288 	movw	r2, #5000	; 0x1388
 800951a:	2107      	movs	r1, #7
 800951c:	68f8      	ldr	r0, [r7, #12]
 800951e:	f000 f98b 	bl	8009838 <SDMMC_GetCmdResp1>
 8009522:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009526:	4618      	mov	r0, r3
 8009528:	3728      	adds	r7, #40	; 0x28
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800952e:	b580      	push	{r7, lr}
 8009530:	b088      	sub	sp, #32
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009536:	2300      	movs	r3, #0
 8009538:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 800953a:	2300      	movs	r3, #0
 800953c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800953e:	2300      	movs	r3, #0
 8009540:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009542:	2300      	movs	r3, #0
 8009544:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009546:	2300      	movs	r3, #0
 8009548:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800954a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800954e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009550:	f107 0308 	add.w	r3, r7, #8
 8009554:	4619      	mov	r1, r3
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f7ff fe74 	bl	8009244 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f000 f941 	bl	80097e4 <SDMMC_GetCmdError>
 8009562:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009564:	69fb      	ldr	r3, [r7, #28]
}
 8009566:	4618      	mov	r0, r3
 8009568:	3720      	adds	r7, #32
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}

0800956e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800956e:	b580      	push	{r7, lr}
 8009570:	b088      	sub	sp, #32
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009576:	2300      	movs	r3, #0
 8009578:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800957a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800957e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009580:	2308      	movs	r3, #8
 8009582:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009584:	2340      	movs	r3, #64	; 0x40
 8009586:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009588:	2300      	movs	r3, #0
 800958a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800958c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009590:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009592:	f107 0308 	add.w	r3, r7, #8
 8009596:	4619      	mov	r1, r3
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f7ff fe53 	bl	8009244 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 fb12 	bl	8009bc8 <SDMMC_GetCmdResp7>
 80095a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095a6:	69fb      	ldr	r3, [r7, #28]
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3720      	adds	r7, #32
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b088      	sub	sp, #32
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80095ba:	2300      	movs	r3, #0
 80095bc:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80095c2:	2337      	movs	r3, #55	; 0x37
 80095c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80095c6:	2340      	movs	r3, #64	; 0x40
 80095c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80095ca:	2300      	movs	r3, #0
 80095cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80095ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095d2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80095d4:	f107 0308 	add.w	r3, r7, #8
 80095d8:	4619      	mov	r1, r3
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f7ff fe32 	bl	8009244 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80095e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80095e4:	2137      	movs	r1, #55	; 0x37
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 f926 	bl	8009838 <SDMMC_GetCmdResp1>
 80095ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095ee:	69fb      	ldr	r3, [r7, #28]
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3720      	adds	r7, #32
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b088      	sub	sp, #32
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009602:	2300      	movs	r3, #0
 8009604:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8009606:	683a      	ldr	r2, [r7, #0]
 8009608:	4b0d      	ldr	r3, [pc, #52]	; (8009640 <SDMMC_CmdAppOperCommand+0x48>)
 800960a:	4313      	orrs	r3, r2
 800960c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800960e:	2329      	movs	r3, #41	; 0x29
 8009610:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009612:	2340      	movs	r3, #64	; 0x40
 8009614:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009616:	2300      	movs	r3, #0
 8009618:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800961a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800961e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009620:	f107 0308 	add.w	r3, r7, #8
 8009624:	4619      	mov	r1, r3
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f7ff fe0c 	bl	8009244 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 fa29 	bl	8009a84 <SDMMC_GetCmdResp3>
 8009632:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009634:	69fb      	ldr	r3, [r7, #28]
}
 8009636:	4618      	mov	r0, r3
 8009638:	3720      	adds	r7, #32
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
 800963e:	bf00      	nop
 8009640:	80100000 	.word	0x80100000

08009644 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b088      	sub	sp, #32
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800964e:	2300      	movs	r3, #0
 8009650:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009656:	2306      	movs	r3, #6
 8009658:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800965a:	2340      	movs	r3, #64	; 0x40
 800965c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800965e:	2300      	movs	r3, #0
 8009660:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009662:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009666:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009668:	f107 0308 	add.w	r3, r7, #8
 800966c:	4619      	mov	r1, r3
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f7ff fde8 	bl	8009244 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009674:	f241 3288 	movw	r2, #5000	; 0x1388
 8009678:	2106      	movs	r1, #6
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 f8dc 	bl	8009838 <SDMMC_GetCmdResp1>
 8009680:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009682:	69fb      	ldr	r3, [r7, #28]
}
 8009684:	4618      	mov	r0, r3
 8009686:	3720      	adds	r7, #32
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b088      	sub	sp, #32
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009694:	2300      	movs	r3, #0
 8009696:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0;
 8009698:	2300      	movs	r3, #0
 800969a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800969c:	2333      	movs	r3, #51	; 0x33
 800969e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80096a0:	2340      	movs	r3, #64	; 0x40
 80096a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80096a4:	2300      	movs	r3, #0
 80096a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80096a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096ac:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80096ae:	f107 0308 	add.w	r3, r7, #8
 80096b2:	4619      	mov	r1, r3
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f7ff fdc5 	bl	8009244 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80096ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80096be:	2133      	movs	r1, #51	; 0x33
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f000 f8b9 	bl	8009838 <SDMMC_GetCmdResp1>
 80096c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096c8:	69fb      	ldr	r3, [r7, #28]
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3720      	adds	r7, #32
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}

080096d2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80096d2:	b580      	push	{r7, lr}
 80096d4:	b088      	sub	sp, #32
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80096da:	2300      	movs	r3, #0
 80096dc:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 80096de:	2300      	movs	r3, #0
 80096e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80096e2:	2302      	movs	r3, #2
 80096e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80096e6:	23c0      	movs	r3, #192	; 0xc0
 80096e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80096ea:	2300      	movs	r3, #0
 80096ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80096ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096f2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80096f4:	f107 0308 	add.w	r3, r7, #8
 80096f8:	4619      	mov	r1, r3
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f7ff fda2 	bl	8009244 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 f97f 	bl	8009a04 <SDMMC_GetCmdResp2>
 8009706:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009708:	69fb      	ldr	r3, [r7, #28]
}
 800970a:	4618      	mov	r0, r3
 800970c:	3720      	adds	r7, #32
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009712:	b580      	push	{r7, lr}
 8009714:	b088      	sub	sp, #32
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
 800971a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800971c:	2300      	movs	r3, #0
 800971e:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009724:	2309      	movs	r3, #9
 8009726:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009728:	23c0      	movs	r3, #192	; 0xc0
 800972a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800972c:	2300      	movs	r3, #0
 800972e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009734:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009736:	f107 0308 	add.w	r3, r7, #8
 800973a:	4619      	mov	r1, r3
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f7ff fd81 	bl	8009244 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 f95e 	bl	8009a04 <SDMMC_GetCmdResp2>
 8009748:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800974a:	69fb      	ldr	r3, [r7, #28]
}
 800974c:	4618      	mov	r0, r3
 800974e:	3720      	adds	r7, #32
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b088      	sub	sp, #32
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800975e:	2300      	movs	r3, #0
 8009760:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 8009762:	2300      	movs	r3, #0
 8009764:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009766:	2303      	movs	r3, #3
 8009768:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800976a:	2340      	movs	r3, #64	; 0x40
 800976c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800976e:	2300      	movs	r3, #0
 8009770:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009776:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009778:	f107 0308 	add.w	r3, r7, #8
 800977c:	4619      	mov	r1, r3
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f7ff fd60 	bl	8009244 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009784:	683a      	ldr	r2, [r7, #0]
 8009786:	2103      	movs	r1, #3
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 f9af 	bl	8009aec <SDMMC_GetCmdResp6>
 800978e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009790:	69fb      	ldr	r3, [r7, #28]
}
 8009792:	4618      	mov	r0, r3
 8009794:	3720      	adds	r7, #32
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}

0800979a <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800979a:	b580      	push	{r7, lr}
 800979c:	b088      	sub	sp, #32
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
 80097a2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80097a4:	2300      	movs	r3, #0
 80097a6:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80097ac:	230d      	movs	r3, #13
 80097ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80097b0:	2340      	movs	r3, #64	; 0x40
 80097b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80097b4:	2300      	movs	r3, #0
 80097b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80097b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097bc:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80097be:	f107 0308 	add.w	r3, r7, #8
 80097c2:	4619      	mov	r1, r3
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f7ff fd3d 	bl	8009244 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80097ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80097ce:	210d      	movs	r1, #13
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 f831 	bl	8009838 <SDMMC_GetCmdResp1>
 80097d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097d8:	69fb      	ldr	r3, [r7, #28]
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3720      	adds	r7, #32
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
	...

080097e4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80097e4:	b490      	push	{r4, r7}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80097ec:	4b10      	ldr	r3, [pc, #64]	; (8009830 <SDMMC_GetCmdError+0x4c>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a10      	ldr	r2, [pc, #64]	; (8009834 <SDMMC_GetCmdError+0x50>)
 80097f2:	fba2 2303 	umull	r2, r3, r2, r3
 80097f6:	0a5b      	lsrs	r3, r3, #9
 80097f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80097fc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009800:	4623      	mov	r3, r4
 8009802:	1e5c      	subs	r4, r3, #1
 8009804:	2b00      	cmp	r3, #0
 8009806:	d102      	bne.n	800980e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009808:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800980c:	e00a      	b.n	8009824 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009816:	2b00      	cmp	r3, #0
 8009818:	d0f2      	beq.n	8009800 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009820:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	3708      	adds	r7, #8
 8009828:	46bd      	mov	sp, r7
 800982a:	bc90      	pop	{r4, r7}
 800982c:	4770      	bx	lr
 800982e:	bf00      	nop
 8009830:	2000002c 	.word	0x2000002c
 8009834:	10624dd3 	.word	0x10624dd3

08009838 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009838:	b590      	push	{r4, r7, lr}
 800983a:	b087      	sub	sp, #28
 800983c:	af00      	add	r7, sp, #0
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	460b      	mov	r3, r1
 8009842:	607a      	str	r2, [r7, #4]
 8009844:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8009846:	4b6c      	ldr	r3, [pc, #432]	; (80099f8 <SDMMC_GetCmdResp1+0x1c0>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a6c      	ldr	r2, [pc, #432]	; (80099fc <SDMMC_GetCmdResp1+0x1c4>)
 800984c:	fba2 2303 	umull	r2, r3, r2, r3
 8009850:	0a5b      	lsrs	r3, r3, #9
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009858:	4623      	mov	r3, r4
 800985a:	1e5c      	subs	r4, r3, #1
 800985c:	2b00      	cmp	r3, #0
 800985e:	d102      	bne.n	8009866 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009860:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009864:	e0c3      	b.n	80099ee <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800986a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800986e:	2b00      	cmp	r3, #0
 8009870:	d0f2      	beq.n	8009858 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009876:	f003 0304 	and.w	r3, r3, #4
 800987a:	2b00      	cmp	r3, #0
 800987c:	d004      	beq.n	8009888 <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2204      	movs	r2, #4
 8009882:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009884:	2304      	movs	r3, #4
 8009886:	e0b2      	b.n	80099ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800988c:	f003 0301 	and.w	r3, r3, #1
 8009890:	2b00      	cmp	r3, #0
 8009892:	d004      	beq.n	800989e <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2201      	movs	r2, #1
 8009898:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800989a:	2301      	movs	r3, #1
 800989c:	e0a7      	b.n	80099ee <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800989e:	68f8      	ldr	r0, [r7, #12]
 80098a0:	f7ff fcfa 	bl	8009298 <SDMMC_GetCommandResponse>
 80098a4:	4603      	mov	r3, r0
 80098a6:	461a      	mov	r2, r3
 80098a8:	7afb      	ldrb	r3, [r7, #11]
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d001      	beq.n	80098b2 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80098ae:	2301      	movs	r3, #1
 80098b0:	e09d      	b.n	80099ee <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80098b8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80098ba:	2100      	movs	r1, #0
 80098bc:	68f8      	ldr	r0, [r7, #12]
 80098be:	f7ff fcf8 	bl	80092b2 <SDMMC_GetResponse>
 80098c2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80098c4:	697a      	ldr	r2, [r7, #20]
 80098c6:	4b4e      	ldr	r3, [pc, #312]	; (8009a00 <SDMMC_GetCmdResp1+0x1c8>)
 80098c8:	4013      	ands	r3, r2
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d101      	bne.n	80098d2 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 80098ce:	2300      	movs	r3, #0
 80098d0:	e08d      	b.n	80099ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	da02      	bge.n	80098de <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80098d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80098dc:	e087      	b.n	80099ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d001      	beq.n	80098ec <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80098e8:	2340      	movs	r3, #64	; 0x40
 80098ea:	e080      	b.n	80099ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d001      	beq.n	80098fa <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80098f6:	2380      	movs	r3, #128	; 0x80
 80098f8:	e079      	b.n	80099ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009900:	2b00      	cmp	r3, #0
 8009902:	d002      	beq.n	800990a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009904:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009908:	e071      	b.n	80099ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009910:	2b00      	cmp	r3, #0
 8009912:	d002      	beq.n	800991a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009914:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009918:	e069      	b.n	80099ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009920:	2b00      	cmp	r3, #0
 8009922:	d002      	beq.n	800992a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009924:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009928:	e061      	b.n	80099ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009930:	2b00      	cmp	r3, #0
 8009932:	d002      	beq.n	800993a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009934:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009938:	e059      	b.n	80099ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009940:	2b00      	cmp	r3, #0
 8009942:	d002      	beq.n	800994a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009948:	e051      	b.n	80099ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009950:	2b00      	cmp	r3, #0
 8009952:	d002      	beq.n	800995a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009954:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009958:	e049      	b.n	80099ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009960:	2b00      	cmp	r3, #0
 8009962:	d002      	beq.n	800996a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009964:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009968:	e041      	b.n	80099ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009970:	2b00      	cmp	r3, #0
 8009972:	d002      	beq.n	800997a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8009974:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009978:	e039      	b.n	80099ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009980:	2b00      	cmp	r3, #0
 8009982:	d002      	beq.n	800998a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009984:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009988:	e031      	b.n	80099ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009990:	2b00      	cmp	r3, #0
 8009992:	d002      	beq.n	800999a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009994:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009998:	e029      	b.n	80099ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d002      	beq.n	80099aa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80099a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80099a8:	e021      	b.n	80099ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d002      	beq.n	80099ba <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80099b4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80099b8:	e019      	b.n	80099ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d002      	beq.n	80099ca <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80099c4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80099c8:	e011      	b.n	80099ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d002      	beq.n	80099da <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80099d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80099d8:	e009      	b.n	80099ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	f003 0308 	and.w	r3, r3, #8
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d002      	beq.n	80099ea <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80099e4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80099e8:	e001      	b.n	80099ee <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80099ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	371c      	adds	r7, #28
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd90      	pop	{r4, r7, pc}
 80099f6:	bf00      	nop
 80099f8:	2000002c 	.word	0x2000002c
 80099fc:	10624dd3 	.word	0x10624dd3
 8009a00:	fdffe008 	.word	0xfdffe008

08009a04 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009a04:	b490      	push	{r4, r7}
 8009a06:	b082      	sub	sp, #8
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009a0c:	4b1b      	ldr	r3, [pc, #108]	; (8009a7c <SDMMC_GetCmdResp2+0x78>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a1b      	ldr	r2, [pc, #108]	; (8009a80 <SDMMC_GetCmdResp2+0x7c>)
 8009a12:	fba2 2303 	umull	r2, r3, r2, r3
 8009a16:	0a5b      	lsrs	r3, r3, #9
 8009a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a1c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009a20:	4623      	mov	r3, r4
 8009a22:	1e5c      	subs	r4, r3, #1
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d102      	bne.n	8009a2e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009a28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009a2c:	e020      	b.n	8009a70 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a32:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d0f2      	beq.n	8009a20 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a3e:	f003 0304 	and.w	r3, r3, #4
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d004      	beq.n	8009a50 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2204      	movs	r2, #4
 8009a4a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009a4c:	2304      	movs	r3, #4
 8009a4e:	e00f      	b.n	8009a70 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a54:	f003 0301 	and.w	r3, r3, #1
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d004      	beq.n	8009a66 <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009a62:	2301      	movs	r3, #1
 8009a64:	e004      	b.n	8009a70 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009a6c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009a6e:	2300      	movs	r3, #0
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3708      	adds	r7, #8
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bc90      	pop	{r4, r7}
 8009a78:	4770      	bx	lr
 8009a7a:	bf00      	nop
 8009a7c:	2000002c 	.word	0x2000002c
 8009a80:	10624dd3 	.word	0x10624dd3

08009a84 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009a84:	b490      	push	{r4, r7}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009a8c:	4b15      	ldr	r3, [pc, #84]	; (8009ae4 <SDMMC_GetCmdResp3+0x60>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a15      	ldr	r2, [pc, #84]	; (8009ae8 <SDMMC_GetCmdResp3+0x64>)
 8009a92:	fba2 2303 	umull	r2, r3, r2, r3
 8009a96:	0a5b      	lsrs	r3, r3, #9
 8009a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a9c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009aa0:	4623      	mov	r3, r4
 8009aa2:	1e5c      	subs	r4, r3, #1
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d102      	bne.n	8009aae <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009aa8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009aac:	e015      	b.n	8009ada <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ab2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d0f2      	beq.n	8009aa0 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009abe:	f003 0304 	and.w	r3, r3, #4
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d004      	beq.n	8009ad0 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2204      	movs	r2, #4
 8009aca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009acc:	2304      	movs	r3, #4
 8009ace:	e004      	b.n	8009ada <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009ad6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009ad8:	2300      	movs	r3, #0
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3708      	adds	r7, #8
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bc90      	pop	{r4, r7}
 8009ae2:	4770      	bx	lr
 8009ae4:	2000002c 	.word	0x2000002c
 8009ae8:	10624dd3 	.word	0x10624dd3

08009aec <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009aec:	b590      	push	{r4, r7, lr}
 8009aee:	b087      	sub	sp, #28
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	460b      	mov	r3, r1
 8009af6:	607a      	str	r2, [r7, #4]
 8009af8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009afa:	4b31      	ldr	r3, [pc, #196]	; (8009bc0 <SDMMC_GetCmdResp6+0xd4>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a31      	ldr	r2, [pc, #196]	; (8009bc4 <SDMMC_GetCmdResp6+0xd8>)
 8009b00:	fba2 2303 	umull	r2, r3, r2, r3
 8009b04:	0a5b      	lsrs	r3, r3, #9
 8009b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b0a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009b0e:	4623      	mov	r3, r4
 8009b10:	1e5c      	subs	r4, r3, #1
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d102      	bne.n	8009b1c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009b16:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009b1a:	e04c      	b.n	8009bb6 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b20:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d0f2      	beq.n	8009b0e <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b2c:	f003 0304 	and.w	r3, r3, #4
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d004      	beq.n	8009b3e <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2204      	movs	r2, #4
 8009b38:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b3a:	2304      	movs	r3, #4
 8009b3c:	e03b      	b.n	8009bb6 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b42:	f003 0301 	and.w	r3, r3, #1
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d004      	beq.n	8009b54 <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b50:	2301      	movs	r3, #1
 8009b52:	e030      	b.n	8009bb6 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009b54:	68f8      	ldr	r0, [r7, #12]
 8009b56:	f7ff fb9f 	bl	8009298 <SDMMC_GetCommandResponse>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	7afb      	ldrb	r3, [r7, #11]
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d001      	beq.n	8009b68 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b64:	2301      	movs	r3, #1
 8009b66:	e026      	b.n	8009bb6 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009b6e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009b70:	2100      	movs	r1, #0
 8009b72:	68f8      	ldr	r0, [r7, #12]
 8009b74:	f7ff fb9d 	bl	80092b2 <SDMMC_GetResponse>
 8009b78:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d106      	bne.n	8009b92 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	0c1b      	lsrs	r3, r3, #16
 8009b88:	b29a      	uxth	r2, r3
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	e011      	b.n	8009bb6 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d002      	beq.n	8009ba2 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009b9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009ba0:	e009      	b.n	8009bb6 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d002      	beq.n	8009bb2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009bac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009bb0:	e001      	b.n	8009bb6 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009bb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	371c      	adds	r7, #28
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd90      	pop	{r4, r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	2000002c 	.word	0x2000002c
 8009bc4:	10624dd3 	.word	0x10624dd3

08009bc8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009bc8:	b490      	push	{r4, r7}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009bd0:	4b18      	ldr	r3, [pc, #96]	; (8009c34 <SDMMC_GetCmdResp7+0x6c>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a18      	ldr	r2, [pc, #96]	; (8009c38 <SDMMC_GetCmdResp7+0x70>)
 8009bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8009bda:	0a5b      	lsrs	r3, r3, #9
 8009bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009be0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009be4:	4623      	mov	r3, r4
 8009be6:	1e5c      	subs	r4, r3, #1
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d102      	bne.n	8009bf2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009bec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009bf0:	e01a      	b.n	8009c28 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bf6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d0f2      	beq.n	8009be4 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c02:	f003 0304 	and.w	r3, r3, #4
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d004      	beq.n	8009c14 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2240      	movs	r2, #64	; 0x40
 8009c0e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009c10:	2304      	movs	r3, #4
 8009c12:	e009      	b.n	8009c28 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d002      	beq.n	8009c26 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2240      	movs	r2, #64	; 0x40
 8009c24:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009c26:	2300      	movs	r3, #0
  
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3708      	adds	r7, #8
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bc90      	pop	{r4, r7}
 8009c30:	4770      	bx	lr
 8009c32:	bf00      	nop
 8009c34:	2000002c 	.word	0x2000002c
 8009c38:	10624dd3 	.word	0x10624dd3

08009c3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009c3c:	b084      	sub	sp, #16
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	b084      	sub	sp, #16
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
 8009c46:	f107 001c 	add.w	r0, r7, #28
 8009c4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	d120      	bne.n	8009c96 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	68da      	ldr	r2, [r3, #12]
 8009c64:	4b20      	ldr	r3, [pc, #128]	; (8009ce8 <USB_CoreInit+0xac>)
 8009c66:	4013      	ands	r3, r2
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	68db      	ldr	r3, [r3, #12]
 8009c70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d105      	bne.n	8009c8a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	68db      	ldr	r3, [r3, #12]
 8009c82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 f942 	bl	8009f14 <USB_CoreReset>
 8009c90:	4603      	mov	r3, r0
 8009c92:	73fb      	strb	r3, [r7, #15]
 8009c94:	e010      	b.n	8009cb8 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	68db      	ldr	r3, [r3, #12]
 8009c9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 f936 	bl	8009f14 <USB_CoreReset>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cb0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8009cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d10b      	bne.n	8009cd6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	689b      	ldr	r3, [r3, #8]
 8009cc2:	f043 0206 	orr.w	r2, r3, #6
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	f043 0220 	orr.w	r2, r3, #32
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3710      	adds	r7, #16
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ce2:	b004      	add	sp, #16
 8009ce4:	4770      	bx	lr
 8009ce6:	bf00      	nop
 8009ce8:	ffbdffbf 	.word	0xffbdffbf

08009cec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	689b      	ldr	r3, [r3, #8]
 8009cf8:	f043 0201 	orr.w	r2, r3, #1
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009d00:	2300      	movs	r3, #0
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	370c      	adds	r7, #12
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr

08009d0e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d0e:	b480      	push	{r7}
 8009d10:	b083      	sub	sp, #12
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	f023 0201 	bic.w	r2, r3, #1
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009d22:	2300      	movs	r3, #0
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	370c      	adds	r7, #12
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr

08009d30 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b082      	sub	sp, #8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	460b      	mov	r3, r1
 8009d3a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	68db      	ldr	r3, [r3, #12]
 8009d40:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009d48:	78fb      	ldrb	r3, [r7, #3]
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d106      	bne.n	8009d5c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	68db      	ldr	r3, [r3, #12]
 8009d52:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	60da      	str	r2, [r3, #12]
 8009d5a:	e00b      	b.n	8009d74 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009d5c:	78fb      	ldrb	r3, [r7, #3]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d106      	bne.n	8009d70 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	68db      	ldr	r3, [r3, #12]
 8009d66:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	60da      	str	r2, [r3, #12]
 8009d6e:	e001      	b.n	8009d74 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009d70:	2301      	movs	r3, #1
 8009d72:	e003      	b.n	8009d7c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009d74:	2032      	movs	r0, #50	; 0x32
 8009d76:	f7f6 fbf9 	bl	800056c <HAL_Delay>

  return HAL_OK;
 8009d7a:	2300      	movs	r3, #0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3708      	adds	r7, #8
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b085      	sub	sp, #20
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	019b      	lsls	r3, r3, #6
 8009d96:	f043 0220 	orr.w	r2, r3, #32
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	3301      	adds	r3, #1
 8009da2:	60fb      	str	r3, [r7, #12]
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	4a09      	ldr	r2, [pc, #36]	; (8009dcc <USB_FlushTxFifo+0x48>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d901      	bls.n	8009db0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009dac:	2303      	movs	r3, #3
 8009dae:	e006      	b.n	8009dbe <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	691b      	ldr	r3, [r3, #16]
 8009db4:	f003 0320 	and.w	r3, r3, #32
 8009db8:	2b20      	cmp	r3, #32
 8009dba:	d0f0      	beq.n	8009d9e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009dbc:	2300      	movs	r3, #0
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3714      	adds	r7, #20
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr
 8009dca:	bf00      	nop
 8009dcc:	00030d40 	.word	0x00030d40

08009dd0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b085      	sub	sp, #20
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2210      	movs	r2, #16
 8009de0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	3301      	adds	r3, #1
 8009de6:	60fb      	str	r3, [r7, #12]
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	4a09      	ldr	r2, [pc, #36]	; (8009e10 <USB_FlushRxFifo+0x40>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d901      	bls.n	8009df4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009df0:	2303      	movs	r3, #3
 8009df2:	e006      	b.n	8009e02 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	691b      	ldr	r3, [r3, #16]
 8009df8:	f003 0310 	and.w	r3, r3, #16
 8009dfc:	2b10      	cmp	r3, #16
 8009dfe:	d0f0      	beq.n	8009de2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009e00:	2300      	movs	r3, #0
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3714      	adds	r7, #20
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr
 8009e0e:	bf00      	nop
 8009e10:	00030d40 	.word	0x00030d40

08009e14 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b089      	sub	sp, #36	; 0x24
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	4611      	mov	r1, r2
 8009e20:	461a      	mov	r2, r3
 8009e22:	460b      	mov	r3, r1
 8009e24:	71fb      	strb	r3, [r7, #7]
 8009e26:	4613      	mov	r3, r2
 8009e28:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009e32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d11a      	bne.n	8009e70 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009e3a:	88bb      	ldrh	r3, [r7, #4]
 8009e3c:	3303      	adds	r3, #3
 8009e3e:	089b      	lsrs	r3, r3, #2
 8009e40:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009e42:	2300      	movs	r3, #0
 8009e44:	61bb      	str	r3, [r7, #24]
 8009e46:	e00f      	b.n	8009e68 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8009e48:	79fb      	ldrb	r3, [r7, #7]
 8009e4a:	031a      	lsls	r2, r3, #12
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	4413      	add	r3, r2
 8009e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e54:	461a      	mov	r2, r3
 8009e56:	69fb      	ldr	r3, [r7, #28]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009e5c:	69fb      	ldr	r3, [r7, #28]
 8009e5e:	3304      	adds	r3, #4
 8009e60:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009e62:	69bb      	ldr	r3, [r7, #24]
 8009e64:	3301      	adds	r3, #1
 8009e66:	61bb      	str	r3, [r7, #24]
 8009e68:	69ba      	ldr	r2, [r7, #24]
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d3eb      	bcc.n	8009e48 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009e70:	2300      	movs	r3, #0
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3724      	adds	r7, #36	; 0x24
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr

08009e7e <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009e7e:	b480      	push	{r7}
 8009e80:	b089      	sub	sp, #36	; 0x24
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	60f8      	str	r0, [r7, #12]
 8009e86:	60b9      	str	r1, [r7, #8]
 8009e88:	4613      	mov	r3, r2
 8009e8a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009e94:	88fb      	ldrh	r3, [r7, #6]
 8009e96:	3303      	adds	r3, #3
 8009e98:	089b      	lsrs	r3, r3, #2
 8009e9a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	61bb      	str	r3, [r7, #24]
 8009ea0:	e00b      	b.n	8009eba <USB_ReadPacket+0x3c>
  {
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	601a      	str	r2, [r3, #0]
    pDest++;
 8009eae:	69fb      	ldr	r3, [r7, #28]
 8009eb0:	3304      	adds	r3, #4
 8009eb2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009eb4:	69bb      	ldr	r3, [r7, #24]
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	61bb      	str	r3, [r7, #24]
 8009eba:	69ba      	ldr	r2, [r7, #24]
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d3ef      	bcc.n	8009ea2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009ec2:	69fb      	ldr	r3, [r7, #28]
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3724      	adds	r7, #36	; 0x24
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b085      	sub	sp, #20
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	695b      	ldr	r3, [r3, #20]
 8009edc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	699b      	ldr	r3, [r3, #24]
 8009ee2:	68fa      	ldr	r2, [r7, #12]
 8009ee4:	4013      	ands	r3, r2
 8009ee6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3714      	adds	r7, #20
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr

08009ef6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009ef6:	b480      	push	{r7}
 8009ef8:	b083      	sub	sp, #12
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	695b      	ldr	r3, [r3, #20]
 8009f02:	f003 0301 	and.w	r3, r3, #1
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	370c      	adds	r7, #12
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr
	...

08009f14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b085      	sub	sp, #20
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	3301      	adds	r3, #1
 8009f24:	60fb      	str	r3, [r7, #12]
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	4a13      	ldr	r2, [pc, #76]	; (8009f78 <USB_CoreReset+0x64>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d901      	bls.n	8009f32 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009f2e:	2303      	movs	r3, #3
 8009f30:	e01b      	b.n	8009f6a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	691b      	ldr	r3, [r3, #16]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	daf2      	bge.n	8009f20 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	691b      	ldr	r3, [r3, #16]
 8009f42:	f043 0201 	orr.w	r2, r3, #1
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	60fb      	str	r3, [r7, #12]
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	4a09      	ldr	r2, [pc, #36]	; (8009f78 <USB_CoreReset+0x64>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d901      	bls.n	8009f5c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009f58:	2303      	movs	r3, #3
 8009f5a:	e006      	b.n	8009f6a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	691b      	ldr	r3, [r3, #16]
 8009f60:	f003 0301 	and.w	r3, r3, #1
 8009f64:	2b01      	cmp	r3, #1
 8009f66:	d0f0      	beq.n	8009f4a <USB_CoreReset+0x36>

  return HAL_OK;
 8009f68:	2300      	movs	r3, #0
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3714      	adds	r7, #20
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr
 8009f76:	bf00      	nop
 8009f78:	00030d40 	.word	0x00030d40

08009f7c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009f7c:	b084      	sub	sp, #16
 8009f7e:	b580      	push	{r7, lr}
 8009f80:	b084      	sub	sp, #16
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
 8009f86:	f107 001c 	add.w	r0, r7, #28
 8009f8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009f98:	461a      	mov	r2, r3
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fa2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d018      	beq.n	8009fe8 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8009fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb8:	2b03      	cmp	r3, #3
 8009fba:	d10a      	bne.n	8009fd2 <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	68ba      	ldr	r2, [r7, #8]
 8009fc6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009fca:	f043 0304 	orr.w	r3, r3, #4
 8009fce:	6013      	str	r3, [r2, #0]
 8009fd0:	e014      	b.n	8009ffc <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	68ba      	ldr	r2, [r7, #8]
 8009fdc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009fe0:	f023 0304 	bic.w	r3, r3, #4
 8009fe4:	6013      	str	r3, [r2, #0]
 8009fe6:	e009      	b.n	8009ffc <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	68ba      	ldr	r2, [r7, #8]
 8009ff2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009ff6:	f023 0304 	bic.w	r3, r3, #4
 8009ffa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8009ffc:	2110      	movs	r1, #16
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f7ff fec0 	bl	8009d84 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f7ff fee3 	bl	8009dd0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a00a:	2300      	movs	r3, #0
 800a00c:	60fb      	str	r3, [r7, #12]
 800a00e:	e015      	b.n	800a03c <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	015a      	lsls	r2, r3, #5
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	4413      	add	r3, r2
 800a018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a01c:	461a      	mov	r2, r3
 800a01e:	f04f 33ff 	mov.w	r3, #4294967295
 800a022:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	015a      	lsls	r2, r3, #5
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	4413      	add	r3, r2
 800a02c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a030:	461a      	mov	r2, r3
 800a032:	2300      	movs	r3, #0
 800a034:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	3301      	adds	r3, #1
 800a03a:	60fb      	str	r3, [r7, #12]
 800a03c:	6a3b      	ldr	r3, [r7, #32]
 800a03e:	68fa      	ldr	r2, [r7, #12]
 800a040:	429a      	cmp	r2, r3
 800a042:	d3e5      	bcc.n	800a010 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800a044:	2101      	movs	r1, #1
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 f8ac 	bl	800a1a4 <USB_DriveVbus>

  HAL_Delay(200U);
 800a04c:	20c8      	movs	r0, #200	; 0xc8
 800a04e:	f7f6 fa8d 	bl	800056c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2200      	movs	r2, #0
 800a056:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f04f 32ff 	mov.w	r2, #4294967295
 800a05e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d00b      	beq.n	800a084 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a072:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	4a14      	ldr	r2, [pc, #80]	; (800a0c8 <USB_HostInit+0x14c>)
 800a078:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	4a13      	ldr	r2, [pc, #76]	; (800a0cc <USB_HostInit+0x150>)
 800a07e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800a082:	e009      	b.n	800a098 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2280      	movs	r2, #128	; 0x80
 800a088:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	4a10      	ldr	r2, [pc, #64]	; (800a0d0 <USB_HostInit+0x154>)
 800a08e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	4a10      	ldr	r2, [pc, #64]	; (800a0d4 <USB_HostInit+0x158>)
 800a094:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d105      	bne.n	800a0aa <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	699b      	ldr	r3, [r3, #24]
 800a0a2:	f043 0210 	orr.w	r2, r3, #16
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	699a      	ldr	r2, [r3, #24]
 800a0ae:	4b0a      	ldr	r3, [pc, #40]	; (800a0d8 <USB_HostInit+0x15c>)
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800a0b6:	2300      	movs	r3, #0
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3710      	adds	r7, #16
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a0c2:	b004      	add	sp, #16
 800a0c4:	4770      	bx	lr
 800a0c6:	bf00      	nop
 800a0c8:	01000200 	.word	0x01000200
 800a0cc:	00e00300 	.word	0x00e00300
 800a0d0:	00600080 	.word	0x00600080
 800a0d4:	004000e0 	.word	0x004000e0
 800a0d8:	a3200008 	.word	0xa3200008

0800a0dc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b085      	sub	sp, #20
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	68fa      	ldr	r2, [r7, #12]
 800a0f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a0fa:	f023 0303 	bic.w	r3, r3, #3
 800a0fe:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	78fb      	ldrb	r3, [r7, #3]
 800a10a:	f003 0303 	and.w	r3, r3, #3
 800a10e:	68f9      	ldr	r1, [r7, #12]
 800a110:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a114:	4313      	orrs	r3, r2
 800a116:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a118:	78fb      	ldrb	r3, [r7, #3]
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d107      	bne.n	800a12e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a124:	461a      	mov	r2, r3
 800a126:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a12a:	6053      	str	r3, [r2, #4]
 800a12c:	e009      	b.n	800a142 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800a12e:	78fb      	ldrb	r3, [r7, #3]
 800a130:	2b02      	cmp	r3, #2
 800a132:	d106      	bne.n	800a142 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a13a:	461a      	mov	r2, r3
 800a13c:	f241 7370 	movw	r3, #6000	; 0x1770
 800a140:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800a142:	2300      	movs	r3, #0
}
 800a144:	4618      	mov	r0, r3
 800a146:	3714      	adds	r7, #20
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr

0800a150 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b084      	sub	sp, #16
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a15c:	2300      	movs	r3, #0
 800a15e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a170:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	68fa      	ldr	r2, [r7, #12]
 800a176:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a17a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a17e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800a180:	2064      	movs	r0, #100	; 0x64
 800a182:	f7f6 f9f3 	bl	800056c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	68fa      	ldr	r2, [r7, #12]
 800a18a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a18e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a192:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a194:	200a      	movs	r0, #10
 800a196:	f7f6 f9e9 	bl	800056c <HAL_Delay>

  return HAL_OK;
 800a19a:	2300      	movs	r3, #0
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3710      	adds	r7, #16
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b085      	sub	sp, #20
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a1c8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d109      	bne.n	800a1e8 <USB_DriveVbus+0x44>
 800a1d4:	78fb      	ldrb	r3, [r7, #3]
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	d106      	bne.n	800a1e8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	68fa      	ldr	r2, [r7, #12]
 800a1de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a1e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a1e6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a1ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1f2:	d109      	bne.n	800a208 <USB_DriveVbus+0x64>
 800a1f4:	78fb      	ldrb	r3, [r7, #3]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d106      	bne.n	800a208 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	68fa      	ldr	r2, [r7, #12]
 800a1fe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a202:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a206:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a208:	2300      	movs	r3, #0
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3714      	adds	r7, #20
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr

0800a216 <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a216:	b480      	push	{r7}
 800a218:	b085      	sub	sp, #20
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a222:	2300      	movs	r3, #0
 800a224:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	0c5b      	lsrs	r3, r3, #17
 800a234:	f003 0303 	and.w	r3, r3, #3
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3714      	adds	r7, #20
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr

0800a244 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800a244:	b480      	push	{r7}
 800a246:	b085      	sub	sp, #20
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	b29b      	uxth	r3, r3
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3714      	adds	r7, #20
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr
	...

0800a268 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800a268:	b480      	push	{r7}
 800a26a:	b087      	sub	sp, #28
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	4608      	mov	r0, r1
 800a272:	4611      	mov	r1, r2
 800a274:	461a      	mov	r2, r3
 800a276:	4603      	mov	r3, r0
 800a278:	70fb      	strb	r3, [r7, #3]
 800a27a:	460b      	mov	r3, r1
 800a27c:	70bb      	strb	r3, [r7, #2]
 800a27e:	4613      	mov	r3, r2
 800a280:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a282:	2300      	movs	r3, #0
 800a284:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800a28a:	78fb      	ldrb	r3, [r7, #3]
 800a28c:	015a      	lsls	r2, r3, #5
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	4413      	add	r3, r2
 800a292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a296:	461a      	mov	r2, r3
 800a298:	f04f 33ff 	mov.w	r3, #4294967295
 800a29c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a29e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a2a2:	2b03      	cmp	r3, #3
 800a2a4:	d87e      	bhi.n	800a3a4 <USB_HC_Init+0x13c>
 800a2a6:	a201      	add	r2, pc, #4	; (adr r2, 800a2ac <USB_HC_Init+0x44>)
 800a2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ac:	0800a2bd 	.word	0x0800a2bd
 800a2b0:	0800a367 	.word	0x0800a367
 800a2b4:	0800a2bd 	.word	0x0800a2bd
 800a2b8:	0800a329 	.word	0x0800a329
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a2bc:	78fb      	ldrb	r3, [r7, #3]
 800a2be:	015a      	lsls	r2, r3, #5
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	4413      	add	r3, r2
 800a2c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	f240 439d 	movw	r3, #1181	; 0x49d
 800a2ce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800a2d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	da10      	bge.n	800a2fa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a2d8:	78fb      	ldrb	r3, [r7, #3]
 800a2da:	015a      	lsls	r2, r3, #5
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	4413      	add	r3, r2
 800a2e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2e4:	68db      	ldr	r3, [r3, #12]
 800a2e6:	78fa      	ldrb	r2, [r7, #3]
 800a2e8:	0151      	lsls	r1, r2, #5
 800a2ea:	68ba      	ldr	r2, [r7, #8]
 800a2ec:	440a      	add	r2, r1
 800a2ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a2f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2f6:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800a2f8:	e057      	b.n	800a3aa <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a302:	2b00      	cmp	r3, #0
 800a304:	d051      	beq.n	800a3aa <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800a306:	78fb      	ldrb	r3, [r7, #3]
 800a308:	015a      	lsls	r2, r3, #5
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	4413      	add	r3, r2
 800a30e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a312:	68db      	ldr	r3, [r3, #12]
 800a314:	78fa      	ldrb	r2, [r7, #3]
 800a316:	0151      	lsls	r1, r2, #5
 800a318:	68ba      	ldr	r2, [r7, #8]
 800a31a:	440a      	add	r2, r1
 800a31c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a320:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a324:	60d3      	str	r3, [r2, #12]
      break;
 800a326:	e040      	b.n	800a3aa <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a328:	78fb      	ldrb	r3, [r7, #3]
 800a32a:	015a      	lsls	r2, r3, #5
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	4413      	add	r3, r2
 800a330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a334:	461a      	mov	r2, r3
 800a336:	f240 639d 	movw	r3, #1693	; 0x69d
 800a33a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a33c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a340:	2b00      	cmp	r3, #0
 800a342:	da34      	bge.n	800a3ae <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a344:	78fb      	ldrb	r3, [r7, #3]
 800a346:	015a      	lsls	r2, r3, #5
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	4413      	add	r3, r2
 800a34c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a350:	68db      	ldr	r3, [r3, #12]
 800a352:	78fa      	ldrb	r2, [r7, #3]
 800a354:	0151      	lsls	r1, r2, #5
 800a356:	68ba      	ldr	r2, [r7, #8]
 800a358:	440a      	add	r2, r1
 800a35a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a35e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a362:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a364:	e023      	b.n	800a3ae <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a366:	78fb      	ldrb	r3, [r7, #3]
 800a368:	015a      	lsls	r2, r3, #5
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	4413      	add	r3, r2
 800a36e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a372:	461a      	mov	r2, r3
 800a374:	f240 2325 	movw	r3, #549	; 0x225
 800a378:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a37a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	da17      	bge.n	800a3b2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a382:	78fb      	ldrb	r3, [r7, #3]
 800a384:	015a      	lsls	r2, r3, #5
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	4413      	add	r3, r2
 800a38a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a38e:	68db      	ldr	r3, [r3, #12]
 800a390:	78fa      	ldrb	r2, [r7, #3]
 800a392:	0151      	lsls	r1, r2, #5
 800a394:	68ba      	ldr	r2, [r7, #8]
 800a396:	440a      	add	r2, r1
 800a398:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a39c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800a3a0:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a3a2:	e006      	b.n	800a3b2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	75fb      	strb	r3, [r7, #23]
      break;
 800a3a8:	e004      	b.n	800a3b4 <USB_HC_Init+0x14c>
      break;
 800a3aa:	bf00      	nop
 800a3ac:	e002      	b.n	800a3b4 <USB_HC_Init+0x14c>
      break;
 800a3ae:	bf00      	nop
 800a3b0:	e000      	b.n	800a3b4 <USB_HC_Init+0x14c>
      break;
 800a3b2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a3ba:	699a      	ldr	r2, [r3, #24]
 800a3bc:	78fb      	ldrb	r3, [r7, #3]
 800a3be:	f003 030f 	and.w	r3, r3, #15
 800a3c2:	2101      	movs	r1, #1
 800a3c4:	fa01 f303 	lsl.w	r3, r1, r3
 800a3c8:	68b9      	ldr	r1, [r7, #8]
 800a3ca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	699b      	ldr	r3, [r3, #24]
 800a3d6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a3de:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	da03      	bge.n	800a3ee <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a3e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3ea:	613b      	str	r3, [r7, #16]
 800a3ec:	e001      	b.n	800a3f2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800a3f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a3f6:	2b02      	cmp	r3, #2
 800a3f8:	d103      	bne.n	800a402 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a3fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a3fe:	60fb      	str	r3, [r7, #12]
 800a400:	e001      	b.n	800a406 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a402:	2300      	movs	r3, #0
 800a404:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a406:	787b      	ldrb	r3, [r7, #1]
 800a408:	059b      	lsls	r3, r3, #22
 800a40a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a40e:	78bb      	ldrb	r3, [r7, #2]
 800a410:	02db      	lsls	r3, r3, #11
 800a412:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a416:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a418:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a41c:	049b      	lsls	r3, r3, #18
 800a41e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a422:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a424:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a426:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a42a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a430:	78fb      	ldrb	r3, [r7, #3]
 800a432:	0159      	lsls	r1, r3, #5
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	440b      	add	r3, r1
 800a438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a43c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a442:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800a444:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a448:	2b03      	cmp	r3, #3
 800a44a:	d10f      	bne.n	800a46c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800a44c:	78fb      	ldrb	r3, [r7, #3]
 800a44e:	015a      	lsls	r2, r3, #5
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	4413      	add	r3, r2
 800a454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	78fa      	ldrb	r2, [r7, #3]
 800a45c:	0151      	lsls	r1, r2, #5
 800a45e:	68ba      	ldr	r2, [r7, #8]
 800a460:	440a      	add	r2, r1
 800a462:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a466:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a46a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a46c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a46e:	4618      	mov	r0, r3
 800a470:	371c      	adds	r7, #28
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr
 800a47a:	bf00      	nop

0800a47c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b08c      	sub	sp, #48	; 0x30
 800a480:	af02      	add	r7, sp, #8
 800a482:	60f8      	str	r0, [r7, #12]
 800a484:	60b9      	str	r1, [r7, #8]
 800a486:	4613      	mov	r3, r2
 800a488:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	785b      	ldrb	r3, [r3, #1]
 800a492:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800a494:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a498:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USB_OTG_SPEED_HIGH))
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a49e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d028      	beq.n	800a4f8 <USB_HC_StartXfer+0x7c>
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	791b      	ldrb	r3, [r3, #4]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d124      	bne.n	800a4f8 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800a4ae:	79fb      	ldrb	r3, [r7, #7]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d10b      	bne.n	800a4cc <USB_HC_StartXfer+0x50>
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	795b      	ldrb	r3, [r3, #5]
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	d107      	bne.n	800a4cc <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	785b      	ldrb	r3, [r3, #1]
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	68f8      	ldr	r0, [r7, #12]
 800a4c4:	f000 fa2e 	bl	800a924 <USB_DoPing>
      return HAL_OK;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	e112      	b.n	800a6f2 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 800a4cc:	79fb      	ldrb	r3, [r7, #7]
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	d112      	bne.n	800a4f8 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800a4d2:	69fb      	ldr	r3, [r7, #28]
 800a4d4:	015a      	lsls	r2, r3, #5
 800a4d6:	6a3b      	ldr	r3, [r7, #32]
 800a4d8:	4413      	add	r3, r2
 800a4da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4de:	68db      	ldr	r3, [r3, #12]
 800a4e0:	69fa      	ldr	r2, [r7, #28]
 800a4e2:	0151      	lsls	r1, r2, #5
 800a4e4:	6a3a      	ldr	r2, [r7, #32]
 800a4e6:	440a      	add	r2, r1
 800a4e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4ec:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800a4f0:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	691b      	ldr	r3, [r3, #16]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d018      	beq.n	800a532 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	691b      	ldr	r3, [r3, #16]
 800a504:	68ba      	ldr	r2, [r7, #8]
 800a506:	8912      	ldrh	r2, [r2, #8]
 800a508:	4413      	add	r3, r2
 800a50a:	3b01      	subs	r3, #1
 800a50c:	68ba      	ldr	r2, [r7, #8]
 800a50e:	8912      	ldrh	r2, [r2, #8]
 800a510:	fbb3 f3f2 	udiv	r3, r3, r2
 800a514:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800a516:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a518:	8b7b      	ldrh	r3, [r7, #26]
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d90b      	bls.n	800a536 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800a51e:	8b7b      	ldrh	r3, [r7, #26]
 800a520:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800a522:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a524:	68ba      	ldr	r2, [r7, #8]
 800a526:	8912      	ldrh	r2, [r2, #8]
 800a528:	fb02 f203 	mul.w	r2, r2, r3
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	611a      	str	r2, [r3, #16]
 800a530:	e001      	b.n	800a536 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800a532:	2301      	movs	r3, #1
 800a534:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	78db      	ldrb	r3, [r3, #3]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d006      	beq.n	800a54c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800a53e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a540:	68ba      	ldr	r2, [r7, #8]
 800a542:	8912      	ldrh	r2, [r2, #8]
 800a544:	fb02 f203 	mul.w	r2, r2, r3
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	691b      	ldr	r3, [r3, #16]
 800a550:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a554:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a556:	04d9      	lsls	r1, r3, #19
 800a558:	4b68      	ldr	r3, [pc, #416]	; (800a6fc <USB_HC_StartXfer+0x280>)
 800a55a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a55c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	7a9b      	ldrb	r3, [r3, #10]
 800a562:	075b      	lsls	r3, r3, #29
 800a564:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a568:	69f9      	ldr	r1, [r7, #28]
 800a56a:	0148      	lsls	r0, r1, #5
 800a56c:	6a39      	ldr	r1, [r7, #32]
 800a56e:	4401      	add	r1, r0
 800a570:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a574:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a576:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a578:	79fb      	ldrb	r3, [r7, #7]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d009      	beq.n	800a592 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	68d9      	ldr	r1, [r3, #12]
 800a582:	69fb      	ldr	r3, [r7, #28]
 800a584:	015a      	lsls	r2, r3, #5
 800a586:	6a3b      	ldr	r3, [r7, #32]
 800a588:	4413      	add	r3, r2
 800a58a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a58e:	460a      	mov	r2, r1
 800a590:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a592:	6a3b      	ldr	r3, [r7, #32]
 800a594:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a598:	689b      	ldr	r3, [r3, #8]
 800a59a:	f003 0301 	and.w	r3, r3, #1
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	bf0c      	ite	eq
 800a5a2:	2301      	moveq	r3, #1
 800a5a4:	2300      	movne	r3, #0
 800a5a6:	b2db      	uxtb	r3, r3
 800a5a8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a5aa:	69fb      	ldr	r3, [r7, #28]
 800a5ac:	015a      	lsls	r2, r3, #5
 800a5ae:	6a3b      	ldr	r3, [r7, #32]
 800a5b0:	4413      	add	r3, r2
 800a5b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	69fa      	ldr	r2, [r7, #28]
 800a5ba:	0151      	lsls	r1, r2, #5
 800a5bc:	6a3a      	ldr	r2, [r7, #32]
 800a5be:	440a      	add	r2, r1
 800a5c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a5c8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a5ca:	69fb      	ldr	r3, [r7, #28]
 800a5cc:	015a      	lsls	r2, r3, #5
 800a5ce:	6a3b      	ldr	r3, [r7, #32]
 800a5d0:	4413      	add	r3, r2
 800a5d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5d6:	681a      	ldr	r2, [r3, #0]
 800a5d8:	7e7b      	ldrb	r3, [r7, #25]
 800a5da:	075b      	lsls	r3, r3, #29
 800a5dc:	69f9      	ldr	r1, [r7, #28]
 800a5de:	0148      	lsls	r0, r1, #5
 800a5e0:	6a39      	ldr	r1, [r7, #32]
 800a5e2:	4401      	add	r1, r0
 800a5e4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a5ec:	69fb      	ldr	r3, [r7, #28]
 800a5ee:	015a      	lsls	r2, r3, #5
 800a5f0:	6a3b      	ldr	r3, [r7, #32]
 800a5f2:	4413      	add	r3, r2
 800a5f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	4a41      	ldr	r2, [pc, #260]	; (800a700 <USB_HC_StartXfer+0x284>)
 800a5fc:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a5fe:	4b40      	ldr	r3, [pc, #256]	; (800a700 <USB_HC_StartXfer+0x284>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a606:	4a3e      	ldr	r2, [pc, #248]	; (800a700 <USB_HC_StartXfer+0x284>)
 800a608:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	78db      	ldrb	r3, [r3, #3]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d006      	beq.n	800a620 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a612:	4b3b      	ldr	r3, [pc, #236]	; (800a700 <USB_HC_StartXfer+0x284>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a61a:	4a39      	ldr	r2, [pc, #228]	; (800a700 <USB_HC_StartXfer+0x284>)
 800a61c:	6013      	str	r3, [r2, #0]
 800a61e:	e005      	b.n	800a62c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a620:	4b37      	ldr	r3, [pc, #220]	; (800a700 <USB_HC_StartXfer+0x284>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a628:	4a35      	ldr	r2, [pc, #212]	; (800a700 <USB_HC_StartXfer+0x284>)
 800a62a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a62c:	4b34      	ldr	r3, [pc, #208]	; (800a700 <USB_HC_StartXfer+0x284>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a634:	4a32      	ldr	r2, [pc, #200]	; (800a700 <USB_HC_StartXfer+0x284>)
 800a636:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a638:	69fb      	ldr	r3, [r7, #28]
 800a63a:	015a      	lsls	r2, r3, #5
 800a63c:	6a3b      	ldr	r3, [r7, #32]
 800a63e:	4413      	add	r3, r2
 800a640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a644:	461a      	mov	r2, r3
 800a646:	4b2e      	ldr	r3, [pc, #184]	; (800a700 <USB_HC_StartXfer+0x284>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800a64c:	79fb      	ldrb	r3, [r7, #7]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d14e      	bne.n	800a6f0 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	78db      	ldrb	r3, [r3, #3]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d14a      	bne.n	800a6f0 <USB_HC_StartXfer+0x274>
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	691b      	ldr	r3, [r3, #16]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d046      	beq.n	800a6f0 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	79db      	ldrb	r3, [r3, #7]
 800a666:	2b03      	cmp	r3, #3
 800a668:	d830      	bhi.n	800a6cc <USB_HC_StartXfer+0x250>
 800a66a:	a201      	add	r2, pc, #4	; (adr r2, 800a670 <USB_HC_StartXfer+0x1f4>)
 800a66c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a670:	0800a681 	.word	0x0800a681
 800a674:	0800a6a5 	.word	0x0800a6a5
 800a678:	0800a681 	.word	0x0800a681
 800a67c:	0800a6a5 	.word	0x0800a6a5
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	691b      	ldr	r3, [r3, #16]
 800a684:	3303      	adds	r3, #3
 800a686:	089b      	lsrs	r3, r3, #2
 800a688:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a68a:	8afa      	ldrh	r2, [r7, #22]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a690:	b29b      	uxth	r3, r3
 800a692:	429a      	cmp	r2, r3
 800a694:	d91c      	bls.n	800a6d0 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	699b      	ldr	r3, [r3, #24]
 800a69a:	f043 0220 	orr.w	r2, r3, #32
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	619a      	str	r2, [r3, #24]
          }
          break;
 800a6a2:	e015      	b.n	800a6d0 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	691b      	ldr	r3, [r3, #16]
 800a6a8:	3303      	adds	r3, #3
 800a6aa:	089b      	lsrs	r3, r3, #2
 800a6ac:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a6ae:	8afa      	ldrh	r2, [r7, #22]
 800a6b0:	6a3b      	ldr	r3, [r7, #32]
 800a6b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6b6:	691b      	ldr	r3, [r3, #16]
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	d90a      	bls.n	800a6d4 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	699b      	ldr	r3, [r3, #24]
 800a6c2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	619a      	str	r2, [r3, #24]
          }
          break;
 800a6ca:	e003      	b.n	800a6d4 <USB_HC_StartXfer+0x258>

        default:
          break;
 800a6cc:	bf00      	nop
 800a6ce:	e002      	b.n	800a6d6 <USB_HC_StartXfer+0x25a>
          break;
 800a6d0:	bf00      	nop
 800a6d2:	e000      	b.n	800a6d6 <USB_HC_StartXfer+0x25a>
          break;
 800a6d4:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	68d9      	ldr	r1, [r3, #12]
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	785a      	ldrb	r2, [r3, #1]
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	691b      	ldr	r3, [r3, #16]
 800a6e2:	b298      	uxth	r0, r3
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	9300      	str	r3, [sp, #0]
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	68f8      	ldr	r0, [r7, #12]
 800a6ec:	f7ff fb92 	bl	8009e14 <USB_WritePacket>
    }
  }

  return HAL_OK;
 800a6f0:	2300      	movs	r3, #0
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3728      	adds	r7, #40	; 0x28
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	1ff80000 	.word	0x1ff80000
 800a700:	200000b0 	.word	0x200000b0

0800a704 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a704:	b480      	push	{r7}
 800a706:	b085      	sub	sp, #20
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a716:	695b      	ldr	r3, [r3, #20]
 800a718:	b29b      	uxth	r3, r3
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3714      	adds	r7, #20
 800a71e:	46bd      	mov	sp, r7
 800a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a724:	4770      	bx	lr

0800a726 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a726:	b480      	push	{r7}
 800a728:	b087      	sub	sp, #28
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]
 800a72e:	460b      	mov	r3, r1
 800a730:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800a736:	78fb      	ldrb	r3, [r7, #3]
 800a738:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800a73a:	2300      	movs	r3, #0
 800a73c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	015a      	lsls	r2, r3, #5
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	4413      	add	r3, r2
 800a746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	0c9b      	lsrs	r3, r3, #18
 800a74e:	f003 0303 	and.w	r3, r3, #3
 800a752:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d002      	beq.n	800a760 <USB_HC_Halt+0x3a>
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	2b02      	cmp	r3, #2
 800a75e:	d16c      	bne.n	800a83a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	015a      	lsls	r2, r3, #5
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	4413      	add	r3, r2
 800a768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	68fa      	ldr	r2, [r7, #12]
 800a770:	0151      	lsls	r1, r2, #5
 800a772:	693a      	ldr	r2, [r7, #16]
 800a774:	440a      	add	r2, r1
 800a776:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a77a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a77e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a784:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d143      	bne.n	800a814 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	015a      	lsls	r2, r3, #5
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	4413      	add	r3, r2
 800a794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	68fa      	ldr	r2, [r7, #12]
 800a79c:	0151      	lsls	r1, r2, #5
 800a79e:	693a      	ldr	r2, [r7, #16]
 800a7a0:	440a      	add	r2, r1
 800a7a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a7a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a7aa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	015a      	lsls	r2, r3, #5
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	4413      	add	r3, r2
 800a7b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	68fa      	ldr	r2, [r7, #12]
 800a7bc:	0151      	lsls	r1, r2, #5
 800a7be:	693a      	ldr	r2, [r7, #16]
 800a7c0:	440a      	add	r2, r1
 800a7c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a7c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a7ca:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	015a      	lsls	r2, r3, #5
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	4413      	add	r3, r2
 800a7d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	68fa      	ldr	r2, [r7, #12]
 800a7dc:	0151      	lsls	r1, r2, #5
 800a7de:	693a      	ldr	r2, [r7, #16]
 800a7e0:	440a      	add	r2, r1
 800a7e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a7e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a7ea:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	617b      	str	r3, [r7, #20]
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a7f8:	d81d      	bhi.n	800a836 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	015a      	lsls	r2, r3, #5
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	4413      	add	r3, r2
 800a802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a80c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a810:	d0ec      	beq.n	800a7ec <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a812:	e080      	b.n	800a916 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	015a      	lsls	r2, r3, #5
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	4413      	add	r3, r2
 800a81c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	68fa      	ldr	r2, [r7, #12]
 800a824:	0151      	lsls	r1, r2, #5
 800a826:	693a      	ldr	r2, [r7, #16]
 800a828:	440a      	add	r2, r1
 800a82a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a82e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a832:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a834:	e06f      	b.n	800a916 <USB_HC_Halt+0x1f0>
          break;
 800a836:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a838:	e06d      	b.n	800a916 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	015a      	lsls	r2, r3, #5
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	4413      	add	r3, r2
 800a842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	68fa      	ldr	r2, [r7, #12]
 800a84a:	0151      	lsls	r1, r2, #5
 800a84c:	693a      	ldr	r2, [r7, #16]
 800a84e:	440a      	add	r2, r1
 800a850:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a854:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a858:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a860:	691b      	ldr	r3, [r3, #16]
 800a862:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a866:	2b00      	cmp	r3, #0
 800a868:	d143      	bne.n	800a8f2 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	015a      	lsls	r2, r3, #5
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	4413      	add	r3, r2
 800a872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	68fa      	ldr	r2, [r7, #12]
 800a87a:	0151      	lsls	r1, r2, #5
 800a87c:	693a      	ldr	r2, [r7, #16]
 800a87e:	440a      	add	r2, r1
 800a880:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a884:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a888:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	015a      	lsls	r2, r3, #5
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	4413      	add	r3, r2
 800a892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	68fa      	ldr	r2, [r7, #12]
 800a89a:	0151      	lsls	r1, r2, #5
 800a89c:	693a      	ldr	r2, [r7, #16]
 800a89e:	440a      	add	r2, r1
 800a8a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a8a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a8a8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	015a      	lsls	r2, r3, #5
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	4413      	add	r3, r2
 800a8b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	68fa      	ldr	r2, [r7, #12]
 800a8ba:	0151      	lsls	r1, r2, #5
 800a8bc:	693a      	ldr	r2, [r7, #16]
 800a8be:	440a      	add	r2, r1
 800a8c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a8c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a8c8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	3301      	adds	r3, #1
 800a8ce:	617b      	str	r3, [r7, #20]
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a8d6:	d81d      	bhi.n	800a914 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	015a      	lsls	r2, r3, #5
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	4413      	add	r3, r2
 800a8e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a8ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a8ee:	d0ec      	beq.n	800a8ca <USB_HC_Halt+0x1a4>
 800a8f0:	e011      	b.n	800a916 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	015a      	lsls	r2, r3, #5
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	4413      	add	r3, r2
 800a8fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	68fa      	ldr	r2, [r7, #12]
 800a902:	0151      	lsls	r1, r2, #5
 800a904:	693a      	ldr	r2, [r7, #16]
 800a906:	440a      	add	r2, r1
 800a908:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a90c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a910:	6013      	str	r3, [r2, #0]
 800a912:	e000      	b.n	800a916 <USB_HC_Halt+0x1f0>
          break;
 800a914:	bf00      	nop
    }
  }

  return HAL_OK;
 800a916:	2300      	movs	r3, #0
}
 800a918:	4618      	mov	r0, r3
 800a91a:	371c      	adds	r7, #28
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr

0800a924 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a924:	b480      	push	{r7}
 800a926:	b087      	sub	sp, #28
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	460b      	mov	r3, r1
 800a92e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a934:	78fb      	ldrb	r3, [r7, #3]
 800a936:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a938:	2301      	movs	r3, #1
 800a93a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	04da      	lsls	r2, r3, #19
 800a940:	4b15      	ldr	r3, [pc, #84]	; (800a998 <USB_DoPing+0x74>)
 800a942:	4013      	ands	r3, r2
 800a944:	693a      	ldr	r2, [r7, #16]
 800a946:	0151      	lsls	r1, r2, #5
 800a948:	697a      	ldr	r2, [r7, #20]
 800a94a:	440a      	add	r2, r1
 800a94c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a950:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a954:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	015a      	lsls	r2, r3, #5
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	4413      	add	r3, r2
 800a95e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a96c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a974:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	015a      	lsls	r2, r3, #5
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	4413      	add	r3, r2
 800a97e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a982:	461a      	mov	r2, r3
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a988:	2300      	movs	r3, #0
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	371c      	adds	r7, #28
 800a98e:	46bd      	mov	sp, r7
 800a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a994:	4770      	bx	lr
 800a996:	bf00      	nop
 800a998:	1ff80000 	.word	0x1ff80000

0800a99c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b086      	sub	sp, #24
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f7ff f9ae 	bl	8009d0e <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800a9b2:	2110      	movs	r1, #16
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f7ff f9e5 	bl	8009d84 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f7ff fa08 	bl	8009dd0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	613b      	str	r3, [r7, #16]
 800a9c4:	e01f      	b.n	800aa06 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	015a      	lsls	r2, r3, #5
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	4413      	add	r3, r2
 800a9ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a9dc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a9e4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a9ec:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a9ee:	693b      	ldr	r3, [r7, #16]
 800a9f0:	015a      	lsls	r2, r3, #5
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	4413      	add	r3, r2
 800a9f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	3301      	adds	r3, #1
 800aa04:	613b      	str	r3, [r7, #16]
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	2b0f      	cmp	r3, #15
 800aa0a:	d9dc      	bls.n	800a9c6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	613b      	str	r3, [r7, #16]
 800aa10:	e034      	b.n	800aa7c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	015a      	lsls	r2, r3, #5
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	4413      	add	r3, r2
 800aa1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aa28:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aa30:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800aa38:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	015a      	lsls	r2, r3, #5
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	4413      	add	r3, r2
 800aa42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa46:	461a      	mov	r2, r3
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	3301      	adds	r3, #1
 800aa50:	617b      	str	r3, [r7, #20]
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aa58:	d80c      	bhi.n	800aa74 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	015a      	lsls	r2, r3, #5
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	4413      	add	r3, r2
 800aa62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa70:	d0ec      	beq.n	800aa4c <USB_StopHost+0xb0>
 800aa72:	e000      	b.n	800aa76 <USB_StopHost+0xda>
        break;
 800aa74:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	3301      	adds	r3, #1
 800aa7a:	613b      	str	r3, [r7, #16]
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	2b0f      	cmp	r3, #15
 800aa80:	d9c7      	bls.n	800aa12 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa88:	461a      	mov	r2, r3
 800aa8a:	f04f 33ff 	mov.w	r3, #4294967295
 800aa8e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f04f 32ff 	mov.w	r2, #4294967295
 800aa96:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f7ff f927 	bl	8009cec <USB_EnableGlobalInt>

  return HAL_OK;
 800aa9e:	2300      	movs	r3, #0
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3718      	adds	r7, #24
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}

0800aaa8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 800aaa8:	b590      	push	{r4, r7, lr}
 800aaaa:	b089      	sub	sp, #36	; 0x24
 800aaac:	af04      	add	r7, sp, #16
 800aaae:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 800aab0:	2302      	movs	r3, #2
 800aab2:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 800aab4:	2301      	movs	r3, #1
 800aab6:	2202      	movs	r2, #2
 800aab8:	2102      	movs	r1, #2
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f000 fc8c 	bl	800b3d8 <USBH_FindInterface>
 800aac0:	4603      	mov	r3, r0
 800aac2:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 800aac4:	7bbb      	ldrb	r3, [r7, #14]
 800aac6:	2bff      	cmp	r3, #255	; 0xff
 800aac8:	f000 812a 	beq.w	800ad20 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 800aacc:	7bbb      	ldrb	r3, [r7, #14]
 800aace:	4619      	mov	r1, r3
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f000 fc65 	bl	800b3a0 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 800aadc:	2050      	movs	r0, #80	; 0x50
 800aade:	f00b f877 	bl	8015bd0 <malloc>
 800aae2:	4603      	mov	r3, r0
 800aae4:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800aaec:	69db      	ldr	r3, [r3, #28]
 800aaee:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800aaf0:	7bbb      	ldrb	r3, [r7, #14]
 800aaf2:	687a      	ldr	r2, [r7, #4]
 800aaf4:	211a      	movs	r1, #26
 800aaf6:	fb01 f303 	mul.w	r3, r1, r3
 800aafa:	4413      	add	r3, r2
 800aafc:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	b25b      	sxtb	r3, r3
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	da15      	bge.n	800ab34 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ab08:	7bbb      	ldrb	r3, [r7, #14]
 800ab0a:	687a      	ldr	r2, [r7, #4]
 800ab0c:	211a      	movs	r1, #26
 800ab0e:	fb01 f303 	mul.w	r3, r1, r3
 800ab12:	4413      	add	r3, r2
 800ab14:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800ab18:	781a      	ldrb	r2, [r3, #0]
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ab1e:	7bbb      	ldrb	r3, [r7, #14]
 800ab20:	687a      	ldr	r2, [r7, #4]
 800ab22:	211a      	movs	r1, #26
 800ab24:	fb01 f303 	mul.w	r3, r1, r3
 800ab28:	4413      	add	r3, r2
 800ab2a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800ab2e:	881a      	ldrh	r2, [r3, #0]
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	785b      	ldrb	r3, [r3, #1]
 800ab38:	4619      	mov	r1, r3
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f001 ff2f 	bl	800c99e <USBH_AllocPipe>
 800ab40:	4603      	mov	r3, r0
 800ab42:	461a      	mov	r2, r3
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	7819      	ldrb	r1, [r3, #0]
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	7858      	ldrb	r0, [r3, #1]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ab5c:	68ba      	ldr	r2, [r7, #8]
 800ab5e:	8952      	ldrh	r2, [r2, #10]
 800ab60:	9202      	str	r2, [sp, #8]
 800ab62:	2203      	movs	r2, #3
 800ab64:	9201      	str	r2, [sp, #4]
 800ab66:	9300      	str	r3, [sp, #0]
 800ab68:	4623      	mov	r3, r4
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f001 fee7 	bl	800c940 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	781b      	ldrb	r3, [r3, #0]
 800ab76:	2200      	movs	r2, #0
 800ab78:	4619      	mov	r1, r3
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f00a ff4e 	bl	8015a1c <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 800ab80:	2300      	movs	r3, #0
 800ab82:	2200      	movs	r2, #0
 800ab84:	210a      	movs	r1, #10
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 fc26 	bl	800b3d8 <USBH_FindInterface>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 800ab90:	7bbb      	ldrb	r3, [r7, #14]
 800ab92:	2bff      	cmp	r3, #255	; 0xff
 800ab94:	f000 80c4 	beq.w	800ad20 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800ab98:	7bbb      	ldrb	r3, [r7, #14]
 800ab9a:	687a      	ldr	r2, [r7, #4]
 800ab9c:	211a      	movs	r1, #26
 800ab9e:	fb01 f303 	mul.w	r3, r1, r3
 800aba2:	4413      	add	r3, r2
 800aba4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800aba8:	781b      	ldrb	r3, [r3, #0]
 800abaa:	b25b      	sxtb	r3, r3
 800abac:	2b00      	cmp	r3, #0
 800abae:	da16      	bge.n	800abde <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800abb0:	7bbb      	ldrb	r3, [r7, #14]
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	211a      	movs	r1, #26
 800abb6:	fb01 f303 	mul.w	r3, r1, r3
 800abba:	4413      	add	r3, r2
 800abbc:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800abc0:	781a      	ldrb	r2, [r3, #0]
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800abc6:	7bbb      	ldrb	r3, [r7, #14]
 800abc8:	687a      	ldr	r2, [r7, #4]
 800abca:	211a      	movs	r1, #26
 800abcc:	fb01 f303 	mul.w	r3, r1, r3
 800abd0:	4413      	add	r3, r2
 800abd2:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800abd6:	881a      	ldrh	r2, [r3, #0]
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	835a      	strh	r2, [r3, #26]
 800abdc:	e015      	b.n	800ac0a <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800abde:	7bbb      	ldrb	r3, [r7, #14]
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	211a      	movs	r1, #26
 800abe4:	fb01 f303 	mul.w	r3, r1, r3
 800abe8:	4413      	add	r3, r2
 800abea:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800abee:	781a      	ldrb	r2, [r3, #0]
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800abf4:	7bbb      	ldrb	r3, [r7, #14]
 800abf6:	687a      	ldr	r2, [r7, #4]
 800abf8:	211a      	movs	r1, #26
 800abfa:	fb01 f303 	mul.w	r3, r1, r3
 800abfe:	4413      	add	r3, r2
 800ac00:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800ac04:	881a      	ldrh	r2, [r3, #0]
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800ac0a:	7bbb      	ldrb	r3, [r7, #14]
 800ac0c:	687a      	ldr	r2, [r7, #4]
 800ac0e:	211a      	movs	r1, #26
 800ac10:	fb01 f303 	mul.w	r3, r1, r3
 800ac14:	4413      	add	r3, r2
 800ac16:	f203 3352 	addw	r3, r3, #850	; 0x352
 800ac1a:	781b      	ldrb	r3, [r3, #0]
 800ac1c:	b25b      	sxtb	r3, r3
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	da16      	bge.n	800ac50 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ac22:	7bbb      	ldrb	r3, [r7, #14]
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	211a      	movs	r1, #26
 800ac28:	fb01 f303 	mul.w	r3, r1, r3
 800ac2c:	4413      	add	r3, r2
 800ac2e:	f203 3352 	addw	r3, r3, #850	; 0x352
 800ac32:	781a      	ldrb	r2, [r3, #0]
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ac38:	7bbb      	ldrb	r3, [r7, #14]
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	211a      	movs	r1, #26
 800ac3e:	fb01 f303 	mul.w	r3, r1, r3
 800ac42:	4413      	add	r3, r2
 800ac44:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800ac48:	881a      	ldrh	r2, [r3, #0]
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	835a      	strh	r2, [r3, #26]
 800ac4e:	e015      	b.n	800ac7c <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ac50:	7bbb      	ldrb	r3, [r7, #14]
 800ac52:	687a      	ldr	r2, [r7, #4]
 800ac54:	211a      	movs	r1, #26
 800ac56:	fb01 f303 	mul.w	r3, r1, r3
 800ac5a:	4413      	add	r3, r2
 800ac5c:	f203 3352 	addw	r3, r3, #850	; 0x352
 800ac60:	781a      	ldrb	r2, [r3, #0]
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ac66:	7bbb      	ldrb	r3, [r7, #14]
 800ac68:	687a      	ldr	r2, [r7, #4]
 800ac6a:	211a      	movs	r1, #26
 800ac6c:	fb01 f303 	mul.w	r3, r1, r3
 800ac70:	4413      	add	r3, r2
 800ac72:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800ac76:	881a      	ldrh	r2, [r3, #0]
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	7b9b      	ldrb	r3, [r3, #14]
 800ac80:	4619      	mov	r1, r3
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f001 fe8b 	bl	800c99e <USBH_AllocPipe>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	7bdb      	ldrb	r3, [r3, #15]
 800ac94:	4619      	mov	r1, r3
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f001 fe81 	bl	800c99e <USBH_AllocPipe>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	461a      	mov	r2, r3
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	7b59      	ldrb	r1, [r3, #13]
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	7b98      	ldrb	r0, [r3, #14]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800acb8:	68ba      	ldr	r2, [r7, #8]
 800acba:	8b12      	ldrh	r2, [r2, #24]
 800acbc:	9202      	str	r2, [sp, #8]
 800acbe:	2202      	movs	r2, #2
 800acc0:	9201      	str	r2, [sp, #4]
 800acc2:	9300      	str	r3, [sp, #0]
 800acc4:	4623      	mov	r3, r4
 800acc6:	4602      	mov	r2, r0
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f001 fe39 	bl	800c940 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	7b19      	ldrb	r1, [r3, #12]
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	7bd8      	ldrb	r0, [r3, #15]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ace2:	68ba      	ldr	r2, [r7, #8]
 800ace4:	8b52      	ldrh	r2, [r2, #26]
 800ace6:	9202      	str	r2, [sp, #8]
 800ace8:	2202      	movs	r2, #2
 800acea:	9201      	str	r2, [sp, #4]
 800acec:	9300      	str	r3, [sp, #0]
 800acee:	4623      	mov	r3, r4
 800acf0:	4602      	mov	r2, r0
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f001 fe24 	bl	800c940 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	2200      	movs	r2, #0
 800acfc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	7b5b      	ldrb	r3, [r3, #13]
 800ad04:	2200      	movs	r2, #0
 800ad06:	4619      	mov	r1, r3
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f00a fe87 	bl	8015a1c <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	7b1b      	ldrb	r3, [r3, #12]
 800ad12:	2200      	movs	r2, #0
 800ad14:	4619      	mov	r1, r3
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f00a fe80 	bl	8015a1c <USBH_LL_SetToggle>
      status = USBH_OK;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 800ad20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3714      	adds	r7, #20
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd90      	pop	{r4, r7, pc}

0800ad2a <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800ad2a:	b580      	push	{r7, lr}
 800ad2c:	b084      	sub	sp, #16
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ad38:	69db      	ldr	r3, [r3, #28]
 800ad3a:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d00e      	beq.n	800ad62 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	781b      	ldrb	r3, [r3, #0]
 800ad48:	4619      	mov	r1, r3
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f001 fe17 	bl	800c97e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	4619      	mov	r1, r3
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f001 fe3f 	bl	800c9da <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	7b1b      	ldrb	r3, [r3, #12]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d00e      	beq.n	800ad88 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	7b1b      	ldrb	r3, [r3, #12]
 800ad6e:	4619      	mov	r1, r3
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f001 fe04 	bl	800c97e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	7b1b      	ldrb	r3, [r3, #12]
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f001 fe2c 	bl	800c9da <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	2200      	movs	r2, #0
 800ad86:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	7b5b      	ldrb	r3, [r3, #13]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d00e      	beq.n	800adae <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	7b5b      	ldrb	r3, [r3, #13]
 800ad94:	4619      	mov	r1, r3
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f001 fdf1 	bl	800c97e <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	7b5b      	ldrb	r3, [r3, #13]
 800ada0:	4619      	mov	r1, r3
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f001 fe19 	bl	800c9da <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	2200      	movs	r2, #0
 800adac:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800adb4:	69db      	ldr	r3, [r3, #28]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d00b      	beq.n	800add2 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800adc0:	69db      	ldr	r3, [r3, #28]
 800adc2:	4618      	mov	r0, r3
 800adc4:	f00a ff0c 	bl	8015be0 <free>
    phost->pActiveClass->pData = 0U;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800adce:	2200      	movs	r2, #0
 800add0:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800add2:	2300      	movs	r3, #0
}
 800add4:	4618      	mov	r0, r3
 800add6:	3710      	adds	r7, #16
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 800ade4:	2302      	movs	r3, #2
 800ade6:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800adee:	69db      	ldr	r3, [r3, #28]
 800adf0:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	3340      	adds	r3, #64	; 0x40
 800adf6:	4619      	mov	r1, r3
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f000 f8b2 	bl	800af62 <GetLineCoding>
 800adfe:	4603      	mov	r3, r0
 800ae00:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 800ae02:	7bfb      	ldrb	r3, [r7, #15]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d105      	bne.n	800ae14 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ae0e:	2102      	movs	r1, #2
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	4798      	blx	r3
  }
  return status;
 800ae14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3710      	adds	r7, #16
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
	...

0800ae20 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b084      	sub	sp, #16
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ae36:	69db      	ldr	r3, [r3, #28]
 800ae38:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ae40:	2b04      	cmp	r3, #4
 800ae42:	d877      	bhi.n	800af34 <USBH_CDC_Process+0x114>
 800ae44:	a201      	add	r2, pc, #4	; (adr r2, 800ae4c <USBH_CDC_Process+0x2c>)
 800ae46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae4a:	bf00      	nop
 800ae4c:	0800ae61 	.word	0x0800ae61
 800ae50:	0800ae67 	.word	0x0800ae67
 800ae54:	0800ae97 	.word	0x0800ae97
 800ae58:	0800af0b 	.word	0x0800af0b
 800ae5c:	0800af19 	.word	0x0800af19
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 800ae60:	2300      	movs	r3, #0
 800ae62:	73fb      	strb	r3, [r7, #15]
    break;
 800ae64:	e06d      	b.n	800af42 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae6a:	4619      	mov	r1, r3
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 f897 	bl	800afa0 <SetLineCoding>
 800ae72:	4603      	mov	r3, r0
 800ae74:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800ae76:	7bbb      	ldrb	r3, [r7, #14]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d104      	bne.n	800ae86 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	2202      	movs	r2, #2
 800ae80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800ae84:	e058      	b.n	800af38 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 800ae86:	7bbb      	ldrb	r3, [r7, #14]
 800ae88:	2b01      	cmp	r3, #1
 800ae8a:	d055      	beq.n	800af38 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	2204      	movs	r2, #4
 800ae90:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800ae94:	e050      	b.n	800af38 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	3340      	adds	r3, #64	; 0x40
 800ae9a:	4619      	mov	r1, r3
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f000 f860 	bl	800af62 <GetLineCoding>
 800aea2:	4603      	mov	r3, r0
 800aea4:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800aea6:	7bbb      	ldrb	r3, [r7, #14]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d126      	bne.n	800aefa <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aebe:	791b      	ldrb	r3, [r3, #4]
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d13b      	bne.n	800af3c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aece:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d133      	bne.n	800af3c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aede:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d12b      	bne.n	800af3c <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aeec:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d124      	bne.n	800af3c <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f000 f984 	bl	800b200 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800aef8:	e020      	b.n	800af3c <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 800aefa:	7bbb      	ldrb	r3, [r7, #14]
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	d01d      	beq.n	800af3c <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	2204      	movs	r2, #4
 800af04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800af08:	e018      	b.n	800af3c <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 f867 	bl	800afde <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f000 f8f8 	bl	800b106 <CDC_ProcessReception>
    break;
 800af16:	e014      	b.n	800af42 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 800af18:	2100      	movs	r1, #0
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 fffa 	bl	800bf14 <USBH_ClrFeature>
 800af20:	4603      	mov	r3, r0
 800af22:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 800af24:	7bbb      	ldrb	r3, [r7, #14]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d10a      	bne.n	800af40 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	2200      	movs	r2, #0
 800af2e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 800af32:	e005      	b.n	800af40 <USBH_CDC_Process+0x120>

  default:
    break;
 800af34:	bf00      	nop
 800af36:	e004      	b.n	800af42 <USBH_CDC_Process+0x122>
    break;
 800af38:	bf00      	nop
 800af3a:	e002      	b.n	800af42 <USBH_CDC_Process+0x122>
    break;
 800af3c:	bf00      	nop
 800af3e:	e000      	b.n	800af42 <USBH_CDC_Process+0x122>
    break;
 800af40:	bf00      	nop

  }

  return status;
 800af42:	7bfb      	ldrb	r3, [r7, #15]
}
 800af44:	4618      	mov	r0, r3
 800af46:	3710      	adds	r7, #16
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}

0800af4c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b083      	sub	sp, #12
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 800af54:	2300      	movs	r3, #0
}
 800af56:	4618      	mov	r0, r3
 800af58:	370c      	adds	r7, #12
 800af5a:	46bd      	mov	sp, r7
 800af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af60:	4770      	bx	lr

0800af62 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800af62:	b580      	push	{r7, lr}
 800af64:	b082      	sub	sp, #8
 800af66:	af00      	add	r7, sp, #0
 800af68:	6078      	str	r0, [r7, #4]
 800af6a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	22a1      	movs	r2, #161	; 0xa1
 800af70:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2221      	movs	r2, #33	; 0x21
 800af76:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2200      	movs	r2, #0
 800af7c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2200      	movs	r2, #0
 800af82:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2207      	movs	r2, #7
 800af88:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	2207      	movs	r2, #7
 800af8e:	4619      	mov	r1, r3
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f001 f99f 	bl	800c2d4 <USBH_CtlReq>
 800af96:	4603      	mov	r3, r0
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3708      	adds	r7, #8
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}

0800afa0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b082      	sub	sp, #8
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2221      	movs	r2, #33	; 0x21
 800afae:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2220      	movs	r2, #32
 800afb4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2200      	movs	r2, #0
 800afba:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2200      	movs	r2, #0
 800afc0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2207      	movs	r2, #7
 800afc6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	2207      	movs	r2, #7
 800afcc:	4619      	mov	r1, r3
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f001 f980 	bl	800c2d4 <USBH_CtlReq>
 800afd4:	4603      	mov	r3, r0
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3708      	adds	r7, #8
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}

0800afde <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800afde:	b580      	push	{r7, lr}
 800afe0:	b086      	sub	sp, #24
 800afe2:	af02      	add	r7, sp, #8
 800afe4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800afec:	69db      	ldr	r3, [r3, #28]
 800afee:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800aff0:	2300      	movs	r3, #0
 800aff2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800affa:	2b01      	cmp	r3, #1
 800affc:	d002      	beq.n	800b004 <CDC_ProcessTransmission+0x26>
 800affe:	2b02      	cmp	r3, #2
 800b000:	d025      	beq.n	800b04e <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 800b002:	e07c      	b.n	800b0fe <CDC_ProcessTransmission+0x120>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b008:	68fa      	ldr	r2, [r7, #12]
 800b00a:	8b12      	ldrh	r2, [r2, #24]
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d90c      	bls.n	800b02a <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	69d9      	ldr	r1, [r3, #28]
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	8b1a      	ldrh	r2, [r3, #24]
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	7b58      	ldrb	r0, [r3, #13]
 800b01c:	2301      	movs	r3, #1
 800b01e:	9300      	str	r3, [sp, #0]
 800b020:	4603      	mov	r3, r0
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f001 fc49 	bl	800c8ba <USBH_BulkSendData>
 800b028:	e00c      	b.n	800b044 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 800b032:	b29a      	uxth	r2, r3
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	7b58      	ldrb	r0, [r3, #13]
 800b038:	2301      	movs	r3, #1
 800b03a:	9300      	str	r3, [sp, #0]
 800b03c:	4603      	mov	r3, r0
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f001 fc3b 	bl	800c8ba <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	2202      	movs	r2, #2
 800b048:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800b04c:	e057      	b.n	800b0fe <CDC_ProcessTransmission+0x120>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	7b5b      	ldrb	r3, [r3, #13]
 800b052:	4619      	mov	r1, r3
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f00a fcb7 	bl	80159c8 <USBH_LL_GetURBState>
 800b05a:	4603      	mov	r3, r0
 800b05c:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 800b05e:	7afb      	ldrb	r3, [r7, #11]
 800b060:	2b01      	cmp	r3, #1
 800b062:	d136      	bne.n	800b0d2 <CDC_ProcessTransmission+0xf4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b068:	68fa      	ldr	r2, [r7, #12]
 800b06a:	8b12      	ldrh	r2, [r2, #24]
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d90e      	bls.n	800b08e <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b074:	68fa      	ldr	r2, [r7, #12]
 800b076:	8b12      	ldrh	r2, [r2, #24]
 800b078:	1a9a      	subs	r2, r3, r2
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	69db      	ldr	r3, [r3, #28]
 800b082:	68fa      	ldr	r2, [r7, #12]
 800b084:	8b12      	ldrh	r2, [r2, #24]
 800b086:	441a      	add	r2, r3
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	61da      	str	r2, [r3, #28]
 800b08c:	e002      	b.n	800b094 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2200      	movs	r2, #0
 800b092:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d004      	beq.n	800b0a6 <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	2201      	movs	r2, #1
 800b0a0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800b0a4:	e006      	b.n	800b0b4 <CDC_ProcessTransmission+0xd6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f000 f892 	bl	800b1d8 <USBH_CDC_TransmitCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2204      	movs	r2, #4
 800b0b8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	f004 fe60 	bl	800fd90 <osMessagePut>
    break;
 800b0d0:	e014      	b.n	800b0fc <CDC_ProcessTransmission+0x11e>
      if (URB_Status == USBH_URB_NOTREADY)
 800b0d2:	7afb      	ldrb	r3, [r7, #11]
 800b0d4:	2b02      	cmp	r3, #2
 800b0d6:	d111      	bne.n	800b0fc <CDC_ProcessTransmission+0x11e>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	2201      	movs	r2, #1
 800b0dc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2204      	movs	r2, #4
 800b0e4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	4619      	mov	r1, r3
 800b0f8:	f004 fe4a 	bl	800fd90 <osMessagePut>
    break;
 800b0fc:	bf00      	nop
  }
}
 800b0fe:	bf00      	nop
 800b100:	3710      	adds	r7, #16
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}

0800b106 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800b106:	b580      	push	{r7, lr}
 800b108:	b086      	sub	sp, #24
 800b10a:	af00      	add	r7, sp, #0
 800b10c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b114:	69db      	ldr	r3, [r3, #28]
 800b116:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b118:	2300      	movs	r3, #0
 800b11a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800b122:	2b03      	cmp	r3, #3
 800b124:	d002      	beq.n	800b12c <CDC_ProcessReception+0x26>
 800b126:	2b04      	cmp	r3, #4
 800b128:	d00e      	beq.n	800b148 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 800b12a:	e051      	b.n	800b1d0 <CDC_ProcessReception+0xca>
    USBH_BulkReceiveData (phost,
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	6a19      	ldr	r1, [r3, #32]
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	8b5a      	ldrh	r2, [r3, #26]
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	7b1b      	ldrb	r3, [r3, #12]
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f001 fbe3 	bl	800c904 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	2204      	movs	r2, #4
 800b142:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800b146:	e043      	b.n	800b1d0 <CDC_ProcessReception+0xca>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	7b1b      	ldrb	r3, [r3, #12]
 800b14c:	4619      	mov	r1, r3
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f00a fc3a 	bl	80159c8 <USBH_LL_GetURBState>
 800b154:	4603      	mov	r3, r0
 800b156:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 800b158:	7cfb      	ldrb	r3, [r7, #19]
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	d137      	bne.n	800b1ce <CDC_ProcessReception+0xc8>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	7b1b      	ldrb	r3, [r3, #12]
 800b162:	4619      	mov	r1, r3
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f00a fb9d 	bl	80158a4 <USBH_LL_GetLastXferSize>
 800b16a:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b170:	68fa      	ldr	r2, [r7, #12]
 800b172:	429a      	cmp	r2, r3
 800b174:	d016      	beq.n	800b1a4 <CDC_ProcessReception+0x9e>
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	8b5b      	ldrh	r3, [r3, #26]
 800b17a:	461a      	mov	r2, r3
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	4293      	cmp	r3, r2
 800b180:	d910      	bls.n	800b1a4 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	1ad2      	subs	r2, r2, r3
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	6a1a      	ldr	r2, [r3, #32]
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	441a      	add	r2, r3
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	2203      	movs	r2, #3
 800b19e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800b1a2:	e006      	b.n	800b1b2 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f000 f81d 	bl	800b1ec <USBH_CDC_ReceiveCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2204      	movs	r2, #4
 800b1b6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	f004 fde1 	bl	800fd90 <osMessagePut>
    break;
 800b1ce:	bf00      	nop
  }
}
 800b1d0:	bf00      	nop
 800b1d2:	3718      	adds	r7, #24
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b083      	sub	sp, #12
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]

}
 800b1e0:	bf00      	nop
 800b1e2:	370c      	adds	r7, #12
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr

0800b1ec <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b083      	sub	sp, #12
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]

}
 800b1f4:	bf00      	nop
 800b1f6:	370c      	adds	r7, #12
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	4770      	bx	lr

0800b200 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800b200:	b480      	push	{r7}
 800b202:	b083      	sub	sp, #12
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]

}
 800b208:	bf00      	nop
 800b20a:	370c      	adds	r7, #12
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr

0800b214 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 800b214:	b5b0      	push	{r4, r5, r7, lr}
 800b216:	b08c      	sub	sp, #48	; 0x30
 800b218:	af00      	add	r7, sp, #0
 800b21a:	60f8      	str	r0, [r7, #12]
 800b21c:	60b9      	str	r1, [r7, #8]
 800b21e:	4613      	mov	r3, r2
 800b220:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d101      	bne.n	800b22c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b228:	2302      	movs	r3, #2
 800b22a:	e03c      	b.n	800b2a6 <USBH_Init+0x92>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	79fa      	ldrb	r2, [r7, #7]
 800b230:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2200      	movs	r2, #0
 800b238:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2200      	movs	r2, #0
 800b240:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800b244:	68f8      	ldr	r0, [r7, #12]
 800b246:	f000 f837 	bl	800b2b8 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d003      	beq.n	800b258 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	68ba      	ldr	r2, [r7, #8]
 800b254:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800b258:	4a15      	ldr	r2, [pc, #84]	; (800b2b0 <USBH_Init+0x9c>)
 800b25a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b25e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b262:	e883 0003 	stmia.w	r3, {r0, r1}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 800b266:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b26a:	2100      	movs	r1, #0
 800b26c:	4618      	mov	r0, r3
 800b26e:	f004 fd7c 	bl	800fd6a <osMessageCreate>
 800b272:	4602      	mov	r2, r0
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800b27a:	4b0e      	ldr	r3, [pc, #56]	; (800b2b4 <USBH_Init+0xa0>)
 800b27c:	f107 0414 	add.w	r4, r7, #20
 800b280:	461d      	mov	r5, r3
 800b282:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b286:	682b      	ldr	r3, [r5, #0]
 800b288:	6023      	str	r3, [r4, #0]
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 800b28a:	f107 0314 	add.w	r3, r7, #20
 800b28e:	68f9      	ldr	r1, [r7, #12]
 800b290:	4618      	mov	r0, r3
 800b292:	f004 fc73 	bl	800fb7c <osThreadCreate>
 800b296:	4602      	mov	r2, r0
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800b29e:	68f8      	ldr	r0, [r7, #12]
 800b2a0:	f00a fa4e 	bl	8015740 <USBH_LL_Init>

  return USBH_OK;
 800b2a4:	2300      	movs	r3, #0
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3730      	adds	r7, #48	; 0x30
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bdb0      	pop	{r4, r5, r7, pc}
 800b2ae:	bf00      	nop
 800b2b0:	08015da8 	.word	0x08015da8
 800b2b4:	08015dbc 	.word	0x08015dbc

0800b2b8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b085      	sub	sp, #20
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800b2c4:	e008      	b.n	800b2d8 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	68fa      	ldr	r2, [r7, #12]
 800b2ca:	32e0      	adds	r2, #224	; 0xe0
 800b2cc:	2100      	movs	r1, #0
 800b2ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	3301      	adds	r3, #1
 800b2d6:	60fb      	str	r3, [r7, #12]
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2b0e      	cmp	r3, #14
 800b2dc:	d9f3      	bls.n	800b2c6 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800b2de:	2300      	movs	r3, #0
 800b2e0:	60fb      	str	r3, [r7, #12]
 800b2e2:	e009      	b.n	800b2f8 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 800b2e4:	687a      	ldr	r2, [r7, #4]
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	4413      	add	r3, r2
 800b2ea:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	60fb      	str	r3, [r7, #12]
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2fe:	d3f1      	bcc.n	800b2e4 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2200      	movs	r2, #0
 800b304:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2200      	movs	r2, #0
 800b30a:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2201      	movs	r2, #1
 800b310:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2200      	movs	r2, #0
 800b316:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2201      	movs	r2, #1
 800b31e:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2240      	movs	r2, #64	; 0x40
 800b324:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2200      	movs	r2, #0
 800b330:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2201      	movs	r2, #1
 800b338:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 800b33c:	2300      	movs	r3, #0
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3714      	adds	r7, #20
 800b342:	46bd      	mov	sp, r7
 800b344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b348:	4770      	bx	lr

0800b34a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b34a:	b480      	push	{r7}
 800b34c:	b085      	sub	sp, #20
 800b34e:	af00      	add	r7, sp, #0
 800b350:	6078      	str	r0, [r7, #4]
 800b352:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 800b354:	2300      	movs	r3, #0
 800b356:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d017      	beq.n	800b38e <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b364:	2b00      	cmp	r3, #0
 800b366:	d10f      	bne.n	800b388 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b36e:	1c59      	adds	r1, r3, #1
 800b370:	687a      	ldr	r2, [r7, #4]
 800b372:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	33dc      	adds	r3, #220	; 0xdc
 800b37a:	009b      	lsls	r3, r3, #2
 800b37c:	4413      	add	r3, r2
 800b37e:	683a      	ldr	r2, [r7, #0]
 800b380:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800b382:	2300      	movs	r3, #0
 800b384:	73fb      	strb	r3, [r7, #15]
 800b386:	e004      	b.n	800b392 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b388:	2302      	movs	r3, #2
 800b38a:	73fb      	strb	r3, [r7, #15]
 800b38c:	e001      	b.n	800b392 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b38e:	2302      	movs	r3, #2
 800b390:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b392:	7bfb      	ldrb	r3, [r7, #15]
}
 800b394:	4618      	mov	r0, r3
 800b396:	3714      	adds	r7, #20
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr

0800b3a0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b085      	sub	sp, #20
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 800b3b6:	78fa      	ldrb	r2, [r7, #3]
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d204      	bcs.n	800b3c6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	78fa      	ldrb	r2, [r7, #3]
 800b3c0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 800b3c4:	e001      	b.n	800b3ca <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b3c6:	2302      	movs	r3, #2
 800b3c8:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800b3ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3714      	adds	r7, #20
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr

0800b3d8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b087      	sub	sp, #28
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	4608      	mov	r0, r1
 800b3e2:	4611      	mov	r1, r2
 800b3e4:	461a      	mov	r2, r3
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	70fb      	strb	r3, [r7, #3]
 800b3ea:	460b      	mov	r3, r1
 800b3ec:	70bb      	strb	r3, [r7, #2]
 800b3ee:	4613      	mov	r3, r2
 800b3f0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800b400:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b402:	e025      	b.n	800b450 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b404:	7dfb      	ldrb	r3, [r7, #23]
 800b406:	221a      	movs	r2, #26
 800b408:	fb02 f303 	mul.w	r3, r2, r3
 800b40c:	3308      	adds	r3, #8
 800b40e:	68fa      	ldr	r2, [r7, #12]
 800b410:	4413      	add	r3, r2
 800b412:	3302      	adds	r3, #2
 800b414:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	795b      	ldrb	r3, [r3, #5]
 800b41a:	78fa      	ldrb	r2, [r7, #3]
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d002      	beq.n	800b426 <USBH_FindInterface+0x4e>
 800b420:	78fb      	ldrb	r3, [r7, #3]
 800b422:	2bff      	cmp	r3, #255	; 0xff
 800b424:	d111      	bne.n	800b44a <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800b426:	693b      	ldr	r3, [r7, #16]
 800b428:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800b42a:	78ba      	ldrb	r2, [r7, #2]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d002      	beq.n	800b436 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800b430:	78bb      	ldrb	r3, [r7, #2]
 800b432:	2bff      	cmp	r3, #255	; 0xff
 800b434:	d109      	bne.n	800b44a <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800b43a:	787a      	ldrb	r2, [r7, #1]
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d002      	beq.n	800b446 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b440:	787b      	ldrb	r3, [r7, #1]
 800b442:	2bff      	cmp	r3, #255	; 0xff
 800b444:	d101      	bne.n	800b44a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b446:	7dfb      	ldrb	r3, [r7, #23]
 800b448:	e006      	b.n	800b458 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b44a:	7dfb      	ldrb	r3, [r7, #23]
 800b44c:	3301      	adds	r3, #1
 800b44e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b450:	7dfb      	ldrb	r3, [r7, #23]
 800b452:	2b01      	cmp	r3, #1
 800b454:	d9d6      	bls.n	800b404 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b456:	23ff      	movs	r3, #255	; 0xff
}
 800b458:	4618      	mov	r0, r3
 800b45a:	371c      	adds	r7, #28
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr

0800b464 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b082      	sub	sp, #8
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f00a f9a3 	bl	80157b8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 800b472:	2101      	movs	r1, #1
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f00a faba 	bl	80159ee <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b47a:	2300      	movs	r3, #0
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3708      	adds	r7, #8
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}

0800b484 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b088      	sub	sp, #32
 800b488:	af04      	add	r7, sp, #16
 800b48a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b48c:	2302      	movs	r3, #2
 800b48e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b490:	2300      	movs	r3, #0
 800b492:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f000 fb7e 	bl	800bb96 <USBH_IsPortEnabled>
 800b49a:	4603      	mov	r3, r0
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d10c      	bne.n	800b4ba <USBH_Process+0x36>
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	781b      	ldrb	r3, [r3, #0]
 800b4a4:	b2db      	uxtb	r3, r3
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d007      	beq.n	800b4ba <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	781b      	ldrb	r3, [r3, #0]
 800b4ae:	b2db      	uxtb	r3, r3
 800b4b0:	2b03      	cmp	r3, #3
 800b4b2:	d002      	beq.n	800b4ba <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2203      	movs	r2, #3
 800b4b8:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	781b      	ldrb	r3, [r3, #0]
 800b4be:	b2db      	uxtb	r3, r3
 800b4c0:	2b0b      	cmp	r3, #11
 800b4c2:	f200 81ab 	bhi.w	800b81c <USBH_Process+0x398>
 800b4c6:	a201      	add	r2, pc, #4	; (adr r2, 800b4cc <USBH_Process+0x48>)
 800b4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4cc:	0800b4fd 	.word	0x0800b4fd
 800b4d0:	0800b53b 	.word	0x0800b53b
 800b4d4:	0800b54f 	.word	0x0800b54f
 800b4d8:	0800b7f7 	.word	0x0800b7f7
 800b4dc:	0800b81d 	.word	0x0800b81d
 800b4e0:	0800b5f9 	.word	0x0800b5f9
 800b4e4:	0800b791 	.word	0x0800b791
 800b4e8:	0800b629 	.word	0x0800b629
 800b4ec:	0800b665 	.word	0x0800b665
 800b4f0:	0800b69f 	.word	0x0800b69f
 800b4f4:	0800b6e7 	.word	0x0800b6e7
 800b4f8:	0800b7df 	.word	0x0800b7df
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b502:	b2db      	uxtb	r3, r3
 800b504:	2b00      	cmp	r3, #0
 800b506:	f000 818b 	beq.w	800b820 <USBH_Process+0x39c>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2201      	movs	r2, #1
 800b50e:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 800b510:	20c8      	movs	r0, #200	; 0xc8
 800b512:	f00a fab6 	bl	8015a82 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f00a f9a9 	bl	801586e <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2201      	movs	r2, #1
 800b520:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b530:	2200      	movs	r2, #0
 800b532:	4619      	mov	r1, r3
 800b534:	f004 fc2c 	bl	800fd90 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800b538:	e172      	b.n	800b820 <USBH_Process+0x39c>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b540:	2b01      	cmp	r3, #1
 800b542:	f040 816f 	bne.w	800b824 <USBH_Process+0x3a0>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2202      	movs	r2, #2
 800b54a:	701a      	strb	r2, [r3, #0]
    }
    break;
 800b54c:	e16a      	b.n	800b824 <USBH_Process+0x3a0>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 800b54e:	2064      	movs	r0, #100	; 0x64
 800b550:	f00a fa97 	bl	8015a82 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f00a f965 	bl	8015824 <USBH_LL_GetSpeed>
 800b55a:	4603      	mov	r3, r0
 800b55c:	461a      	mov	r2, r3
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2205      	movs	r2, #5
 800b568:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800b56a:	2100      	movs	r1, #0
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f001 fa16 	bl	800c99e <USBH_AllocPipe>
 800b572:	4603      	mov	r3, r0
 800b574:	461a      	mov	r2, r3
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800b57a:	2180      	movs	r1, #128	; 0x80
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f001 fa0e 	bl	800c99e <USBH_AllocPipe>
 800b582:	4603      	mov	r3, r0
 800b584:	461a      	mov	r2, r3
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	7919      	ldrb	r1, [r3, #4]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800b59a:	687a      	ldr	r2, [r7, #4]
 800b59c:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800b59e:	b292      	uxth	r2, r2
 800b5a0:	9202      	str	r2, [sp, #8]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	9201      	str	r2, [sp, #4]
 800b5a6:	9300      	str	r3, [sp, #0]
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	2280      	movs	r2, #128	; 0x80
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f001 f9c7 	bl	800c940 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	7959      	ldrb	r1, [r3, #5]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800b5c2:	687a      	ldr	r2, [r7, #4]
 800b5c4:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800b5c6:	b292      	uxth	r2, r2
 800b5c8:	9202      	str	r2, [sp, #8]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	9201      	str	r2, [sp, #4]
 800b5ce:	9300      	str	r3, [sp, #0]
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f001 f9b3 	bl	800c940 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2201      	movs	r2, #1
 800b5de:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	f004 fbcd 	bl	800fd90 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800b5f6:	e120      	b.n	800b83a <USBH_Process+0x3b6>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f000 f923 	bl	800b844 <USBH_HandleEnum>
 800b5fe:	4603      	mov	r3, r0
 800b600:	2b00      	cmp	r3, #0
 800b602:	f040 8111 	bne.w	800b828 <USBH_Process+0x3a4>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2200      	movs	r2, #0
 800b60a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800b614:	2b01      	cmp	r3, #1
 800b616:	d103      	bne.n	800b620 <USBH_Process+0x19c>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2208      	movs	r2, #8
 800b61c:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 800b61e:	e103      	b.n	800b828 <USBH_Process+0x3a4>
        phost->gState  = HOST_INPUT;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2207      	movs	r2, #7
 800b624:	701a      	strb	r2, [r3, #0]
    break;
 800b626:	e0ff      	b.n	800b828 <USBH_Process+0x3a4>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b62e:	2b00      	cmp	r3, #0
 800b630:	f000 80fc 	beq.w	800b82c <USBH_Process+0x3a8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b63a:	2101      	movs	r1, #1
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2208      	movs	r2, #8
 800b644:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2205      	movs	r2, #5
 800b64a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b65a:	2200      	movs	r2, #0
 800b65c:	4619      	mov	r1, r3
 800b65e:	f004 fb97 	bl	800fd90 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800b662:	e0e3      	b.n	800b82c <USBH_Process+0x3a8>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 800b66a:	b29b      	uxth	r3, r3
 800b66c:	4619      	mov	r1, r3
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f000 fc09 	bl	800be86 <USBH_SetCfg>
 800b674:	4603      	mov	r3, r0
 800b676:	2b00      	cmp	r3, #0
 800b678:	d102      	bne.n	800b680 <USBH_Process+0x1fc>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2209      	movs	r2, #9
 800b67e:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2201      	movs	r2, #1
 800b684:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b694:	2200      	movs	r2, #0
 800b696:	4619      	mov	r1, r3
 800b698:	f004 fb7a 	bl	800fd90 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800b69c:	e0cd      	b.n	800b83a <USBH_Process+0x3b6>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800b6a4:	f003 0320 	and.w	r3, r3, #32
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d00a      	beq.n	800b6c2 <USBH_Process+0x23e>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800b6ac:	2101      	movs	r1, #1
 800b6ae:	6878      	ldr	r0, [r7, #4]
 800b6b0:	f000 fc0c 	bl	800becc <USBH_SetFeature>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d106      	bne.n	800b6c8 <USBH_Process+0x244>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	220a      	movs	r2, #10
 800b6be:	701a      	strb	r2, [r3, #0]
 800b6c0:	e002      	b.n	800b6c8 <USBH_Process+0x244>
      }
    }
    else
    {
      phost->gState  = HOST_CHECK_CLASS;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	220a      	movs	r2, #10
 800b6c6:	701a      	strb	r2, [r3, #0]
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b6dc:	2200      	movs	r2, #0
 800b6de:	4619      	mov	r1, r3
 800b6e0:	f004 fb56 	bl	800fd90 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800b6e4:	e0a9      	b.n	800b83a <USBH_Process+0x3b6>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d040      	beq.n	800b772 <USBH_Process+0x2ee>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	73fb      	strb	r3, [r7, #15]
 800b6fc:	e017      	b.n	800b72e <USBH_Process+0x2aa>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b6fe:	7bfb      	ldrb	r3, [r7, #15]
 800b700:	687a      	ldr	r2, [r7, #4]
 800b702:	33dc      	adds	r3, #220	; 0xdc
 800b704:	009b      	lsls	r3, r3, #2
 800b706:	4413      	add	r3, r2
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	791a      	ldrb	r2, [r3, #4]
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 800b712:	429a      	cmp	r2, r3
 800b714:	d108      	bne.n	800b728 <USBH_Process+0x2a4>
        {
          phost->pActiveClass = phost->pClass[idx];
 800b716:	7bfb      	ldrb	r3, [r7, #15]
 800b718:	687a      	ldr	r2, [r7, #4]
 800b71a:	33dc      	adds	r3, #220	; 0xdc
 800b71c:	009b      	lsls	r3, r3, #2
 800b71e:	4413      	add	r3, r2
 800b720:	685a      	ldr	r2, [r3, #4]
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b728:	7bfb      	ldrb	r3, [r7, #15]
 800b72a:	3301      	adds	r3, #1
 800b72c:	73fb      	strb	r3, [r7, #15]
 800b72e:	7bfb      	ldrb	r3, [r7, #15]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d0e4      	beq.n	800b6fe <USBH_Process+0x27a>
        }
      }

      if(phost->pActiveClass != NULL)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d016      	beq.n	800b76c <USBH_Process+0x2e8>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b744:	689b      	ldr	r3, [r3, #8]
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	4798      	blx	r3
 800b74a:	4603      	mov	r3, r0
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d109      	bne.n	800b764 <USBH_Process+0x2e0>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2206      	movs	r2, #6
 800b754:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b75c:	2103      	movs	r1, #3
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	4798      	blx	r3
 800b762:	e006      	b.n	800b772 <USBH_Process+0x2ee>
        }
        else
        {
          phost->gState  = HOST_ABORT_STATE;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	220d      	movs	r2, #13
 800b768:	701a      	strb	r2, [r3, #0]
 800b76a:	e002      	b.n	800b772 <USBH_Process+0x2ee>
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
        }
      }
      else
      {
        phost->gState  = HOST_ABORT_STATE;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	220d      	movs	r2, #13
 800b770:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog ("No registered class for this device.");
      }
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2205      	movs	r2, #5
 800b776:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b786:	2200      	movs	r2, #0
 800b788:	4619      	mov	r1, r3
 800b78a:	f004 fb01 	bl	800fd90 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800b78e:	e054      	b.n	800b83a <USBH_Process+0x3b6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b796:	2b00      	cmp	r3, #0
 800b798:	d00f      	beq.n	800b7ba <USBH_Process+0x336>
    {
      status = phost->pActiveClass->Requests(phost);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b7a0:	691b      	ldr	r3, [r3, #16]
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	4798      	blx	r3
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 800b7aa:	7bbb      	ldrb	r3, [r7, #14]
 800b7ac:	b2db      	uxtb	r3, r3
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d13e      	bne.n	800b830 <USBH_Process+0x3ac>
      {
        phost->gState  = HOST_CLASS;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	220b      	movs	r2, #11
 800b7b6:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 800b7b8:	e03a      	b.n	800b830 <USBH_Process+0x3ac>
      phost->gState  = HOST_ABORT_STATE;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	220d      	movs	r2, #13
 800b7be:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2205      	movs	r2, #5
 800b7c4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	4619      	mov	r1, r3
 800b7d8:	f004 fada 	bl	800fd90 <osMessagePut>
    break;
 800b7dc:	e028      	b.n	800b830 <USBH_Process+0x3ac>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d025      	beq.n	800b834 <USBH_Process+0x3b0>
    {
      phost->pActiveClass->BgndProcess(phost);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b7ee:	695b      	ldr	r3, [r3, #20]
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	4798      	blx	r3
    }
    break;
 800b7f4:	e01e      	b.n	800b834 <USBH_Process+0x3b0>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f7ff fd5e 	bl	800b2b8 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b802:	2b00      	cmp	r3, #0
 800b804:	d018      	beq.n	800b838 <USBH_Process+0x3b4>
    {
      phost->pActiveClass->DeInit(phost);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b80c:	68db      	ldr	r3, [r3, #12]
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	4798      	blx	r3
      phost->pActiveClass = NULL;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2200      	movs	r2, #0
 800b816:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 800b81a:	e00d      	b.n	800b838 <USBH_Process+0x3b4>

  case HOST_ABORT_STATE:
  default :
    break;
 800b81c:	bf00      	nop
 800b81e:	e00c      	b.n	800b83a <USBH_Process+0x3b6>
    break;
 800b820:	bf00      	nop
 800b822:	e00a      	b.n	800b83a <USBH_Process+0x3b6>
    break;
 800b824:	bf00      	nop
 800b826:	e008      	b.n	800b83a <USBH_Process+0x3b6>
    break;
 800b828:	bf00      	nop
 800b82a:	e006      	b.n	800b83a <USBH_Process+0x3b6>
    break;
 800b82c:	bf00      	nop
 800b82e:	e004      	b.n	800b83a <USBH_Process+0x3b6>
    break;
 800b830:	bf00      	nop
 800b832:	e002      	b.n	800b83a <USBH_Process+0x3b6>
    break;
 800b834:	bf00      	nop
 800b836:	e000      	b.n	800b83a <USBH_Process+0x3b6>
    break;
 800b838:	bf00      	nop
  }
 return USBH_OK;
 800b83a:	2300      	movs	r3, #0
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3710      	adds	r7, #16
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}

0800b844 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b088      	sub	sp, #32
 800b848:	af04      	add	r7, sp, #16
 800b84a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b84c:	2301      	movs	r3, #1
 800b84e:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	785b      	ldrb	r3, [r3, #1]
 800b854:	2b07      	cmp	r3, #7
 800b856:	f200 8132 	bhi.w	800babe <USBH_HandleEnum+0x27a>
 800b85a:	a201      	add	r2, pc, #4	; (adr r2, 800b860 <USBH_HandleEnum+0x1c>)
 800b85c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b860:	0800b881 	.word	0x0800b881
 800b864:	0800b8f3 	.word	0x0800b8f3
 800b868:	0800b90b 	.word	0x0800b90b
 800b86c:	0800b981 	.word	0x0800b981
 800b870:	0800b999 	.word	0x0800b999
 800b874:	0800b9b7 	.word	0x0800b9b7
 800b878:	0800ba23 	.word	0x0800ba23
 800b87c:	0800ba73 	.word	0x0800ba73
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800b880:	2108      	movs	r1, #8
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f000 fa2f 	bl	800bce6 <USBH_Get_DevDesc>
 800b888:	4603      	mov	r3, r0
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	f040 8119 	bne.w	800bac2 <USBH_HandleEnum+0x27e>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2201      	movs	r2, #1
 800b89e:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	7919      	ldrb	r1, [r3, #4]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800b8b0:	687a      	ldr	r2, [r7, #4]
 800b8b2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800b8b4:	b292      	uxth	r2, r2
 800b8b6:	9202      	str	r2, [sp, #8]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	9201      	str	r2, [sp, #4]
 800b8bc:	9300      	str	r3, [sp, #0]
 800b8be:	4603      	mov	r3, r0
 800b8c0:	2280      	movs	r2, #128	; 0x80
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f001 f83c 	bl	800c940 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	7959      	ldrb	r1, [r3, #5]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800b8d8:	687a      	ldr	r2, [r7, #4]
 800b8da:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800b8dc:	b292      	uxth	r2, r2
 800b8de:	9202      	str	r2, [sp, #8]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	9201      	str	r2, [sp, #4]
 800b8e4:	9300      	str	r3, [sp, #0]
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f001 f828 	bl	800c940 <USBH_OpenPipe>

    }
    break;
 800b8f0:	e0e7      	b.n	800bac2 <USBH_HandleEnum+0x27e>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800b8f2:	2112      	movs	r1, #18
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f000 f9f6 	bl	800bce6 <USBH_Get_DevDesc>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	f040 80e2 	bne.w	800bac6 <USBH_HandleEnum+0x282>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2202      	movs	r2, #2
 800b906:	705a      	strb	r2, [r3, #1]

    }
    break;
 800b908:	e0dd      	b.n	800bac6 <USBH_HandleEnum+0x282>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800b90a:	2101      	movs	r1, #1
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f000 fa96 	bl	800be3e <USBH_SetAddress>
 800b912:	4603      	mov	r3, r0
 800b914:	2b00      	cmp	r3, #0
 800b916:	f040 80d8 	bne.w	800baca <USBH_HandleEnum+0x286>
    {
      USBH_Delay(2U);
 800b91a:	2002      	movs	r0, #2
 800b91c:	f00a f8b1 	bl	8015a82 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2201      	movs	r2, #1
 800b924:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2203      	movs	r2, #3
 800b92c:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	7919      	ldrb	r1, [r3, #4]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800b93e:	687a      	ldr	r2, [r7, #4]
 800b940:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800b942:	b292      	uxth	r2, r2
 800b944:	9202      	str	r2, [sp, #8]
 800b946:	2200      	movs	r2, #0
 800b948:	9201      	str	r2, [sp, #4]
 800b94a:	9300      	str	r3, [sp, #0]
 800b94c:	4603      	mov	r3, r0
 800b94e:	2280      	movs	r2, #128	; 0x80
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f000 fff5 	bl	800c940 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	7959      	ldrb	r1, [r3, #5]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800b966:	687a      	ldr	r2, [r7, #4]
 800b968:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800b96a:	b292      	uxth	r2, r2
 800b96c:	9202      	str	r2, [sp, #8]
 800b96e:	2200      	movs	r2, #0
 800b970:	9201      	str	r2, [sp, #4]
 800b972:	9300      	str	r3, [sp, #0]
 800b974:	4603      	mov	r3, r0
 800b976:	2200      	movs	r2, #0
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	f000 ffe1 	bl	800c940 <USBH_OpenPipe>
    }
    break;
 800b97e:	e0a4      	b.n	800baca <USBH_HandleEnum+0x286>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 800b980:	2109      	movs	r1, #9
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 f9d7 	bl	800bd36 <USBH_Get_CfgDesc>
 800b988:	4603      	mov	r3, r0
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	f040 809f 	bne.w	800bace <USBH_HandleEnum+0x28a>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2204      	movs	r2, #4
 800b994:	705a      	strb	r2, [r3, #1]
    }
    break;
 800b996:	e09a      	b.n	800bace <USBH_HandleEnum+0x28a>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 800b99e:	4619      	mov	r1, r3
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f000 f9c8 	bl	800bd36 <USBH_Get_CfgDesc>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	f040 8092 	bne.w	800bad2 <USBH_HandleEnum+0x28e>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2205      	movs	r2, #5
 800b9b2:	705a      	strb	r2, [r3, #1]
    }
    break;
 800b9b4:	e08d      	b.n	800bad2 <USBH_HandleEnum+0x28e>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d01e      	beq.n	800b9fe <USBH_HandleEnum+0x1ba>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800b9cc:	23ff      	movs	r3, #255	; 0xff
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f000 f9d5 	bl	800bd7e <USBH_Get_StringDesc>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d17d      	bne.n	800bad6 <USBH_HandleEnum+0x292>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2206      	movs	r2, #6
 800b9de:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2205      	movs	r2, #5
 800b9e4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	f004 f9ca 	bl	800fd90 <osMessagePut>
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800b9fc:	e06b      	b.n	800bad6 <USBH_HandleEnum+0x292>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2206      	movs	r2, #6
 800ba02:	705a      	strb	r2, [r3, #1]
     phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2205      	movs	r2, #5
 800ba08:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
     (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ba18:	2200      	movs	r2, #0
 800ba1a:	4619      	mov	r1, r3
 800ba1c:	f004 f9b8 	bl	800fd90 <osMessagePut>
    break;
 800ba20:	e059      	b.n	800bad6 <USBH_HandleEnum+0x292>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d010      	beq.n	800ba4e <USBH_HandleEnum+0x20a>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800ba38:	23ff      	movs	r3, #255	; 0xff
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f000 f99f 	bl	800bd7e <USBH_Get_StringDesc>
 800ba40:	4603      	mov	r3, r0
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d149      	bne.n	800bada <USBH_HandleEnum+0x296>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2207      	movs	r2, #7
 800ba4a:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800ba4c:	e045      	b.n	800bada <USBH_HandleEnum+0x296>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2207      	movs	r2, #7
 800ba52:	705a      	strb	r2, [r3, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2205      	movs	r2, #5
 800ba58:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ba68:	2200      	movs	r2, #0
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	f004 f990 	bl	800fd90 <osMessagePut>
    break;
 800ba70:	e033      	b.n	800bada <USBH_HandleEnum+0x296>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d00f      	beq.n	800ba9c <USBH_HandleEnum+0x258>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800ba88:	23ff      	movs	r3, #255	; 0xff
 800ba8a:	6878      	ldr	r0, [r7, #4]
 800ba8c:	f000 f977 	bl	800bd7e <USBH_Get_StringDesc>
 800ba90:	4603      	mov	r3, r0
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d123      	bne.n	800bade <USBH_HandleEnum+0x29a>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 800ba96:	2300      	movs	r3, #0
 800ba98:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800ba9a:	e020      	b.n	800bade <USBH_HandleEnum+0x29a>
      Status = USBH_OK;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2205      	movs	r2, #5
 800baa4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bab4:	2200      	movs	r2, #0
 800bab6:	4619      	mov	r1, r3
 800bab8:	f004 f96a 	bl	800fd90 <osMessagePut>
    break;
 800babc:	e00f      	b.n	800bade <USBH_HandleEnum+0x29a>

  default:
    break;
 800babe:	bf00      	nop
 800bac0:	e00e      	b.n	800bae0 <USBH_HandleEnum+0x29c>
    break;
 800bac2:	bf00      	nop
 800bac4:	e00c      	b.n	800bae0 <USBH_HandleEnum+0x29c>
    break;
 800bac6:	bf00      	nop
 800bac8:	e00a      	b.n	800bae0 <USBH_HandleEnum+0x29c>
    break;
 800baca:	bf00      	nop
 800bacc:	e008      	b.n	800bae0 <USBH_HandleEnum+0x29c>
    break;
 800bace:	bf00      	nop
 800bad0:	e006      	b.n	800bae0 <USBH_HandleEnum+0x29c>
    break;
 800bad2:	bf00      	nop
 800bad4:	e004      	b.n	800bae0 <USBH_HandleEnum+0x29c>
    break;
 800bad6:	bf00      	nop
 800bad8:	e002      	b.n	800bae0 <USBH_HandleEnum+0x29c>
    break;
 800bada:	bf00      	nop
 800badc:	e000      	b.n	800bae0 <USBH_HandleEnum+0x29c>
    break;
 800bade:	bf00      	nop
  }
  return Status;
 800bae0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3710      	adds	r7, #16
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop

0800baec <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 800baec:	b480      	push	{r7}
 800baee:	b083      	sub	sp, #12
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	683a      	ldr	r2, [r7, #0]
 800bafa:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 800bafe:	bf00      	nop
 800bb00:	370c      	adds	r7, #12
 800bb02:	46bd      	mov	sp, r7
 800bb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb08:	4770      	bx	lr

0800bb0a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800bb0a:	b580      	push	{r7, lr}
 800bb0c:	b082      	sub	sp, #8
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800bb18:	1c5a      	adds	r2, r3, #1
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f000 f804 	bl	800bb2e <USBH_HandleSof>
}
 800bb26:	bf00      	nop
 800bb28:	3708      	adds	r7, #8
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}

0800bb2e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800bb2e:	b580      	push	{r7, lr}
 800bb30:	b082      	sub	sp, #8
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	781b      	ldrb	r3, [r3, #0]
 800bb3a:	b2db      	uxtb	r3, r3
 800bb3c:	2b0b      	cmp	r3, #11
 800bb3e:	d10a      	bne.n	800bb56 <USBH_HandleSof+0x28>
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d005      	beq.n	800bb56 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800bb50:	699b      	ldr	r3, [r3, #24]
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	4798      	blx	r3
  }
}
 800bb56:	bf00      	nop
 800bb58:	3708      	adds	r7, #8
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}

0800bb5e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 800bb5e:	b480      	push	{r7}
 800bb60:	b083      	sub	sp, #12
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2201      	movs	r2, #1
 800bb6a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800bb6e:	bf00      	nop
}
 800bb70:	370c      	adds	r7, #12
 800bb72:	46bd      	mov	sp, r7
 800bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb78:	4770      	bx	lr

0800bb7a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 800bb7a:	b480      	push	{r7}
 800bb7c:	b083      	sub	sp, #12
 800bb7e:	af00      	add	r7, sp, #0
 800bb80:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2200      	movs	r2, #0
 800bb86:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800bb8a:	bf00      	nop
}
 800bb8c:	370c      	adds	r7, #12
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb94:	4770      	bx	lr

0800bb96 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 800bb96:	b480      	push	{r7}
 800bb98:	b083      	sub	sp, #12
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	370c      	adds	r7, #12
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr

0800bbb0 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b082      	sub	sp, #8
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	781b      	ldrb	r3, [r3, #0]
 800bbbc:	b2db      	uxtb	r3, r3
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d10f      	bne.n	800bbe2 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2201      	movs	r2, #1
 800bbc6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d00e      	beq.n	800bbf2 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bbda:	2104      	movs	r1, #4
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	4798      	blx	r3
 800bbe0:	e007      	b.n	800bbf2 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800bbe8:	2b01      	cmp	r3, #1
 800bbea:	d102      	bne.n	800bbf2 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2202      	movs	r2, #2
 800bbf0:	701a      	strb	r2, [r3, #0]
    }
  }

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2201      	movs	r2, #1
 800bbf6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bc06:	2200      	movs	r2, #0
 800bc08:	4619      	mov	r1, r3
 800bc0a:	f004 f8c1 	bl	800fd90 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800bc0e:	2300      	movs	r3, #0
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3708      	adds	r7, #8
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}

0800bc18 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b082      	sub	sp, #8
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f009 fde4 	bl	80157ee <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	791b      	ldrb	r3, [r3, #4]
 800bc2a:	4619      	mov	r1, r3
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f000 fed4 	bl	800c9da <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	795b      	ldrb	r3, [r3, #5]
 800bc36:	4619      	mov	r1, r3
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f000 fece 	bl	800c9da <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2200      	movs	r2, #0
 800bc42:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d005      	beq.n	800bc5c <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bc56:	2105      	movs	r1, #5
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f009 fdab 	bl	80157b8 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2203      	movs	r2, #3
 800bc66:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	4619      	mov	r1, r3
 800bc80:	f004 f886 	bl	800fd90 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800bc84:	2300      	movs	r3, #0
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3708      	adds	r7, #8
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}

0800bc8e <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800bc8e:	b580      	push	{r7, lr}
 800bc90:	b086      	sub	sp, #24
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	6078      	str	r0, [r7, #4]
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f8d3 13cc 	ldr.w	r1, [r3, #972]	; 0x3cc
 800bc9c:	f107 030c 	add.w	r3, r7, #12
 800bca0:	f04f 32ff 	mov.w	r2, #4294967295
 800bca4:	4618      	mov	r0, r3
 800bca6:	f004 f8b3 	bl	800fe10 <osMessageGet>
    if(event.status == osEventMessage)
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	2b10      	cmp	r3, #16
 800bcae:	d1f2      	bne.n	800bc96 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f7ff fbe7 	bl	800b484 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800bcb6:	e7ee      	b.n	800bc96 <USBH_Process_OS+0x8>

0800bcb8 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b082      	sub	sp, #8
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	f004 f85a 	bl	800fd90 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800bcdc:	2300      	movs	r3, #0
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3708      	adds	r7, #8
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}

0800bce6 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800bce6:	b580      	push	{r7, lr}
 800bce8:	b086      	sub	sp, #24
 800bcea:	af02      	add	r7, sp, #8
 800bcec:	6078      	str	r0, [r7, #4]
 800bcee:	460b      	mov	r3, r1
 800bcf0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800bcf8:	78fb      	ldrb	r3, [r7, #3]
 800bcfa:	b29b      	uxth	r3, r3
 800bcfc:	9300      	str	r3, [sp, #0]
 800bcfe:	4613      	mov	r3, r2
 800bd00:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bd04:	2100      	movs	r1, #0
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f000 f864 	bl	800bdd4 <USBH_GetDescriptor>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	73fb      	strb	r3, [r7, #15]
 800bd10:	7bfb      	ldrb	r3, [r7, #15]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d10a      	bne.n	800bd2c <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f203 3022 	addw	r0, r3, #802	; 0x322
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bd22:	78fa      	ldrb	r2, [r7, #3]
 800bd24:	b292      	uxth	r2, r2
 800bd26:	4619      	mov	r1, r3
 800bd28:	f000 f918 	bl	800bf5c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 800bd2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3710      	adds	r7, #16
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}

0800bd36 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 800bd36:	b580      	push	{r7, lr}
 800bd38:	b086      	sub	sp, #24
 800bd3a:	af02      	add	r7, sp, #8
 800bd3c:	6078      	str	r0, [r7, #4]
 800bd3e:	460b      	mov	r3, r1
 800bd40:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	331c      	adds	r3, #28
 800bd46:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 800bd48:	887b      	ldrh	r3, [r7, #2]
 800bd4a:	9300      	str	r3, [sp, #0]
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd52:	2100      	movs	r1, #0
 800bd54:	6878      	ldr	r0, [r7, #4]
 800bd56:	f000 f83d 	bl	800bdd4 <USBH_GetDescriptor>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	72fb      	strb	r3, [r7, #11]
 800bd5e:	7afb      	ldrb	r3, [r7, #11]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d107      	bne.n	800bd74 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800bd6a:	887a      	ldrh	r2, [r7, #2]
 800bd6c:	68f9      	ldr	r1, [r7, #12]
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f000 f964 	bl	800c03c <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 800bd74:	7afb      	ldrb	r3, [r7, #11]
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3710      	adds	r7, #16
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}

0800bd7e <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 800bd7e:	b580      	push	{r7, lr}
 800bd80:	b088      	sub	sp, #32
 800bd82:	af02      	add	r7, sp, #8
 800bd84:	60f8      	str	r0, [r7, #12]
 800bd86:	607a      	str	r2, [r7, #4]
 800bd88:	461a      	mov	r2, r3
 800bd8a:	460b      	mov	r3, r1
 800bd8c:	72fb      	strb	r3, [r7, #11]
 800bd8e:	4613      	mov	r3, r2
 800bd90:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 800bd92:	7afb      	ldrb	r3, [r7, #11]
 800bd94:	b29b      	uxth	r3, r3
 800bd96:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800bd9a:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800bda2:	893b      	ldrh	r3, [r7, #8]
 800bda4:	9300      	str	r3, [sp, #0]
 800bda6:	460b      	mov	r3, r1
 800bda8:	2100      	movs	r1, #0
 800bdaa:	68f8      	ldr	r0, [r7, #12]
 800bdac:	f000 f812 	bl	800bdd4 <USBH_GetDescriptor>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	75fb      	strb	r3, [r7, #23]
 800bdb4:	7dfb      	ldrb	r3, [r7, #23]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d107      	bne.n	800bdca <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bdc0:	893a      	ldrh	r2, [r7, #8]
 800bdc2:	6879      	ldr	r1, [r7, #4]
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f000 fa37 	bl	800c238 <USBH_ParseStringDesc>
  }
  return status;
 800bdca:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3718      	adds	r7, #24
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}

0800bdd4 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b084      	sub	sp, #16
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	60f8      	str	r0, [r7, #12]
 800bddc:	607b      	str	r3, [r7, #4]
 800bdde:	460b      	mov	r3, r1
 800bde0:	72fb      	strb	r3, [r7, #11]
 800bde2:	4613      	mov	r3, r2
 800bde4:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	789b      	ldrb	r3, [r3, #2]
 800bdea:	2b01      	cmp	r3, #1
 800bdec:	d11c      	bne.n	800be28 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800bdee:	7afb      	ldrb	r3, [r7, #11]
 800bdf0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bdf4:	b2da      	uxtb	r2, r3
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	2206      	movs	r2, #6
 800bdfe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	893a      	ldrh	r2, [r7, #8]
 800be04:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800be06:	893b      	ldrh	r3, [r7, #8]
 800be08:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800be0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be10:	d104      	bne.n	800be1c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	f240 4209 	movw	r2, #1033	; 0x409
 800be18:	829a      	strh	r2, [r3, #20]
 800be1a:	e002      	b.n	800be22 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2200      	movs	r2, #0
 800be20:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	8b3a      	ldrh	r2, [r7, #24]
 800be26:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 800be28:	8b3b      	ldrh	r3, [r7, #24]
 800be2a:	461a      	mov	r2, r3
 800be2c:	6879      	ldr	r1, [r7, #4]
 800be2e:	68f8      	ldr	r0, [r7, #12]
 800be30:	f000 fa50 	bl	800c2d4 <USBH_CtlReq>
 800be34:	4603      	mov	r3, r0
}
 800be36:	4618      	mov	r0, r3
 800be38:	3710      	adds	r7, #16
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}

0800be3e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800be3e:	b580      	push	{r7, lr}
 800be40:	b082      	sub	sp, #8
 800be42:	af00      	add	r7, sp, #0
 800be44:	6078      	str	r0, [r7, #4]
 800be46:	460b      	mov	r3, r1
 800be48:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	789b      	ldrb	r3, [r3, #2]
 800be4e:	2b01      	cmp	r3, #1
 800be50:	d10f      	bne.n	800be72 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2200      	movs	r2, #0
 800be56:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2205      	movs	r2, #5
 800be5c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800be5e:	78fb      	ldrb	r3, [r7, #3]
 800be60:	b29a      	uxth	r2, r3
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2200      	movs	r2, #0
 800be6a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2200      	movs	r2, #0
 800be70:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800be72:	2200      	movs	r2, #0
 800be74:	2100      	movs	r1, #0
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f000 fa2c 	bl	800c2d4 <USBH_CtlReq>
 800be7c:	4603      	mov	r3, r0
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3708      	adds	r7, #8
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}

0800be86 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800be86:	b580      	push	{r7, lr}
 800be88:	b082      	sub	sp, #8
 800be8a:	af00      	add	r7, sp, #0
 800be8c:	6078      	str	r0, [r7, #4]
 800be8e:	460b      	mov	r3, r1
 800be90:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	789b      	ldrb	r3, [r3, #2]
 800be96:	2b01      	cmp	r3, #1
 800be98:	d10e      	bne.n	800beb8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2200      	movs	r2, #0
 800be9e:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2209      	movs	r2, #9
 800bea4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	887a      	ldrh	r2, [r7, #2]
 800beaa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2200      	movs	r2, #0
 800beb0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2200      	movs	r2, #0
 800beb6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 800beb8:	2200      	movs	r2, #0
 800beba:	2100      	movs	r1, #0
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f000 fa09 	bl	800c2d4 <USBH_CtlReq>
 800bec2:	4603      	mov	r3, r0
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3708      	adds	r7, #8
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}

0800becc <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b082      	sub	sp, #8
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
 800bed4:	460b      	mov	r3, r1
 800bed6:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	789b      	ldrb	r3, [r3, #2]
 800bedc:	2b01      	cmp	r3, #1
 800bede:	d10f      	bne.n	800bf00 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2200      	movs	r2, #0
 800bee4:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2203      	movs	r2, #3
 800beea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800beec:	78fb      	ldrb	r3, [r7, #3]
 800beee:	b29a      	uxth	r2, r3
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2200      	movs	r2, #0
 800bef8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2200      	movs	r2, #0
 800befe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bf00:	2200      	movs	r2, #0
 800bf02:	2100      	movs	r1, #0
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f000 f9e5 	bl	800c2d4 <USBH_CtlReq>
 800bf0a:	4603      	mov	r3, r0
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3708      	adds	r7, #8
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b082      	sub	sp, #8
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
 800bf1c:	460b      	mov	r3, r1
 800bf1e:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	789b      	ldrb	r3, [r3, #2]
 800bf24:	2b01      	cmp	r3, #1
 800bf26:	d10f      	bne.n	800bf48 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2202      	movs	r2, #2
 800bf2c:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2201      	movs	r2, #1
 800bf32:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2200      	movs	r2, #0
 800bf38:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800bf3a:	78fb      	ldrb	r3, [r7, #3]
 800bf3c:	b29a      	uxth	r2, r3
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2200      	movs	r2, #0
 800bf46:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 800bf48:	2200      	movs	r2, #0
 800bf4a:	2100      	movs	r1, #0
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f000 f9c1 	bl	800c2d4 <USBH_CtlReq>
 800bf52:	4603      	mov	r3, r0
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3708      	adds	r7, #8
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}

0800bf5c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b085      	sub	sp, #20
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	60f8      	str	r0, [r7, #12]
 800bf64:	60b9      	str	r1, [r7, #8]
 800bf66:	4613      	mov	r3, r2
 800bf68:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	781a      	ldrb	r2, [r3, #0]
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	785a      	ldrb	r2, [r3, #1]
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	3302      	adds	r3, #2
 800bf7e:	781b      	ldrb	r3, [r3, #0]
 800bf80:	b29a      	uxth	r2, r3
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	3303      	adds	r3, #3
 800bf86:	781b      	ldrb	r3, [r3, #0]
 800bf88:	b29b      	uxth	r3, r3
 800bf8a:	021b      	lsls	r3, r3, #8
 800bf8c:	b29b      	uxth	r3, r3
 800bf8e:	4313      	orrs	r3, r2
 800bf90:	b29a      	uxth	r2, r3
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	791a      	ldrb	r2, [r3, #4]
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	795a      	ldrb	r2, [r3, #5]
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	799a      	ldrb	r2, [r3, #6]
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	79da      	ldrb	r2, [r3, #7]
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800bfb6:	88fb      	ldrh	r3, [r7, #6]
 800bfb8:	2b08      	cmp	r3, #8
 800bfba:	d939      	bls.n	800c030 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	3308      	adds	r3, #8
 800bfc0:	781b      	ldrb	r3, [r3, #0]
 800bfc2:	b29a      	uxth	r2, r3
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	3309      	adds	r3, #9
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	b29b      	uxth	r3, r3
 800bfcc:	021b      	lsls	r3, r3, #8
 800bfce:	b29b      	uxth	r3, r3
 800bfd0:	4313      	orrs	r3, r2
 800bfd2:	b29a      	uxth	r2, r3
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	330a      	adds	r3, #10
 800bfdc:	781b      	ldrb	r3, [r3, #0]
 800bfde:	b29a      	uxth	r2, r3
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	330b      	adds	r3, #11
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	b29b      	uxth	r3, r3
 800bfe8:	021b      	lsls	r3, r3, #8
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	4313      	orrs	r3, r2
 800bfee:	b29a      	uxth	r2, r3
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	330c      	adds	r3, #12
 800bff8:	781b      	ldrb	r3, [r3, #0]
 800bffa:	b29a      	uxth	r2, r3
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	330d      	adds	r3, #13
 800c000:	781b      	ldrb	r3, [r3, #0]
 800c002:	b29b      	uxth	r3, r3
 800c004:	021b      	lsls	r3, r3, #8
 800c006:	b29b      	uxth	r3, r3
 800c008:	4313      	orrs	r3, r2
 800c00a:	b29a      	uxth	r2, r3
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	7b9a      	ldrb	r2, [r3, #14]
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	7bda      	ldrb	r2, [r3, #15]
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	7c1a      	ldrb	r2, [r3, #16]
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800c028:	68bb      	ldr	r3, [r7, #8]
 800c02a:	7c5a      	ldrb	r2, [r3, #17]
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	745a      	strb	r2, [r3, #17]
  }
}
 800c030:	bf00      	nop
 800c032:	3714      	adds	r7, #20
 800c034:	46bd      	mov	sp, r7
 800c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03a:	4770      	bx	lr

0800c03c <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b08a      	sub	sp, #40	; 0x28
 800c040:	af00      	add	r7, sp, #0
 800c042:	60f8      	str	r0, [r7, #12]
 800c044:	60b9      	str	r1, [r7, #8]
 800c046:	4613      	mov	r3, r2
 800c048:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c04e:	2300      	movs	r3, #0
 800c050:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800c054:	2300      	movs	r3, #0
 800c056:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800c05a:	68bb      	ldr	r3, [r7, #8]
 800c05c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	781a      	ldrb	r2, [r3, #0]
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	785a      	ldrb	r2, [r3, #1]
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	3302      	adds	r3, #2
 800c072:	781b      	ldrb	r3, [r3, #0]
 800c074:	b29a      	uxth	r2, r3
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	3303      	adds	r3, #3
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	b29b      	uxth	r3, r3
 800c07e:	021b      	lsls	r3, r3, #8
 800c080:	b29b      	uxth	r3, r3
 800c082:	4313      	orrs	r3, r2
 800c084:	b29a      	uxth	r2, r3
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	791a      	ldrb	r2, [r3, #4]
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	795a      	ldrb	r2, [r3, #5]
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	799a      	ldrb	r2, [r3, #6]
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	79da      	ldrb	r2, [r3, #7]
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	7a1a      	ldrb	r2, [r3, #8]
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c0b2:	88fb      	ldrh	r3, [r7, #6]
 800c0b4:	2b09      	cmp	r3, #9
 800c0b6:	d95f      	bls.n	800c178 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800c0b8:	2309      	movs	r3, #9
 800c0ba:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c0c0:	e051      	b.n	800c166 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c0c2:	f107 0316 	add.w	r3, r7, #22
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c0ca:	f000 f8e8 	bl	800c29e <USBH_GetNextDesc>
 800c0ce:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800c0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d2:	785b      	ldrb	r3, [r3, #1]
 800c0d4:	2b04      	cmp	r3, #4
 800c0d6:	d146      	bne.n	800c166 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800c0d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c0dc:	221a      	movs	r2, #26
 800c0de:	fb02 f303 	mul.w	r3, r2, r3
 800c0e2:	3308      	adds	r3, #8
 800c0e4:	68fa      	ldr	r2, [r7, #12]
 800c0e6:	4413      	add	r3, r2
 800c0e8:	3302      	adds	r3, #2
 800c0ea:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 800c0ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c0ee:	69f8      	ldr	r0, [r7, #28]
 800c0f0:	f000 f846 	bl	800c180 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c0fe:	e022      	b.n	800c146 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 800c100:	f107 0316 	add.w	r3, r7, #22
 800c104:	4619      	mov	r1, r3
 800c106:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c108:	f000 f8c9 	bl	800c29e <USBH_GetNextDesc>
 800c10c:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800c10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c110:	785b      	ldrb	r3, [r3, #1]
 800c112:	2b05      	cmp	r3, #5
 800c114:	d117      	bne.n	800c146 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c116:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c11a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800c11e:	3201      	adds	r2, #1
 800c120:	00d2      	lsls	r2, r2, #3
 800c122:	211a      	movs	r1, #26
 800c124:	fb01 f303 	mul.w	r3, r1, r3
 800c128:	4413      	add	r3, r2
 800c12a:	3308      	adds	r3, #8
 800c12c:	68fa      	ldr	r2, [r7, #12]
 800c12e:	4413      	add	r3, r2
 800c130:	3304      	adds	r3, #4
 800c132:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 800c134:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c136:	69b8      	ldr	r0, [r7, #24]
 800c138:	f000 f851 	bl	800c1de <USBH_ParseEPDesc>
            ep_ix++;
 800c13c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c140:	3301      	adds	r3, #1
 800c142:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c146:	69fb      	ldr	r3, [r7, #28]
 800c148:	791b      	ldrb	r3, [r3, #4]
 800c14a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800c14e:	429a      	cmp	r2, r3
 800c150:	d204      	bcs.n	800c15c <USBH_ParseCfgDesc+0x120>
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	885a      	ldrh	r2, [r3, #2]
 800c156:	8afb      	ldrh	r3, [r7, #22]
 800c158:	429a      	cmp	r2, r3
 800c15a:	d8d1      	bhi.n	800c100 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800c15c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c160:	3301      	adds	r3, #1
 800c162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c166:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c16a:	2b01      	cmp	r3, #1
 800c16c:	d804      	bhi.n	800c178 <USBH_ParseCfgDesc+0x13c>
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	885a      	ldrh	r2, [r3, #2]
 800c172:	8afb      	ldrh	r3, [r7, #22]
 800c174:	429a      	cmp	r2, r3
 800c176:	d8a4      	bhi.n	800c0c2 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800c178:	bf00      	nop
 800c17a:	3728      	adds	r7, #40	; 0x28
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}

0800c180 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 800c180:	b480      	push	{r7}
 800c182:	b083      	sub	sp, #12
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	781a      	ldrb	r2, [r3, #0]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	785a      	ldrb	r2, [r3, #1]
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	789a      	ldrb	r2, [r3, #2]
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	78da      	ldrb	r2, [r3, #3]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	791a      	ldrb	r2, [r3, #4]
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	795a      	ldrb	r2, [r3, #5]
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	799a      	ldrb	r2, [r3, #6]
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	79da      	ldrb	r2, [r3, #7]
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	7a1a      	ldrb	r2, [r3, #8]
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	721a      	strb	r2, [r3, #8]
}
 800c1d2:	bf00      	nop
 800c1d4:	370c      	adds	r7, #12
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1dc:	4770      	bx	lr

0800c1de <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 800c1de:	b480      	push	{r7}
 800c1e0:	b083      	sub	sp, #12
 800c1e2:	af00      	add	r7, sp, #0
 800c1e4:	6078      	str	r0, [r7, #4]
 800c1e6:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	781a      	ldrb	r2, [r3, #0]
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	785a      	ldrb	r2, [r3, #1]
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	789a      	ldrb	r2, [r3, #2]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	78da      	ldrb	r2, [r3, #3]
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	3304      	adds	r3, #4
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	b29a      	uxth	r2, r3
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	3305      	adds	r3, #5
 800c214:	781b      	ldrb	r3, [r3, #0]
 800c216:	b29b      	uxth	r3, r3
 800c218:	021b      	lsls	r3, r3, #8
 800c21a:	b29b      	uxth	r3, r3
 800c21c:	4313      	orrs	r3, r2
 800c21e:	b29a      	uxth	r2, r3
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	799a      	ldrb	r2, [r3, #6]
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	719a      	strb	r2, [r3, #6]
}
 800c22c:	bf00      	nop
 800c22e:	370c      	adds	r7, #12
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr

0800c238 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 800c238:	b480      	push	{r7}
 800c23a:	b087      	sub	sp, #28
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	60f8      	str	r0, [r7, #12]
 800c240:	60b9      	str	r1, [r7, #8]
 800c242:	4613      	mov	r3, r2
 800c244:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	3301      	adds	r3, #1
 800c24a:	781b      	ldrb	r3, [r3, #0]
 800c24c:	2b03      	cmp	r3, #3
 800c24e:	d120      	bne.n	800c292 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	781b      	ldrb	r3, [r3, #0]
 800c254:	1e9a      	subs	r2, r3, #2
 800c256:	88fb      	ldrh	r3, [r7, #6]
 800c258:	4293      	cmp	r3, r2
 800c25a:	bf28      	it	cs
 800c25c:	4613      	movcs	r3, r2
 800c25e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	3302      	adds	r3, #2
 800c264:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c266:	2300      	movs	r3, #0
 800c268:	82fb      	strh	r3, [r7, #22]
 800c26a:	e00b      	b.n	800c284 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c26c:	8afb      	ldrh	r3, [r7, #22]
 800c26e:	68fa      	ldr	r2, [r7, #12]
 800c270:	4413      	add	r3, r2
 800c272:	781a      	ldrb	r2, [r3, #0]
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	3301      	adds	r3, #1
 800c27c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c27e:	8afb      	ldrh	r3, [r7, #22]
 800c280:	3302      	adds	r3, #2
 800c282:	82fb      	strh	r3, [r7, #22]
 800c284:	8afa      	ldrh	r2, [r7, #22]
 800c286:	8abb      	ldrh	r3, [r7, #20]
 800c288:	429a      	cmp	r2, r3
 800c28a:	d3ef      	bcc.n	800c26c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	2200      	movs	r2, #0
 800c290:	701a      	strb	r2, [r3, #0]
  }
}
 800c292:	bf00      	nop
 800c294:	371c      	adds	r7, #28
 800c296:	46bd      	mov	sp, r7
 800c298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29c:	4770      	bx	lr

0800c29e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800c29e:	b480      	push	{r7}
 800c2a0:	b085      	sub	sp, #20
 800c2a2:	af00      	add	r7, sp, #0
 800c2a4:	6078      	str	r0, [r7, #4]
 800c2a6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	881a      	ldrh	r2, [r3, #0]
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	781b      	ldrb	r3, [r3, #0]
 800c2b0:	b29b      	uxth	r3, r3
 800c2b2:	4413      	add	r3, r2
 800c2b4:	b29a      	uxth	r2, r3
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	781b      	ldrb	r3, [r3, #0]
 800c2be:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	4413      	add	r3, r2
 800c2c4:	60fb      	str	r3, [r7, #12]

  return(pnext);
 800c2c6:	68fb      	ldr	r3, [r7, #12]
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3714      	adds	r7, #20
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d2:	4770      	bx	lr

0800c2d4 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b086      	sub	sp, #24
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	60f8      	str	r0, [r7, #12]
 800c2dc:	60b9      	str	r1, [r7, #8]
 800c2de:	4613      	mov	r3, r2
 800c2e0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	789b      	ldrb	r3, [r3, #2]
 800c2ea:	2b01      	cmp	r3, #1
 800c2ec:	d002      	beq.n	800c2f4 <USBH_CtlReq+0x20>
 800c2ee:	2b02      	cmp	r3, #2
 800c2f0:	d01d      	beq.n	800c32e <USBH_CtlReq+0x5a>
      }
    }
    break;

  default:
    break;
 800c2f2:	e042      	b.n	800c37a <USBH_CtlReq+0xa6>
    phost->Control.buff = buff;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	68ba      	ldr	r2, [r7, #8]
 800c2f8:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	88fa      	ldrh	r2, [r7, #6]
 800c2fe:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	2201      	movs	r2, #1
 800c304:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	2202      	movs	r2, #2
 800c30a:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 800c30c:	2301      	movs	r3, #1
 800c30e:	75fb      	strb	r3, [r7, #23]
    phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	2203      	movs	r2, #3
 800c314:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c324:	2200      	movs	r2, #0
 800c326:	4619      	mov	r1, r3
 800c328:	f003 fd32 	bl	800fd90 <osMessagePut>
    break;
 800c32c:	e025      	b.n	800c37a <USBH_CtlReq+0xa6>
    status = USBH_HandleControl(phost);
 800c32e:	68f8      	ldr	r0, [r7, #12]
 800c330:	f000 f828 	bl	800c384 <USBH_HandleControl>
 800c334:	4603      	mov	r3, r0
 800c336:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 800c338:	7dfb      	ldrb	r3, [r7, #23]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d108      	bne.n	800c350 <USBH_CtlReq+0x7c>
      phost->RequestState = CMD_SEND;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	2201      	movs	r2, #1
 800c342:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2200      	movs	r2, #0
 800c348:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800c34a:	2300      	movs	r3, #0
 800c34c:	75fb      	strb	r3, [r7, #23]
    break;
 800c34e:	e013      	b.n	800c378 <USBH_CtlReq+0xa4>
    else if (status == USBH_NOT_SUPPORTED)
 800c350:	7dfb      	ldrb	r3, [r7, #23]
 800c352:	2b03      	cmp	r3, #3
 800c354:	d108      	bne.n	800c368 <USBH_CtlReq+0x94>
      phost->RequestState = CMD_SEND;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	2201      	movs	r2, #1
 800c35a:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	2200      	movs	r2, #0
 800c360:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800c362:	2303      	movs	r3, #3
 800c364:	75fb      	strb	r3, [r7, #23]
    break;
 800c366:	e007      	b.n	800c378 <USBH_CtlReq+0xa4>
      if (status == USBH_FAIL)
 800c368:	7dfb      	ldrb	r3, [r7, #23]
 800c36a:	2b02      	cmp	r3, #2
 800c36c:	d104      	bne.n	800c378 <USBH_CtlReq+0xa4>
        phost->RequestState = CMD_SEND;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	2201      	movs	r2, #1
 800c372:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800c374:	2302      	movs	r3, #2
 800c376:	75fb      	strb	r3, [r7, #23]
    break;
 800c378:	bf00      	nop
  }
  return status;
 800c37a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3718      	adds	r7, #24
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}

0800c384 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b086      	sub	sp, #24
 800c388:	af02      	add	r7, sp, #8
 800c38a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c38c:	2301      	movs	r3, #1
 800c38e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c390:	2300      	movs	r3, #0
 800c392:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	7e1b      	ldrb	r3, [r3, #24]
 800c398:	3b01      	subs	r3, #1
 800c39a:	2b0a      	cmp	r3, #10
 800c39c:	f200 821f 	bhi.w	800c7de <USBH_HandleControl+0x45a>
 800c3a0:	a201      	add	r2, pc, #4	; (adr r2, 800c3a8 <USBH_HandleControl+0x24>)
 800c3a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3a6:	bf00      	nop
 800c3a8:	0800c3d5 	.word	0x0800c3d5
 800c3ac:	0800c3ef 	.word	0x0800c3ef
 800c3b0:	0800c491 	.word	0x0800c491
 800c3b4:	0800c4b7 	.word	0x0800c4b7
 800c3b8:	0800c543 	.word	0x0800c543
 800c3bc:	0800c56f 	.word	0x0800c56f
 800c3c0:	0800c631 	.word	0x0800c631
 800c3c4:	0800c653 	.word	0x0800c653
 800c3c8:	0800c6e5 	.word	0x0800c6e5
 800c3cc:	0800c70d 	.word	0x0800c70d
 800c3d0:	0800c79f 	.word	0x0800c79f
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f103 0110 	add.w	r1, r3, #16
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	795b      	ldrb	r3, [r3, #5]
 800c3de:	461a      	mov	r2, r3
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f000 fa0d 	bl	800c800 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2202      	movs	r2, #2
 800c3ea:	761a      	strb	r2, [r3, #24]
    break;
 800c3ec:	e202      	b.n	800c7f4 <USBH_HandleControl+0x470>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	795b      	ldrb	r3, [r3, #5]
 800c3f2:	4619      	mov	r1, r3
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f009 fae7 	bl	80159c8 <USBH_LL_GetURBState>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800c3fe:	7bbb      	ldrb	r3, [r7, #14]
 800c400:	2b01      	cmp	r3, #1
 800c402:	d12c      	bne.n	800c45e <USBH_HandleControl+0xda>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	7c1b      	ldrb	r3, [r3, #16]
 800c408:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c40c:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	8adb      	ldrh	r3, [r3, #22]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d00a      	beq.n	800c42c <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 800c416:	7b7b      	ldrb	r3, [r7, #13]
 800c418:	2b80      	cmp	r3, #128	; 0x80
 800c41a:	d103      	bne.n	800c424 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2203      	movs	r2, #3
 800c420:	761a      	strb	r2, [r3, #24]
 800c422:	e00d      	b.n	800c440 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2205      	movs	r2, #5
 800c428:	761a      	strb	r2, [r3, #24]
 800c42a:	e009      	b.n	800c440 <USBH_HandleControl+0xbc>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 800c42c:	7b7b      	ldrb	r3, [r7, #13]
 800c42e:	2b80      	cmp	r3, #128	; 0x80
 800c430:	d103      	bne.n	800c43a <USBH_HandleControl+0xb6>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2209      	movs	r2, #9
 800c436:	761a      	strb	r2, [r3, #24]
 800c438:	e002      	b.n	800c440 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2207      	movs	r2, #7
 800c43e:	761a      	strb	r2, [r3, #24]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2203      	movs	r2, #3
 800c444:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c454:	2200      	movs	r2, #0
 800c456:	4619      	mov	r1, r3
 800c458:	f003 fc9a 	bl	800fd90 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800c45c:	e1c1      	b.n	800c7e2 <USBH_HandleControl+0x45e>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c45e:	7bbb      	ldrb	r3, [r7, #14]
 800c460:	2b04      	cmp	r3, #4
 800c462:	d003      	beq.n	800c46c <USBH_HandleControl+0xe8>
 800c464:	7bbb      	ldrb	r3, [r7, #14]
 800c466:	2b02      	cmp	r3, #2
 800c468:	f040 81bb 	bne.w	800c7e2 <USBH_HandleControl+0x45e>
        phost->Control.state = CTRL_ERROR;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	220b      	movs	r2, #11
 800c470:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2203      	movs	r2, #3
 800c476:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c486:	2200      	movs	r2, #0
 800c488:	4619      	mov	r1, r3
 800c48a:	f003 fc81 	bl	800fd90 <osMessagePut>
    break;
 800c48e:	e1a8      	b.n	800c7e2 <USBH_HandleControl+0x45e>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800c496:	b29a      	uxth	r2, r3
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6899      	ldr	r1, [r3, #8]
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	899a      	ldrh	r2, [r3, #12]
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	791b      	ldrb	r3, [r3, #4]
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f000 f9e8 	bl	800c87e <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2204      	movs	r2, #4
 800c4b2:	761a      	strb	r2, [r3, #24]
    break;
 800c4b4:	e19e      	b.n	800c7f4 <USBH_HandleControl+0x470>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	791b      	ldrb	r3, [r3, #4]
 800c4ba:	4619      	mov	r1, r3
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f009 fa83 	bl	80159c8 <USBH_LL_GetURBState>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800c4c6:	7bbb      	ldrb	r3, [r7, #14]
 800c4c8:	2b01      	cmp	r3, #1
 800c4ca:	d110      	bne.n	800c4ee <USBH_HandleControl+0x16a>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2209      	movs	r2, #9
 800c4d0:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2203      	movs	r2, #3
 800c4d6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	4619      	mov	r1, r3
 800c4ea:	f003 fc51 	bl	800fd90 <osMessagePut>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800c4ee:	7bbb      	ldrb	r3, [r7, #14]
 800c4f0:	2b05      	cmp	r3, #5
 800c4f2:	d110      	bne.n	800c516 <USBH_HandleControl+0x192>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 800c4f4:	2303      	movs	r3, #3
 800c4f6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2203      	movs	r2, #3
 800c4fc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c50c:	2200      	movs	r2, #0
 800c50e:	4619      	mov	r1, r3
 800c510:	f003 fc3e 	bl	800fd90 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800c514:	e167      	b.n	800c7e6 <USBH_HandleControl+0x462>
      if (URB_Status == USBH_URB_ERROR)
 800c516:	7bbb      	ldrb	r3, [r7, #14]
 800c518:	2b04      	cmp	r3, #4
 800c51a:	f040 8164 	bne.w	800c7e6 <USBH_HandleControl+0x462>
        phost->Control.state = CTRL_ERROR;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	220b      	movs	r2, #11
 800c522:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2203      	movs	r2, #3
 800c528:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c538:	2200      	movs	r2, #0
 800c53a:	4619      	mov	r1, r3
 800c53c:	f003 fc28 	bl	800fd90 <osMessagePut>
    break;
 800c540:	e151      	b.n	800c7e6 <USBH_HandleControl+0x462>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6899      	ldr	r1, [r3, #8]
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	899a      	ldrh	r2, [r3, #12]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	7958      	ldrb	r0, [r3, #5]
 800c54e:	2301      	movs	r3, #1
 800c550:	9300      	str	r3, [sp, #0]
 800c552:	4603      	mov	r3, r0
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f000 f96d 	bl	800c834 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800c560:	b29a      	uxth	r2, r3
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2206      	movs	r2, #6
 800c56a:	761a      	strb	r2, [r3, #24]
    break;
 800c56c:	e142      	b.n	800c7f4 <USBH_HandleControl+0x470>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	795b      	ldrb	r3, [r3, #5]
 800c572:	4619      	mov	r1, r3
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f009 fa27 	bl	80159c8 <USBH_LL_GetURBState>
 800c57a:	4603      	mov	r3, r0
 800c57c:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 800c57e:	7bbb      	ldrb	r3, [r7, #14]
 800c580:	2b01      	cmp	r3, #1
 800c582:	d111      	bne.n	800c5a8 <USBH_HandleControl+0x224>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2207      	movs	r2, #7
 800c588:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2203      	movs	r2, #3
 800c58e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c59e:	2200      	movs	r2, #0
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	f003 fbf5 	bl	800fd90 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800c5a6:	e120      	b.n	800c7ea <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_STALL)
 800c5a8:	7bbb      	ldrb	r3, [r7, #14]
 800c5aa:	2b05      	cmp	r3, #5
 800c5ac:	d113      	bne.n	800c5d6 <USBH_HandleControl+0x252>
      phost->Control.state = CTRL_STALLED;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	220c      	movs	r2, #12
 800c5b2:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800c5b4:	2303      	movs	r3, #3
 800c5b6:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2203      	movs	r2, #3
 800c5bc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	4619      	mov	r1, r3
 800c5d0:	f003 fbde 	bl	800fd90 <osMessagePut>
    break;
 800c5d4:	e109      	b.n	800c7ea <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800c5d6:	7bbb      	ldrb	r3, [r7, #14]
 800c5d8:	2b02      	cmp	r3, #2
 800c5da:	d111      	bne.n	800c600 <USBH_HandleControl+0x27c>
      phost->Control.state = CTRL_DATA_OUT;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2205      	movs	r2, #5
 800c5e0:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2203      	movs	r2, #3
 800c5e6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	4619      	mov	r1, r3
 800c5fa:	f003 fbc9 	bl	800fd90 <osMessagePut>
    break;
 800c5fe:	e0f4      	b.n	800c7ea <USBH_HandleControl+0x466>
      if (URB_Status == USBH_URB_ERROR)
 800c600:	7bbb      	ldrb	r3, [r7, #14]
 800c602:	2b04      	cmp	r3, #4
 800c604:	f040 80f1 	bne.w	800c7ea <USBH_HandleControl+0x466>
        phost->Control.state = CTRL_ERROR;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	220b      	movs	r2, #11
 800c60c:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 800c60e:	2302      	movs	r3, #2
 800c610:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2203      	movs	r2, #3
 800c616:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c626:	2200      	movs	r2, #0
 800c628:	4619      	mov	r1, r3
 800c62a:	f003 fbb1 	bl	800fd90 <osMessagePut>
    break;
 800c62e:	e0dc      	b.n	800c7ea <USBH_HandleControl+0x466>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	791b      	ldrb	r3, [r3, #4]
 800c634:	2200      	movs	r2, #0
 800c636:	2100      	movs	r1, #0
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f000 f920 	bl	800c87e <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800c644:	b29a      	uxth	r2, r3
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2208      	movs	r2, #8
 800c64e:	761a      	strb	r2, [r3, #24]

    break;
 800c650:	e0d0      	b.n	800c7f4 <USBH_HandleControl+0x470>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	791b      	ldrb	r3, [r3, #4]
 800c656:	4619      	mov	r1, r3
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f009 f9b5 	bl	80159c8 <USBH_LL_GetURBState>
 800c65e:	4603      	mov	r3, r0
 800c660:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 800c662:	7bbb      	ldrb	r3, [r7, #14]
 800c664:	2b01      	cmp	r3, #1
 800c666:	d113      	bne.n	800c690 <USBH_HandleControl+0x30c>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	220d      	movs	r2, #13
 800c66c:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800c66e:	2300      	movs	r3, #0
 800c670:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2203      	movs	r2, #3
 800c676:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c686:	2200      	movs	r2, #0
 800c688:	4619      	mov	r1, r3
 800c68a:	f003 fb81 	bl	800fd90 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800c68e:	e0ae      	b.n	800c7ee <USBH_HandleControl+0x46a>
    else if (URB_Status == USBH_URB_ERROR)
 800c690:	7bbb      	ldrb	r3, [r7, #14]
 800c692:	2b04      	cmp	r3, #4
 800c694:	d111      	bne.n	800c6ba <USBH_HandleControl+0x336>
      phost->Control.state = CTRL_ERROR;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	220b      	movs	r2, #11
 800c69a:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2203      	movs	r2, #3
 800c6a0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	4619      	mov	r1, r3
 800c6b4:	f003 fb6c 	bl	800fd90 <osMessagePut>
    break;
 800c6b8:	e099      	b.n	800c7ee <USBH_HandleControl+0x46a>
      if(URB_Status == USBH_URB_STALL)
 800c6ba:	7bbb      	ldrb	r3, [r7, #14]
 800c6bc:	2b05      	cmp	r3, #5
 800c6be:	f040 8096 	bne.w	800c7ee <USBH_HandleControl+0x46a>
        status = USBH_NOT_SUPPORTED;
 800c6c2:	2303      	movs	r3, #3
 800c6c4:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2203      	movs	r2, #3
 800c6ca:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c6da:	2200      	movs	r2, #0
 800c6dc:	4619      	mov	r1, r3
 800c6de:	f003 fb57 	bl	800fd90 <osMessagePut>
    break;
 800c6e2:	e084      	b.n	800c7ee <USBH_HandleControl+0x46a>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	795a      	ldrb	r2, [r3, #5]
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	9300      	str	r3, [sp, #0]
 800c6ec:	4613      	mov	r3, r2
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	2100      	movs	r1, #0
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f000 f89e 	bl	800c834 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800c6fe:	b29a      	uxth	r2, r3
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	220a      	movs	r2, #10
 800c708:	761a      	strb	r2, [r3, #24]
    break;
 800c70a:	e073      	b.n	800c7f4 <USBH_HandleControl+0x470>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	795b      	ldrb	r3, [r3, #5]
 800c710:	4619      	mov	r1, r3
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f009 f958 	bl	80159c8 <USBH_LL_GetURBState>
 800c718:	4603      	mov	r3, r0
 800c71a:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800c71c:	7bbb      	ldrb	r3, [r7, #14]
 800c71e:	2b01      	cmp	r3, #1
 800c720:	d113      	bne.n	800c74a <USBH_HandleControl+0x3c6>
    {
      status = USBH_OK;
 800c722:	2300      	movs	r3, #0
 800c724:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	220d      	movs	r2, #13
 800c72a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2203      	movs	r2, #3
 800c730:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c740:	2200      	movs	r2, #0
 800c742:	4619      	mov	r1, r3
 800c744:	f003 fb24 	bl	800fd90 <osMessagePut>
#endif
#endif
      }

    }
    break;
 800c748:	e053      	b.n	800c7f2 <USBH_HandleControl+0x46e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800c74a:	7bbb      	ldrb	r3, [r7, #14]
 800c74c:	2b02      	cmp	r3, #2
 800c74e:	d111      	bne.n	800c774 <USBH_HandleControl+0x3f0>
      phost->Control.state = CTRL_STATUS_OUT;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2209      	movs	r2, #9
 800c754:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2203      	movs	r2, #3
 800c75a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c76a:	2200      	movs	r2, #0
 800c76c:	4619      	mov	r1, r3
 800c76e:	f003 fb0f 	bl	800fd90 <osMessagePut>
    break;
 800c772:	e03e      	b.n	800c7f2 <USBH_HandleControl+0x46e>
      if (URB_Status == USBH_URB_ERROR)
 800c774:	7bbb      	ldrb	r3, [r7, #14]
 800c776:	2b04      	cmp	r3, #4
 800c778:	d13b      	bne.n	800c7f2 <USBH_HandleControl+0x46e>
        phost->Control.state = CTRL_ERROR;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	220b      	movs	r2, #11
 800c77e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2203      	movs	r2, #3
 800c784:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c794:	2200      	movs	r2, #0
 800c796:	4619      	mov	r1, r3
 800c798:	f003 fafa 	bl	800fd90 <osMessagePut>
    break;
 800c79c:	e029      	b.n	800c7f2 <USBH_HandleControl+0x46e>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	7e5b      	ldrb	r3, [r3, #25]
 800c7a2:	3301      	adds	r3, #1
 800c7a4:	b2da      	uxtb	r2, r3
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	765a      	strb	r2, [r3, #25]
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	7e5b      	ldrb	r3, [r3, #25]
 800c7ae:	2b02      	cmp	r3, #2
 800c7b0:	d809      	bhi.n	800c7c6 <USBH_HandleControl+0x442>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f009 f81b 	bl	80157ee <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2201      	movs	r2, #1
 800c7c2:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 800c7c4:	e016      	b.n	800c7f4 <USBH_HandleControl+0x470>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c7cc:	2106      	movs	r1, #6
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 800c7d8:	2302      	movs	r3, #2
 800c7da:	73fb      	strb	r3, [r7, #15]
    break;
 800c7dc:	e00a      	b.n	800c7f4 <USBH_HandleControl+0x470>

  default:
    break;
 800c7de:	bf00      	nop
 800c7e0:	e008      	b.n	800c7f4 <USBH_HandleControl+0x470>
    break;
 800c7e2:	bf00      	nop
 800c7e4:	e006      	b.n	800c7f4 <USBH_HandleControl+0x470>
    break;
 800c7e6:	bf00      	nop
 800c7e8:	e004      	b.n	800c7f4 <USBH_HandleControl+0x470>
    break;
 800c7ea:	bf00      	nop
 800c7ec:	e002      	b.n	800c7f4 <USBH_HandleControl+0x470>
    break;
 800c7ee:	bf00      	nop
 800c7f0:	e000      	b.n	800c7f4 <USBH_HandleControl+0x470>
    break;
 800c7f2:	bf00      	nop
  }
  return status;
 800c7f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	3710      	adds	r7, #16
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}
 800c7fe:	bf00      	nop

0800c800 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b088      	sub	sp, #32
 800c804:	af04      	add	r7, sp, #16
 800c806:	60f8      	str	r0, [r7, #12]
 800c808:	60b9      	str	r1, [r7, #8]
 800c80a:	4613      	mov	r3, r2
 800c80c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800c80e:	79f9      	ldrb	r1, [r7, #7]
 800c810:	2300      	movs	r3, #0
 800c812:	9303      	str	r3, [sp, #12]
 800c814:	2308      	movs	r3, #8
 800c816:	9302      	str	r3, [sp, #8]
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	9301      	str	r3, [sp, #4]
 800c81c:	2300      	movs	r3, #0
 800c81e:	9300      	str	r3, [sp, #0]
 800c820:	2300      	movs	r3, #0
 800c822:	2200      	movs	r2, #0
 800c824:	68f8      	ldr	r0, [r7, #12]
 800c826:	f009 f89e 	bl	8015966 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800c82a:	2300      	movs	r3, #0
}
 800c82c:	4618      	mov	r0, r3
 800c82e:	3710      	adds	r7, #16
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}

0800c834 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b088      	sub	sp, #32
 800c838:	af04      	add	r7, sp, #16
 800c83a:	60f8      	str	r0, [r7, #12]
 800c83c:	60b9      	str	r1, [r7, #8]
 800c83e:	4611      	mov	r1, r2
 800c840:	461a      	mov	r2, r3
 800c842:	460b      	mov	r3, r1
 800c844:	80fb      	strh	r3, [r7, #6]
 800c846:	4613      	mov	r3, r2
 800c848:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c850:	2b00      	cmp	r3, #0
 800c852:	d001      	beq.n	800c858 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c854:	2300      	movs	r3, #0
 800c856:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800c858:	7979      	ldrb	r1, [r7, #5]
 800c85a:	7e3b      	ldrb	r3, [r7, #24]
 800c85c:	9303      	str	r3, [sp, #12]
 800c85e:	88fb      	ldrh	r3, [r7, #6]
 800c860:	9302      	str	r3, [sp, #8]
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	9301      	str	r3, [sp, #4]
 800c866:	2301      	movs	r3, #1
 800c868:	9300      	str	r3, [sp, #0]
 800c86a:	2300      	movs	r3, #0
 800c86c:	2200      	movs	r2, #0
 800c86e:	68f8      	ldr	r0, [r7, #12]
 800c870:	f009 f879 	bl	8015966 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c874:	2300      	movs	r3, #0
}
 800c876:	4618      	mov	r0, r3
 800c878:	3710      	adds	r7, #16
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}

0800c87e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800c87e:	b580      	push	{r7, lr}
 800c880:	b088      	sub	sp, #32
 800c882:	af04      	add	r7, sp, #16
 800c884:	60f8      	str	r0, [r7, #12]
 800c886:	60b9      	str	r1, [r7, #8]
 800c888:	4611      	mov	r1, r2
 800c88a:	461a      	mov	r2, r3
 800c88c:	460b      	mov	r3, r1
 800c88e:	80fb      	strh	r3, [r7, #6]
 800c890:	4613      	mov	r3, r2
 800c892:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800c894:	7979      	ldrb	r1, [r7, #5]
 800c896:	2300      	movs	r3, #0
 800c898:	9303      	str	r3, [sp, #12]
 800c89a:	88fb      	ldrh	r3, [r7, #6]
 800c89c:	9302      	str	r3, [sp, #8]
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	9301      	str	r3, [sp, #4]
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	9300      	str	r3, [sp, #0]
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	68f8      	ldr	r0, [r7, #12]
 800c8ac:	f009 f85b 	bl	8015966 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c8b0:	2300      	movs	r3, #0

}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3710      	adds	r7, #16
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}

0800c8ba <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 800c8ba:	b580      	push	{r7, lr}
 800c8bc:	b088      	sub	sp, #32
 800c8be:	af04      	add	r7, sp, #16
 800c8c0:	60f8      	str	r0, [r7, #12]
 800c8c2:	60b9      	str	r1, [r7, #8]
 800c8c4:	4611      	mov	r1, r2
 800c8c6:	461a      	mov	r2, r3
 800c8c8:	460b      	mov	r3, r1
 800c8ca:	80fb      	strh	r3, [r7, #6]
 800c8cc:	4613      	mov	r3, r2
 800c8ce:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d001      	beq.n	800c8de <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800c8de:	7979      	ldrb	r1, [r7, #5]
 800c8e0:	7e3b      	ldrb	r3, [r7, #24]
 800c8e2:	9303      	str	r3, [sp, #12]
 800c8e4:	88fb      	ldrh	r3, [r7, #6]
 800c8e6:	9302      	str	r3, [sp, #8]
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	9301      	str	r3, [sp, #4]
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	9300      	str	r3, [sp, #0]
 800c8f0:	2302      	movs	r3, #2
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	68f8      	ldr	r0, [r7, #12]
 800c8f6:	f009 f836 	bl	8015966 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c8fa:	2300      	movs	r3, #0
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3710      	adds	r7, #16
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}

0800c904 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b088      	sub	sp, #32
 800c908:	af04      	add	r7, sp, #16
 800c90a:	60f8      	str	r0, [r7, #12]
 800c90c:	60b9      	str	r1, [r7, #8]
 800c90e:	4611      	mov	r1, r2
 800c910:	461a      	mov	r2, r3
 800c912:	460b      	mov	r3, r1
 800c914:	80fb      	strh	r3, [r7, #6]
 800c916:	4613      	mov	r3, r2
 800c918:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800c91a:	7979      	ldrb	r1, [r7, #5]
 800c91c:	2300      	movs	r3, #0
 800c91e:	9303      	str	r3, [sp, #12]
 800c920:	88fb      	ldrh	r3, [r7, #6]
 800c922:	9302      	str	r3, [sp, #8]
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	9301      	str	r3, [sp, #4]
 800c928:	2301      	movs	r3, #1
 800c92a:	9300      	str	r3, [sp, #0]
 800c92c:	2302      	movs	r3, #2
 800c92e:	2201      	movs	r2, #1
 800c930:	68f8      	ldr	r0, [r7, #12]
 800c932:	f009 f818 	bl	8015966 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c936:	2300      	movs	r3, #0
}
 800c938:	4618      	mov	r0, r3
 800c93a:	3710      	adds	r7, #16
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}

0800c940 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b086      	sub	sp, #24
 800c944:	af04      	add	r7, sp, #16
 800c946:	6078      	str	r0, [r7, #4]
 800c948:	4608      	mov	r0, r1
 800c94a:	4611      	mov	r1, r2
 800c94c:	461a      	mov	r2, r3
 800c94e:	4603      	mov	r3, r0
 800c950:	70fb      	strb	r3, [r7, #3]
 800c952:	460b      	mov	r3, r1
 800c954:	70bb      	strb	r3, [r7, #2]
 800c956:	4613      	mov	r3, r2
 800c958:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800c95a:	7878      	ldrb	r0, [r7, #1]
 800c95c:	78ba      	ldrb	r2, [r7, #2]
 800c95e:	78f9      	ldrb	r1, [r7, #3]
 800c960:	8b3b      	ldrh	r3, [r7, #24]
 800c962:	9302      	str	r3, [sp, #8]
 800c964:	7d3b      	ldrb	r3, [r7, #20]
 800c966:	9301      	str	r3, [sp, #4]
 800c968:	7c3b      	ldrb	r3, [r7, #16]
 800c96a:	9300      	str	r3, [sp, #0]
 800c96c:	4603      	mov	r3, r0
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f008 ffab 	bl	80158ca <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 800c974:	2300      	movs	r3, #0

}
 800c976:	4618      	mov	r0, r3
 800c978:	3708      	adds	r7, #8
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}

0800c97e <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800c97e:	b580      	push	{r7, lr}
 800c980:	b082      	sub	sp, #8
 800c982:	af00      	add	r7, sp, #0
 800c984:	6078      	str	r0, [r7, #4]
 800c986:	460b      	mov	r3, r1
 800c988:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 800c98a:	78fb      	ldrb	r3, [r7, #3]
 800c98c:	4619      	mov	r1, r3
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f008 ffca 	bl	8015928 <USBH_LL_ClosePipe>

  return USBH_OK;
 800c994:	2300      	movs	r3, #0

}
 800c996:	4618      	mov	r0, r3
 800c998:	3708      	adds	r7, #8
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}

0800c99e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c99e:	b580      	push	{r7, lr}
 800c9a0:	b084      	sub	sp, #16
 800c9a2:	af00      	add	r7, sp, #0
 800c9a4:	6078      	str	r0, [r7, #4]
 800c9a6:	460b      	mov	r3, r1
 800c9a8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f000 f831 	bl	800ca12 <USBH_GetFreePipe>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c9b4:	89fb      	ldrh	r3, [r7, #14]
 800c9b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d007      	beq.n	800c9ce <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800c9be:	78fb      	ldrb	r3, [r7, #3]
 800c9c0:	89fa      	ldrh	r2, [r7, #14]
 800c9c2:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	32e0      	adds	r2, #224	; 0xe0
 800c9ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 800c9ce:	89fb      	ldrh	r3, [r7, #14]
 800c9d0:	b2db      	uxtb	r3, r3
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3710      	adds	r7, #16
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}

0800c9da <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c9da:	b480      	push	{r7}
 800c9dc:	b083      	sub	sp, #12
 800c9de:	af00      	add	r7, sp, #0
 800c9e0:	6078      	str	r0, [r7, #4]
 800c9e2:	460b      	mov	r3, r1
 800c9e4:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 800c9e6:	78fb      	ldrb	r3, [r7, #3]
 800c9e8:	2b0a      	cmp	r3, #10
 800c9ea:	d80b      	bhi.n	800ca04 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 800c9ec:	78fa      	ldrb	r2, [r7, #3]
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	32e0      	adds	r2, #224	; 0xe0
 800c9f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9f6:	78fa      	ldrb	r2, [r7, #3]
 800c9f8:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	32e0      	adds	r2, #224	; 0xe0
 800ca00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 800ca04:	2300      	movs	r3, #0
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	370c      	adds	r7, #12
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca10:	4770      	bx	lr

0800ca12 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 800ca12:	b480      	push	{r7}
 800ca14:	b085      	sub	sp, #20
 800ca16:	af00      	add	r7, sp, #0
 800ca18:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800ca1e:	2300      	movs	r3, #0
 800ca20:	73fb      	strb	r3, [r7, #15]
 800ca22:	e00e      	b.n	800ca42 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ca24:	7bfa      	ldrb	r2, [r7, #15]
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	32e0      	adds	r2, #224	; 0xe0
 800ca2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d102      	bne.n	800ca3c <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 800ca36:	7bfb      	ldrb	r3, [r7, #15]
 800ca38:	b29b      	uxth	r3, r3
 800ca3a:	e007      	b.n	800ca4c <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800ca3c:	7bfb      	ldrb	r3, [r7, #15]
 800ca3e:	3301      	adds	r3, #1
 800ca40:	73fb      	strb	r3, [r7, #15]
 800ca42:	7bfb      	ldrb	r3, [r7, #15]
 800ca44:	2b0a      	cmp	r3, #10
 800ca46:	d9ed      	bls.n	800ca24 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 800ca48:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3714      	adds	r7, #20
 800ca50:	46bd      	mov	sp, r7
 800ca52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca56:	4770      	bx	lr

0800ca58 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b084      	sub	sp, #16
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	4603      	mov	r3, r0
 800ca60:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ca62:	79fb      	ldrb	r3, [r7, #7]
 800ca64:	4a08      	ldr	r2, [pc, #32]	; (800ca88 <disk_status+0x30>)
 800ca66:	009b      	lsls	r3, r3, #2
 800ca68:	4413      	add	r3, r2
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	685b      	ldr	r3, [r3, #4]
 800ca6e:	79fa      	ldrb	r2, [r7, #7]
 800ca70:	4905      	ldr	r1, [pc, #20]	; (800ca88 <disk_status+0x30>)
 800ca72:	440a      	add	r2, r1
 800ca74:	7a12      	ldrb	r2, [r2, #8]
 800ca76:	4610      	mov	r0, r2
 800ca78:	4798      	blx	r3
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ca7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3710      	adds	r7, #16
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}
 800ca88:	200000dc 	.word	0x200000dc

0800ca8c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b084      	sub	sp, #16
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	4603      	mov	r3, r0
 800ca94:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ca96:	2300      	movs	r3, #0
 800ca98:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ca9a:	79fb      	ldrb	r3, [r7, #7]
 800ca9c:	4a0d      	ldr	r2, [pc, #52]	; (800cad4 <disk_initialize+0x48>)
 800ca9e:	5cd3      	ldrb	r3, [r2, r3]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d111      	bne.n	800cac8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800caa4:	79fb      	ldrb	r3, [r7, #7]
 800caa6:	4a0b      	ldr	r2, [pc, #44]	; (800cad4 <disk_initialize+0x48>)
 800caa8:	2101      	movs	r1, #1
 800caaa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800caac:	79fb      	ldrb	r3, [r7, #7]
 800caae:	4a09      	ldr	r2, [pc, #36]	; (800cad4 <disk_initialize+0x48>)
 800cab0:	009b      	lsls	r3, r3, #2
 800cab2:	4413      	add	r3, r2
 800cab4:	685b      	ldr	r3, [r3, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	79fa      	ldrb	r2, [r7, #7]
 800caba:	4906      	ldr	r1, [pc, #24]	; (800cad4 <disk_initialize+0x48>)
 800cabc:	440a      	add	r2, r1
 800cabe:	7a12      	ldrb	r2, [r2, #8]
 800cac0:	4610      	mov	r0, r2
 800cac2:	4798      	blx	r3
 800cac4:	4603      	mov	r3, r0
 800cac6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800cac8:	7bfb      	ldrb	r3, [r7, #15]
}
 800caca:	4618      	mov	r0, r3
 800cacc:	3710      	adds	r7, #16
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}
 800cad2:	bf00      	nop
 800cad4:	200000dc 	.word	0x200000dc

0800cad8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cad8:	b590      	push	{r4, r7, lr}
 800cada:	b087      	sub	sp, #28
 800cadc:	af00      	add	r7, sp, #0
 800cade:	60b9      	str	r1, [r7, #8]
 800cae0:	607a      	str	r2, [r7, #4]
 800cae2:	603b      	str	r3, [r7, #0]
 800cae4:	4603      	mov	r3, r0
 800cae6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cae8:	7bfb      	ldrb	r3, [r7, #15]
 800caea:	4a0a      	ldr	r2, [pc, #40]	; (800cb14 <disk_read+0x3c>)
 800caec:	009b      	lsls	r3, r3, #2
 800caee:	4413      	add	r3, r2
 800caf0:	685b      	ldr	r3, [r3, #4]
 800caf2:	689c      	ldr	r4, [r3, #8]
 800caf4:	7bfb      	ldrb	r3, [r7, #15]
 800caf6:	4a07      	ldr	r2, [pc, #28]	; (800cb14 <disk_read+0x3c>)
 800caf8:	4413      	add	r3, r2
 800cafa:	7a18      	ldrb	r0, [r3, #8]
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	687a      	ldr	r2, [r7, #4]
 800cb00:	68b9      	ldr	r1, [r7, #8]
 800cb02:	47a0      	blx	r4
 800cb04:	4603      	mov	r3, r0
 800cb06:	75fb      	strb	r3, [r7, #23]
  return res;
 800cb08:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	371c      	adds	r7, #28
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd90      	pop	{r4, r7, pc}
 800cb12:	bf00      	nop
 800cb14:	200000dc 	.word	0x200000dc

0800cb18 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cb18:	b590      	push	{r4, r7, lr}
 800cb1a:	b087      	sub	sp, #28
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	60b9      	str	r1, [r7, #8]
 800cb20:	607a      	str	r2, [r7, #4]
 800cb22:	603b      	str	r3, [r7, #0]
 800cb24:	4603      	mov	r3, r0
 800cb26:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cb28:	7bfb      	ldrb	r3, [r7, #15]
 800cb2a:	4a0a      	ldr	r2, [pc, #40]	; (800cb54 <disk_write+0x3c>)
 800cb2c:	009b      	lsls	r3, r3, #2
 800cb2e:	4413      	add	r3, r2
 800cb30:	685b      	ldr	r3, [r3, #4]
 800cb32:	68dc      	ldr	r4, [r3, #12]
 800cb34:	7bfb      	ldrb	r3, [r7, #15]
 800cb36:	4a07      	ldr	r2, [pc, #28]	; (800cb54 <disk_write+0x3c>)
 800cb38:	4413      	add	r3, r2
 800cb3a:	7a18      	ldrb	r0, [r3, #8]
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	687a      	ldr	r2, [r7, #4]
 800cb40:	68b9      	ldr	r1, [r7, #8]
 800cb42:	47a0      	blx	r4
 800cb44:	4603      	mov	r3, r0
 800cb46:	75fb      	strb	r3, [r7, #23]
  return res;
 800cb48:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	371c      	adds	r7, #28
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd90      	pop	{r4, r7, pc}
 800cb52:	bf00      	nop
 800cb54:	200000dc 	.word	0x200000dc

0800cb58 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b084      	sub	sp, #16
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	4603      	mov	r3, r0
 800cb60:	603a      	str	r2, [r7, #0]
 800cb62:	71fb      	strb	r3, [r7, #7]
 800cb64:	460b      	mov	r3, r1
 800cb66:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cb68:	79fb      	ldrb	r3, [r7, #7]
 800cb6a:	4a09      	ldr	r2, [pc, #36]	; (800cb90 <disk_ioctl+0x38>)
 800cb6c:	009b      	lsls	r3, r3, #2
 800cb6e:	4413      	add	r3, r2
 800cb70:	685b      	ldr	r3, [r3, #4]
 800cb72:	691b      	ldr	r3, [r3, #16]
 800cb74:	79fa      	ldrb	r2, [r7, #7]
 800cb76:	4906      	ldr	r1, [pc, #24]	; (800cb90 <disk_ioctl+0x38>)
 800cb78:	440a      	add	r2, r1
 800cb7a:	7a10      	ldrb	r0, [r2, #8]
 800cb7c:	79b9      	ldrb	r1, [r7, #6]
 800cb7e:	683a      	ldr	r2, [r7, #0]
 800cb80:	4798      	blx	r3
 800cb82:	4603      	mov	r3, r0
 800cb84:	73fb      	strb	r3, [r7, #15]
  return res;
 800cb86:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3710      	adds	r7, #16
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}
 800cb90:	200000dc 	.word	0x200000dc

0800cb94 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cb94:	b480      	push	{r7}
 800cb96:	b085      	sub	sp, #20
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	3301      	adds	r3, #1
 800cba0:	781b      	ldrb	r3, [r3, #0]
 800cba2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800cba4:	89fb      	ldrh	r3, [r7, #14]
 800cba6:	021b      	lsls	r3, r3, #8
 800cba8:	b21a      	sxth	r2, r3
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	b21b      	sxth	r3, r3
 800cbb0:	4313      	orrs	r3, r2
 800cbb2:	b21b      	sxth	r3, r3
 800cbb4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800cbb6:	89fb      	ldrh	r3, [r7, #14]
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3714      	adds	r7, #20
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc2:	4770      	bx	lr

0800cbc4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800cbc4:	b480      	push	{r7}
 800cbc6:	b085      	sub	sp, #20
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	3303      	adds	r3, #3
 800cbd0:	781b      	ldrb	r3, [r3, #0]
 800cbd2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	021b      	lsls	r3, r3, #8
 800cbd8:	687a      	ldr	r2, [r7, #4]
 800cbda:	3202      	adds	r2, #2
 800cbdc:	7812      	ldrb	r2, [r2, #0]
 800cbde:	4313      	orrs	r3, r2
 800cbe0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	021b      	lsls	r3, r3, #8
 800cbe6:	687a      	ldr	r2, [r7, #4]
 800cbe8:	3201      	adds	r2, #1
 800cbea:	7812      	ldrb	r2, [r2, #0]
 800cbec:	4313      	orrs	r3, r2
 800cbee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	021b      	lsls	r3, r3, #8
 800cbf4:	687a      	ldr	r2, [r7, #4]
 800cbf6:	7812      	ldrb	r2, [r2, #0]
 800cbf8:	4313      	orrs	r3, r2
 800cbfa:	60fb      	str	r3, [r7, #12]
	return rv;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	3714      	adds	r7, #20
 800cc02:	46bd      	mov	sp, r7
 800cc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc08:	4770      	bx	lr

0800cc0a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800cc0a:	b480      	push	{r7}
 800cc0c:	b083      	sub	sp, #12
 800cc0e:	af00      	add	r7, sp, #0
 800cc10:	6078      	str	r0, [r7, #4]
 800cc12:	460b      	mov	r3, r1
 800cc14:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	1c5a      	adds	r2, r3, #1
 800cc1a:	607a      	str	r2, [r7, #4]
 800cc1c:	887a      	ldrh	r2, [r7, #2]
 800cc1e:	b2d2      	uxtb	r2, r2
 800cc20:	701a      	strb	r2, [r3, #0]
 800cc22:	887b      	ldrh	r3, [r7, #2]
 800cc24:	0a1b      	lsrs	r3, r3, #8
 800cc26:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	1c5a      	adds	r2, r3, #1
 800cc2c:	607a      	str	r2, [r7, #4]
 800cc2e:	887a      	ldrh	r2, [r7, #2]
 800cc30:	b2d2      	uxtb	r2, r2
 800cc32:	701a      	strb	r2, [r3, #0]
}
 800cc34:	bf00      	nop
 800cc36:	370c      	adds	r7, #12
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3e:	4770      	bx	lr

0800cc40 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800cc40:	b480      	push	{r7}
 800cc42:	b083      	sub	sp, #12
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
 800cc48:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	1c5a      	adds	r2, r3, #1
 800cc4e:	607a      	str	r2, [r7, #4]
 800cc50:	683a      	ldr	r2, [r7, #0]
 800cc52:	b2d2      	uxtb	r2, r2
 800cc54:	701a      	strb	r2, [r3, #0]
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	0a1b      	lsrs	r3, r3, #8
 800cc5a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	1c5a      	adds	r2, r3, #1
 800cc60:	607a      	str	r2, [r7, #4]
 800cc62:	683a      	ldr	r2, [r7, #0]
 800cc64:	b2d2      	uxtb	r2, r2
 800cc66:	701a      	strb	r2, [r3, #0]
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	0a1b      	lsrs	r3, r3, #8
 800cc6c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	1c5a      	adds	r2, r3, #1
 800cc72:	607a      	str	r2, [r7, #4]
 800cc74:	683a      	ldr	r2, [r7, #0]
 800cc76:	b2d2      	uxtb	r2, r2
 800cc78:	701a      	strb	r2, [r3, #0]
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	0a1b      	lsrs	r3, r3, #8
 800cc7e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	1c5a      	adds	r2, r3, #1
 800cc84:	607a      	str	r2, [r7, #4]
 800cc86:	683a      	ldr	r2, [r7, #0]
 800cc88:	b2d2      	uxtb	r2, r2
 800cc8a:	701a      	strb	r2, [r3, #0]
}
 800cc8c:	bf00      	nop
 800cc8e:	370c      	adds	r7, #12
 800cc90:	46bd      	mov	sp, r7
 800cc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc96:	4770      	bx	lr

0800cc98 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800cc98:	b480      	push	{r7}
 800cc9a:	b087      	sub	sp, #28
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	60f8      	str	r0, [r7, #12]
 800cca0:	60b9      	str	r1, [r7, #8]
 800cca2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d00d      	beq.n	800ccce <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ccb2:	693a      	ldr	r2, [r7, #16]
 800ccb4:	1c53      	adds	r3, r2, #1
 800ccb6:	613b      	str	r3, [r7, #16]
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	1c59      	adds	r1, r3, #1
 800ccbc:	6179      	str	r1, [r7, #20]
 800ccbe:	7812      	ldrb	r2, [r2, #0]
 800ccc0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	3b01      	subs	r3, #1
 800ccc6:	607b      	str	r3, [r7, #4]
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d1f1      	bne.n	800ccb2 <mem_cpy+0x1a>
	}
}
 800ccce:	bf00      	nop
 800ccd0:	371c      	adds	r7, #28
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd8:	4770      	bx	lr

0800ccda <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ccda:	b480      	push	{r7}
 800ccdc:	b087      	sub	sp, #28
 800ccde:	af00      	add	r7, sp, #0
 800cce0:	60f8      	str	r0, [r7, #12]
 800cce2:	60b9      	str	r1, [r7, #8]
 800cce4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ccea:	697b      	ldr	r3, [r7, #20]
 800ccec:	1c5a      	adds	r2, r3, #1
 800ccee:	617a      	str	r2, [r7, #20]
 800ccf0:	68ba      	ldr	r2, [r7, #8]
 800ccf2:	b2d2      	uxtb	r2, r2
 800ccf4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	3b01      	subs	r3, #1
 800ccfa:	607b      	str	r3, [r7, #4]
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d1f3      	bne.n	800ccea <mem_set+0x10>
}
 800cd02:	bf00      	nop
 800cd04:	371c      	adds	r7, #28
 800cd06:	46bd      	mov	sp, r7
 800cd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0c:	4770      	bx	lr

0800cd0e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800cd0e:	b480      	push	{r7}
 800cd10:	b089      	sub	sp, #36	; 0x24
 800cd12:	af00      	add	r7, sp, #0
 800cd14:	60f8      	str	r0, [r7, #12]
 800cd16:	60b9      	str	r1, [r7, #8]
 800cd18:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	61fb      	str	r3, [r7, #28]
 800cd1e:	68bb      	ldr	r3, [r7, #8]
 800cd20:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800cd22:	2300      	movs	r3, #0
 800cd24:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800cd26:	69fb      	ldr	r3, [r7, #28]
 800cd28:	1c5a      	adds	r2, r3, #1
 800cd2a:	61fa      	str	r2, [r7, #28]
 800cd2c:	781b      	ldrb	r3, [r3, #0]
 800cd2e:	4619      	mov	r1, r3
 800cd30:	69bb      	ldr	r3, [r7, #24]
 800cd32:	1c5a      	adds	r2, r3, #1
 800cd34:	61ba      	str	r2, [r7, #24]
 800cd36:	781b      	ldrb	r3, [r3, #0]
 800cd38:	1acb      	subs	r3, r1, r3
 800cd3a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	3b01      	subs	r3, #1
 800cd40:	607b      	str	r3, [r7, #4]
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d002      	beq.n	800cd4e <mem_cmp+0x40>
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d0eb      	beq.n	800cd26 <mem_cmp+0x18>

	return r;
 800cd4e:	697b      	ldr	r3, [r7, #20]
}
 800cd50:	4618      	mov	r0, r3
 800cd52:	3724      	adds	r7, #36	; 0x24
 800cd54:	46bd      	mov	sp, r7
 800cd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5a:	4770      	bx	lr

0800cd5c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800cd5c:	b480      	push	{r7}
 800cd5e:	b083      	sub	sp, #12
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800cd66:	e002      	b.n	800cd6e <chk_chr+0x12>
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	3301      	adds	r3, #1
 800cd6c:	607b      	str	r3, [r7, #4]
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	781b      	ldrb	r3, [r3, #0]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d005      	beq.n	800cd82 <chk_chr+0x26>
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	781b      	ldrb	r3, [r3, #0]
 800cd7a:	461a      	mov	r2, r3
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	d1f2      	bne.n	800cd68 <chk_chr+0xc>
	return *str;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	781b      	ldrb	r3, [r3, #0]
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	370c      	adds	r7, #12
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd90:	4770      	bx	lr

0800cd92 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800cd92:	b580      	push	{r7, lr}
 800cd94:	b082      	sub	sp, #8
 800cd96:	af00      	add	r7, sp, #0
 800cd98:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d009      	beq.n	800cdb4 <lock_fs+0x22>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	68db      	ldr	r3, [r3, #12]
 800cda4:	4618      	mov	r0, r3
 800cda6:	f002 fe7c 	bl	800faa2 <ff_req_grant>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d001      	beq.n	800cdb4 <lock_fs+0x22>
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	e000      	b.n	800cdb6 <lock_fs+0x24>
 800cdb4:	2300      	movs	r3, #0
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3708      	adds	r7, #8
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}

0800cdbe <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800cdbe:	b580      	push	{r7, lr}
 800cdc0:	b082      	sub	sp, #8
 800cdc2:	af00      	add	r7, sp, #0
 800cdc4:	6078      	str	r0, [r7, #4]
 800cdc6:	460b      	mov	r3, r1
 800cdc8:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d00d      	beq.n	800cdec <unlock_fs+0x2e>
 800cdd0:	78fb      	ldrb	r3, [r7, #3]
 800cdd2:	2b0c      	cmp	r3, #12
 800cdd4:	d00a      	beq.n	800cdec <unlock_fs+0x2e>
 800cdd6:	78fb      	ldrb	r3, [r7, #3]
 800cdd8:	2b0b      	cmp	r3, #11
 800cdda:	d007      	beq.n	800cdec <unlock_fs+0x2e>
 800cddc:	78fb      	ldrb	r3, [r7, #3]
 800cdde:	2b0f      	cmp	r3, #15
 800cde0:	d004      	beq.n	800cdec <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	68db      	ldr	r3, [r3, #12]
 800cde6:	4618      	mov	r0, r3
 800cde8:	f002 fe70 	bl	800facc <ff_rel_grant>
	}
}
 800cdec:	bf00      	nop
 800cdee:	3708      	adds	r7, #8
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cdf4:	b480      	push	{r7}
 800cdf6:	b085      	sub	sp, #20
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
 800cdfc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cdfe:	2300      	movs	r3, #0
 800ce00:	60bb      	str	r3, [r7, #8]
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	60fb      	str	r3, [r7, #12]
 800ce06:	e029      	b.n	800ce5c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ce08:	4a27      	ldr	r2, [pc, #156]	; (800cea8 <chk_lock+0xb4>)
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	011b      	lsls	r3, r3, #4
 800ce0e:	4413      	add	r3, r2
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d01d      	beq.n	800ce52 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ce16:	4a24      	ldr	r2, [pc, #144]	; (800cea8 <chk_lock+0xb4>)
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	011b      	lsls	r3, r3, #4
 800ce1c:	4413      	add	r3, r2
 800ce1e:	681a      	ldr	r2, [r3, #0]
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d116      	bne.n	800ce56 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ce28:	4a1f      	ldr	r2, [pc, #124]	; (800cea8 <chk_lock+0xb4>)
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	011b      	lsls	r3, r3, #4
 800ce2e:	4413      	add	r3, r2
 800ce30:	3304      	adds	r3, #4
 800ce32:	681a      	ldr	r2, [r3, #0]
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	d10c      	bne.n	800ce56 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ce3c:	4a1a      	ldr	r2, [pc, #104]	; (800cea8 <chk_lock+0xb4>)
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	011b      	lsls	r3, r3, #4
 800ce42:	4413      	add	r3, r2
 800ce44:	3308      	adds	r3, #8
 800ce46:	681a      	ldr	r2, [r3, #0]
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d102      	bne.n	800ce56 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ce50:	e007      	b.n	800ce62 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ce52:	2301      	movs	r3, #1
 800ce54:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	3301      	adds	r3, #1
 800ce5a:	60fb      	str	r3, [r7, #12]
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	2b01      	cmp	r3, #1
 800ce60:	d9d2      	bls.n	800ce08 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	2b02      	cmp	r3, #2
 800ce66:	d109      	bne.n	800ce7c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d102      	bne.n	800ce74 <chk_lock+0x80>
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	2b02      	cmp	r3, #2
 800ce72:	d101      	bne.n	800ce78 <chk_lock+0x84>
 800ce74:	2300      	movs	r3, #0
 800ce76:	e010      	b.n	800ce9a <chk_lock+0xa6>
 800ce78:	2312      	movs	r3, #18
 800ce7a:	e00e      	b.n	800ce9a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d108      	bne.n	800ce94 <chk_lock+0xa0>
 800ce82:	4a09      	ldr	r2, [pc, #36]	; (800cea8 <chk_lock+0xb4>)
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	011b      	lsls	r3, r3, #4
 800ce88:	4413      	add	r3, r2
 800ce8a:	330c      	adds	r3, #12
 800ce8c:	881b      	ldrh	r3, [r3, #0]
 800ce8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce92:	d101      	bne.n	800ce98 <chk_lock+0xa4>
 800ce94:	2310      	movs	r3, #16
 800ce96:	e000      	b.n	800ce9a <chk_lock+0xa6>
 800ce98:	2300      	movs	r3, #0
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3714      	adds	r7, #20
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea4:	4770      	bx	lr
 800cea6:	bf00      	nop
 800cea8:	200000bc 	.word	0x200000bc

0800ceac <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ceac:	b480      	push	{r7}
 800ceae:	b083      	sub	sp, #12
 800ceb0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	607b      	str	r3, [r7, #4]
 800ceb6:	e002      	b.n	800cebe <enq_lock+0x12>
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	3301      	adds	r3, #1
 800cebc:	607b      	str	r3, [r7, #4]
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2b01      	cmp	r3, #1
 800cec2:	d806      	bhi.n	800ced2 <enq_lock+0x26>
 800cec4:	4a09      	ldr	r2, [pc, #36]	; (800ceec <enq_lock+0x40>)
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	011b      	lsls	r3, r3, #4
 800ceca:	4413      	add	r3, r2
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d1f2      	bne.n	800ceb8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2b02      	cmp	r3, #2
 800ced6:	bf14      	ite	ne
 800ced8:	2301      	movne	r3, #1
 800ceda:	2300      	moveq	r3, #0
 800cedc:	b2db      	uxtb	r3, r3
}
 800cede:	4618      	mov	r0, r3
 800cee0:	370c      	adds	r7, #12
 800cee2:	46bd      	mov	sp, r7
 800cee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee8:	4770      	bx	lr
 800ceea:	bf00      	nop
 800ceec:	200000bc 	.word	0x200000bc

0800cef0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cef0:	b480      	push	{r7}
 800cef2:	b085      	sub	sp, #20
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
 800cef8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cefa:	2300      	movs	r3, #0
 800cefc:	60fb      	str	r3, [r7, #12]
 800cefe:	e01f      	b.n	800cf40 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800cf00:	4a41      	ldr	r2, [pc, #260]	; (800d008 <inc_lock+0x118>)
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	011b      	lsls	r3, r3, #4
 800cf06:	4413      	add	r3, r2
 800cf08:	681a      	ldr	r2, [r3, #0]
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	429a      	cmp	r2, r3
 800cf10:	d113      	bne.n	800cf3a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800cf12:	4a3d      	ldr	r2, [pc, #244]	; (800d008 <inc_lock+0x118>)
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	011b      	lsls	r3, r3, #4
 800cf18:	4413      	add	r3, r2
 800cf1a:	3304      	adds	r3, #4
 800cf1c:	681a      	ldr	r2, [r3, #0]
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d109      	bne.n	800cf3a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800cf26:	4a38      	ldr	r2, [pc, #224]	; (800d008 <inc_lock+0x118>)
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	011b      	lsls	r3, r3, #4
 800cf2c:	4413      	add	r3, r2
 800cf2e:	3308      	adds	r3, #8
 800cf30:	681a      	ldr	r2, [r3, #0]
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800cf36:	429a      	cmp	r2, r3
 800cf38:	d006      	beq.n	800cf48 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	3301      	adds	r3, #1
 800cf3e:	60fb      	str	r3, [r7, #12]
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	2b01      	cmp	r3, #1
 800cf44:	d9dc      	bls.n	800cf00 <inc_lock+0x10>
 800cf46:	e000      	b.n	800cf4a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800cf48:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	2b02      	cmp	r3, #2
 800cf4e:	d132      	bne.n	800cfb6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cf50:	2300      	movs	r3, #0
 800cf52:	60fb      	str	r3, [r7, #12]
 800cf54:	e002      	b.n	800cf5c <inc_lock+0x6c>
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	3301      	adds	r3, #1
 800cf5a:	60fb      	str	r3, [r7, #12]
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	2b01      	cmp	r3, #1
 800cf60:	d806      	bhi.n	800cf70 <inc_lock+0x80>
 800cf62:	4a29      	ldr	r2, [pc, #164]	; (800d008 <inc_lock+0x118>)
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	011b      	lsls	r3, r3, #4
 800cf68:	4413      	add	r3, r2
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d1f2      	bne.n	800cf56 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	2b02      	cmp	r3, #2
 800cf74:	d101      	bne.n	800cf7a <inc_lock+0x8a>
 800cf76:	2300      	movs	r3, #0
 800cf78:	e040      	b.n	800cffc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681a      	ldr	r2, [r3, #0]
 800cf7e:	4922      	ldr	r1, [pc, #136]	; (800d008 <inc_lock+0x118>)
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	011b      	lsls	r3, r3, #4
 800cf84:	440b      	add	r3, r1
 800cf86:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	689a      	ldr	r2, [r3, #8]
 800cf8c:	491e      	ldr	r1, [pc, #120]	; (800d008 <inc_lock+0x118>)
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	011b      	lsls	r3, r3, #4
 800cf92:	440b      	add	r3, r1
 800cf94:	3304      	adds	r3, #4
 800cf96:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	695a      	ldr	r2, [r3, #20]
 800cf9c:	491a      	ldr	r1, [pc, #104]	; (800d008 <inc_lock+0x118>)
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	011b      	lsls	r3, r3, #4
 800cfa2:	440b      	add	r3, r1
 800cfa4:	3308      	adds	r3, #8
 800cfa6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800cfa8:	4a17      	ldr	r2, [pc, #92]	; (800d008 <inc_lock+0x118>)
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	011b      	lsls	r3, r3, #4
 800cfae:	4413      	add	r3, r2
 800cfb0:	330c      	adds	r3, #12
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d009      	beq.n	800cfd0 <inc_lock+0xe0>
 800cfbc:	4a12      	ldr	r2, [pc, #72]	; (800d008 <inc_lock+0x118>)
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	011b      	lsls	r3, r3, #4
 800cfc2:	4413      	add	r3, r2
 800cfc4:	330c      	adds	r3, #12
 800cfc6:	881b      	ldrh	r3, [r3, #0]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d001      	beq.n	800cfd0 <inc_lock+0xe0>
 800cfcc:	2300      	movs	r3, #0
 800cfce:	e015      	b.n	800cffc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d108      	bne.n	800cfe8 <inc_lock+0xf8>
 800cfd6:	4a0c      	ldr	r2, [pc, #48]	; (800d008 <inc_lock+0x118>)
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	011b      	lsls	r3, r3, #4
 800cfdc:	4413      	add	r3, r2
 800cfde:	330c      	adds	r3, #12
 800cfe0:	881b      	ldrh	r3, [r3, #0]
 800cfe2:	3301      	adds	r3, #1
 800cfe4:	b29a      	uxth	r2, r3
 800cfe6:	e001      	b.n	800cfec <inc_lock+0xfc>
 800cfe8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cfec:	4906      	ldr	r1, [pc, #24]	; (800d008 <inc_lock+0x118>)
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	011b      	lsls	r3, r3, #4
 800cff2:	440b      	add	r3, r1
 800cff4:	330c      	adds	r3, #12
 800cff6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	3301      	adds	r3, #1
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	3714      	adds	r7, #20
 800d000:	46bd      	mov	sp, r7
 800d002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d006:	4770      	bx	lr
 800d008:	200000bc 	.word	0x200000bc

0800d00c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d00c:	b480      	push	{r7}
 800d00e:	b085      	sub	sp, #20
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	3b01      	subs	r3, #1
 800d018:	607b      	str	r3, [r7, #4]
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2b01      	cmp	r3, #1
 800d01e:	d825      	bhi.n	800d06c <dec_lock+0x60>
		n = Files[i].ctr;
 800d020:	4a17      	ldr	r2, [pc, #92]	; (800d080 <dec_lock+0x74>)
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	011b      	lsls	r3, r3, #4
 800d026:	4413      	add	r3, r2
 800d028:	330c      	adds	r3, #12
 800d02a:	881b      	ldrh	r3, [r3, #0]
 800d02c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d02e:	89fb      	ldrh	r3, [r7, #14]
 800d030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d034:	d101      	bne.n	800d03a <dec_lock+0x2e>
 800d036:	2300      	movs	r3, #0
 800d038:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d03a:	89fb      	ldrh	r3, [r7, #14]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d002      	beq.n	800d046 <dec_lock+0x3a>
 800d040:	89fb      	ldrh	r3, [r7, #14]
 800d042:	3b01      	subs	r3, #1
 800d044:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d046:	4a0e      	ldr	r2, [pc, #56]	; (800d080 <dec_lock+0x74>)
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	011b      	lsls	r3, r3, #4
 800d04c:	4413      	add	r3, r2
 800d04e:	330c      	adds	r3, #12
 800d050:	89fa      	ldrh	r2, [r7, #14]
 800d052:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d054:	89fb      	ldrh	r3, [r7, #14]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d105      	bne.n	800d066 <dec_lock+0x5a>
 800d05a:	4a09      	ldr	r2, [pc, #36]	; (800d080 <dec_lock+0x74>)
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	011b      	lsls	r3, r3, #4
 800d060:	4413      	add	r3, r2
 800d062:	2200      	movs	r2, #0
 800d064:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d066:	2300      	movs	r3, #0
 800d068:	737b      	strb	r3, [r7, #13]
 800d06a:	e001      	b.n	800d070 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d06c:	2302      	movs	r3, #2
 800d06e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d070:	7b7b      	ldrb	r3, [r7, #13]
}
 800d072:	4618      	mov	r0, r3
 800d074:	3714      	adds	r7, #20
 800d076:	46bd      	mov	sp, r7
 800d078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07c:	4770      	bx	lr
 800d07e:	bf00      	nop
 800d080:	200000bc 	.word	0x200000bc

0800d084 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d084:	b480      	push	{r7}
 800d086:	b085      	sub	sp, #20
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d08c:	2300      	movs	r3, #0
 800d08e:	60fb      	str	r3, [r7, #12]
 800d090:	e010      	b.n	800d0b4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d092:	4a0d      	ldr	r2, [pc, #52]	; (800d0c8 <clear_lock+0x44>)
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	011b      	lsls	r3, r3, #4
 800d098:	4413      	add	r3, r2
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	687a      	ldr	r2, [r7, #4]
 800d09e:	429a      	cmp	r2, r3
 800d0a0:	d105      	bne.n	800d0ae <clear_lock+0x2a>
 800d0a2:	4a09      	ldr	r2, [pc, #36]	; (800d0c8 <clear_lock+0x44>)
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	011b      	lsls	r3, r3, #4
 800d0a8:	4413      	add	r3, r2
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	3301      	adds	r3, #1
 800d0b2:	60fb      	str	r3, [r7, #12]
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	2b01      	cmp	r3, #1
 800d0b8:	d9eb      	bls.n	800d092 <clear_lock+0xe>
	}
}
 800d0ba:	bf00      	nop
 800d0bc:	3714      	adds	r7, #20
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c4:	4770      	bx	lr
 800d0c6:	bf00      	nop
 800d0c8:	200000bc 	.word	0x200000bc

0800d0cc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b086      	sub	sp, #24
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	78db      	ldrb	r3, [r3, #3]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d034      	beq.n	800d14a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0e4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	7858      	ldrb	r0, [r3, #1]
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	697a      	ldr	r2, [r7, #20]
 800d0f4:	f7ff fd10 	bl	800cb18 <disk_write>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d002      	beq.n	800d104 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d0fe:	2301      	movs	r3, #1
 800d100:	73fb      	strb	r3, [r7, #15]
 800d102:	e022      	b.n	800d14a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2200      	movs	r2, #0
 800d108:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d10e:	697a      	ldr	r2, [r7, #20]
 800d110:	1ad2      	subs	r2, r2, r3
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	69db      	ldr	r3, [r3, #28]
 800d116:	429a      	cmp	r2, r3
 800d118:	d217      	bcs.n	800d14a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	789b      	ldrb	r3, [r3, #2]
 800d11e:	613b      	str	r3, [r7, #16]
 800d120:	e010      	b.n	800d144 <sync_window+0x78>
					wsect += fs->fsize;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	69db      	ldr	r3, [r3, #28]
 800d126:	697a      	ldr	r2, [r7, #20]
 800d128:	4413      	add	r3, r2
 800d12a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	7858      	ldrb	r0, [r3, #1]
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d136:	2301      	movs	r3, #1
 800d138:	697a      	ldr	r2, [r7, #20]
 800d13a:	f7ff fced 	bl	800cb18 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d13e:	693b      	ldr	r3, [r7, #16]
 800d140:	3b01      	subs	r3, #1
 800d142:	613b      	str	r3, [r7, #16]
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	2b01      	cmp	r3, #1
 800d148:	d8eb      	bhi.n	800d122 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d14a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3718      	adds	r7, #24
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}

0800d154 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b084      	sub	sp, #16
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
 800d15c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d15e:	2300      	movs	r3, #0
 800d160:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d166:	683a      	ldr	r2, [r7, #0]
 800d168:	429a      	cmp	r2, r3
 800d16a:	d01b      	beq.n	800d1a4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	f7ff ffad 	bl	800d0cc <sync_window>
 800d172:	4603      	mov	r3, r0
 800d174:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d176:	7bfb      	ldrb	r3, [r7, #15]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d113      	bne.n	800d1a4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	7858      	ldrb	r0, [r3, #1]
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d186:	2301      	movs	r3, #1
 800d188:	683a      	ldr	r2, [r7, #0]
 800d18a:	f7ff fca5 	bl	800cad8 <disk_read>
 800d18e:	4603      	mov	r3, r0
 800d190:	2b00      	cmp	r3, #0
 800d192:	d004      	beq.n	800d19e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d194:	f04f 33ff 	mov.w	r3, #4294967295
 800d198:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d19a:	2301      	movs	r3, #1
 800d19c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	683a      	ldr	r2, [r7, #0]
 800d1a2:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800d1a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3710      	adds	r7, #16
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
	...

0800d1b0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b084      	sub	sp, #16
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f7ff ff87 	bl	800d0cc <sync_window>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d1c2:	7bfb      	ldrb	r3, [r7, #15]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d158      	bne.n	800d27a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	781b      	ldrb	r3, [r3, #0]
 800d1cc:	2b03      	cmp	r3, #3
 800d1ce:	d148      	bne.n	800d262 <sync_fs+0xb2>
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	791b      	ldrb	r3, [r3, #4]
 800d1d4:	2b01      	cmp	r3, #1
 800d1d6:	d144      	bne.n	800d262 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	3334      	adds	r3, #52	; 0x34
 800d1dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d1e0:	2100      	movs	r1, #0
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f7ff fd79 	bl	800ccda <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	3334      	adds	r3, #52	; 0x34
 800d1ec:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d1f0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f7ff fd08 	bl	800cc0a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	3334      	adds	r3, #52	; 0x34
 800d1fe:	4921      	ldr	r1, [pc, #132]	; (800d284 <sync_fs+0xd4>)
 800d200:	4618      	mov	r0, r3
 800d202:	f7ff fd1d 	bl	800cc40 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	3334      	adds	r3, #52	; 0x34
 800d20a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d20e:	491e      	ldr	r1, [pc, #120]	; (800d288 <sync_fs+0xd8>)
 800d210:	4618      	mov	r0, r3
 800d212:	f7ff fd15 	bl	800cc40 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	3334      	adds	r3, #52	; 0x34
 800d21a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	695b      	ldr	r3, [r3, #20]
 800d222:	4619      	mov	r1, r3
 800d224:	4610      	mov	r0, r2
 800d226:	f7ff fd0b 	bl	800cc40 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	3334      	adds	r3, #52	; 0x34
 800d22e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	691b      	ldr	r3, [r3, #16]
 800d236:	4619      	mov	r1, r3
 800d238:	4610      	mov	r0, r2
 800d23a:	f7ff fd01 	bl	800cc40 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	6a1b      	ldr	r3, [r3, #32]
 800d242:	1c5a      	adds	r2, r3, #1
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	7858      	ldrb	r0, [r3, #1]
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d256:	2301      	movs	r3, #1
 800d258:	f7ff fc5e 	bl	800cb18 <disk_write>
			fs->fsi_flag = 0;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2200      	movs	r2, #0
 800d260:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	785b      	ldrb	r3, [r3, #1]
 800d266:	2200      	movs	r2, #0
 800d268:	2100      	movs	r1, #0
 800d26a:	4618      	mov	r0, r3
 800d26c:	f7ff fc74 	bl	800cb58 <disk_ioctl>
 800d270:	4603      	mov	r3, r0
 800d272:	2b00      	cmp	r3, #0
 800d274:	d001      	beq.n	800d27a <sync_fs+0xca>
 800d276:	2301      	movs	r3, #1
 800d278:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d27a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	3710      	adds	r7, #16
 800d280:	46bd      	mov	sp, r7
 800d282:	bd80      	pop	{r7, pc}
 800d284:	41615252 	.word	0x41615252
 800d288:	61417272 	.word	0x61417272

0800d28c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d28c:	b480      	push	{r7}
 800d28e:	b083      	sub	sp, #12
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	3b02      	subs	r3, #2
 800d29a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	699b      	ldr	r3, [r3, #24]
 800d2a0:	3b02      	subs	r3, #2
 800d2a2:	683a      	ldr	r2, [r7, #0]
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	d301      	bcc.n	800d2ac <clust2sect+0x20>
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	e008      	b.n	800d2be <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	895b      	ldrh	r3, [r3, #10]
 800d2b0:	461a      	mov	r2, r3
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	fb03 f202 	mul.w	r2, r3, r2
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2bc:	4413      	add	r3, r2
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	370c      	adds	r7, #12
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c8:	4770      	bx	lr

0800d2ca <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d2ca:	b580      	push	{r7, lr}
 800d2cc:	b086      	sub	sp, #24
 800d2ce:	af00      	add	r7, sp, #0
 800d2d0:	6078      	str	r0, [r7, #4]
 800d2d2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	2b01      	cmp	r3, #1
 800d2de:	d904      	bls.n	800d2ea <get_fat+0x20>
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	699b      	ldr	r3, [r3, #24]
 800d2e4:	683a      	ldr	r2, [r7, #0]
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d302      	bcc.n	800d2f0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	617b      	str	r3, [r7, #20]
 800d2ee:	e08c      	b.n	800d40a <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d2f0:	f04f 33ff 	mov.w	r3, #4294967295
 800d2f4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d2f6:	693b      	ldr	r3, [r7, #16]
 800d2f8:	781b      	ldrb	r3, [r3, #0]
 800d2fa:	2b02      	cmp	r3, #2
 800d2fc:	d045      	beq.n	800d38a <get_fat+0xc0>
 800d2fe:	2b03      	cmp	r3, #3
 800d300:	d05d      	beq.n	800d3be <get_fat+0xf4>
 800d302:	2b01      	cmp	r3, #1
 800d304:	d177      	bne.n	800d3f6 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	60fb      	str	r3, [r7, #12]
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	085b      	lsrs	r3, r3, #1
 800d30e:	68fa      	ldr	r2, [r7, #12]
 800d310:	4413      	add	r3, r2
 800d312:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d314:	693b      	ldr	r3, [r7, #16]
 800d316:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	0a5b      	lsrs	r3, r3, #9
 800d31c:	4413      	add	r3, r2
 800d31e:	4619      	mov	r1, r3
 800d320:	6938      	ldr	r0, [r7, #16]
 800d322:	f7ff ff17 	bl	800d154 <move_window>
 800d326:	4603      	mov	r3, r0
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d167      	bne.n	800d3fc <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	1c5a      	adds	r2, r3, #1
 800d330:	60fa      	str	r2, [r7, #12]
 800d332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d336:	693a      	ldr	r2, [r7, #16]
 800d338:	4413      	add	r3, r2
 800d33a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d33e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d340:	693b      	ldr	r3, [r7, #16]
 800d342:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	0a5b      	lsrs	r3, r3, #9
 800d348:	4413      	add	r3, r2
 800d34a:	4619      	mov	r1, r3
 800d34c:	6938      	ldr	r0, [r7, #16]
 800d34e:	f7ff ff01 	bl	800d154 <move_window>
 800d352:	4603      	mov	r3, r0
 800d354:	2b00      	cmp	r3, #0
 800d356:	d153      	bne.n	800d400 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d35e:	693a      	ldr	r2, [r7, #16]
 800d360:	4413      	add	r3, r2
 800d362:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d366:	021b      	lsls	r3, r3, #8
 800d368:	461a      	mov	r2, r3
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	4313      	orrs	r3, r2
 800d36e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	f003 0301 	and.w	r3, r3, #1
 800d376:	2b00      	cmp	r3, #0
 800d378:	d002      	beq.n	800d380 <get_fat+0xb6>
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	091b      	lsrs	r3, r3, #4
 800d37e:	e002      	b.n	800d386 <get_fat+0xbc>
 800d380:	68bb      	ldr	r3, [r7, #8]
 800d382:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d386:	617b      	str	r3, [r7, #20]
			break;
 800d388:	e03f      	b.n	800d40a <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d38a:	693b      	ldr	r3, [r7, #16]
 800d38c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	0a1b      	lsrs	r3, r3, #8
 800d392:	4413      	add	r3, r2
 800d394:	4619      	mov	r1, r3
 800d396:	6938      	ldr	r0, [r7, #16]
 800d398:	f7ff fedc 	bl	800d154 <move_window>
 800d39c:	4603      	mov	r3, r0
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d130      	bne.n	800d404 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	005b      	lsls	r3, r3, #1
 800d3ac:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d3b0:	4413      	add	r3, r2
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f7ff fbee 	bl	800cb94 <ld_word>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	617b      	str	r3, [r7, #20]
			break;
 800d3bc:	e025      	b.n	800d40a <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	09db      	lsrs	r3, r3, #7
 800d3c6:	4413      	add	r3, r2
 800d3c8:	4619      	mov	r1, r3
 800d3ca:	6938      	ldr	r0, [r7, #16]
 800d3cc:	f7ff fec2 	bl	800d154 <move_window>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d118      	bne.n	800d408 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d3d6:	693b      	ldr	r3, [r7, #16]
 800d3d8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	009b      	lsls	r3, r3, #2
 800d3e0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d3e4:	4413      	add	r3, r2
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f7ff fbec 	bl	800cbc4 <ld_dword>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d3f2:	617b      	str	r3, [r7, #20]
			break;
 800d3f4:	e009      	b.n	800d40a <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	617b      	str	r3, [r7, #20]
 800d3fa:	e006      	b.n	800d40a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d3fc:	bf00      	nop
 800d3fe:	e004      	b.n	800d40a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d400:	bf00      	nop
 800d402:	e002      	b.n	800d40a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d404:	bf00      	nop
 800d406:	e000      	b.n	800d40a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d408:	bf00      	nop
		}
	}

	return val;
 800d40a:	697b      	ldr	r3, [r7, #20]
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	3718      	adds	r7, #24
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}

0800d414 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d414:	b590      	push	{r4, r7, lr}
 800d416:	b089      	sub	sp, #36	; 0x24
 800d418:	af00      	add	r7, sp, #0
 800d41a:	60f8      	str	r0, [r7, #12]
 800d41c:	60b9      	str	r1, [r7, #8]
 800d41e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d420:	2302      	movs	r3, #2
 800d422:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	2b01      	cmp	r3, #1
 800d428:	f240 80d6 	bls.w	800d5d8 <put_fat+0x1c4>
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	699b      	ldr	r3, [r3, #24]
 800d430:	68ba      	ldr	r2, [r7, #8]
 800d432:	429a      	cmp	r2, r3
 800d434:	f080 80d0 	bcs.w	800d5d8 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	781b      	ldrb	r3, [r3, #0]
 800d43c:	2b02      	cmp	r3, #2
 800d43e:	d073      	beq.n	800d528 <put_fat+0x114>
 800d440:	2b03      	cmp	r3, #3
 800d442:	f000 8091 	beq.w	800d568 <put_fat+0x154>
 800d446:	2b01      	cmp	r3, #1
 800d448:	f040 80c6 	bne.w	800d5d8 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	61bb      	str	r3, [r7, #24]
 800d450:	69bb      	ldr	r3, [r7, #24]
 800d452:	085b      	lsrs	r3, r3, #1
 800d454:	69ba      	ldr	r2, [r7, #24]
 800d456:	4413      	add	r3, r2
 800d458:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d45e:	69bb      	ldr	r3, [r7, #24]
 800d460:	0a5b      	lsrs	r3, r3, #9
 800d462:	4413      	add	r3, r2
 800d464:	4619      	mov	r1, r3
 800d466:	68f8      	ldr	r0, [r7, #12]
 800d468:	f7ff fe74 	bl	800d154 <move_window>
 800d46c:	4603      	mov	r3, r0
 800d46e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d470:	7ffb      	ldrb	r3, [r7, #31]
 800d472:	2b00      	cmp	r3, #0
 800d474:	f040 80a9 	bne.w	800d5ca <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d47e:	69bb      	ldr	r3, [r7, #24]
 800d480:	1c59      	adds	r1, r3, #1
 800d482:	61b9      	str	r1, [r7, #24]
 800d484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d488:	4413      	add	r3, r2
 800d48a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	f003 0301 	and.w	r3, r3, #1
 800d492:	2b00      	cmp	r3, #0
 800d494:	d00d      	beq.n	800d4b2 <put_fat+0x9e>
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	781b      	ldrb	r3, [r3, #0]
 800d49a:	b25b      	sxtb	r3, r3
 800d49c:	f003 030f 	and.w	r3, r3, #15
 800d4a0:	b25a      	sxtb	r2, r3
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	b2db      	uxtb	r3, r3
 800d4a6:	011b      	lsls	r3, r3, #4
 800d4a8:	b25b      	sxtb	r3, r3
 800d4aa:	4313      	orrs	r3, r2
 800d4ac:	b25b      	sxtb	r3, r3
 800d4ae:	b2db      	uxtb	r3, r3
 800d4b0:	e001      	b.n	800d4b6 <put_fat+0xa2>
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	b2db      	uxtb	r3, r3
 800d4b6:	697a      	ldr	r2, [r7, #20]
 800d4b8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	2201      	movs	r2, #1
 800d4be:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d4c4:	69bb      	ldr	r3, [r7, #24]
 800d4c6:	0a5b      	lsrs	r3, r3, #9
 800d4c8:	4413      	add	r3, r2
 800d4ca:	4619      	mov	r1, r3
 800d4cc:	68f8      	ldr	r0, [r7, #12]
 800d4ce:	f7ff fe41 	bl	800d154 <move_window>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d4d6:	7ffb      	ldrb	r3, [r7, #31]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d178      	bne.n	800d5ce <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d4e2:	69bb      	ldr	r3, [r7, #24]
 800d4e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4e8:	4413      	add	r3, r2
 800d4ea:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	f003 0301 	and.w	r3, r3, #1
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d003      	beq.n	800d4fe <put_fat+0xea>
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	091b      	lsrs	r3, r3, #4
 800d4fa:	b2db      	uxtb	r3, r3
 800d4fc:	e00e      	b.n	800d51c <put_fat+0x108>
 800d4fe:	697b      	ldr	r3, [r7, #20]
 800d500:	781b      	ldrb	r3, [r3, #0]
 800d502:	b25b      	sxtb	r3, r3
 800d504:	f023 030f 	bic.w	r3, r3, #15
 800d508:	b25a      	sxtb	r2, r3
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	0a1b      	lsrs	r3, r3, #8
 800d50e:	b25b      	sxtb	r3, r3
 800d510:	f003 030f 	and.w	r3, r3, #15
 800d514:	b25b      	sxtb	r3, r3
 800d516:	4313      	orrs	r3, r2
 800d518:	b25b      	sxtb	r3, r3
 800d51a:	b2db      	uxtb	r3, r3
 800d51c:	697a      	ldr	r2, [r7, #20]
 800d51e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	2201      	movs	r2, #1
 800d524:	70da      	strb	r2, [r3, #3]
			break;
 800d526:	e057      	b.n	800d5d8 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	0a1b      	lsrs	r3, r3, #8
 800d530:	4413      	add	r3, r2
 800d532:	4619      	mov	r1, r3
 800d534:	68f8      	ldr	r0, [r7, #12]
 800d536:	f7ff fe0d 	bl	800d154 <move_window>
 800d53a:	4603      	mov	r3, r0
 800d53c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d53e:	7ffb      	ldrb	r3, [r7, #31]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d146      	bne.n	800d5d2 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d54a:	68bb      	ldr	r3, [r7, #8]
 800d54c:	005b      	lsls	r3, r3, #1
 800d54e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d552:	4413      	add	r3, r2
 800d554:	687a      	ldr	r2, [r7, #4]
 800d556:	b292      	uxth	r2, r2
 800d558:	4611      	mov	r1, r2
 800d55a:	4618      	mov	r0, r3
 800d55c:	f7ff fb55 	bl	800cc0a <st_word>
			fs->wflag = 1;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	2201      	movs	r2, #1
 800d564:	70da      	strb	r2, [r3, #3]
			break;
 800d566:	e037      	b.n	800d5d8 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	09db      	lsrs	r3, r3, #7
 800d570:	4413      	add	r3, r2
 800d572:	4619      	mov	r1, r3
 800d574:	68f8      	ldr	r0, [r7, #12]
 800d576:	f7ff fded 	bl	800d154 <move_window>
 800d57a:	4603      	mov	r3, r0
 800d57c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d57e:	7ffb      	ldrb	r3, [r7, #31]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d128      	bne.n	800d5d6 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	009b      	lsls	r3, r3, #2
 800d594:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d598:	4413      	add	r3, r2
 800d59a:	4618      	mov	r0, r3
 800d59c:	f7ff fb12 	bl	800cbc4 <ld_dword>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d5a6:	4323      	orrs	r3, r4
 800d5a8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	009b      	lsls	r3, r3, #2
 800d5b4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d5b8:	4413      	add	r3, r2
 800d5ba:	6879      	ldr	r1, [r7, #4]
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f7ff fb3f 	bl	800cc40 <st_dword>
			fs->wflag = 1;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	2201      	movs	r2, #1
 800d5c6:	70da      	strb	r2, [r3, #3]
			break;
 800d5c8:	e006      	b.n	800d5d8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800d5ca:	bf00      	nop
 800d5cc:	e004      	b.n	800d5d8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800d5ce:	bf00      	nop
 800d5d0:	e002      	b.n	800d5d8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800d5d2:	bf00      	nop
 800d5d4:	e000      	b.n	800d5d8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800d5d6:	bf00      	nop
		}
	}
	return res;
 800d5d8:	7ffb      	ldrb	r3, [r7, #31]
}
 800d5da:	4618      	mov	r0, r3
 800d5dc:	3724      	adds	r7, #36	; 0x24
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd90      	pop	{r4, r7, pc}

0800d5e2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d5e2:	b580      	push	{r7, lr}
 800d5e4:	b088      	sub	sp, #32
 800d5e6:	af00      	add	r7, sp, #0
 800d5e8:	60f8      	str	r0, [r7, #12]
 800d5ea:	60b9      	str	r1, [r7, #8]
 800d5ec:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	2b01      	cmp	r3, #1
 800d5fc:	d904      	bls.n	800d608 <remove_chain+0x26>
 800d5fe:	69bb      	ldr	r3, [r7, #24]
 800d600:	699b      	ldr	r3, [r3, #24]
 800d602:	68ba      	ldr	r2, [r7, #8]
 800d604:	429a      	cmp	r2, r3
 800d606:	d301      	bcc.n	800d60c <remove_chain+0x2a>
 800d608:	2302      	movs	r3, #2
 800d60a:	e04b      	b.n	800d6a4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d00c      	beq.n	800d62c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d612:	f04f 32ff 	mov.w	r2, #4294967295
 800d616:	6879      	ldr	r1, [r7, #4]
 800d618:	69b8      	ldr	r0, [r7, #24]
 800d61a:	f7ff fefb 	bl	800d414 <put_fat>
 800d61e:	4603      	mov	r3, r0
 800d620:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d622:	7ffb      	ldrb	r3, [r7, #31]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d001      	beq.n	800d62c <remove_chain+0x4a>
 800d628:	7ffb      	ldrb	r3, [r7, #31]
 800d62a:	e03b      	b.n	800d6a4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d62c:	68b9      	ldr	r1, [r7, #8]
 800d62e:	68f8      	ldr	r0, [r7, #12]
 800d630:	f7ff fe4b 	bl	800d2ca <get_fat>
 800d634:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d031      	beq.n	800d6a0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	2b01      	cmp	r3, #1
 800d640:	d101      	bne.n	800d646 <remove_chain+0x64>
 800d642:	2302      	movs	r3, #2
 800d644:	e02e      	b.n	800d6a4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d646:	697b      	ldr	r3, [r7, #20]
 800d648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d64c:	d101      	bne.n	800d652 <remove_chain+0x70>
 800d64e:	2301      	movs	r3, #1
 800d650:	e028      	b.n	800d6a4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d652:	2200      	movs	r2, #0
 800d654:	68b9      	ldr	r1, [r7, #8]
 800d656:	69b8      	ldr	r0, [r7, #24]
 800d658:	f7ff fedc 	bl	800d414 <put_fat>
 800d65c:	4603      	mov	r3, r0
 800d65e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d660:	7ffb      	ldrb	r3, [r7, #31]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d001      	beq.n	800d66a <remove_chain+0x88>
 800d666:	7ffb      	ldrb	r3, [r7, #31]
 800d668:	e01c      	b.n	800d6a4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d66a:	69bb      	ldr	r3, [r7, #24]
 800d66c:	695a      	ldr	r2, [r3, #20]
 800d66e:	69bb      	ldr	r3, [r7, #24]
 800d670:	699b      	ldr	r3, [r3, #24]
 800d672:	3b02      	subs	r3, #2
 800d674:	429a      	cmp	r2, r3
 800d676:	d20b      	bcs.n	800d690 <remove_chain+0xae>
			fs->free_clst++;
 800d678:	69bb      	ldr	r3, [r7, #24]
 800d67a:	695b      	ldr	r3, [r3, #20]
 800d67c:	1c5a      	adds	r2, r3, #1
 800d67e:	69bb      	ldr	r3, [r7, #24]
 800d680:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800d682:	69bb      	ldr	r3, [r7, #24]
 800d684:	791b      	ldrb	r3, [r3, #4]
 800d686:	f043 0301 	orr.w	r3, r3, #1
 800d68a:	b2da      	uxtb	r2, r3
 800d68c:	69bb      	ldr	r3, [r7, #24]
 800d68e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d690:	697b      	ldr	r3, [r7, #20]
 800d692:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d694:	69bb      	ldr	r3, [r7, #24]
 800d696:	699b      	ldr	r3, [r3, #24]
 800d698:	68ba      	ldr	r2, [r7, #8]
 800d69a:	429a      	cmp	r2, r3
 800d69c:	d3c6      	bcc.n	800d62c <remove_chain+0x4a>
 800d69e:	e000      	b.n	800d6a2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d6a0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d6a2:	2300      	movs	r3, #0
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	3720      	adds	r7, #32
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b088      	sub	sp, #32
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
 800d6b4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d10d      	bne.n	800d6de <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d6c2:	693b      	ldr	r3, [r7, #16]
 800d6c4:	691b      	ldr	r3, [r3, #16]
 800d6c6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d6c8:	69bb      	ldr	r3, [r7, #24]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d004      	beq.n	800d6d8 <create_chain+0x2c>
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	699b      	ldr	r3, [r3, #24]
 800d6d2:	69ba      	ldr	r2, [r7, #24]
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d31b      	bcc.n	800d710 <create_chain+0x64>
 800d6d8:	2301      	movs	r3, #1
 800d6da:	61bb      	str	r3, [r7, #24]
 800d6dc:	e018      	b.n	800d710 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d6de:	6839      	ldr	r1, [r7, #0]
 800d6e0:	6878      	ldr	r0, [r7, #4]
 800d6e2:	f7ff fdf2 	bl	800d2ca <get_fat>
 800d6e6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	2b01      	cmp	r3, #1
 800d6ec:	d801      	bhi.n	800d6f2 <create_chain+0x46>
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	e070      	b.n	800d7d4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6f8:	d101      	bne.n	800d6fe <create_chain+0x52>
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	e06a      	b.n	800d7d4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d6fe:	693b      	ldr	r3, [r7, #16]
 800d700:	699b      	ldr	r3, [r3, #24]
 800d702:	68fa      	ldr	r2, [r7, #12]
 800d704:	429a      	cmp	r2, r3
 800d706:	d201      	bcs.n	800d70c <create_chain+0x60>
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	e063      	b.n	800d7d4 <create_chain+0x128>
		scl = clst;
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d710:	69bb      	ldr	r3, [r7, #24]
 800d712:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d714:	69fb      	ldr	r3, [r7, #28]
 800d716:	3301      	adds	r3, #1
 800d718:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d71a:	693b      	ldr	r3, [r7, #16]
 800d71c:	699b      	ldr	r3, [r3, #24]
 800d71e:	69fa      	ldr	r2, [r7, #28]
 800d720:	429a      	cmp	r2, r3
 800d722:	d307      	bcc.n	800d734 <create_chain+0x88>
				ncl = 2;
 800d724:	2302      	movs	r3, #2
 800d726:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d728:	69fa      	ldr	r2, [r7, #28]
 800d72a:	69bb      	ldr	r3, [r7, #24]
 800d72c:	429a      	cmp	r2, r3
 800d72e:	d901      	bls.n	800d734 <create_chain+0x88>
 800d730:	2300      	movs	r3, #0
 800d732:	e04f      	b.n	800d7d4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d734:	69f9      	ldr	r1, [r7, #28]
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f7ff fdc7 	bl	800d2ca <get_fat>
 800d73c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d00e      	beq.n	800d762 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	2b01      	cmp	r3, #1
 800d748:	d003      	beq.n	800d752 <create_chain+0xa6>
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d750:	d101      	bne.n	800d756 <create_chain+0xaa>
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	e03e      	b.n	800d7d4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d756:	69fa      	ldr	r2, [r7, #28]
 800d758:	69bb      	ldr	r3, [r7, #24]
 800d75a:	429a      	cmp	r2, r3
 800d75c:	d1da      	bne.n	800d714 <create_chain+0x68>
 800d75e:	2300      	movs	r3, #0
 800d760:	e038      	b.n	800d7d4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d762:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d764:	f04f 32ff 	mov.w	r2, #4294967295
 800d768:	69f9      	ldr	r1, [r7, #28]
 800d76a:	6938      	ldr	r0, [r7, #16]
 800d76c:	f7ff fe52 	bl	800d414 <put_fat>
 800d770:	4603      	mov	r3, r0
 800d772:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d774:	7dfb      	ldrb	r3, [r7, #23]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d109      	bne.n	800d78e <create_chain+0xe2>
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d006      	beq.n	800d78e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d780:	69fa      	ldr	r2, [r7, #28]
 800d782:	6839      	ldr	r1, [r7, #0]
 800d784:	6938      	ldr	r0, [r7, #16]
 800d786:	f7ff fe45 	bl	800d414 <put_fat>
 800d78a:	4603      	mov	r3, r0
 800d78c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d78e:	7dfb      	ldrb	r3, [r7, #23]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d116      	bne.n	800d7c2 <create_chain+0x116>
		fs->last_clst = ncl;
 800d794:	693b      	ldr	r3, [r7, #16]
 800d796:	69fa      	ldr	r2, [r7, #28]
 800d798:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d79a:	693b      	ldr	r3, [r7, #16]
 800d79c:	695a      	ldr	r2, [r3, #20]
 800d79e:	693b      	ldr	r3, [r7, #16]
 800d7a0:	699b      	ldr	r3, [r3, #24]
 800d7a2:	3b02      	subs	r3, #2
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d804      	bhi.n	800d7b2 <create_chain+0x106>
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	695b      	ldr	r3, [r3, #20]
 800d7ac:	1e5a      	subs	r2, r3, #1
 800d7ae:	693b      	ldr	r3, [r7, #16]
 800d7b0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	791b      	ldrb	r3, [r3, #4]
 800d7b6:	f043 0301 	orr.w	r3, r3, #1
 800d7ba:	b2da      	uxtb	r2, r3
 800d7bc:	693b      	ldr	r3, [r7, #16]
 800d7be:	711a      	strb	r2, [r3, #4]
 800d7c0:	e007      	b.n	800d7d2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d7c2:	7dfb      	ldrb	r3, [r7, #23]
 800d7c4:	2b01      	cmp	r3, #1
 800d7c6:	d102      	bne.n	800d7ce <create_chain+0x122>
 800d7c8:	f04f 33ff 	mov.w	r3, #4294967295
 800d7cc:	e000      	b.n	800d7d0 <create_chain+0x124>
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d7d2:	69fb      	ldr	r3, [r7, #28]
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3720      	adds	r7, #32
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}

0800d7dc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d7dc:	b480      	push	{r7}
 800d7de:	b087      	sub	sp, #28
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7f0:	3304      	adds	r3, #4
 800d7f2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	0a5b      	lsrs	r3, r3, #9
 800d7f8:	68fa      	ldr	r2, [r7, #12]
 800d7fa:	8952      	ldrh	r2, [r2, #10]
 800d7fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d800:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	1d1a      	adds	r2, r3, #4
 800d806:	613a      	str	r2, [r7, #16]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d101      	bne.n	800d816 <clmt_clust+0x3a>
 800d812:	2300      	movs	r3, #0
 800d814:	e010      	b.n	800d838 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d816:	697a      	ldr	r2, [r7, #20]
 800d818:	68bb      	ldr	r3, [r7, #8]
 800d81a:	429a      	cmp	r2, r3
 800d81c:	d307      	bcc.n	800d82e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d81e:	697a      	ldr	r2, [r7, #20]
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	1ad3      	subs	r3, r2, r3
 800d824:	617b      	str	r3, [r7, #20]
 800d826:	693b      	ldr	r3, [r7, #16]
 800d828:	3304      	adds	r3, #4
 800d82a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d82c:	e7e9      	b.n	800d802 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d82e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d830:	693b      	ldr	r3, [r7, #16]
 800d832:	681a      	ldr	r2, [r3, #0]
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	4413      	add	r3, r2
}
 800d838:	4618      	mov	r0, r3
 800d83a:	371c      	adds	r7, #28
 800d83c:	46bd      	mov	sp, r7
 800d83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d842:	4770      	bx	lr

0800d844 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b086      	sub	sp, #24
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
 800d84c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d85a:	d204      	bcs.n	800d866 <dir_sdi+0x22>
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	f003 031f 	and.w	r3, r3, #31
 800d862:	2b00      	cmp	r3, #0
 800d864:	d001      	beq.n	800d86a <dir_sdi+0x26>
		return FR_INT_ERR;
 800d866:	2302      	movs	r3, #2
 800d868:	e063      	b.n	800d932 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	683a      	ldr	r2, [r7, #0]
 800d86e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	689b      	ldr	r3, [r3, #8]
 800d874:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d106      	bne.n	800d88a <dir_sdi+0x46>
 800d87c:	693b      	ldr	r3, [r7, #16]
 800d87e:	781b      	ldrb	r3, [r3, #0]
 800d880:	2b02      	cmp	r3, #2
 800d882:	d902      	bls.n	800d88a <dir_sdi+0x46>
		clst = fs->dirbase;
 800d884:	693b      	ldr	r3, [r7, #16]
 800d886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d888:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d10c      	bne.n	800d8aa <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	095b      	lsrs	r3, r3, #5
 800d894:	693a      	ldr	r2, [r7, #16]
 800d896:	8912      	ldrh	r2, [r2, #8]
 800d898:	4293      	cmp	r3, r2
 800d89a:	d301      	bcc.n	800d8a0 <dir_sdi+0x5c>
 800d89c:	2302      	movs	r3, #2
 800d89e:	e048      	b.n	800d932 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d8a0:	693b      	ldr	r3, [r7, #16]
 800d8a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	61da      	str	r2, [r3, #28]
 800d8a8:	e029      	b.n	800d8fe <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d8aa:	693b      	ldr	r3, [r7, #16]
 800d8ac:	895b      	ldrh	r3, [r3, #10]
 800d8ae:	025b      	lsls	r3, r3, #9
 800d8b0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d8b2:	e019      	b.n	800d8e8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	6979      	ldr	r1, [r7, #20]
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	f7ff fd06 	bl	800d2ca <get_fat>
 800d8be:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d8c0:	697b      	ldr	r3, [r7, #20]
 800d8c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8c6:	d101      	bne.n	800d8cc <dir_sdi+0x88>
 800d8c8:	2301      	movs	r3, #1
 800d8ca:	e032      	b.n	800d932 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d8cc:	697b      	ldr	r3, [r7, #20]
 800d8ce:	2b01      	cmp	r3, #1
 800d8d0:	d904      	bls.n	800d8dc <dir_sdi+0x98>
 800d8d2:	693b      	ldr	r3, [r7, #16]
 800d8d4:	699b      	ldr	r3, [r3, #24]
 800d8d6:	697a      	ldr	r2, [r7, #20]
 800d8d8:	429a      	cmp	r2, r3
 800d8da:	d301      	bcc.n	800d8e0 <dir_sdi+0x9c>
 800d8dc:	2302      	movs	r3, #2
 800d8de:	e028      	b.n	800d932 <dir_sdi+0xee>
			ofs -= csz;
 800d8e0:	683a      	ldr	r2, [r7, #0]
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	1ad3      	subs	r3, r2, r3
 800d8e6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d8e8:	683a      	ldr	r2, [r7, #0]
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	d2e1      	bcs.n	800d8b4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d8f0:	6979      	ldr	r1, [r7, #20]
 800d8f2:	6938      	ldr	r0, [r7, #16]
 800d8f4:	f7ff fcca 	bl	800d28c <clust2sect>
 800d8f8:	4602      	mov	r2, r0
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	697a      	ldr	r2, [r7, #20]
 800d902:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	69db      	ldr	r3, [r3, #28]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d101      	bne.n	800d910 <dir_sdi+0xcc>
 800d90c:	2302      	movs	r3, #2
 800d90e:	e010      	b.n	800d932 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	69da      	ldr	r2, [r3, #28]
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	0a5b      	lsrs	r3, r3, #9
 800d918:	441a      	add	r2, r3
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d91e:	693b      	ldr	r3, [r7, #16]
 800d920:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d92a:	441a      	add	r2, r3
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d930:	2300      	movs	r3, #0
}
 800d932:	4618      	mov	r0, r3
 800d934:	3718      	adds	r7, #24
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}

0800d93a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d93a:	b580      	push	{r7, lr}
 800d93c:	b086      	sub	sp, #24
 800d93e:	af00      	add	r7, sp, #0
 800d940:	6078      	str	r0, [r7, #4]
 800d942:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	695b      	ldr	r3, [r3, #20]
 800d94e:	3320      	adds	r3, #32
 800d950:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	69db      	ldr	r3, [r3, #28]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d003      	beq.n	800d962 <dir_next+0x28>
 800d95a:	68bb      	ldr	r3, [r7, #8]
 800d95c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d960:	d301      	bcc.n	800d966 <dir_next+0x2c>
 800d962:	2304      	movs	r3, #4
 800d964:	e0aa      	b.n	800dabc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d966:	68bb      	ldr	r3, [r7, #8]
 800d968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	f040 8098 	bne.w	800daa2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	69db      	ldr	r3, [r3, #28]
 800d976:	1c5a      	adds	r2, r3, #1
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	699b      	ldr	r3, [r3, #24]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d10b      	bne.n	800d99c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	095b      	lsrs	r3, r3, #5
 800d988:	68fa      	ldr	r2, [r7, #12]
 800d98a:	8912      	ldrh	r2, [r2, #8]
 800d98c:	4293      	cmp	r3, r2
 800d98e:	f0c0 8088 	bcc.w	800daa2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2200      	movs	r2, #0
 800d996:	61da      	str	r2, [r3, #28]
 800d998:	2304      	movs	r3, #4
 800d99a:	e08f      	b.n	800dabc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	0a5b      	lsrs	r3, r3, #9
 800d9a0:	68fa      	ldr	r2, [r7, #12]
 800d9a2:	8952      	ldrh	r2, [r2, #10]
 800d9a4:	3a01      	subs	r2, #1
 800d9a6:	4013      	ands	r3, r2
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d17a      	bne.n	800daa2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d9ac:	687a      	ldr	r2, [r7, #4]
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	699b      	ldr	r3, [r3, #24]
 800d9b2:	4619      	mov	r1, r3
 800d9b4:	4610      	mov	r0, r2
 800d9b6:	f7ff fc88 	bl	800d2ca <get_fat>
 800d9ba:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	2b01      	cmp	r3, #1
 800d9c0:	d801      	bhi.n	800d9c6 <dir_next+0x8c>
 800d9c2:	2302      	movs	r3, #2
 800d9c4:	e07a      	b.n	800dabc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d9c6:	697b      	ldr	r3, [r7, #20]
 800d9c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9cc:	d101      	bne.n	800d9d2 <dir_next+0x98>
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	e074      	b.n	800dabc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	699b      	ldr	r3, [r3, #24]
 800d9d6:	697a      	ldr	r2, [r7, #20]
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d358      	bcc.n	800da8e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d104      	bne.n	800d9ec <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	61da      	str	r2, [r3, #28]
 800d9e8:	2304      	movs	r3, #4
 800d9ea:	e067      	b.n	800dabc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d9ec:	687a      	ldr	r2, [r7, #4]
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	699b      	ldr	r3, [r3, #24]
 800d9f2:	4619      	mov	r1, r3
 800d9f4:	4610      	mov	r0, r2
 800d9f6:	f7ff fe59 	bl	800d6ac <create_chain>
 800d9fa:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d9fc:	697b      	ldr	r3, [r7, #20]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d101      	bne.n	800da06 <dir_next+0xcc>
 800da02:	2307      	movs	r3, #7
 800da04:	e05a      	b.n	800dabc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800da06:	697b      	ldr	r3, [r7, #20]
 800da08:	2b01      	cmp	r3, #1
 800da0a:	d101      	bne.n	800da10 <dir_next+0xd6>
 800da0c:	2302      	movs	r3, #2
 800da0e:	e055      	b.n	800dabc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da16:	d101      	bne.n	800da1c <dir_next+0xe2>
 800da18:	2301      	movs	r3, #1
 800da1a:	e04f      	b.n	800dabc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800da1c:	68f8      	ldr	r0, [r7, #12]
 800da1e:	f7ff fb55 	bl	800d0cc <sync_window>
 800da22:	4603      	mov	r3, r0
 800da24:	2b00      	cmp	r3, #0
 800da26:	d001      	beq.n	800da2c <dir_next+0xf2>
 800da28:	2301      	movs	r3, #1
 800da2a:	e047      	b.n	800dabc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	3334      	adds	r3, #52	; 0x34
 800da30:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da34:	2100      	movs	r1, #0
 800da36:	4618      	mov	r0, r3
 800da38:	f7ff f94f 	bl	800ccda <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800da3c:	2300      	movs	r3, #0
 800da3e:	613b      	str	r3, [r7, #16]
 800da40:	6979      	ldr	r1, [r7, #20]
 800da42:	68f8      	ldr	r0, [r7, #12]
 800da44:	f7ff fc22 	bl	800d28c <clust2sect>
 800da48:	4602      	mov	r2, r0
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	631a      	str	r2, [r3, #48]	; 0x30
 800da4e:	e012      	b.n	800da76 <dir_next+0x13c>
						fs->wflag = 1;
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	2201      	movs	r2, #1
 800da54:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800da56:	68f8      	ldr	r0, [r7, #12]
 800da58:	f7ff fb38 	bl	800d0cc <sync_window>
 800da5c:	4603      	mov	r3, r0
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d001      	beq.n	800da66 <dir_next+0x12c>
 800da62:	2301      	movs	r3, #1
 800da64:	e02a      	b.n	800dabc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800da66:	693b      	ldr	r3, [r7, #16]
 800da68:	3301      	adds	r3, #1
 800da6a:	613b      	str	r3, [r7, #16]
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da70:	1c5a      	adds	r2, r3, #1
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	631a      	str	r2, [r3, #48]	; 0x30
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	895b      	ldrh	r3, [r3, #10]
 800da7a:	461a      	mov	r2, r3
 800da7c:	693b      	ldr	r3, [r7, #16]
 800da7e:	4293      	cmp	r3, r2
 800da80:	d3e6      	bcc.n	800da50 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800da86:	693b      	ldr	r3, [r7, #16]
 800da88:	1ad2      	subs	r2, r2, r3
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	697a      	ldr	r2, [r7, #20]
 800da92:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800da94:	6979      	ldr	r1, [r7, #20]
 800da96:	68f8      	ldr	r0, [r7, #12]
 800da98:	f7ff fbf8 	bl	800d28c <clust2sect>
 800da9c:	4602      	mov	r2, r0
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	68ba      	ldr	r2, [r7, #8]
 800daa6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800daae:	68bb      	ldr	r3, [r7, #8]
 800dab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dab4:	441a      	add	r2, r3
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800daba:	2300      	movs	r3, #0
}
 800dabc:	4618      	mov	r0, r3
 800dabe:	3718      	adds	r7, #24
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}

0800dac4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b086      	sub	sp, #24
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
 800dacc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800dad4:	2100      	movs	r1, #0
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f7ff feb4 	bl	800d844 <dir_sdi>
 800dadc:	4603      	mov	r3, r0
 800dade:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dae0:	7dfb      	ldrb	r3, [r7, #23]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d12b      	bne.n	800db3e <dir_alloc+0x7a>
		n = 0;
 800dae6:	2300      	movs	r3, #0
 800dae8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	69db      	ldr	r3, [r3, #28]
 800daee:	4619      	mov	r1, r3
 800daf0:	68f8      	ldr	r0, [r7, #12]
 800daf2:	f7ff fb2f 	bl	800d154 <move_window>
 800daf6:	4603      	mov	r3, r0
 800daf8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dafa:	7dfb      	ldrb	r3, [r7, #23]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d11d      	bne.n	800db3c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	6a1b      	ldr	r3, [r3, #32]
 800db04:	781b      	ldrb	r3, [r3, #0]
 800db06:	2be5      	cmp	r3, #229	; 0xe5
 800db08:	d004      	beq.n	800db14 <dir_alloc+0x50>
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6a1b      	ldr	r3, [r3, #32]
 800db0e:	781b      	ldrb	r3, [r3, #0]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d107      	bne.n	800db24 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800db14:	693b      	ldr	r3, [r7, #16]
 800db16:	3301      	adds	r3, #1
 800db18:	613b      	str	r3, [r7, #16]
 800db1a:	693a      	ldr	r2, [r7, #16]
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	429a      	cmp	r2, r3
 800db20:	d102      	bne.n	800db28 <dir_alloc+0x64>
 800db22:	e00c      	b.n	800db3e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800db24:	2300      	movs	r3, #0
 800db26:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800db28:	2101      	movs	r1, #1
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f7ff ff05 	bl	800d93a <dir_next>
 800db30:	4603      	mov	r3, r0
 800db32:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800db34:	7dfb      	ldrb	r3, [r7, #23]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d0d7      	beq.n	800daea <dir_alloc+0x26>
 800db3a:	e000      	b.n	800db3e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800db3c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800db3e:	7dfb      	ldrb	r3, [r7, #23]
 800db40:	2b04      	cmp	r3, #4
 800db42:	d101      	bne.n	800db48 <dir_alloc+0x84>
 800db44:	2307      	movs	r3, #7
 800db46:	75fb      	strb	r3, [r7, #23]
	return res;
 800db48:	7dfb      	ldrb	r3, [r7, #23]
}
 800db4a:	4618      	mov	r0, r3
 800db4c:	3718      	adds	r7, #24
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}

0800db52 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800db52:	b580      	push	{r7, lr}
 800db54:	b084      	sub	sp, #16
 800db56:	af00      	add	r7, sp, #0
 800db58:	6078      	str	r0, [r7, #4]
 800db5a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	331a      	adds	r3, #26
 800db60:	4618      	mov	r0, r3
 800db62:	f7ff f817 	bl	800cb94 <ld_word>
 800db66:	4603      	mov	r3, r0
 800db68:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	781b      	ldrb	r3, [r3, #0]
 800db6e:	2b03      	cmp	r3, #3
 800db70:	d109      	bne.n	800db86 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	3314      	adds	r3, #20
 800db76:	4618      	mov	r0, r3
 800db78:	f7ff f80c 	bl	800cb94 <ld_word>
 800db7c:	4603      	mov	r3, r0
 800db7e:	041b      	lsls	r3, r3, #16
 800db80:	68fa      	ldr	r2, [r7, #12]
 800db82:	4313      	orrs	r3, r2
 800db84:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800db86:	68fb      	ldr	r3, [r7, #12]
}
 800db88:	4618      	mov	r0, r3
 800db8a:	3710      	adds	r7, #16
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}

0800db90 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b084      	sub	sp, #16
 800db94:	af00      	add	r7, sp, #0
 800db96:	60f8      	str	r0, [r7, #12]
 800db98:	60b9      	str	r1, [r7, #8]
 800db9a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	331a      	adds	r3, #26
 800dba0:	687a      	ldr	r2, [r7, #4]
 800dba2:	b292      	uxth	r2, r2
 800dba4:	4611      	mov	r1, r2
 800dba6:	4618      	mov	r0, r3
 800dba8:	f7ff f82f 	bl	800cc0a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	781b      	ldrb	r3, [r3, #0]
 800dbb0:	2b03      	cmp	r3, #3
 800dbb2:	d109      	bne.n	800dbc8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	f103 0214 	add.w	r2, r3, #20
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	0c1b      	lsrs	r3, r3, #16
 800dbbe:	b29b      	uxth	r3, r3
 800dbc0:	4619      	mov	r1, r3
 800dbc2:	4610      	mov	r0, r2
 800dbc4:	f7ff f821 	bl	800cc0a <st_word>
	}
}
 800dbc8:	bf00      	nop
 800dbca:	3710      	adds	r7, #16
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}

0800dbd0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b086      	sub	sp, #24
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800dbde:	2100      	movs	r1, #0
 800dbe0:	6878      	ldr	r0, [r7, #4]
 800dbe2:	f7ff fe2f 	bl	800d844 <dir_sdi>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800dbea:	7dfb      	ldrb	r3, [r7, #23]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d001      	beq.n	800dbf4 <dir_find+0x24>
 800dbf0:	7dfb      	ldrb	r3, [r7, #23]
 800dbf2:	e03e      	b.n	800dc72 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	69db      	ldr	r3, [r3, #28]
 800dbf8:	4619      	mov	r1, r3
 800dbfa:	6938      	ldr	r0, [r7, #16]
 800dbfc:	f7ff faaa 	bl	800d154 <move_window>
 800dc00:	4603      	mov	r3, r0
 800dc02:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800dc04:	7dfb      	ldrb	r3, [r7, #23]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d12f      	bne.n	800dc6a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	6a1b      	ldr	r3, [r3, #32]
 800dc0e:	781b      	ldrb	r3, [r3, #0]
 800dc10:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800dc12:	7bfb      	ldrb	r3, [r7, #15]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d102      	bne.n	800dc1e <dir_find+0x4e>
 800dc18:	2304      	movs	r3, #4
 800dc1a:	75fb      	strb	r3, [r7, #23]
 800dc1c:	e028      	b.n	800dc70 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	6a1b      	ldr	r3, [r3, #32]
 800dc22:	330b      	adds	r3, #11
 800dc24:	781b      	ldrb	r3, [r3, #0]
 800dc26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dc2a:	b2da      	uxtb	r2, r3
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6a1b      	ldr	r3, [r3, #32]
 800dc34:	330b      	adds	r3, #11
 800dc36:	781b      	ldrb	r3, [r3, #0]
 800dc38:	f003 0308 	and.w	r3, r3, #8
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d10a      	bne.n	800dc56 <dir_find+0x86>
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	6a18      	ldr	r0, [r3, #32]
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	3324      	adds	r3, #36	; 0x24
 800dc48:	220b      	movs	r2, #11
 800dc4a:	4619      	mov	r1, r3
 800dc4c:	f7ff f85f 	bl	800cd0e <mem_cmp>
 800dc50:	4603      	mov	r3, r0
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d00b      	beq.n	800dc6e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800dc56:	2100      	movs	r1, #0
 800dc58:	6878      	ldr	r0, [r7, #4]
 800dc5a:	f7ff fe6e 	bl	800d93a <dir_next>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800dc62:	7dfb      	ldrb	r3, [r7, #23]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d0c5      	beq.n	800dbf4 <dir_find+0x24>
 800dc68:	e002      	b.n	800dc70 <dir_find+0xa0>
		if (res != FR_OK) break;
 800dc6a:	bf00      	nop
 800dc6c:	e000      	b.n	800dc70 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800dc6e:	bf00      	nop

	return res;
 800dc70:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc72:	4618      	mov	r0, r3
 800dc74:	3718      	adds	r7, #24
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}

0800dc7a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800dc7a:	b580      	push	{r7, lr}
 800dc7c:	b084      	sub	sp, #16
 800dc7e:	af00      	add	r7, sp, #0
 800dc80:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800dc88:	2101      	movs	r1, #1
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f7ff ff1a 	bl	800dac4 <dir_alloc>
 800dc90:	4603      	mov	r3, r0
 800dc92:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800dc94:	7bfb      	ldrb	r3, [r7, #15]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d11c      	bne.n	800dcd4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	69db      	ldr	r3, [r3, #28]
 800dc9e:	4619      	mov	r1, r3
 800dca0:	68b8      	ldr	r0, [r7, #8]
 800dca2:	f7ff fa57 	bl	800d154 <move_window>
 800dca6:	4603      	mov	r3, r0
 800dca8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800dcaa:	7bfb      	ldrb	r3, [r7, #15]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d111      	bne.n	800dcd4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6a1b      	ldr	r3, [r3, #32]
 800dcb4:	2220      	movs	r2, #32
 800dcb6:	2100      	movs	r1, #0
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f7ff f80e 	bl	800ccda <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	6a18      	ldr	r0, [r3, #32]
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	3324      	adds	r3, #36	; 0x24
 800dcc6:	220b      	movs	r2, #11
 800dcc8:	4619      	mov	r1, r3
 800dcca:	f7fe ffe5 	bl	800cc98 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	2201      	movs	r2, #1
 800dcd2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800dcd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	3710      	adds	r7, #16
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}
	...

0800dce0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b088      	sub	sp, #32
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
 800dce8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	60fb      	str	r3, [r7, #12]
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	3324      	adds	r3, #36	; 0x24
 800dcf4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800dcf6:	220b      	movs	r2, #11
 800dcf8:	2120      	movs	r1, #32
 800dcfa:	68b8      	ldr	r0, [r7, #8]
 800dcfc:	f7fe ffed 	bl	800ccda <mem_set>
	si = i = 0; ni = 8;
 800dd00:	2300      	movs	r3, #0
 800dd02:	613b      	str	r3, [r7, #16]
 800dd04:	693b      	ldr	r3, [r7, #16]
 800dd06:	617b      	str	r3, [r7, #20]
 800dd08:	2308      	movs	r3, #8
 800dd0a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800dd0c:	697b      	ldr	r3, [r7, #20]
 800dd0e:	1c5a      	adds	r2, r3, #1
 800dd10:	617a      	str	r2, [r7, #20]
 800dd12:	68fa      	ldr	r2, [r7, #12]
 800dd14:	4413      	add	r3, r2
 800dd16:	781b      	ldrb	r3, [r3, #0]
 800dd18:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800dd1a:	7ffb      	ldrb	r3, [r7, #31]
 800dd1c:	2b20      	cmp	r3, #32
 800dd1e:	d94e      	bls.n	800ddbe <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800dd20:	7ffb      	ldrb	r3, [r7, #31]
 800dd22:	2b2f      	cmp	r3, #47	; 0x2f
 800dd24:	d006      	beq.n	800dd34 <create_name+0x54>
 800dd26:	7ffb      	ldrb	r3, [r7, #31]
 800dd28:	2b5c      	cmp	r3, #92	; 0x5c
 800dd2a:	d110      	bne.n	800dd4e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800dd2c:	e002      	b.n	800dd34 <create_name+0x54>
 800dd2e:	697b      	ldr	r3, [r7, #20]
 800dd30:	3301      	adds	r3, #1
 800dd32:	617b      	str	r3, [r7, #20]
 800dd34:	68fa      	ldr	r2, [r7, #12]
 800dd36:	697b      	ldr	r3, [r7, #20]
 800dd38:	4413      	add	r3, r2
 800dd3a:	781b      	ldrb	r3, [r3, #0]
 800dd3c:	2b2f      	cmp	r3, #47	; 0x2f
 800dd3e:	d0f6      	beq.n	800dd2e <create_name+0x4e>
 800dd40:	68fa      	ldr	r2, [r7, #12]
 800dd42:	697b      	ldr	r3, [r7, #20]
 800dd44:	4413      	add	r3, r2
 800dd46:	781b      	ldrb	r3, [r3, #0]
 800dd48:	2b5c      	cmp	r3, #92	; 0x5c
 800dd4a:	d0f0      	beq.n	800dd2e <create_name+0x4e>
			break;
 800dd4c:	e038      	b.n	800ddc0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800dd4e:	7ffb      	ldrb	r3, [r7, #31]
 800dd50:	2b2e      	cmp	r3, #46	; 0x2e
 800dd52:	d003      	beq.n	800dd5c <create_name+0x7c>
 800dd54:	693a      	ldr	r2, [r7, #16]
 800dd56:	69bb      	ldr	r3, [r7, #24]
 800dd58:	429a      	cmp	r2, r3
 800dd5a:	d30c      	bcc.n	800dd76 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800dd5c:	69bb      	ldr	r3, [r7, #24]
 800dd5e:	2b0b      	cmp	r3, #11
 800dd60:	d002      	beq.n	800dd68 <create_name+0x88>
 800dd62:	7ffb      	ldrb	r3, [r7, #31]
 800dd64:	2b2e      	cmp	r3, #46	; 0x2e
 800dd66:	d001      	beq.n	800dd6c <create_name+0x8c>
 800dd68:	2306      	movs	r3, #6
 800dd6a:	e044      	b.n	800ddf6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800dd6c:	2308      	movs	r3, #8
 800dd6e:	613b      	str	r3, [r7, #16]
 800dd70:	230b      	movs	r3, #11
 800dd72:	61bb      	str	r3, [r7, #24]
			continue;
 800dd74:	e022      	b.n	800ddbc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800dd76:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	da04      	bge.n	800dd88 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800dd7e:	7ffb      	ldrb	r3, [r7, #31]
 800dd80:	3b80      	subs	r3, #128	; 0x80
 800dd82:	4a1f      	ldr	r2, [pc, #124]	; (800de00 <create_name+0x120>)
 800dd84:	5cd3      	ldrb	r3, [r2, r3]
 800dd86:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800dd88:	7ffb      	ldrb	r3, [r7, #31]
 800dd8a:	4619      	mov	r1, r3
 800dd8c:	481d      	ldr	r0, [pc, #116]	; (800de04 <create_name+0x124>)
 800dd8e:	f7fe ffe5 	bl	800cd5c <chk_chr>
 800dd92:	4603      	mov	r3, r0
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d001      	beq.n	800dd9c <create_name+0xbc>
 800dd98:	2306      	movs	r3, #6
 800dd9a:	e02c      	b.n	800ddf6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800dd9c:	7ffb      	ldrb	r3, [r7, #31]
 800dd9e:	2b60      	cmp	r3, #96	; 0x60
 800dda0:	d905      	bls.n	800ddae <create_name+0xce>
 800dda2:	7ffb      	ldrb	r3, [r7, #31]
 800dda4:	2b7a      	cmp	r3, #122	; 0x7a
 800dda6:	d802      	bhi.n	800ddae <create_name+0xce>
 800dda8:	7ffb      	ldrb	r3, [r7, #31]
 800ddaa:	3b20      	subs	r3, #32
 800ddac:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800ddae:	693b      	ldr	r3, [r7, #16]
 800ddb0:	1c5a      	adds	r2, r3, #1
 800ddb2:	613a      	str	r2, [r7, #16]
 800ddb4:	68ba      	ldr	r2, [r7, #8]
 800ddb6:	4413      	add	r3, r2
 800ddb8:	7ffa      	ldrb	r2, [r7, #31]
 800ddba:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ddbc:	e7a6      	b.n	800dd0c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ddbe:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ddc0:	68fa      	ldr	r2, [r7, #12]
 800ddc2:	697b      	ldr	r3, [r7, #20]
 800ddc4:	441a      	add	r2, r3
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ddca:	693b      	ldr	r3, [r7, #16]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d101      	bne.n	800ddd4 <create_name+0xf4>
 800ddd0:	2306      	movs	r3, #6
 800ddd2:	e010      	b.n	800ddf6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	781b      	ldrb	r3, [r3, #0]
 800ddd8:	2be5      	cmp	r3, #229	; 0xe5
 800ddda:	d102      	bne.n	800dde2 <create_name+0x102>
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	2205      	movs	r2, #5
 800dde0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800dde2:	7ffb      	ldrb	r3, [r7, #31]
 800dde4:	2b20      	cmp	r3, #32
 800dde6:	d801      	bhi.n	800ddec <create_name+0x10c>
 800dde8:	2204      	movs	r2, #4
 800ddea:	e000      	b.n	800ddee <create_name+0x10e>
 800ddec:	2200      	movs	r2, #0
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	330b      	adds	r3, #11
 800ddf2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ddf4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3720      	adds	r7, #32
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}
 800ddfe:	bf00      	nop
 800de00:	08015e9c 	.word	0x08015e9c
 800de04:	08015dd0 	.word	0x08015dd0

0800de08 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b086      	sub	sp, #24
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
 800de10:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800de16:	693b      	ldr	r3, [r7, #16]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800de1c:	e002      	b.n	800de24 <follow_path+0x1c>
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	3301      	adds	r3, #1
 800de22:	603b      	str	r3, [r7, #0]
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	781b      	ldrb	r3, [r3, #0]
 800de28:	2b2f      	cmp	r3, #47	; 0x2f
 800de2a:	d0f8      	beq.n	800de1e <follow_path+0x16>
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	781b      	ldrb	r3, [r3, #0]
 800de30:	2b5c      	cmp	r3, #92	; 0x5c
 800de32:	d0f4      	beq.n	800de1e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800de34:	693b      	ldr	r3, [r7, #16]
 800de36:	2200      	movs	r2, #0
 800de38:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	781b      	ldrb	r3, [r3, #0]
 800de3e:	2b1f      	cmp	r3, #31
 800de40:	d80a      	bhi.n	800de58 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2280      	movs	r2, #128	; 0x80
 800de46:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800de4a:	2100      	movs	r1, #0
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	f7ff fcf9 	bl	800d844 <dir_sdi>
 800de52:	4603      	mov	r3, r0
 800de54:	75fb      	strb	r3, [r7, #23]
 800de56:	e043      	b.n	800dee0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800de58:	463b      	mov	r3, r7
 800de5a:	4619      	mov	r1, r3
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	f7ff ff3f 	bl	800dce0 <create_name>
 800de62:	4603      	mov	r3, r0
 800de64:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800de66:	7dfb      	ldrb	r3, [r7, #23]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d134      	bne.n	800ded6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f7ff feaf 	bl	800dbd0 <dir_find>
 800de72:	4603      	mov	r3, r0
 800de74:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800de7c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800de7e:	7dfb      	ldrb	r3, [r7, #23]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d00a      	beq.n	800de9a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800de84:	7dfb      	ldrb	r3, [r7, #23]
 800de86:	2b04      	cmp	r3, #4
 800de88:	d127      	bne.n	800deda <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800de8a:	7afb      	ldrb	r3, [r7, #11]
 800de8c:	f003 0304 	and.w	r3, r3, #4
 800de90:	2b00      	cmp	r3, #0
 800de92:	d122      	bne.n	800deda <follow_path+0xd2>
 800de94:	2305      	movs	r3, #5
 800de96:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800de98:	e01f      	b.n	800deda <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800de9a:	7afb      	ldrb	r3, [r7, #11]
 800de9c:	f003 0304 	and.w	r3, r3, #4
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d11c      	bne.n	800dede <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800dea4:	693b      	ldr	r3, [r7, #16]
 800dea6:	799b      	ldrb	r3, [r3, #6]
 800dea8:	f003 0310 	and.w	r3, r3, #16
 800deac:	2b00      	cmp	r3, #0
 800deae:	d102      	bne.n	800deb6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800deb0:	2305      	movs	r3, #5
 800deb2:	75fb      	strb	r3, [r7, #23]
 800deb4:	e014      	b.n	800dee0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	695b      	ldr	r3, [r3, #20]
 800dec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dec4:	4413      	add	r3, r2
 800dec6:	4619      	mov	r1, r3
 800dec8:	68f8      	ldr	r0, [r7, #12]
 800deca:	f7ff fe42 	bl	800db52 <ld_clust>
 800dece:	4602      	mov	r2, r0
 800ded0:	693b      	ldr	r3, [r7, #16]
 800ded2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ded4:	e7c0      	b.n	800de58 <follow_path+0x50>
			if (res != FR_OK) break;
 800ded6:	bf00      	nop
 800ded8:	e002      	b.n	800dee0 <follow_path+0xd8>
				break;
 800deda:	bf00      	nop
 800dedc:	e000      	b.n	800dee0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dede:	bf00      	nop
			}
		}
	}

	return res;
 800dee0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dee2:	4618      	mov	r0, r3
 800dee4:	3718      	adds	r7, #24
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}

0800deea <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800deea:	b480      	push	{r7}
 800deec:	b087      	sub	sp, #28
 800deee:	af00      	add	r7, sp, #0
 800def0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800def2:	f04f 33ff 	mov.w	r3, #4294967295
 800def6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d031      	beq.n	800df64 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	617b      	str	r3, [r7, #20]
 800df06:	e002      	b.n	800df0e <get_ldnumber+0x24>
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	3301      	adds	r3, #1
 800df0c:	617b      	str	r3, [r7, #20]
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	781b      	ldrb	r3, [r3, #0]
 800df12:	2b20      	cmp	r3, #32
 800df14:	d903      	bls.n	800df1e <get_ldnumber+0x34>
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	781b      	ldrb	r3, [r3, #0]
 800df1a:	2b3a      	cmp	r3, #58	; 0x3a
 800df1c:	d1f4      	bne.n	800df08 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800df1e:	697b      	ldr	r3, [r7, #20]
 800df20:	781b      	ldrb	r3, [r3, #0]
 800df22:	2b3a      	cmp	r3, #58	; 0x3a
 800df24:	d11c      	bne.n	800df60 <get_ldnumber+0x76>
			tp = *path;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	1c5a      	adds	r2, r3, #1
 800df30:	60fa      	str	r2, [r7, #12]
 800df32:	781b      	ldrb	r3, [r3, #0]
 800df34:	3b30      	subs	r3, #48	; 0x30
 800df36:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	2b09      	cmp	r3, #9
 800df3c:	d80e      	bhi.n	800df5c <get_ldnumber+0x72>
 800df3e:	68fa      	ldr	r2, [r7, #12]
 800df40:	697b      	ldr	r3, [r7, #20]
 800df42:	429a      	cmp	r2, r3
 800df44:	d10a      	bne.n	800df5c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d107      	bne.n	800df5c <get_ldnumber+0x72>
					vol = (int)i;
 800df4c:	68bb      	ldr	r3, [r7, #8]
 800df4e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	3301      	adds	r3, #1
 800df54:	617b      	str	r3, [r7, #20]
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	697a      	ldr	r2, [r7, #20]
 800df5a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800df5c:	693b      	ldr	r3, [r7, #16]
 800df5e:	e002      	b.n	800df66 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800df60:	2300      	movs	r3, #0
 800df62:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800df64:	693b      	ldr	r3, [r7, #16]
}
 800df66:	4618      	mov	r0, r3
 800df68:	371c      	adds	r7, #28
 800df6a:	46bd      	mov	sp, r7
 800df6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df70:	4770      	bx	lr
	...

0800df74 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b082      	sub	sp, #8
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
 800df7c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	2200      	movs	r2, #0
 800df82:	70da      	strb	r2, [r3, #3]
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	f04f 32ff 	mov.w	r2, #4294967295
 800df8a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800df8c:	6839      	ldr	r1, [r7, #0]
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f7ff f8e0 	bl	800d154 <move_window>
 800df94:	4603      	mov	r3, r0
 800df96:	2b00      	cmp	r3, #0
 800df98:	d001      	beq.n	800df9e <check_fs+0x2a>
 800df9a:	2304      	movs	r3, #4
 800df9c:	e038      	b.n	800e010 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	3334      	adds	r3, #52	; 0x34
 800dfa2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f7fe fdf4 	bl	800cb94 <ld_word>
 800dfac:	4603      	mov	r3, r0
 800dfae:	461a      	mov	r2, r3
 800dfb0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800dfb4:	429a      	cmp	r2, r3
 800dfb6:	d001      	beq.n	800dfbc <check_fs+0x48>
 800dfb8:	2303      	movs	r3, #3
 800dfba:	e029      	b.n	800e010 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dfc2:	2be9      	cmp	r3, #233	; 0xe9
 800dfc4:	d009      	beq.n	800dfda <check_fs+0x66>
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dfcc:	2beb      	cmp	r3, #235	; 0xeb
 800dfce:	d11e      	bne.n	800e00e <check_fs+0x9a>
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800dfd6:	2b90      	cmp	r3, #144	; 0x90
 800dfd8:	d119      	bne.n	800e00e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	3334      	adds	r3, #52	; 0x34
 800dfde:	3336      	adds	r3, #54	; 0x36
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	f7fe fdef 	bl	800cbc4 <ld_dword>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800dfec:	4a0a      	ldr	r2, [pc, #40]	; (800e018 <check_fs+0xa4>)
 800dfee:	4293      	cmp	r3, r2
 800dff0:	d101      	bne.n	800dff6 <check_fs+0x82>
 800dff2:	2300      	movs	r3, #0
 800dff4:	e00c      	b.n	800e010 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	3334      	adds	r3, #52	; 0x34
 800dffa:	3352      	adds	r3, #82	; 0x52
 800dffc:	4618      	mov	r0, r3
 800dffe:	f7fe fde1 	bl	800cbc4 <ld_dword>
 800e002:	4602      	mov	r2, r0
 800e004:	4b05      	ldr	r3, [pc, #20]	; (800e01c <check_fs+0xa8>)
 800e006:	429a      	cmp	r2, r3
 800e008:	d101      	bne.n	800e00e <check_fs+0x9a>
 800e00a:	2300      	movs	r3, #0
 800e00c:	e000      	b.n	800e010 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e00e:	2302      	movs	r3, #2
}
 800e010:	4618      	mov	r0, r3
 800e012:	3708      	adds	r7, #8
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}
 800e018:	00544146 	.word	0x00544146
 800e01c:	33544146 	.word	0x33544146

0800e020 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b096      	sub	sp, #88	; 0x58
 800e024:	af00      	add	r7, sp, #0
 800e026:	60f8      	str	r0, [r7, #12]
 800e028:	60b9      	str	r1, [r7, #8]
 800e02a:	4613      	mov	r3, r2
 800e02c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	2200      	movs	r2, #0
 800e032:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e034:	68f8      	ldr	r0, [r7, #12]
 800e036:	f7ff ff58 	bl	800deea <get_ldnumber>
 800e03a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e03c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e03e:	2b00      	cmp	r3, #0
 800e040:	da01      	bge.n	800e046 <find_volume+0x26>
 800e042:	230b      	movs	r3, #11
 800e044:	e236      	b.n	800e4b4 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e046:	4aac      	ldr	r2, [pc, #688]	; (800e2f8 <find_volume+0x2d8>)
 800e048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e04a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e04e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e052:	2b00      	cmp	r3, #0
 800e054:	d101      	bne.n	800e05a <find_volume+0x3a>
 800e056:	230c      	movs	r3, #12
 800e058:	e22c      	b.n	800e4b4 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800e05a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e05c:	f7fe fe99 	bl	800cd92 <lock_fs>
 800e060:	4603      	mov	r3, r0
 800e062:	2b00      	cmp	r3, #0
 800e064:	d101      	bne.n	800e06a <find_volume+0x4a>
 800e066:	230f      	movs	r3, #15
 800e068:	e224      	b.n	800e4b4 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800e06a:	68bb      	ldr	r3, [r7, #8]
 800e06c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e06e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e070:	79fb      	ldrb	r3, [r7, #7]
 800e072:	f023 0301 	bic.w	r3, r3, #1
 800e076:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e07a:	781b      	ldrb	r3, [r3, #0]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d01a      	beq.n	800e0b6 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800e080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e082:	785b      	ldrb	r3, [r3, #1]
 800e084:	4618      	mov	r0, r3
 800e086:	f7fe fce7 	bl	800ca58 <disk_status>
 800e08a:	4603      	mov	r3, r0
 800e08c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e090:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e094:	f003 0301 	and.w	r3, r3, #1
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d10c      	bne.n	800e0b6 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e09c:	79fb      	ldrb	r3, [r7, #7]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d007      	beq.n	800e0b2 <find_volume+0x92>
 800e0a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e0a6:	f003 0304 	and.w	r3, r3, #4
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d001      	beq.n	800e0b2 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800e0ae:	230a      	movs	r3, #10
 800e0b0:	e200      	b.n	800e4b4 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	e1fe      	b.n	800e4b4 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e0bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0be:	b2da      	uxtb	r2, r3
 800e0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0c2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0c6:	785b      	ldrb	r3, [r3, #1]
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f7fe fcdf 	bl	800ca8c <disk_initialize>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e0d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e0d8:	f003 0301 	and.w	r3, r3, #1
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d001      	beq.n	800e0e4 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e0e0:	2303      	movs	r3, #3
 800e0e2:	e1e7      	b.n	800e4b4 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e0e4:	79fb      	ldrb	r3, [r7, #7]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d007      	beq.n	800e0fa <find_volume+0xda>
 800e0ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e0ee:	f003 0304 	and.w	r3, r3, #4
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d001      	beq.n	800e0fa <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800e0f6:	230a      	movs	r3, #10
 800e0f8:	e1dc      	b.n	800e4b4 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e0fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e100:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e102:	f7ff ff37 	bl	800df74 <check_fs>
 800e106:	4603      	mov	r3, r0
 800e108:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e10c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e110:	2b02      	cmp	r3, #2
 800e112:	d14b      	bne.n	800e1ac <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e114:	2300      	movs	r3, #0
 800e116:	643b      	str	r3, [r7, #64]	; 0x40
 800e118:	e01f      	b.n	800e15a <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e11c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e122:	011b      	lsls	r3, r3, #4
 800e124:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e128:	4413      	add	r3, r2
 800e12a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e12e:	3304      	adds	r3, #4
 800e130:	781b      	ldrb	r3, [r3, #0]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d006      	beq.n	800e144 <find_volume+0x124>
 800e136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e138:	3308      	adds	r3, #8
 800e13a:	4618      	mov	r0, r3
 800e13c:	f7fe fd42 	bl	800cbc4 <ld_dword>
 800e140:	4602      	mov	r2, r0
 800e142:	e000      	b.n	800e146 <find_volume+0x126>
 800e144:	2200      	movs	r2, #0
 800e146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e148:	009b      	lsls	r3, r3, #2
 800e14a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800e14e:	440b      	add	r3, r1
 800e150:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e156:	3301      	adds	r3, #1
 800e158:	643b      	str	r3, [r7, #64]	; 0x40
 800e15a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e15c:	2b03      	cmp	r3, #3
 800e15e:	d9dc      	bls.n	800e11a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e160:	2300      	movs	r3, #0
 800e162:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e166:	2b00      	cmp	r3, #0
 800e168:	d002      	beq.n	800e170 <find_volume+0x150>
 800e16a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e16c:	3b01      	subs	r3, #1
 800e16e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e172:	009b      	lsls	r3, r3, #2
 800e174:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800e178:	4413      	add	r3, r2
 800e17a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e17e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e182:	2b00      	cmp	r3, #0
 800e184:	d005      	beq.n	800e192 <find_volume+0x172>
 800e186:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e188:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e18a:	f7ff fef3 	bl	800df74 <check_fs>
 800e18e:	4603      	mov	r3, r0
 800e190:	e000      	b.n	800e194 <find_volume+0x174>
 800e192:	2303      	movs	r3, #3
 800e194:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e198:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e19c:	2b01      	cmp	r3, #1
 800e19e:	d905      	bls.n	800e1ac <find_volume+0x18c>
 800e1a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	643b      	str	r3, [r7, #64]	; 0x40
 800e1a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1a8:	2b03      	cmp	r3, #3
 800e1aa:	d9e1      	bls.n	800e170 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e1ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e1b0:	2b04      	cmp	r3, #4
 800e1b2:	d101      	bne.n	800e1b8 <find_volume+0x198>
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	e17d      	b.n	800e4b4 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e1b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e1bc:	2b01      	cmp	r3, #1
 800e1be:	d901      	bls.n	800e1c4 <find_volume+0x1a4>
 800e1c0:	230d      	movs	r3, #13
 800e1c2:	e177      	b.n	800e4b4 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1c6:	3334      	adds	r3, #52	; 0x34
 800e1c8:	330b      	adds	r3, #11
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f7fe fce2 	bl	800cb94 <ld_word>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e1d6:	d001      	beq.n	800e1dc <find_volume+0x1bc>
 800e1d8:	230d      	movs	r3, #13
 800e1da:	e16b      	b.n	800e4b4 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1de:	3334      	adds	r3, #52	; 0x34
 800e1e0:	3316      	adds	r3, #22
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f7fe fcd6 	bl	800cb94 <ld_word>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e1ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d106      	bne.n	800e200 <find_volume+0x1e0>
 800e1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1f4:	3334      	adds	r3, #52	; 0x34
 800e1f6:	3324      	adds	r3, #36	; 0x24
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f7fe fce3 	bl	800cbc4 <ld_dword>
 800e1fe:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e202:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e204:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e208:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e20e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e212:	789b      	ldrb	r3, [r3, #2]
 800e214:	2b01      	cmp	r3, #1
 800e216:	d005      	beq.n	800e224 <find_volume+0x204>
 800e218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e21a:	789b      	ldrb	r3, [r3, #2]
 800e21c:	2b02      	cmp	r3, #2
 800e21e:	d001      	beq.n	800e224 <find_volume+0x204>
 800e220:	230d      	movs	r3, #13
 800e222:	e147      	b.n	800e4b4 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e226:	789b      	ldrb	r3, [r3, #2]
 800e228:	461a      	mov	r2, r3
 800e22a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e22c:	fb02 f303 	mul.w	r3, r2, r3
 800e230:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e238:	b29a      	uxth	r2, r3
 800e23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e23c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e240:	895b      	ldrh	r3, [r3, #10]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d008      	beq.n	800e258 <find_volume+0x238>
 800e246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e248:	895b      	ldrh	r3, [r3, #10]
 800e24a:	461a      	mov	r2, r3
 800e24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e24e:	895b      	ldrh	r3, [r3, #10]
 800e250:	3b01      	subs	r3, #1
 800e252:	4013      	ands	r3, r2
 800e254:	2b00      	cmp	r3, #0
 800e256:	d001      	beq.n	800e25c <find_volume+0x23c>
 800e258:	230d      	movs	r3, #13
 800e25a:	e12b      	b.n	800e4b4 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e25e:	3334      	adds	r3, #52	; 0x34
 800e260:	3311      	adds	r3, #17
 800e262:	4618      	mov	r0, r3
 800e264:	f7fe fc96 	bl	800cb94 <ld_word>
 800e268:	4603      	mov	r3, r0
 800e26a:	461a      	mov	r2, r3
 800e26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e26e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e272:	891b      	ldrh	r3, [r3, #8]
 800e274:	f003 030f 	and.w	r3, r3, #15
 800e278:	b29b      	uxth	r3, r3
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d001      	beq.n	800e282 <find_volume+0x262>
 800e27e:	230d      	movs	r3, #13
 800e280:	e118      	b.n	800e4b4 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e284:	3334      	adds	r3, #52	; 0x34
 800e286:	3313      	adds	r3, #19
 800e288:	4618      	mov	r0, r3
 800e28a:	f7fe fc83 	bl	800cb94 <ld_word>
 800e28e:	4603      	mov	r3, r0
 800e290:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e294:	2b00      	cmp	r3, #0
 800e296:	d106      	bne.n	800e2a6 <find_volume+0x286>
 800e298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e29a:	3334      	adds	r3, #52	; 0x34
 800e29c:	3320      	adds	r3, #32
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f7fe fc90 	bl	800cbc4 <ld_dword>
 800e2a4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2a8:	3334      	adds	r3, #52	; 0x34
 800e2aa:	330e      	adds	r3, #14
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f7fe fc71 	bl	800cb94 <ld_word>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e2b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d101      	bne.n	800e2c0 <find_volume+0x2a0>
 800e2bc:	230d      	movs	r3, #13
 800e2be:	e0f9      	b.n	800e4b4 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e2c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e2c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2c4:	4413      	add	r3, r2
 800e2c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e2c8:	8912      	ldrh	r2, [r2, #8]
 800e2ca:	0912      	lsrs	r2, r2, #4
 800e2cc:	b292      	uxth	r2, r2
 800e2ce:	4413      	add	r3, r2
 800e2d0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e2d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d6:	429a      	cmp	r2, r3
 800e2d8:	d201      	bcs.n	800e2de <find_volume+0x2be>
 800e2da:	230d      	movs	r3, #13
 800e2dc:	e0ea      	b.n	800e4b4 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e2de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2e2:	1ad3      	subs	r3, r2, r3
 800e2e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e2e6:	8952      	ldrh	r2, [r2, #10]
 800e2e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800e2ec:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d103      	bne.n	800e2fc <find_volume+0x2dc>
 800e2f4:	230d      	movs	r3, #13
 800e2f6:	e0dd      	b.n	800e4b4 <find_volume+0x494>
 800e2f8:	200000b4 	.word	0x200000b4
		fmt = FS_FAT32;
 800e2fc:	2303      	movs	r3, #3
 800e2fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e304:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e308:	4293      	cmp	r3, r2
 800e30a:	d802      	bhi.n	800e312 <find_volume+0x2f2>
 800e30c:	2302      	movs	r3, #2
 800e30e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e314:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e318:	4293      	cmp	r3, r2
 800e31a:	d802      	bhi.n	800e322 <find_volume+0x302>
 800e31c:	2301      	movs	r3, #1
 800e31e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e324:	1c9a      	adds	r2, r3, #2
 800e326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e328:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800e32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e32c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e32e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e330:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e334:	441a      	add	r2, r3
 800e336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e338:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800e33a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e33e:	441a      	add	r2, r3
 800e340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e342:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800e344:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e348:	2b03      	cmp	r3, #3
 800e34a:	d11e      	bne.n	800e38a <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e34e:	3334      	adds	r3, #52	; 0x34
 800e350:	332a      	adds	r3, #42	; 0x2a
 800e352:	4618      	mov	r0, r3
 800e354:	f7fe fc1e 	bl	800cb94 <ld_word>
 800e358:	4603      	mov	r3, r0
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d001      	beq.n	800e362 <find_volume+0x342>
 800e35e:	230d      	movs	r3, #13
 800e360:	e0a8      	b.n	800e4b4 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e364:	891b      	ldrh	r3, [r3, #8]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d001      	beq.n	800e36e <find_volume+0x34e>
 800e36a:	230d      	movs	r3, #13
 800e36c:	e0a2      	b.n	800e4b4 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e36e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e370:	3334      	adds	r3, #52	; 0x34
 800e372:	332c      	adds	r3, #44	; 0x2c
 800e374:	4618      	mov	r0, r3
 800e376:	f7fe fc25 	bl	800cbc4 <ld_dword>
 800e37a:	4602      	mov	r2, r0
 800e37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e37e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e382:	699b      	ldr	r3, [r3, #24]
 800e384:	009b      	lsls	r3, r3, #2
 800e386:	647b      	str	r3, [r7, #68]	; 0x44
 800e388:	e01f      	b.n	800e3ca <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e38c:	891b      	ldrh	r3, [r3, #8]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d101      	bne.n	800e396 <find_volume+0x376>
 800e392:	230d      	movs	r3, #13
 800e394:	e08e      	b.n	800e4b4 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e398:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e39a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e39c:	441a      	add	r2, r3
 800e39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3a0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e3a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e3a6:	2b02      	cmp	r3, #2
 800e3a8:	d103      	bne.n	800e3b2 <find_volume+0x392>
 800e3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ac:	699b      	ldr	r3, [r3, #24]
 800e3ae:	005b      	lsls	r3, r3, #1
 800e3b0:	e00a      	b.n	800e3c8 <find_volume+0x3a8>
 800e3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3b4:	699a      	ldr	r2, [r3, #24]
 800e3b6:	4613      	mov	r3, r2
 800e3b8:	005b      	lsls	r3, r3, #1
 800e3ba:	4413      	add	r3, r2
 800e3bc:	085a      	lsrs	r2, r3, #1
 800e3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3c0:	699b      	ldr	r3, [r3, #24]
 800e3c2:	f003 0301 	and.w	r3, r3, #1
 800e3c6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e3c8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3cc:	69da      	ldr	r2, [r3, #28]
 800e3ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3d0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e3d4:	0a5b      	lsrs	r3, r3, #9
 800e3d6:	429a      	cmp	r2, r3
 800e3d8:	d201      	bcs.n	800e3de <find_volume+0x3be>
 800e3da:	230d      	movs	r3, #13
 800e3dc:	e06a      	b.n	800e4b4 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e3de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3e0:	f04f 32ff 	mov.w	r2, #4294967295
 800e3e4:	615a      	str	r2, [r3, #20]
 800e3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3e8:	695a      	ldr	r2, [r3, #20]
 800e3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ec:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800e3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3f0:	2280      	movs	r2, #128	; 0x80
 800e3f2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e3f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e3f8:	2b03      	cmp	r3, #3
 800e3fa:	d149      	bne.n	800e490 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3fe:	3334      	adds	r3, #52	; 0x34
 800e400:	3330      	adds	r3, #48	; 0x30
 800e402:	4618      	mov	r0, r3
 800e404:	f7fe fbc6 	bl	800cb94 <ld_word>
 800e408:	4603      	mov	r3, r0
 800e40a:	2b01      	cmp	r3, #1
 800e40c:	d140      	bne.n	800e490 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e40e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e410:	3301      	adds	r3, #1
 800e412:	4619      	mov	r1, r3
 800e414:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e416:	f7fe fe9d 	bl	800d154 <move_window>
 800e41a:	4603      	mov	r3, r0
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d137      	bne.n	800e490 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800e420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e422:	2200      	movs	r2, #0
 800e424:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e428:	3334      	adds	r3, #52	; 0x34
 800e42a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e42e:	4618      	mov	r0, r3
 800e430:	f7fe fbb0 	bl	800cb94 <ld_word>
 800e434:	4603      	mov	r3, r0
 800e436:	461a      	mov	r2, r3
 800e438:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e43c:	429a      	cmp	r2, r3
 800e43e:	d127      	bne.n	800e490 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e442:	3334      	adds	r3, #52	; 0x34
 800e444:	4618      	mov	r0, r3
 800e446:	f7fe fbbd 	bl	800cbc4 <ld_dword>
 800e44a:	4602      	mov	r2, r0
 800e44c:	4b1b      	ldr	r3, [pc, #108]	; (800e4bc <find_volume+0x49c>)
 800e44e:	429a      	cmp	r2, r3
 800e450:	d11e      	bne.n	800e490 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e454:	3334      	adds	r3, #52	; 0x34
 800e456:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e45a:	4618      	mov	r0, r3
 800e45c:	f7fe fbb2 	bl	800cbc4 <ld_dword>
 800e460:	4602      	mov	r2, r0
 800e462:	4b17      	ldr	r3, [pc, #92]	; (800e4c0 <find_volume+0x4a0>)
 800e464:	429a      	cmp	r2, r3
 800e466:	d113      	bne.n	800e490 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e46a:	3334      	adds	r3, #52	; 0x34
 800e46c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e470:	4618      	mov	r0, r3
 800e472:	f7fe fba7 	bl	800cbc4 <ld_dword>
 800e476:	4602      	mov	r2, r0
 800e478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e47a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e47e:	3334      	adds	r3, #52	; 0x34
 800e480:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e484:	4618      	mov	r0, r3
 800e486:	f7fe fb9d 	bl	800cbc4 <ld_dword>
 800e48a:	4602      	mov	r2, r0
 800e48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e48e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e492:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e496:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e498:	4b0a      	ldr	r3, [pc, #40]	; (800e4c4 <find_volume+0x4a4>)
 800e49a:	881b      	ldrh	r3, [r3, #0]
 800e49c:	3301      	adds	r3, #1
 800e49e:	b29a      	uxth	r2, r3
 800e4a0:	4b08      	ldr	r3, [pc, #32]	; (800e4c4 <find_volume+0x4a4>)
 800e4a2:	801a      	strh	r2, [r3, #0]
 800e4a4:	4b07      	ldr	r3, [pc, #28]	; (800e4c4 <find_volume+0x4a4>)
 800e4a6:	881a      	ldrh	r2, [r3, #0]
 800e4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4aa:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e4ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e4ae:	f7fe fde9 	bl	800d084 <clear_lock>
#endif
	return FR_OK;
 800e4b2:	2300      	movs	r3, #0
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	3758      	adds	r7, #88	; 0x58
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}
 800e4bc:	41615252 	.word	0x41615252
 800e4c0:	61417272 	.word	0x61417272
 800e4c4:	200000b8 	.word	0x200000b8

0800e4c8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b084      	sub	sp, #16
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
 800e4d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e4d2:	2309      	movs	r3, #9
 800e4d4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d02e      	beq.n	800e53a <validate+0x72>
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d02a      	beq.n	800e53a <validate+0x72>
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	781b      	ldrb	r3, [r3, #0]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d025      	beq.n	800e53a <validate+0x72>
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	889a      	ldrh	r2, [r3, #4]
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	88db      	ldrh	r3, [r3, #6]
 800e4f8:	429a      	cmp	r2, r3
 800e4fa:	d11e      	bne.n	800e53a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	4618      	mov	r0, r3
 800e502:	f7fe fc46 	bl	800cd92 <lock_fs>
 800e506:	4603      	mov	r3, r0
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d014      	beq.n	800e536 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	785b      	ldrb	r3, [r3, #1]
 800e512:	4618      	mov	r0, r3
 800e514:	f7fe faa0 	bl	800ca58 <disk_status>
 800e518:	4603      	mov	r3, r0
 800e51a:	f003 0301 	and.w	r3, r3, #1
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d102      	bne.n	800e528 <validate+0x60>
				res = FR_OK;
 800e522:	2300      	movs	r3, #0
 800e524:	73fb      	strb	r3, [r7, #15]
 800e526:	e008      	b.n	800e53a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	2100      	movs	r1, #0
 800e52e:	4618      	mov	r0, r3
 800e530:	f7fe fc45 	bl	800cdbe <unlock_fs>
 800e534:	e001      	b.n	800e53a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800e536:	230f      	movs	r3, #15
 800e538:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e53a:	7bfb      	ldrb	r3, [r7, #15]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d102      	bne.n	800e546 <validate+0x7e>
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	e000      	b.n	800e548 <validate+0x80>
 800e546:	2300      	movs	r3, #0
 800e548:	683a      	ldr	r2, [r7, #0]
 800e54a:	6013      	str	r3, [r2, #0]
	return res;
 800e54c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e54e:	4618      	mov	r0, r3
 800e550:	3710      	adds	r7, #16
 800e552:	46bd      	mov	sp, r7
 800e554:	bd80      	pop	{r7, pc}
	...

0800e558 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b088      	sub	sp, #32
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	60f8      	str	r0, [r7, #12]
 800e560:	60b9      	str	r1, [r7, #8]
 800e562:	4613      	mov	r3, r2
 800e564:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e566:	68bb      	ldr	r3, [r7, #8]
 800e568:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e56a:	f107 0310 	add.w	r3, r7, #16
 800e56e:	4618      	mov	r0, r3
 800e570:	f7ff fcbb 	bl	800deea <get_ldnumber>
 800e574:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e576:	69fb      	ldr	r3, [r7, #28]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	da01      	bge.n	800e580 <f_mount+0x28>
 800e57c:	230b      	movs	r3, #11
 800e57e:	e048      	b.n	800e612 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e580:	4a26      	ldr	r2, [pc, #152]	; (800e61c <f_mount+0xc4>)
 800e582:	69fb      	ldr	r3, [r7, #28]
 800e584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e588:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e58a:	69bb      	ldr	r3, [r7, #24]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d00f      	beq.n	800e5b0 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e590:	69b8      	ldr	r0, [r7, #24]
 800e592:	f7fe fd77 	bl	800d084 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800e596:	69bb      	ldr	r3, [r7, #24]
 800e598:	68db      	ldr	r3, [r3, #12]
 800e59a:	4618      	mov	r0, r3
 800e59c:	f001 fa75 	bl	800fa8a <ff_del_syncobj>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d101      	bne.n	800e5aa <f_mount+0x52>
 800e5a6:	2302      	movs	r3, #2
 800e5a8:	e033      	b.n	800e612 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e5aa:	69bb      	ldr	r3, [r7, #24]
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d00f      	beq.n	800e5d6 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800e5bc:	69fb      	ldr	r3, [r7, #28]
 800e5be:	b2da      	uxtb	r2, r3
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	330c      	adds	r3, #12
 800e5c4:	4619      	mov	r1, r3
 800e5c6:	4610      	mov	r0, r2
 800e5c8:	f001 fa41 	bl	800fa4e <ff_cre_syncobj>
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d101      	bne.n	800e5d6 <f_mount+0x7e>
 800e5d2:	2302      	movs	r3, #2
 800e5d4:	e01d      	b.n	800e612 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e5d6:	68fa      	ldr	r2, [r7, #12]
 800e5d8:	4910      	ldr	r1, [pc, #64]	; (800e61c <f_mount+0xc4>)
 800e5da:	69fb      	ldr	r3, [r7, #28]
 800e5dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d002      	beq.n	800e5ec <f_mount+0x94>
 800e5e6:	79fb      	ldrb	r3, [r7, #7]
 800e5e8:	2b01      	cmp	r3, #1
 800e5ea:	d001      	beq.n	800e5f0 <f_mount+0x98>
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	e010      	b.n	800e612 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e5f0:	f107 010c 	add.w	r1, r7, #12
 800e5f4:	f107 0308 	add.w	r3, r7, #8
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f7ff fd10 	bl	800e020 <find_volume>
 800e600:	4603      	mov	r3, r0
 800e602:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	7dfa      	ldrb	r2, [r7, #23]
 800e608:	4611      	mov	r1, r2
 800e60a:	4618      	mov	r0, r3
 800e60c:	f7fe fbd7 	bl	800cdbe <unlock_fs>
 800e610:	7dfb      	ldrb	r3, [r7, #23]
}
 800e612:	4618      	mov	r0, r3
 800e614:	3720      	adds	r7, #32
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}
 800e61a:	bf00      	nop
 800e61c:	200000b4 	.word	0x200000b4

0800e620 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b098      	sub	sp, #96	; 0x60
 800e624:	af00      	add	r7, sp, #0
 800e626:	60f8      	str	r0, [r7, #12]
 800e628:	60b9      	str	r1, [r7, #8]
 800e62a:	4613      	mov	r3, r2
 800e62c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d101      	bne.n	800e638 <f_open+0x18>
 800e634:	2309      	movs	r3, #9
 800e636:	e1b4      	b.n	800e9a2 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e638:	79fb      	ldrb	r3, [r7, #7]
 800e63a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e63e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e640:	79fa      	ldrb	r2, [r7, #7]
 800e642:	f107 0110 	add.w	r1, r7, #16
 800e646:	f107 0308 	add.w	r3, r7, #8
 800e64a:	4618      	mov	r0, r3
 800e64c:	f7ff fce8 	bl	800e020 <find_volume>
 800e650:	4603      	mov	r3, r0
 800e652:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800e656:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	f040 8191 	bne.w	800e982 <f_open+0x362>
		dj.obj.fs = fs;
 800e660:	693b      	ldr	r3, [r7, #16]
 800e662:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e664:	68ba      	ldr	r2, [r7, #8]
 800e666:	f107 0314 	add.w	r3, r7, #20
 800e66a:	4611      	mov	r1, r2
 800e66c:	4618      	mov	r0, r3
 800e66e:	f7ff fbcb 	bl	800de08 <follow_path>
 800e672:	4603      	mov	r3, r0
 800e674:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e678:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d11a      	bne.n	800e6b6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e680:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e684:	b25b      	sxtb	r3, r3
 800e686:	2b00      	cmp	r3, #0
 800e688:	da03      	bge.n	800e692 <f_open+0x72>
				res = FR_INVALID_NAME;
 800e68a:	2306      	movs	r3, #6
 800e68c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e690:	e011      	b.n	800e6b6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e692:	79fb      	ldrb	r3, [r7, #7]
 800e694:	f023 0301 	bic.w	r3, r3, #1
 800e698:	2b00      	cmp	r3, #0
 800e69a:	bf14      	ite	ne
 800e69c:	2301      	movne	r3, #1
 800e69e:	2300      	moveq	r3, #0
 800e6a0:	b2db      	uxtb	r3, r3
 800e6a2:	461a      	mov	r2, r3
 800e6a4:	f107 0314 	add.w	r3, r7, #20
 800e6a8:	4611      	mov	r1, r2
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f7fe fba2 	bl	800cdf4 <chk_lock>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e6b6:	79fb      	ldrb	r3, [r7, #7]
 800e6b8:	f003 031c 	and.w	r3, r3, #28
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d07f      	beq.n	800e7c0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e6c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d017      	beq.n	800e6f8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e6c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e6cc:	2b04      	cmp	r3, #4
 800e6ce:	d10e      	bne.n	800e6ee <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e6d0:	f7fe fbec 	bl	800ceac <enq_lock>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d006      	beq.n	800e6e8 <f_open+0xc8>
 800e6da:	f107 0314 	add.w	r3, r7, #20
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f7ff facb 	bl	800dc7a <dir_register>
 800e6e4:	4603      	mov	r3, r0
 800e6e6:	e000      	b.n	800e6ea <f_open+0xca>
 800e6e8:	2312      	movs	r3, #18
 800e6ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e6ee:	79fb      	ldrb	r3, [r7, #7]
 800e6f0:	f043 0308 	orr.w	r3, r3, #8
 800e6f4:	71fb      	strb	r3, [r7, #7]
 800e6f6:	e010      	b.n	800e71a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e6f8:	7ebb      	ldrb	r3, [r7, #26]
 800e6fa:	f003 0311 	and.w	r3, r3, #17
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d003      	beq.n	800e70a <f_open+0xea>
					res = FR_DENIED;
 800e702:	2307      	movs	r3, #7
 800e704:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e708:	e007      	b.n	800e71a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e70a:	79fb      	ldrb	r3, [r7, #7]
 800e70c:	f003 0304 	and.w	r3, r3, #4
 800e710:	2b00      	cmp	r3, #0
 800e712:	d002      	beq.n	800e71a <f_open+0xfa>
 800e714:	2308      	movs	r3, #8
 800e716:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e71a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d168      	bne.n	800e7f4 <f_open+0x1d4>
 800e722:	79fb      	ldrb	r3, [r7, #7]
 800e724:	f003 0308 	and.w	r3, r3, #8
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d063      	beq.n	800e7f4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800e72c:	f004 f854 	bl	80127d8 <get_fattime>
 800e730:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e734:	330e      	adds	r3, #14
 800e736:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e738:	4618      	mov	r0, r3
 800e73a:	f7fe fa81 	bl	800cc40 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e73e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e740:	3316      	adds	r3, #22
 800e742:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e744:	4618      	mov	r0, r3
 800e746:	f7fe fa7b 	bl	800cc40 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e74a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e74c:	330b      	adds	r3, #11
 800e74e:	2220      	movs	r2, #32
 800e750:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e752:	693b      	ldr	r3, [r7, #16]
 800e754:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e756:	4611      	mov	r1, r2
 800e758:	4618      	mov	r0, r3
 800e75a:	f7ff f9fa 	bl	800db52 <ld_clust>
 800e75e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e760:	693b      	ldr	r3, [r7, #16]
 800e762:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e764:	2200      	movs	r2, #0
 800e766:	4618      	mov	r0, r3
 800e768:	f7ff fa12 	bl	800db90 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e76c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e76e:	331c      	adds	r3, #28
 800e770:	2100      	movs	r1, #0
 800e772:	4618      	mov	r0, r3
 800e774:	f7fe fa64 	bl	800cc40 <st_dword>
					fs->wflag = 1;
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	2201      	movs	r2, #1
 800e77c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e77e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e780:	2b00      	cmp	r3, #0
 800e782:	d037      	beq.n	800e7f4 <f_open+0x1d4>
						dw = fs->winsect;
 800e784:	693b      	ldr	r3, [r7, #16]
 800e786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e788:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e78a:	f107 0314 	add.w	r3, r7, #20
 800e78e:	2200      	movs	r2, #0
 800e790:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e792:	4618      	mov	r0, r3
 800e794:	f7fe ff25 	bl	800d5e2 <remove_chain>
 800e798:	4603      	mov	r3, r0
 800e79a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800e79e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d126      	bne.n	800e7f4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800e7a6:	693b      	ldr	r3, [r7, #16]
 800e7a8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f7fe fcd2 	bl	800d154 <move_window>
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e7b6:	693b      	ldr	r3, [r7, #16]
 800e7b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e7ba:	3a01      	subs	r2, #1
 800e7bc:	611a      	str	r2, [r3, #16]
 800e7be:	e019      	b.n	800e7f4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e7c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d115      	bne.n	800e7f4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e7c8:	7ebb      	ldrb	r3, [r7, #26]
 800e7ca:	f003 0310 	and.w	r3, r3, #16
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d003      	beq.n	800e7da <f_open+0x1ba>
					res = FR_NO_FILE;
 800e7d2:	2304      	movs	r3, #4
 800e7d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e7d8:	e00c      	b.n	800e7f4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e7da:	79fb      	ldrb	r3, [r7, #7]
 800e7dc:	f003 0302 	and.w	r3, r3, #2
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d007      	beq.n	800e7f4 <f_open+0x1d4>
 800e7e4:	7ebb      	ldrb	r3, [r7, #26]
 800e7e6:	f003 0301 	and.w	r3, r3, #1
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d002      	beq.n	800e7f4 <f_open+0x1d4>
						res = FR_DENIED;
 800e7ee:	2307      	movs	r3, #7
 800e7f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e7f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d128      	bne.n	800e84e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e7fc:	79fb      	ldrb	r3, [r7, #7]
 800e7fe:	f003 0308 	and.w	r3, r3, #8
 800e802:	2b00      	cmp	r3, #0
 800e804:	d003      	beq.n	800e80e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e806:	79fb      	ldrb	r3, [r7, #7]
 800e808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e80c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e80e:	693b      	ldr	r3, [r7, #16]
 800e810:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e816:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e81c:	79fb      	ldrb	r3, [r7, #7]
 800e81e:	f023 0301 	bic.w	r3, r3, #1
 800e822:	2b00      	cmp	r3, #0
 800e824:	bf14      	ite	ne
 800e826:	2301      	movne	r3, #1
 800e828:	2300      	moveq	r3, #0
 800e82a:	b2db      	uxtb	r3, r3
 800e82c:	461a      	mov	r2, r3
 800e82e:	f107 0314 	add.w	r3, r7, #20
 800e832:	4611      	mov	r1, r2
 800e834:	4618      	mov	r0, r3
 800e836:	f7fe fb5b 	bl	800cef0 <inc_lock>
 800e83a:	4602      	mov	r2, r0
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	691b      	ldr	r3, [r3, #16]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d102      	bne.n	800e84e <f_open+0x22e>
 800e848:	2302      	movs	r3, #2
 800e84a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e84e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e852:	2b00      	cmp	r3, #0
 800e854:	f040 8095 	bne.w	800e982 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e858:	693b      	ldr	r3, [r7, #16]
 800e85a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e85c:	4611      	mov	r1, r2
 800e85e:	4618      	mov	r0, r3
 800e860:	f7ff f977 	bl	800db52 <ld_clust>
 800e864:	4602      	mov	r2, r0
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e86a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e86c:	331c      	adds	r3, #28
 800e86e:	4618      	mov	r0, r3
 800e870:	f7fe f9a8 	bl	800cbc4 <ld_dword>
 800e874:	4602      	mov	r2, r0
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	2200      	movs	r2, #0
 800e87e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e880:	693a      	ldr	r2, [r7, #16]
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e886:	693b      	ldr	r3, [r7, #16]
 800e888:	88da      	ldrh	r2, [r3, #6]
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	79fa      	ldrb	r2, [r7, #7]
 800e892:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	2200      	movs	r2, #0
 800e898:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	2200      	movs	r2, #0
 800e89e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	3330      	adds	r3, #48	; 0x30
 800e8aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e8ae:	2100      	movs	r1, #0
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f7fe fa12 	bl	800ccda <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e8b6:	79fb      	ldrb	r3, [r7, #7]
 800e8b8:	f003 0320 	and.w	r3, r3, #32
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d060      	beq.n	800e982 <f_open+0x362>
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	68db      	ldr	r3, [r3, #12]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d05c      	beq.n	800e982 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	68da      	ldr	r2, [r3, #12]
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e8d0:	693b      	ldr	r3, [r7, #16]
 800e8d2:	895b      	ldrh	r3, [r3, #10]
 800e8d4:	025b      	lsls	r3, r3, #9
 800e8d6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	689b      	ldr	r3, [r3, #8]
 800e8dc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	68db      	ldr	r3, [r3, #12]
 800e8e2:	657b      	str	r3, [r7, #84]	; 0x54
 800e8e4:	e016      	b.n	800e914 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f7fe fced 	bl	800d2ca <get_fat>
 800e8f0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e8f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e8f4:	2b01      	cmp	r3, #1
 800e8f6:	d802      	bhi.n	800e8fe <f_open+0x2de>
 800e8f8:	2302      	movs	r3, #2
 800e8fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e8fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e900:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e904:	d102      	bne.n	800e90c <f_open+0x2ec>
 800e906:	2301      	movs	r3, #1
 800e908:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e90c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e90e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e910:	1ad3      	subs	r3, r2, r3
 800e912:	657b      	str	r3, [r7, #84]	; 0x54
 800e914:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d103      	bne.n	800e924 <f_open+0x304>
 800e91c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e91e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e920:	429a      	cmp	r2, r3
 800e922:	d8e0      	bhi.n	800e8e6 <f_open+0x2c6>
				}
				fp->clust = clst;
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e928:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e92a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d127      	bne.n	800e982 <f_open+0x362>
 800e932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d022      	beq.n	800e982 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e93c:	693b      	ldr	r3, [r7, #16]
 800e93e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e940:	4618      	mov	r0, r3
 800e942:	f7fe fca3 	bl	800d28c <clust2sect>
 800e946:	6478      	str	r0, [r7, #68]	; 0x44
 800e948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d103      	bne.n	800e956 <f_open+0x336>
						res = FR_INT_ERR;
 800e94e:	2302      	movs	r3, #2
 800e950:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e954:	e015      	b.n	800e982 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e958:	0a5a      	lsrs	r2, r3, #9
 800e95a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e95c:	441a      	add	r2, r3
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e962:	693b      	ldr	r3, [r7, #16]
 800e964:	7858      	ldrb	r0, [r3, #1]
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	6a1a      	ldr	r2, [r3, #32]
 800e970:	2301      	movs	r3, #1
 800e972:	f7fe f8b1 	bl	800cad8 <disk_read>
 800e976:	4603      	mov	r3, r0
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d002      	beq.n	800e982 <f_open+0x362>
 800e97c:	2301      	movs	r3, #1
 800e97e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e982:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e986:	2b00      	cmp	r3, #0
 800e988:	d002      	beq.n	800e990 <f_open+0x370>
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	2200      	movs	r2, #0
 800e98e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e990:	693b      	ldr	r3, [r7, #16]
 800e992:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800e996:	4611      	mov	r1, r2
 800e998:	4618      	mov	r0, r3
 800e99a:	f7fe fa10 	bl	800cdbe <unlock_fs>
 800e99e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	3760      	adds	r7, #96	; 0x60
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd80      	pop	{r7, pc}

0800e9aa <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e9aa:	b580      	push	{r7, lr}
 800e9ac:	b08e      	sub	sp, #56	; 0x38
 800e9ae:	af00      	add	r7, sp, #0
 800e9b0:	60f8      	str	r0, [r7, #12]
 800e9b2:	60b9      	str	r1, [r7, #8]
 800e9b4:	607a      	str	r2, [r7, #4]
 800e9b6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e9b8:	68bb      	ldr	r3, [r7, #8]
 800e9ba:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	2200      	movs	r2, #0
 800e9c0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	f107 0214 	add.w	r2, r7, #20
 800e9c8:	4611      	mov	r1, r2
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f7ff fd7c 	bl	800e4c8 <validate>
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e9d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d107      	bne.n	800e9ee <f_read+0x44>
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	7d5b      	ldrb	r3, [r3, #21]
 800e9e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e9e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d009      	beq.n	800ea02 <f_read+0x58>
 800e9ee:	697b      	ldr	r3, [r7, #20]
 800e9f0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e9f4:	4611      	mov	r1, r2
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	f7fe f9e1 	bl	800cdbe <unlock_fs>
 800e9fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ea00:	e13d      	b.n	800ec7e <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	7d1b      	ldrb	r3, [r3, #20]
 800ea06:	f003 0301 	and.w	r3, r3, #1
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d106      	bne.n	800ea1c <f_read+0x72>
 800ea0e:	697b      	ldr	r3, [r7, #20]
 800ea10:	2107      	movs	r1, #7
 800ea12:	4618      	mov	r0, r3
 800ea14:	f7fe f9d3 	bl	800cdbe <unlock_fs>
 800ea18:	2307      	movs	r3, #7
 800ea1a:	e130      	b.n	800ec7e <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	68da      	ldr	r2, [r3, #12]
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	699b      	ldr	r3, [r3, #24]
 800ea24:	1ad3      	subs	r3, r2, r3
 800ea26:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ea28:	687a      	ldr	r2, [r7, #4]
 800ea2a:	6a3b      	ldr	r3, [r7, #32]
 800ea2c:	429a      	cmp	r2, r3
 800ea2e:	f240 811c 	bls.w	800ec6a <f_read+0x2c0>
 800ea32:	6a3b      	ldr	r3, [r7, #32]
 800ea34:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ea36:	e118      	b.n	800ec6a <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	699b      	ldr	r3, [r3, #24]
 800ea3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	f040 80e4 	bne.w	800ec0e <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	699b      	ldr	r3, [r3, #24]
 800ea4a:	0a5b      	lsrs	r3, r3, #9
 800ea4c:	697a      	ldr	r2, [r7, #20]
 800ea4e:	8952      	ldrh	r2, [r2, #10]
 800ea50:	3a01      	subs	r2, #1
 800ea52:	4013      	ands	r3, r2
 800ea54:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ea56:	69fb      	ldr	r3, [r7, #28]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d139      	bne.n	800ead0 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	699b      	ldr	r3, [r3, #24]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d103      	bne.n	800ea6c <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	689b      	ldr	r3, [r3, #8]
 800ea68:	633b      	str	r3, [r7, #48]	; 0x30
 800ea6a:	e013      	b.n	800ea94 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d007      	beq.n	800ea84 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	699b      	ldr	r3, [r3, #24]
 800ea78:	4619      	mov	r1, r3
 800ea7a:	68f8      	ldr	r0, [r7, #12]
 800ea7c:	f7fe feae 	bl	800d7dc <clmt_clust>
 800ea80:	6338      	str	r0, [r7, #48]	; 0x30
 800ea82:	e007      	b.n	800ea94 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ea84:	68fa      	ldr	r2, [r7, #12]
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	69db      	ldr	r3, [r3, #28]
 800ea8a:	4619      	mov	r1, r3
 800ea8c:	4610      	mov	r0, r2
 800ea8e:	f7fe fc1c 	bl	800d2ca <get_fat>
 800ea92:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ea94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea96:	2b01      	cmp	r3, #1
 800ea98:	d809      	bhi.n	800eaae <f_read+0x104>
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	2202      	movs	r2, #2
 800ea9e:	755a      	strb	r2, [r3, #21]
 800eaa0:	697b      	ldr	r3, [r7, #20]
 800eaa2:	2102      	movs	r1, #2
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f7fe f98a 	bl	800cdbe <unlock_fs>
 800eaaa:	2302      	movs	r3, #2
 800eaac:	e0e7      	b.n	800ec7e <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800eaae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eab4:	d109      	bne.n	800eaca <f_read+0x120>
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	2201      	movs	r2, #1
 800eaba:	755a      	strb	r2, [r3, #21]
 800eabc:	697b      	ldr	r3, [r7, #20]
 800eabe:	2101      	movs	r1, #1
 800eac0:	4618      	mov	r0, r3
 800eac2:	f7fe f97c 	bl	800cdbe <unlock_fs>
 800eac6:	2301      	movs	r3, #1
 800eac8:	e0d9      	b.n	800ec7e <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eace:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ead0:	697a      	ldr	r2, [r7, #20]
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	69db      	ldr	r3, [r3, #28]
 800ead6:	4619      	mov	r1, r3
 800ead8:	4610      	mov	r0, r2
 800eada:	f7fe fbd7 	bl	800d28c <clust2sect>
 800eade:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800eae0:	69bb      	ldr	r3, [r7, #24]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d109      	bne.n	800eafa <f_read+0x150>
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	2202      	movs	r2, #2
 800eaea:	755a      	strb	r2, [r3, #21]
 800eaec:	697b      	ldr	r3, [r7, #20]
 800eaee:	2102      	movs	r1, #2
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	f7fe f964 	bl	800cdbe <unlock_fs>
 800eaf6:	2302      	movs	r3, #2
 800eaf8:	e0c1      	b.n	800ec7e <f_read+0x2d4>
			sect += csect;
 800eafa:	69ba      	ldr	r2, [r7, #24]
 800eafc:	69fb      	ldr	r3, [r7, #28]
 800eafe:	4413      	add	r3, r2
 800eb00:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	0a5b      	lsrs	r3, r3, #9
 800eb06:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800eb08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d03e      	beq.n	800eb8c <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800eb0e:	69fa      	ldr	r2, [r7, #28]
 800eb10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb12:	4413      	add	r3, r2
 800eb14:	697a      	ldr	r2, [r7, #20]
 800eb16:	8952      	ldrh	r2, [r2, #10]
 800eb18:	4293      	cmp	r3, r2
 800eb1a:	d905      	bls.n	800eb28 <f_read+0x17e>
					cc = fs->csize - csect;
 800eb1c:	697b      	ldr	r3, [r7, #20]
 800eb1e:	895b      	ldrh	r3, [r3, #10]
 800eb20:	461a      	mov	r2, r3
 800eb22:	69fb      	ldr	r3, [r7, #28]
 800eb24:	1ad3      	subs	r3, r2, r3
 800eb26:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eb28:	697b      	ldr	r3, [r7, #20]
 800eb2a:	7858      	ldrb	r0, [r3, #1]
 800eb2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb2e:	69ba      	ldr	r2, [r7, #24]
 800eb30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eb32:	f7fd ffd1 	bl	800cad8 <disk_read>
 800eb36:	4603      	mov	r3, r0
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d009      	beq.n	800eb50 <f_read+0x1a6>
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	2201      	movs	r2, #1
 800eb40:	755a      	strb	r2, [r3, #21]
 800eb42:	697b      	ldr	r3, [r7, #20]
 800eb44:	2101      	movs	r1, #1
 800eb46:	4618      	mov	r0, r3
 800eb48:	f7fe f939 	bl	800cdbe <unlock_fs>
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	e096      	b.n	800ec7e <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	7d1b      	ldrb	r3, [r3, #20]
 800eb54:	b25b      	sxtb	r3, r3
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	da14      	bge.n	800eb84 <f_read+0x1da>
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	6a1a      	ldr	r2, [r3, #32]
 800eb5e:	69bb      	ldr	r3, [r7, #24]
 800eb60:	1ad3      	subs	r3, r2, r3
 800eb62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb64:	429a      	cmp	r2, r3
 800eb66:	d90d      	bls.n	800eb84 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	6a1a      	ldr	r2, [r3, #32]
 800eb6c:	69bb      	ldr	r3, [r7, #24]
 800eb6e:	1ad3      	subs	r3, r2, r3
 800eb70:	025b      	lsls	r3, r3, #9
 800eb72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb74:	18d0      	adds	r0, r2, r3
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	3330      	adds	r3, #48	; 0x30
 800eb7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eb7e:	4619      	mov	r1, r3
 800eb80:	f7fe f88a 	bl	800cc98 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800eb84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb86:	025b      	lsls	r3, r3, #9
 800eb88:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800eb8a:	e05a      	b.n	800ec42 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	6a1b      	ldr	r3, [r3, #32]
 800eb90:	69ba      	ldr	r2, [r7, #24]
 800eb92:	429a      	cmp	r2, r3
 800eb94:	d038      	beq.n	800ec08 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	7d1b      	ldrb	r3, [r3, #20]
 800eb9a:	b25b      	sxtb	r3, r3
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	da1d      	bge.n	800ebdc <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eba0:	697b      	ldr	r3, [r7, #20]
 800eba2:	7858      	ldrb	r0, [r3, #1]
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	6a1a      	ldr	r2, [r3, #32]
 800ebae:	2301      	movs	r3, #1
 800ebb0:	f7fd ffb2 	bl	800cb18 <disk_write>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d009      	beq.n	800ebce <f_read+0x224>
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	2201      	movs	r2, #1
 800ebbe:	755a      	strb	r2, [r3, #21]
 800ebc0:	697b      	ldr	r3, [r7, #20]
 800ebc2:	2101      	movs	r1, #1
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f7fe f8fa 	bl	800cdbe <unlock_fs>
 800ebca:	2301      	movs	r3, #1
 800ebcc:	e057      	b.n	800ec7e <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	7d1b      	ldrb	r3, [r3, #20]
 800ebd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ebd6:	b2da      	uxtb	r2, r3
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ebdc:	697b      	ldr	r3, [r7, #20]
 800ebde:	7858      	ldrb	r0, [r3, #1]
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ebe6:	2301      	movs	r3, #1
 800ebe8:	69ba      	ldr	r2, [r7, #24]
 800ebea:	f7fd ff75 	bl	800cad8 <disk_read>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d009      	beq.n	800ec08 <f_read+0x25e>
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	2201      	movs	r2, #1
 800ebf8:	755a      	strb	r2, [r3, #21]
 800ebfa:	697b      	ldr	r3, [r7, #20]
 800ebfc:	2101      	movs	r1, #1
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f7fe f8dd 	bl	800cdbe <unlock_fs>
 800ec04:	2301      	movs	r3, #1
 800ec06:	e03a      	b.n	800ec7e <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	69ba      	ldr	r2, [r7, #24]
 800ec0c:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	699b      	ldr	r3, [r3, #24]
 800ec12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec16:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ec1a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ec1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	429a      	cmp	r2, r3
 800ec22:	d901      	bls.n	800ec28 <f_read+0x27e>
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	699b      	ldr	r3, [r3, #24]
 800ec32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec36:	4413      	add	r3, r2
 800ec38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec3a:	4619      	mov	r1, r3
 800ec3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec3e:	f7fe f82b 	bl	800cc98 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ec42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec46:	4413      	add	r3, r2
 800ec48:	627b      	str	r3, [r7, #36]	; 0x24
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	699a      	ldr	r2, [r3, #24]
 800ec4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec50:	441a      	add	r2, r3
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	619a      	str	r2, [r3, #24]
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	681a      	ldr	r2, [r3, #0]
 800ec5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec5c:	441a      	add	r2, r3
 800ec5e:	683b      	ldr	r3, [r7, #0]
 800ec60:	601a      	str	r2, [r3, #0]
 800ec62:	687a      	ldr	r2, [r7, #4]
 800ec64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec66:	1ad3      	subs	r3, r2, r3
 800ec68:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	f47f aee3 	bne.w	800ea38 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ec72:	697b      	ldr	r3, [r7, #20]
 800ec74:	2100      	movs	r1, #0
 800ec76:	4618      	mov	r0, r3
 800ec78:	f7fe f8a1 	bl	800cdbe <unlock_fs>
 800ec7c:	2300      	movs	r3, #0
}
 800ec7e:	4618      	mov	r0, r3
 800ec80:	3738      	adds	r7, #56	; 0x38
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}

0800ec86 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ec86:	b580      	push	{r7, lr}
 800ec88:	b08c      	sub	sp, #48	; 0x30
 800ec8a:	af00      	add	r7, sp, #0
 800ec8c:	60f8      	str	r0, [r7, #12]
 800ec8e:	60b9      	str	r1, [r7, #8]
 800ec90:	607a      	str	r2, [r7, #4]
 800ec92:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ec94:	68bb      	ldr	r3, [r7, #8]
 800ec96:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ec98:	683b      	ldr	r3, [r7, #0]
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	f107 0210 	add.w	r2, r7, #16
 800eca4:	4611      	mov	r1, r2
 800eca6:	4618      	mov	r0, r3
 800eca8:	f7ff fc0e 	bl	800e4c8 <validate>
 800ecac:	4603      	mov	r3, r0
 800ecae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ecb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d107      	bne.n	800ecca <f_write+0x44>
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	7d5b      	ldrb	r3, [r3, #21]
 800ecbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ecc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d009      	beq.n	800ecde <f_write+0x58>
 800ecca:	693b      	ldr	r3, [r7, #16]
 800eccc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ecd0:	4611      	mov	r1, r2
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	f7fe f873 	bl	800cdbe <unlock_fs>
 800ecd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ecdc:	e173      	b.n	800efc6 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	7d1b      	ldrb	r3, [r3, #20]
 800ece2:	f003 0302 	and.w	r3, r3, #2
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d106      	bne.n	800ecf8 <f_write+0x72>
 800ecea:	693b      	ldr	r3, [r7, #16]
 800ecec:	2107      	movs	r1, #7
 800ecee:	4618      	mov	r0, r3
 800ecf0:	f7fe f865 	bl	800cdbe <unlock_fs>
 800ecf4:	2307      	movs	r3, #7
 800ecf6:	e166      	b.n	800efc6 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	699a      	ldr	r2, [r3, #24]
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	441a      	add	r2, r3
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	699b      	ldr	r3, [r3, #24]
 800ed04:	429a      	cmp	r2, r3
 800ed06:	f080 814b 	bcs.w	800efa0 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	699b      	ldr	r3, [r3, #24]
 800ed0e:	43db      	mvns	r3, r3
 800ed10:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ed12:	e145      	b.n	800efa0 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	699b      	ldr	r3, [r3, #24]
 800ed18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	f040 8101 	bne.w	800ef24 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	699b      	ldr	r3, [r3, #24]
 800ed26:	0a5b      	lsrs	r3, r3, #9
 800ed28:	693a      	ldr	r2, [r7, #16]
 800ed2a:	8952      	ldrh	r2, [r2, #10]
 800ed2c:	3a01      	subs	r2, #1
 800ed2e:	4013      	ands	r3, r2
 800ed30:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ed32:	69bb      	ldr	r3, [r7, #24]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d14d      	bne.n	800edd4 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	699b      	ldr	r3, [r3, #24]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d10c      	bne.n	800ed5a <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	689b      	ldr	r3, [r3, #8]
 800ed44:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ed46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d11a      	bne.n	800ed82 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	2100      	movs	r1, #0
 800ed50:	4618      	mov	r0, r3
 800ed52:	f7fe fcab 	bl	800d6ac <create_chain>
 800ed56:	62b8      	str	r0, [r7, #40]	; 0x28
 800ed58:	e013      	b.n	800ed82 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d007      	beq.n	800ed72 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	699b      	ldr	r3, [r3, #24]
 800ed66:	4619      	mov	r1, r3
 800ed68:	68f8      	ldr	r0, [r7, #12]
 800ed6a:	f7fe fd37 	bl	800d7dc <clmt_clust>
 800ed6e:	62b8      	str	r0, [r7, #40]	; 0x28
 800ed70:	e007      	b.n	800ed82 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ed72:	68fa      	ldr	r2, [r7, #12]
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	69db      	ldr	r3, [r3, #28]
 800ed78:	4619      	mov	r1, r3
 800ed7a:	4610      	mov	r0, r2
 800ed7c:	f7fe fc96 	bl	800d6ac <create_chain>
 800ed80:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ed82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	f000 8110 	beq.w	800efaa <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ed8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed8c:	2b01      	cmp	r3, #1
 800ed8e:	d109      	bne.n	800eda4 <f_write+0x11e>
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	2202      	movs	r2, #2
 800ed94:	755a      	strb	r2, [r3, #21]
 800ed96:	693b      	ldr	r3, [r7, #16]
 800ed98:	2102      	movs	r1, #2
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f7fe f80f 	bl	800cdbe <unlock_fs>
 800eda0:	2302      	movs	r3, #2
 800eda2:	e110      	b.n	800efc6 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800eda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eda6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edaa:	d109      	bne.n	800edc0 <f_write+0x13a>
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	2201      	movs	r2, #1
 800edb0:	755a      	strb	r2, [r3, #21]
 800edb2:	693b      	ldr	r3, [r7, #16]
 800edb4:	2101      	movs	r1, #1
 800edb6:	4618      	mov	r0, r3
 800edb8:	f7fe f801 	bl	800cdbe <unlock_fs>
 800edbc:	2301      	movs	r3, #1
 800edbe:	e102      	b.n	800efc6 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800edc4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	689b      	ldr	r3, [r3, #8]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d102      	bne.n	800edd4 <f_write+0x14e>
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800edd2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	7d1b      	ldrb	r3, [r3, #20]
 800edd8:	b25b      	sxtb	r3, r3
 800edda:	2b00      	cmp	r3, #0
 800eddc:	da1d      	bge.n	800ee1a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800edde:	693b      	ldr	r3, [r7, #16]
 800ede0:	7858      	ldrb	r0, [r3, #1]
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	6a1a      	ldr	r2, [r3, #32]
 800edec:	2301      	movs	r3, #1
 800edee:	f7fd fe93 	bl	800cb18 <disk_write>
 800edf2:	4603      	mov	r3, r0
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d009      	beq.n	800ee0c <f_write+0x186>
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	2201      	movs	r2, #1
 800edfc:	755a      	strb	r2, [r3, #21]
 800edfe:	693b      	ldr	r3, [r7, #16]
 800ee00:	2101      	movs	r1, #1
 800ee02:	4618      	mov	r0, r3
 800ee04:	f7fd ffdb 	bl	800cdbe <unlock_fs>
 800ee08:	2301      	movs	r3, #1
 800ee0a:	e0dc      	b.n	800efc6 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	7d1b      	ldrb	r3, [r3, #20]
 800ee10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee14:	b2da      	uxtb	r2, r3
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ee1a:	693a      	ldr	r2, [r7, #16]
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	69db      	ldr	r3, [r3, #28]
 800ee20:	4619      	mov	r1, r3
 800ee22:	4610      	mov	r0, r2
 800ee24:	f7fe fa32 	bl	800d28c <clust2sect>
 800ee28:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ee2a:	697b      	ldr	r3, [r7, #20]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d109      	bne.n	800ee44 <f_write+0x1be>
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	2202      	movs	r2, #2
 800ee34:	755a      	strb	r2, [r3, #21]
 800ee36:	693b      	ldr	r3, [r7, #16]
 800ee38:	2102      	movs	r1, #2
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f7fd ffbf 	bl	800cdbe <unlock_fs>
 800ee40:	2302      	movs	r3, #2
 800ee42:	e0c0      	b.n	800efc6 <f_write+0x340>
			sect += csect;
 800ee44:	697a      	ldr	r2, [r7, #20]
 800ee46:	69bb      	ldr	r3, [r7, #24]
 800ee48:	4413      	add	r3, r2
 800ee4a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	0a5b      	lsrs	r3, r3, #9
 800ee50:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ee52:	6a3b      	ldr	r3, [r7, #32]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d041      	beq.n	800eedc <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ee58:	69ba      	ldr	r2, [r7, #24]
 800ee5a:	6a3b      	ldr	r3, [r7, #32]
 800ee5c:	4413      	add	r3, r2
 800ee5e:	693a      	ldr	r2, [r7, #16]
 800ee60:	8952      	ldrh	r2, [r2, #10]
 800ee62:	4293      	cmp	r3, r2
 800ee64:	d905      	bls.n	800ee72 <f_write+0x1ec>
					cc = fs->csize - csect;
 800ee66:	693b      	ldr	r3, [r7, #16]
 800ee68:	895b      	ldrh	r3, [r3, #10]
 800ee6a:	461a      	mov	r2, r3
 800ee6c:	69bb      	ldr	r3, [r7, #24]
 800ee6e:	1ad3      	subs	r3, r2, r3
 800ee70:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ee72:	693b      	ldr	r3, [r7, #16]
 800ee74:	7858      	ldrb	r0, [r3, #1]
 800ee76:	6a3b      	ldr	r3, [r7, #32]
 800ee78:	697a      	ldr	r2, [r7, #20]
 800ee7a:	69f9      	ldr	r1, [r7, #28]
 800ee7c:	f7fd fe4c 	bl	800cb18 <disk_write>
 800ee80:	4603      	mov	r3, r0
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d009      	beq.n	800ee9a <f_write+0x214>
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	2201      	movs	r2, #1
 800ee8a:	755a      	strb	r2, [r3, #21]
 800ee8c:	693b      	ldr	r3, [r7, #16]
 800ee8e:	2101      	movs	r1, #1
 800ee90:	4618      	mov	r0, r3
 800ee92:	f7fd ff94 	bl	800cdbe <unlock_fs>
 800ee96:	2301      	movs	r3, #1
 800ee98:	e095      	b.n	800efc6 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	6a1a      	ldr	r2, [r3, #32]
 800ee9e:	697b      	ldr	r3, [r7, #20]
 800eea0:	1ad3      	subs	r3, r2, r3
 800eea2:	6a3a      	ldr	r2, [r7, #32]
 800eea4:	429a      	cmp	r2, r3
 800eea6:	d915      	bls.n	800eed4 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	6a1a      	ldr	r2, [r3, #32]
 800eeb2:	697b      	ldr	r3, [r7, #20]
 800eeb4:	1ad3      	subs	r3, r2, r3
 800eeb6:	025b      	lsls	r3, r3, #9
 800eeb8:	69fa      	ldr	r2, [r7, #28]
 800eeba:	4413      	add	r3, r2
 800eebc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eec0:	4619      	mov	r1, r3
 800eec2:	f7fd fee9 	bl	800cc98 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	7d1b      	ldrb	r3, [r3, #20]
 800eeca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eece:	b2da      	uxtb	r2, r3
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800eed4:	6a3b      	ldr	r3, [r7, #32]
 800eed6:	025b      	lsls	r3, r3, #9
 800eed8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800eeda:	e044      	b.n	800ef66 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	6a1b      	ldr	r3, [r3, #32]
 800eee0:	697a      	ldr	r2, [r7, #20]
 800eee2:	429a      	cmp	r2, r3
 800eee4:	d01b      	beq.n	800ef1e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	699a      	ldr	r2, [r3, #24]
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800eeee:	429a      	cmp	r2, r3
 800eef0:	d215      	bcs.n	800ef1e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800eef2:	693b      	ldr	r3, [r7, #16]
 800eef4:	7858      	ldrb	r0, [r3, #1]
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eefc:	2301      	movs	r3, #1
 800eefe:	697a      	ldr	r2, [r7, #20]
 800ef00:	f7fd fdea 	bl	800cad8 <disk_read>
 800ef04:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d009      	beq.n	800ef1e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	2201      	movs	r2, #1
 800ef0e:	755a      	strb	r2, [r3, #21]
 800ef10:	693b      	ldr	r3, [r7, #16]
 800ef12:	2101      	movs	r1, #1
 800ef14:	4618      	mov	r0, r3
 800ef16:	f7fd ff52 	bl	800cdbe <unlock_fs>
 800ef1a:	2301      	movs	r3, #1
 800ef1c:	e053      	b.n	800efc6 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	697a      	ldr	r2, [r7, #20]
 800ef22:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	699b      	ldr	r3, [r3, #24]
 800ef28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef2c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ef30:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ef32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	429a      	cmp	r2, r3
 800ef38:	d901      	bls.n	800ef3e <f_write+0x2b8>
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	699b      	ldr	r3, [r3, #24]
 800ef48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef4c:	4413      	add	r3, r2
 800ef4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef50:	69f9      	ldr	r1, [r7, #28]
 800ef52:	4618      	mov	r0, r3
 800ef54:	f7fd fea0 	bl	800cc98 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	7d1b      	ldrb	r3, [r3, #20]
 800ef5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ef60:	b2da      	uxtb	r2, r3
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ef66:	69fa      	ldr	r2, [r7, #28]
 800ef68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef6a:	4413      	add	r3, r2
 800ef6c:	61fb      	str	r3, [r7, #28]
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	699a      	ldr	r2, [r3, #24]
 800ef72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef74:	441a      	add	r2, r3
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	619a      	str	r2, [r3, #24]
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	68da      	ldr	r2, [r3, #12]
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	699b      	ldr	r3, [r3, #24]
 800ef82:	429a      	cmp	r2, r3
 800ef84:	bf38      	it	cc
 800ef86:	461a      	movcc	r2, r3
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	60da      	str	r2, [r3, #12]
 800ef8c:	683b      	ldr	r3, [r7, #0]
 800ef8e:	681a      	ldr	r2, [r3, #0]
 800ef90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef92:	441a      	add	r2, r3
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	601a      	str	r2, [r3, #0]
 800ef98:	687a      	ldr	r2, [r7, #4]
 800ef9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef9c:	1ad3      	subs	r3, r2, r3
 800ef9e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	f47f aeb6 	bne.w	800ed14 <f_write+0x8e>
 800efa8:	e000      	b.n	800efac <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800efaa:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	7d1b      	ldrb	r3, [r3, #20]
 800efb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efb4:	b2da      	uxtb	r2, r3
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800efba:	693b      	ldr	r3, [r7, #16]
 800efbc:	2100      	movs	r1, #0
 800efbe:	4618      	mov	r0, r3
 800efc0:	f7fd fefd 	bl	800cdbe <unlock_fs>
 800efc4:	2300      	movs	r3, #0
}
 800efc6:	4618      	mov	r0, r3
 800efc8:	3730      	adds	r7, #48	; 0x30
 800efca:	46bd      	mov	sp, r7
 800efcc:	bd80      	pop	{r7, pc}

0800efce <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800efce:	b580      	push	{r7, lr}
 800efd0:	b086      	sub	sp, #24
 800efd2:	af00      	add	r7, sp, #0
 800efd4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	f107 0208 	add.w	r2, r7, #8
 800efdc:	4611      	mov	r1, r2
 800efde:	4618      	mov	r0, r3
 800efe0:	f7ff fa72 	bl	800e4c8 <validate>
 800efe4:	4603      	mov	r3, r0
 800efe6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800efe8:	7dfb      	ldrb	r3, [r7, #23]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d16d      	bne.n	800f0ca <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	7d1b      	ldrb	r3, [r3, #20]
 800eff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d067      	beq.n	800f0ca <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	7d1b      	ldrb	r3, [r3, #20]
 800effe:	b25b      	sxtb	r3, r3
 800f000:	2b00      	cmp	r3, #0
 800f002:	da1a      	bge.n	800f03a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f004:	68bb      	ldr	r3, [r7, #8]
 800f006:	7858      	ldrb	r0, [r3, #1]
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	6a1a      	ldr	r2, [r3, #32]
 800f012:	2301      	movs	r3, #1
 800f014:	f7fd fd80 	bl	800cb18 <disk_write>
 800f018:	4603      	mov	r3, r0
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d006      	beq.n	800f02c <f_sync+0x5e>
 800f01e:	68bb      	ldr	r3, [r7, #8]
 800f020:	2101      	movs	r1, #1
 800f022:	4618      	mov	r0, r3
 800f024:	f7fd fecb 	bl	800cdbe <unlock_fs>
 800f028:	2301      	movs	r3, #1
 800f02a:	e055      	b.n	800f0d8 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	7d1b      	ldrb	r3, [r3, #20]
 800f030:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f034:	b2da      	uxtb	r2, r3
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f03a:	f003 fbcd 	bl	80127d8 <get_fattime>
 800f03e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f040:	68ba      	ldr	r2, [r7, #8]
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f046:	4619      	mov	r1, r3
 800f048:	4610      	mov	r0, r2
 800f04a:	f7fe f883 	bl	800d154 <move_window>
 800f04e:	4603      	mov	r3, r0
 800f050:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f052:	7dfb      	ldrb	r3, [r7, #23]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d138      	bne.n	800f0ca <f_sync+0xfc>
					dir = fp->dir_ptr;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f05c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	330b      	adds	r3, #11
 800f062:	781a      	ldrb	r2, [r3, #0]
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	330b      	adds	r3, #11
 800f068:	f042 0220 	orr.w	r2, r2, #32
 800f06c:	b2d2      	uxtb	r2, r2
 800f06e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	6818      	ldr	r0, [r3, #0]
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	689b      	ldr	r3, [r3, #8]
 800f078:	461a      	mov	r2, r3
 800f07a:	68f9      	ldr	r1, [r7, #12]
 800f07c:	f7fe fd88 	bl	800db90 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	f103 021c 	add.w	r2, r3, #28
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	68db      	ldr	r3, [r3, #12]
 800f08a:	4619      	mov	r1, r3
 800f08c:	4610      	mov	r0, r2
 800f08e:	f7fd fdd7 	bl	800cc40 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	3316      	adds	r3, #22
 800f096:	6939      	ldr	r1, [r7, #16]
 800f098:	4618      	mov	r0, r3
 800f09a:	f7fd fdd1 	bl	800cc40 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	3312      	adds	r3, #18
 800f0a2:	2100      	movs	r1, #0
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f7fd fdb0 	bl	800cc0a <st_word>
					fs->wflag = 1;
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	2201      	movs	r2, #1
 800f0ae:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f0b0:	68bb      	ldr	r3, [r7, #8]
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	f7fe f87c 	bl	800d1b0 <sync_fs>
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	7d1b      	ldrb	r3, [r3, #20]
 800f0c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f0c4:	b2da      	uxtb	r2, r3
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f0ca:	68bb      	ldr	r3, [r7, #8]
 800f0cc:	7dfa      	ldrb	r2, [r7, #23]
 800f0ce:	4611      	mov	r1, r2
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	f7fd fe74 	bl	800cdbe <unlock_fs>
 800f0d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0d8:	4618      	mov	r0, r3
 800f0da:	3718      	adds	r7, #24
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	bd80      	pop	{r7, pc}

0800f0e0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b084      	sub	sp, #16
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f0e8:	6878      	ldr	r0, [r7, #4]
 800f0ea:	f7ff ff70 	bl	800efce <f_sync>
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f0f2:	7bfb      	ldrb	r3, [r7, #15]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d11d      	bne.n	800f134 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	f107 0208 	add.w	r2, r7, #8
 800f0fe:	4611      	mov	r1, r2
 800f100:	4618      	mov	r0, r3
 800f102:	f7ff f9e1 	bl	800e4c8 <validate>
 800f106:	4603      	mov	r3, r0
 800f108:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f10a:	7bfb      	ldrb	r3, [r7, #15]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d111      	bne.n	800f134 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	691b      	ldr	r3, [r3, #16]
 800f114:	4618      	mov	r0, r3
 800f116:	f7fd ff79 	bl	800d00c <dec_lock>
 800f11a:	4603      	mov	r3, r0
 800f11c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f11e:	7bfb      	ldrb	r3, [r7, #15]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d102      	bne.n	800f12a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	2200      	movs	r2, #0
 800f128:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800f12a:	68bb      	ldr	r3, [r7, #8]
 800f12c:	2100      	movs	r1, #0
 800f12e:	4618      	mov	r0, r3
 800f130:	f7fd fe45 	bl	800cdbe <unlock_fs>
#endif
		}
	}
	return res;
 800f134:	7bfb      	ldrb	r3, [r7, #15]
}
 800f136:	4618      	mov	r0, r3
 800f138:	3710      	adds	r7, #16
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}
	...

0800f140 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800f140:	b590      	push	{r4, r7, lr}
 800f142:	b09d      	sub	sp, #116	; 0x74
 800f144:	af00      	add	r7, sp, #0
 800f146:	60f8      	str	r0, [r7, #12]
 800f148:	607a      	str	r2, [r7, #4]
 800f14a:	603b      	str	r3, [r7, #0]
 800f14c:	460b      	mov	r3, r1
 800f14e:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800f150:	2301      	movs	r3, #1
 800f152:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800f154:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f158:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800f15a:	f107 030c 	add.w	r3, r7, #12
 800f15e:	4618      	mov	r0, r3
 800f160:	f7fe fec3 	bl	800deea <get_ldnumber>
 800f164:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f168:	2b00      	cmp	r3, #0
 800f16a:	da02      	bge.n	800f172 <f_mkfs+0x32>
 800f16c:	230b      	movs	r3, #11
 800f16e:	f000 bc0d 	b.w	800f98c <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800f172:	4a94      	ldr	r2, [pc, #592]	; (800f3c4 <f_mkfs+0x284>)
 800f174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d005      	beq.n	800f18a <f_mkfs+0x4a>
 800f17e:	4a91      	ldr	r2, [pc, #580]	; (800f3c4 <f_mkfs+0x284>)
 800f180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f186:	2200      	movs	r2, #0
 800f188:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800f18a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f18c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800f190:	2300      	movs	r3, #0
 800f192:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800f196:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f19a:	4618      	mov	r0, r3
 800f19c:	f7fd fc76 	bl	800ca8c <disk_initialize>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800f1a6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800f1aa:	f003 0301 	and.w	r3, r3, #1
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d001      	beq.n	800f1b6 <f_mkfs+0x76>
 800f1b2:	2303      	movs	r3, #3
 800f1b4:	e3ea      	b.n	800f98c <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800f1b6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800f1ba:	f003 0304 	and.w	r3, r3, #4
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d001      	beq.n	800f1c6 <f_mkfs+0x86>
 800f1c2:	230a      	movs	r3, #10
 800f1c4:	e3e2      	b.n	800f98c <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800f1c6:	f107 0214 	add.w	r2, r7, #20
 800f1ca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f1ce:	2103      	movs	r1, #3
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	f7fd fcc1 	bl	800cb58 <disk_ioctl>
 800f1d6:	4603      	mov	r3, r0
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d10c      	bne.n	800f1f6 <f_mkfs+0xb6>
 800f1dc:	697b      	ldr	r3, [r7, #20]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d009      	beq.n	800f1f6 <f_mkfs+0xb6>
 800f1e2:	697b      	ldr	r3, [r7, #20]
 800f1e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f1e8:	d805      	bhi.n	800f1f6 <f_mkfs+0xb6>
 800f1ea:	697b      	ldr	r3, [r7, #20]
 800f1ec:	1e5a      	subs	r2, r3, #1
 800f1ee:	697b      	ldr	r3, [r7, #20]
 800f1f0:	4013      	ands	r3, r2
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d001      	beq.n	800f1fa <f_mkfs+0xba>
 800f1f6:	2301      	movs	r3, #1
 800f1f8:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800f1fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f1fe:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d003      	beq.n	800f20e <f_mkfs+0xce>
 800f206:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f208:	687a      	ldr	r2, [r7, #4]
 800f20a:	429a      	cmp	r2, r3
 800f20c:	d309      	bcc.n	800f222 <f_mkfs+0xe2>
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f214:	d805      	bhi.n	800f222 <f_mkfs+0xe2>
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	1e5a      	subs	r2, r3, #1
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	4013      	ands	r3, r2
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d001      	beq.n	800f226 <f_mkfs+0xe6>
 800f222:	2313      	movs	r3, #19
 800f224:	e3b2      	b.n	800f98c <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800f226:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f228:	687a      	ldr	r2, [r7, #4]
 800f22a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f22e:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800f230:	683b      	ldr	r3, [r7, #0]
 800f232:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800f234:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f236:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f23a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f23e:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800f240:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f244:	fb02 f303 	mul.w	r3, r2, r3
 800f248:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800f24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d101      	bne.n	800f254 <f_mkfs+0x114>
 800f250:	230e      	movs	r3, #14
 800f252:	e39b      	b.n	800f98c <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800f254:	f107 0210 	add.w	r2, r7, #16
 800f258:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f25c:	2101      	movs	r1, #1
 800f25e:	4618      	mov	r0, r3
 800f260:	f7fd fc7a 	bl	800cb58 <disk_ioctl>
 800f264:	4603      	mov	r3, r0
 800f266:	2b00      	cmp	r3, #0
 800f268:	d001      	beq.n	800f26e <f_mkfs+0x12e>
 800f26a:	2301      	movs	r3, #1
 800f26c:	e38e      	b.n	800f98c <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800f26e:	7afb      	ldrb	r3, [r7, #11]
 800f270:	f003 0308 	and.w	r3, r3, #8
 800f274:	2b00      	cmp	r3, #0
 800f276:	d001      	beq.n	800f27c <f_mkfs+0x13c>
 800f278:	2300      	movs	r3, #0
 800f27a:	e000      	b.n	800f27e <f_mkfs+0x13e>
 800f27c:	233f      	movs	r3, #63	; 0x3f
 800f27e:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800f280:	693b      	ldr	r3, [r7, #16]
 800f282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f284:	429a      	cmp	r2, r3
 800f286:	d901      	bls.n	800f28c <f_mkfs+0x14c>
 800f288:	230e      	movs	r3, #14
 800f28a:	e37f      	b.n	800f98c <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800f28c:	693a      	ldr	r2, [r7, #16]
 800f28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f290:	1ad3      	subs	r3, r2, r3
 800f292:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800f294:	693b      	ldr	r3, [r7, #16]
 800f296:	2b7f      	cmp	r3, #127	; 0x7f
 800f298:	d801      	bhi.n	800f29e <f_mkfs+0x15e>
 800f29a:	230e      	movs	r3, #14
 800f29c:	e376      	b.n	800f98c <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	2b80      	cmp	r3, #128	; 0x80
 800f2a2:	d901      	bls.n	800f2a8 <f_mkfs+0x168>
 800f2a4:	2313      	movs	r3, #19
 800f2a6:	e371      	b.n	800f98c <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800f2a8:	7afb      	ldrb	r3, [r7, #11]
 800f2aa:	f003 0302 	and.w	r3, r3, #2
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d00d      	beq.n	800f2ce <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800f2b2:	7afb      	ldrb	r3, [r7, #11]
 800f2b4:	f003 0307 	and.w	r3, r3, #7
 800f2b8:	2b02      	cmp	r3, #2
 800f2ba:	d004      	beq.n	800f2c6 <f_mkfs+0x186>
 800f2bc:	7afb      	ldrb	r3, [r7, #11]
 800f2be:	f003 0301 	and.w	r3, r3, #1
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d103      	bne.n	800f2ce <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800f2c6:	2303      	movs	r3, #3
 800f2c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800f2cc:	e009      	b.n	800f2e2 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800f2ce:	7afb      	ldrb	r3, [r7, #11]
 800f2d0:	f003 0301 	and.w	r3, r3, #1
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d101      	bne.n	800f2dc <f_mkfs+0x19c>
 800f2d8:	2313      	movs	r3, #19
 800f2da:	e357      	b.n	800f98c <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800f2dc:	2302      	movs	r3, #2
 800f2de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	66fb      	str	r3, [r7, #108]	; 0x6c
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800f2e6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f2ea:	2b03      	cmp	r3, #3
 800f2ec:	d13c      	bne.n	800f368 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800f2ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d11b      	bne.n	800f32c <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800f2f4:	693b      	ldr	r3, [r7, #16]
 800f2f6:	0c5b      	lsrs	r3, r3, #17
 800f2f8:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	64bb      	str	r3, [r7, #72]	; 0x48
 800f2fe:	2301      	movs	r3, #1
 800f300:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f302:	e005      	b.n	800f310 <f_mkfs+0x1d0>
 800f304:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f306:	3301      	adds	r3, #1
 800f308:	64bb      	str	r3, [r7, #72]	; 0x48
 800f30a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f30c:	005b      	lsls	r3, r3, #1
 800f30e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f310:	4a2d      	ldr	r2, [pc, #180]	; (800f3c8 <f_mkfs+0x288>)
 800f312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f314:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d007      	beq.n	800f32c <f_mkfs+0x1ec>
 800f31c:	4a2a      	ldr	r2, [pc, #168]	; (800f3c8 <f_mkfs+0x288>)
 800f31e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f320:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f324:	461a      	mov	r2, r3
 800f326:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f328:	4293      	cmp	r3, r2
 800f32a:	d2eb      	bcs.n	800f304 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800f32c:	693a      	ldr	r2, [r7, #16]
 800f32e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f330:	fbb2 f3f3 	udiv	r3, r2, r3
 800f334:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800f336:	6a3b      	ldr	r3, [r7, #32]
 800f338:	3302      	adds	r3, #2
 800f33a:	009a      	lsls	r2, r3, #2
 800f33c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f33e:	4413      	add	r3, r2
 800f340:	1e5a      	subs	r2, r3, #1
 800f342:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f344:	fbb2 f3f3 	udiv	r3, r2, r3
 800f348:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 32;	/* Number of reserved sectors */
 800f34a:	2320      	movs	r3, #32
 800f34c:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = 0;		/* No static directory */
 800f34e:	2300      	movs	r3, #0
 800f350:	653b      	str	r3, [r7, #80]	; 0x50
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800f352:	6a3b      	ldr	r3, [r7, #32]
 800f354:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f358:	4293      	cmp	r3, r2
 800f35a:	d903      	bls.n	800f364 <f_mkfs+0x224>
 800f35c:	6a3b      	ldr	r3, [r7, #32]
 800f35e:	4a1b      	ldr	r2, [pc, #108]	; (800f3cc <f_mkfs+0x28c>)
 800f360:	4293      	cmp	r3, r2
 800f362:	d952      	bls.n	800f40a <f_mkfs+0x2ca>
 800f364:	230e      	movs	r3, #14
 800f366:	e311      	b.n	800f98c <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800f368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d11b      	bne.n	800f3a6 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800f36e:	693b      	ldr	r3, [r7, #16]
 800f370:	0b1b      	lsrs	r3, r3, #12
 800f372:	663b      	str	r3, [r7, #96]	; 0x60
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800f374:	2300      	movs	r3, #0
 800f376:	64bb      	str	r3, [r7, #72]	; 0x48
 800f378:	2301      	movs	r3, #1
 800f37a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f37c:	e005      	b.n	800f38a <f_mkfs+0x24a>
 800f37e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f380:	3301      	adds	r3, #1
 800f382:	64bb      	str	r3, [r7, #72]	; 0x48
 800f384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f386:	005b      	lsls	r3, r3, #1
 800f388:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f38a:	4a11      	ldr	r2, [pc, #68]	; (800f3d0 <f_mkfs+0x290>)
 800f38c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f38e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d007      	beq.n	800f3a6 <f_mkfs+0x266>
 800f396:	4a0e      	ldr	r2, [pc, #56]	; (800f3d0 <f_mkfs+0x290>)
 800f398:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f39a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f39e:	461a      	mov	r2, r3
 800f3a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f3a2:	4293      	cmp	r3, r2
 800f3a4:	d2eb      	bcs.n	800f37e <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800f3a6:	693a      	ldr	r2, [r7, #16]
 800f3a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f3aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3ae:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800f3b0:	6a3b      	ldr	r3, [r7, #32]
 800f3b2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f3b6:	4293      	cmp	r3, r2
 800f3b8:	d90c      	bls.n	800f3d4 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800f3ba:	6a3b      	ldr	r3, [r7, #32]
 800f3bc:	3302      	adds	r3, #2
 800f3be:	005b      	lsls	r3, r3, #1
 800f3c0:	663b      	str	r3, [r7, #96]	; 0x60
 800f3c2:	e012      	b.n	800f3ea <f_mkfs+0x2aa>
 800f3c4:	200000b4 	.word	0x200000b4
 800f3c8:	08015f1c 	.word	0x08015f1c
 800f3cc:	0ffffff5 	.word	0x0ffffff5
 800f3d0:	08015f2c 	.word	0x08015f2c
				} else {
					fmt = FS_FAT12;
 800f3d4:	2301      	movs	r3, #1
 800f3d6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800f3da:	6a3a      	ldr	r2, [r7, #32]
 800f3dc:	4613      	mov	r3, r2
 800f3de:	005b      	lsls	r3, r3, #1
 800f3e0:	4413      	add	r3, r2
 800f3e2:	3301      	adds	r3, #1
 800f3e4:	085b      	lsrs	r3, r3, #1
 800f3e6:	3303      	adds	r3, #3
 800f3e8:	663b      	str	r3, [r7, #96]	; 0x60
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800f3ea:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f3ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f3ee:	4413      	add	r3, r2
 800f3f0:	1e5a      	subs	r2, r3, #1
 800f3f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f3f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3f8:	657b      	str	r3, [r7, #84]	; 0x54
				sz_rsv = 1;						/* Number of reserved sectors */
 800f3fa:	2301      	movs	r3, #1
 800f3fc:	65bb      	str	r3, [r7, #88]	; 0x58
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800f3fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f400:	015a      	lsls	r2, r3, #5
 800f402:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f404:	fbb2 f3f3 	udiv	r3, r2, r3
 800f408:	653b      	str	r3, [r7, #80]	; 0x50
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800f40a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f40c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f40e:	4413      	add	r3, r2
 800f410:	65fb      	str	r3, [r7, #92]	; 0x5c
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800f412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f414:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f416:	fb02 f203 	mul.w	r2, r2, r3
 800f41a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f41c:	4413      	add	r3, r2
 800f41e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f420:	4413      	add	r3, r2
 800f422:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800f424:	697a      	ldr	r2, [r7, #20]
 800f426:	69fb      	ldr	r3, [r7, #28]
 800f428:	4413      	add	r3, r2
 800f42a:	1e5a      	subs	r2, r3, #1
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	425b      	negs	r3, r3
 800f430:	401a      	ands	r2, r3
 800f432:	69fb      	ldr	r3, [r7, #28]
 800f434:	1ad3      	subs	r3, r2, r3
 800f436:	663b      	str	r3, [r7, #96]	; 0x60
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800f438:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f43c:	2b03      	cmp	r3, #3
 800f43e:	d108      	bne.n	800f452 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800f440:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f442:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f444:	4413      	add	r3, r2
 800f446:	65bb      	str	r3, [r7, #88]	; 0x58
 800f448:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f44a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f44c:	4413      	add	r3, r2
 800f44e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f450:	e006      	b.n	800f460 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800f452:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f456:	fbb2 f3f3 	udiv	r3, r2, r3
 800f45a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f45c:	4413      	add	r3, r2
 800f45e:	657b      	str	r3, [r7, #84]	; 0x54
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800f460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f462:	011a      	lsls	r2, r3, #4
 800f464:	69fb      	ldr	r3, [r7, #28]
 800f466:	441a      	add	r2, r3
 800f468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f46a:	1ad2      	subs	r2, r2, r3
 800f46c:	693b      	ldr	r3, [r7, #16]
 800f46e:	429a      	cmp	r2, r3
 800f470:	d901      	bls.n	800f476 <f_mkfs+0x336>
 800f472:	230e      	movs	r3, #14
 800f474:	e28a      	b.n	800f98c <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800f476:	693a      	ldr	r2, [r7, #16]
 800f478:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f47a:	1ad2      	subs	r2, r2, r3
 800f47c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f47e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f480:	fb01 f303 	mul.w	r3, r1, r3
 800f484:	1ad2      	subs	r2, r2, r3
 800f486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f488:	1ad2      	subs	r2, r2, r3
 800f48a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f48c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f490:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800f492:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f496:	2b03      	cmp	r3, #3
 800f498:	d10f      	bne.n	800f4ba <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800f49a:	6a3b      	ldr	r3, [r7, #32]
 800f49c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f4a0:	4293      	cmp	r3, r2
 800f4a2:	d80a      	bhi.n	800f4ba <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d105      	bne.n	800f4b6 <f_mkfs+0x376>
 800f4aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f4ac:	085b      	lsrs	r3, r3, #1
 800f4ae:	607b      	str	r3, [r7, #4]
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d144      	bne.n	800f540 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800f4b6:	230e      	movs	r3, #14
 800f4b8:	e268      	b.n	800f98c <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800f4ba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f4be:	2b02      	cmp	r3, #2
 800f4c0:	d133      	bne.n	800f52a <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800f4c2:	6a3b      	ldr	r3, [r7, #32]
 800f4c4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f4c8:	4293      	cmp	r3, r2
 800f4ca:	d91e      	bls.n	800f50a <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d107      	bne.n	800f4e2 <f_mkfs+0x3a2>
 800f4d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f4d4:	005b      	lsls	r3, r3, #1
 800f4d6:	2b40      	cmp	r3, #64	; 0x40
 800f4d8:	d803      	bhi.n	800f4e2 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800f4da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f4dc:	005b      	lsls	r3, r3, #1
 800f4de:	607b      	str	r3, [r7, #4]
 800f4e0:	e033      	b.n	800f54a <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800f4e2:	7afb      	ldrb	r3, [r7, #11]
 800f4e4:	f003 0302 	and.w	r3, r3, #2
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d003      	beq.n	800f4f4 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800f4ec:	2303      	movs	r3, #3
 800f4ee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800f4f2:	e02a      	b.n	800f54a <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d105      	bne.n	800f506 <f_mkfs+0x3c6>
 800f4fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f4fc:	005b      	lsls	r3, r3, #1
 800f4fe:	607b      	str	r3, [r7, #4]
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	2b80      	cmp	r3, #128	; 0x80
 800f504:	d91e      	bls.n	800f544 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800f506:	230e      	movs	r3, #14
 800f508:	e240      	b.n	800f98c <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800f50a:	6a3b      	ldr	r3, [r7, #32]
 800f50c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f510:	4293      	cmp	r3, r2
 800f512:	d80a      	bhi.n	800f52a <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d105      	bne.n	800f526 <f_mkfs+0x3e6>
 800f51a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f51c:	005b      	lsls	r3, r3, #1
 800f51e:	607b      	str	r3, [r7, #4]
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	2b80      	cmp	r3, #128	; 0x80
 800f524:	d910      	bls.n	800f548 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800f526:	230e      	movs	r3, #14
 800f528:	e230      	b.n	800f98c <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800f52a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f52e:	2b01      	cmp	r3, #1
 800f530:	d10c      	bne.n	800f54c <f_mkfs+0x40c>
 800f532:	6a3b      	ldr	r3, [r7, #32]
 800f534:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f538:	4293      	cmp	r3, r2
 800f53a:	d907      	bls.n	800f54c <f_mkfs+0x40c>
 800f53c:	230e      	movs	r3, #14
 800f53e:	e225      	b.n	800f98c <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800f540:	bf00      	nop
 800f542:	e6ce      	b.n	800f2e2 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f544:	bf00      	nop
 800f546:	e6cc      	b.n	800f2e2 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800f548:	bf00      	nop
			pau = au;
 800f54a:	e6ca      	b.n	800f2e2 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800f54c:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800f54e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f550:	461a      	mov	r2, r3
 800f552:	2100      	movs	r1, #0
 800f554:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f556:	f7fd fbc0 	bl	800ccda <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800f55a:	220b      	movs	r2, #11
 800f55c:	49bc      	ldr	r1, [pc, #752]	; (800f850 <f_mkfs+0x710>)
 800f55e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f560:	f7fd fb9a 	bl	800cc98 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800f564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f566:	330b      	adds	r3, #11
 800f568:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f56a:	4611      	mov	r1, r2
 800f56c:	4618      	mov	r0, r3
 800f56e:	f7fd fb4c 	bl	800cc0a <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800f572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f574:	330d      	adds	r3, #13
 800f576:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f578:	b2d2      	uxtb	r2, r2
 800f57a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800f57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f57e:	330e      	adds	r3, #14
 800f580:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f582:	b292      	uxth	r2, r2
 800f584:	4611      	mov	r1, r2
 800f586:	4618      	mov	r0, r3
 800f588:	f7fd fb3f 	bl	800cc0a <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800f58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f58e:	3310      	adds	r3, #16
 800f590:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f592:	b2d2      	uxtb	r2, r2
 800f594:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800f596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f598:	f103 0211 	add.w	r2, r3, #17
 800f59c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f5a0:	2b03      	cmp	r3, #3
 800f5a2:	d002      	beq.n	800f5aa <f_mkfs+0x46a>
 800f5a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5a6:	b29b      	uxth	r3, r3
 800f5a8:	e000      	b.n	800f5ac <f_mkfs+0x46c>
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	4619      	mov	r1, r3
 800f5ae:	4610      	mov	r0, r2
 800f5b0:	f7fd fb2b 	bl	800cc0a <st_word>
		if (sz_vol < 0x10000) {
 800f5b4:	693b      	ldr	r3, [r7, #16]
 800f5b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f5ba:	d208      	bcs.n	800f5ce <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800f5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5be:	3313      	adds	r3, #19
 800f5c0:	693a      	ldr	r2, [r7, #16]
 800f5c2:	b292      	uxth	r2, r2
 800f5c4:	4611      	mov	r1, r2
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	f7fd fb1f 	bl	800cc0a <st_word>
 800f5cc:	e006      	b.n	800f5dc <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800f5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5d0:	3320      	adds	r3, #32
 800f5d2:	693a      	ldr	r2, [r7, #16]
 800f5d4:	4611      	mov	r1, r2
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	f7fd fb32 	bl	800cc40 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800f5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5de:	3315      	adds	r3, #21
 800f5e0:	22f8      	movs	r2, #248	; 0xf8
 800f5e2:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800f5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5e6:	3318      	adds	r3, #24
 800f5e8:	213f      	movs	r1, #63	; 0x3f
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	f7fd fb0d 	bl	800cc0a <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800f5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5f2:	331a      	adds	r3, #26
 800f5f4:	21ff      	movs	r1, #255	; 0xff
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f7fd fb07 	bl	800cc0a <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800f5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5fe:	331c      	adds	r3, #28
 800f600:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f602:	4618      	mov	r0, r3
 800f604:	f7fd fb1c 	bl	800cc40 <st_dword>
		if (fmt == FS_FAT32) {
 800f608:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f60c:	2b03      	cmp	r3, #3
 800f60e:	d131      	bne.n	800f674 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800f610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f612:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800f616:	f003 f8df 	bl	80127d8 <get_fattime>
 800f61a:	4603      	mov	r3, r0
 800f61c:	4619      	mov	r1, r3
 800f61e:	4620      	mov	r0, r4
 800f620:	f7fd fb0e 	bl	800cc40 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800f624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f626:	3324      	adds	r3, #36	; 0x24
 800f628:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f62a:	4618      	mov	r0, r3
 800f62c:	f7fd fb08 	bl	800cc40 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800f630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f632:	332c      	adds	r3, #44	; 0x2c
 800f634:	2102      	movs	r1, #2
 800f636:	4618      	mov	r0, r3
 800f638:	f7fd fb02 	bl	800cc40 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800f63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f63e:	3330      	adds	r3, #48	; 0x30
 800f640:	2101      	movs	r1, #1
 800f642:	4618      	mov	r0, r3
 800f644:	f7fd fae1 	bl	800cc0a <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800f648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f64a:	3332      	adds	r3, #50	; 0x32
 800f64c:	2106      	movs	r1, #6
 800f64e:	4618      	mov	r0, r3
 800f650:	f7fd fadb 	bl	800cc0a <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800f654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f656:	3340      	adds	r3, #64	; 0x40
 800f658:	2280      	movs	r2, #128	; 0x80
 800f65a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800f65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f65e:	3342      	adds	r3, #66	; 0x42
 800f660:	2229      	movs	r2, #41	; 0x29
 800f662:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800f664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f666:	3347      	adds	r3, #71	; 0x47
 800f668:	2213      	movs	r2, #19
 800f66a:	497a      	ldr	r1, [pc, #488]	; (800f854 <f_mkfs+0x714>)
 800f66c:	4618      	mov	r0, r3
 800f66e:	f7fd fb13 	bl	800cc98 <mem_cpy>
 800f672:	e020      	b.n	800f6b6 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800f674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f676:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800f67a:	f003 f8ad 	bl	80127d8 <get_fattime>
 800f67e:	4603      	mov	r3, r0
 800f680:	4619      	mov	r1, r3
 800f682:	4620      	mov	r0, r4
 800f684:	f7fd fadc 	bl	800cc40 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800f688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f68a:	3316      	adds	r3, #22
 800f68c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f68e:	b292      	uxth	r2, r2
 800f690:	4611      	mov	r1, r2
 800f692:	4618      	mov	r0, r3
 800f694:	f7fd fab9 	bl	800cc0a <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800f698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f69a:	3324      	adds	r3, #36	; 0x24
 800f69c:	2280      	movs	r2, #128	; 0x80
 800f69e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800f6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6a2:	3326      	adds	r3, #38	; 0x26
 800f6a4:	2229      	movs	r2, #41	; 0x29
 800f6a6:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800f6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6aa:	332b      	adds	r3, #43	; 0x2b
 800f6ac:	2213      	movs	r2, #19
 800f6ae:	496a      	ldr	r1, [pc, #424]	; (800f858 <f_mkfs+0x718>)
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f7fd faf1 	bl	800cc98 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800f6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6b8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f6bc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	f7fd faa2 	bl	800cc0a <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800f6c6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f6d0:	f7fd fa22 	bl	800cb18 <disk_write>
 800f6d4:	4603      	mov	r3, r0
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d001      	beq.n	800f6de <f_mkfs+0x59e>
 800f6da:	2301      	movs	r3, #1
 800f6dc:	e156      	b.n	800f98c <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800f6de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f6e2:	2b03      	cmp	r3, #3
 800f6e4:	d140      	bne.n	800f768 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800f6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6e8:	1d9a      	adds	r2, r3, #6
 800f6ea:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f6ee:	2301      	movs	r3, #1
 800f6f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f6f2:	f7fd fa11 	bl	800cb18 <disk_write>
			mem_set(buf, 0, ss);
 800f6f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f6f8:	461a      	mov	r2, r3
 800f6fa:	2100      	movs	r1, #0
 800f6fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f6fe:	f7fd faec 	bl	800ccda <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800f702:	4956      	ldr	r1, [pc, #344]	; (800f85c <f_mkfs+0x71c>)
 800f704:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f706:	f7fd fa9b 	bl	800cc40 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800f70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f70c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f710:	4953      	ldr	r1, [pc, #332]	; (800f860 <f_mkfs+0x720>)
 800f712:	4618      	mov	r0, r3
 800f714:	f7fd fa94 	bl	800cc40 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800f718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f71a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f71e:	6a3b      	ldr	r3, [r7, #32]
 800f720:	3b01      	subs	r3, #1
 800f722:	4619      	mov	r1, r3
 800f724:	4610      	mov	r0, r2
 800f726:	f7fd fa8b 	bl	800cc40 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800f72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f72c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f730:	2102      	movs	r1, #2
 800f732:	4618      	mov	r0, r3
 800f734:	f7fd fa84 	bl	800cc40 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800f738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f73a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f73e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f742:	4618      	mov	r0, r3
 800f744:	f7fd fa61 	bl	800cc0a <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800f748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f74a:	1dda      	adds	r2, r3, #7
 800f74c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f750:	2301      	movs	r3, #1
 800f752:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f754:	f7fd f9e0 	bl	800cb18 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800f758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f75a:	1c5a      	adds	r2, r3, #1
 800f75c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f760:	2301      	movs	r3, #1
 800f762:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f764:	f7fd f9d8 	bl	800cb18 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800f768:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f76a:	2100      	movs	r1, #0
 800f76c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f76e:	f7fd fab4 	bl	800ccda <mem_set>
		sect = b_fat;		/* FAT start sector */
 800f772:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f774:	66bb      	str	r3, [r7, #104]	; 0x68
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800f776:	2300      	movs	r3, #0
 800f778:	64bb      	str	r3, [r7, #72]	; 0x48
 800f77a:	e04b      	b.n	800f814 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800f77c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f780:	2b03      	cmp	r3, #3
 800f782:	d113      	bne.n	800f7ac <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800f784:	f06f 0107 	mvn.w	r1, #7
 800f788:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f78a:	f7fd fa59 	bl	800cc40 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800f78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f790:	3304      	adds	r3, #4
 800f792:	f04f 31ff 	mov.w	r1, #4294967295
 800f796:	4618      	mov	r0, r3
 800f798:	f7fd fa52 	bl	800cc40 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800f79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f79e:	3308      	adds	r3, #8
 800f7a0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f7fd fa4b 	bl	800cc40 <st_dword>
 800f7aa:	e00b      	b.n	800f7c4 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800f7ac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f7b0:	2b01      	cmp	r3, #1
 800f7b2:	d101      	bne.n	800f7b8 <f_mkfs+0x678>
 800f7b4:	4b2b      	ldr	r3, [pc, #172]	; (800f864 <f_mkfs+0x724>)
 800f7b6:	e001      	b.n	800f7bc <f_mkfs+0x67c>
 800f7b8:	f06f 0307 	mvn.w	r3, #7
 800f7bc:	4619      	mov	r1, r3
 800f7be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f7c0:	f7fd fa3e 	bl	800cc40 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800f7c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f7c6:	667b      	str	r3, [r7, #100]	; 0x64
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800f7c8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7cc:	4293      	cmp	r3, r2
 800f7ce:	bf28      	it	cs
 800f7d0:	4613      	movcs	r3, r2
 800f7d2:	663b      	str	r3, [r7, #96]	; 0x60
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800f7d4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f7d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f7da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f7dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f7de:	f7fd f99b 	bl	800cb18 <disk_write>
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d001      	beq.n	800f7ec <f_mkfs+0x6ac>
 800f7e8:	2301      	movs	r3, #1
 800f7ea:	e0cf      	b.n	800f98c <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800f7ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f7ee:	461a      	mov	r2, r3
 800f7f0:	2100      	movs	r1, #0
 800f7f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f7f4:	f7fd fa71 	bl	800ccda <mem_set>
				sect += n; nsect -= n;
 800f7f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f7fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f7fc:	4413      	add	r3, r2
 800f7fe:	66bb      	str	r3, [r7, #104]	; 0x68
 800f800:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f802:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f804:	1ad3      	subs	r3, r2, r3
 800f806:	667b      	str	r3, [r7, #100]	; 0x64
			} while (nsect);
 800f808:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d1dc      	bne.n	800f7c8 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800f80e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f810:	3301      	adds	r3, #1
 800f812:	64bb      	str	r3, [r7, #72]	; 0x48
 800f814:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f818:	429a      	cmp	r2, r3
 800f81a:	d3af      	bcc.n	800f77c <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800f81c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f820:	2b03      	cmp	r3, #3
 800f822:	d101      	bne.n	800f828 <f_mkfs+0x6e8>
 800f824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f826:	e000      	b.n	800f82a <f_mkfs+0x6ea>
 800f828:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f82a:	667b      	str	r3, [r7, #100]	; 0x64
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800f82c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f830:	4293      	cmp	r3, r2
 800f832:	bf28      	it	cs
 800f834:	4613      	movcs	r3, r2
 800f836:	663b      	str	r3, [r7, #96]	; 0x60
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800f838:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f83c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f83e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f840:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f842:	f7fd f969 	bl	800cb18 <disk_write>
 800f846:	4603      	mov	r3, r0
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d00d      	beq.n	800f868 <f_mkfs+0x728>
 800f84c:	2301      	movs	r3, #1
 800f84e:	e09d      	b.n	800f98c <f_mkfs+0x84c>
 800f850:	08015de0 	.word	0x08015de0
 800f854:	08015dec 	.word	0x08015dec
 800f858:	08015e00 	.word	0x08015e00
 800f85c:	41615252 	.word	0x41615252
 800f860:	61417272 	.word	0x61417272
 800f864:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 800f868:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f86a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f86c:	4413      	add	r3, r2
 800f86e:	66bb      	str	r3, [r7, #104]	; 0x68
 800f870:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f872:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f874:	1ad3      	subs	r3, r2, r3
 800f876:	667b      	str	r3, [r7, #100]	; 0x64
		} while (nsect);
 800f878:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d1d6      	bne.n	800f82c <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800f87e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f882:	2b03      	cmp	r3, #3
 800f884:	d103      	bne.n	800f88e <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800f886:	230c      	movs	r3, #12
 800f888:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800f88c:	e010      	b.n	800f8b0 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800f88e:	693b      	ldr	r3, [r7, #16]
 800f890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f894:	d303      	bcc.n	800f89e <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800f896:	2306      	movs	r3, #6
 800f898:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800f89c:	e008      	b.n	800f8b0 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800f89e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f8a2:	2b02      	cmp	r3, #2
 800f8a4:	d101      	bne.n	800f8aa <f_mkfs+0x76a>
 800f8a6:	2304      	movs	r3, #4
 800f8a8:	e000      	b.n	800f8ac <f_mkfs+0x76c>
 800f8aa:	2301      	movs	r3, #1
 800f8ac:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800f8b0:	7afb      	ldrb	r3, [r7, #11]
 800f8b2:	f003 0308 	and.w	r3, r3, #8
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d15b      	bne.n	800f972 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800f8ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f8bc:	461a      	mov	r2, r3
 800f8be:	2100      	movs	r1, #0
 800f8c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f8c2:	f7fd fa0a 	bl	800ccda <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800f8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f8cc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	f7fd f99a 	bl	800cc0a <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800f8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8d8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f8dc:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800f8de:	69bb      	ldr	r3, [r7, #24]
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800f8e4:	69bb      	ldr	r3, [r7, #24]
 800f8e6:	3301      	adds	r3, #1
 800f8e8:	2201      	movs	r2, #1
 800f8ea:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800f8ec:	69bb      	ldr	r3, [r7, #24]
 800f8ee:	3302      	adds	r3, #2
 800f8f0:	2201      	movs	r2, #1
 800f8f2:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800f8f4:	69bb      	ldr	r3, [r7, #24]
 800f8f6:	3303      	adds	r3, #3
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800f8fc:	69bb      	ldr	r3, [r7, #24]
 800f8fe:	3304      	adds	r3, #4
 800f900:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800f904:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800f906:	693a      	ldr	r2, [r7, #16]
 800f908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f90a:	441a      	add	r2, r3
 800f90c:	4b21      	ldr	r3, [pc, #132]	; (800f994 <f_mkfs+0x854>)
 800f90e:	fba3 1302 	umull	r1, r3, r3, r2
 800f912:	1ad2      	subs	r2, r2, r3
 800f914:	0852      	lsrs	r2, r2, #1
 800f916:	4413      	add	r3, r2
 800f918:	0b5b      	lsrs	r3, r3, #13
 800f91a:	663b      	str	r3, [r7, #96]	; 0x60
			pte[PTE_EdHead] = 254;				/* End head */
 800f91c:	69bb      	ldr	r3, [r7, #24]
 800f91e:	3305      	adds	r3, #5
 800f920:	22fe      	movs	r2, #254	; 0xfe
 800f922:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800f924:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f926:	089b      	lsrs	r3, r3, #2
 800f928:	b2da      	uxtb	r2, r3
 800f92a:	69bb      	ldr	r3, [r7, #24]
 800f92c:	3306      	adds	r3, #6
 800f92e:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800f932:	b2d2      	uxtb	r2, r2
 800f934:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800f936:	69bb      	ldr	r3, [r7, #24]
 800f938:	3307      	adds	r3, #7
 800f93a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f93c:	b2d2      	uxtb	r2, r2
 800f93e:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800f940:	69bb      	ldr	r3, [r7, #24]
 800f942:	3308      	adds	r3, #8
 800f944:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f946:	4618      	mov	r0, r3
 800f948:	f7fd f97a 	bl	800cc40 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800f94c:	69bb      	ldr	r3, [r7, #24]
 800f94e:	330c      	adds	r3, #12
 800f950:	693a      	ldr	r2, [r7, #16]
 800f952:	4611      	mov	r1, r2
 800f954:	4618      	mov	r0, r3
 800f956:	f7fd f973 	bl	800cc40 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800f95a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800f95e:	2301      	movs	r3, #1
 800f960:	2200      	movs	r2, #0
 800f962:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f964:	f7fd f8d8 	bl	800cb18 <disk_write>
 800f968:	4603      	mov	r3, r0
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d001      	beq.n	800f972 <f_mkfs+0x832>
 800f96e:	2301      	movs	r3, #1
 800f970:	e00c      	b.n	800f98c <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800f972:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f976:	2200      	movs	r2, #0
 800f978:	2100      	movs	r1, #0
 800f97a:	4618      	mov	r0, r3
 800f97c:	f7fd f8ec 	bl	800cb58 <disk_ioctl>
 800f980:	4603      	mov	r3, r0
 800f982:	2b00      	cmp	r3, #0
 800f984:	d001      	beq.n	800f98a <f_mkfs+0x84a>
 800f986:	2301      	movs	r3, #1
 800f988:	e000      	b.n	800f98c <f_mkfs+0x84c>

	return FR_OK;
 800f98a:	2300      	movs	r3, #0
}
 800f98c:	4618      	mov	r0, r3
 800f98e:	3774      	adds	r7, #116	; 0x74
 800f990:	46bd      	mov	sp, r7
 800f992:	bd90      	pop	{r4, r7, pc}
 800f994:	0515565b 	.word	0x0515565b

0800f998 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f998:	b480      	push	{r7}
 800f99a:	b087      	sub	sp, #28
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	60f8      	str	r0, [r7, #12]
 800f9a0:	60b9      	str	r1, [r7, #8]
 800f9a2:	4613      	mov	r3, r2
 800f9a4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f9a6:	2301      	movs	r3, #1
 800f9a8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f9ae:	4b1f      	ldr	r3, [pc, #124]	; (800fa2c <FATFS_LinkDriverEx+0x94>)
 800f9b0:	7a5b      	ldrb	r3, [r3, #9]
 800f9b2:	b2db      	uxtb	r3, r3
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d131      	bne.n	800fa1c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f9b8:	4b1c      	ldr	r3, [pc, #112]	; (800fa2c <FATFS_LinkDriverEx+0x94>)
 800f9ba:	7a5b      	ldrb	r3, [r3, #9]
 800f9bc:	b2db      	uxtb	r3, r3
 800f9be:	461a      	mov	r2, r3
 800f9c0:	4b1a      	ldr	r3, [pc, #104]	; (800fa2c <FATFS_LinkDriverEx+0x94>)
 800f9c2:	2100      	movs	r1, #0
 800f9c4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f9c6:	4b19      	ldr	r3, [pc, #100]	; (800fa2c <FATFS_LinkDriverEx+0x94>)
 800f9c8:	7a5b      	ldrb	r3, [r3, #9]
 800f9ca:	b2db      	uxtb	r3, r3
 800f9cc:	4a17      	ldr	r2, [pc, #92]	; (800fa2c <FATFS_LinkDriverEx+0x94>)
 800f9ce:	009b      	lsls	r3, r3, #2
 800f9d0:	4413      	add	r3, r2
 800f9d2:	68fa      	ldr	r2, [r7, #12]
 800f9d4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f9d6:	4b15      	ldr	r3, [pc, #84]	; (800fa2c <FATFS_LinkDriverEx+0x94>)
 800f9d8:	7a5b      	ldrb	r3, [r3, #9]
 800f9da:	b2db      	uxtb	r3, r3
 800f9dc:	461a      	mov	r2, r3
 800f9de:	4b13      	ldr	r3, [pc, #76]	; (800fa2c <FATFS_LinkDriverEx+0x94>)
 800f9e0:	4413      	add	r3, r2
 800f9e2:	79fa      	ldrb	r2, [r7, #7]
 800f9e4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f9e6:	4b11      	ldr	r3, [pc, #68]	; (800fa2c <FATFS_LinkDriverEx+0x94>)
 800f9e8:	7a5b      	ldrb	r3, [r3, #9]
 800f9ea:	b2db      	uxtb	r3, r3
 800f9ec:	1c5a      	adds	r2, r3, #1
 800f9ee:	b2d1      	uxtb	r1, r2
 800f9f0:	4a0e      	ldr	r2, [pc, #56]	; (800fa2c <FATFS_LinkDriverEx+0x94>)
 800f9f2:	7251      	strb	r1, [r2, #9]
 800f9f4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f9f6:	7dbb      	ldrb	r3, [r7, #22]
 800f9f8:	3330      	adds	r3, #48	; 0x30
 800f9fa:	b2da      	uxtb	r2, r3
 800f9fc:	68bb      	ldr	r3, [r7, #8]
 800f9fe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fa00:	68bb      	ldr	r3, [r7, #8]
 800fa02:	3301      	adds	r3, #1
 800fa04:	223a      	movs	r2, #58	; 0x3a
 800fa06:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fa08:	68bb      	ldr	r3, [r7, #8]
 800fa0a:	3302      	adds	r3, #2
 800fa0c:	222f      	movs	r2, #47	; 0x2f
 800fa0e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fa10:	68bb      	ldr	r3, [r7, #8]
 800fa12:	3303      	adds	r3, #3
 800fa14:	2200      	movs	r2, #0
 800fa16:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fa18:	2300      	movs	r3, #0
 800fa1a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fa1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa1e:	4618      	mov	r0, r3
 800fa20:	371c      	adds	r7, #28
 800fa22:	46bd      	mov	sp, r7
 800fa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa28:	4770      	bx	lr
 800fa2a:	bf00      	nop
 800fa2c:	200000dc 	.word	0x200000dc

0800fa30 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b082      	sub	sp, #8
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
 800fa38:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	6839      	ldr	r1, [r7, #0]
 800fa3e:	6878      	ldr	r0, [r7, #4]
 800fa40:	f7ff ffaa 	bl	800f998 <FATFS_LinkDriverEx>
 800fa44:	4603      	mov	r3, r0
}
 800fa46:	4618      	mov	r0, r3
 800fa48:	3708      	adds	r7, #8
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	bd80      	pop	{r7, pc}

0800fa4e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800fa4e:	b580      	push	{r7, lr}
 800fa50:	b084      	sub	sp, #16
 800fa52:	af00      	add	r7, sp, #0
 800fa54:	4603      	mov	r3, r0
 800fa56:	6039      	str	r1, [r7, #0]
 800fa58:	71fb      	strb	r3, [r7, #7]

    int ret;

    osSemaphoreDef(SEM);
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	60bb      	str	r3, [r7, #8]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800fa5e:	f107 0308 	add.w	r3, r7, #8
 800fa62:	2101      	movs	r1, #1
 800fa64:	4618      	mov	r0, r3
 800fa66:	f000 f8c4 	bl	800fbf2 <osSemaphoreCreate>
 800fa6a:	4602      	mov	r2, r0
 800fa6c:	683b      	ldr	r3, [r7, #0]
 800fa6e:	601a      	str	r2, [r3, #0]
    ret = (*sobj != NULL);
 800fa70:	683b      	ldr	r3, [r7, #0]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	bf14      	ite	ne
 800fa78:	2301      	movne	r3, #1
 800fa7a:	2300      	moveq	r3, #0
 800fa7c:	b2db      	uxtb	r3, r3
 800fa7e:	60fb      	str	r3, [r7, #12]

    return ret;
 800fa80:	68fb      	ldr	r3, [r7, #12]
}
 800fa82:	4618      	mov	r0, r3
 800fa84:	3710      	adds	r7, #16
 800fa86:	46bd      	mov	sp, r7
 800fa88:	bd80      	pop	{r7, pc}

0800fa8a <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800fa8a:	b580      	push	{r7, lr}
 800fa8c:	b082      	sub	sp, #8
 800fa8e:	af00      	add	r7, sp, #0
 800fa90:	6078      	str	r0, [r7, #4]
    osSemaphoreDelete (sobj);
 800fa92:	6878      	ldr	r0, [r7, #4]
 800fa94:	f000 f956 	bl	800fd44 <osSemaphoreDelete>
    return 1;
 800fa98:	2301      	movs	r3, #1
}
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	3708      	adds	r7, #8
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	bd80      	pop	{r7, pc}

0800faa2 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800faa2:	b580      	push	{r7, lr}
 800faa4:	b084      	sub	sp, #16
 800faa6:	af00      	add	r7, sp, #0
 800faa8:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800faaa:	2300      	movs	r3, #0
 800faac:	60fb      	str	r3, [r7, #12]

  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800faae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800fab2:	6878      	ldr	r0, [r7, #4]
 800fab4:	f000 f8c2 	bl	800fc3c <osSemaphoreWait>
 800fab8:	4603      	mov	r3, r0
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d101      	bne.n	800fac2 <ff_req_grant+0x20>
  {
    ret = 1;
 800fabe:	2301      	movs	r3, #1
 800fac0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800fac2:	68fb      	ldr	r3, [r7, #12]
}
 800fac4:	4618      	mov	r0, r3
 800fac6:	3710      	adds	r7, #16
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}

0800facc <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800facc:	b580      	push	{r7, lr}
 800face:	b082      	sub	sp, #8
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f000 f8ff 	bl	800fcd8 <osSemaphoreRelease>
}
 800fada:	bf00      	nop
 800fadc:	3708      	adds	r7, #8
 800fade:	46bd      	mov	sp, r7
 800fae0:	bd80      	pop	{r7, pc}

0800fae2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800fae2:	b480      	push	{r7}
 800fae4:	b085      	sub	sp, #20
 800fae6:	af00      	add	r7, sp, #0
 800fae8:	4603      	mov	r3, r0
 800faea:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800faec:	2300      	movs	r3, #0
 800faee:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800faf0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800faf4:	2b84      	cmp	r3, #132	; 0x84
 800faf6:	d005      	beq.n	800fb04 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800faf8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	4413      	add	r3, r2
 800fb00:	3303      	adds	r3, #3
 800fb02:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800fb04:	68fb      	ldr	r3, [r7, #12]
}
 800fb06:	4618      	mov	r0, r3
 800fb08:	3714      	adds	r7, #20
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb10:	4770      	bx	lr

0800fb12 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800fb12:	b480      	push	{r7}
 800fb14:	b083      	sub	sp, #12
 800fb16:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fb18:	f3ef 8305 	mrs	r3, IPSR
 800fb1c:	607b      	str	r3, [r7, #4]
  return(result);
 800fb1e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	bf14      	ite	ne
 800fb24:	2301      	movne	r3, #1
 800fb26:	2300      	moveq	r3, #0
 800fb28:	b2db      	uxtb	r3, r3
}
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	370c      	adds	r7, #12
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb34:	4770      	bx	lr

0800fb36 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800fb36:	b580      	push	{r7, lr}
 800fb38:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800fb3a:	f001 fb0d 	bl	8011158 <vTaskStartScheduler>
  
  return osOK;
 800fb3e:	2300      	movs	r3, #0
}
 800fb40:	4618      	mov	r0, r3
 800fb42:	bd80      	pop	{r7, pc}

0800fb44 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800fb48:	f001 ff2a 	bl	80119a0 <xTaskGetSchedulerState>
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	2b01      	cmp	r3, #1
 800fb50:	d101      	bne.n	800fb56 <osKernelRunning+0x12>
    return 0;
 800fb52:	2300      	movs	r3, #0
 800fb54:	e000      	b.n	800fb58 <osKernelRunning+0x14>
  else
    return 1;
 800fb56:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800fb58:	4618      	mov	r0, r3
 800fb5a:	bd80      	pop	{r7, pc}

0800fb5c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800fb60:	f7ff ffd7 	bl	800fb12 <inHandlerMode>
 800fb64:	4603      	mov	r3, r0
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d003      	beq.n	800fb72 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800fb6a:	f001 fbfb 	bl	8011364 <xTaskGetTickCountFromISR>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	e002      	b.n	800fb78 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800fb72:	f001 fbe7 	bl	8011344 <xTaskGetTickCount>
 800fb76:	4603      	mov	r3, r0
  }
}
 800fb78:	4618      	mov	r0, r3
 800fb7a:	bd80      	pop	{r7, pc}

0800fb7c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800fb7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb7e:	b087      	sub	sp, #28
 800fb80:	af02      	add	r7, sp, #8
 800fb82:	6078      	str	r0, [r7, #4]
 800fb84:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	685c      	ldr	r4, [r3, #4]
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fb92:	b29e      	uxth	r6, r3
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	f7ff ffa1 	bl	800fae2 <makeFreeRtosPriority>
 800fba0:	4602      	mov	r2, r0
 800fba2:	f107 030c 	add.w	r3, r7, #12
 800fba6:	9301      	str	r3, [sp, #4]
 800fba8:	9200      	str	r2, [sp, #0]
 800fbaa:	683b      	ldr	r3, [r7, #0]
 800fbac:	4632      	mov	r2, r6
 800fbae:	4629      	mov	r1, r5
 800fbb0:	4620      	mov	r0, r4
 800fbb2:	f001 f965 	bl	8010e80 <xTaskCreate>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	2b01      	cmp	r3, #1
 800fbba:	d001      	beq.n	800fbc0 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	e000      	b.n	800fbc2 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800fbc0:	68fb      	ldr	r3, [r7, #12]
}
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	3714      	adds	r7, #20
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fbca <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800fbca:	b580      	push	{r7, lr}
 800fbcc:	b084      	sub	sp, #16
 800fbce:	af00      	add	r7, sp, #0
 800fbd0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d001      	beq.n	800fbe0 <osDelay+0x16>
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	e000      	b.n	800fbe2 <osDelay+0x18>
 800fbe0:	2301      	movs	r3, #1
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	f001 fa82 	bl	80110ec <vTaskDelay>
  
  return osOK;
 800fbe8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800fbea:	4618      	mov	r0, r3
 800fbec:	3710      	adds	r7, #16
 800fbee:	46bd      	mov	sp, r7
 800fbf0:	bd80      	pop	{r7, pc}

0800fbf2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800fbf2:	b580      	push	{r7, lr}
 800fbf4:	b084      	sub	sp, #16
 800fbf6:	af00      	add	r7, sp, #0
 800fbf8:	6078      	str	r0, [r7, #4]
 800fbfa:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	2b01      	cmp	r3, #1
 800fc00:	d110      	bne.n	800fc24 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 800fc02:	2203      	movs	r2, #3
 800fc04:	2100      	movs	r1, #0
 800fc06:	2001      	movs	r0, #1
 800fc08:	f000 fa94 	bl	8010134 <xQueueGenericCreate>
 800fc0c:	60f8      	str	r0, [r7, #12]
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d005      	beq.n	800fc20 <osSemaphoreCreate+0x2e>
 800fc14:	2300      	movs	r3, #0
 800fc16:	2200      	movs	r2, #0
 800fc18:	2100      	movs	r1, #0
 800fc1a:	68f8      	ldr	r0, [r7, #12]
 800fc1c:	f000 fb1a 	bl	8010254 <xQueueGenericSend>
    return sema;
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	e006      	b.n	800fc32 <osSemaphoreCreate+0x40>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
 800fc24:	683b      	ldr	r3, [r7, #0]
 800fc26:	683a      	ldr	r2, [r7, #0]
 800fc28:	4611      	mov	r1, r2
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	f000 fadc 	bl	80101e8 <xQueueCreateCountingSemaphore>
 800fc30:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 800fc32:	4618      	mov	r0, r3
 800fc34:	3710      	adds	r7, #16
 800fc36:	46bd      	mov	sp, r7
 800fc38:	bd80      	pop	{r7, pc}
	...

0800fc3c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b084      	sub	sp, #16
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
 800fc44:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800fc46:	2300      	movs	r3, #0
 800fc48:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d101      	bne.n	800fc54 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800fc50:	2380      	movs	r3, #128	; 0x80
 800fc52:	e03a      	b.n	800fcca <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800fc54:	2300      	movs	r3, #0
 800fc56:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800fc58:	683b      	ldr	r3, [r7, #0]
 800fc5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc5e:	d103      	bne.n	800fc68 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800fc60:	f04f 33ff 	mov.w	r3, #4294967295
 800fc64:	60fb      	str	r3, [r7, #12]
 800fc66:	e009      	b.n	800fc7c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d006      	beq.n	800fc7c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800fc6e:	683b      	ldr	r3, [r7, #0]
 800fc70:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d101      	bne.n	800fc7c <osSemaphoreWait+0x40>
      ticks = 1;
 800fc78:	2301      	movs	r3, #1
 800fc7a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800fc7c:	f7ff ff49 	bl	800fb12 <inHandlerMode>
 800fc80:	4603      	mov	r3, r0
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d017      	beq.n	800fcb6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800fc86:	f107 0308 	add.w	r3, r7, #8
 800fc8a:	461a      	mov	r2, r3
 800fc8c:	2100      	movs	r1, #0
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	f000 ff02 	bl	8010a98 <xQueueReceiveFromISR>
 800fc94:	4603      	mov	r3, r0
 800fc96:	2b01      	cmp	r3, #1
 800fc98:	d001      	beq.n	800fc9e <osSemaphoreWait+0x62>
      return osErrorOS;
 800fc9a:	23ff      	movs	r3, #255	; 0xff
 800fc9c:	e015      	b.n	800fcca <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800fc9e:	68bb      	ldr	r3, [r7, #8]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d011      	beq.n	800fcc8 <osSemaphoreWait+0x8c>
 800fca4:	4b0b      	ldr	r3, [pc, #44]	; (800fcd4 <osSemaphoreWait+0x98>)
 800fca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcaa:	601a      	str	r2, [r3, #0]
 800fcac:	f3bf 8f4f 	dsb	sy
 800fcb0:	f3bf 8f6f 	isb	sy
 800fcb4:	e008      	b.n	800fcc8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800fcb6:	68f9      	ldr	r1, [r7, #12]
 800fcb8:	6878      	ldr	r0, [r7, #4]
 800fcba:	f000 fddd 	bl	8010878 <xQueueSemaphoreTake>
 800fcbe:	4603      	mov	r3, r0
 800fcc0:	2b01      	cmp	r3, #1
 800fcc2:	d001      	beq.n	800fcc8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800fcc4:	23ff      	movs	r3, #255	; 0xff
 800fcc6:	e000      	b.n	800fcca <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800fcc8:	2300      	movs	r3, #0
}
 800fcca:	4618      	mov	r0, r3
 800fccc:	3710      	adds	r7, #16
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	bd80      	pop	{r7, pc}
 800fcd2:	bf00      	nop
 800fcd4:	e000ed04 	.word	0xe000ed04

0800fcd8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b084      	sub	sp, #16
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800fce0:	2300      	movs	r3, #0
 800fce2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800fce4:	2300      	movs	r3, #0
 800fce6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800fce8:	f7ff ff13 	bl	800fb12 <inHandlerMode>
 800fcec:	4603      	mov	r3, r0
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d016      	beq.n	800fd20 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800fcf2:	f107 0308 	add.w	r3, r7, #8
 800fcf6:	4619      	mov	r1, r3
 800fcf8:	6878      	ldr	r0, [r7, #4]
 800fcfa:	f000 fc49 	bl	8010590 <xQueueGiveFromISR>
 800fcfe:	4603      	mov	r3, r0
 800fd00:	2b01      	cmp	r3, #1
 800fd02:	d001      	beq.n	800fd08 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800fd04:	23ff      	movs	r3, #255	; 0xff
 800fd06:	e017      	b.n	800fd38 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fd08:	68bb      	ldr	r3, [r7, #8]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d013      	beq.n	800fd36 <osSemaphoreRelease+0x5e>
 800fd0e:	4b0c      	ldr	r3, [pc, #48]	; (800fd40 <osSemaphoreRelease+0x68>)
 800fd10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd14:	601a      	str	r2, [r3, #0]
 800fd16:	f3bf 8f4f 	dsb	sy
 800fd1a:	f3bf 8f6f 	isb	sy
 800fd1e:	e00a      	b.n	800fd36 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800fd20:	2300      	movs	r3, #0
 800fd22:	2200      	movs	r2, #0
 800fd24:	2100      	movs	r1, #0
 800fd26:	6878      	ldr	r0, [r7, #4]
 800fd28:	f000 fa94 	bl	8010254 <xQueueGenericSend>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	2b01      	cmp	r3, #1
 800fd30:	d001      	beq.n	800fd36 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800fd32:	23ff      	movs	r3, #255	; 0xff
 800fd34:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800fd36:	68fb      	ldr	r3, [r7, #12]
}
 800fd38:	4618      	mov	r0, r3
 800fd3a:	3710      	adds	r7, #16
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	bd80      	pop	{r7, pc}
 800fd40:	e000ed04 	.word	0xe000ed04

0800fd44 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b082      	sub	sp, #8
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800fd4c:	f7ff fee1 	bl	800fb12 <inHandlerMode>
 800fd50:	4603      	mov	r3, r0
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d001      	beq.n	800fd5a <osSemaphoreDelete+0x16>
    return osErrorISR;
 800fd56:	2382      	movs	r3, #130	; 0x82
 800fd58:	e003      	b.n	800fd62 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800fd5a:	6878      	ldr	r0, [r7, #4]
 800fd5c:	f000 ff1f 	bl	8010b9e <vQueueDelete>

  return osOK; 
 800fd60:	2300      	movs	r3, #0
}
 800fd62:	4618      	mov	r0, r3
 800fd64:	3708      	adds	r7, #8
 800fd66:	46bd      	mov	sp, r7
 800fd68:	bd80      	pop	{r7, pc}

0800fd6a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800fd6a:	b580      	push	{r7, lr}
 800fd6c:	b082      	sub	sp, #8
 800fd6e:	af00      	add	r7, sp, #0
 800fd70:	6078      	str	r0, [r7, #4]
 800fd72:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	6818      	ldr	r0, [r3, #0]
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	685b      	ldr	r3, [r3, #4]
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	4619      	mov	r1, r3
 800fd80:	f000 f9d8 	bl	8010134 <xQueueGenericCreate>
 800fd84:	4603      	mov	r3, r0
#endif
}
 800fd86:	4618      	mov	r0, r3
 800fd88:	3708      	adds	r7, #8
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	bd80      	pop	{r7, pc}
	...

0800fd90 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800fd90:	b580      	push	{r7, lr}
 800fd92:	b086      	sub	sp, #24
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	60f8      	str	r0, [r7, #12]
 800fd98:	60b9      	str	r1, [r7, #8]
 800fd9a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800fda4:	697b      	ldr	r3, [r7, #20]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d101      	bne.n	800fdae <osMessagePut+0x1e>
    ticks = 1;
 800fdaa:	2301      	movs	r3, #1
 800fdac:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800fdae:	f7ff feb0 	bl	800fb12 <inHandlerMode>
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d018      	beq.n	800fdea <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800fdb8:	f107 0210 	add.w	r2, r7, #16
 800fdbc:	f107 0108 	add.w	r1, r7, #8
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	68f8      	ldr	r0, [r7, #12]
 800fdc4:	f000 fb48 	bl	8010458 <xQueueGenericSendFromISR>
 800fdc8:	4603      	mov	r3, r0
 800fdca:	2b01      	cmp	r3, #1
 800fdcc:	d001      	beq.n	800fdd2 <osMessagePut+0x42>
      return osErrorOS;
 800fdce:	23ff      	movs	r3, #255	; 0xff
 800fdd0:	e018      	b.n	800fe04 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fdd2:	693b      	ldr	r3, [r7, #16]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d014      	beq.n	800fe02 <osMessagePut+0x72>
 800fdd8:	4b0c      	ldr	r3, [pc, #48]	; (800fe0c <osMessagePut+0x7c>)
 800fdda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fdde:	601a      	str	r2, [r3, #0]
 800fde0:	f3bf 8f4f 	dsb	sy
 800fde4:	f3bf 8f6f 	isb	sy
 800fde8:	e00b      	b.n	800fe02 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800fdea:	f107 0108 	add.w	r1, r7, #8
 800fdee:	2300      	movs	r3, #0
 800fdf0:	697a      	ldr	r2, [r7, #20]
 800fdf2:	68f8      	ldr	r0, [r7, #12]
 800fdf4:	f000 fa2e 	bl	8010254 <xQueueGenericSend>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	2b01      	cmp	r3, #1
 800fdfc:	d001      	beq.n	800fe02 <osMessagePut+0x72>
      return osErrorOS;
 800fdfe:	23ff      	movs	r3, #255	; 0xff
 800fe00:	e000      	b.n	800fe04 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800fe02:	2300      	movs	r3, #0
}
 800fe04:	4618      	mov	r0, r3
 800fe06:	3718      	adds	r7, #24
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	bd80      	pop	{r7, pc}
 800fe0c:	e000ed04 	.word	0xe000ed04

0800fe10 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800fe10:	b590      	push	{r4, r7, lr}
 800fe12:	b08b      	sub	sp, #44	; 0x2c
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	60f8      	str	r0, [r7, #12]
 800fe18:	60b9      	str	r1, [r7, #8]
 800fe1a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800fe1c:	68bb      	ldr	r3, [r7, #8]
 800fe1e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800fe20:	2300      	movs	r3, #0
 800fe22:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800fe24:	68bb      	ldr	r3, [r7, #8]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d10a      	bne.n	800fe40 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800fe2a:	2380      	movs	r3, #128	; 0x80
 800fe2c:	617b      	str	r3, [r7, #20]
    return event;
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	461c      	mov	r4, r3
 800fe32:	f107 0314 	add.w	r3, r7, #20
 800fe36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fe3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fe3e:	e054      	b.n	800feea <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800fe40:	2300      	movs	r3, #0
 800fe42:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800fe44:	2300      	movs	r3, #0
 800fe46:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe4e:	d103      	bne.n	800fe58 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800fe50:	f04f 33ff 	mov.w	r3, #4294967295
 800fe54:	627b      	str	r3, [r7, #36]	; 0x24
 800fe56:	e009      	b.n	800fe6c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d006      	beq.n	800fe6c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800fe62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d101      	bne.n	800fe6c <osMessageGet+0x5c>
      ticks = 1;
 800fe68:	2301      	movs	r3, #1
 800fe6a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800fe6c:	f7ff fe51 	bl	800fb12 <inHandlerMode>
 800fe70:	4603      	mov	r3, r0
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d01c      	beq.n	800feb0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800fe76:	f107 0220 	add.w	r2, r7, #32
 800fe7a:	f107 0314 	add.w	r3, r7, #20
 800fe7e:	3304      	adds	r3, #4
 800fe80:	4619      	mov	r1, r3
 800fe82:	68b8      	ldr	r0, [r7, #8]
 800fe84:	f000 fe08 	bl	8010a98 <xQueueReceiveFromISR>
 800fe88:	4603      	mov	r3, r0
 800fe8a:	2b01      	cmp	r3, #1
 800fe8c:	d102      	bne.n	800fe94 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800fe8e:	2310      	movs	r3, #16
 800fe90:	617b      	str	r3, [r7, #20]
 800fe92:	e001      	b.n	800fe98 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800fe94:	2300      	movs	r3, #0
 800fe96:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fe98:	6a3b      	ldr	r3, [r7, #32]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d01d      	beq.n	800feda <osMessageGet+0xca>
 800fe9e:	4b15      	ldr	r3, [pc, #84]	; (800fef4 <osMessageGet+0xe4>)
 800fea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fea4:	601a      	str	r2, [r3, #0]
 800fea6:	f3bf 8f4f 	dsb	sy
 800feaa:	f3bf 8f6f 	isb	sy
 800feae:	e014      	b.n	800feda <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800feb0:	f107 0314 	add.w	r3, r7, #20
 800feb4:	3304      	adds	r3, #4
 800feb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800feb8:	4619      	mov	r1, r3
 800feba:	68b8      	ldr	r0, [r7, #8]
 800febc:	f000 fbfa 	bl	80106b4 <xQueueReceive>
 800fec0:	4603      	mov	r3, r0
 800fec2:	2b01      	cmp	r3, #1
 800fec4:	d102      	bne.n	800fecc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800fec6:	2310      	movs	r3, #16
 800fec8:	617b      	str	r3, [r7, #20]
 800feca:	e006      	b.n	800feda <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800fecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d101      	bne.n	800fed6 <osMessageGet+0xc6>
 800fed2:	2300      	movs	r3, #0
 800fed4:	e000      	b.n	800fed8 <osMessageGet+0xc8>
 800fed6:	2340      	movs	r3, #64	; 0x40
 800fed8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	461c      	mov	r4, r3
 800fede:	f107 0314 	add.w	r3, r7, #20
 800fee2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fee6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800feea:	68f8      	ldr	r0, [r7, #12]
 800feec:	372c      	adds	r7, #44	; 0x2c
 800feee:	46bd      	mov	sp, r7
 800fef0:	bd90      	pop	{r4, r7, pc}
 800fef2:	bf00      	nop
 800fef4:	e000ed04 	.word	0xe000ed04

0800fef8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fef8:	b480      	push	{r7}
 800fefa:	b083      	sub	sp, #12
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	f103 0208 	add.w	r2, r3, #8
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	f04f 32ff 	mov.w	r2, #4294967295
 800ff10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	f103 0208 	add.w	r2, r3, #8
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	f103 0208 	add.w	r2, r3, #8
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	2200      	movs	r2, #0
 800ff2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ff2c:	bf00      	nop
 800ff2e:	370c      	adds	r7, #12
 800ff30:	46bd      	mov	sp, r7
 800ff32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff36:	4770      	bx	lr

0800ff38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ff38:	b480      	push	{r7}
 800ff3a:	b083      	sub	sp, #12
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	2200      	movs	r2, #0
 800ff44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ff46:	bf00      	nop
 800ff48:	370c      	adds	r7, #12
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff50:	4770      	bx	lr

0800ff52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ff52:	b480      	push	{r7}
 800ff54:	b085      	sub	sp, #20
 800ff56:	af00      	add	r7, sp, #0
 800ff58:	6078      	str	r0, [r7, #4]
 800ff5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	685b      	ldr	r3, [r3, #4]
 800ff60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ff62:	683b      	ldr	r3, [r7, #0]
 800ff64:	68fa      	ldr	r2, [r7, #12]
 800ff66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	689a      	ldr	r2, [r3, #8]
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	689b      	ldr	r3, [r3, #8]
 800ff74:	683a      	ldr	r2, [r7, #0]
 800ff76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	683a      	ldr	r2, [r7, #0]
 800ff7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ff7e:	683b      	ldr	r3, [r7, #0]
 800ff80:	687a      	ldr	r2, [r7, #4]
 800ff82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	1c5a      	adds	r2, r3, #1
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	601a      	str	r2, [r3, #0]
}
 800ff8e:	bf00      	nop
 800ff90:	3714      	adds	r7, #20
 800ff92:	46bd      	mov	sp, r7
 800ff94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff98:	4770      	bx	lr

0800ff9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ff9a:	b480      	push	{r7}
 800ff9c:	b085      	sub	sp, #20
 800ff9e:	af00      	add	r7, sp, #0
 800ffa0:	6078      	str	r0, [r7, #4]
 800ffa2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ffa4:	683b      	ldr	r3, [r7, #0]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ffaa:	68bb      	ldr	r3, [r7, #8]
 800ffac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffb0:	d103      	bne.n	800ffba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	691b      	ldr	r3, [r3, #16]
 800ffb6:	60fb      	str	r3, [r7, #12]
 800ffb8:	e00c      	b.n	800ffd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	3308      	adds	r3, #8
 800ffbe:	60fb      	str	r3, [r7, #12]
 800ffc0:	e002      	b.n	800ffc8 <vListInsert+0x2e>
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	685b      	ldr	r3, [r3, #4]
 800ffc6:	60fb      	str	r3, [r7, #12]
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	685b      	ldr	r3, [r3, #4]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	68ba      	ldr	r2, [r7, #8]
 800ffd0:	429a      	cmp	r2, r3
 800ffd2:	d2f6      	bcs.n	800ffc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	685a      	ldr	r2, [r3, #4]
 800ffd8:	683b      	ldr	r3, [r7, #0]
 800ffda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ffdc:	683b      	ldr	r3, [r7, #0]
 800ffde:	685b      	ldr	r3, [r3, #4]
 800ffe0:	683a      	ldr	r2, [r7, #0]
 800ffe2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ffe4:	683b      	ldr	r3, [r7, #0]
 800ffe6:	68fa      	ldr	r2, [r7, #12]
 800ffe8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	683a      	ldr	r2, [r7, #0]
 800ffee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	687a      	ldr	r2, [r7, #4]
 800fff4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	1c5a      	adds	r2, r3, #1
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	601a      	str	r2, [r3, #0]
}
 8010000:	bf00      	nop
 8010002:	3714      	adds	r7, #20
 8010004:	46bd      	mov	sp, r7
 8010006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000a:	4770      	bx	lr

0801000c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801000c:	b480      	push	{r7}
 801000e:	b085      	sub	sp, #20
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	691b      	ldr	r3, [r3, #16]
 8010018:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	685b      	ldr	r3, [r3, #4]
 801001e:	687a      	ldr	r2, [r7, #4]
 8010020:	6892      	ldr	r2, [r2, #8]
 8010022:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	689b      	ldr	r3, [r3, #8]
 8010028:	687a      	ldr	r2, [r7, #4]
 801002a:	6852      	ldr	r2, [r2, #4]
 801002c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	685b      	ldr	r3, [r3, #4]
 8010032:	687a      	ldr	r2, [r7, #4]
 8010034:	429a      	cmp	r2, r3
 8010036:	d103      	bne.n	8010040 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	689a      	ldr	r2, [r3, #8]
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	2200      	movs	r2, #0
 8010044:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	1e5a      	subs	r2, r3, #1
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	681b      	ldr	r3, [r3, #0]
}
 8010054:	4618      	mov	r0, r3
 8010056:	3714      	adds	r7, #20
 8010058:	46bd      	mov	sp, r7
 801005a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005e:	4770      	bx	lr

08010060 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b084      	sub	sp, #16
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
 8010068:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d10b      	bne.n	801008c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010078:	b672      	cpsid	i
 801007a:	f383 8811 	msr	BASEPRI, r3
 801007e:	f3bf 8f6f 	isb	sy
 8010082:	f3bf 8f4f 	dsb	sy
 8010086:	b662      	cpsie	i
 8010088:	60bb      	str	r3, [r7, #8]
 801008a:	e7fe      	b.n	801008a <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 801008c:	f001 ffdc 	bl	8012048 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	681a      	ldr	r2, [r3, #0]
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010098:	68f9      	ldr	r1, [r7, #12]
 801009a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801009c:	fb01 f303 	mul.w	r3, r1, r3
 80100a0:	441a      	add	r2, r3
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	2200      	movs	r2, #0
 80100aa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	681a      	ldr	r2, [r3, #0]
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	681a      	ldr	r2, [r3, #0]
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100bc:	3b01      	subs	r3, #1
 80100be:	68f9      	ldr	r1, [r7, #12]
 80100c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80100c2:	fb01 f303 	mul.w	r3, r1, r3
 80100c6:	441a      	add	r2, r3
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	22ff      	movs	r2, #255	; 0xff
 80100d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	22ff      	movs	r2, #255	; 0xff
 80100d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80100dc:	683b      	ldr	r3, [r7, #0]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d114      	bne.n	801010c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	691b      	ldr	r3, [r3, #16]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d01a      	beq.n	8010120 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	3310      	adds	r3, #16
 80100ee:	4618      	mov	r0, r3
 80100f0:	f001 fab0 	bl	8011654 <xTaskRemoveFromEventList>
 80100f4:	4603      	mov	r3, r0
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d012      	beq.n	8010120 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80100fa:	4b0d      	ldr	r3, [pc, #52]	; (8010130 <xQueueGenericReset+0xd0>)
 80100fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010100:	601a      	str	r2, [r3, #0]
 8010102:	f3bf 8f4f 	dsb	sy
 8010106:	f3bf 8f6f 	isb	sy
 801010a:	e009      	b.n	8010120 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	3310      	adds	r3, #16
 8010110:	4618      	mov	r0, r3
 8010112:	f7ff fef1 	bl	800fef8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	3324      	adds	r3, #36	; 0x24
 801011a:	4618      	mov	r0, r3
 801011c:	f7ff feec 	bl	800fef8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010120:	f001 ffc4 	bl	80120ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010124:	2301      	movs	r3, #1
}
 8010126:	4618      	mov	r0, r3
 8010128:	3710      	adds	r7, #16
 801012a:	46bd      	mov	sp, r7
 801012c:	bd80      	pop	{r7, pc}
 801012e:	bf00      	nop
 8010130:	e000ed04 	.word	0xe000ed04

08010134 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010134:	b580      	push	{r7, lr}
 8010136:	b08a      	sub	sp, #40	; 0x28
 8010138:	af02      	add	r7, sp, #8
 801013a:	60f8      	str	r0, [r7, #12]
 801013c:	60b9      	str	r1, [r7, #8]
 801013e:	4613      	mov	r3, r2
 8010140:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d10b      	bne.n	8010160 <xQueueGenericCreate+0x2c>
 8010148:	f04f 0350 	mov.w	r3, #80	; 0x50
 801014c:	b672      	cpsid	i
 801014e:	f383 8811 	msr	BASEPRI, r3
 8010152:	f3bf 8f6f 	isb	sy
 8010156:	f3bf 8f4f 	dsb	sy
 801015a:	b662      	cpsie	i
 801015c:	613b      	str	r3, [r7, #16]
 801015e:	e7fe      	b.n	801015e <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8010160:	68bb      	ldr	r3, [r7, #8]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d102      	bne.n	801016c <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8010166:	2300      	movs	r3, #0
 8010168:	61fb      	str	r3, [r7, #28]
 801016a:	e004      	b.n	8010176 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	68ba      	ldr	r2, [r7, #8]
 8010170:	fb02 f303 	mul.w	r3, r2, r3
 8010174:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8010176:	69fb      	ldr	r3, [r7, #28]
 8010178:	3348      	adds	r3, #72	; 0x48
 801017a:	4618      	mov	r0, r3
 801017c:	f002 f886 	bl	801228c <pvPortMalloc>
 8010180:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010182:	69bb      	ldr	r3, [r7, #24]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d00b      	beq.n	80101a0 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8010188:	69bb      	ldr	r3, [r7, #24]
 801018a:	3348      	adds	r3, #72	; 0x48
 801018c:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801018e:	79fa      	ldrb	r2, [r7, #7]
 8010190:	69bb      	ldr	r3, [r7, #24]
 8010192:	9300      	str	r3, [sp, #0]
 8010194:	4613      	mov	r3, r2
 8010196:	697a      	ldr	r2, [r7, #20]
 8010198:	68b9      	ldr	r1, [r7, #8]
 801019a:	68f8      	ldr	r0, [r7, #12]
 801019c:	f000 f805 	bl	80101aa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80101a0:	69bb      	ldr	r3, [r7, #24]
	}
 80101a2:	4618      	mov	r0, r3
 80101a4:	3720      	adds	r7, #32
 80101a6:	46bd      	mov	sp, r7
 80101a8:	bd80      	pop	{r7, pc}

080101aa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80101aa:	b580      	push	{r7, lr}
 80101ac:	b084      	sub	sp, #16
 80101ae:	af00      	add	r7, sp, #0
 80101b0:	60f8      	str	r0, [r7, #12]
 80101b2:	60b9      	str	r1, [r7, #8]
 80101b4:	607a      	str	r2, [r7, #4]
 80101b6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80101b8:	68bb      	ldr	r3, [r7, #8]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d103      	bne.n	80101c6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80101be:	69bb      	ldr	r3, [r7, #24]
 80101c0:	69ba      	ldr	r2, [r7, #24]
 80101c2:	601a      	str	r2, [r3, #0]
 80101c4:	e002      	b.n	80101cc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80101c6:	69bb      	ldr	r3, [r7, #24]
 80101c8:	687a      	ldr	r2, [r7, #4]
 80101ca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80101cc:	69bb      	ldr	r3, [r7, #24]
 80101ce:	68fa      	ldr	r2, [r7, #12]
 80101d0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80101d2:	69bb      	ldr	r3, [r7, #24]
 80101d4:	68ba      	ldr	r2, [r7, #8]
 80101d6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80101d8:	2101      	movs	r1, #1
 80101da:	69b8      	ldr	r0, [r7, #24]
 80101dc:	f7ff ff40 	bl	8010060 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80101e0:	bf00      	nop
 80101e2:	3710      	adds	r7, #16
 80101e4:	46bd      	mov	sp, r7
 80101e6:	bd80      	pop	{r7, pc}

080101e8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b086      	sub	sp, #24
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
 80101f0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d10b      	bne.n	8010210 <xQueueCreateCountingSemaphore+0x28>
 80101f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101fc:	b672      	cpsid	i
 80101fe:	f383 8811 	msr	BASEPRI, r3
 8010202:	f3bf 8f6f 	isb	sy
 8010206:	f3bf 8f4f 	dsb	sy
 801020a:	b662      	cpsie	i
 801020c:	613b      	str	r3, [r7, #16]
 801020e:	e7fe      	b.n	801020e <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010210:	683a      	ldr	r2, [r7, #0]
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	429a      	cmp	r2, r3
 8010216:	d90b      	bls.n	8010230 <xQueueCreateCountingSemaphore+0x48>
 8010218:	f04f 0350 	mov.w	r3, #80	; 0x50
 801021c:	b672      	cpsid	i
 801021e:	f383 8811 	msr	BASEPRI, r3
 8010222:	f3bf 8f6f 	isb	sy
 8010226:	f3bf 8f4f 	dsb	sy
 801022a:	b662      	cpsie	i
 801022c:	60fb      	str	r3, [r7, #12]
 801022e:	e7fe      	b.n	801022e <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010230:	2202      	movs	r2, #2
 8010232:	2100      	movs	r1, #0
 8010234:	6878      	ldr	r0, [r7, #4]
 8010236:	f7ff ff7d 	bl	8010134 <xQueueGenericCreate>
 801023a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 801023c:	697b      	ldr	r3, [r7, #20]
 801023e:	2b00      	cmp	r3, #0
 8010240:	d002      	beq.n	8010248 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010242:	697b      	ldr	r3, [r7, #20]
 8010244:	683a      	ldr	r2, [r7, #0]
 8010246:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8010248:	697b      	ldr	r3, [r7, #20]
	}
 801024a:	4618      	mov	r0, r3
 801024c:	3718      	adds	r7, #24
 801024e:	46bd      	mov	sp, r7
 8010250:	bd80      	pop	{r7, pc}
	...

08010254 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b08e      	sub	sp, #56	; 0x38
 8010258:	af00      	add	r7, sp, #0
 801025a:	60f8      	str	r0, [r7, #12]
 801025c:	60b9      	str	r1, [r7, #8]
 801025e:	607a      	str	r2, [r7, #4]
 8010260:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010262:	2300      	movs	r3, #0
 8010264:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801026a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801026c:	2b00      	cmp	r3, #0
 801026e:	d10b      	bne.n	8010288 <xQueueGenericSend+0x34>
 8010270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010274:	b672      	cpsid	i
 8010276:	f383 8811 	msr	BASEPRI, r3
 801027a:	f3bf 8f6f 	isb	sy
 801027e:	f3bf 8f4f 	dsb	sy
 8010282:	b662      	cpsie	i
 8010284:	62bb      	str	r3, [r7, #40]	; 0x28
 8010286:	e7fe      	b.n	8010286 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010288:	68bb      	ldr	r3, [r7, #8]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d103      	bne.n	8010296 <xQueueGenericSend+0x42>
 801028e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010292:	2b00      	cmp	r3, #0
 8010294:	d101      	bne.n	801029a <xQueueGenericSend+0x46>
 8010296:	2301      	movs	r3, #1
 8010298:	e000      	b.n	801029c <xQueueGenericSend+0x48>
 801029a:	2300      	movs	r3, #0
 801029c:	2b00      	cmp	r3, #0
 801029e:	d10b      	bne.n	80102b8 <xQueueGenericSend+0x64>
 80102a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102a4:	b672      	cpsid	i
 80102a6:	f383 8811 	msr	BASEPRI, r3
 80102aa:	f3bf 8f6f 	isb	sy
 80102ae:	f3bf 8f4f 	dsb	sy
 80102b2:	b662      	cpsie	i
 80102b4:	627b      	str	r3, [r7, #36]	; 0x24
 80102b6:	e7fe      	b.n	80102b6 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80102b8:	683b      	ldr	r3, [r7, #0]
 80102ba:	2b02      	cmp	r3, #2
 80102bc:	d103      	bne.n	80102c6 <xQueueGenericSend+0x72>
 80102be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102c2:	2b01      	cmp	r3, #1
 80102c4:	d101      	bne.n	80102ca <xQueueGenericSend+0x76>
 80102c6:	2301      	movs	r3, #1
 80102c8:	e000      	b.n	80102cc <xQueueGenericSend+0x78>
 80102ca:	2300      	movs	r3, #0
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d10b      	bne.n	80102e8 <xQueueGenericSend+0x94>
 80102d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102d4:	b672      	cpsid	i
 80102d6:	f383 8811 	msr	BASEPRI, r3
 80102da:	f3bf 8f6f 	isb	sy
 80102de:	f3bf 8f4f 	dsb	sy
 80102e2:	b662      	cpsie	i
 80102e4:	623b      	str	r3, [r7, #32]
 80102e6:	e7fe      	b.n	80102e6 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80102e8:	f001 fb5a 	bl	80119a0 <xTaskGetSchedulerState>
 80102ec:	4603      	mov	r3, r0
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d102      	bne.n	80102f8 <xQueueGenericSend+0xa4>
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d101      	bne.n	80102fc <xQueueGenericSend+0xa8>
 80102f8:	2301      	movs	r3, #1
 80102fa:	e000      	b.n	80102fe <xQueueGenericSend+0xaa>
 80102fc:	2300      	movs	r3, #0
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d10b      	bne.n	801031a <xQueueGenericSend+0xc6>
 8010302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010306:	b672      	cpsid	i
 8010308:	f383 8811 	msr	BASEPRI, r3
 801030c:	f3bf 8f6f 	isb	sy
 8010310:	f3bf 8f4f 	dsb	sy
 8010314:	b662      	cpsie	i
 8010316:	61fb      	str	r3, [r7, #28]
 8010318:	e7fe      	b.n	8010318 <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801031a:	f001 fe95 	bl	8012048 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801031e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010326:	429a      	cmp	r2, r3
 8010328:	d302      	bcc.n	8010330 <xQueueGenericSend+0xdc>
 801032a:	683b      	ldr	r3, [r7, #0]
 801032c:	2b02      	cmp	r3, #2
 801032e:	d129      	bne.n	8010384 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010330:	683a      	ldr	r2, [r7, #0]
 8010332:	68b9      	ldr	r1, [r7, #8]
 8010334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010336:	f000 fc69 	bl	8010c0c <prvCopyDataToQueue>
 801033a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801033c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801033e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010340:	2b00      	cmp	r3, #0
 8010342:	d010      	beq.n	8010366 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010346:	3324      	adds	r3, #36	; 0x24
 8010348:	4618      	mov	r0, r3
 801034a:	f001 f983 	bl	8011654 <xTaskRemoveFromEventList>
 801034e:	4603      	mov	r3, r0
 8010350:	2b00      	cmp	r3, #0
 8010352:	d013      	beq.n	801037c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010354:	4b3f      	ldr	r3, [pc, #252]	; (8010454 <xQueueGenericSend+0x200>)
 8010356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801035a:	601a      	str	r2, [r3, #0]
 801035c:	f3bf 8f4f 	dsb	sy
 8010360:	f3bf 8f6f 	isb	sy
 8010364:	e00a      	b.n	801037c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010368:	2b00      	cmp	r3, #0
 801036a:	d007      	beq.n	801037c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801036c:	4b39      	ldr	r3, [pc, #228]	; (8010454 <xQueueGenericSend+0x200>)
 801036e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010372:	601a      	str	r2, [r3, #0]
 8010374:	f3bf 8f4f 	dsb	sy
 8010378:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801037c:	f001 fe96 	bl	80120ac <vPortExitCritical>
				return pdPASS;
 8010380:	2301      	movs	r3, #1
 8010382:	e063      	b.n	801044c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	2b00      	cmp	r3, #0
 8010388:	d103      	bne.n	8010392 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801038a:	f001 fe8f 	bl	80120ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801038e:	2300      	movs	r3, #0
 8010390:	e05c      	b.n	801044c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010394:	2b00      	cmp	r3, #0
 8010396:	d106      	bne.n	80103a6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010398:	f107 0314 	add.w	r3, r7, #20
 801039c:	4618      	mov	r0, r3
 801039e:	f001 f9bd 	bl	801171c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80103a2:	2301      	movs	r3, #1
 80103a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80103a6:	f001 fe81 	bl	80120ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80103aa:	f000 ff1f 	bl	80111ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80103ae:	f001 fe4b 	bl	8012048 <vPortEnterCritical>
 80103b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80103b8:	b25b      	sxtb	r3, r3
 80103ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103be:	d103      	bne.n	80103c8 <xQueueGenericSend+0x174>
 80103c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103c2:	2200      	movs	r2, #0
 80103c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80103c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80103ce:	b25b      	sxtb	r3, r3
 80103d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103d4:	d103      	bne.n	80103de <xQueueGenericSend+0x18a>
 80103d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103d8:	2200      	movs	r2, #0
 80103da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80103de:	f001 fe65 	bl	80120ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80103e2:	1d3a      	adds	r2, r7, #4
 80103e4:	f107 0314 	add.w	r3, r7, #20
 80103e8:	4611      	mov	r1, r2
 80103ea:	4618      	mov	r0, r3
 80103ec:	f001 f9ac 	bl	8011748 <xTaskCheckForTimeOut>
 80103f0:	4603      	mov	r3, r0
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d124      	bne.n	8010440 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80103f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80103f8:	f000 fd00 	bl	8010dfc <prvIsQueueFull>
 80103fc:	4603      	mov	r3, r0
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d018      	beq.n	8010434 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010404:	3310      	adds	r3, #16
 8010406:	687a      	ldr	r2, [r7, #4]
 8010408:	4611      	mov	r1, r2
 801040a:	4618      	mov	r0, r3
 801040c:	f001 f8fc 	bl	8011608 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010410:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010412:	f000 fc8b 	bl	8010d2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010416:	f000 fef7 	bl	8011208 <xTaskResumeAll>
 801041a:	4603      	mov	r3, r0
 801041c:	2b00      	cmp	r3, #0
 801041e:	f47f af7c 	bne.w	801031a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8010422:	4b0c      	ldr	r3, [pc, #48]	; (8010454 <xQueueGenericSend+0x200>)
 8010424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010428:	601a      	str	r2, [r3, #0]
 801042a:	f3bf 8f4f 	dsb	sy
 801042e:	f3bf 8f6f 	isb	sy
 8010432:	e772      	b.n	801031a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010434:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010436:	f000 fc79 	bl	8010d2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801043a:	f000 fee5 	bl	8011208 <xTaskResumeAll>
 801043e:	e76c      	b.n	801031a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010440:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010442:	f000 fc73 	bl	8010d2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010446:	f000 fedf 	bl	8011208 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801044a:	2300      	movs	r3, #0
		}
	}
}
 801044c:	4618      	mov	r0, r3
 801044e:	3738      	adds	r7, #56	; 0x38
 8010450:	46bd      	mov	sp, r7
 8010452:	bd80      	pop	{r7, pc}
 8010454:	e000ed04 	.word	0xe000ed04

08010458 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010458:	b580      	push	{r7, lr}
 801045a:	b08e      	sub	sp, #56	; 0x38
 801045c:	af00      	add	r7, sp, #0
 801045e:	60f8      	str	r0, [r7, #12]
 8010460:	60b9      	str	r1, [r7, #8]
 8010462:	607a      	str	r2, [r7, #4]
 8010464:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801046a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801046c:	2b00      	cmp	r3, #0
 801046e:	d10b      	bne.n	8010488 <xQueueGenericSendFromISR+0x30>
 8010470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010474:	b672      	cpsid	i
 8010476:	f383 8811 	msr	BASEPRI, r3
 801047a:	f3bf 8f6f 	isb	sy
 801047e:	f3bf 8f4f 	dsb	sy
 8010482:	b662      	cpsie	i
 8010484:	627b      	str	r3, [r7, #36]	; 0x24
 8010486:	e7fe      	b.n	8010486 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010488:	68bb      	ldr	r3, [r7, #8]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d103      	bne.n	8010496 <xQueueGenericSendFromISR+0x3e>
 801048e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010492:	2b00      	cmp	r3, #0
 8010494:	d101      	bne.n	801049a <xQueueGenericSendFromISR+0x42>
 8010496:	2301      	movs	r3, #1
 8010498:	e000      	b.n	801049c <xQueueGenericSendFromISR+0x44>
 801049a:	2300      	movs	r3, #0
 801049c:	2b00      	cmp	r3, #0
 801049e:	d10b      	bne.n	80104b8 <xQueueGenericSendFromISR+0x60>
 80104a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104a4:	b672      	cpsid	i
 80104a6:	f383 8811 	msr	BASEPRI, r3
 80104aa:	f3bf 8f6f 	isb	sy
 80104ae:	f3bf 8f4f 	dsb	sy
 80104b2:	b662      	cpsie	i
 80104b4:	623b      	str	r3, [r7, #32]
 80104b6:	e7fe      	b.n	80104b6 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80104b8:	683b      	ldr	r3, [r7, #0]
 80104ba:	2b02      	cmp	r3, #2
 80104bc:	d103      	bne.n	80104c6 <xQueueGenericSendFromISR+0x6e>
 80104be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104c2:	2b01      	cmp	r3, #1
 80104c4:	d101      	bne.n	80104ca <xQueueGenericSendFromISR+0x72>
 80104c6:	2301      	movs	r3, #1
 80104c8:	e000      	b.n	80104cc <xQueueGenericSendFromISR+0x74>
 80104ca:	2300      	movs	r3, #0
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d10b      	bne.n	80104e8 <xQueueGenericSendFromISR+0x90>
 80104d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104d4:	b672      	cpsid	i
 80104d6:	f383 8811 	msr	BASEPRI, r3
 80104da:	f3bf 8f6f 	isb	sy
 80104de:	f3bf 8f4f 	dsb	sy
 80104e2:	b662      	cpsie	i
 80104e4:	61fb      	str	r3, [r7, #28]
 80104e6:	e7fe      	b.n	80104e6 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80104e8:	f001 fe8e 	bl	8012208 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80104ec:	f3ef 8211 	mrs	r2, BASEPRI
 80104f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104f4:	b672      	cpsid	i
 80104f6:	f383 8811 	msr	BASEPRI, r3
 80104fa:	f3bf 8f6f 	isb	sy
 80104fe:	f3bf 8f4f 	dsb	sy
 8010502:	b662      	cpsie	i
 8010504:	61ba      	str	r2, [r7, #24]
 8010506:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010508:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801050a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801050c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801050e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010514:	429a      	cmp	r2, r3
 8010516:	d302      	bcc.n	801051e <xQueueGenericSendFromISR+0xc6>
 8010518:	683b      	ldr	r3, [r7, #0]
 801051a:	2b02      	cmp	r3, #2
 801051c:	d12c      	bne.n	8010578 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801051e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010520:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010524:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010528:	683a      	ldr	r2, [r7, #0]
 801052a:	68b9      	ldr	r1, [r7, #8]
 801052c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801052e:	f000 fb6d 	bl	8010c0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010532:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8010536:	f1b3 3fff 	cmp.w	r3, #4294967295
 801053a:	d112      	bne.n	8010562 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801053c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801053e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010540:	2b00      	cmp	r3, #0
 8010542:	d016      	beq.n	8010572 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010546:	3324      	adds	r3, #36	; 0x24
 8010548:	4618      	mov	r0, r3
 801054a:	f001 f883 	bl	8011654 <xTaskRemoveFromEventList>
 801054e:	4603      	mov	r3, r0
 8010550:	2b00      	cmp	r3, #0
 8010552:	d00e      	beq.n	8010572 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d00b      	beq.n	8010572 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	2201      	movs	r2, #1
 801055e:	601a      	str	r2, [r3, #0]
 8010560:	e007      	b.n	8010572 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010562:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010566:	3301      	adds	r3, #1
 8010568:	b2db      	uxtb	r3, r3
 801056a:	b25a      	sxtb	r2, r3
 801056c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801056e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010572:	2301      	movs	r3, #1
 8010574:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8010576:	e001      	b.n	801057c <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010578:	2300      	movs	r3, #0
 801057a:	637b      	str	r3, [r7, #52]	; 0x34
 801057c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801057e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010580:	693b      	ldr	r3, [r7, #16]
 8010582:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010588:	4618      	mov	r0, r3
 801058a:	3738      	adds	r7, #56	; 0x38
 801058c:	46bd      	mov	sp, r7
 801058e:	bd80      	pop	{r7, pc}

08010590 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010590:	b580      	push	{r7, lr}
 8010592:	b08e      	sub	sp, #56	; 0x38
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
 8010598:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801059e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d10b      	bne.n	80105bc <xQueueGiveFromISR+0x2c>
	__asm volatile
 80105a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105a8:	b672      	cpsid	i
 80105aa:	f383 8811 	msr	BASEPRI, r3
 80105ae:	f3bf 8f6f 	isb	sy
 80105b2:	f3bf 8f4f 	dsb	sy
 80105b6:	b662      	cpsie	i
 80105b8:	623b      	str	r3, [r7, #32]
 80105ba:	e7fe      	b.n	80105ba <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80105bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d00b      	beq.n	80105dc <xQueueGiveFromISR+0x4c>
 80105c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105c8:	b672      	cpsid	i
 80105ca:	f383 8811 	msr	BASEPRI, r3
 80105ce:	f3bf 8f6f 	isb	sy
 80105d2:	f3bf 8f4f 	dsb	sy
 80105d6:	b662      	cpsie	i
 80105d8:	61fb      	str	r3, [r7, #28]
 80105da:	e7fe      	b.n	80105da <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80105dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d103      	bne.n	80105ec <xQueueGiveFromISR+0x5c>
 80105e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105e6:	685b      	ldr	r3, [r3, #4]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d101      	bne.n	80105f0 <xQueueGiveFromISR+0x60>
 80105ec:	2301      	movs	r3, #1
 80105ee:	e000      	b.n	80105f2 <xQueueGiveFromISR+0x62>
 80105f0:	2300      	movs	r3, #0
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d10b      	bne.n	801060e <xQueueGiveFromISR+0x7e>
 80105f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105fa:	b672      	cpsid	i
 80105fc:	f383 8811 	msr	BASEPRI, r3
 8010600:	f3bf 8f6f 	isb	sy
 8010604:	f3bf 8f4f 	dsb	sy
 8010608:	b662      	cpsie	i
 801060a:	61bb      	str	r3, [r7, #24]
 801060c:	e7fe      	b.n	801060c <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801060e:	f001 fdfb 	bl	8012208 <vPortValidateInterruptPriority>
	__asm volatile
 8010612:	f3ef 8211 	mrs	r2, BASEPRI
 8010616:	f04f 0350 	mov.w	r3, #80	; 0x50
 801061a:	b672      	cpsid	i
 801061c:	f383 8811 	msr	BASEPRI, r3
 8010620:	f3bf 8f6f 	isb	sy
 8010624:	f3bf 8f4f 	dsb	sy
 8010628:	b662      	cpsie	i
 801062a:	617a      	str	r2, [r7, #20]
 801062c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801062e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010630:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010636:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801063a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801063c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801063e:	429a      	cmp	r2, r3
 8010640:	d22b      	bcs.n	801069a <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010644:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801064c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801064e:	1c5a      	adds	r2, r3, #1
 8010650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010652:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010654:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010658:	f1b3 3fff 	cmp.w	r3, #4294967295
 801065c:	d112      	bne.n	8010684 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801065e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010662:	2b00      	cmp	r3, #0
 8010664:	d016      	beq.n	8010694 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010668:	3324      	adds	r3, #36	; 0x24
 801066a:	4618      	mov	r0, r3
 801066c:	f000 fff2 	bl	8011654 <xTaskRemoveFromEventList>
 8010670:	4603      	mov	r3, r0
 8010672:	2b00      	cmp	r3, #0
 8010674:	d00e      	beq.n	8010694 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010676:	683b      	ldr	r3, [r7, #0]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d00b      	beq.n	8010694 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801067c:	683b      	ldr	r3, [r7, #0]
 801067e:	2201      	movs	r2, #1
 8010680:	601a      	str	r2, [r3, #0]
 8010682:	e007      	b.n	8010694 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010684:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010688:	3301      	adds	r3, #1
 801068a:	b2db      	uxtb	r3, r3
 801068c:	b25a      	sxtb	r2, r3
 801068e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010694:	2301      	movs	r3, #1
 8010696:	637b      	str	r3, [r7, #52]	; 0x34
 8010698:	e001      	b.n	801069e <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801069a:	2300      	movs	r3, #0
 801069c:	637b      	str	r3, [r7, #52]	; 0x34
 801069e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106a0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80106a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80106aa:	4618      	mov	r0, r3
 80106ac:	3738      	adds	r7, #56	; 0x38
 80106ae:	46bd      	mov	sp, r7
 80106b0:	bd80      	pop	{r7, pc}
	...

080106b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b08c      	sub	sp, #48	; 0x30
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	60f8      	str	r0, [r7, #12]
 80106bc:	60b9      	str	r1, [r7, #8]
 80106be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80106c0:	2300      	movs	r3, #0
 80106c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80106c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d10b      	bne.n	80106e6 <xQueueReceive+0x32>
	__asm volatile
 80106ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106d2:	b672      	cpsid	i
 80106d4:	f383 8811 	msr	BASEPRI, r3
 80106d8:	f3bf 8f6f 	isb	sy
 80106dc:	f3bf 8f4f 	dsb	sy
 80106e0:	b662      	cpsie	i
 80106e2:	623b      	str	r3, [r7, #32]
 80106e4:	e7fe      	b.n	80106e4 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80106e6:	68bb      	ldr	r3, [r7, #8]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d103      	bne.n	80106f4 <xQueueReceive+0x40>
 80106ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d101      	bne.n	80106f8 <xQueueReceive+0x44>
 80106f4:	2301      	movs	r3, #1
 80106f6:	e000      	b.n	80106fa <xQueueReceive+0x46>
 80106f8:	2300      	movs	r3, #0
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d10b      	bne.n	8010716 <xQueueReceive+0x62>
 80106fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010702:	b672      	cpsid	i
 8010704:	f383 8811 	msr	BASEPRI, r3
 8010708:	f3bf 8f6f 	isb	sy
 801070c:	f3bf 8f4f 	dsb	sy
 8010710:	b662      	cpsie	i
 8010712:	61fb      	str	r3, [r7, #28]
 8010714:	e7fe      	b.n	8010714 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010716:	f001 f943 	bl	80119a0 <xTaskGetSchedulerState>
 801071a:	4603      	mov	r3, r0
 801071c:	2b00      	cmp	r3, #0
 801071e:	d102      	bne.n	8010726 <xQueueReceive+0x72>
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d101      	bne.n	801072a <xQueueReceive+0x76>
 8010726:	2301      	movs	r3, #1
 8010728:	e000      	b.n	801072c <xQueueReceive+0x78>
 801072a:	2300      	movs	r3, #0
 801072c:	2b00      	cmp	r3, #0
 801072e:	d10b      	bne.n	8010748 <xQueueReceive+0x94>
 8010730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010734:	b672      	cpsid	i
 8010736:	f383 8811 	msr	BASEPRI, r3
 801073a:	f3bf 8f6f 	isb	sy
 801073e:	f3bf 8f4f 	dsb	sy
 8010742:	b662      	cpsie	i
 8010744:	61bb      	str	r3, [r7, #24]
 8010746:	e7fe      	b.n	8010746 <xQueueReceive+0x92>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8010748:	f001 fc7e 	bl	8012048 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801074c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801074e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010750:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010754:	2b00      	cmp	r3, #0
 8010756:	d01f      	beq.n	8010798 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010758:	68b9      	ldr	r1, [r7, #8]
 801075a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801075c:	f000 fac0 	bl	8010ce0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010762:	1e5a      	subs	r2, r3, #1
 8010764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010766:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801076a:	691b      	ldr	r3, [r3, #16]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d00f      	beq.n	8010790 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010772:	3310      	adds	r3, #16
 8010774:	4618      	mov	r0, r3
 8010776:	f000 ff6d 	bl	8011654 <xTaskRemoveFromEventList>
 801077a:	4603      	mov	r3, r0
 801077c:	2b00      	cmp	r3, #0
 801077e:	d007      	beq.n	8010790 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010780:	4b3c      	ldr	r3, [pc, #240]	; (8010874 <xQueueReceive+0x1c0>)
 8010782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010786:	601a      	str	r2, [r3, #0]
 8010788:	f3bf 8f4f 	dsb	sy
 801078c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010790:	f001 fc8c 	bl	80120ac <vPortExitCritical>
				return pdPASS;
 8010794:	2301      	movs	r3, #1
 8010796:	e069      	b.n	801086c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d103      	bne.n	80107a6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801079e:	f001 fc85 	bl	80120ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80107a2:	2300      	movs	r3, #0
 80107a4:	e062      	b.n	801086c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80107a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d106      	bne.n	80107ba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80107ac:	f107 0310 	add.w	r3, r7, #16
 80107b0:	4618      	mov	r0, r3
 80107b2:	f000 ffb3 	bl	801171c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80107b6:	2301      	movs	r3, #1
 80107b8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80107ba:	f001 fc77 	bl	80120ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80107be:	f000 fd15 	bl	80111ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80107c2:	f001 fc41 	bl	8012048 <vPortEnterCritical>
 80107c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80107cc:	b25b      	sxtb	r3, r3
 80107ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107d2:	d103      	bne.n	80107dc <xQueueReceive+0x128>
 80107d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107d6:	2200      	movs	r2, #0
 80107d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80107dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80107e2:	b25b      	sxtb	r3, r3
 80107e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107e8:	d103      	bne.n	80107f2 <xQueueReceive+0x13e>
 80107ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107ec:	2200      	movs	r2, #0
 80107ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80107f2:	f001 fc5b 	bl	80120ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80107f6:	1d3a      	adds	r2, r7, #4
 80107f8:	f107 0310 	add.w	r3, r7, #16
 80107fc:	4611      	mov	r1, r2
 80107fe:	4618      	mov	r0, r3
 8010800:	f000 ffa2 	bl	8011748 <xTaskCheckForTimeOut>
 8010804:	4603      	mov	r3, r0
 8010806:	2b00      	cmp	r3, #0
 8010808:	d123      	bne.n	8010852 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801080a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801080c:	f000 fae0 	bl	8010dd0 <prvIsQueueEmpty>
 8010810:	4603      	mov	r3, r0
 8010812:	2b00      	cmp	r3, #0
 8010814:	d017      	beq.n	8010846 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010818:	3324      	adds	r3, #36	; 0x24
 801081a:	687a      	ldr	r2, [r7, #4]
 801081c:	4611      	mov	r1, r2
 801081e:	4618      	mov	r0, r3
 8010820:	f000 fef2 	bl	8011608 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010824:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010826:	f000 fa81 	bl	8010d2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801082a:	f000 fced 	bl	8011208 <xTaskResumeAll>
 801082e:	4603      	mov	r3, r0
 8010830:	2b00      	cmp	r3, #0
 8010832:	d189      	bne.n	8010748 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8010834:	4b0f      	ldr	r3, [pc, #60]	; (8010874 <xQueueReceive+0x1c0>)
 8010836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801083a:	601a      	str	r2, [r3, #0]
 801083c:	f3bf 8f4f 	dsb	sy
 8010840:	f3bf 8f6f 	isb	sy
 8010844:	e780      	b.n	8010748 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010846:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010848:	f000 fa70 	bl	8010d2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801084c:	f000 fcdc 	bl	8011208 <xTaskResumeAll>
 8010850:	e77a      	b.n	8010748 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010852:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010854:	f000 fa6a 	bl	8010d2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010858:	f000 fcd6 	bl	8011208 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801085c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801085e:	f000 fab7 	bl	8010dd0 <prvIsQueueEmpty>
 8010862:	4603      	mov	r3, r0
 8010864:	2b00      	cmp	r3, #0
 8010866:	f43f af6f 	beq.w	8010748 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801086a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 801086c:	4618      	mov	r0, r3
 801086e:	3730      	adds	r7, #48	; 0x30
 8010870:	46bd      	mov	sp, r7
 8010872:	bd80      	pop	{r7, pc}
 8010874:	e000ed04 	.word	0xe000ed04

08010878 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010878:	b580      	push	{r7, lr}
 801087a:	b08e      	sub	sp, #56	; 0x38
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
 8010880:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010882:	2300      	movs	r3, #0
 8010884:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801088a:	2300      	movs	r3, #0
 801088c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801088e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010890:	2b00      	cmp	r3, #0
 8010892:	d10b      	bne.n	80108ac <xQueueSemaphoreTake+0x34>
 8010894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010898:	b672      	cpsid	i
 801089a:	f383 8811 	msr	BASEPRI, r3
 801089e:	f3bf 8f6f 	isb	sy
 80108a2:	f3bf 8f4f 	dsb	sy
 80108a6:	b662      	cpsie	i
 80108a8:	623b      	str	r3, [r7, #32]
 80108aa:	e7fe      	b.n	80108aa <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80108ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d00b      	beq.n	80108cc <xQueueSemaphoreTake+0x54>
 80108b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108b8:	b672      	cpsid	i
 80108ba:	f383 8811 	msr	BASEPRI, r3
 80108be:	f3bf 8f6f 	isb	sy
 80108c2:	f3bf 8f4f 	dsb	sy
 80108c6:	b662      	cpsie	i
 80108c8:	61fb      	str	r3, [r7, #28]
 80108ca:	e7fe      	b.n	80108ca <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80108cc:	f001 f868 	bl	80119a0 <xTaskGetSchedulerState>
 80108d0:	4603      	mov	r3, r0
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d102      	bne.n	80108dc <xQueueSemaphoreTake+0x64>
 80108d6:	683b      	ldr	r3, [r7, #0]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d101      	bne.n	80108e0 <xQueueSemaphoreTake+0x68>
 80108dc:	2301      	movs	r3, #1
 80108de:	e000      	b.n	80108e2 <xQueueSemaphoreTake+0x6a>
 80108e0:	2300      	movs	r3, #0
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d10b      	bne.n	80108fe <xQueueSemaphoreTake+0x86>
 80108e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108ea:	b672      	cpsid	i
 80108ec:	f383 8811 	msr	BASEPRI, r3
 80108f0:	f3bf 8f6f 	isb	sy
 80108f4:	f3bf 8f4f 	dsb	sy
 80108f8:	b662      	cpsie	i
 80108fa:	61bb      	str	r3, [r7, #24]
 80108fc:	e7fe      	b.n	80108fc <xQueueSemaphoreTake+0x84>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80108fe:	f001 fba3 	bl	8012048 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010906:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801090a:	2b00      	cmp	r3, #0
 801090c:	d024      	beq.n	8010958 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801090e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010910:	1e5a      	subs	r2, r3, #1
 8010912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010914:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d104      	bne.n	8010928 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 801091e:	f001 fa0d 	bl	8011d3c <pvTaskIncrementMutexHeldCount>
 8010922:	4602      	mov	r2, r0
 8010924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010926:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801092a:	691b      	ldr	r3, [r3, #16]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d00f      	beq.n	8010950 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010932:	3310      	adds	r3, #16
 8010934:	4618      	mov	r0, r3
 8010936:	f000 fe8d 	bl	8011654 <xTaskRemoveFromEventList>
 801093a:	4603      	mov	r3, r0
 801093c:	2b00      	cmp	r3, #0
 801093e:	d007      	beq.n	8010950 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010940:	4b54      	ldr	r3, [pc, #336]	; (8010a94 <xQueueSemaphoreTake+0x21c>)
 8010942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010946:	601a      	str	r2, [r3, #0]
 8010948:	f3bf 8f4f 	dsb	sy
 801094c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010950:	f001 fbac 	bl	80120ac <vPortExitCritical>
				return pdPASS;
 8010954:	2301      	movs	r3, #1
 8010956:	e098      	b.n	8010a8a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010958:	683b      	ldr	r3, [r7, #0]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d112      	bne.n	8010984 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801095e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010960:	2b00      	cmp	r3, #0
 8010962:	d00b      	beq.n	801097c <xQueueSemaphoreTake+0x104>
 8010964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010968:	b672      	cpsid	i
 801096a:	f383 8811 	msr	BASEPRI, r3
 801096e:	f3bf 8f6f 	isb	sy
 8010972:	f3bf 8f4f 	dsb	sy
 8010976:	b662      	cpsie	i
 8010978:	617b      	str	r3, [r7, #20]
 801097a:	e7fe      	b.n	801097a <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801097c:	f001 fb96 	bl	80120ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010980:	2300      	movs	r3, #0
 8010982:	e082      	b.n	8010a8a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010986:	2b00      	cmp	r3, #0
 8010988:	d106      	bne.n	8010998 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801098a:	f107 030c 	add.w	r3, r7, #12
 801098e:	4618      	mov	r0, r3
 8010990:	f000 fec4 	bl	801171c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010994:	2301      	movs	r3, #1
 8010996:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010998:	f001 fb88 	bl	80120ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801099c:	f000 fc26 	bl	80111ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80109a0:	f001 fb52 	bl	8012048 <vPortEnterCritical>
 80109a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80109aa:	b25b      	sxtb	r3, r3
 80109ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109b0:	d103      	bne.n	80109ba <xQueueSemaphoreTake+0x142>
 80109b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109b4:	2200      	movs	r2, #0
 80109b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80109ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80109c0:	b25b      	sxtb	r3, r3
 80109c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109c6:	d103      	bne.n	80109d0 <xQueueSemaphoreTake+0x158>
 80109c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109ca:	2200      	movs	r2, #0
 80109cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80109d0:	f001 fb6c 	bl	80120ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80109d4:	463a      	mov	r2, r7
 80109d6:	f107 030c 	add.w	r3, r7, #12
 80109da:	4611      	mov	r1, r2
 80109dc:	4618      	mov	r0, r3
 80109de:	f000 feb3 	bl	8011748 <xTaskCheckForTimeOut>
 80109e2:	4603      	mov	r3, r0
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d132      	bne.n	8010a4e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80109e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80109ea:	f000 f9f1 	bl	8010dd0 <prvIsQueueEmpty>
 80109ee:	4603      	mov	r3, r0
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d026      	beq.n	8010a42 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80109f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d109      	bne.n	8010a10 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80109fc:	f001 fb24 	bl	8012048 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8010a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a02:	685b      	ldr	r3, [r3, #4]
 8010a04:	4618      	mov	r0, r3
 8010a06:	f000 ffe9 	bl	80119dc <xTaskPriorityInherit>
 8010a0a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010a0c:	f001 fb4e 	bl	80120ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a12:	3324      	adds	r3, #36	; 0x24
 8010a14:	683a      	ldr	r2, [r7, #0]
 8010a16:	4611      	mov	r1, r2
 8010a18:	4618      	mov	r0, r3
 8010a1a:	f000 fdf5 	bl	8011608 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010a1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010a20:	f000 f984 	bl	8010d2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010a24:	f000 fbf0 	bl	8011208 <xTaskResumeAll>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	f47f af67 	bne.w	80108fe <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8010a30:	4b18      	ldr	r3, [pc, #96]	; (8010a94 <xQueueSemaphoreTake+0x21c>)
 8010a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a36:	601a      	str	r2, [r3, #0]
 8010a38:	f3bf 8f4f 	dsb	sy
 8010a3c:	f3bf 8f6f 	isb	sy
 8010a40:	e75d      	b.n	80108fe <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010a42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010a44:	f000 f972 	bl	8010d2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010a48:	f000 fbde 	bl	8011208 <xTaskResumeAll>
 8010a4c:	e757      	b.n	80108fe <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010a4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010a50:	f000 f96c 	bl	8010d2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010a54:	f000 fbd8 	bl	8011208 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010a58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010a5a:	f000 f9b9 	bl	8010dd0 <prvIsQueueEmpty>
 8010a5e:	4603      	mov	r3, r0
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	f43f af4c 	beq.w	80108fe <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d00d      	beq.n	8010a88 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8010a6c:	f001 faec 	bl	8012048 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010a70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010a72:	f000 f8b3 	bl	8010bdc <prvGetDisinheritPriorityAfterTimeout>
 8010a76:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8010a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a7a:	685b      	ldr	r3, [r3, #4]
 8010a7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f001 f8ba 	bl	8011bf8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010a84:	f001 fb12 	bl	80120ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010a88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	3738      	adds	r7, #56	; 0x38
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd80      	pop	{r7, pc}
 8010a92:	bf00      	nop
 8010a94:	e000ed04 	.word	0xe000ed04

08010a98 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b08e      	sub	sp, #56	; 0x38
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	60f8      	str	r0, [r7, #12]
 8010aa0:	60b9      	str	r1, [r7, #8]
 8010aa2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d10b      	bne.n	8010ac6 <xQueueReceiveFromISR+0x2e>
 8010aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ab2:	b672      	cpsid	i
 8010ab4:	f383 8811 	msr	BASEPRI, r3
 8010ab8:	f3bf 8f6f 	isb	sy
 8010abc:	f3bf 8f4f 	dsb	sy
 8010ac0:	b662      	cpsie	i
 8010ac2:	623b      	str	r3, [r7, #32]
 8010ac4:	e7fe      	b.n	8010ac4 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010ac6:	68bb      	ldr	r3, [r7, #8]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d103      	bne.n	8010ad4 <xQueueReceiveFromISR+0x3c>
 8010acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d101      	bne.n	8010ad8 <xQueueReceiveFromISR+0x40>
 8010ad4:	2301      	movs	r3, #1
 8010ad6:	e000      	b.n	8010ada <xQueueReceiveFromISR+0x42>
 8010ad8:	2300      	movs	r3, #0
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d10b      	bne.n	8010af6 <xQueueReceiveFromISR+0x5e>
 8010ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ae2:	b672      	cpsid	i
 8010ae4:	f383 8811 	msr	BASEPRI, r3
 8010ae8:	f3bf 8f6f 	isb	sy
 8010aec:	f3bf 8f4f 	dsb	sy
 8010af0:	b662      	cpsie	i
 8010af2:	61fb      	str	r3, [r7, #28]
 8010af4:	e7fe      	b.n	8010af4 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010af6:	f001 fb87 	bl	8012208 <vPortValidateInterruptPriority>
	__asm volatile
 8010afa:	f3ef 8211 	mrs	r2, BASEPRI
 8010afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b02:	b672      	cpsid	i
 8010b04:	f383 8811 	msr	BASEPRI, r3
 8010b08:	f3bf 8f6f 	isb	sy
 8010b0c:	f3bf 8f4f 	dsb	sy
 8010b10:	b662      	cpsie	i
 8010b12:	61ba      	str	r2, [r7, #24]
 8010b14:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010b16:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010b18:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b1e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d02f      	beq.n	8010b86 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010b2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010b30:	68b9      	ldr	r1, [r7, #8]
 8010b32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b34:	f000 f8d4 	bl	8010ce0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b3a:	1e5a      	subs	r2, r3, #1
 8010b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b3e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010b40:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b48:	d112      	bne.n	8010b70 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b4c:	691b      	ldr	r3, [r3, #16]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d016      	beq.n	8010b80 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b54:	3310      	adds	r3, #16
 8010b56:	4618      	mov	r0, r3
 8010b58:	f000 fd7c 	bl	8011654 <xTaskRemoveFromEventList>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d00e      	beq.n	8010b80 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d00b      	beq.n	8010b80 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	2201      	movs	r2, #1
 8010b6c:	601a      	str	r2, [r3, #0]
 8010b6e:	e007      	b.n	8010b80 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010b70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010b74:	3301      	adds	r3, #1
 8010b76:	b2db      	uxtb	r3, r3
 8010b78:	b25a      	sxtb	r2, r3
 8010b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010b80:	2301      	movs	r3, #1
 8010b82:	637b      	str	r3, [r7, #52]	; 0x34
 8010b84:	e001      	b.n	8010b8a <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8010b86:	2300      	movs	r3, #0
 8010b88:	637b      	str	r3, [r7, #52]	; 0x34
 8010b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b8c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010b8e:	693b      	ldr	r3, [r7, #16]
 8010b90:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010b96:	4618      	mov	r0, r3
 8010b98:	3738      	adds	r7, #56	; 0x38
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	bd80      	pop	{r7, pc}

08010b9e <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010b9e:	b580      	push	{r7, lr}
 8010ba0:	b084      	sub	sp, #16
 8010ba2:	af00      	add	r7, sp, #0
 8010ba4:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d10b      	bne.n	8010bc8 <vQueueDelete+0x2a>
	__asm volatile
 8010bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bb4:	b672      	cpsid	i
 8010bb6:	f383 8811 	msr	BASEPRI, r3
 8010bba:	f3bf 8f6f 	isb	sy
 8010bbe:	f3bf 8f4f 	dsb	sy
 8010bc2:	b662      	cpsie	i
 8010bc4:	60bb      	str	r3, [r7, #8]
 8010bc6:	e7fe      	b.n	8010bc6 <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010bc8:	68f8      	ldr	r0, [r7, #12]
 8010bca:	f000 f92f 	bl	8010e2c <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 8010bce:	68f8      	ldr	r0, [r7, #12]
 8010bd0:	f001 fc28 	bl	8012424 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010bd4:	bf00      	nop
 8010bd6:	3710      	adds	r7, #16
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	bd80      	pop	{r7, pc}

08010bdc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010bdc:	b480      	push	{r7}
 8010bde:	b085      	sub	sp, #20
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d006      	beq.n	8010bfa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	f1c3 0307 	rsb	r3, r3, #7
 8010bf6:	60fb      	str	r3, [r7, #12]
 8010bf8:	e001      	b.n	8010bfe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010bfe:	68fb      	ldr	r3, [r7, #12]
	}
 8010c00:	4618      	mov	r0, r3
 8010c02:	3714      	adds	r7, #20
 8010c04:	46bd      	mov	sp, r7
 8010c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c0a:	4770      	bx	lr

08010c0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b086      	sub	sp, #24
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	60f8      	str	r0, [r7, #12]
 8010c14:	60b9      	str	r1, [r7, #8]
 8010c16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010c18:	2300      	movs	r3, #0
 8010c1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d10d      	bne.n	8010c46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d14d      	bne.n	8010cce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	685b      	ldr	r3, [r3, #4]
 8010c36:	4618      	mov	r0, r3
 8010c38:	f000 ff56 	bl	8011ae8 <xTaskPriorityDisinherit>
 8010c3c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	2200      	movs	r2, #0
 8010c42:	605a      	str	r2, [r3, #4]
 8010c44:	e043      	b.n	8010cce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d119      	bne.n	8010c80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	6898      	ldr	r0, [r3, #8]
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c54:	461a      	mov	r2, r3
 8010c56:	68b9      	ldr	r1, [r7, #8]
 8010c58:	f004 ffca 	bl	8015bf0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	689a      	ldr	r2, [r3, #8]
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c64:	441a      	add	r2, r3
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	689a      	ldr	r2, [r3, #8]
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	685b      	ldr	r3, [r3, #4]
 8010c72:	429a      	cmp	r2, r3
 8010c74:	d32b      	bcc.n	8010cce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	681a      	ldr	r2, [r3, #0]
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	609a      	str	r2, [r3, #8]
 8010c7e:	e026      	b.n	8010cce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	68d8      	ldr	r0, [r3, #12]
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c88:	461a      	mov	r2, r3
 8010c8a:	68b9      	ldr	r1, [r7, #8]
 8010c8c:	f004 ffb0 	bl	8015bf0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	68da      	ldr	r2, [r3, #12]
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c98:	425b      	negs	r3, r3
 8010c9a:	441a      	add	r2, r3
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	68da      	ldr	r2, [r3, #12]
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	429a      	cmp	r2, r3
 8010caa:	d207      	bcs.n	8010cbc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	685a      	ldr	r2, [r3, #4]
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cb4:	425b      	negs	r3, r3
 8010cb6:	441a      	add	r2, r3
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	2b02      	cmp	r3, #2
 8010cc0:	d105      	bne.n	8010cce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010cc2:	693b      	ldr	r3, [r7, #16]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d002      	beq.n	8010cce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010cc8:	693b      	ldr	r3, [r7, #16]
 8010cca:	3b01      	subs	r3, #1
 8010ccc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010cce:	693b      	ldr	r3, [r7, #16]
 8010cd0:	1c5a      	adds	r2, r3, #1
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010cd6:	697b      	ldr	r3, [r7, #20]
}
 8010cd8:	4618      	mov	r0, r3
 8010cda:	3718      	adds	r7, #24
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	bd80      	pop	{r7, pc}

08010ce0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b082      	sub	sp, #8
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
 8010ce8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d018      	beq.n	8010d24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	68da      	ldr	r2, [r3, #12]
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cfa:	441a      	add	r2, r3
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	68da      	ldr	r2, [r3, #12]
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	685b      	ldr	r3, [r3, #4]
 8010d08:	429a      	cmp	r2, r3
 8010d0a:	d303      	bcc.n	8010d14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	681a      	ldr	r2, [r3, #0]
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	68d9      	ldr	r1, [r3, #12]
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d1c:	461a      	mov	r2, r3
 8010d1e:	6838      	ldr	r0, [r7, #0]
 8010d20:	f004 ff66 	bl	8015bf0 <memcpy>
	}
}
 8010d24:	bf00      	nop
 8010d26:	3708      	adds	r7, #8
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	bd80      	pop	{r7, pc}

08010d2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	b084      	sub	sp, #16
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010d34:	f001 f988 	bl	8012048 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010d3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010d40:	e011      	b.n	8010d66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d012      	beq.n	8010d70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	3324      	adds	r3, #36	; 0x24
 8010d4e:	4618      	mov	r0, r3
 8010d50:	f000 fc80 	bl	8011654 <xTaskRemoveFromEventList>
 8010d54:	4603      	mov	r3, r0
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d001      	beq.n	8010d5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010d5a:	f000 fd59 	bl	8011810 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010d5e:	7bfb      	ldrb	r3, [r7, #15]
 8010d60:	3b01      	subs	r3, #1
 8010d62:	b2db      	uxtb	r3, r3
 8010d64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	dce9      	bgt.n	8010d42 <prvUnlockQueue+0x16>
 8010d6e:	e000      	b.n	8010d72 <prvUnlockQueue+0x46>
					break;
 8010d70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	22ff      	movs	r2, #255	; 0xff
 8010d76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010d7a:	f001 f997 	bl	80120ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010d7e:	f001 f963 	bl	8012048 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010d88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010d8a:	e011      	b.n	8010db0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	691b      	ldr	r3, [r3, #16]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d012      	beq.n	8010dba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	3310      	adds	r3, #16
 8010d98:	4618      	mov	r0, r3
 8010d9a:	f000 fc5b 	bl	8011654 <xTaskRemoveFromEventList>
 8010d9e:	4603      	mov	r3, r0
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d001      	beq.n	8010da8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010da4:	f000 fd34 	bl	8011810 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010da8:	7bbb      	ldrb	r3, [r7, #14]
 8010daa:	3b01      	subs	r3, #1
 8010dac:	b2db      	uxtb	r3, r3
 8010dae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010db0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	dce9      	bgt.n	8010d8c <prvUnlockQueue+0x60>
 8010db8:	e000      	b.n	8010dbc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010dba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	22ff      	movs	r2, #255	; 0xff
 8010dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010dc4:	f001 f972 	bl	80120ac <vPortExitCritical>
}
 8010dc8:	bf00      	nop
 8010dca:	3710      	adds	r7, #16
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd80      	pop	{r7, pc}

08010dd0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b084      	sub	sp, #16
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010dd8:	f001 f936 	bl	8012048 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d102      	bne.n	8010dea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010de4:	2301      	movs	r3, #1
 8010de6:	60fb      	str	r3, [r7, #12]
 8010de8:	e001      	b.n	8010dee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010dea:	2300      	movs	r3, #0
 8010dec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010dee:	f001 f95d 	bl	80120ac <vPortExitCritical>

	return xReturn;
 8010df2:	68fb      	ldr	r3, [r7, #12]
}
 8010df4:	4618      	mov	r0, r3
 8010df6:	3710      	adds	r7, #16
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	bd80      	pop	{r7, pc}

08010dfc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b084      	sub	sp, #16
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010e04:	f001 f920 	bl	8012048 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e10:	429a      	cmp	r2, r3
 8010e12:	d102      	bne.n	8010e1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010e14:	2301      	movs	r3, #1
 8010e16:	60fb      	str	r3, [r7, #12]
 8010e18:	e001      	b.n	8010e1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010e1e:	f001 f945 	bl	80120ac <vPortExitCritical>

	return xReturn;
 8010e22:	68fb      	ldr	r3, [r7, #12]
}
 8010e24:	4618      	mov	r0, r3
 8010e26:	3710      	adds	r7, #16
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	bd80      	pop	{r7, pc}

08010e2c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010e2c:	b480      	push	{r7}
 8010e2e:	b085      	sub	sp, #20
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010e34:	2300      	movs	r3, #0
 8010e36:	60fb      	str	r3, [r7, #12]
 8010e38:	e016      	b.n	8010e68 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010e3a:	4a10      	ldr	r2, [pc, #64]	; (8010e7c <vQueueUnregisterQueue+0x50>)
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	00db      	lsls	r3, r3, #3
 8010e40:	4413      	add	r3, r2
 8010e42:	685b      	ldr	r3, [r3, #4]
 8010e44:	687a      	ldr	r2, [r7, #4]
 8010e46:	429a      	cmp	r2, r3
 8010e48:	d10b      	bne.n	8010e62 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010e4a:	4a0c      	ldr	r2, [pc, #48]	; (8010e7c <vQueueUnregisterQueue+0x50>)
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	2100      	movs	r1, #0
 8010e50:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010e54:	4a09      	ldr	r2, [pc, #36]	; (8010e7c <vQueueUnregisterQueue+0x50>)
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	00db      	lsls	r3, r3, #3
 8010e5a:	4413      	add	r3, r2
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	605a      	str	r2, [r3, #4]
				break;
 8010e60:	e005      	b.n	8010e6e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	3301      	adds	r3, #1
 8010e66:	60fb      	str	r3, [r7, #12]
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	2b07      	cmp	r3, #7
 8010e6c:	d9e5      	bls.n	8010e3a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010e6e:	bf00      	nop
 8010e70:	3714      	adds	r7, #20
 8010e72:	46bd      	mov	sp, r7
 8010e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e78:	4770      	bx	lr
 8010e7a:	bf00      	nop
 8010e7c:	20008454 	.word	0x20008454

08010e80 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b08c      	sub	sp, #48	; 0x30
 8010e84:	af04      	add	r7, sp, #16
 8010e86:	60f8      	str	r0, [r7, #12]
 8010e88:	60b9      	str	r1, [r7, #8]
 8010e8a:	603b      	str	r3, [r7, #0]
 8010e8c:	4613      	mov	r3, r2
 8010e8e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e90:	88fb      	ldrh	r3, [r7, #6]
 8010e92:	009b      	lsls	r3, r3, #2
 8010e94:	4618      	mov	r0, r3
 8010e96:	f001 f9f9 	bl	801228c <pvPortMalloc>
 8010e9a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010e9c:	697b      	ldr	r3, [r7, #20]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d00e      	beq.n	8010ec0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8010ea2:	2058      	movs	r0, #88	; 0x58
 8010ea4:	f001 f9f2 	bl	801228c <pvPortMalloc>
 8010ea8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010eaa:	69fb      	ldr	r3, [r7, #28]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d003      	beq.n	8010eb8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010eb0:	69fb      	ldr	r3, [r7, #28]
 8010eb2:	697a      	ldr	r2, [r7, #20]
 8010eb4:	631a      	str	r2, [r3, #48]	; 0x30
 8010eb6:	e005      	b.n	8010ec4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010eb8:	6978      	ldr	r0, [r7, #20]
 8010eba:	f001 fab3 	bl	8012424 <vPortFree>
 8010ebe:	e001      	b.n	8010ec4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010ec0:	2300      	movs	r3, #0
 8010ec2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010ec4:	69fb      	ldr	r3, [r7, #28]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d013      	beq.n	8010ef2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010eca:	88fa      	ldrh	r2, [r7, #6]
 8010ecc:	2300      	movs	r3, #0
 8010ece:	9303      	str	r3, [sp, #12]
 8010ed0:	69fb      	ldr	r3, [r7, #28]
 8010ed2:	9302      	str	r3, [sp, #8]
 8010ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ed6:	9301      	str	r3, [sp, #4]
 8010ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eda:	9300      	str	r3, [sp, #0]
 8010edc:	683b      	ldr	r3, [r7, #0]
 8010ede:	68b9      	ldr	r1, [r7, #8]
 8010ee0:	68f8      	ldr	r0, [r7, #12]
 8010ee2:	f000 f80e 	bl	8010f02 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010ee6:	69f8      	ldr	r0, [r7, #28]
 8010ee8:	f000 f896 	bl	8011018 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010eec:	2301      	movs	r3, #1
 8010eee:	61bb      	str	r3, [r7, #24]
 8010ef0:	e002      	b.n	8010ef8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8010ef6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010ef8:	69bb      	ldr	r3, [r7, #24]
	}
 8010efa:	4618      	mov	r0, r3
 8010efc:	3720      	adds	r7, #32
 8010efe:	46bd      	mov	sp, r7
 8010f00:	bd80      	pop	{r7, pc}

08010f02 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010f02:	b580      	push	{r7, lr}
 8010f04:	b088      	sub	sp, #32
 8010f06:	af00      	add	r7, sp, #0
 8010f08:	60f8      	str	r0, [r7, #12]
 8010f0a:	60b9      	str	r1, [r7, #8]
 8010f0c:	607a      	str	r2, [r7, #4]
 8010f0e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f12:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	009b      	lsls	r3, r3, #2
 8010f18:	461a      	mov	r2, r3
 8010f1a:	21a5      	movs	r1, #165	; 0xa5
 8010f1c:	f004 fe73 	bl	8015c06 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8010f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010f24:	6879      	ldr	r1, [r7, #4]
 8010f26:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8010f2a:	440b      	add	r3, r1
 8010f2c:	009b      	lsls	r3, r3, #2
 8010f2e:	4413      	add	r3, r2
 8010f30:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8010f32:	69bb      	ldr	r3, [r7, #24]
 8010f34:	f023 0307 	bic.w	r3, r3, #7
 8010f38:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010f3a:	69bb      	ldr	r3, [r7, #24]
 8010f3c:	f003 0307 	and.w	r3, r3, #7
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d00b      	beq.n	8010f5c <prvInitialiseNewTask+0x5a>
 8010f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f48:	b672      	cpsid	i
 8010f4a:	f383 8811 	msr	BASEPRI, r3
 8010f4e:	f3bf 8f6f 	isb	sy
 8010f52:	f3bf 8f4f 	dsb	sy
 8010f56:	b662      	cpsie	i
 8010f58:	617b      	str	r3, [r7, #20]
 8010f5a:	e7fe      	b.n	8010f5a <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	61fb      	str	r3, [r7, #28]
 8010f60:	e012      	b.n	8010f88 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010f62:	68ba      	ldr	r2, [r7, #8]
 8010f64:	69fb      	ldr	r3, [r7, #28]
 8010f66:	4413      	add	r3, r2
 8010f68:	7819      	ldrb	r1, [r3, #0]
 8010f6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f6c:	69fb      	ldr	r3, [r7, #28]
 8010f6e:	4413      	add	r3, r2
 8010f70:	3334      	adds	r3, #52	; 0x34
 8010f72:	460a      	mov	r2, r1
 8010f74:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8010f76:	68ba      	ldr	r2, [r7, #8]
 8010f78:	69fb      	ldr	r3, [r7, #28]
 8010f7a:	4413      	add	r3, r2
 8010f7c:	781b      	ldrb	r3, [r3, #0]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d006      	beq.n	8010f90 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010f82:	69fb      	ldr	r3, [r7, #28]
 8010f84:	3301      	adds	r3, #1
 8010f86:	61fb      	str	r3, [r7, #28]
 8010f88:	69fb      	ldr	r3, [r7, #28]
 8010f8a:	2b0f      	cmp	r3, #15
 8010f8c:	d9e9      	bls.n	8010f62 <prvInitialiseNewTask+0x60>
 8010f8e:	e000      	b.n	8010f92 <prvInitialiseNewTask+0x90>
		{
			break;
 8010f90:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f94:	2200      	movs	r2, #0
 8010f96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f9c:	2b06      	cmp	r3, #6
 8010f9e:	d901      	bls.n	8010fa4 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010fa0:	2306      	movs	r3, #6
 8010fa2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010fa8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010fae:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8010fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fb8:	3304      	adds	r3, #4
 8010fba:	4618      	mov	r0, r3
 8010fbc:	f7fe ffbc 	bl	800ff38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fc2:	3318      	adds	r3, #24
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	f7fe ffb7 	bl	800ff38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010fce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fd2:	f1c3 0207 	rsb	r2, r3, #7
 8010fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fd8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010fde:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8010fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fe2:	2200      	movs	r2, #0
 8010fe4:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fe8:	2200      	movs	r2, #0
 8010fea:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fee:	2200      	movs	r2, #0
 8010ff0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010ff4:	683a      	ldr	r2, [r7, #0]
 8010ff6:	68f9      	ldr	r1, [r7, #12]
 8010ff8:	69b8      	ldr	r0, [r7, #24]
 8010ffa:	f000 ff19 	bl	8011e30 <pxPortInitialiseStack>
 8010ffe:	4602      	mov	r2, r0
 8011000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011002:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8011004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011006:	2b00      	cmp	r3, #0
 8011008:	d002      	beq.n	8011010 <prvInitialiseNewTask+0x10e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801100a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801100c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801100e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011010:	bf00      	nop
 8011012:	3720      	adds	r7, #32
 8011014:	46bd      	mov	sp, r7
 8011016:	bd80      	pop	{r7, pc}

08011018 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b082      	sub	sp, #8
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011020:	f001 f812 	bl	8012048 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011024:	4b2a      	ldr	r3, [pc, #168]	; (80110d0 <prvAddNewTaskToReadyList+0xb8>)
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	3301      	adds	r3, #1
 801102a:	4a29      	ldr	r2, [pc, #164]	; (80110d0 <prvAddNewTaskToReadyList+0xb8>)
 801102c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801102e:	4b29      	ldr	r3, [pc, #164]	; (80110d4 <prvAddNewTaskToReadyList+0xbc>)
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	2b00      	cmp	r3, #0
 8011034:	d109      	bne.n	801104a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011036:	4a27      	ldr	r2, [pc, #156]	; (80110d4 <prvAddNewTaskToReadyList+0xbc>)
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801103c:	4b24      	ldr	r3, [pc, #144]	; (80110d0 <prvAddNewTaskToReadyList+0xb8>)
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	2b01      	cmp	r3, #1
 8011042:	d110      	bne.n	8011066 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011044:	f000 fc0a 	bl	801185c <prvInitialiseTaskLists>
 8011048:	e00d      	b.n	8011066 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801104a:	4b23      	ldr	r3, [pc, #140]	; (80110d8 <prvAddNewTaskToReadyList+0xc0>)
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	2b00      	cmp	r3, #0
 8011050:	d109      	bne.n	8011066 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011052:	4b20      	ldr	r3, [pc, #128]	; (80110d4 <prvAddNewTaskToReadyList+0xbc>)
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801105c:	429a      	cmp	r2, r3
 801105e:	d802      	bhi.n	8011066 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011060:	4a1c      	ldr	r2, [pc, #112]	; (80110d4 <prvAddNewTaskToReadyList+0xbc>)
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011066:	4b1d      	ldr	r3, [pc, #116]	; (80110dc <prvAddNewTaskToReadyList+0xc4>)
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	3301      	adds	r3, #1
 801106c:	4a1b      	ldr	r2, [pc, #108]	; (80110dc <prvAddNewTaskToReadyList+0xc4>)
 801106e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011074:	2201      	movs	r2, #1
 8011076:	409a      	lsls	r2, r3
 8011078:	4b19      	ldr	r3, [pc, #100]	; (80110e0 <prvAddNewTaskToReadyList+0xc8>)
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	4313      	orrs	r3, r2
 801107e:	4a18      	ldr	r2, [pc, #96]	; (80110e0 <prvAddNewTaskToReadyList+0xc8>)
 8011080:	6013      	str	r3, [r2, #0]
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011086:	4613      	mov	r3, r2
 8011088:	009b      	lsls	r3, r3, #2
 801108a:	4413      	add	r3, r2
 801108c:	009b      	lsls	r3, r3, #2
 801108e:	4a15      	ldr	r2, [pc, #84]	; (80110e4 <prvAddNewTaskToReadyList+0xcc>)
 8011090:	441a      	add	r2, r3
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	3304      	adds	r3, #4
 8011096:	4619      	mov	r1, r3
 8011098:	4610      	mov	r0, r2
 801109a:	f7fe ff5a 	bl	800ff52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801109e:	f001 f805 	bl	80120ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80110a2:	4b0d      	ldr	r3, [pc, #52]	; (80110d8 <prvAddNewTaskToReadyList+0xc0>)
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d00e      	beq.n	80110c8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80110aa:	4b0a      	ldr	r3, [pc, #40]	; (80110d4 <prvAddNewTaskToReadyList+0xbc>)
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110b4:	429a      	cmp	r2, r3
 80110b6:	d207      	bcs.n	80110c8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80110b8:	4b0b      	ldr	r3, [pc, #44]	; (80110e8 <prvAddNewTaskToReadyList+0xd0>)
 80110ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110be:	601a      	str	r2, [r3, #0]
 80110c0:	f3bf 8f4f 	dsb	sy
 80110c4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80110c8:	bf00      	nop
 80110ca:	3708      	adds	r7, #8
 80110cc:	46bd      	mov	sp, r7
 80110ce:	bd80      	pop	{r7, pc}
 80110d0:	200001e8 	.word	0x200001e8
 80110d4:	200000e8 	.word	0x200000e8
 80110d8:	200001f4 	.word	0x200001f4
 80110dc:	20000204 	.word	0x20000204
 80110e0:	200001f0 	.word	0x200001f0
 80110e4:	200000ec 	.word	0x200000ec
 80110e8:	e000ed04 	.word	0xe000ed04

080110ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b084      	sub	sp, #16
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80110f4:	2300      	movs	r3, #0
 80110f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d018      	beq.n	8011130 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80110fe:	4b14      	ldr	r3, [pc, #80]	; (8011150 <vTaskDelay+0x64>)
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d00b      	beq.n	801111e <vTaskDelay+0x32>
 8011106:	f04f 0350 	mov.w	r3, #80	; 0x50
 801110a:	b672      	cpsid	i
 801110c:	f383 8811 	msr	BASEPRI, r3
 8011110:	f3bf 8f6f 	isb	sy
 8011114:	f3bf 8f4f 	dsb	sy
 8011118:	b662      	cpsie	i
 801111a:	60bb      	str	r3, [r7, #8]
 801111c:	e7fe      	b.n	801111c <vTaskDelay+0x30>
			vTaskSuspendAll();
 801111e:	f000 f865 	bl	80111ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011122:	2100      	movs	r1, #0
 8011124:	6878      	ldr	r0, [r7, #4]
 8011126:	f000 fe1d 	bl	8011d64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801112a:	f000 f86d 	bl	8011208 <xTaskResumeAll>
 801112e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d107      	bne.n	8011146 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8011136:	4b07      	ldr	r3, [pc, #28]	; (8011154 <vTaskDelay+0x68>)
 8011138:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801113c:	601a      	str	r2, [r3, #0]
 801113e:	f3bf 8f4f 	dsb	sy
 8011142:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011146:	bf00      	nop
 8011148:	3710      	adds	r7, #16
 801114a:	46bd      	mov	sp, r7
 801114c:	bd80      	pop	{r7, pc}
 801114e:	bf00      	nop
 8011150:	20000210 	.word	0x20000210
 8011154:	e000ed04 	.word	0xe000ed04

08011158 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011158:	b580      	push	{r7, lr}
 801115a:	b086      	sub	sp, #24
 801115c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 801115e:	4b1d      	ldr	r3, [pc, #116]	; (80111d4 <vTaskStartScheduler+0x7c>)
 8011160:	9301      	str	r3, [sp, #4]
 8011162:	2300      	movs	r3, #0
 8011164:	9300      	str	r3, [sp, #0]
 8011166:	2300      	movs	r3, #0
 8011168:	2280      	movs	r2, #128	; 0x80
 801116a:	491b      	ldr	r1, [pc, #108]	; (80111d8 <vTaskStartScheduler+0x80>)
 801116c:	481b      	ldr	r0, [pc, #108]	; (80111dc <vTaskStartScheduler+0x84>)
 801116e:	f7ff fe87 	bl	8010e80 <xTaskCreate>
 8011172:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	2b01      	cmp	r3, #1
 8011178:	d117      	bne.n	80111aa <vTaskStartScheduler+0x52>
 801117a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801117e:	b672      	cpsid	i
 8011180:	f383 8811 	msr	BASEPRI, r3
 8011184:	f3bf 8f6f 	isb	sy
 8011188:	f3bf 8f4f 	dsb	sy
 801118c:	b662      	cpsie	i
 801118e:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011190:	4b13      	ldr	r3, [pc, #76]	; (80111e0 <vTaskStartScheduler+0x88>)
 8011192:	f04f 32ff 	mov.w	r2, #4294967295
 8011196:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011198:	4b12      	ldr	r3, [pc, #72]	; (80111e4 <vTaskStartScheduler+0x8c>)
 801119a:	2201      	movs	r2, #1
 801119c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 801119e:	4b12      	ldr	r3, [pc, #72]	; (80111e8 <vTaskStartScheduler+0x90>)
 80111a0:	2200      	movs	r2, #0
 80111a2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80111a4:	f000 fed4 	bl	8011f50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80111a8:	e00f      	b.n	80111ca <vTaskStartScheduler+0x72>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111b0:	d10b      	bne.n	80111ca <vTaskStartScheduler+0x72>
 80111b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111b6:	b672      	cpsid	i
 80111b8:	f383 8811 	msr	BASEPRI, r3
 80111bc:	f3bf 8f6f 	isb	sy
 80111c0:	f3bf 8f4f 	dsb	sy
 80111c4:	b662      	cpsie	i
 80111c6:	607b      	str	r3, [r7, #4]
 80111c8:	e7fe      	b.n	80111c8 <vTaskStartScheduler+0x70>
}
 80111ca:	bf00      	nop
 80111cc:	3710      	adds	r7, #16
 80111ce:	46bd      	mov	sp, r7
 80111d0:	bd80      	pop	{r7, pc}
 80111d2:	bf00      	nop
 80111d4:	2000020c 	.word	0x2000020c
 80111d8:	08015e14 	.word	0x08015e14
 80111dc:	08011829 	.word	0x08011829
 80111e0:	20000208 	.word	0x20000208
 80111e4:	200001f4 	.word	0x200001f4
 80111e8:	200001ec 	.word	0x200001ec

080111ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80111ec:	b480      	push	{r7}
 80111ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80111f0:	4b04      	ldr	r3, [pc, #16]	; (8011204 <vTaskSuspendAll+0x18>)
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	3301      	adds	r3, #1
 80111f6:	4a03      	ldr	r2, [pc, #12]	; (8011204 <vTaskSuspendAll+0x18>)
 80111f8:	6013      	str	r3, [r2, #0]
}
 80111fa:	bf00      	nop
 80111fc:	46bd      	mov	sp, r7
 80111fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011202:	4770      	bx	lr
 8011204:	20000210 	.word	0x20000210

08011208 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011208:	b580      	push	{r7, lr}
 801120a:	b084      	sub	sp, #16
 801120c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801120e:	2300      	movs	r3, #0
 8011210:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011212:	2300      	movs	r3, #0
 8011214:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011216:	4b42      	ldr	r3, [pc, #264]	; (8011320 <xTaskResumeAll+0x118>)
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d10b      	bne.n	8011236 <xTaskResumeAll+0x2e>
 801121e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011222:	b672      	cpsid	i
 8011224:	f383 8811 	msr	BASEPRI, r3
 8011228:	f3bf 8f6f 	isb	sy
 801122c:	f3bf 8f4f 	dsb	sy
 8011230:	b662      	cpsie	i
 8011232:	603b      	str	r3, [r7, #0]
 8011234:	e7fe      	b.n	8011234 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011236:	f000 ff07 	bl	8012048 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801123a:	4b39      	ldr	r3, [pc, #228]	; (8011320 <xTaskResumeAll+0x118>)
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	3b01      	subs	r3, #1
 8011240:	4a37      	ldr	r2, [pc, #220]	; (8011320 <xTaskResumeAll+0x118>)
 8011242:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011244:	4b36      	ldr	r3, [pc, #216]	; (8011320 <xTaskResumeAll+0x118>)
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d161      	bne.n	8011310 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801124c:	4b35      	ldr	r3, [pc, #212]	; (8011324 <xTaskResumeAll+0x11c>)
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d05d      	beq.n	8011310 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011254:	e02e      	b.n	80112b4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8011256:	4b34      	ldr	r3, [pc, #208]	; (8011328 <xTaskResumeAll+0x120>)
 8011258:	68db      	ldr	r3, [r3, #12]
 801125a:	68db      	ldr	r3, [r3, #12]
 801125c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	3318      	adds	r3, #24
 8011262:	4618      	mov	r0, r3
 8011264:	f7fe fed2 	bl	801000c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	3304      	adds	r3, #4
 801126c:	4618      	mov	r0, r3
 801126e:	f7fe fecd 	bl	801000c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011276:	2201      	movs	r2, #1
 8011278:	409a      	lsls	r2, r3
 801127a:	4b2c      	ldr	r3, [pc, #176]	; (801132c <xTaskResumeAll+0x124>)
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	4313      	orrs	r3, r2
 8011280:	4a2a      	ldr	r2, [pc, #168]	; (801132c <xTaskResumeAll+0x124>)
 8011282:	6013      	str	r3, [r2, #0]
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011288:	4613      	mov	r3, r2
 801128a:	009b      	lsls	r3, r3, #2
 801128c:	4413      	add	r3, r2
 801128e:	009b      	lsls	r3, r3, #2
 8011290:	4a27      	ldr	r2, [pc, #156]	; (8011330 <xTaskResumeAll+0x128>)
 8011292:	441a      	add	r2, r3
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	3304      	adds	r3, #4
 8011298:	4619      	mov	r1, r3
 801129a:	4610      	mov	r0, r2
 801129c:	f7fe fe59 	bl	800ff52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112a4:	4b23      	ldr	r3, [pc, #140]	; (8011334 <xTaskResumeAll+0x12c>)
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112aa:	429a      	cmp	r2, r3
 80112ac:	d302      	bcc.n	80112b4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80112ae:	4b22      	ldr	r3, [pc, #136]	; (8011338 <xTaskResumeAll+0x130>)
 80112b0:	2201      	movs	r2, #1
 80112b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80112b4:	4b1c      	ldr	r3, [pc, #112]	; (8011328 <xTaskResumeAll+0x120>)
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d1cc      	bne.n	8011256 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d001      	beq.n	80112c6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80112c2:	f000 fb47 	bl	8011954 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80112c6:	4b1d      	ldr	r3, [pc, #116]	; (801133c <xTaskResumeAll+0x134>)
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d010      	beq.n	80112f4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80112d2:	f000 f859 	bl	8011388 <xTaskIncrementTick>
 80112d6:	4603      	mov	r3, r0
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d002      	beq.n	80112e2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80112dc:	4b16      	ldr	r3, [pc, #88]	; (8011338 <xTaskResumeAll+0x130>)
 80112de:	2201      	movs	r2, #1
 80112e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	3b01      	subs	r3, #1
 80112e6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d1f1      	bne.n	80112d2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80112ee:	4b13      	ldr	r3, [pc, #76]	; (801133c <xTaskResumeAll+0x134>)
 80112f0:	2200      	movs	r2, #0
 80112f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80112f4:	4b10      	ldr	r3, [pc, #64]	; (8011338 <xTaskResumeAll+0x130>)
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d009      	beq.n	8011310 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80112fc:	2301      	movs	r3, #1
 80112fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011300:	4b0f      	ldr	r3, [pc, #60]	; (8011340 <xTaskResumeAll+0x138>)
 8011302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011306:	601a      	str	r2, [r3, #0]
 8011308:	f3bf 8f4f 	dsb	sy
 801130c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011310:	f000 fecc 	bl	80120ac <vPortExitCritical>

	return xAlreadyYielded;
 8011314:	68bb      	ldr	r3, [r7, #8]
}
 8011316:	4618      	mov	r0, r3
 8011318:	3710      	adds	r7, #16
 801131a:	46bd      	mov	sp, r7
 801131c:	bd80      	pop	{r7, pc}
 801131e:	bf00      	nop
 8011320:	20000210 	.word	0x20000210
 8011324:	200001e8 	.word	0x200001e8
 8011328:	200001a8 	.word	0x200001a8
 801132c:	200001f0 	.word	0x200001f0
 8011330:	200000ec 	.word	0x200000ec
 8011334:	200000e8 	.word	0x200000e8
 8011338:	200001fc 	.word	0x200001fc
 801133c:	200001f8 	.word	0x200001f8
 8011340:	e000ed04 	.word	0xe000ed04

08011344 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011344:	b480      	push	{r7}
 8011346:	b083      	sub	sp, #12
 8011348:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801134a:	4b05      	ldr	r3, [pc, #20]	; (8011360 <xTaskGetTickCount+0x1c>)
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011350:	687b      	ldr	r3, [r7, #4]
}
 8011352:	4618      	mov	r0, r3
 8011354:	370c      	adds	r7, #12
 8011356:	46bd      	mov	sp, r7
 8011358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801135c:	4770      	bx	lr
 801135e:	bf00      	nop
 8011360:	200001ec 	.word	0x200001ec

08011364 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8011364:	b580      	push	{r7, lr}
 8011366:	b082      	sub	sp, #8
 8011368:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801136a:	f000 ff4d 	bl	8012208 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801136e:	2300      	movs	r3, #0
 8011370:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8011372:	4b04      	ldr	r3, [pc, #16]	; (8011384 <xTaskGetTickCountFromISR+0x20>)
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011378:	683b      	ldr	r3, [r7, #0]
}
 801137a:	4618      	mov	r0, r3
 801137c:	3708      	adds	r7, #8
 801137e:	46bd      	mov	sp, r7
 8011380:	bd80      	pop	{r7, pc}
 8011382:	bf00      	nop
 8011384:	200001ec 	.word	0x200001ec

08011388 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011388:	b580      	push	{r7, lr}
 801138a:	b086      	sub	sp, #24
 801138c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801138e:	2300      	movs	r3, #0
 8011390:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011392:	4b51      	ldr	r3, [pc, #324]	; (80114d8 <xTaskIncrementTick+0x150>)
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	2b00      	cmp	r3, #0
 8011398:	f040 808e 	bne.w	80114b8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801139c:	4b4f      	ldr	r3, [pc, #316]	; (80114dc <xTaskIncrementTick+0x154>)
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	3301      	adds	r3, #1
 80113a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80113a4:	4a4d      	ldr	r2, [pc, #308]	; (80114dc <xTaskIncrementTick+0x154>)
 80113a6:	693b      	ldr	r3, [r7, #16]
 80113a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80113aa:	693b      	ldr	r3, [r7, #16]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d121      	bne.n	80113f4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80113b0:	4b4b      	ldr	r3, [pc, #300]	; (80114e0 <xTaskIncrementTick+0x158>)
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d00b      	beq.n	80113d2 <xTaskIncrementTick+0x4a>
 80113ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113be:	b672      	cpsid	i
 80113c0:	f383 8811 	msr	BASEPRI, r3
 80113c4:	f3bf 8f6f 	isb	sy
 80113c8:	f3bf 8f4f 	dsb	sy
 80113cc:	b662      	cpsie	i
 80113ce:	603b      	str	r3, [r7, #0]
 80113d0:	e7fe      	b.n	80113d0 <xTaskIncrementTick+0x48>
 80113d2:	4b43      	ldr	r3, [pc, #268]	; (80114e0 <xTaskIncrementTick+0x158>)
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	60fb      	str	r3, [r7, #12]
 80113d8:	4b42      	ldr	r3, [pc, #264]	; (80114e4 <xTaskIncrementTick+0x15c>)
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	4a40      	ldr	r2, [pc, #256]	; (80114e0 <xTaskIncrementTick+0x158>)
 80113de:	6013      	str	r3, [r2, #0]
 80113e0:	4a40      	ldr	r2, [pc, #256]	; (80114e4 <xTaskIncrementTick+0x15c>)
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	6013      	str	r3, [r2, #0]
 80113e6:	4b40      	ldr	r3, [pc, #256]	; (80114e8 <xTaskIncrementTick+0x160>)
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	3301      	adds	r3, #1
 80113ec:	4a3e      	ldr	r2, [pc, #248]	; (80114e8 <xTaskIncrementTick+0x160>)
 80113ee:	6013      	str	r3, [r2, #0]
 80113f0:	f000 fab0 	bl	8011954 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80113f4:	4b3d      	ldr	r3, [pc, #244]	; (80114ec <xTaskIncrementTick+0x164>)
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	693a      	ldr	r2, [r7, #16]
 80113fa:	429a      	cmp	r2, r3
 80113fc:	d34d      	bcc.n	801149a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80113fe:	4b38      	ldr	r3, [pc, #224]	; (80114e0 <xTaskIncrementTick+0x158>)
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d101      	bne.n	801140c <xTaskIncrementTick+0x84>
 8011408:	2301      	movs	r3, #1
 801140a:	e000      	b.n	801140e <xTaskIncrementTick+0x86>
 801140c:	2300      	movs	r3, #0
 801140e:	2b00      	cmp	r3, #0
 8011410:	d004      	beq.n	801141c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011412:	4b36      	ldr	r3, [pc, #216]	; (80114ec <xTaskIncrementTick+0x164>)
 8011414:	f04f 32ff 	mov.w	r2, #4294967295
 8011418:	601a      	str	r2, [r3, #0]
					break;
 801141a:	e03e      	b.n	801149a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 801141c:	4b30      	ldr	r3, [pc, #192]	; (80114e0 <xTaskIncrementTick+0x158>)
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	68db      	ldr	r3, [r3, #12]
 8011422:	68db      	ldr	r3, [r3, #12]
 8011424:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011426:	68bb      	ldr	r3, [r7, #8]
 8011428:	685b      	ldr	r3, [r3, #4]
 801142a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801142c:	693a      	ldr	r2, [r7, #16]
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	429a      	cmp	r2, r3
 8011432:	d203      	bcs.n	801143c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011434:	4a2d      	ldr	r2, [pc, #180]	; (80114ec <xTaskIncrementTick+0x164>)
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	6013      	str	r3, [r2, #0]
						break;
 801143a:	e02e      	b.n	801149a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801143c:	68bb      	ldr	r3, [r7, #8]
 801143e:	3304      	adds	r3, #4
 8011440:	4618      	mov	r0, r3
 8011442:	f7fe fde3 	bl	801000c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011446:	68bb      	ldr	r3, [r7, #8]
 8011448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801144a:	2b00      	cmp	r3, #0
 801144c:	d004      	beq.n	8011458 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801144e:	68bb      	ldr	r3, [r7, #8]
 8011450:	3318      	adds	r3, #24
 8011452:	4618      	mov	r0, r3
 8011454:	f7fe fdda 	bl	801000c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011458:	68bb      	ldr	r3, [r7, #8]
 801145a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801145c:	2201      	movs	r2, #1
 801145e:	409a      	lsls	r2, r3
 8011460:	4b23      	ldr	r3, [pc, #140]	; (80114f0 <xTaskIncrementTick+0x168>)
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	4313      	orrs	r3, r2
 8011466:	4a22      	ldr	r2, [pc, #136]	; (80114f0 <xTaskIncrementTick+0x168>)
 8011468:	6013      	str	r3, [r2, #0]
 801146a:	68bb      	ldr	r3, [r7, #8]
 801146c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801146e:	4613      	mov	r3, r2
 8011470:	009b      	lsls	r3, r3, #2
 8011472:	4413      	add	r3, r2
 8011474:	009b      	lsls	r3, r3, #2
 8011476:	4a1f      	ldr	r2, [pc, #124]	; (80114f4 <xTaskIncrementTick+0x16c>)
 8011478:	441a      	add	r2, r3
 801147a:	68bb      	ldr	r3, [r7, #8]
 801147c:	3304      	adds	r3, #4
 801147e:	4619      	mov	r1, r3
 8011480:	4610      	mov	r0, r2
 8011482:	f7fe fd66 	bl	800ff52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011486:	68bb      	ldr	r3, [r7, #8]
 8011488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801148a:	4b1b      	ldr	r3, [pc, #108]	; (80114f8 <xTaskIncrementTick+0x170>)
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011490:	429a      	cmp	r2, r3
 8011492:	d3b4      	bcc.n	80113fe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8011494:	2301      	movs	r3, #1
 8011496:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011498:	e7b1      	b.n	80113fe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801149a:	4b17      	ldr	r3, [pc, #92]	; (80114f8 <xTaskIncrementTick+0x170>)
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114a0:	4914      	ldr	r1, [pc, #80]	; (80114f4 <xTaskIncrementTick+0x16c>)
 80114a2:	4613      	mov	r3, r2
 80114a4:	009b      	lsls	r3, r3, #2
 80114a6:	4413      	add	r3, r2
 80114a8:	009b      	lsls	r3, r3, #2
 80114aa:	440b      	add	r3, r1
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	2b01      	cmp	r3, #1
 80114b0:	d907      	bls.n	80114c2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80114b2:	2301      	movs	r3, #1
 80114b4:	617b      	str	r3, [r7, #20]
 80114b6:	e004      	b.n	80114c2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80114b8:	4b10      	ldr	r3, [pc, #64]	; (80114fc <xTaskIncrementTick+0x174>)
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	3301      	adds	r3, #1
 80114be:	4a0f      	ldr	r2, [pc, #60]	; (80114fc <xTaskIncrementTick+0x174>)
 80114c0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80114c2:	4b0f      	ldr	r3, [pc, #60]	; (8011500 <xTaskIncrementTick+0x178>)
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d001      	beq.n	80114ce <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80114ca:	2301      	movs	r3, #1
 80114cc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80114ce:	697b      	ldr	r3, [r7, #20]
}
 80114d0:	4618      	mov	r0, r3
 80114d2:	3718      	adds	r7, #24
 80114d4:	46bd      	mov	sp, r7
 80114d6:	bd80      	pop	{r7, pc}
 80114d8:	20000210 	.word	0x20000210
 80114dc:	200001ec 	.word	0x200001ec
 80114e0:	200001a0 	.word	0x200001a0
 80114e4:	200001a4 	.word	0x200001a4
 80114e8:	20000200 	.word	0x20000200
 80114ec:	20000208 	.word	0x20000208
 80114f0:	200001f0 	.word	0x200001f0
 80114f4:	200000ec 	.word	0x200000ec
 80114f8:	200000e8 	.word	0x200000e8
 80114fc:	200001f8 	.word	0x200001f8
 8011500:	200001fc 	.word	0x200001fc

08011504 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011504:	b580      	push	{r7, lr}
 8011506:	b088      	sub	sp, #32
 8011508:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801150a:	4b3a      	ldr	r3, [pc, #232]	; (80115f4 <vTaskSwitchContext+0xf0>)
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d003      	beq.n	801151a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011512:	4b39      	ldr	r3, [pc, #228]	; (80115f8 <vTaskSwitchContext+0xf4>)
 8011514:	2201      	movs	r2, #1
 8011516:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011518:	e067      	b.n	80115ea <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 801151a:	4b37      	ldr	r3, [pc, #220]	; (80115f8 <vTaskSwitchContext+0xf4>)
 801151c:	2200      	movs	r2, #0
 801151e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8011520:	4b36      	ldr	r3, [pc, #216]	; (80115fc <vTaskSwitchContext+0xf8>)
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011526:	61fb      	str	r3, [r7, #28]
 8011528:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 801152c:	61bb      	str	r3, [r7, #24]
 801152e:	69fb      	ldr	r3, [r7, #28]
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	69ba      	ldr	r2, [r7, #24]
 8011534:	429a      	cmp	r2, r3
 8011536:	d111      	bne.n	801155c <vTaskSwitchContext+0x58>
 8011538:	69fb      	ldr	r3, [r7, #28]
 801153a:	3304      	adds	r3, #4
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	69ba      	ldr	r2, [r7, #24]
 8011540:	429a      	cmp	r2, r3
 8011542:	d10b      	bne.n	801155c <vTaskSwitchContext+0x58>
 8011544:	69fb      	ldr	r3, [r7, #28]
 8011546:	3308      	adds	r3, #8
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	69ba      	ldr	r2, [r7, #24]
 801154c:	429a      	cmp	r2, r3
 801154e:	d105      	bne.n	801155c <vTaskSwitchContext+0x58>
 8011550:	69fb      	ldr	r3, [r7, #28]
 8011552:	330c      	adds	r3, #12
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	69ba      	ldr	r2, [r7, #24]
 8011558:	429a      	cmp	r2, r3
 801155a:	d008      	beq.n	801156e <vTaskSwitchContext+0x6a>
 801155c:	4b27      	ldr	r3, [pc, #156]	; (80115fc <vTaskSwitchContext+0xf8>)
 801155e:	681a      	ldr	r2, [r3, #0]
 8011560:	4b26      	ldr	r3, [pc, #152]	; (80115fc <vTaskSwitchContext+0xf8>)
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	3334      	adds	r3, #52	; 0x34
 8011566:	4619      	mov	r1, r3
 8011568:	4610      	mov	r0, r2
 801156a:	f001 f95a 	bl	8012822 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 801156e:	4b24      	ldr	r3, [pc, #144]	; (8011600 <vTaskSwitchContext+0xfc>)
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	fab3 f383 	clz	r3, r3
 801157a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801157c:	7afb      	ldrb	r3, [r7, #11]
 801157e:	f1c3 031f 	rsb	r3, r3, #31
 8011582:	617b      	str	r3, [r7, #20]
 8011584:	491f      	ldr	r1, [pc, #124]	; (8011604 <vTaskSwitchContext+0x100>)
 8011586:	697a      	ldr	r2, [r7, #20]
 8011588:	4613      	mov	r3, r2
 801158a:	009b      	lsls	r3, r3, #2
 801158c:	4413      	add	r3, r2
 801158e:	009b      	lsls	r3, r3, #2
 8011590:	440b      	add	r3, r1
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d10b      	bne.n	80115b0 <vTaskSwitchContext+0xac>
	__asm volatile
 8011598:	f04f 0350 	mov.w	r3, #80	; 0x50
 801159c:	b672      	cpsid	i
 801159e:	f383 8811 	msr	BASEPRI, r3
 80115a2:	f3bf 8f6f 	isb	sy
 80115a6:	f3bf 8f4f 	dsb	sy
 80115aa:	b662      	cpsie	i
 80115ac:	607b      	str	r3, [r7, #4]
 80115ae:	e7fe      	b.n	80115ae <vTaskSwitchContext+0xaa>
 80115b0:	697a      	ldr	r2, [r7, #20]
 80115b2:	4613      	mov	r3, r2
 80115b4:	009b      	lsls	r3, r3, #2
 80115b6:	4413      	add	r3, r2
 80115b8:	009b      	lsls	r3, r3, #2
 80115ba:	4a12      	ldr	r2, [pc, #72]	; (8011604 <vTaskSwitchContext+0x100>)
 80115bc:	4413      	add	r3, r2
 80115be:	613b      	str	r3, [r7, #16]
 80115c0:	693b      	ldr	r3, [r7, #16]
 80115c2:	685b      	ldr	r3, [r3, #4]
 80115c4:	685a      	ldr	r2, [r3, #4]
 80115c6:	693b      	ldr	r3, [r7, #16]
 80115c8:	605a      	str	r2, [r3, #4]
 80115ca:	693b      	ldr	r3, [r7, #16]
 80115cc:	685a      	ldr	r2, [r3, #4]
 80115ce:	693b      	ldr	r3, [r7, #16]
 80115d0:	3308      	adds	r3, #8
 80115d2:	429a      	cmp	r2, r3
 80115d4:	d104      	bne.n	80115e0 <vTaskSwitchContext+0xdc>
 80115d6:	693b      	ldr	r3, [r7, #16]
 80115d8:	685b      	ldr	r3, [r3, #4]
 80115da:	685a      	ldr	r2, [r3, #4]
 80115dc:	693b      	ldr	r3, [r7, #16]
 80115de:	605a      	str	r2, [r3, #4]
 80115e0:	693b      	ldr	r3, [r7, #16]
 80115e2:	685b      	ldr	r3, [r3, #4]
 80115e4:	68db      	ldr	r3, [r3, #12]
 80115e6:	4a05      	ldr	r2, [pc, #20]	; (80115fc <vTaskSwitchContext+0xf8>)
 80115e8:	6013      	str	r3, [r2, #0]
}
 80115ea:	bf00      	nop
 80115ec:	3720      	adds	r7, #32
 80115ee:	46bd      	mov	sp, r7
 80115f0:	bd80      	pop	{r7, pc}
 80115f2:	bf00      	nop
 80115f4:	20000210 	.word	0x20000210
 80115f8:	200001fc 	.word	0x200001fc
 80115fc:	200000e8 	.word	0x200000e8
 8011600:	200001f0 	.word	0x200001f0
 8011604:	200000ec 	.word	0x200000ec

08011608 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011608:	b580      	push	{r7, lr}
 801160a:	b084      	sub	sp, #16
 801160c:	af00      	add	r7, sp, #0
 801160e:	6078      	str	r0, [r7, #4]
 8011610:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	2b00      	cmp	r3, #0
 8011616:	d10b      	bne.n	8011630 <vTaskPlaceOnEventList+0x28>
 8011618:	f04f 0350 	mov.w	r3, #80	; 0x50
 801161c:	b672      	cpsid	i
 801161e:	f383 8811 	msr	BASEPRI, r3
 8011622:	f3bf 8f6f 	isb	sy
 8011626:	f3bf 8f4f 	dsb	sy
 801162a:	b662      	cpsie	i
 801162c:	60fb      	str	r3, [r7, #12]
 801162e:	e7fe      	b.n	801162e <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011630:	4b07      	ldr	r3, [pc, #28]	; (8011650 <vTaskPlaceOnEventList+0x48>)
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	3318      	adds	r3, #24
 8011636:	4619      	mov	r1, r3
 8011638:	6878      	ldr	r0, [r7, #4]
 801163a:	f7fe fcae 	bl	800ff9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801163e:	2101      	movs	r1, #1
 8011640:	6838      	ldr	r0, [r7, #0]
 8011642:	f000 fb8f 	bl	8011d64 <prvAddCurrentTaskToDelayedList>
}
 8011646:	bf00      	nop
 8011648:	3710      	adds	r7, #16
 801164a:	46bd      	mov	sp, r7
 801164c:	bd80      	pop	{r7, pc}
 801164e:	bf00      	nop
 8011650:	200000e8 	.word	0x200000e8

08011654 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011654:	b580      	push	{r7, lr}
 8011656:	b086      	sub	sp, #24
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	68db      	ldr	r3, [r3, #12]
 8011660:	68db      	ldr	r3, [r3, #12]
 8011662:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011664:	693b      	ldr	r3, [r7, #16]
 8011666:	2b00      	cmp	r3, #0
 8011668:	d10b      	bne.n	8011682 <xTaskRemoveFromEventList+0x2e>
 801166a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801166e:	b672      	cpsid	i
 8011670:	f383 8811 	msr	BASEPRI, r3
 8011674:	f3bf 8f6f 	isb	sy
 8011678:	f3bf 8f4f 	dsb	sy
 801167c:	b662      	cpsie	i
 801167e:	60fb      	str	r3, [r7, #12]
 8011680:	e7fe      	b.n	8011680 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011682:	693b      	ldr	r3, [r7, #16]
 8011684:	3318      	adds	r3, #24
 8011686:	4618      	mov	r0, r3
 8011688:	f7fe fcc0 	bl	801000c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801168c:	4b1d      	ldr	r3, [pc, #116]	; (8011704 <xTaskRemoveFromEventList+0xb0>)
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d11c      	bne.n	80116ce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011694:	693b      	ldr	r3, [r7, #16]
 8011696:	3304      	adds	r3, #4
 8011698:	4618      	mov	r0, r3
 801169a:	f7fe fcb7 	bl	801000c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801169e:	693b      	ldr	r3, [r7, #16]
 80116a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116a2:	2201      	movs	r2, #1
 80116a4:	409a      	lsls	r2, r3
 80116a6:	4b18      	ldr	r3, [pc, #96]	; (8011708 <xTaskRemoveFromEventList+0xb4>)
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	4313      	orrs	r3, r2
 80116ac:	4a16      	ldr	r2, [pc, #88]	; (8011708 <xTaskRemoveFromEventList+0xb4>)
 80116ae:	6013      	str	r3, [r2, #0]
 80116b0:	693b      	ldr	r3, [r7, #16]
 80116b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116b4:	4613      	mov	r3, r2
 80116b6:	009b      	lsls	r3, r3, #2
 80116b8:	4413      	add	r3, r2
 80116ba:	009b      	lsls	r3, r3, #2
 80116bc:	4a13      	ldr	r2, [pc, #76]	; (801170c <xTaskRemoveFromEventList+0xb8>)
 80116be:	441a      	add	r2, r3
 80116c0:	693b      	ldr	r3, [r7, #16]
 80116c2:	3304      	adds	r3, #4
 80116c4:	4619      	mov	r1, r3
 80116c6:	4610      	mov	r0, r2
 80116c8:	f7fe fc43 	bl	800ff52 <vListInsertEnd>
 80116cc:	e005      	b.n	80116da <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80116ce:	693b      	ldr	r3, [r7, #16]
 80116d0:	3318      	adds	r3, #24
 80116d2:	4619      	mov	r1, r3
 80116d4:	480e      	ldr	r0, [pc, #56]	; (8011710 <xTaskRemoveFromEventList+0xbc>)
 80116d6:	f7fe fc3c 	bl	800ff52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80116da:	693b      	ldr	r3, [r7, #16]
 80116dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116de:	4b0d      	ldr	r3, [pc, #52]	; (8011714 <xTaskRemoveFromEventList+0xc0>)
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116e4:	429a      	cmp	r2, r3
 80116e6:	d905      	bls.n	80116f4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80116e8:	2301      	movs	r3, #1
 80116ea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80116ec:	4b0a      	ldr	r3, [pc, #40]	; (8011718 <xTaskRemoveFromEventList+0xc4>)
 80116ee:	2201      	movs	r2, #1
 80116f0:	601a      	str	r2, [r3, #0]
 80116f2:	e001      	b.n	80116f8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80116f4:	2300      	movs	r3, #0
 80116f6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80116f8:	697b      	ldr	r3, [r7, #20]
}
 80116fa:	4618      	mov	r0, r3
 80116fc:	3718      	adds	r7, #24
 80116fe:	46bd      	mov	sp, r7
 8011700:	bd80      	pop	{r7, pc}
 8011702:	bf00      	nop
 8011704:	20000210 	.word	0x20000210
 8011708:	200001f0 	.word	0x200001f0
 801170c:	200000ec 	.word	0x200000ec
 8011710:	200001a8 	.word	0x200001a8
 8011714:	200000e8 	.word	0x200000e8
 8011718:	200001fc 	.word	0x200001fc

0801171c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801171c:	b480      	push	{r7}
 801171e:	b083      	sub	sp, #12
 8011720:	af00      	add	r7, sp, #0
 8011722:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011724:	4b06      	ldr	r3, [pc, #24]	; (8011740 <vTaskInternalSetTimeOutState+0x24>)
 8011726:	681a      	ldr	r2, [r3, #0]
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801172c:	4b05      	ldr	r3, [pc, #20]	; (8011744 <vTaskInternalSetTimeOutState+0x28>)
 801172e:	681a      	ldr	r2, [r3, #0]
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	605a      	str	r2, [r3, #4]
}
 8011734:	bf00      	nop
 8011736:	370c      	adds	r7, #12
 8011738:	46bd      	mov	sp, r7
 801173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801173e:	4770      	bx	lr
 8011740:	20000200 	.word	0x20000200
 8011744:	200001ec 	.word	0x200001ec

08011748 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b088      	sub	sp, #32
 801174c:	af00      	add	r7, sp, #0
 801174e:	6078      	str	r0, [r7, #4]
 8011750:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d10b      	bne.n	8011770 <xTaskCheckForTimeOut+0x28>
 8011758:	f04f 0350 	mov.w	r3, #80	; 0x50
 801175c:	b672      	cpsid	i
 801175e:	f383 8811 	msr	BASEPRI, r3
 8011762:	f3bf 8f6f 	isb	sy
 8011766:	f3bf 8f4f 	dsb	sy
 801176a:	b662      	cpsie	i
 801176c:	613b      	str	r3, [r7, #16]
 801176e:	e7fe      	b.n	801176e <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8011770:	683b      	ldr	r3, [r7, #0]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d10b      	bne.n	801178e <xTaskCheckForTimeOut+0x46>
 8011776:	f04f 0350 	mov.w	r3, #80	; 0x50
 801177a:	b672      	cpsid	i
 801177c:	f383 8811 	msr	BASEPRI, r3
 8011780:	f3bf 8f6f 	isb	sy
 8011784:	f3bf 8f4f 	dsb	sy
 8011788:	b662      	cpsie	i
 801178a:	60fb      	str	r3, [r7, #12]
 801178c:	e7fe      	b.n	801178c <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 801178e:	f000 fc5b 	bl	8012048 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011792:	4b1d      	ldr	r3, [pc, #116]	; (8011808 <xTaskCheckForTimeOut+0xc0>)
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	685b      	ldr	r3, [r3, #4]
 801179c:	69ba      	ldr	r2, [r7, #24]
 801179e:	1ad3      	subs	r3, r2, r3
 80117a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80117a2:	683b      	ldr	r3, [r7, #0]
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117aa:	d102      	bne.n	80117b2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80117ac:	2300      	movs	r3, #0
 80117ae:	61fb      	str	r3, [r7, #28]
 80117b0:	e023      	b.n	80117fa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	681a      	ldr	r2, [r3, #0]
 80117b6:	4b15      	ldr	r3, [pc, #84]	; (801180c <xTaskCheckForTimeOut+0xc4>)
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	429a      	cmp	r2, r3
 80117bc:	d007      	beq.n	80117ce <xTaskCheckForTimeOut+0x86>
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	685b      	ldr	r3, [r3, #4]
 80117c2:	69ba      	ldr	r2, [r7, #24]
 80117c4:	429a      	cmp	r2, r3
 80117c6:	d302      	bcc.n	80117ce <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80117c8:	2301      	movs	r3, #1
 80117ca:	61fb      	str	r3, [r7, #28]
 80117cc:	e015      	b.n	80117fa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80117ce:	683b      	ldr	r3, [r7, #0]
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	697a      	ldr	r2, [r7, #20]
 80117d4:	429a      	cmp	r2, r3
 80117d6:	d20b      	bcs.n	80117f0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80117d8:	683b      	ldr	r3, [r7, #0]
 80117da:	681a      	ldr	r2, [r3, #0]
 80117dc:	697b      	ldr	r3, [r7, #20]
 80117de:	1ad2      	subs	r2, r2, r3
 80117e0:	683b      	ldr	r3, [r7, #0]
 80117e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80117e4:	6878      	ldr	r0, [r7, #4]
 80117e6:	f7ff ff99 	bl	801171c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80117ea:	2300      	movs	r3, #0
 80117ec:	61fb      	str	r3, [r7, #28]
 80117ee:	e004      	b.n	80117fa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80117f0:	683b      	ldr	r3, [r7, #0]
 80117f2:	2200      	movs	r2, #0
 80117f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80117f6:	2301      	movs	r3, #1
 80117f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80117fa:	f000 fc57 	bl	80120ac <vPortExitCritical>

	return xReturn;
 80117fe:	69fb      	ldr	r3, [r7, #28]
}
 8011800:	4618      	mov	r0, r3
 8011802:	3720      	adds	r7, #32
 8011804:	46bd      	mov	sp, r7
 8011806:	bd80      	pop	{r7, pc}
 8011808:	200001ec 	.word	0x200001ec
 801180c:	20000200 	.word	0x20000200

08011810 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011810:	b480      	push	{r7}
 8011812:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011814:	4b03      	ldr	r3, [pc, #12]	; (8011824 <vTaskMissedYield+0x14>)
 8011816:	2201      	movs	r2, #1
 8011818:	601a      	str	r2, [r3, #0]
}
 801181a:	bf00      	nop
 801181c:	46bd      	mov	sp, r7
 801181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011822:	4770      	bx	lr
 8011824:	200001fc 	.word	0x200001fc

08011828 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011828:	b580      	push	{r7, lr}
 801182a:	b082      	sub	sp, #8
 801182c:	af00      	add	r7, sp, #0
 801182e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011830:	f000 f854 	bl	80118dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011834:	4b07      	ldr	r3, [pc, #28]	; (8011854 <prvIdleTask+0x2c>)
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	2b01      	cmp	r3, #1
 801183a:	d907      	bls.n	801184c <prvIdleTask+0x24>
			{
				taskYIELD();
 801183c:	4b06      	ldr	r3, [pc, #24]	; (8011858 <prvIdleTask+0x30>)
 801183e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011842:	601a      	str	r2, [r3, #0]
 8011844:	f3bf 8f4f 	dsb	sy
 8011848:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 801184c:	f000 ffe2 	bl	8012814 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8011850:	e7ee      	b.n	8011830 <prvIdleTask+0x8>
 8011852:	bf00      	nop
 8011854:	200000ec 	.word	0x200000ec
 8011858:	e000ed04 	.word	0xe000ed04

0801185c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801185c:	b580      	push	{r7, lr}
 801185e:	b082      	sub	sp, #8
 8011860:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011862:	2300      	movs	r3, #0
 8011864:	607b      	str	r3, [r7, #4]
 8011866:	e00c      	b.n	8011882 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011868:	687a      	ldr	r2, [r7, #4]
 801186a:	4613      	mov	r3, r2
 801186c:	009b      	lsls	r3, r3, #2
 801186e:	4413      	add	r3, r2
 8011870:	009b      	lsls	r3, r3, #2
 8011872:	4a12      	ldr	r2, [pc, #72]	; (80118bc <prvInitialiseTaskLists+0x60>)
 8011874:	4413      	add	r3, r2
 8011876:	4618      	mov	r0, r3
 8011878:	f7fe fb3e 	bl	800fef8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	3301      	adds	r3, #1
 8011880:	607b      	str	r3, [r7, #4]
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	2b06      	cmp	r3, #6
 8011886:	d9ef      	bls.n	8011868 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011888:	480d      	ldr	r0, [pc, #52]	; (80118c0 <prvInitialiseTaskLists+0x64>)
 801188a:	f7fe fb35 	bl	800fef8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801188e:	480d      	ldr	r0, [pc, #52]	; (80118c4 <prvInitialiseTaskLists+0x68>)
 8011890:	f7fe fb32 	bl	800fef8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011894:	480c      	ldr	r0, [pc, #48]	; (80118c8 <prvInitialiseTaskLists+0x6c>)
 8011896:	f7fe fb2f 	bl	800fef8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801189a:	480c      	ldr	r0, [pc, #48]	; (80118cc <prvInitialiseTaskLists+0x70>)
 801189c:	f7fe fb2c 	bl	800fef8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80118a0:	480b      	ldr	r0, [pc, #44]	; (80118d0 <prvInitialiseTaskLists+0x74>)
 80118a2:	f7fe fb29 	bl	800fef8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80118a6:	4b0b      	ldr	r3, [pc, #44]	; (80118d4 <prvInitialiseTaskLists+0x78>)
 80118a8:	4a05      	ldr	r2, [pc, #20]	; (80118c0 <prvInitialiseTaskLists+0x64>)
 80118aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80118ac:	4b0a      	ldr	r3, [pc, #40]	; (80118d8 <prvInitialiseTaskLists+0x7c>)
 80118ae:	4a05      	ldr	r2, [pc, #20]	; (80118c4 <prvInitialiseTaskLists+0x68>)
 80118b0:	601a      	str	r2, [r3, #0]
}
 80118b2:	bf00      	nop
 80118b4:	3708      	adds	r7, #8
 80118b6:	46bd      	mov	sp, r7
 80118b8:	bd80      	pop	{r7, pc}
 80118ba:	bf00      	nop
 80118bc:	200000ec 	.word	0x200000ec
 80118c0:	20000178 	.word	0x20000178
 80118c4:	2000018c 	.word	0x2000018c
 80118c8:	200001a8 	.word	0x200001a8
 80118cc:	200001bc 	.word	0x200001bc
 80118d0:	200001d4 	.word	0x200001d4
 80118d4:	200001a0 	.word	0x200001a0
 80118d8:	200001a4 	.word	0x200001a4

080118dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80118dc:	b580      	push	{r7, lr}
 80118de:	b082      	sub	sp, #8
 80118e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80118e2:	e019      	b.n	8011918 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80118e4:	f000 fbb0 	bl	8012048 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80118e8:	4b0f      	ldr	r3, [pc, #60]	; (8011928 <prvCheckTasksWaitingTermination+0x4c>)
 80118ea:	68db      	ldr	r3, [r3, #12]
 80118ec:	68db      	ldr	r3, [r3, #12]
 80118ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	3304      	adds	r3, #4
 80118f4:	4618      	mov	r0, r3
 80118f6:	f7fe fb89 	bl	801000c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80118fa:	4b0c      	ldr	r3, [pc, #48]	; (801192c <prvCheckTasksWaitingTermination+0x50>)
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	3b01      	subs	r3, #1
 8011900:	4a0a      	ldr	r2, [pc, #40]	; (801192c <prvCheckTasksWaitingTermination+0x50>)
 8011902:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011904:	4b0a      	ldr	r3, [pc, #40]	; (8011930 <prvCheckTasksWaitingTermination+0x54>)
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	3b01      	subs	r3, #1
 801190a:	4a09      	ldr	r2, [pc, #36]	; (8011930 <prvCheckTasksWaitingTermination+0x54>)
 801190c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801190e:	f000 fbcd 	bl	80120ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011912:	6878      	ldr	r0, [r7, #4]
 8011914:	f000 f80e 	bl	8011934 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011918:	4b05      	ldr	r3, [pc, #20]	; (8011930 <prvCheckTasksWaitingTermination+0x54>)
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	2b00      	cmp	r3, #0
 801191e:	d1e1      	bne.n	80118e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011920:	bf00      	nop
 8011922:	3708      	adds	r7, #8
 8011924:	46bd      	mov	sp, r7
 8011926:	bd80      	pop	{r7, pc}
 8011928:	200001bc 	.word	0x200001bc
 801192c:	200001e8 	.word	0x200001e8
 8011930:	200001d0 	.word	0x200001d0

08011934 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011934:	b580      	push	{r7, lr}
 8011936:	b082      	sub	sp, #8
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011940:	4618      	mov	r0, r3
 8011942:	f000 fd6f 	bl	8012424 <vPortFree>
			vPortFree( pxTCB );
 8011946:	6878      	ldr	r0, [r7, #4]
 8011948:	f000 fd6c 	bl	8012424 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801194c:	bf00      	nop
 801194e:	3708      	adds	r7, #8
 8011950:	46bd      	mov	sp, r7
 8011952:	bd80      	pop	{r7, pc}

08011954 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011954:	b480      	push	{r7}
 8011956:	b083      	sub	sp, #12
 8011958:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801195a:	4b0f      	ldr	r3, [pc, #60]	; (8011998 <prvResetNextTaskUnblockTime+0x44>)
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d101      	bne.n	8011968 <prvResetNextTaskUnblockTime+0x14>
 8011964:	2301      	movs	r3, #1
 8011966:	e000      	b.n	801196a <prvResetNextTaskUnblockTime+0x16>
 8011968:	2300      	movs	r3, #0
 801196a:	2b00      	cmp	r3, #0
 801196c:	d004      	beq.n	8011978 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801196e:	4b0b      	ldr	r3, [pc, #44]	; (801199c <prvResetNextTaskUnblockTime+0x48>)
 8011970:	f04f 32ff 	mov.w	r2, #4294967295
 8011974:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011976:	e008      	b.n	801198a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8011978:	4b07      	ldr	r3, [pc, #28]	; (8011998 <prvResetNextTaskUnblockTime+0x44>)
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	68db      	ldr	r3, [r3, #12]
 801197e:	68db      	ldr	r3, [r3, #12]
 8011980:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	685b      	ldr	r3, [r3, #4]
 8011986:	4a05      	ldr	r2, [pc, #20]	; (801199c <prvResetNextTaskUnblockTime+0x48>)
 8011988:	6013      	str	r3, [r2, #0]
}
 801198a:	bf00      	nop
 801198c:	370c      	adds	r7, #12
 801198e:	46bd      	mov	sp, r7
 8011990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011994:	4770      	bx	lr
 8011996:	bf00      	nop
 8011998:	200001a0 	.word	0x200001a0
 801199c:	20000208 	.word	0x20000208

080119a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80119a0:	b480      	push	{r7}
 80119a2:	b083      	sub	sp, #12
 80119a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80119a6:	4b0b      	ldr	r3, [pc, #44]	; (80119d4 <xTaskGetSchedulerState+0x34>)
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d102      	bne.n	80119b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80119ae:	2301      	movs	r3, #1
 80119b0:	607b      	str	r3, [r7, #4]
 80119b2:	e008      	b.n	80119c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80119b4:	4b08      	ldr	r3, [pc, #32]	; (80119d8 <xTaskGetSchedulerState+0x38>)
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d102      	bne.n	80119c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80119bc:	2302      	movs	r3, #2
 80119be:	607b      	str	r3, [r7, #4]
 80119c0:	e001      	b.n	80119c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80119c2:	2300      	movs	r3, #0
 80119c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80119c6:	687b      	ldr	r3, [r7, #4]
	}
 80119c8:	4618      	mov	r0, r3
 80119ca:	370c      	adds	r7, #12
 80119cc:	46bd      	mov	sp, r7
 80119ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d2:	4770      	bx	lr
 80119d4:	200001f4 	.word	0x200001f4
 80119d8:	20000210 	.word	0x20000210

080119dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80119dc:	b580      	push	{r7, lr}
 80119de:	b084      	sub	sp, #16
 80119e0:	af00      	add	r7, sp, #0
 80119e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80119e8:	2300      	movs	r3, #0
 80119ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d06e      	beq.n	8011ad0 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80119f2:	68bb      	ldr	r3, [r7, #8]
 80119f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119f6:	4b39      	ldr	r3, [pc, #228]	; (8011adc <xTaskPriorityInherit+0x100>)
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119fc:	429a      	cmp	r2, r3
 80119fe:	d25e      	bcs.n	8011abe <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011a00:	68bb      	ldr	r3, [r7, #8]
 8011a02:	699b      	ldr	r3, [r3, #24]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	db06      	blt.n	8011a16 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a08:	4b34      	ldr	r3, [pc, #208]	; (8011adc <xTaskPriorityInherit+0x100>)
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a0e:	f1c3 0207 	rsb	r2, r3, #7
 8011a12:	68bb      	ldr	r3, [r7, #8]
 8011a14:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011a16:	68bb      	ldr	r3, [r7, #8]
 8011a18:	6959      	ldr	r1, [r3, #20]
 8011a1a:	68bb      	ldr	r3, [r7, #8]
 8011a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a1e:	4613      	mov	r3, r2
 8011a20:	009b      	lsls	r3, r3, #2
 8011a22:	4413      	add	r3, r2
 8011a24:	009b      	lsls	r3, r3, #2
 8011a26:	4a2e      	ldr	r2, [pc, #184]	; (8011ae0 <xTaskPriorityInherit+0x104>)
 8011a28:	4413      	add	r3, r2
 8011a2a:	4299      	cmp	r1, r3
 8011a2c:	d101      	bne.n	8011a32 <xTaskPriorityInherit+0x56>
 8011a2e:	2301      	movs	r3, #1
 8011a30:	e000      	b.n	8011a34 <xTaskPriorityInherit+0x58>
 8011a32:	2300      	movs	r3, #0
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d03a      	beq.n	8011aae <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011a38:	68bb      	ldr	r3, [r7, #8]
 8011a3a:	3304      	adds	r3, #4
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	f7fe fae5 	bl	801000c <uxListRemove>
 8011a42:	4603      	mov	r3, r0
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d115      	bne.n	8011a74 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8011a48:	68bb      	ldr	r3, [r7, #8]
 8011a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a4c:	4924      	ldr	r1, [pc, #144]	; (8011ae0 <xTaskPriorityInherit+0x104>)
 8011a4e:	4613      	mov	r3, r2
 8011a50:	009b      	lsls	r3, r3, #2
 8011a52:	4413      	add	r3, r2
 8011a54:	009b      	lsls	r3, r3, #2
 8011a56:	440b      	add	r3, r1
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d10a      	bne.n	8011a74 <xTaskPriorityInherit+0x98>
 8011a5e:	68bb      	ldr	r3, [r7, #8]
 8011a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a62:	2201      	movs	r2, #1
 8011a64:	fa02 f303 	lsl.w	r3, r2, r3
 8011a68:	43da      	mvns	r2, r3
 8011a6a:	4b1e      	ldr	r3, [pc, #120]	; (8011ae4 <xTaskPriorityInherit+0x108>)
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	4013      	ands	r3, r2
 8011a70:	4a1c      	ldr	r2, [pc, #112]	; (8011ae4 <xTaskPriorityInherit+0x108>)
 8011a72:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011a74:	4b19      	ldr	r3, [pc, #100]	; (8011adc <xTaskPriorityInherit+0x100>)
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a7a:	68bb      	ldr	r3, [r7, #8]
 8011a7c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011a7e:	68bb      	ldr	r3, [r7, #8]
 8011a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a82:	2201      	movs	r2, #1
 8011a84:	409a      	lsls	r2, r3
 8011a86:	4b17      	ldr	r3, [pc, #92]	; (8011ae4 <xTaskPriorityInherit+0x108>)
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	4313      	orrs	r3, r2
 8011a8c:	4a15      	ldr	r2, [pc, #84]	; (8011ae4 <xTaskPriorityInherit+0x108>)
 8011a8e:	6013      	str	r3, [r2, #0]
 8011a90:	68bb      	ldr	r3, [r7, #8]
 8011a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a94:	4613      	mov	r3, r2
 8011a96:	009b      	lsls	r3, r3, #2
 8011a98:	4413      	add	r3, r2
 8011a9a:	009b      	lsls	r3, r3, #2
 8011a9c:	4a10      	ldr	r2, [pc, #64]	; (8011ae0 <xTaskPriorityInherit+0x104>)
 8011a9e:	441a      	add	r2, r3
 8011aa0:	68bb      	ldr	r3, [r7, #8]
 8011aa2:	3304      	adds	r3, #4
 8011aa4:	4619      	mov	r1, r3
 8011aa6:	4610      	mov	r0, r2
 8011aa8:	f7fe fa53 	bl	800ff52 <vListInsertEnd>
 8011aac:	e004      	b.n	8011ab8 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011aae:	4b0b      	ldr	r3, [pc, #44]	; (8011adc <xTaskPriorityInherit+0x100>)
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ab4:	68bb      	ldr	r3, [r7, #8]
 8011ab6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011ab8:	2301      	movs	r3, #1
 8011aba:	60fb      	str	r3, [r7, #12]
 8011abc:	e008      	b.n	8011ad0 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011abe:	68bb      	ldr	r3, [r7, #8]
 8011ac0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011ac2:	4b06      	ldr	r3, [pc, #24]	; (8011adc <xTaskPriorityInherit+0x100>)
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ac8:	429a      	cmp	r2, r3
 8011aca:	d201      	bcs.n	8011ad0 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011acc:	2301      	movs	r3, #1
 8011ace:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011ad0:	68fb      	ldr	r3, [r7, #12]
	}
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	3710      	adds	r7, #16
 8011ad6:	46bd      	mov	sp, r7
 8011ad8:	bd80      	pop	{r7, pc}
 8011ada:	bf00      	nop
 8011adc:	200000e8 	.word	0x200000e8
 8011ae0:	200000ec 	.word	0x200000ec
 8011ae4:	200001f0 	.word	0x200001f0

08011ae8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	b086      	sub	sp, #24
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011af4:	2300      	movs	r3, #0
 8011af6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d070      	beq.n	8011be0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011afe:	4b3b      	ldr	r3, [pc, #236]	; (8011bec <xTaskPriorityDisinherit+0x104>)
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	693a      	ldr	r2, [r7, #16]
 8011b04:	429a      	cmp	r2, r3
 8011b06:	d00b      	beq.n	8011b20 <xTaskPriorityDisinherit+0x38>
 8011b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b0c:	b672      	cpsid	i
 8011b0e:	f383 8811 	msr	BASEPRI, r3
 8011b12:	f3bf 8f6f 	isb	sy
 8011b16:	f3bf 8f4f 	dsb	sy
 8011b1a:	b662      	cpsie	i
 8011b1c:	60fb      	str	r3, [r7, #12]
 8011b1e:	e7fe      	b.n	8011b1e <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8011b20:	693b      	ldr	r3, [r7, #16]
 8011b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d10b      	bne.n	8011b40 <xTaskPriorityDisinherit+0x58>
 8011b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b2c:	b672      	cpsid	i
 8011b2e:	f383 8811 	msr	BASEPRI, r3
 8011b32:	f3bf 8f6f 	isb	sy
 8011b36:	f3bf 8f4f 	dsb	sy
 8011b3a:	b662      	cpsie	i
 8011b3c:	60bb      	str	r3, [r7, #8]
 8011b3e:	e7fe      	b.n	8011b3e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8011b40:	693b      	ldr	r3, [r7, #16]
 8011b42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011b44:	1e5a      	subs	r2, r3, #1
 8011b46:	693b      	ldr	r3, [r7, #16]
 8011b48:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011b4a:	693b      	ldr	r3, [r7, #16]
 8011b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b4e:	693b      	ldr	r3, [r7, #16]
 8011b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b52:	429a      	cmp	r2, r3
 8011b54:	d044      	beq.n	8011be0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011b56:	693b      	ldr	r3, [r7, #16]
 8011b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d140      	bne.n	8011be0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011b5e:	693b      	ldr	r3, [r7, #16]
 8011b60:	3304      	adds	r3, #4
 8011b62:	4618      	mov	r0, r3
 8011b64:	f7fe fa52 	bl	801000c <uxListRemove>
 8011b68:	4603      	mov	r3, r0
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d115      	bne.n	8011b9a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011b6e:	693b      	ldr	r3, [r7, #16]
 8011b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b72:	491f      	ldr	r1, [pc, #124]	; (8011bf0 <xTaskPriorityDisinherit+0x108>)
 8011b74:	4613      	mov	r3, r2
 8011b76:	009b      	lsls	r3, r3, #2
 8011b78:	4413      	add	r3, r2
 8011b7a:	009b      	lsls	r3, r3, #2
 8011b7c:	440b      	add	r3, r1
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d10a      	bne.n	8011b9a <xTaskPriorityDisinherit+0xb2>
 8011b84:	693b      	ldr	r3, [r7, #16]
 8011b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b88:	2201      	movs	r2, #1
 8011b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8011b8e:	43da      	mvns	r2, r3
 8011b90:	4b18      	ldr	r3, [pc, #96]	; (8011bf4 <xTaskPriorityDisinherit+0x10c>)
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	4013      	ands	r3, r2
 8011b96:	4a17      	ldr	r2, [pc, #92]	; (8011bf4 <xTaskPriorityDisinherit+0x10c>)
 8011b98:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011b9a:	693b      	ldr	r3, [r7, #16]
 8011b9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011b9e:	693b      	ldr	r3, [r7, #16]
 8011ba0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011ba2:	693b      	ldr	r3, [r7, #16]
 8011ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ba6:	f1c3 0207 	rsb	r2, r3, #7
 8011baa:	693b      	ldr	r3, [r7, #16]
 8011bac:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011bae:	693b      	ldr	r3, [r7, #16]
 8011bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bb2:	2201      	movs	r2, #1
 8011bb4:	409a      	lsls	r2, r3
 8011bb6:	4b0f      	ldr	r3, [pc, #60]	; (8011bf4 <xTaskPriorityDisinherit+0x10c>)
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	4313      	orrs	r3, r2
 8011bbc:	4a0d      	ldr	r2, [pc, #52]	; (8011bf4 <xTaskPriorityDisinherit+0x10c>)
 8011bbe:	6013      	str	r3, [r2, #0]
 8011bc0:	693b      	ldr	r3, [r7, #16]
 8011bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bc4:	4613      	mov	r3, r2
 8011bc6:	009b      	lsls	r3, r3, #2
 8011bc8:	4413      	add	r3, r2
 8011bca:	009b      	lsls	r3, r3, #2
 8011bcc:	4a08      	ldr	r2, [pc, #32]	; (8011bf0 <xTaskPriorityDisinherit+0x108>)
 8011bce:	441a      	add	r2, r3
 8011bd0:	693b      	ldr	r3, [r7, #16]
 8011bd2:	3304      	adds	r3, #4
 8011bd4:	4619      	mov	r1, r3
 8011bd6:	4610      	mov	r0, r2
 8011bd8:	f7fe f9bb 	bl	800ff52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011bdc:	2301      	movs	r3, #1
 8011bde:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011be0:	697b      	ldr	r3, [r7, #20]
	}
 8011be2:	4618      	mov	r0, r3
 8011be4:	3718      	adds	r7, #24
 8011be6:	46bd      	mov	sp, r7
 8011be8:	bd80      	pop	{r7, pc}
 8011bea:	bf00      	nop
 8011bec:	200000e8 	.word	0x200000e8
 8011bf0:	200000ec 	.word	0x200000ec
 8011bf4:	200001f0 	.word	0x200001f0

08011bf8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b088      	sub	sp, #32
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	6078      	str	r0, [r7, #4]
 8011c00:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011c06:	2301      	movs	r3, #1
 8011c08:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	f000 808a 	beq.w	8011d26 <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011c12:	69bb      	ldr	r3, [r7, #24]
 8011c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d10b      	bne.n	8011c32 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 8011c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c1e:	b672      	cpsid	i
 8011c20:	f383 8811 	msr	BASEPRI, r3
 8011c24:	f3bf 8f6f 	isb	sy
 8011c28:	f3bf 8f4f 	dsb	sy
 8011c2c:	b662      	cpsie	i
 8011c2e:	60fb      	str	r3, [r7, #12]
 8011c30:	e7fe      	b.n	8011c30 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011c32:	69bb      	ldr	r3, [r7, #24]
 8011c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c36:	683a      	ldr	r2, [r7, #0]
 8011c38:	429a      	cmp	r2, r3
 8011c3a:	d902      	bls.n	8011c42 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011c3c:	683b      	ldr	r3, [r7, #0]
 8011c3e:	61fb      	str	r3, [r7, #28]
 8011c40:	e002      	b.n	8011c48 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011c42:	69bb      	ldr	r3, [r7, #24]
 8011c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c46:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011c48:	69bb      	ldr	r3, [r7, #24]
 8011c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c4c:	69fa      	ldr	r2, [r7, #28]
 8011c4e:	429a      	cmp	r2, r3
 8011c50:	d069      	beq.n	8011d26 <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011c52:	69bb      	ldr	r3, [r7, #24]
 8011c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011c56:	697a      	ldr	r2, [r7, #20]
 8011c58:	429a      	cmp	r2, r3
 8011c5a:	d164      	bne.n	8011d26 <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011c5c:	4b34      	ldr	r3, [pc, #208]	; (8011d30 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	69ba      	ldr	r2, [r7, #24]
 8011c62:	429a      	cmp	r2, r3
 8011c64:	d10b      	bne.n	8011c7e <vTaskPriorityDisinheritAfterTimeout+0x86>
 8011c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c6a:	b672      	cpsid	i
 8011c6c:	f383 8811 	msr	BASEPRI, r3
 8011c70:	f3bf 8f6f 	isb	sy
 8011c74:	f3bf 8f4f 	dsb	sy
 8011c78:	b662      	cpsie	i
 8011c7a:	60bb      	str	r3, [r7, #8]
 8011c7c:	e7fe      	b.n	8011c7c <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011c7e:	69bb      	ldr	r3, [r7, #24]
 8011c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c82:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011c84:	69bb      	ldr	r3, [r7, #24]
 8011c86:	69fa      	ldr	r2, [r7, #28]
 8011c88:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011c8a:	69bb      	ldr	r3, [r7, #24]
 8011c8c:	699b      	ldr	r3, [r3, #24]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	db04      	blt.n	8011c9c <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011c92:	69fb      	ldr	r3, [r7, #28]
 8011c94:	f1c3 0207 	rsb	r2, r3, #7
 8011c98:	69bb      	ldr	r3, [r7, #24]
 8011c9a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011c9c:	69bb      	ldr	r3, [r7, #24]
 8011c9e:	6959      	ldr	r1, [r3, #20]
 8011ca0:	693a      	ldr	r2, [r7, #16]
 8011ca2:	4613      	mov	r3, r2
 8011ca4:	009b      	lsls	r3, r3, #2
 8011ca6:	4413      	add	r3, r2
 8011ca8:	009b      	lsls	r3, r3, #2
 8011caa:	4a22      	ldr	r2, [pc, #136]	; (8011d34 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8011cac:	4413      	add	r3, r2
 8011cae:	4299      	cmp	r1, r3
 8011cb0:	d101      	bne.n	8011cb6 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8011cb2:	2301      	movs	r3, #1
 8011cb4:	e000      	b.n	8011cb8 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 8011cb6:	2300      	movs	r3, #0
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d034      	beq.n	8011d26 <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011cbc:	69bb      	ldr	r3, [r7, #24]
 8011cbe:	3304      	adds	r3, #4
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	f7fe f9a3 	bl	801000c <uxListRemove>
 8011cc6:	4603      	mov	r3, r0
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d115      	bne.n	8011cf8 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011ccc:	69bb      	ldr	r3, [r7, #24]
 8011cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cd0:	4918      	ldr	r1, [pc, #96]	; (8011d34 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8011cd2:	4613      	mov	r3, r2
 8011cd4:	009b      	lsls	r3, r3, #2
 8011cd6:	4413      	add	r3, r2
 8011cd8:	009b      	lsls	r3, r3, #2
 8011cda:	440b      	add	r3, r1
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d10a      	bne.n	8011cf8 <vTaskPriorityDisinheritAfterTimeout+0x100>
 8011ce2:	69bb      	ldr	r3, [r7, #24]
 8011ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ce6:	2201      	movs	r2, #1
 8011ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8011cec:	43da      	mvns	r2, r3
 8011cee:	4b12      	ldr	r3, [pc, #72]	; (8011d38 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	4013      	ands	r3, r2
 8011cf4:	4a10      	ldr	r2, [pc, #64]	; (8011d38 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8011cf6:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011cf8:	69bb      	ldr	r3, [r7, #24]
 8011cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cfc:	2201      	movs	r2, #1
 8011cfe:	409a      	lsls	r2, r3
 8011d00:	4b0d      	ldr	r3, [pc, #52]	; (8011d38 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	4313      	orrs	r3, r2
 8011d06:	4a0c      	ldr	r2, [pc, #48]	; (8011d38 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8011d08:	6013      	str	r3, [r2, #0]
 8011d0a:	69bb      	ldr	r3, [r7, #24]
 8011d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d0e:	4613      	mov	r3, r2
 8011d10:	009b      	lsls	r3, r3, #2
 8011d12:	4413      	add	r3, r2
 8011d14:	009b      	lsls	r3, r3, #2
 8011d16:	4a07      	ldr	r2, [pc, #28]	; (8011d34 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8011d18:	441a      	add	r2, r3
 8011d1a:	69bb      	ldr	r3, [r7, #24]
 8011d1c:	3304      	adds	r3, #4
 8011d1e:	4619      	mov	r1, r3
 8011d20:	4610      	mov	r0, r2
 8011d22:	f7fe f916 	bl	800ff52 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011d26:	bf00      	nop
 8011d28:	3720      	adds	r7, #32
 8011d2a:	46bd      	mov	sp, r7
 8011d2c:	bd80      	pop	{r7, pc}
 8011d2e:	bf00      	nop
 8011d30:	200000e8 	.word	0x200000e8
 8011d34:	200000ec 	.word	0x200000ec
 8011d38:	200001f0 	.word	0x200001f0

08011d3c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8011d3c:	b480      	push	{r7}
 8011d3e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011d40:	4b07      	ldr	r3, [pc, #28]	; (8011d60 <pvTaskIncrementMutexHeldCount+0x24>)
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d004      	beq.n	8011d52 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011d48:	4b05      	ldr	r3, [pc, #20]	; (8011d60 <pvTaskIncrementMutexHeldCount+0x24>)
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011d4e:	3201      	adds	r2, #1
 8011d50:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8011d52:	4b03      	ldr	r3, [pc, #12]	; (8011d60 <pvTaskIncrementMutexHeldCount+0x24>)
 8011d54:	681b      	ldr	r3, [r3, #0]
	}
 8011d56:	4618      	mov	r0, r3
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5e:	4770      	bx	lr
 8011d60:	200000e8 	.word	0x200000e8

08011d64 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b084      	sub	sp, #16
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	6078      	str	r0, [r7, #4]
 8011d6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011d6e:	4b29      	ldr	r3, [pc, #164]	; (8011e14 <prvAddCurrentTaskToDelayedList+0xb0>)
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011d74:	4b28      	ldr	r3, [pc, #160]	; (8011e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	3304      	adds	r3, #4
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	f7fe f946 	bl	801000c <uxListRemove>
 8011d80:	4603      	mov	r3, r0
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d10b      	bne.n	8011d9e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8011d86:	4b24      	ldr	r3, [pc, #144]	; (8011e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d8c:	2201      	movs	r2, #1
 8011d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8011d92:	43da      	mvns	r2, r3
 8011d94:	4b21      	ldr	r3, [pc, #132]	; (8011e1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	4013      	ands	r3, r2
 8011d9a:	4a20      	ldr	r2, [pc, #128]	; (8011e1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8011d9c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011da4:	d10a      	bne.n	8011dbc <prvAddCurrentTaskToDelayedList+0x58>
 8011da6:	683b      	ldr	r3, [r7, #0]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d007      	beq.n	8011dbc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011dac:	4b1a      	ldr	r3, [pc, #104]	; (8011e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	3304      	adds	r3, #4
 8011db2:	4619      	mov	r1, r3
 8011db4:	481a      	ldr	r0, [pc, #104]	; (8011e20 <prvAddCurrentTaskToDelayedList+0xbc>)
 8011db6:	f7fe f8cc 	bl	800ff52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011dba:	e026      	b.n	8011e0a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011dbc:	68fa      	ldr	r2, [r7, #12]
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	4413      	add	r3, r2
 8011dc2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011dc4:	4b14      	ldr	r3, [pc, #80]	; (8011e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	68ba      	ldr	r2, [r7, #8]
 8011dca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011dcc:	68ba      	ldr	r2, [r7, #8]
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	429a      	cmp	r2, r3
 8011dd2:	d209      	bcs.n	8011de8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011dd4:	4b13      	ldr	r3, [pc, #76]	; (8011e24 <prvAddCurrentTaskToDelayedList+0xc0>)
 8011dd6:	681a      	ldr	r2, [r3, #0]
 8011dd8:	4b0f      	ldr	r3, [pc, #60]	; (8011e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	3304      	adds	r3, #4
 8011dde:	4619      	mov	r1, r3
 8011de0:	4610      	mov	r0, r2
 8011de2:	f7fe f8da 	bl	800ff9a <vListInsert>
}
 8011de6:	e010      	b.n	8011e0a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011de8:	4b0f      	ldr	r3, [pc, #60]	; (8011e28 <prvAddCurrentTaskToDelayedList+0xc4>)
 8011dea:	681a      	ldr	r2, [r3, #0]
 8011dec:	4b0a      	ldr	r3, [pc, #40]	; (8011e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	3304      	adds	r3, #4
 8011df2:	4619      	mov	r1, r3
 8011df4:	4610      	mov	r0, r2
 8011df6:	f7fe f8d0 	bl	800ff9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011dfa:	4b0c      	ldr	r3, [pc, #48]	; (8011e2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	68ba      	ldr	r2, [r7, #8]
 8011e00:	429a      	cmp	r2, r3
 8011e02:	d202      	bcs.n	8011e0a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011e04:	4a09      	ldr	r2, [pc, #36]	; (8011e2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8011e06:	68bb      	ldr	r3, [r7, #8]
 8011e08:	6013      	str	r3, [r2, #0]
}
 8011e0a:	bf00      	nop
 8011e0c:	3710      	adds	r7, #16
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	bd80      	pop	{r7, pc}
 8011e12:	bf00      	nop
 8011e14:	200001ec 	.word	0x200001ec
 8011e18:	200000e8 	.word	0x200000e8
 8011e1c:	200001f0 	.word	0x200001f0
 8011e20:	200001d4 	.word	0x200001d4
 8011e24:	200001a4 	.word	0x200001a4
 8011e28:	200001a0 	.word	0x200001a0
 8011e2c:	20000208 	.word	0x20000208

08011e30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011e30:	b480      	push	{r7}
 8011e32:	b085      	sub	sp, #20
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	60f8      	str	r0, [r7, #12]
 8011e38:	60b9      	str	r1, [r7, #8]
 8011e3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	3b04      	subs	r3, #4
 8011e40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011e48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	3b04      	subs	r3, #4
 8011e4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011e50:	68bb      	ldr	r3, [r7, #8]
 8011e52:	f023 0201 	bic.w	r2, r3, #1
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	3b04      	subs	r3, #4
 8011e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011e60:	4a0c      	ldr	r2, [pc, #48]	; (8011e94 <pxPortInitialiseStack+0x64>)
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	3b14      	subs	r3, #20
 8011e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011e6c:	687a      	ldr	r2, [r7, #4]
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	3b04      	subs	r3, #4
 8011e76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	f06f 0202 	mvn.w	r2, #2
 8011e7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	3b20      	subs	r3, #32
 8011e84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011e86:	68fb      	ldr	r3, [r7, #12]
}
 8011e88:	4618      	mov	r0, r3
 8011e8a:	3714      	adds	r7, #20
 8011e8c:	46bd      	mov	sp, r7
 8011e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e92:	4770      	bx	lr
 8011e94:	08011e99 	.word	0x08011e99

08011e98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011e98:	b480      	push	{r7}
 8011e9a:	b085      	sub	sp, #20
 8011e9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011ea2:	4b13      	ldr	r3, [pc, #76]	; (8011ef0 <prvTaskExitError+0x58>)
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011eaa:	d00b      	beq.n	8011ec4 <prvTaskExitError+0x2c>
 8011eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eb0:	b672      	cpsid	i
 8011eb2:	f383 8811 	msr	BASEPRI, r3
 8011eb6:	f3bf 8f6f 	isb	sy
 8011eba:	f3bf 8f4f 	dsb	sy
 8011ebe:	b662      	cpsie	i
 8011ec0:	60fb      	str	r3, [r7, #12]
 8011ec2:	e7fe      	b.n	8011ec2 <prvTaskExitError+0x2a>
 8011ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ec8:	b672      	cpsid	i
 8011eca:	f383 8811 	msr	BASEPRI, r3
 8011ece:	f3bf 8f6f 	isb	sy
 8011ed2:	f3bf 8f4f 	dsb	sy
 8011ed6:	b662      	cpsie	i
 8011ed8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011eda:	bf00      	nop
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d0fc      	beq.n	8011edc <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011ee2:	bf00      	nop
 8011ee4:	3714      	adds	r7, #20
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eec:	4770      	bx	lr
 8011eee:	bf00      	nop
 8011ef0:	20000024 	.word	0x20000024
	...

08011f00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011f00:	4b07      	ldr	r3, [pc, #28]	; (8011f20 <pxCurrentTCBConst2>)
 8011f02:	6819      	ldr	r1, [r3, #0]
 8011f04:	6808      	ldr	r0, [r1, #0]
 8011f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f0a:	f380 8809 	msr	PSP, r0
 8011f0e:	f3bf 8f6f 	isb	sy
 8011f12:	f04f 0000 	mov.w	r0, #0
 8011f16:	f380 8811 	msr	BASEPRI, r0
 8011f1a:	4770      	bx	lr
 8011f1c:	f3af 8000 	nop.w

08011f20 <pxCurrentTCBConst2>:
 8011f20:	200000e8 	.word	0x200000e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011f24:	bf00      	nop
 8011f26:	bf00      	nop

08011f28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011f28:	4808      	ldr	r0, [pc, #32]	; (8011f4c <prvPortStartFirstTask+0x24>)
 8011f2a:	6800      	ldr	r0, [r0, #0]
 8011f2c:	6800      	ldr	r0, [r0, #0]
 8011f2e:	f380 8808 	msr	MSP, r0
 8011f32:	f04f 0000 	mov.w	r0, #0
 8011f36:	f380 8814 	msr	CONTROL, r0
 8011f3a:	b662      	cpsie	i
 8011f3c:	b661      	cpsie	f
 8011f3e:	f3bf 8f4f 	dsb	sy
 8011f42:	f3bf 8f6f 	isb	sy
 8011f46:	df00      	svc	0
 8011f48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011f4a:	bf00      	nop
 8011f4c:	e000ed08 	.word	0xe000ed08

08011f50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b084      	sub	sp, #16
 8011f54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011f56:	4b36      	ldr	r3, [pc, #216]	; (8012030 <xPortStartScheduler+0xe0>)
 8011f58:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	781b      	ldrb	r3, [r3, #0]
 8011f5e:	b2db      	uxtb	r3, r3
 8011f60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	22ff      	movs	r2, #255	; 0xff
 8011f66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	781b      	ldrb	r3, [r3, #0]
 8011f6c:	b2db      	uxtb	r3, r3
 8011f6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011f70:	78fb      	ldrb	r3, [r7, #3]
 8011f72:	b2db      	uxtb	r3, r3
 8011f74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011f78:	b2da      	uxtb	r2, r3
 8011f7a:	4b2e      	ldr	r3, [pc, #184]	; (8012034 <xPortStartScheduler+0xe4>)
 8011f7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011f7e:	4b2e      	ldr	r3, [pc, #184]	; (8012038 <xPortStartScheduler+0xe8>)
 8011f80:	2207      	movs	r2, #7
 8011f82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011f84:	e009      	b.n	8011f9a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8011f86:	4b2c      	ldr	r3, [pc, #176]	; (8012038 <xPortStartScheduler+0xe8>)
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	3b01      	subs	r3, #1
 8011f8c:	4a2a      	ldr	r2, [pc, #168]	; (8012038 <xPortStartScheduler+0xe8>)
 8011f8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011f90:	78fb      	ldrb	r3, [r7, #3]
 8011f92:	b2db      	uxtb	r3, r3
 8011f94:	005b      	lsls	r3, r3, #1
 8011f96:	b2db      	uxtb	r3, r3
 8011f98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011f9a:	78fb      	ldrb	r3, [r7, #3]
 8011f9c:	b2db      	uxtb	r3, r3
 8011f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011fa2:	2b80      	cmp	r3, #128	; 0x80
 8011fa4:	d0ef      	beq.n	8011f86 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011fa6:	4b24      	ldr	r3, [pc, #144]	; (8012038 <xPortStartScheduler+0xe8>)
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	f1c3 0307 	rsb	r3, r3, #7
 8011fae:	2b04      	cmp	r3, #4
 8011fb0:	d00b      	beq.n	8011fca <xPortStartScheduler+0x7a>
 8011fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fb6:	b672      	cpsid	i
 8011fb8:	f383 8811 	msr	BASEPRI, r3
 8011fbc:	f3bf 8f6f 	isb	sy
 8011fc0:	f3bf 8f4f 	dsb	sy
 8011fc4:	b662      	cpsie	i
 8011fc6:	60bb      	str	r3, [r7, #8]
 8011fc8:	e7fe      	b.n	8011fc8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011fca:	4b1b      	ldr	r3, [pc, #108]	; (8012038 <xPortStartScheduler+0xe8>)
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	021b      	lsls	r3, r3, #8
 8011fd0:	4a19      	ldr	r2, [pc, #100]	; (8012038 <xPortStartScheduler+0xe8>)
 8011fd2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011fd4:	4b18      	ldr	r3, [pc, #96]	; (8012038 <xPortStartScheduler+0xe8>)
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011fdc:	4a16      	ldr	r2, [pc, #88]	; (8012038 <xPortStartScheduler+0xe8>)
 8011fde:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	b2da      	uxtb	r2, r3
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011fe8:	4b14      	ldr	r3, [pc, #80]	; (801203c <xPortStartScheduler+0xec>)
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	4a13      	ldr	r2, [pc, #76]	; (801203c <xPortStartScheduler+0xec>)
 8011fee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011ff2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011ff4:	4b11      	ldr	r3, [pc, #68]	; (801203c <xPortStartScheduler+0xec>)
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	4a10      	ldr	r2, [pc, #64]	; (801203c <xPortStartScheduler+0xec>)
 8011ffa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011ffe:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012000:	f000 f8d4 	bl	80121ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012004:	4b0e      	ldr	r3, [pc, #56]	; (8012040 <xPortStartScheduler+0xf0>)
 8012006:	2200      	movs	r2, #0
 8012008:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801200a:	f000 f8f3 	bl	80121f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801200e:	4b0d      	ldr	r3, [pc, #52]	; (8012044 <xPortStartScheduler+0xf4>)
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	4a0c      	ldr	r2, [pc, #48]	; (8012044 <xPortStartScheduler+0xf4>)
 8012014:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012018:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801201a:	f7ff ff85 	bl	8011f28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801201e:	f7ff fa71 	bl	8011504 <vTaskSwitchContext>
	prvTaskExitError();
 8012022:	f7ff ff39 	bl	8011e98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012026:	2300      	movs	r3, #0
}
 8012028:	4618      	mov	r0, r3
 801202a:	3710      	adds	r7, #16
 801202c:	46bd      	mov	sp, r7
 801202e:	bd80      	pop	{r7, pc}
 8012030:	e000e400 	.word	0xe000e400
 8012034:	20000214 	.word	0x20000214
 8012038:	20000218 	.word	0x20000218
 801203c:	e000ed20 	.word	0xe000ed20
 8012040:	20000024 	.word	0x20000024
 8012044:	e000ef34 	.word	0xe000ef34

08012048 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012048:	b480      	push	{r7}
 801204a:	b083      	sub	sp, #12
 801204c:	af00      	add	r7, sp, #0
 801204e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012052:	b672      	cpsid	i
 8012054:	f383 8811 	msr	BASEPRI, r3
 8012058:	f3bf 8f6f 	isb	sy
 801205c:	f3bf 8f4f 	dsb	sy
 8012060:	b662      	cpsie	i
 8012062:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012064:	4b0f      	ldr	r3, [pc, #60]	; (80120a4 <vPortEnterCritical+0x5c>)
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	3301      	adds	r3, #1
 801206a:	4a0e      	ldr	r2, [pc, #56]	; (80120a4 <vPortEnterCritical+0x5c>)
 801206c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801206e:	4b0d      	ldr	r3, [pc, #52]	; (80120a4 <vPortEnterCritical+0x5c>)
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	2b01      	cmp	r3, #1
 8012074:	d110      	bne.n	8012098 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012076:	4b0c      	ldr	r3, [pc, #48]	; (80120a8 <vPortEnterCritical+0x60>)
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	b2db      	uxtb	r3, r3
 801207c:	2b00      	cmp	r3, #0
 801207e:	d00b      	beq.n	8012098 <vPortEnterCritical+0x50>
 8012080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012084:	b672      	cpsid	i
 8012086:	f383 8811 	msr	BASEPRI, r3
 801208a:	f3bf 8f6f 	isb	sy
 801208e:	f3bf 8f4f 	dsb	sy
 8012092:	b662      	cpsie	i
 8012094:	603b      	str	r3, [r7, #0]
 8012096:	e7fe      	b.n	8012096 <vPortEnterCritical+0x4e>
	}
}
 8012098:	bf00      	nop
 801209a:	370c      	adds	r7, #12
 801209c:	46bd      	mov	sp, r7
 801209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a2:	4770      	bx	lr
 80120a4:	20000024 	.word	0x20000024
 80120a8:	e000ed04 	.word	0xe000ed04

080120ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80120ac:	b480      	push	{r7}
 80120ae:	b083      	sub	sp, #12
 80120b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80120b2:	4b12      	ldr	r3, [pc, #72]	; (80120fc <vPortExitCritical+0x50>)
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d10b      	bne.n	80120d2 <vPortExitCritical+0x26>
 80120ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120be:	b672      	cpsid	i
 80120c0:	f383 8811 	msr	BASEPRI, r3
 80120c4:	f3bf 8f6f 	isb	sy
 80120c8:	f3bf 8f4f 	dsb	sy
 80120cc:	b662      	cpsie	i
 80120ce:	607b      	str	r3, [r7, #4]
 80120d0:	e7fe      	b.n	80120d0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80120d2:	4b0a      	ldr	r3, [pc, #40]	; (80120fc <vPortExitCritical+0x50>)
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	3b01      	subs	r3, #1
 80120d8:	4a08      	ldr	r2, [pc, #32]	; (80120fc <vPortExitCritical+0x50>)
 80120da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80120dc:	4b07      	ldr	r3, [pc, #28]	; (80120fc <vPortExitCritical+0x50>)
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d104      	bne.n	80120ee <vPortExitCritical+0x42>
 80120e4:	2300      	movs	r3, #0
 80120e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80120e8:	683b      	ldr	r3, [r7, #0]
 80120ea:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80120ee:	bf00      	nop
 80120f0:	370c      	adds	r7, #12
 80120f2:	46bd      	mov	sp, r7
 80120f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f8:	4770      	bx	lr
 80120fa:	bf00      	nop
 80120fc:	20000024 	.word	0x20000024

08012100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012100:	f3ef 8009 	mrs	r0, PSP
 8012104:	f3bf 8f6f 	isb	sy
 8012108:	4b15      	ldr	r3, [pc, #84]	; (8012160 <pxCurrentTCBConst>)
 801210a:	681a      	ldr	r2, [r3, #0]
 801210c:	f01e 0f10 	tst.w	lr, #16
 8012110:	bf08      	it	eq
 8012112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801211a:	6010      	str	r0, [r2, #0]
 801211c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012120:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012124:	b672      	cpsid	i
 8012126:	f380 8811 	msr	BASEPRI, r0
 801212a:	f3bf 8f4f 	dsb	sy
 801212e:	f3bf 8f6f 	isb	sy
 8012132:	b662      	cpsie	i
 8012134:	f7ff f9e6 	bl	8011504 <vTaskSwitchContext>
 8012138:	f04f 0000 	mov.w	r0, #0
 801213c:	f380 8811 	msr	BASEPRI, r0
 8012140:	bc09      	pop	{r0, r3}
 8012142:	6819      	ldr	r1, [r3, #0]
 8012144:	6808      	ldr	r0, [r1, #0]
 8012146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801214a:	f01e 0f10 	tst.w	lr, #16
 801214e:	bf08      	it	eq
 8012150:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012154:	f380 8809 	msr	PSP, r0
 8012158:	f3bf 8f6f 	isb	sy
 801215c:	4770      	bx	lr
 801215e:	bf00      	nop

08012160 <pxCurrentTCBConst>:
 8012160:	200000e8 	.word	0x200000e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012164:	bf00      	nop
 8012166:	bf00      	nop

08012168 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012168:	b580      	push	{r7, lr}
 801216a:	b082      	sub	sp, #8
 801216c:	af00      	add	r7, sp, #0
	__asm volatile
 801216e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012172:	b672      	cpsid	i
 8012174:	f383 8811 	msr	BASEPRI, r3
 8012178:	f3bf 8f6f 	isb	sy
 801217c:	f3bf 8f4f 	dsb	sy
 8012180:	b662      	cpsie	i
 8012182:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012184:	f7ff f900 	bl	8011388 <xTaskIncrementTick>
 8012188:	4603      	mov	r3, r0
 801218a:	2b00      	cmp	r3, #0
 801218c:	d003      	beq.n	8012196 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801218e:	4b06      	ldr	r3, [pc, #24]	; (80121a8 <SysTick_Handler+0x40>)
 8012190:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012194:	601a      	str	r2, [r3, #0]
 8012196:	2300      	movs	r3, #0
 8012198:	603b      	str	r3, [r7, #0]
	__asm volatile
 801219a:	683b      	ldr	r3, [r7, #0]
 801219c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80121a0:	bf00      	nop
 80121a2:	3708      	adds	r7, #8
 80121a4:	46bd      	mov	sp, r7
 80121a6:	bd80      	pop	{r7, pc}
 80121a8:	e000ed04 	.word	0xe000ed04

080121ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80121ac:	b480      	push	{r7}
 80121ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80121b0:	4b0b      	ldr	r3, [pc, #44]	; (80121e0 <vPortSetupTimerInterrupt+0x34>)
 80121b2:	2200      	movs	r2, #0
 80121b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80121b6:	4b0b      	ldr	r3, [pc, #44]	; (80121e4 <vPortSetupTimerInterrupt+0x38>)
 80121b8:	2200      	movs	r2, #0
 80121ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80121bc:	4b0a      	ldr	r3, [pc, #40]	; (80121e8 <vPortSetupTimerInterrupt+0x3c>)
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	4a0a      	ldr	r2, [pc, #40]	; (80121ec <vPortSetupTimerInterrupt+0x40>)
 80121c2:	fba2 2303 	umull	r2, r3, r2, r3
 80121c6:	099b      	lsrs	r3, r3, #6
 80121c8:	4a09      	ldr	r2, [pc, #36]	; (80121f0 <vPortSetupTimerInterrupt+0x44>)
 80121ca:	3b01      	subs	r3, #1
 80121cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80121ce:	4b04      	ldr	r3, [pc, #16]	; (80121e0 <vPortSetupTimerInterrupt+0x34>)
 80121d0:	2207      	movs	r2, #7
 80121d2:	601a      	str	r2, [r3, #0]
}
 80121d4:	bf00      	nop
 80121d6:	46bd      	mov	sp, r7
 80121d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121dc:	4770      	bx	lr
 80121de:	bf00      	nop
 80121e0:	e000e010 	.word	0xe000e010
 80121e4:	e000e018 	.word	0xe000e018
 80121e8:	2000002c 	.word	0x2000002c
 80121ec:	10624dd3 	.word	0x10624dd3
 80121f0:	e000e014 	.word	0xe000e014

080121f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80121f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012204 <vPortEnableVFP+0x10>
 80121f8:	6801      	ldr	r1, [r0, #0]
 80121fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80121fe:	6001      	str	r1, [r0, #0]
 8012200:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012202:	bf00      	nop
 8012204:	e000ed88 	.word	0xe000ed88

08012208 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012208:	b480      	push	{r7}
 801220a:	b085      	sub	sp, #20
 801220c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801220e:	f3ef 8305 	mrs	r3, IPSR
 8012212:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	2b0f      	cmp	r3, #15
 8012218:	d915      	bls.n	8012246 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801221a:	4a18      	ldr	r2, [pc, #96]	; (801227c <vPortValidateInterruptPriority+0x74>)
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	4413      	add	r3, r2
 8012220:	781b      	ldrb	r3, [r3, #0]
 8012222:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012224:	4b16      	ldr	r3, [pc, #88]	; (8012280 <vPortValidateInterruptPriority+0x78>)
 8012226:	781b      	ldrb	r3, [r3, #0]
 8012228:	7afa      	ldrb	r2, [r7, #11]
 801222a:	429a      	cmp	r2, r3
 801222c:	d20b      	bcs.n	8012246 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801222e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012232:	b672      	cpsid	i
 8012234:	f383 8811 	msr	BASEPRI, r3
 8012238:	f3bf 8f6f 	isb	sy
 801223c:	f3bf 8f4f 	dsb	sy
 8012240:	b662      	cpsie	i
 8012242:	607b      	str	r3, [r7, #4]
 8012244:	e7fe      	b.n	8012244 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012246:	4b0f      	ldr	r3, [pc, #60]	; (8012284 <vPortValidateInterruptPriority+0x7c>)
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801224e:	4b0e      	ldr	r3, [pc, #56]	; (8012288 <vPortValidateInterruptPriority+0x80>)
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	429a      	cmp	r2, r3
 8012254:	d90b      	bls.n	801226e <vPortValidateInterruptPriority+0x66>
 8012256:	f04f 0350 	mov.w	r3, #80	; 0x50
 801225a:	b672      	cpsid	i
 801225c:	f383 8811 	msr	BASEPRI, r3
 8012260:	f3bf 8f6f 	isb	sy
 8012264:	f3bf 8f4f 	dsb	sy
 8012268:	b662      	cpsie	i
 801226a:	603b      	str	r3, [r7, #0]
 801226c:	e7fe      	b.n	801226c <vPortValidateInterruptPriority+0x64>
	}
 801226e:	bf00      	nop
 8012270:	3714      	adds	r7, #20
 8012272:	46bd      	mov	sp, r7
 8012274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012278:	4770      	bx	lr
 801227a:	bf00      	nop
 801227c:	e000e3f0 	.word	0xe000e3f0
 8012280:	20000214 	.word	0x20000214
 8012284:	e000ed0c 	.word	0xe000ed0c
 8012288:	20000218 	.word	0x20000218

0801228c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b08a      	sub	sp, #40	; 0x28
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012294:	2300      	movs	r3, #0
 8012296:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012298:	f7fe ffa8 	bl	80111ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801229c:	4b5c      	ldr	r3, [pc, #368]	; (8012410 <pvPortMalloc+0x184>)
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d101      	bne.n	80122a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80122a4:	f000 f91a 	bl	80124dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80122a8:	4b5a      	ldr	r3, [pc, #360]	; (8012414 <pvPortMalloc+0x188>)
 80122aa:	681a      	ldr	r2, [r3, #0]
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	4013      	ands	r3, r2
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	f040 8090 	bne.w	80123d6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d01e      	beq.n	80122fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80122bc:	2208      	movs	r2, #8
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	4413      	add	r3, r2
 80122c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	f003 0307 	and.w	r3, r3, #7
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d015      	beq.n	80122fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	f023 0307 	bic.w	r3, r3, #7
 80122d4:	3308      	adds	r3, #8
 80122d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	f003 0307 	and.w	r3, r3, #7
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d00b      	beq.n	80122fa <pvPortMalloc+0x6e>
 80122e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122e6:	b672      	cpsid	i
 80122e8:	f383 8811 	msr	BASEPRI, r3
 80122ec:	f3bf 8f6f 	isb	sy
 80122f0:	f3bf 8f4f 	dsb	sy
 80122f4:	b662      	cpsie	i
 80122f6:	617b      	str	r3, [r7, #20]
 80122f8:	e7fe      	b.n	80122f8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d06a      	beq.n	80123d6 <pvPortMalloc+0x14a>
 8012300:	4b45      	ldr	r3, [pc, #276]	; (8012418 <pvPortMalloc+0x18c>)
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	687a      	ldr	r2, [r7, #4]
 8012306:	429a      	cmp	r2, r3
 8012308:	d865      	bhi.n	80123d6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801230a:	4b44      	ldr	r3, [pc, #272]	; (801241c <pvPortMalloc+0x190>)
 801230c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801230e:	4b43      	ldr	r3, [pc, #268]	; (801241c <pvPortMalloc+0x190>)
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012314:	e004      	b.n	8012320 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8012316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012318:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012322:	685b      	ldr	r3, [r3, #4]
 8012324:	687a      	ldr	r2, [r7, #4]
 8012326:	429a      	cmp	r2, r3
 8012328:	d903      	bls.n	8012332 <pvPortMalloc+0xa6>
 801232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d1f1      	bne.n	8012316 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012332:	4b37      	ldr	r3, [pc, #220]	; (8012410 <pvPortMalloc+0x184>)
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012338:	429a      	cmp	r2, r3
 801233a:	d04c      	beq.n	80123d6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801233c:	6a3b      	ldr	r3, [r7, #32]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	2208      	movs	r2, #8
 8012342:	4413      	add	r3, r2
 8012344:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012348:	681a      	ldr	r2, [r3, #0]
 801234a:	6a3b      	ldr	r3, [r7, #32]
 801234c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012350:	685a      	ldr	r2, [r3, #4]
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	1ad2      	subs	r2, r2, r3
 8012356:	2308      	movs	r3, #8
 8012358:	005b      	lsls	r3, r3, #1
 801235a:	429a      	cmp	r2, r3
 801235c:	d920      	bls.n	80123a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801235e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	4413      	add	r3, r2
 8012364:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012366:	69bb      	ldr	r3, [r7, #24]
 8012368:	f003 0307 	and.w	r3, r3, #7
 801236c:	2b00      	cmp	r3, #0
 801236e:	d00b      	beq.n	8012388 <pvPortMalloc+0xfc>
 8012370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012374:	b672      	cpsid	i
 8012376:	f383 8811 	msr	BASEPRI, r3
 801237a:	f3bf 8f6f 	isb	sy
 801237e:	f3bf 8f4f 	dsb	sy
 8012382:	b662      	cpsie	i
 8012384:	613b      	str	r3, [r7, #16]
 8012386:	e7fe      	b.n	8012386 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801238a:	685a      	ldr	r2, [r3, #4]
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	1ad2      	subs	r2, r2, r3
 8012390:	69bb      	ldr	r3, [r7, #24]
 8012392:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012396:	687a      	ldr	r2, [r7, #4]
 8012398:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801239a:	69b8      	ldr	r0, [r7, #24]
 801239c:	f000 f900 	bl	80125a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80123a0:	4b1d      	ldr	r3, [pc, #116]	; (8012418 <pvPortMalloc+0x18c>)
 80123a2:	681a      	ldr	r2, [r3, #0]
 80123a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123a6:	685b      	ldr	r3, [r3, #4]
 80123a8:	1ad3      	subs	r3, r2, r3
 80123aa:	4a1b      	ldr	r2, [pc, #108]	; (8012418 <pvPortMalloc+0x18c>)
 80123ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80123ae:	4b1a      	ldr	r3, [pc, #104]	; (8012418 <pvPortMalloc+0x18c>)
 80123b0:	681a      	ldr	r2, [r3, #0]
 80123b2:	4b1b      	ldr	r3, [pc, #108]	; (8012420 <pvPortMalloc+0x194>)
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	429a      	cmp	r2, r3
 80123b8:	d203      	bcs.n	80123c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80123ba:	4b17      	ldr	r3, [pc, #92]	; (8012418 <pvPortMalloc+0x18c>)
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	4a18      	ldr	r2, [pc, #96]	; (8012420 <pvPortMalloc+0x194>)
 80123c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80123c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123c4:	685a      	ldr	r2, [r3, #4]
 80123c6:	4b13      	ldr	r3, [pc, #76]	; (8012414 <pvPortMalloc+0x188>)
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	431a      	orrs	r2, r3
 80123cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80123d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123d2:	2200      	movs	r2, #0
 80123d4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80123d6:	f7fe ff17 	bl	8011208 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80123da:	69fb      	ldr	r3, [r7, #28]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d101      	bne.n	80123e4 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80123e0:	f000 fa2a 	bl	8012838 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80123e4:	69fb      	ldr	r3, [r7, #28]
 80123e6:	f003 0307 	and.w	r3, r3, #7
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d00b      	beq.n	8012406 <pvPortMalloc+0x17a>
 80123ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123f2:	b672      	cpsid	i
 80123f4:	f383 8811 	msr	BASEPRI, r3
 80123f8:	f3bf 8f6f 	isb	sy
 80123fc:	f3bf 8f4f 	dsb	sy
 8012400:	b662      	cpsie	i
 8012402:	60fb      	str	r3, [r7, #12]
 8012404:	e7fe      	b.n	8012404 <pvPortMalloc+0x178>
	return pvReturn;
 8012406:	69fb      	ldr	r3, [r7, #28]
}
 8012408:	4618      	mov	r0, r3
 801240a:	3728      	adds	r7, #40	; 0x28
 801240c:	46bd      	mov	sp, r7
 801240e:	bd80      	pop	{r7, pc}
 8012410:	20008224 	.word	0x20008224
 8012414:	20008230 	.word	0x20008230
 8012418:	20008228 	.word	0x20008228
 801241c:	2000821c 	.word	0x2000821c
 8012420:	2000822c 	.word	0x2000822c

08012424 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012424:	b580      	push	{r7, lr}
 8012426:	b086      	sub	sp, #24
 8012428:	af00      	add	r7, sp, #0
 801242a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d04a      	beq.n	80124cc <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012436:	2308      	movs	r3, #8
 8012438:	425b      	negs	r3, r3
 801243a:	697a      	ldr	r2, [r7, #20]
 801243c:	4413      	add	r3, r2
 801243e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012440:	697b      	ldr	r3, [r7, #20]
 8012442:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012444:	693b      	ldr	r3, [r7, #16]
 8012446:	685a      	ldr	r2, [r3, #4]
 8012448:	4b22      	ldr	r3, [pc, #136]	; (80124d4 <vPortFree+0xb0>)
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	4013      	ands	r3, r2
 801244e:	2b00      	cmp	r3, #0
 8012450:	d10b      	bne.n	801246a <vPortFree+0x46>
 8012452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012456:	b672      	cpsid	i
 8012458:	f383 8811 	msr	BASEPRI, r3
 801245c:	f3bf 8f6f 	isb	sy
 8012460:	f3bf 8f4f 	dsb	sy
 8012464:	b662      	cpsie	i
 8012466:	60fb      	str	r3, [r7, #12]
 8012468:	e7fe      	b.n	8012468 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801246a:	693b      	ldr	r3, [r7, #16]
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d00b      	beq.n	801248a <vPortFree+0x66>
 8012472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012476:	b672      	cpsid	i
 8012478:	f383 8811 	msr	BASEPRI, r3
 801247c:	f3bf 8f6f 	isb	sy
 8012480:	f3bf 8f4f 	dsb	sy
 8012484:	b662      	cpsie	i
 8012486:	60bb      	str	r3, [r7, #8]
 8012488:	e7fe      	b.n	8012488 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801248a:	693b      	ldr	r3, [r7, #16]
 801248c:	685a      	ldr	r2, [r3, #4]
 801248e:	4b11      	ldr	r3, [pc, #68]	; (80124d4 <vPortFree+0xb0>)
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	4013      	ands	r3, r2
 8012494:	2b00      	cmp	r3, #0
 8012496:	d019      	beq.n	80124cc <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012498:	693b      	ldr	r3, [r7, #16]
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d115      	bne.n	80124cc <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80124a0:	693b      	ldr	r3, [r7, #16]
 80124a2:	685a      	ldr	r2, [r3, #4]
 80124a4:	4b0b      	ldr	r3, [pc, #44]	; (80124d4 <vPortFree+0xb0>)
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	43db      	mvns	r3, r3
 80124aa:	401a      	ands	r2, r3
 80124ac:	693b      	ldr	r3, [r7, #16]
 80124ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80124b0:	f7fe fe9c 	bl	80111ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80124b4:	693b      	ldr	r3, [r7, #16]
 80124b6:	685a      	ldr	r2, [r3, #4]
 80124b8:	4b07      	ldr	r3, [pc, #28]	; (80124d8 <vPortFree+0xb4>)
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	4413      	add	r3, r2
 80124be:	4a06      	ldr	r2, [pc, #24]	; (80124d8 <vPortFree+0xb4>)
 80124c0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80124c2:	6938      	ldr	r0, [r7, #16]
 80124c4:	f000 f86c 	bl	80125a0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80124c8:	f7fe fe9e 	bl	8011208 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80124cc:	bf00      	nop
 80124ce:	3718      	adds	r7, #24
 80124d0:	46bd      	mov	sp, r7
 80124d2:	bd80      	pop	{r7, pc}
 80124d4:	20008230 	.word	0x20008230
 80124d8:	20008228 	.word	0x20008228

080124dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80124dc:	b480      	push	{r7}
 80124de:	b085      	sub	sp, #20
 80124e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80124e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80124e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80124e8:	4b27      	ldr	r3, [pc, #156]	; (8012588 <prvHeapInit+0xac>)
 80124ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	f003 0307 	and.w	r3, r3, #7
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d00c      	beq.n	8012510 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	3307      	adds	r3, #7
 80124fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	f023 0307 	bic.w	r3, r3, #7
 8012502:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012504:	68ba      	ldr	r2, [r7, #8]
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	1ad3      	subs	r3, r2, r3
 801250a:	4a1f      	ldr	r2, [pc, #124]	; (8012588 <prvHeapInit+0xac>)
 801250c:	4413      	add	r3, r2
 801250e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012514:	4a1d      	ldr	r2, [pc, #116]	; (801258c <prvHeapInit+0xb0>)
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801251a:	4b1c      	ldr	r3, [pc, #112]	; (801258c <prvHeapInit+0xb0>)
 801251c:	2200      	movs	r2, #0
 801251e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	68ba      	ldr	r2, [r7, #8]
 8012524:	4413      	add	r3, r2
 8012526:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012528:	2208      	movs	r2, #8
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	1a9b      	subs	r3, r3, r2
 801252e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	f023 0307 	bic.w	r3, r3, #7
 8012536:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	4a15      	ldr	r2, [pc, #84]	; (8012590 <prvHeapInit+0xb4>)
 801253c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801253e:	4b14      	ldr	r3, [pc, #80]	; (8012590 <prvHeapInit+0xb4>)
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	2200      	movs	r2, #0
 8012544:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012546:	4b12      	ldr	r3, [pc, #72]	; (8012590 <prvHeapInit+0xb4>)
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	2200      	movs	r2, #0
 801254c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012552:	683b      	ldr	r3, [r7, #0]
 8012554:	68fa      	ldr	r2, [r7, #12]
 8012556:	1ad2      	subs	r2, r2, r3
 8012558:	683b      	ldr	r3, [r7, #0]
 801255a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801255c:	4b0c      	ldr	r3, [pc, #48]	; (8012590 <prvHeapInit+0xb4>)
 801255e:	681a      	ldr	r2, [r3, #0]
 8012560:	683b      	ldr	r3, [r7, #0]
 8012562:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012564:	683b      	ldr	r3, [r7, #0]
 8012566:	685b      	ldr	r3, [r3, #4]
 8012568:	4a0a      	ldr	r2, [pc, #40]	; (8012594 <prvHeapInit+0xb8>)
 801256a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801256c:	683b      	ldr	r3, [r7, #0]
 801256e:	685b      	ldr	r3, [r3, #4]
 8012570:	4a09      	ldr	r2, [pc, #36]	; (8012598 <prvHeapInit+0xbc>)
 8012572:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012574:	4b09      	ldr	r3, [pc, #36]	; (801259c <prvHeapInit+0xc0>)
 8012576:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801257a:	601a      	str	r2, [r3, #0]
}
 801257c:	bf00      	nop
 801257e:	3714      	adds	r7, #20
 8012580:	46bd      	mov	sp, r7
 8012582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012586:	4770      	bx	lr
 8012588:	2000021c 	.word	0x2000021c
 801258c:	2000821c 	.word	0x2000821c
 8012590:	20008224 	.word	0x20008224
 8012594:	2000822c 	.word	0x2000822c
 8012598:	20008228 	.word	0x20008228
 801259c:	20008230 	.word	0x20008230

080125a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80125a0:	b480      	push	{r7}
 80125a2:	b085      	sub	sp, #20
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80125a8:	4b28      	ldr	r3, [pc, #160]	; (801264c <prvInsertBlockIntoFreeList+0xac>)
 80125aa:	60fb      	str	r3, [r7, #12]
 80125ac:	e002      	b.n	80125b4 <prvInsertBlockIntoFreeList+0x14>
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	60fb      	str	r3, [r7, #12]
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	687a      	ldr	r2, [r7, #4]
 80125ba:	429a      	cmp	r2, r3
 80125bc:	d8f7      	bhi.n	80125ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	685b      	ldr	r3, [r3, #4]
 80125c6:	68ba      	ldr	r2, [r7, #8]
 80125c8:	4413      	add	r3, r2
 80125ca:	687a      	ldr	r2, [r7, #4]
 80125cc:	429a      	cmp	r2, r3
 80125ce:	d108      	bne.n	80125e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	685a      	ldr	r2, [r3, #4]
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	685b      	ldr	r3, [r3, #4]
 80125d8:	441a      	add	r2, r3
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	685b      	ldr	r3, [r3, #4]
 80125ea:	68ba      	ldr	r2, [r7, #8]
 80125ec:	441a      	add	r2, r3
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	429a      	cmp	r2, r3
 80125f4:	d118      	bne.n	8012628 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	681a      	ldr	r2, [r3, #0]
 80125fa:	4b15      	ldr	r3, [pc, #84]	; (8012650 <prvInsertBlockIntoFreeList+0xb0>)
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	429a      	cmp	r2, r3
 8012600:	d00d      	beq.n	801261e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	685a      	ldr	r2, [r3, #4]
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	685b      	ldr	r3, [r3, #4]
 801260c:	441a      	add	r2, r3
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	681a      	ldr	r2, [r3, #0]
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	601a      	str	r2, [r3, #0]
 801261c:	e008      	b.n	8012630 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801261e:	4b0c      	ldr	r3, [pc, #48]	; (8012650 <prvInsertBlockIntoFreeList+0xb0>)
 8012620:	681a      	ldr	r2, [r3, #0]
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	601a      	str	r2, [r3, #0]
 8012626:	e003      	b.n	8012630 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	681a      	ldr	r2, [r3, #0]
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012630:	68fa      	ldr	r2, [r7, #12]
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	429a      	cmp	r2, r3
 8012636:	d002      	beq.n	801263e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	687a      	ldr	r2, [r7, #4]
 801263c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801263e:	bf00      	nop
 8012640:	3714      	adds	r7, #20
 8012642:	46bd      	mov	sp, r7
 8012644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012648:	4770      	bx	lr
 801264a:	bf00      	nop
 801264c:	2000821c 	.word	0x2000821c
 8012650:	20008224 	.word	0x20008224

08012654 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8012654:	b580      	push	{r7, lr}
 8012656:	b082      	sub	sp, #8
 8012658:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801265a:	2300      	movs	r3, #0
 801265c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801265e:	f000 f896 	bl	801278e <BSP_SD_IsDetected>
 8012662:	4603      	mov	r3, r0
 8012664:	2b01      	cmp	r3, #1
 8012666:	d001      	beq.n	801266c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8012668:	2302      	movs	r3, #2
 801266a:	e012      	b.n	8012692 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 801266c:	480b      	ldr	r0, [pc, #44]	; (801269c <BSP_SD_Init+0x48>)
 801266e:	f7f3 fced 	bl	800604c <HAL_SD_Init>
 8012672:	4603      	mov	r3, r0
 8012674:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8012676:	79fb      	ldrb	r3, [r7, #7]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d109      	bne.n	8012690 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 801267c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8012680:	4806      	ldr	r0, [pc, #24]	; (801269c <BSP_SD_Init+0x48>)
 8012682:	f7f4 fac1 	bl	8006c08 <HAL_SD_ConfigWideBusOperation>
 8012686:	4603      	mov	r3, r0
 8012688:	2b00      	cmp	r3, #0
 801268a:	d001      	beq.n	8012690 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801268c:	2301      	movs	r3, #1
 801268e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8012690:	79fb      	ldrb	r3, [r7, #7]
}
 8012692:	4618      	mov	r0, r3
 8012694:	3708      	adds	r7, #8
 8012696:	46bd      	mov	sp, r7
 8012698:	bd80      	pop	{r7, pc}
 801269a:	bf00      	nop
 801269c:	20008b54 	.word	0x20008b54

080126a0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b086      	sub	sp, #24
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	60f8      	str	r0, [r7, #12]
 80126a8:	60b9      	str	r1, [r7, #8]
 80126aa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80126ac:	2300      	movs	r3, #0
 80126ae:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	68ba      	ldr	r2, [r7, #8]
 80126b4:	68f9      	ldr	r1, [r7, #12]
 80126b6:	4806      	ldr	r0, [pc, #24]	; (80126d0 <BSP_SD_ReadBlocks_DMA+0x30>)
 80126b8:	f7f3 fd58 	bl	800616c <HAL_SD_ReadBlocks_DMA>
 80126bc:	4603      	mov	r3, r0
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d001      	beq.n	80126c6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80126c2:	2301      	movs	r3, #1
 80126c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 80126c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80126c8:	4618      	mov	r0, r3
 80126ca:	3718      	adds	r7, #24
 80126cc:	46bd      	mov	sp, r7
 80126ce:	bd80      	pop	{r7, pc}
 80126d0:	20008b54 	.word	0x20008b54

080126d4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80126d4:	b580      	push	{r7, lr}
 80126d6:	b086      	sub	sp, #24
 80126d8:	af00      	add	r7, sp, #0
 80126da:	60f8      	str	r0, [r7, #12]
 80126dc:	60b9      	str	r1, [r7, #8]
 80126de:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80126e0:	2300      	movs	r3, #0
 80126e2:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	68ba      	ldr	r2, [r7, #8]
 80126e8:	68f9      	ldr	r1, [r7, #12]
 80126ea:	4806      	ldr	r0, [pc, #24]	; (8012704 <BSP_SD_WriteBlocks_DMA+0x30>)
 80126ec:	f7f3 fe0c 	bl	8006308 <HAL_SD_WriteBlocks_DMA>
 80126f0:	4603      	mov	r3, r0
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d001      	beq.n	80126fa <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80126f6:	2301      	movs	r3, #1
 80126f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 80126fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80126fc:	4618      	mov	r0, r3
 80126fe:	3718      	adds	r7, #24
 8012700:	46bd      	mov	sp, r7
 8012702:	bd80      	pop	{r7, pc}
 8012704:	20008b54 	.word	0x20008b54

08012708 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8012708:	b580      	push	{r7, lr}
 801270a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801270c:	4805      	ldr	r0, [pc, #20]	; (8012724 <BSP_SD_GetCardState+0x1c>)
 801270e:	f7f4 faf7 	bl	8006d00 <HAL_SD_GetCardState>
 8012712:	4603      	mov	r3, r0
 8012714:	2b04      	cmp	r3, #4
 8012716:	bf14      	ite	ne
 8012718:	2301      	movne	r3, #1
 801271a:	2300      	moveq	r3, #0
 801271c:	b2db      	uxtb	r3, r3
}
 801271e:	4618      	mov	r0, r3
 8012720:	bd80      	pop	{r7, pc}
 8012722:	bf00      	nop
 8012724:	20008b54 	.word	0x20008b54

08012728 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8012728:	b580      	push	{r7, lr}
 801272a:	b082      	sub	sp, #8
 801272c:	af00      	add	r7, sp, #0
 801272e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8012730:	6879      	ldr	r1, [r7, #4]
 8012732:	4803      	ldr	r0, [pc, #12]	; (8012740 <BSP_SD_GetCardInfo+0x18>)
 8012734:	f7f4 fa3c 	bl	8006bb0 <HAL_SD_GetCardInfo>
}
 8012738:	bf00      	nop
 801273a:	3708      	adds	r7, #8
 801273c:	46bd      	mov	sp, r7
 801273e:	bd80      	pop	{r7, pc}
 8012740:	20008b54 	.word	0x20008b54

08012744 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8012744:	b580      	push	{r7, lr}
 8012746:	b082      	sub	sp, #8
 8012748:	af00      	add	r7, sp, #0
 801274a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 801274c:	f000 f818 	bl	8012780 <BSP_SD_AbortCallback>
}
 8012750:	bf00      	nop
 8012752:	3708      	adds	r7, #8
 8012754:	46bd      	mov	sp, r7
 8012756:	bd80      	pop	{r7, pc}

08012758 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012758:	b580      	push	{r7, lr}
 801275a:	b082      	sub	sp, #8
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8012760:	f001 fe1e 	bl	80143a0 <BSP_SD_WriteCpltCallback>
}
 8012764:	bf00      	nop
 8012766:	3708      	adds	r7, #8
 8012768:	46bd      	mov	sp, r7
 801276a:	bd80      	pop	{r7, pc}

0801276c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801276c:	b580      	push	{r7, lr}
 801276e:	b082      	sub	sp, #8
 8012770:	af00      	add	r7, sp, #0
 8012772:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8012774:	f001 fe22 	bl	80143bc <BSP_SD_ReadCpltCallback>
}
 8012778:	bf00      	nop
 801277a:	3708      	adds	r7, #8
 801277c:	46bd      	mov	sp, r7
 801277e:	bd80      	pop	{r7, pc}

08012780 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 8012780:	b480      	push	{r7}
 8012782:	af00      	add	r7, sp, #0

}
 8012784:	bf00      	nop
 8012786:	46bd      	mov	sp, r7
 8012788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278c:	4770      	bx	lr

0801278e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 801278e:	b580      	push	{r7, lr}
 8012790:	b082      	sub	sp, #8
 8012792:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8012794:	2301      	movs	r3, #1
 8012796:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8012798:	f000 f826 	bl	80127e8 <BSP_PlatformIsDetected>
 801279c:	4603      	mov	r3, r0
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d101      	bne.n	80127a6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80127a2:	2300      	movs	r3, #0
 80127a4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80127a6:	79fb      	ldrb	r3, [r7, #7]
 80127a8:	b2db      	uxtb	r3, r3
}
 80127aa:	4618      	mov	r0, r3
 80127ac:	3708      	adds	r7, #8
 80127ae:	46bd      	mov	sp, r7
 80127b0:	bd80      	pop	{r7, pc}
	...

080127b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80127b4:	b580      	push	{r7, lr}
 80127b6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80127b8:	4904      	ldr	r1, [pc, #16]	; (80127cc <MX_FATFS_Init+0x18>)
 80127ba:	4805      	ldr	r0, [pc, #20]	; (80127d0 <MX_FATFS_Init+0x1c>)
 80127bc:	f7fd f938 	bl	800fa30 <FATFS_LinkDriver>
 80127c0:	4603      	mov	r3, r0
 80127c2:	461a      	mov	r2, r3
 80127c4:	4b03      	ldr	r3, [pc, #12]	; (80127d4 <MX_FATFS_Init+0x20>)
 80127c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80127c8:	bf00      	nop
 80127ca:	bd80      	pop	{r7, pc}
 80127cc:	20008498 	.word	0x20008498
 80127d0:	08015f3c 	.word	0x08015f3c
 80127d4:	20008494 	.word	0x20008494

080127d8 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80127d8:	b480      	push	{r7}
 80127da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80127dc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 80127de:	4618      	mov	r0, r3
 80127e0:	46bd      	mov	sp, r7
 80127e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e6:	4770      	bx	lr

080127e8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80127e8:	b580      	push	{r7, lr}
 80127ea:	b082      	sub	sp, #8
 80127ec:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80127ee:	2301      	movs	r3, #1
 80127f0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80127f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80127f6:	4806      	ldr	r0, [pc, #24]	; (8012810 <BSP_PlatformIsDetected+0x28>)
 80127f8:	f7ef fac4 	bl	8001d84 <HAL_GPIO_ReadPin>
 80127fc:	4603      	mov	r3, r0
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d001      	beq.n	8012806 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8012802:	2300      	movs	r3, #0
 8012804:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8012806:	79fb      	ldrb	r3, [r7, #7]
}  
 8012808:	4618      	mov	r0, r3
 801280a:	3708      	adds	r7, #8
 801280c:	46bd      	mov	sp, r7
 801280e:	bd80      	pop	{r7, pc}
 8012810:	40020800 	.word	0x40020800

08012814 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8012814:	b480      	push	{r7}
 8012816:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8012818:	bf00      	nop
 801281a:	46bd      	mov	sp, r7
 801281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012820:	4770      	bx	lr

08012822 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8012822:	b480      	push	{r7}
 8012824:	b083      	sub	sp, #12
 8012826:	af00      	add	r7, sp, #0
 8012828:	6078      	str	r0, [r7, #4]
 801282a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 801282c:	bf00      	nop
 801282e:	370c      	adds	r7, #12
 8012830:	46bd      	mov	sp, r7
 8012832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012836:	4770      	bx	lr

08012838 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8012838:	b480      	push	{r7}
 801283a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 801283c:	bf00      	nop
 801283e:	46bd      	mov	sp, r7
 8012840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012844:	4770      	bx	lr
	...

08012848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8012848:	b5b0      	push	{r4, r5, r7, lr}
 801284a:	b08c      	sub	sp, #48	; 0x30
 801284c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 801284e:	f7ed fe5f 	bl	8000510 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8012852:	f000 f871 	bl	8012938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8012856:	f001 f851 	bl	80138fc <MX_GPIO_Init>
  MX_DMA_Init();
 801285a:	f000 ffd9 	bl	8013810 <MX_DMA_Init>
  MX_ADC3_Init();
 801285e:	f000 f92b 	bl	8012ab8 <MX_ADC3_Init>
  MX_CRC_Init();
 8012862:	f000 f97b 	bl	8012b5c <MX_CRC_Init>
  MX_DCMI_Init();
 8012866:	f000 f99b 	bl	8012ba0 <MX_DCMI_Init>
  MX_DMA2D_Init();
 801286a:	f000 f9cd 	bl	8012c08 <MX_DMA2D_Init>
  MX_FMC_Init();
 801286e:	f000 fff5 	bl	801385c <MX_FMC_Init>
  MX_I2C1_Init();
 8012872:	f000 f9fb 	bl	8012c6c <MX_I2C1_Init>
  MX_I2C3_Init();
 8012876:	f000 fa39 	bl	8012cec <MX_I2C3_Init>
  MX_LTDC_Init();
 801287a:	f000 fa77 	bl	8012d6c <MX_LTDC_Init>
  MX_QUADSPI_Init();
 801287e:	f000 faf7 	bl	8012e70 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8012882:	f000 fb21 	bl	8012ec8 <MX_RTC_Init>
  MX_SAI2_Init();
 8012886:	f000 fbc7 	bl	8013018 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 801288a:	f000 fc6d 	bl	8013168 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 801288e:	f000 fc8b 	bl	80131a8 <MX_SPDIFRX_Init>
  MX_TIM1_Init();
 8012892:	f000 fcb9 	bl	8013208 <MX_TIM1_Init>
  MX_TIM2_Init();
 8012896:	f000 fd63 	bl	8013360 <MX_TIM2_Init>
  MX_TIM3_Init();
 801289a:	f000 fdd7 	bl	801344c <MX_TIM3_Init>
  MX_TIM5_Init();
 801289e:	f000 fe4b 	bl	8013538 <MX_TIM5_Init>
  MX_TIM8_Init();
 80128a2:	f000 febf 	bl	8013624 <MX_TIM8_Init>
  MX_TIM12_Init();
 80128a6:	f000 ff0f 	bl	80136c8 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 80128aa:	f000 ff51 	bl	8013750 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80128ae:	f000 ff7f 	bl	80137b0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  b1PushCounter = 0;
 80128b2:	4b1a      	ldr	r3, [pc, #104]	; (801291c <main+0xd4>)
 80128b4:	2200      	movs	r2, #0
 80128b6:	701a      	strb	r2, [r3, #0]
  b1LongPushCounter = 0;
 80128b8:	4b19      	ldr	r3, [pc, #100]	; (8012920 <main+0xd8>)
 80128ba:	2200      	movs	r2, #0
 80128bc:	801a      	strh	r2, [r3, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of sdReadBinarySem */
  osSemaphoreDef(sdReadBinarySem);
 80128be:	2300      	movs	r3, #0
 80128c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sdReadBinarySemHandle = osSemaphoreCreate(osSemaphore(sdReadBinarySem), 1);
 80128c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80128c6:	2101      	movs	r1, #1
 80128c8:	4618      	mov	r0, r3
 80128ca:	f7fd f992 	bl	800fbf2 <osSemaphoreCreate>
 80128ce:	4602      	mov	r2, r0
 80128d0:	4b14      	ldr	r3, [pc, #80]	; (8012924 <main+0xdc>)
 80128d2:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 80128d4:	4b14      	ldr	r3, [pc, #80]	; (8012928 <main+0xe0>)
 80128d6:	f107 0418 	add.w	r4, r7, #24
 80128da:	461d      	mov	r5, r3
 80128dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80128de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80128e0:	682b      	ldr	r3, [r5, #0]
 80128e2:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80128e4:	f107 0318 	add.w	r3, r7, #24
 80128e8:	2100      	movs	r1, #0
 80128ea:	4618      	mov	r0, r3
 80128ec:	f7fd f946 	bl	800fb7c <osThreadCreate>
 80128f0:	4602      	mov	r2, r0
 80128f2:	4b0e      	ldr	r3, [pc, #56]	; (801292c <main+0xe4>)
 80128f4:	601a      	str	r2, [r3, #0]

  /* definition and creation of sdReadTask */
  osThreadDef(sdReadTask, StartSdReadTask, osPriorityAboveNormal, 0, 1024);
 80128f6:	4b0e      	ldr	r3, [pc, #56]	; (8012930 <main+0xe8>)
 80128f8:	1d3c      	adds	r4, r7, #4
 80128fa:	461d      	mov	r5, r3
 80128fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80128fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012900:	682b      	ldr	r3, [r5, #0]
 8012902:	6023      	str	r3, [r4, #0]
  sdReadTaskHandle = osThreadCreate(osThread(sdReadTask), NULL);
 8012904:	1d3b      	adds	r3, r7, #4
 8012906:	2100      	movs	r1, #0
 8012908:	4618      	mov	r0, r3
 801290a:	f7fd f937 	bl	800fb7c <osThreadCreate>
 801290e:	4602      	mov	r2, r0
 8012910:	4b08      	ldr	r3, [pc, #32]	; (8012934 <main+0xec>)
 8012912:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8012914:	f7fd f90f 	bl	800fb36 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8012918:	e7fe      	b.n	8012918 <main+0xd0>
 801291a:	bf00      	nop
 801291c:	200098bc 	.word	0x200098bc
 8012920:	20008bd8 	.word	0x20008bd8
 8012924:	200097c4 	.word	0x200097c4
 8012928:	08015e28 	.word	0x08015e28
 801292c:	20008984 	.word	0x20008984
 8012930:	08015e48 	.word	0x08015e48
 8012934:	20008d04 	.word	0x20008d04

08012938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8012938:	b580      	push	{r7, lr}
 801293a:	b0b4      	sub	sp, #208	; 0xd0
 801293c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801293e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8012942:	2230      	movs	r2, #48	; 0x30
 8012944:	2100      	movs	r1, #0
 8012946:	4618      	mov	r0, r3
 8012948:	f003 f95d 	bl	8015c06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801294c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012950:	2200      	movs	r2, #0
 8012952:	601a      	str	r2, [r3, #0]
 8012954:	605a      	str	r2, [r3, #4]
 8012956:	609a      	str	r2, [r3, #8]
 8012958:	60da      	str	r2, [r3, #12]
 801295a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801295c:	f107 0308 	add.w	r3, r7, #8
 8012960:	2284      	movs	r2, #132	; 0x84
 8012962:	2100      	movs	r1, #0
 8012964:	4618      	mov	r0, r3
 8012966:	f003 f94e 	bl	8015c06 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 801296a:	f7f1 fb43 	bl	8003ff4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 801296e:	4b4f      	ldr	r3, [pc, #316]	; (8012aac <SystemClock_Config+0x174>)
 8012970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012972:	4a4e      	ldr	r2, [pc, #312]	; (8012aac <SystemClock_Config+0x174>)
 8012974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012978:	6413      	str	r3, [r2, #64]	; 0x40
 801297a:	4b4c      	ldr	r3, [pc, #304]	; (8012aac <SystemClock_Config+0x174>)
 801297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801297e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012982:	607b      	str	r3, [r7, #4]
 8012984:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8012986:	4b4a      	ldr	r3, [pc, #296]	; (8012ab0 <SystemClock_Config+0x178>)
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	4a49      	ldr	r2, [pc, #292]	; (8012ab0 <SystemClock_Config+0x178>)
 801298c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012990:	6013      	str	r3, [r2, #0]
 8012992:	4b47      	ldr	r3, [pc, #284]	; (8012ab0 <SystemClock_Config+0x178>)
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801299a:	603b      	str	r3, [r7, #0]
 801299c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 801299e:	2309      	movs	r3, #9
 80129a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80129a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80129a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80129ac:	2301      	movs	r3, #1
 80129ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80129b2:	2302      	movs	r3, #2
 80129b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80129b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80129bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80129c0:	2319      	movs	r3, #25
 80129c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 80129c6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80129ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80129ce:	2302      	movs	r3, #2
 80129d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80129d4:	2309      	movs	r3, #9
 80129d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80129da:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80129de:	4618      	mov	r0, r3
 80129e0:	f7f1 fc38 	bl	8004254 <HAL_RCC_OscConfig>
 80129e4:	4603      	mov	r3, r0
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d001      	beq.n	80129ee <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80129ea:	f001 facd 	bl	8013f88 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80129ee:	f7f1 fb11 	bl	8004014 <HAL_PWREx_EnableOverDrive>
 80129f2:	4603      	mov	r3, r0
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d001      	beq.n	80129fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80129f8:	f001 fac6 	bl	8013f88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80129fc:	230f      	movs	r3, #15
 80129fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8012a02:	2302      	movs	r3, #2
 8012a04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8012a08:	2300      	movs	r3, #0
 8012a0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8012a0e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8012a12:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8012a16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012a1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8012a1e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012a22:	2106      	movs	r1, #6
 8012a24:	4618      	mov	r0, r3
 8012a26:	f7f1 fe85 	bl	8004734 <HAL_RCC_ClockConfig>
 8012a2a:	4603      	mov	r3, r0
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d001      	beq.n	8012a34 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8012a30:	f001 faaa 	bl	8013f88 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8012a34:	4b1f      	ldr	r3, [pc, #124]	; (8012ab4 <SystemClock_Config+0x17c>)
 8012a36:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8012a38:	2364      	movs	r3, #100	; 0x64
 8012a3a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8012a3c:	2302      	movs	r3, #2
 8012a3e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8012a40:	2302      	movs	r3, #2
 8012a42:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8012a44:	2302      	movs	r3, #2
 8012a46:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8012a48:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8012a4c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8012a4e:	2305      	movs	r3, #5
 8012a50:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8012a52:	2302      	movs	r3, #2
 8012a54:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8012a56:	2303      	movs	r3, #3
 8012a58:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8012a5a:	2301      	movs	r3, #1
 8012a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8012a5e:	2301      	movs	r3, #1
 8012a60:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8012a62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012a66:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8012a68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012a6c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8012a6e:	2300      	movs	r3, #0
 8012a70:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8012a72:	2300      	movs	r3, #0
 8012a74:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8012a76:	2300      	movs	r3, #0
 8012a78:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8012a7e:	2300      	movs	r3, #0
 8012a80:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8012a82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012a86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8012a8a:	2300      	movs	r3, #0
 8012a8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012a90:	f107 0308 	add.w	r3, r7, #8
 8012a94:	4618      	mov	r0, r3
 8012a96:	f7f2 f84d 	bl	8004b34 <HAL_RCCEx_PeriphCLKConfig>
 8012a9a:	4603      	mov	r3, r0
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d001      	beq.n	8012aa4 <SystemClock_Config+0x16c>
  {
    Error_Handler();
 8012aa0:	f001 fa72 	bl	8013f88 <Error_Handler>
  }
}
 8012aa4:	bf00      	nop
 8012aa6:	37d0      	adds	r7, #208	; 0xd0
 8012aa8:	46bd      	mov	sp, r7
 8012aaa:	bd80      	pop	{r7, pc}
 8012aac:	40023800 	.word	0x40023800
 8012ab0:	40007000 	.word	0x40007000
 8012ab4:	01b14868 	.word	0x01b14868

08012ab8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	b084      	sub	sp, #16
 8012abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8012abe:	463b      	mov	r3, r7
 8012ac0:	2200      	movs	r2, #0
 8012ac2:	601a      	str	r2, [r3, #0]
 8012ac4:	605a      	str	r2, [r3, #4]
 8012ac6:	609a      	str	r2, [r3, #8]
 8012ac8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8012aca:	4b21      	ldr	r3, [pc, #132]	; (8012b50 <MX_ADC3_Init+0x98>)
 8012acc:	4a21      	ldr	r2, [pc, #132]	; (8012b54 <MX_ADC3_Init+0x9c>)
 8012ace:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8012ad0:	4b1f      	ldr	r3, [pc, #124]	; (8012b50 <MX_ADC3_Init+0x98>)
 8012ad2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8012ad6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8012ad8:	4b1d      	ldr	r3, [pc, #116]	; (8012b50 <MX_ADC3_Init+0x98>)
 8012ada:	2200      	movs	r2, #0
 8012adc:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8012ade:	4b1c      	ldr	r3, [pc, #112]	; (8012b50 <MX_ADC3_Init+0x98>)
 8012ae0:	2200      	movs	r2, #0
 8012ae2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8012ae4:	4b1a      	ldr	r3, [pc, #104]	; (8012b50 <MX_ADC3_Init+0x98>)
 8012ae6:	2200      	movs	r2, #0
 8012ae8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8012aea:	4b19      	ldr	r3, [pc, #100]	; (8012b50 <MX_ADC3_Init+0x98>)
 8012aec:	2200      	movs	r2, #0
 8012aee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8012af2:	4b17      	ldr	r3, [pc, #92]	; (8012b50 <MX_ADC3_Init+0x98>)
 8012af4:	2200      	movs	r2, #0
 8012af6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8012af8:	4b15      	ldr	r3, [pc, #84]	; (8012b50 <MX_ADC3_Init+0x98>)
 8012afa:	4a17      	ldr	r2, [pc, #92]	; (8012b58 <MX_ADC3_Init+0xa0>)
 8012afc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8012afe:	4b14      	ldr	r3, [pc, #80]	; (8012b50 <MX_ADC3_Init+0x98>)
 8012b00:	2200      	movs	r2, #0
 8012b02:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8012b04:	4b12      	ldr	r3, [pc, #72]	; (8012b50 <MX_ADC3_Init+0x98>)
 8012b06:	2201      	movs	r2, #1
 8012b08:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8012b0a:	4b11      	ldr	r3, [pc, #68]	; (8012b50 <MX_ADC3_Init+0x98>)
 8012b0c:	2200      	movs	r2, #0
 8012b0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8012b12:	4b0f      	ldr	r3, [pc, #60]	; (8012b50 <MX_ADC3_Init+0x98>)
 8012b14:	2201      	movs	r2, #1
 8012b16:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8012b18:	480d      	ldr	r0, [pc, #52]	; (8012b50 <MX_ADC3_Init+0x98>)
 8012b1a:	f7ed fd49 	bl	80005b0 <HAL_ADC_Init>
 8012b1e:	4603      	mov	r3, r0
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d001      	beq.n	8012b28 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8012b24:	f001 fa30 	bl	8013f88 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8012b28:	2304      	movs	r3, #4
 8012b2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8012b2c:	2301      	movs	r3, #1
 8012b2e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8012b30:	2300      	movs	r3, #0
 8012b32:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8012b34:	463b      	mov	r3, r7
 8012b36:	4619      	mov	r1, r3
 8012b38:	4805      	ldr	r0, [pc, #20]	; (8012b50 <MX_ADC3_Init+0x98>)
 8012b3a:	f7ed fd7d 	bl	8000638 <HAL_ADC_ConfigChannel>
 8012b3e:	4603      	mov	r3, r0
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d001      	beq.n	8012b48 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8012b44:	f001 fa20 	bl	8013f88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8012b48:	bf00      	nop
 8012b4a:	3710      	adds	r7, #16
 8012b4c:	46bd      	mov	sp, r7
 8012b4e:	bd80      	pop	{r7, pc}
 8012b50:	20009108 	.word	0x20009108
 8012b54:	40012200 	.word	0x40012200
 8012b58:	0f000001 	.word	0x0f000001

08012b5c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8012b60:	4b0d      	ldr	r3, [pc, #52]	; (8012b98 <MX_CRC_Init+0x3c>)
 8012b62:	4a0e      	ldr	r2, [pc, #56]	; (8012b9c <MX_CRC_Init+0x40>)
 8012b64:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8012b66:	4b0c      	ldr	r3, [pc, #48]	; (8012b98 <MX_CRC_Init+0x3c>)
 8012b68:	2200      	movs	r2, #0
 8012b6a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8012b6c:	4b0a      	ldr	r3, [pc, #40]	; (8012b98 <MX_CRC_Init+0x3c>)
 8012b6e:	2200      	movs	r2, #0
 8012b70:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8012b72:	4b09      	ldr	r3, [pc, #36]	; (8012b98 <MX_CRC_Init+0x3c>)
 8012b74:	2200      	movs	r2, #0
 8012b76:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8012b78:	4b07      	ldr	r3, [pc, #28]	; (8012b98 <MX_CRC_Init+0x3c>)
 8012b7a:	2200      	movs	r2, #0
 8012b7c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8012b7e:	4b06      	ldr	r3, [pc, #24]	; (8012b98 <MX_CRC_Init+0x3c>)
 8012b80:	2201      	movs	r2, #1
 8012b82:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8012b84:	4804      	ldr	r0, [pc, #16]	; (8012b98 <MX_CRC_Init+0x3c>)
 8012b86:	f7ee f867 	bl	8000c58 <HAL_CRC_Init>
 8012b8a:	4603      	mov	r3, r0
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d001      	beq.n	8012b94 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8012b90:	f001 f9fa 	bl	8013f88 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8012b94:	bf00      	nop
 8012b96:	bd80      	pop	{r7, pc}
 8012b98:	20008b30 	.word	0x20008b30
 8012b9c:	40023000 	.word	0x40023000

08012ba0 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8012ba0:	b580      	push	{r7, lr}
 8012ba2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8012ba4:	4b16      	ldr	r3, [pc, #88]	; (8012c00 <MX_DCMI_Init+0x60>)
 8012ba6:	4a17      	ldr	r2, [pc, #92]	; (8012c04 <MX_DCMI_Init+0x64>)
 8012ba8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8012baa:	4b15      	ldr	r3, [pc, #84]	; (8012c00 <MX_DCMI_Init+0x60>)
 8012bac:	2200      	movs	r2, #0
 8012bae:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8012bb0:	4b13      	ldr	r3, [pc, #76]	; (8012c00 <MX_DCMI_Init+0x60>)
 8012bb2:	2200      	movs	r2, #0
 8012bb4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8012bb6:	4b12      	ldr	r3, [pc, #72]	; (8012c00 <MX_DCMI_Init+0x60>)
 8012bb8:	2200      	movs	r2, #0
 8012bba:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8012bbc:	4b10      	ldr	r3, [pc, #64]	; (8012c00 <MX_DCMI_Init+0x60>)
 8012bbe:	2200      	movs	r2, #0
 8012bc0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8012bc2:	4b0f      	ldr	r3, [pc, #60]	; (8012c00 <MX_DCMI_Init+0x60>)
 8012bc4:	2200      	movs	r2, #0
 8012bc6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8012bc8:	4b0d      	ldr	r3, [pc, #52]	; (8012c00 <MX_DCMI_Init+0x60>)
 8012bca:	2200      	movs	r2, #0
 8012bcc:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8012bce:	4b0c      	ldr	r3, [pc, #48]	; (8012c00 <MX_DCMI_Init+0x60>)
 8012bd0:	2200      	movs	r2, #0
 8012bd2:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8012bd4:	4b0a      	ldr	r3, [pc, #40]	; (8012c00 <MX_DCMI_Init+0x60>)
 8012bd6:	2200      	movs	r2, #0
 8012bd8:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8012bda:	4b09      	ldr	r3, [pc, #36]	; (8012c00 <MX_DCMI_Init+0x60>)
 8012bdc:	2200      	movs	r2, #0
 8012bde:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8012be0:	4b07      	ldr	r3, [pc, #28]	; (8012c00 <MX_DCMI_Init+0x60>)
 8012be2:	2200      	movs	r2, #0
 8012be4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8012be6:	4b06      	ldr	r3, [pc, #24]	; (8012c00 <MX_DCMI_Init+0x60>)
 8012be8:	2200      	movs	r2, #0
 8012bea:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8012bec:	4804      	ldr	r0, [pc, #16]	; (8012c00 <MX_DCMI_Init+0x60>)
 8012bee:	f7ee f91d 	bl	8000e2c <HAL_DCMI_Init>
 8012bf2:	4603      	mov	r3, r0
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d001      	beq.n	8012bfc <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8012bf8:	f001 f9c6 	bl	8013f88 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8012bfc:	bf00      	nop
 8012bfe:	bd80      	pop	{r7, pc}
 8012c00:	20009150 	.word	0x20009150
 8012c04:	50050000 	.word	0x50050000

08012c08 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8012c0c:	4b15      	ldr	r3, [pc, #84]	; (8012c64 <MX_DMA2D_Init+0x5c>)
 8012c0e:	4a16      	ldr	r2, [pc, #88]	; (8012c68 <MX_DMA2D_Init+0x60>)
 8012c10:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8012c12:	4b14      	ldr	r3, [pc, #80]	; (8012c64 <MX_DMA2D_Init+0x5c>)
 8012c14:	2200      	movs	r2, #0
 8012c16:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8012c18:	4b12      	ldr	r3, [pc, #72]	; (8012c64 <MX_DMA2D_Init+0x5c>)
 8012c1a:	2200      	movs	r2, #0
 8012c1c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8012c1e:	4b11      	ldr	r3, [pc, #68]	; (8012c64 <MX_DMA2D_Init+0x5c>)
 8012c20:	2200      	movs	r2, #0
 8012c22:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8012c24:	4b0f      	ldr	r3, [pc, #60]	; (8012c64 <MX_DMA2D_Init+0x5c>)
 8012c26:	2200      	movs	r2, #0
 8012c28:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8012c2a:	4b0e      	ldr	r3, [pc, #56]	; (8012c64 <MX_DMA2D_Init+0x5c>)
 8012c2c:	2200      	movs	r2, #0
 8012c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8012c30:	4b0c      	ldr	r3, [pc, #48]	; (8012c64 <MX_DMA2D_Init+0x5c>)
 8012c32:	2200      	movs	r2, #0
 8012c34:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8012c36:	4b0b      	ldr	r3, [pc, #44]	; (8012c64 <MX_DMA2D_Init+0x5c>)
 8012c38:	2200      	movs	r2, #0
 8012c3a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8012c3c:	4809      	ldr	r0, [pc, #36]	; (8012c64 <MX_DMA2D_Init+0x5c>)
 8012c3e:	f7ee fd0b 	bl	8001658 <HAL_DMA2D_Init>
 8012c42:	4603      	mov	r3, r0
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d001      	beq.n	8012c4c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8012c48:	f001 f99e 	bl	8013f88 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8012c4c:	2101      	movs	r1, #1
 8012c4e:	4805      	ldr	r0, [pc, #20]	; (8012c64 <MX_DMA2D_Init+0x5c>)
 8012c50:	f7ee fe5c 	bl	800190c <HAL_DMA2D_ConfigLayer>
 8012c54:	4603      	mov	r3, r0
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d001      	beq.n	8012c5e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8012c5a:	f001 f995 	bl	8013f88 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8012c5e:	bf00      	nop
 8012c60:	bd80      	pop	{r7, pc}
 8012c62:	bf00      	nop
 8012c64:	200097c8 	.word	0x200097c8
 8012c68:	4002b000 	.word	0x4002b000

08012c6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8012c6c:	b580      	push	{r7, lr}
 8012c6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8012c70:	4b1b      	ldr	r3, [pc, #108]	; (8012ce0 <MX_I2C1_Init+0x74>)
 8012c72:	4a1c      	ldr	r2, [pc, #112]	; (8012ce4 <MX_I2C1_Init+0x78>)
 8012c74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8012c76:	4b1a      	ldr	r3, [pc, #104]	; (8012ce0 <MX_I2C1_Init+0x74>)
 8012c78:	4a1b      	ldr	r2, [pc, #108]	; (8012ce8 <MX_I2C1_Init+0x7c>)
 8012c7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8012c7c:	4b18      	ldr	r3, [pc, #96]	; (8012ce0 <MX_I2C1_Init+0x74>)
 8012c7e:	2200      	movs	r2, #0
 8012c80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8012c82:	4b17      	ldr	r3, [pc, #92]	; (8012ce0 <MX_I2C1_Init+0x74>)
 8012c84:	2201      	movs	r2, #1
 8012c86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8012c88:	4b15      	ldr	r3, [pc, #84]	; (8012ce0 <MX_I2C1_Init+0x74>)
 8012c8a:	2200      	movs	r2, #0
 8012c8c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8012c8e:	4b14      	ldr	r3, [pc, #80]	; (8012ce0 <MX_I2C1_Init+0x74>)
 8012c90:	2200      	movs	r2, #0
 8012c92:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8012c94:	4b12      	ldr	r3, [pc, #72]	; (8012ce0 <MX_I2C1_Init+0x74>)
 8012c96:	2200      	movs	r2, #0
 8012c98:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8012c9a:	4b11      	ldr	r3, [pc, #68]	; (8012ce0 <MX_I2C1_Init+0x74>)
 8012c9c:	2200      	movs	r2, #0
 8012c9e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8012ca0:	4b0f      	ldr	r3, [pc, #60]	; (8012ce0 <MX_I2C1_Init+0x74>)
 8012ca2:	2200      	movs	r2, #0
 8012ca4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8012ca6:	480e      	ldr	r0, [pc, #56]	; (8012ce0 <MX_I2C1_Init+0x74>)
 8012ca8:	f7f0 fd12 	bl	80036d0 <HAL_I2C_Init>
 8012cac:	4603      	mov	r3, r0
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d001      	beq.n	8012cb6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8012cb2:	f001 f969 	bl	8013f88 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8012cb6:	2100      	movs	r1, #0
 8012cb8:	4809      	ldr	r0, [pc, #36]	; (8012ce0 <MX_I2C1_Init+0x74>)
 8012cba:	f7f0 fd99 	bl	80037f0 <HAL_I2CEx_ConfigAnalogFilter>
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d001      	beq.n	8012cc8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8012cc4:	f001 f960 	bl	8013f88 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8012cc8:	2100      	movs	r1, #0
 8012cca:	4805      	ldr	r0, [pc, #20]	; (8012ce0 <MX_I2C1_Init+0x74>)
 8012ccc:	f7f0 fddb 	bl	8003886 <HAL_I2CEx_ConfigDigitalFilter>
 8012cd0:	4603      	mov	r3, r0
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d001      	beq.n	8012cda <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8012cd6:	f001 f957 	bl	8013f88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8012cda:	bf00      	nop
 8012cdc:	bd80      	pop	{r7, pc}
 8012cde:	bf00      	nop
 8012ce0:	20008ae4 	.word	0x20008ae4
 8012ce4:	40005400 	.word	0x40005400
 8012ce8:	00c0eaff 	.word	0x00c0eaff

08012cec <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8012cec:	b580      	push	{r7, lr}
 8012cee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8012cf0:	4b1b      	ldr	r3, [pc, #108]	; (8012d60 <MX_I2C3_Init+0x74>)
 8012cf2:	4a1c      	ldr	r2, [pc, #112]	; (8012d64 <MX_I2C3_Init+0x78>)
 8012cf4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8012cf6:	4b1a      	ldr	r3, [pc, #104]	; (8012d60 <MX_I2C3_Init+0x74>)
 8012cf8:	4a1b      	ldr	r2, [pc, #108]	; (8012d68 <MX_I2C3_Init+0x7c>)
 8012cfa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8012cfc:	4b18      	ldr	r3, [pc, #96]	; (8012d60 <MX_I2C3_Init+0x74>)
 8012cfe:	2200      	movs	r2, #0
 8012d00:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8012d02:	4b17      	ldr	r3, [pc, #92]	; (8012d60 <MX_I2C3_Init+0x74>)
 8012d04:	2201      	movs	r2, #1
 8012d06:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8012d08:	4b15      	ldr	r3, [pc, #84]	; (8012d60 <MX_I2C3_Init+0x74>)
 8012d0a:	2200      	movs	r2, #0
 8012d0c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8012d0e:	4b14      	ldr	r3, [pc, #80]	; (8012d60 <MX_I2C3_Init+0x74>)
 8012d10:	2200      	movs	r2, #0
 8012d12:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8012d14:	4b12      	ldr	r3, [pc, #72]	; (8012d60 <MX_I2C3_Init+0x74>)
 8012d16:	2200      	movs	r2, #0
 8012d18:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8012d1a:	4b11      	ldr	r3, [pc, #68]	; (8012d60 <MX_I2C3_Init+0x74>)
 8012d1c:	2200      	movs	r2, #0
 8012d1e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8012d20:	4b0f      	ldr	r3, [pc, #60]	; (8012d60 <MX_I2C3_Init+0x74>)
 8012d22:	2200      	movs	r2, #0
 8012d24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8012d26:	480e      	ldr	r0, [pc, #56]	; (8012d60 <MX_I2C3_Init+0x74>)
 8012d28:	f7f0 fcd2 	bl	80036d0 <HAL_I2C_Init>
 8012d2c:	4603      	mov	r3, r0
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d001      	beq.n	8012d36 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8012d32:	f001 f929 	bl	8013f88 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8012d36:	2100      	movs	r1, #0
 8012d38:	4809      	ldr	r0, [pc, #36]	; (8012d60 <MX_I2C3_Init+0x74>)
 8012d3a:	f7f0 fd59 	bl	80037f0 <HAL_I2CEx_ConfigAnalogFilter>
 8012d3e:	4603      	mov	r3, r0
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d001      	beq.n	8012d48 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8012d44:	f001 f920 	bl	8013f88 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8012d48:	2100      	movs	r1, #0
 8012d4a:	4805      	ldr	r0, [pc, #20]	; (8012d60 <MX_I2C3_Init+0x74>)
 8012d4c:	f7f0 fd9b 	bl	8003886 <HAL_I2CEx_ConfigDigitalFilter>
 8012d50:	4603      	mov	r3, r0
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d001      	beq.n	8012d5a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8012d56:	f001 f917 	bl	8013f88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8012d5a:	bf00      	nop
 8012d5c:	bd80      	pop	{r7, pc}
 8012d5e:	bf00      	nop
 8012d60:	20008988 	.word	0x20008988
 8012d64:	40005c00 	.word	0x40005c00
 8012d68:	00c0eaff 	.word	0x00c0eaff

08012d6c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b08e      	sub	sp, #56	; 0x38
 8012d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8012d72:	1d3b      	adds	r3, r7, #4
 8012d74:	2234      	movs	r2, #52	; 0x34
 8012d76:	2100      	movs	r1, #0
 8012d78:	4618      	mov	r0, r3
 8012d7a:	f002 ff44 	bl	8015c06 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8012d7e:	4b3a      	ldr	r3, [pc, #232]	; (8012e68 <MX_LTDC_Init+0xfc>)
 8012d80:	4a3a      	ldr	r2, [pc, #232]	; (8012e6c <MX_LTDC_Init+0x100>)
 8012d82:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8012d84:	4b38      	ldr	r3, [pc, #224]	; (8012e68 <MX_LTDC_Init+0xfc>)
 8012d86:	2200      	movs	r2, #0
 8012d88:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8012d8a:	4b37      	ldr	r3, [pc, #220]	; (8012e68 <MX_LTDC_Init+0xfc>)
 8012d8c:	2200      	movs	r2, #0
 8012d8e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8012d90:	4b35      	ldr	r3, [pc, #212]	; (8012e68 <MX_LTDC_Init+0xfc>)
 8012d92:	2200      	movs	r2, #0
 8012d94:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8012d96:	4b34      	ldr	r3, [pc, #208]	; (8012e68 <MX_LTDC_Init+0xfc>)
 8012d98:	2200      	movs	r2, #0
 8012d9a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8012d9c:	4b32      	ldr	r3, [pc, #200]	; (8012e68 <MX_LTDC_Init+0xfc>)
 8012d9e:	2228      	movs	r2, #40	; 0x28
 8012da0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8012da2:	4b31      	ldr	r3, [pc, #196]	; (8012e68 <MX_LTDC_Init+0xfc>)
 8012da4:	2209      	movs	r2, #9
 8012da6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8012da8:	4b2f      	ldr	r3, [pc, #188]	; (8012e68 <MX_LTDC_Init+0xfc>)
 8012daa:	2235      	movs	r2, #53	; 0x35
 8012dac:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8012dae:	4b2e      	ldr	r3, [pc, #184]	; (8012e68 <MX_LTDC_Init+0xfc>)
 8012db0:	220b      	movs	r2, #11
 8012db2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8012db4:	4b2c      	ldr	r3, [pc, #176]	; (8012e68 <MX_LTDC_Init+0xfc>)
 8012db6:	f240 2215 	movw	r2, #533	; 0x215
 8012dba:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8012dbc:	4b2a      	ldr	r3, [pc, #168]	; (8012e68 <MX_LTDC_Init+0xfc>)
 8012dbe:	f240 121b 	movw	r2, #283	; 0x11b
 8012dc2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8012dc4:	4b28      	ldr	r3, [pc, #160]	; (8012e68 <MX_LTDC_Init+0xfc>)
 8012dc6:	f240 2235 	movw	r2, #565	; 0x235
 8012dca:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8012dcc:	4b26      	ldr	r3, [pc, #152]	; (8012e68 <MX_LTDC_Init+0xfc>)
 8012dce:	f240 121d 	movw	r2, #285	; 0x11d
 8012dd2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8012dd4:	4b24      	ldr	r3, [pc, #144]	; (8012e68 <MX_LTDC_Init+0xfc>)
 8012dd6:	2200      	movs	r2, #0
 8012dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8012ddc:	4b22      	ldr	r3, [pc, #136]	; (8012e68 <MX_LTDC_Init+0xfc>)
 8012dde:	2200      	movs	r2, #0
 8012de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8012de4:	4b20      	ldr	r3, [pc, #128]	; (8012e68 <MX_LTDC_Init+0xfc>)
 8012de6:	2200      	movs	r2, #0
 8012de8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8012dec:	481e      	ldr	r0, [pc, #120]	; (8012e68 <MX_LTDC_Init+0xfc>)
 8012dee:	f7f0 fd97 	bl	8003920 <HAL_LTDC_Init>
 8012df2:	4603      	mov	r3, r0
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d001      	beq.n	8012dfc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8012df8:	f001 f8c6 	bl	8013f88 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8012dfc:	2300      	movs	r3, #0
 8012dfe:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8012e00:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8012e04:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8012e06:	2300      	movs	r3, #0
 8012e08:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8012e0a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8012e0e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8012e10:	2302      	movs	r3, #2
 8012e12:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8012e14:	23ff      	movs	r3, #255	; 0xff
 8012e16:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8012e18:	2300      	movs	r3, #0
 8012e1a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8012e1c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8012e20:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8012e22:	2307      	movs	r3, #7
 8012e24:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8012e26:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8012e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8012e2c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8012e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8012e32:	f44f 7388 	mov.w	r3, #272	; 0x110
 8012e36:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8012e38:	2300      	movs	r3, #0
 8012e3a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8012e3e:	2300      	movs	r3, #0
 8012e40:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8012e44:	2300      	movs	r3, #0
 8012e46:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8012e4a:	1d3b      	adds	r3, r7, #4
 8012e4c:	2200      	movs	r2, #0
 8012e4e:	4619      	mov	r1, r3
 8012e50:	4805      	ldr	r0, [pc, #20]	; (8012e68 <MX_LTDC_Init+0xfc>)
 8012e52:	f7f0 fef7 	bl	8003c44 <HAL_LTDC_ConfigLayer>
 8012e56:	4603      	mov	r3, r0
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d001      	beq.n	8012e60 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8012e5c:	f001 f894 	bl	8013f88 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8012e60:	bf00      	nop
 8012e62:	3738      	adds	r7, #56	; 0x38
 8012e64:	46bd      	mov	sp, r7
 8012e66:	bd80      	pop	{r7, pc}
 8012e68:	20008c5c 	.word	0x20008c5c
 8012e6c:	40016800 	.word	0x40016800

08012e70 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8012e70:	b580      	push	{r7, lr}
 8012e72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8012e74:	4b12      	ldr	r3, [pc, #72]	; (8012ec0 <MX_QUADSPI_Init+0x50>)
 8012e76:	4a13      	ldr	r2, [pc, #76]	; (8012ec4 <MX_QUADSPI_Init+0x54>)
 8012e78:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8012e7a:	4b11      	ldr	r3, [pc, #68]	; (8012ec0 <MX_QUADSPI_Init+0x50>)
 8012e7c:	22ff      	movs	r2, #255	; 0xff
 8012e7e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8012e80:	4b0f      	ldr	r3, [pc, #60]	; (8012ec0 <MX_QUADSPI_Init+0x50>)
 8012e82:	2201      	movs	r2, #1
 8012e84:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8012e86:	4b0e      	ldr	r3, [pc, #56]	; (8012ec0 <MX_QUADSPI_Init+0x50>)
 8012e88:	2200      	movs	r2, #0
 8012e8a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8012e8c:	4b0c      	ldr	r3, [pc, #48]	; (8012ec0 <MX_QUADSPI_Init+0x50>)
 8012e8e:	2201      	movs	r2, #1
 8012e90:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8012e92:	4b0b      	ldr	r3, [pc, #44]	; (8012ec0 <MX_QUADSPI_Init+0x50>)
 8012e94:	2200      	movs	r2, #0
 8012e96:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8012e98:	4b09      	ldr	r3, [pc, #36]	; (8012ec0 <MX_QUADSPI_Init+0x50>)
 8012e9a:	2200      	movs	r2, #0
 8012e9c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8012e9e:	4b08      	ldr	r3, [pc, #32]	; (8012ec0 <MX_QUADSPI_Init+0x50>)
 8012ea0:	2200      	movs	r2, #0
 8012ea2:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8012ea4:	4b06      	ldr	r3, [pc, #24]	; (8012ec0 <MX_QUADSPI_Init+0x50>)
 8012ea6:	2200      	movs	r2, #0
 8012ea8:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8012eaa:	4805      	ldr	r0, [pc, #20]	; (8012ec0 <MX_QUADSPI_Init+0x50>)
 8012eac:	f7f1 f902 	bl	80040b4 <HAL_QSPI_Init>
 8012eb0:	4603      	mov	r3, r0
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d001      	beq.n	8012eba <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8012eb6:	f001 f867 	bl	8013f88 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8012eba:	bf00      	nop
 8012ebc:	bd80      	pop	{r7, pc}
 8012ebe:	bf00      	nop
 8012ec0:	20009920 	.word	0x20009920
 8012ec4:	a0001000 	.word	0xa0001000

08012ec8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b092      	sub	sp, #72	; 0x48
 8012ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8012ece:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	601a      	str	r2, [r3, #0]
 8012ed6:	605a      	str	r2, [r3, #4]
 8012ed8:	609a      	str	r2, [r3, #8]
 8012eda:	60da      	str	r2, [r3, #12]
 8012edc:	611a      	str	r2, [r3, #16]
 8012ede:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8012ee4:	463b      	mov	r3, r7
 8012ee6:	222c      	movs	r2, #44	; 0x2c
 8012ee8:	2100      	movs	r1, #0
 8012eea:	4618      	mov	r0, r3
 8012eec:	f002 fe8b 	bl	8015c06 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8012ef0:	4b47      	ldr	r3, [pc, #284]	; (8013010 <MX_RTC_Init+0x148>)
 8012ef2:	4a48      	ldr	r2, [pc, #288]	; (8013014 <MX_RTC_Init+0x14c>)
 8012ef4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8012ef6:	4b46      	ldr	r3, [pc, #280]	; (8013010 <MX_RTC_Init+0x148>)
 8012ef8:	2200      	movs	r2, #0
 8012efa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8012efc:	4b44      	ldr	r3, [pc, #272]	; (8013010 <MX_RTC_Init+0x148>)
 8012efe:	227f      	movs	r2, #127	; 0x7f
 8012f00:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8012f02:	4b43      	ldr	r3, [pc, #268]	; (8013010 <MX_RTC_Init+0x148>)
 8012f04:	22ff      	movs	r2, #255	; 0xff
 8012f06:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8012f08:	4b41      	ldr	r3, [pc, #260]	; (8013010 <MX_RTC_Init+0x148>)
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8012f0e:	4b40      	ldr	r3, [pc, #256]	; (8013010 <MX_RTC_Init+0x148>)
 8012f10:	2200      	movs	r2, #0
 8012f12:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8012f14:	4b3e      	ldr	r3, [pc, #248]	; (8013010 <MX_RTC_Init+0x148>)
 8012f16:	2200      	movs	r2, #0
 8012f18:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8012f1a:	483d      	ldr	r0, [pc, #244]	; (8013010 <MX_RTC_Init+0x148>)
 8012f1c:	f7f2 fb2c 	bl	8005578 <HAL_RTC_Init>
 8012f20:	4603      	mov	r3, r0
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d001      	beq.n	8012f2a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8012f26:	f001 f82f 	bl	8013f88 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8012f30:	2300      	movs	r3, #0
 8012f32:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8012f36:	2300      	movs	r3, #0
 8012f38:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8012f3c:	2300      	movs	r3, #0
 8012f3e:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8012f40:	2300      	movs	r3, #0
 8012f42:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8012f44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012f48:	2201      	movs	r2, #1
 8012f4a:	4619      	mov	r1, r3
 8012f4c:	4830      	ldr	r0, [pc, #192]	; (8013010 <MX_RTC_Init+0x148>)
 8012f4e:	f7f2 fb8f 	bl	8005670 <HAL_RTC_SetTime>
 8012f52:	4603      	mov	r3, r0
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d001      	beq.n	8012f5c <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8012f58:	f001 f816 	bl	8013f88 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8012f5c:	2301      	movs	r3, #1
 8012f5e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8012f62:	2301      	movs	r3, #1
 8012f64:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8012f68:	2301      	movs	r3, #1
 8012f6a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8012f6e:	2300      	movs	r3, #0
 8012f70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8012f74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012f78:	2201      	movs	r2, #1
 8012f7a:	4619      	mov	r1, r3
 8012f7c:	4824      	ldr	r0, [pc, #144]	; (8013010 <MX_RTC_Init+0x148>)
 8012f7e:	f7f2 fc35 	bl	80057ec <HAL_RTC_SetDate>
 8012f82:	4603      	mov	r3, r0
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d001      	beq.n	8012f8c <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8012f88:	f000 fffe 	bl	8013f88 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8012f90:	2300      	movs	r3, #0
 8012f92:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8012f94:	2300      	movs	r3, #0
 8012f96:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8012f98:	2300      	movs	r3, #0
 8012f9a:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8012f9c:	2300      	movs	r3, #0
 8012f9e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8012fa4:	2300      	movs	r3, #0
 8012fa6:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8012fa8:	2300      	movs	r3, #0
 8012faa:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8012fac:	2300      	movs	r3, #0
 8012fae:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8012fb0:	2301      	movs	r3, #1
 8012fb2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8012fb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012fba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8012fbc:	463b      	mov	r3, r7
 8012fbe:	2201      	movs	r2, #1
 8012fc0:	4619      	mov	r1, r3
 8012fc2:	4813      	ldr	r0, [pc, #76]	; (8013010 <MX_RTC_Init+0x148>)
 8012fc4:	f7f2 fcba 	bl	800593c <HAL_RTC_SetAlarm>
 8012fc8:	4603      	mov	r3, r0
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d001      	beq.n	8012fd2 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8012fce:	f000 ffdb 	bl	8013f88 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 8012fd2:	2301      	movs	r3, #1
 8012fd4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8012fd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8012fde:	463b      	mov	r3, r7
 8012fe0:	2201      	movs	r2, #1
 8012fe2:	4619      	mov	r1, r3
 8012fe4:	480a      	ldr	r0, [pc, #40]	; (8013010 <MX_RTC_Init+0x148>)
 8012fe6:	f7f2 fca9 	bl	800593c <HAL_RTC_SetAlarm>
 8012fea:	4603      	mov	r3, r0
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d001      	beq.n	8012ff4 <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 8012ff0:	f000 ffca 	bl	8013f88 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8012ff4:	2202      	movs	r2, #2
 8012ff6:	2100      	movs	r1, #0
 8012ff8:	4805      	ldr	r0, [pc, #20]	; (8013010 <MX_RTC_Init+0x148>)
 8012ffa:	f7f2 fe29 	bl	8005c50 <HAL_RTCEx_SetTimeStamp>
 8012ffe:	4603      	mov	r3, r0
 8013000:	2b00      	cmp	r3, #0
 8013002:	d001      	beq.n	8013008 <MX_RTC_Init+0x140>
  {
    Error_Handler();
 8013004:	f000 ffc0 	bl	8013f88 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8013008:	bf00      	nop
 801300a:	3748      	adds	r7, #72	; 0x48
 801300c:	46bd      	mov	sp, r7
 801300e:	bd80      	pop	{r7, pc}
 8013010:	20009220 	.word	0x20009220
 8013014:	40002800 	.word	0x40002800

08013018 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8013018:	b580      	push	{r7, lr}
 801301a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 801301c:	4b4d      	ldr	r3, [pc, #308]	; (8013154 <MX_SAI2_Init+0x13c>)
 801301e:	4a4e      	ldr	r2, [pc, #312]	; (8013158 <MX_SAI2_Init+0x140>)
 8013020:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8013022:	4b4c      	ldr	r3, [pc, #304]	; (8013154 <MX_SAI2_Init+0x13c>)
 8013024:	2200      	movs	r2, #0
 8013026:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8013028:	4b4a      	ldr	r3, [pc, #296]	; (8013154 <MX_SAI2_Init+0x13c>)
 801302a:	2200      	movs	r2, #0
 801302c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 801302e:	4b49      	ldr	r3, [pc, #292]	; (8013154 <MX_SAI2_Init+0x13c>)
 8013030:	2240      	movs	r2, #64	; 0x40
 8013032:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8013034:	4b47      	ldr	r3, [pc, #284]	; (8013154 <MX_SAI2_Init+0x13c>)
 8013036:	2200      	movs	r2, #0
 8013038:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 801303a:	4b46      	ldr	r3, [pc, #280]	; (8013154 <MX_SAI2_Init+0x13c>)
 801303c:	2200      	movs	r2, #0
 801303e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8013040:	4b44      	ldr	r3, [pc, #272]	; (8013154 <MX_SAI2_Init+0x13c>)
 8013042:	2200      	movs	r2, #0
 8013044:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8013046:	4b43      	ldr	r3, [pc, #268]	; (8013154 <MX_SAI2_Init+0x13c>)
 8013048:	2200      	movs	r2, #0
 801304a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 801304c:	4b41      	ldr	r3, [pc, #260]	; (8013154 <MX_SAI2_Init+0x13c>)
 801304e:	2200      	movs	r2, #0
 8013050:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8013052:	4b40      	ldr	r3, [pc, #256]	; (8013154 <MX_SAI2_Init+0x13c>)
 8013054:	2200      	movs	r2, #0
 8013056:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8013058:	4b3e      	ldr	r3, [pc, #248]	; (8013154 <MX_SAI2_Init+0x13c>)
 801305a:	4a40      	ldr	r2, [pc, #256]	; (801315c <MX_SAI2_Init+0x144>)
 801305c:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 801305e:	4b3d      	ldr	r3, [pc, #244]	; (8013154 <MX_SAI2_Init+0x13c>)
 8013060:	2200      	movs	r2, #0
 8013062:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8013064:	4b3b      	ldr	r3, [pc, #236]	; (8013154 <MX_SAI2_Init+0x13c>)
 8013066:	2200      	movs	r2, #0
 8013068:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 801306a:	4b3a      	ldr	r3, [pc, #232]	; (8013154 <MX_SAI2_Init+0x13c>)
 801306c:	2200      	movs	r2, #0
 801306e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8013070:	4b38      	ldr	r3, [pc, #224]	; (8013154 <MX_SAI2_Init+0x13c>)
 8013072:	2200      	movs	r2, #0
 8013074:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8013076:	4b37      	ldr	r3, [pc, #220]	; (8013154 <MX_SAI2_Init+0x13c>)
 8013078:	2208      	movs	r2, #8
 801307a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 801307c:	4b35      	ldr	r3, [pc, #212]	; (8013154 <MX_SAI2_Init+0x13c>)
 801307e:	2201      	movs	r2, #1
 8013080:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8013082:	4b34      	ldr	r3, [pc, #208]	; (8013154 <MX_SAI2_Init+0x13c>)
 8013084:	2200      	movs	r2, #0
 8013086:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8013088:	4b32      	ldr	r3, [pc, #200]	; (8013154 <MX_SAI2_Init+0x13c>)
 801308a:	2200      	movs	r2, #0
 801308c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 801308e:	4b31      	ldr	r3, [pc, #196]	; (8013154 <MX_SAI2_Init+0x13c>)
 8013090:	2200      	movs	r2, #0
 8013092:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8013094:	4b2f      	ldr	r3, [pc, #188]	; (8013154 <MX_SAI2_Init+0x13c>)
 8013096:	2200      	movs	r2, #0
 8013098:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 801309a:	4b2e      	ldr	r3, [pc, #184]	; (8013154 <MX_SAI2_Init+0x13c>)
 801309c:	2200      	movs	r2, #0
 801309e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80130a0:	4b2c      	ldr	r3, [pc, #176]	; (8013154 <MX_SAI2_Init+0x13c>)
 80130a2:	2201      	movs	r2, #1
 80130a4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80130a6:	4b2b      	ldr	r3, [pc, #172]	; (8013154 <MX_SAI2_Init+0x13c>)
 80130a8:	2200      	movs	r2, #0
 80130aa:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80130ac:	4829      	ldr	r0, [pc, #164]	; (8013154 <MX_SAI2_Init+0x13c>)
 80130ae:	f7f2 fe25 	bl	8005cfc <HAL_SAI_Init>
 80130b2:	4603      	mov	r3, r0
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d001      	beq.n	80130bc <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 80130b8:	f000 ff66 	bl	8013f88 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80130bc:	4b28      	ldr	r3, [pc, #160]	; (8013160 <MX_SAI2_Init+0x148>)
 80130be:	4a29      	ldr	r2, [pc, #164]	; (8013164 <MX_SAI2_Init+0x14c>)
 80130c0:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80130c2:	4b27      	ldr	r3, [pc, #156]	; (8013160 <MX_SAI2_Init+0x148>)
 80130c4:	2200      	movs	r2, #0
 80130c6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80130c8:	4b25      	ldr	r3, [pc, #148]	; (8013160 <MX_SAI2_Init+0x148>)
 80130ca:	2203      	movs	r2, #3
 80130cc:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 80130ce:	4b24      	ldr	r3, [pc, #144]	; (8013160 <MX_SAI2_Init+0x148>)
 80130d0:	2240      	movs	r2, #64	; 0x40
 80130d2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80130d4:	4b22      	ldr	r3, [pc, #136]	; (8013160 <MX_SAI2_Init+0x148>)
 80130d6:	2200      	movs	r2, #0
 80130d8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80130da:	4b21      	ldr	r3, [pc, #132]	; (8013160 <MX_SAI2_Init+0x148>)
 80130dc:	2200      	movs	r2, #0
 80130de:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80130e0:	4b1f      	ldr	r3, [pc, #124]	; (8013160 <MX_SAI2_Init+0x148>)
 80130e2:	2201      	movs	r2, #1
 80130e4:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80130e6:	4b1e      	ldr	r3, [pc, #120]	; (8013160 <MX_SAI2_Init+0x148>)
 80130e8:	2200      	movs	r2, #0
 80130ea:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80130ec:	4b1c      	ldr	r3, [pc, #112]	; (8013160 <MX_SAI2_Init+0x148>)
 80130ee:	2200      	movs	r2, #0
 80130f0:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80130f2:	4b1b      	ldr	r3, [pc, #108]	; (8013160 <MX_SAI2_Init+0x148>)
 80130f4:	2200      	movs	r2, #0
 80130f6:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80130f8:	4b19      	ldr	r3, [pc, #100]	; (8013160 <MX_SAI2_Init+0x148>)
 80130fa:	2200      	movs	r2, #0
 80130fc:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80130fe:	4b18      	ldr	r3, [pc, #96]	; (8013160 <MX_SAI2_Init+0x148>)
 8013100:	2200      	movs	r2, #0
 8013102:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8013104:	4b16      	ldr	r3, [pc, #88]	; (8013160 <MX_SAI2_Init+0x148>)
 8013106:	2200      	movs	r2, #0
 8013108:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 24;
 801310a:	4b15      	ldr	r3, [pc, #84]	; (8013160 <MX_SAI2_Init+0x148>)
 801310c:	2218      	movs	r2, #24
 801310e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8013110:	4b13      	ldr	r3, [pc, #76]	; (8013160 <MX_SAI2_Init+0x148>)
 8013112:	2201      	movs	r2, #1
 8013114:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8013116:	4b12      	ldr	r3, [pc, #72]	; (8013160 <MX_SAI2_Init+0x148>)
 8013118:	2200      	movs	r2, #0
 801311a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 801311c:	4b10      	ldr	r3, [pc, #64]	; (8013160 <MX_SAI2_Init+0x148>)
 801311e:	2200      	movs	r2, #0
 8013120:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8013122:	4b0f      	ldr	r3, [pc, #60]	; (8013160 <MX_SAI2_Init+0x148>)
 8013124:	2200      	movs	r2, #0
 8013126:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8013128:	4b0d      	ldr	r3, [pc, #52]	; (8013160 <MX_SAI2_Init+0x148>)
 801312a:	2200      	movs	r2, #0
 801312c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 801312e:	4b0c      	ldr	r3, [pc, #48]	; (8013160 <MX_SAI2_Init+0x148>)
 8013130:	2200      	movs	r2, #0
 8013132:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8013134:	4b0a      	ldr	r3, [pc, #40]	; (8013160 <MX_SAI2_Init+0x148>)
 8013136:	2201      	movs	r2, #1
 8013138:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 801313a:	4b09      	ldr	r3, [pc, #36]	; (8013160 <MX_SAI2_Init+0x148>)
 801313c:	2200      	movs	r2, #0
 801313e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8013140:	4807      	ldr	r0, [pc, #28]	; (8013160 <MX_SAI2_Init+0x148>)
 8013142:	f7f2 fddb 	bl	8005cfc <HAL_SAI_Init>
 8013146:	4603      	mov	r3, r0
 8013148:	2b00      	cmp	r3, #0
 801314a:	d001      	beq.n	8013150 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 801314c:	f000 ff1c 	bl	8013f88 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8013150:	bf00      	nop
 8013152:	bd80      	pop	{r7, pc}
 8013154:	20008a60 	.word	0x20008a60
 8013158:	40015c04 	.word	0x40015c04
 801315c:	0002ee00 	.word	0x0002ee00
 8013160:	20008900 	.word	0x20008900
 8013164:	40015c24 	.word	0x40015c24

08013168 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8013168:	b480      	push	{r7}
 801316a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 801316c:	4b0c      	ldr	r3, [pc, #48]	; (80131a0 <MX_SDMMC1_SD_Init+0x38>)
 801316e:	4a0d      	ldr	r2, [pc, #52]	; (80131a4 <MX_SDMMC1_SD_Init+0x3c>)
 8013170:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8013172:	4b0b      	ldr	r3, [pc, #44]	; (80131a0 <MX_SDMMC1_SD_Init+0x38>)
 8013174:	2200      	movs	r2, #0
 8013176:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8013178:	4b09      	ldr	r3, [pc, #36]	; (80131a0 <MX_SDMMC1_SD_Init+0x38>)
 801317a:	2200      	movs	r2, #0
 801317c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 801317e:	4b08      	ldr	r3, [pc, #32]	; (80131a0 <MX_SDMMC1_SD_Init+0x38>)
 8013180:	2200      	movs	r2, #0
 8013182:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8013184:	4b06      	ldr	r3, [pc, #24]	; (80131a0 <MX_SDMMC1_SD_Init+0x38>)
 8013186:	2200      	movs	r2, #0
 8013188:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 801318a:	4b05      	ldr	r3, [pc, #20]	; (80131a0 <MX_SDMMC1_SD_Init+0x38>)
 801318c:	2200      	movs	r2, #0
 801318e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8013190:	4b03      	ldr	r3, [pc, #12]	; (80131a0 <MX_SDMMC1_SD_Init+0x38>)
 8013192:	2200      	movs	r2, #0
 8013194:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8013196:	bf00      	nop
 8013198:	46bd      	mov	sp, r7
 801319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801319e:	4770      	bx	lr
 80131a0:	20008b54 	.word	0x20008b54
 80131a4:	40012c00 	.word	0x40012c00

080131a8 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 80131a8:	b580      	push	{r7, lr}
 80131aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 80131ac:	4b15      	ldr	r3, [pc, #84]	; (8013204 <MX_SPDIFRX_Init+0x5c>)
 80131ae:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80131b2:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 80131b4:	4b13      	ldr	r3, [pc, #76]	; (8013204 <MX_SPDIFRX_Init+0x5c>)
 80131b6:	2200      	movs	r2, #0
 80131b8:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 80131ba:	4b12      	ldr	r3, [pc, #72]	; (8013204 <MX_SPDIFRX_Init+0x5c>)
 80131bc:	2200      	movs	r2, #0
 80131be:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 80131c0:	4b10      	ldr	r3, [pc, #64]	; (8013204 <MX_SPDIFRX_Init+0x5c>)
 80131c2:	2200      	movs	r2, #0
 80131c4:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 80131c6:	4b0f      	ldr	r3, [pc, #60]	; (8013204 <MX_SPDIFRX_Init+0x5c>)
 80131c8:	2200      	movs	r2, #0
 80131ca:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 80131cc:	4b0d      	ldr	r3, [pc, #52]	; (8013204 <MX_SPDIFRX_Init+0x5c>)
 80131ce:	2200      	movs	r2, #0
 80131d0:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 80131d2:	4b0c      	ldr	r3, [pc, #48]	; (8013204 <MX_SPDIFRX_Init+0x5c>)
 80131d4:	2200      	movs	r2, #0
 80131d6:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 80131d8:	4b0a      	ldr	r3, [pc, #40]	; (8013204 <MX_SPDIFRX_Init+0x5c>)
 80131da:	2200      	movs	r2, #0
 80131dc:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 80131de:	4b09      	ldr	r3, [pc, #36]	; (8013204 <MX_SPDIFRX_Init+0x5c>)
 80131e0:	2200      	movs	r2, #0
 80131e2:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 80131e4:	4b07      	ldr	r3, [pc, #28]	; (8013204 <MX_SPDIFRX_Init+0x5c>)
 80131e6:	2200      	movs	r2, #0
 80131e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 80131ea:	4b06      	ldr	r3, [pc, #24]	; (8013204 <MX_SPDIFRX_Init+0x5c>)
 80131ec:	2200      	movs	r2, #0
 80131ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 80131f0:	4804      	ldr	r0, [pc, #16]	; (8013204 <MX_SPDIFRX_Init+0x5c>)
 80131f2:	f7f4 fa3d 	bl	8007670 <HAL_SPDIFRX_Init>
 80131f6:	4603      	mov	r3, r0
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d001      	beq.n	8013200 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 80131fc:	f000 fec4 	bl	8013f88 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8013200:	bf00      	nop
 8013202:	bd80      	pop	{r7, pc}
 8013204:	20008a14 	.word	0x20008a14

08013208 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8013208:	b580      	push	{r7, lr}
 801320a:	b09a      	sub	sp, #104	; 0x68
 801320c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801320e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013212:	2200      	movs	r2, #0
 8013214:	601a      	str	r2, [r3, #0]
 8013216:	605a      	str	r2, [r3, #4]
 8013218:	609a      	str	r2, [r3, #8]
 801321a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801321c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013220:	2200      	movs	r2, #0
 8013222:	601a      	str	r2, [r3, #0]
 8013224:	605a      	str	r2, [r3, #4]
 8013226:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8013228:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801322c:	2200      	movs	r2, #0
 801322e:	601a      	str	r2, [r3, #0]
 8013230:	605a      	str	r2, [r3, #4]
 8013232:	609a      	str	r2, [r3, #8]
 8013234:	60da      	str	r2, [r3, #12]
 8013236:	611a      	str	r2, [r3, #16]
 8013238:	615a      	str	r2, [r3, #20]
 801323a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 801323c:	1d3b      	adds	r3, r7, #4
 801323e:	222c      	movs	r2, #44	; 0x2c
 8013240:	2100      	movs	r1, #0
 8013242:	4618      	mov	r0, r3
 8013244:	f002 fcdf 	bl	8015c06 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8013248:	4b43      	ldr	r3, [pc, #268]	; (8013358 <MX_TIM1_Init+0x150>)
 801324a:	4a44      	ldr	r2, [pc, #272]	; (801335c <MX_TIM1_Init+0x154>)
 801324c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 801324e:	4b42      	ldr	r3, [pc, #264]	; (8013358 <MX_TIM1_Init+0x150>)
 8013250:	2200      	movs	r2, #0
 8013252:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013254:	4b40      	ldr	r3, [pc, #256]	; (8013358 <MX_TIM1_Init+0x150>)
 8013256:	2200      	movs	r2, #0
 8013258:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 801325a:	4b3f      	ldr	r3, [pc, #252]	; (8013358 <MX_TIM1_Init+0x150>)
 801325c:	2200      	movs	r2, #0
 801325e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8013260:	4b3d      	ldr	r3, [pc, #244]	; (8013358 <MX_TIM1_Init+0x150>)
 8013262:	2200      	movs	r2, #0
 8013264:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8013266:	4b3c      	ldr	r3, [pc, #240]	; (8013358 <MX_TIM1_Init+0x150>)
 8013268:	2200      	movs	r2, #0
 801326a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801326c:	4b3a      	ldr	r3, [pc, #232]	; (8013358 <MX_TIM1_Init+0x150>)
 801326e:	2200      	movs	r2, #0
 8013270:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8013272:	4839      	ldr	r0, [pc, #228]	; (8013358 <MX_TIM1_Init+0x150>)
 8013274:	f7f4 fa58 	bl	8007728 <HAL_TIM_Base_Init>
 8013278:	4603      	mov	r3, r0
 801327a:	2b00      	cmp	r3, #0
 801327c:	d001      	beq.n	8013282 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 801327e:	f000 fe83 	bl	8013f88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8013282:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013286:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8013288:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801328c:	4619      	mov	r1, r3
 801328e:	4832      	ldr	r0, [pc, #200]	; (8013358 <MX_TIM1_Init+0x150>)
 8013290:	f7f4 fd02 	bl	8007c98 <HAL_TIM_ConfigClockSource>
 8013294:	4603      	mov	r3, r0
 8013296:	2b00      	cmp	r3, #0
 8013298:	d001      	beq.n	801329e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 801329a:	f000 fe75 	bl	8013f88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 801329e:	482e      	ldr	r0, [pc, #184]	; (8013358 <MX_TIM1_Init+0x150>)
 80132a0:	f7f4 fa98 	bl	80077d4 <HAL_TIM_PWM_Init>
 80132a4:	4603      	mov	r3, r0
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d001      	beq.n	80132ae <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80132aa:	f000 fe6d 	bl	8013f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80132ae:	2300      	movs	r3, #0
 80132b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80132b2:	2300      	movs	r3, #0
 80132b4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80132b6:	2300      	movs	r3, #0
 80132b8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80132ba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80132be:	4619      	mov	r1, r3
 80132c0:	4825      	ldr	r0, [pc, #148]	; (8013358 <MX_TIM1_Init+0x150>)
 80132c2:	f7f5 f963 	bl	800858c <HAL_TIMEx_MasterConfigSynchronization>
 80132c6:	4603      	mov	r3, r0
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d001      	beq.n	80132d0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80132cc:	f000 fe5c 	bl	8013f88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80132d0:	2360      	movs	r3, #96	; 0x60
 80132d2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80132d4:	2300      	movs	r3, #0
 80132d6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80132d8:	2300      	movs	r3, #0
 80132da:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80132dc:	2300      	movs	r3, #0
 80132de:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80132e0:	2300      	movs	r3, #0
 80132e2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80132e4:	2300      	movs	r3, #0
 80132e6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80132e8:	2300      	movs	r3, #0
 80132ea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80132ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80132f0:	2200      	movs	r2, #0
 80132f2:	4619      	mov	r1, r3
 80132f4:	4818      	ldr	r0, [pc, #96]	; (8013358 <MX_TIM1_Init+0x150>)
 80132f6:	f7f4 fbb7 	bl	8007a68 <HAL_TIM_PWM_ConfigChannel>
 80132fa:	4603      	mov	r3, r0
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d001      	beq.n	8013304 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8013300:	f000 fe42 	bl	8013f88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8013304:	2300      	movs	r3, #0
 8013306:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8013308:	2300      	movs	r3, #0
 801330a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 801330c:	2300      	movs	r3, #0
 801330e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8013310:	2300      	movs	r3, #0
 8013312:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8013314:	2300      	movs	r3, #0
 8013316:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8013318:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801331c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 801331e:	2300      	movs	r3, #0
 8013320:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8013322:	2300      	movs	r3, #0
 8013324:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8013326:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801332a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 801332c:	2300      	movs	r3, #0
 801332e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8013330:	2300      	movs	r3, #0
 8013332:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8013334:	1d3b      	adds	r3, r7, #4
 8013336:	4619      	mov	r1, r3
 8013338:	4807      	ldr	r0, [pc, #28]	; (8013358 <MX_TIM1_Init+0x150>)
 801333a:	f7f5 f983 	bl	8008644 <HAL_TIMEx_ConfigBreakDeadTime>
 801333e:	4603      	mov	r3, r0
 8013340:	2b00      	cmp	r3, #0
 8013342:	d001      	beq.n	8013348 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8013344:	f000 fe20 	bl	8013f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8013348:	4803      	ldr	r0, [pc, #12]	; (8013358 <MX_TIM1_Init+0x150>)
 801334a:	f001 fd6f 	bl	8014e2c <HAL_TIM_MspPostInit>

}
 801334e:	bf00      	nop
 8013350:	3768      	adds	r7, #104	; 0x68
 8013352:	46bd      	mov	sp, r7
 8013354:	bd80      	pop	{r7, pc}
 8013356:	bf00      	nop
 8013358:	20009474 	.word	0x20009474
 801335c:	40010000 	.word	0x40010000

08013360 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8013360:	b580      	push	{r7, lr}
 8013362:	b08e      	sub	sp, #56	; 0x38
 8013364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8013366:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801336a:	2200      	movs	r2, #0
 801336c:	601a      	str	r2, [r3, #0]
 801336e:	605a      	str	r2, [r3, #4]
 8013370:	609a      	str	r2, [r3, #8]
 8013372:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013374:	f107 031c 	add.w	r3, r7, #28
 8013378:	2200      	movs	r2, #0
 801337a:	601a      	str	r2, [r3, #0]
 801337c:	605a      	str	r2, [r3, #4]
 801337e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8013380:	463b      	mov	r3, r7
 8013382:	2200      	movs	r2, #0
 8013384:	601a      	str	r2, [r3, #0]
 8013386:	605a      	str	r2, [r3, #4]
 8013388:	609a      	str	r2, [r3, #8]
 801338a:	60da      	str	r2, [r3, #12]
 801338c:	611a      	str	r2, [r3, #16]
 801338e:	615a      	str	r2, [r3, #20]
 8013390:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8013392:	4b2d      	ldr	r3, [pc, #180]	; (8013448 <MX_TIM2_Init+0xe8>)
 8013394:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8013398:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 801339a:	4b2b      	ldr	r3, [pc, #172]	; (8013448 <MX_TIM2_Init+0xe8>)
 801339c:	2200      	movs	r2, #0
 801339e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80133a0:	4b29      	ldr	r3, [pc, #164]	; (8013448 <MX_TIM2_Init+0xe8>)
 80133a2:	2200      	movs	r2, #0
 80133a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80133a6:	4b28      	ldr	r3, [pc, #160]	; (8013448 <MX_TIM2_Init+0xe8>)
 80133a8:	2200      	movs	r2, #0
 80133aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80133ac:	4b26      	ldr	r3, [pc, #152]	; (8013448 <MX_TIM2_Init+0xe8>)
 80133ae:	2200      	movs	r2, #0
 80133b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80133b2:	4b25      	ldr	r3, [pc, #148]	; (8013448 <MX_TIM2_Init+0xe8>)
 80133b4:	2200      	movs	r2, #0
 80133b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80133b8:	4823      	ldr	r0, [pc, #140]	; (8013448 <MX_TIM2_Init+0xe8>)
 80133ba:	f7f4 f9b5 	bl	8007728 <HAL_TIM_Base_Init>
 80133be:	4603      	mov	r3, r0
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d001      	beq.n	80133c8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80133c4:	f000 fde0 	bl	8013f88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80133c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80133cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80133ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80133d2:	4619      	mov	r1, r3
 80133d4:	481c      	ldr	r0, [pc, #112]	; (8013448 <MX_TIM2_Init+0xe8>)
 80133d6:	f7f4 fc5f 	bl	8007c98 <HAL_TIM_ConfigClockSource>
 80133da:	4603      	mov	r3, r0
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d001      	beq.n	80133e4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80133e0:	f000 fdd2 	bl	8013f88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80133e4:	4818      	ldr	r0, [pc, #96]	; (8013448 <MX_TIM2_Init+0xe8>)
 80133e6:	f7f4 f9f5 	bl	80077d4 <HAL_TIM_PWM_Init>
 80133ea:	4603      	mov	r3, r0
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d001      	beq.n	80133f4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80133f0:	f000 fdca 	bl	8013f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80133f4:	2300      	movs	r3, #0
 80133f6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80133f8:	2300      	movs	r3, #0
 80133fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80133fc:	f107 031c 	add.w	r3, r7, #28
 8013400:	4619      	mov	r1, r3
 8013402:	4811      	ldr	r0, [pc, #68]	; (8013448 <MX_TIM2_Init+0xe8>)
 8013404:	f7f5 f8c2 	bl	800858c <HAL_TIMEx_MasterConfigSynchronization>
 8013408:	4603      	mov	r3, r0
 801340a:	2b00      	cmp	r3, #0
 801340c:	d001      	beq.n	8013412 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 801340e:	f000 fdbb 	bl	8013f88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8013412:	2360      	movs	r3, #96	; 0x60
 8013414:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8013416:	2300      	movs	r3, #0
 8013418:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801341a:	2300      	movs	r3, #0
 801341c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801341e:	2300      	movs	r3, #0
 8013420:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8013422:	463b      	mov	r3, r7
 8013424:	2200      	movs	r2, #0
 8013426:	4619      	mov	r1, r3
 8013428:	4807      	ldr	r0, [pc, #28]	; (8013448 <MX_TIM2_Init+0xe8>)
 801342a:	f7f4 fb1d 	bl	8007a68 <HAL_TIM_PWM_ConfigChannel>
 801342e:	4603      	mov	r3, r0
 8013430:	2b00      	cmp	r3, #0
 8013432:	d001      	beq.n	8013438 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8013434:	f000 fda8 	bl	8013f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8013438:	4803      	ldr	r0, [pc, #12]	; (8013448 <MX_TIM2_Init+0xe8>)
 801343a:	f001 fcf7 	bl	8014e2c <HAL_TIM_MspPostInit>

}
 801343e:	bf00      	nop
 8013440:	3738      	adds	r7, #56	; 0x38
 8013442:	46bd      	mov	sp, r7
 8013444:	bd80      	pop	{r7, pc}
 8013446:	bf00      	nop
 8013448:	20009808 	.word	0x20009808

0801344c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 801344c:	b580      	push	{r7, lr}
 801344e:	b08e      	sub	sp, #56	; 0x38
 8013450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8013452:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013456:	2200      	movs	r2, #0
 8013458:	601a      	str	r2, [r3, #0]
 801345a:	605a      	str	r2, [r3, #4]
 801345c:	609a      	str	r2, [r3, #8]
 801345e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013460:	f107 031c 	add.w	r3, r7, #28
 8013464:	2200      	movs	r2, #0
 8013466:	601a      	str	r2, [r3, #0]
 8013468:	605a      	str	r2, [r3, #4]
 801346a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801346c:	463b      	mov	r3, r7
 801346e:	2200      	movs	r2, #0
 8013470:	601a      	str	r2, [r3, #0]
 8013472:	605a      	str	r2, [r3, #4]
 8013474:	609a      	str	r2, [r3, #8]
 8013476:	60da      	str	r2, [r3, #12]
 8013478:	611a      	str	r2, [r3, #16]
 801347a:	615a      	str	r2, [r3, #20]
 801347c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 801347e:	4b2c      	ldr	r3, [pc, #176]	; (8013530 <MX_TIM3_Init+0xe4>)
 8013480:	4a2c      	ldr	r2, [pc, #176]	; (8013534 <MX_TIM3_Init+0xe8>)
 8013482:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8013484:	4b2a      	ldr	r3, [pc, #168]	; (8013530 <MX_TIM3_Init+0xe4>)
 8013486:	2200      	movs	r2, #0
 8013488:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 801348a:	4b29      	ldr	r3, [pc, #164]	; (8013530 <MX_TIM3_Init+0xe4>)
 801348c:	2200      	movs	r2, #0
 801348e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8013490:	4b27      	ldr	r3, [pc, #156]	; (8013530 <MX_TIM3_Init+0xe4>)
 8013492:	2200      	movs	r2, #0
 8013494:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8013496:	4b26      	ldr	r3, [pc, #152]	; (8013530 <MX_TIM3_Init+0xe4>)
 8013498:	2200      	movs	r2, #0
 801349a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801349c:	4b24      	ldr	r3, [pc, #144]	; (8013530 <MX_TIM3_Init+0xe4>)
 801349e:	2200      	movs	r2, #0
 80134a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80134a2:	4823      	ldr	r0, [pc, #140]	; (8013530 <MX_TIM3_Init+0xe4>)
 80134a4:	f7f4 f940 	bl	8007728 <HAL_TIM_Base_Init>
 80134a8:	4603      	mov	r3, r0
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d001      	beq.n	80134b2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80134ae:	f000 fd6b 	bl	8013f88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80134b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80134b6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80134b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80134bc:	4619      	mov	r1, r3
 80134be:	481c      	ldr	r0, [pc, #112]	; (8013530 <MX_TIM3_Init+0xe4>)
 80134c0:	f7f4 fbea 	bl	8007c98 <HAL_TIM_ConfigClockSource>
 80134c4:	4603      	mov	r3, r0
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d001      	beq.n	80134ce <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80134ca:	f000 fd5d 	bl	8013f88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80134ce:	4818      	ldr	r0, [pc, #96]	; (8013530 <MX_TIM3_Init+0xe4>)
 80134d0:	f7f4 f980 	bl	80077d4 <HAL_TIM_PWM_Init>
 80134d4:	4603      	mov	r3, r0
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d001      	beq.n	80134de <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80134da:	f000 fd55 	bl	8013f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80134de:	2300      	movs	r3, #0
 80134e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80134e2:	2300      	movs	r3, #0
 80134e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80134e6:	f107 031c 	add.w	r3, r7, #28
 80134ea:	4619      	mov	r1, r3
 80134ec:	4810      	ldr	r0, [pc, #64]	; (8013530 <MX_TIM3_Init+0xe4>)
 80134ee:	f7f5 f84d 	bl	800858c <HAL_TIMEx_MasterConfigSynchronization>
 80134f2:	4603      	mov	r3, r0
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d001      	beq.n	80134fc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80134f8:	f000 fd46 	bl	8013f88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80134fc:	2360      	movs	r3, #96	; 0x60
 80134fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8013500:	2300      	movs	r3, #0
 8013502:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8013504:	2300      	movs	r3, #0
 8013506:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8013508:	2300      	movs	r3, #0
 801350a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801350c:	463b      	mov	r3, r7
 801350e:	2200      	movs	r2, #0
 8013510:	4619      	mov	r1, r3
 8013512:	4807      	ldr	r0, [pc, #28]	; (8013530 <MX_TIM3_Init+0xe4>)
 8013514:	f7f4 faa8 	bl	8007a68 <HAL_TIM_PWM_ConfigChannel>
 8013518:	4603      	mov	r3, r0
 801351a:	2b00      	cmp	r3, #0
 801351c:	d001      	beq.n	8013522 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 801351e:	f000 fd33 	bl	8013f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8013522:	4803      	ldr	r0, [pc, #12]	; (8013530 <MX_TIM3_Init+0xe4>)
 8013524:	f001 fc82 	bl	8014e2c <HAL_TIM_MspPostInit>

}
 8013528:	bf00      	nop
 801352a:	3738      	adds	r7, #56	; 0x38
 801352c:	46bd      	mov	sp, r7
 801352e:	bd80      	pop	{r7, pc}
 8013530:	20008c1c 	.word	0x20008c1c
 8013534:	40000400 	.word	0x40000400

08013538 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8013538:	b580      	push	{r7, lr}
 801353a:	b08e      	sub	sp, #56	; 0x38
 801353c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801353e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013542:	2200      	movs	r2, #0
 8013544:	601a      	str	r2, [r3, #0]
 8013546:	605a      	str	r2, [r3, #4]
 8013548:	609a      	str	r2, [r3, #8]
 801354a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801354c:	f107 031c 	add.w	r3, r7, #28
 8013550:	2200      	movs	r2, #0
 8013552:	601a      	str	r2, [r3, #0]
 8013554:	605a      	str	r2, [r3, #4]
 8013556:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8013558:	463b      	mov	r3, r7
 801355a:	2200      	movs	r2, #0
 801355c:	601a      	str	r2, [r3, #0]
 801355e:	605a      	str	r2, [r3, #4]
 8013560:	609a      	str	r2, [r3, #8]
 8013562:	60da      	str	r2, [r3, #12]
 8013564:	611a      	str	r2, [r3, #16]
 8013566:	615a      	str	r2, [r3, #20]
 8013568:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 801356a:	4b2c      	ldr	r3, [pc, #176]	; (801361c <MX_TIM5_Init+0xe4>)
 801356c:	4a2c      	ldr	r2, [pc, #176]	; (8013620 <MX_TIM5_Init+0xe8>)
 801356e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8013570:	4b2a      	ldr	r3, [pc, #168]	; (801361c <MX_TIM5_Init+0xe4>)
 8013572:	2200      	movs	r2, #0
 8013574:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013576:	4b29      	ldr	r3, [pc, #164]	; (801361c <MX_TIM5_Init+0xe4>)
 8013578:	2200      	movs	r2, #0
 801357a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 801357c:	4b27      	ldr	r3, [pc, #156]	; (801361c <MX_TIM5_Init+0xe4>)
 801357e:	2200      	movs	r2, #0
 8013580:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8013582:	4b26      	ldr	r3, [pc, #152]	; (801361c <MX_TIM5_Init+0xe4>)
 8013584:	2200      	movs	r2, #0
 8013586:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013588:	4b24      	ldr	r3, [pc, #144]	; (801361c <MX_TIM5_Init+0xe4>)
 801358a:	2200      	movs	r2, #0
 801358c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 801358e:	4823      	ldr	r0, [pc, #140]	; (801361c <MX_TIM5_Init+0xe4>)
 8013590:	f7f4 f8ca 	bl	8007728 <HAL_TIM_Base_Init>
 8013594:	4603      	mov	r3, r0
 8013596:	2b00      	cmp	r3, #0
 8013598:	d001      	beq.n	801359e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 801359a:	f000 fcf5 	bl	8013f88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801359e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80135a2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80135a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80135a8:	4619      	mov	r1, r3
 80135aa:	481c      	ldr	r0, [pc, #112]	; (801361c <MX_TIM5_Init+0xe4>)
 80135ac:	f7f4 fb74 	bl	8007c98 <HAL_TIM_ConfigClockSource>
 80135b0:	4603      	mov	r3, r0
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d001      	beq.n	80135ba <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80135b6:	f000 fce7 	bl	8013f88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80135ba:	4818      	ldr	r0, [pc, #96]	; (801361c <MX_TIM5_Init+0xe4>)
 80135bc:	f7f4 f90a 	bl	80077d4 <HAL_TIM_PWM_Init>
 80135c0:	4603      	mov	r3, r0
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d001      	beq.n	80135ca <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80135c6:	f000 fcdf 	bl	8013f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80135ca:	2300      	movs	r3, #0
 80135cc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80135ce:	2300      	movs	r3, #0
 80135d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80135d2:	f107 031c 	add.w	r3, r7, #28
 80135d6:	4619      	mov	r1, r3
 80135d8:	4810      	ldr	r0, [pc, #64]	; (801361c <MX_TIM5_Init+0xe4>)
 80135da:	f7f4 ffd7 	bl	800858c <HAL_TIMEx_MasterConfigSynchronization>
 80135de:	4603      	mov	r3, r0
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d001      	beq.n	80135e8 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80135e4:	f000 fcd0 	bl	8013f88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80135e8:	2360      	movs	r3, #96	; 0x60
 80135ea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80135ec:	2300      	movs	r3, #0
 80135ee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80135f0:	2300      	movs	r3, #0
 80135f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80135f4:	2300      	movs	r3, #0
 80135f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80135f8:	463b      	mov	r3, r7
 80135fa:	220c      	movs	r2, #12
 80135fc:	4619      	mov	r1, r3
 80135fe:	4807      	ldr	r0, [pc, #28]	; (801361c <MX_TIM5_Init+0xe4>)
 8013600:	f7f4 fa32 	bl	8007a68 <HAL_TIM_PWM_ConfigChannel>
 8013604:	4603      	mov	r3, r0
 8013606:	2b00      	cmp	r3, #0
 8013608:	d001      	beq.n	801360e <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 801360a:	f000 fcbd 	bl	8013f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 801360e:	4803      	ldr	r0, [pc, #12]	; (801361c <MX_TIM5_Init+0xe4>)
 8013610:	f001 fc0c 	bl	8014e2c <HAL_TIM_MspPostInit>

}
 8013614:	bf00      	nop
 8013616:	3738      	adds	r7, #56	; 0x38
 8013618:	46bd      	mov	sp, r7
 801361a:	bd80      	pop	{r7, pc}
 801361c:	20008bdc 	.word	0x20008bdc
 8013620:	40000c00 	.word	0x40000c00

08013624 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8013624:	b580      	push	{r7, lr}
 8013626:	b088      	sub	sp, #32
 8013628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801362a:	f107 0310 	add.w	r3, r7, #16
 801362e:	2200      	movs	r2, #0
 8013630:	601a      	str	r2, [r3, #0]
 8013632:	605a      	str	r2, [r3, #4]
 8013634:	609a      	str	r2, [r3, #8]
 8013636:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013638:	1d3b      	adds	r3, r7, #4
 801363a:	2200      	movs	r2, #0
 801363c:	601a      	str	r2, [r3, #0]
 801363e:	605a      	str	r2, [r3, #4]
 8013640:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8013642:	4b1f      	ldr	r3, [pc, #124]	; (80136c0 <MX_TIM8_Init+0x9c>)
 8013644:	4a1f      	ldr	r2, [pc, #124]	; (80136c4 <MX_TIM8_Init+0xa0>)
 8013646:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8013648:	4b1d      	ldr	r3, [pc, #116]	; (80136c0 <MX_TIM8_Init+0x9c>)
 801364a:	2200      	movs	r2, #0
 801364c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 801364e:	4b1c      	ldr	r3, [pc, #112]	; (80136c0 <MX_TIM8_Init+0x9c>)
 8013650:	2200      	movs	r2, #0
 8013652:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 8013654:	4b1a      	ldr	r3, [pc, #104]	; (80136c0 <MX_TIM8_Init+0x9c>)
 8013656:	2200      	movs	r2, #0
 8013658:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801365a:	4b19      	ldr	r3, [pc, #100]	; (80136c0 <MX_TIM8_Init+0x9c>)
 801365c:	2200      	movs	r2, #0
 801365e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8013660:	4b17      	ldr	r3, [pc, #92]	; (80136c0 <MX_TIM8_Init+0x9c>)
 8013662:	2200      	movs	r2, #0
 8013664:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013666:	4b16      	ldr	r3, [pc, #88]	; (80136c0 <MX_TIM8_Init+0x9c>)
 8013668:	2200      	movs	r2, #0
 801366a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 801366c:	4814      	ldr	r0, [pc, #80]	; (80136c0 <MX_TIM8_Init+0x9c>)
 801366e:	f7f4 f85b 	bl	8007728 <HAL_TIM_Base_Init>
 8013672:	4603      	mov	r3, r0
 8013674:	2b00      	cmp	r3, #0
 8013676:	d001      	beq.n	801367c <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8013678:	f000 fc86 	bl	8013f88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801367c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013680:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8013682:	f107 0310 	add.w	r3, r7, #16
 8013686:	4619      	mov	r1, r3
 8013688:	480d      	ldr	r0, [pc, #52]	; (80136c0 <MX_TIM8_Init+0x9c>)
 801368a:	f7f4 fb05 	bl	8007c98 <HAL_TIM_ConfigClockSource>
 801368e:	4603      	mov	r3, r0
 8013690:	2b00      	cmp	r3, #0
 8013692:	d001      	beq.n	8013698 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8013694:	f000 fc78 	bl	8013f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8013698:	2300      	movs	r3, #0
 801369a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 801369c:	2300      	movs	r3, #0
 801369e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80136a0:	2300      	movs	r3, #0
 80136a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80136a4:	1d3b      	adds	r3, r7, #4
 80136a6:	4619      	mov	r1, r3
 80136a8:	4805      	ldr	r0, [pc, #20]	; (80136c0 <MX_TIM8_Init+0x9c>)
 80136aa:	f7f4 ff6f 	bl	800858c <HAL_TIMEx_MasterConfigSynchronization>
 80136ae:	4603      	mov	r3, r0
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d001      	beq.n	80136b8 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 80136b4:	f000 fc68 	bl	8013f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80136b8:	bf00      	nop
 80136ba:	3720      	adds	r7, #32
 80136bc:	46bd      	mov	sp, r7
 80136be:	bd80      	pop	{r7, pc}
 80136c0:	200089d4 	.word	0x200089d4
 80136c4:	40010400 	.word	0x40010400

080136c8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80136c8:	b580      	push	{r7, lr}
 80136ca:	b088      	sub	sp, #32
 80136cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80136ce:	1d3b      	adds	r3, r7, #4
 80136d0:	2200      	movs	r2, #0
 80136d2:	601a      	str	r2, [r3, #0]
 80136d4:	605a      	str	r2, [r3, #4]
 80136d6:	609a      	str	r2, [r3, #8]
 80136d8:	60da      	str	r2, [r3, #12]
 80136da:	611a      	str	r2, [r3, #16]
 80136dc:	615a      	str	r2, [r3, #20]
 80136de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80136e0:	4b19      	ldr	r3, [pc, #100]	; (8013748 <MX_TIM12_Init+0x80>)
 80136e2:	4a1a      	ldr	r2, [pc, #104]	; (801374c <MX_TIM12_Init+0x84>)
 80136e4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80136e6:	4b18      	ldr	r3, [pc, #96]	; (8013748 <MX_TIM12_Init+0x80>)
 80136e8:	2200      	movs	r2, #0
 80136ea:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80136ec:	4b16      	ldr	r3, [pc, #88]	; (8013748 <MX_TIM12_Init+0x80>)
 80136ee:	2200      	movs	r2, #0
 80136f0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 80136f2:	4b15      	ldr	r3, [pc, #84]	; (8013748 <MX_TIM12_Init+0x80>)
 80136f4:	2200      	movs	r2, #0
 80136f6:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80136f8:	4b13      	ldr	r3, [pc, #76]	; (8013748 <MX_TIM12_Init+0x80>)
 80136fa:	2200      	movs	r2, #0
 80136fc:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80136fe:	4b12      	ldr	r3, [pc, #72]	; (8013748 <MX_TIM12_Init+0x80>)
 8013700:	2200      	movs	r2, #0
 8013702:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8013704:	4810      	ldr	r0, [pc, #64]	; (8013748 <MX_TIM12_Init+0x80>)
 8013706:	f7f4 f865 	bl	80077d4 <HAL_TIM_PWM_Init>
 801370a:	4603      	mov	r3, r0
 801370c:	2b00      	cmp	r3, #0
 801370e:	d001      	beq.n	8013714 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8013710:	f000 fc3a 	bl	8013f88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8013714:	2360      	movs	r3, #96	; 0x60
 8013716:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8013718:	2300      	movs	r3, #0
 801371a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801371c:	2300      	movs	r3, #0
 801371e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8013720:	2300      	movs	r3, #0
 8013722:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8013724:	1d3b      	adds	r3, r7, #4
 8013726:	2200      	movs	r2, #0
 8013728:	4619      	mov	r1, r3
 801372a:	4807      	ldr	r0, [pc, #28]	; (8013748 <MX_TIM12_Init+0x80>)
 801372c:	f7f4 f99c 	bl	8007a68 <HAL_TIM_PWM_ConfigChannel>
 8013730:	4603      	mov	r3, r0
 8013732:	2b00      	cmp	r3, #0
 8013734:	d001      	beq.n	801373a <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8013736:	f000 fc27 	bl	8013f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 801373a:	4803      	ldr	r0, [pc, #12]	; (8013748 <MX_TIM12_Init+0x80>)
 801373c:	f001 fb76 	bl	8014e2c <HAL_TIM_MspPostInit>

}
 8013740:	bf00      	nop
 8013742:	3720      	adds	r7, #32
 8013744:	46bd      	mov	sp, r7
 8013746:	bd80      	pop	{r7, pc}
 8013748:	20009848 	.word	0x20009848
 801374c:	40001800 	.word	0x40001800

08013750 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8013750:	b580      	push	{r7, lr}
 8013752:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8013754:	4b14      	ldr	r3, [pc, #80]	; (80137a8 <MX_USART1_UART_Init+0x58>)
 8013756:	4a15      	ldr	r2, [pc, #84]	; (80137ac <MX_USART1_UART_Init+0x5c>)
 8013758:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 801375a:	4b13      	ldr	r3, [pc, #76]	; (80137a8 <MX_USART1_UART_Init+0x58>)
 801375c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8013760:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8013762:	4b11      	ldr	r3, [pc, #68]	; (80137a8 <MX_USART1_UART_Init+0x58>)
 8013764:	2200      	movs	r2, #0
 8013766:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8013768:	4b0f      	ldr	r3, [pc, #60]	; (80137a8 <MX_USART1_UART_Init+0x58>)
 801376a:	2200      	movs	r2, #0
 801376c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801376e:	4b0e      	ldr	r3, [pc, #56]	; (80137a8 <MX_USART1_UART_Init+0x58>)
 8013770:	2200      	movs	r2, #0
 8013772:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8013774:	4b0c      	ldr	r3, [pc, #48]	; (80137a8 <MX_USART1_UART_Init+0x58>)
 8013776:	220c      	movs	r2, #12
 8013778:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801377a:	4b0b      	ldr	r3, [pc, #44]	; (80137a8 <MX_USART1_UART_Init+0x58>)
 801377c:	2200      	movs	r2, #0
 801377e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8013780:	4b09      	ldr	r3, [pc, #36]	; (80137a8 <MX_USART1_UART_Init+0x58>)
 8013782:	2200      	movs	r2, #0
 8013784:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8013786:	4b08      	ldr	r3, [pc, #32]	; (80137a8 <MX_USART1_UART_Init+0x58>)
 8013788:	2200      	movs	r2, #0
 801378a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801378c:	4b06      	ldr	r3, [pc, #24]	; (80137a8 <MX_USART1_UART_Init+0x58>)
 801378e:	2200      	movs	r2, #0
 8013790:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8013792:	4805      	ldr	r0, [pc, #20]	; (80137a8 <MX_USART1_UART_Init+0x58>)
 8013794:	f7f4 fff2 	bl	800877c <HAL_UART_Init>
 8013798:	4603      	mov	r3, r0
 801379a:	2b00      	cmp	r3, #0
 801379c:	d001      	beq.n	80137a2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 801379e:	f000 fbf3 	bl	8013f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80137a2:	bf00      	nop
 80137a4:	bd80      	pop	{r7, pc}
 80137a6:	bf00      	nop
 80137a8:	200091a0 	.word	0x200091a0
 80137ac:	40011000 	.word	0x40011000

080137b0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80137b0:	b580      	push	{r7, lr}
 80137b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80137b4:	4b14      	ldr	r3, [pc, #80]	; (8013808 <MX_USART6_UART_Init+0x58>)
 80137b6:	4a15      	ldr	r2, [pc, #84]	; (801380c <MX_USART6_UART_Init+0x5c>)
 80137b8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80137ba:	4b13      	ldr	r3, [pc, #76]	; (8013808 <MX_USART6_UART_Init+0x58>)
 80137bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80137c0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80137c2:	4b11      	ldr	r3, [pc, #68]	; (8013808 <MX_USART6_UART_Init+0x58>)
 80137c4:	2200      	movs	r2, #0
 80137c6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80137c8:	4b0f      	ldr	r3, [pc, #60]	; (8013808 <MX_USART6_UART_Init+0x58>)
 80137ca:	2200      	movs	r2, #0
 80137cc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80137ce:	4b0e      	ldr	r3, [pc, #56]	; (8013808 <MX_USART6_UART_Init+0x58>)
 80137d0:	2200      	movs	r2, #0
 80137d2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80137d4:	4b0c      	ldr	r3, [pc, #48]	; (8013808 <MX_USART6_UART_Init+0x58>)
 80137d6:	220c      	movs	r2, #12
 80137d8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80137da:	4b0b      	ldr	r3, [pc, #44]	; (8013808 <MX_USART6_UART_Init+0x58>)
 80137dc:	2200      	movs	r2, #0
 80137de:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80137e0:	4b09      	ldr	r3, [pc, #36]	; (8013808 <MX_USART6_UART_Init+0x58>)
 80137e2:	2200      	movs	r2, #0
 80137e4:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80137e6:	4b08      	ldr	r3, [pc, #32]	; (8013808 <MX_USART6_UART_Init+0x58>)
 80137e8:	2200      	movs	r2, #0
 80137ea:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80137ec:	4b06      	ldr	r3, [pc, #24]	; (8013808 <MX_USART6_UART_Init+0x58>)
 80137ee:	2200      	movs	r2, #0
 80137f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80137f2:	4805      	ldr	r0, [pc, #20]	; (8013808 <MX_USART6_UART_Init+0x58>)
 80137f4:	f7f4 ffc2 	bl	800877c <HAL_UART_Init>
 80137f8:	4603      	mov	r3, r0
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d001      	beq.n	8013802 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80137fe:	f000 fbc3 	bl	8013f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8013802:	bf00      	nop
 8013804:	bd80      	pop	{r7, pc}
 8013806:	bf00      	nop
 8013808:	20009744 	.word	0x20009744
 801380c:	40011400 	.word	0x40011400

08013810 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8013810:	b580      	push	{r7, lr}
 8013812:	b082      	sub	sp, #8
 8013814:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8013816:	4b10      	ldr	r3, [pc, #64]	; (8013858 <MX_DMA_Init+0x48>)
 8013818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801381a:	4a0f      	ldr	r2, [pc, #60]	; (8013858 <MX_DMA_Init+0x48>)
 801381c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8013820:	6313      	str	r3, [r2, #48]	; 0x30
 8013822:	4b0d      	ldr	r3, [pc, #52]	; (8013858 <MX_DMA_Init+0x48>)
 8013824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801382a:	607b      	str	r3, [r7, #4]
 801382c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 801382e:	2200      	movs	r2, #0
 8013830:	2105      	movs	r1, #5
 8013832:	203b      	movs	r0, #59	; 0x3b
 8013834:	f7ed f9e6 	bl	8000c04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8013838:	203b      	movs	r0, #59	; 0x3b
 801383a:	f7ed f9ff 	bl	8000c3c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 801383e:	2200      	movs	r2, #0
 8013840:	2105      	movs	r1, #5
 8013842:	2045      	movs	r0, #69	; 0x45
 8013844:	f7ed f9de 	bl	8000c04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8013848:	2045      	movs	r0, #69	; 0x45
 801384a:	f7ed f9f7 	bl	8000c3c <HAL_NVIC_EnableIRQ>

}
 801384e:	bf00      	nop
 8013850:	3708      	adds	r7, #8
 8013852:	46bd      	mov	sp, r7
 8013854:	bd80      	pop	{r7, pc}
 8013856:	bf00      	nop
 8013858:	40023800 	.word	0x40023800

0801385c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 801385c:	b580      	push	{r7, lr}
 801385e:	b088      	sub	sp, #32
 8013860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8013862:	1d3b      	adds	r3, r7, #4
 8013864:	2200      	movs	r2, #0
 8013866:	601a      	str	r2, [r3, #0]
 8013868:	605a      	str	r2, [r3, #4]
 801386a:	609a      	str	r2, [r3, #8]
 801386c:	60da      	str	r2, [r3, #12]
 801386e:	611a      	str	r2, [r3, #16]
 8013870:	615a      	str	r2, [r3, #20]
 8013872:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8013874:	4b1f      	ldr	r3, [pc, #124]	; (80138f4 <MX_FMC_Init+0x98>)
 8013876:	4a20      	ldr	r2, [pc, #128]	; (80138f8 <MX_FMC_Init+0x9c>)
 8013878:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 801387a:	4b1e      	ldr	r3, [pc, #120]	; (80138f4 <MX_FMC_Init+0x98>)
 801387c:	2200      	movs	r2, #0
 801387e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8013880:	4b1c      	ldr	r3, [pc, #112]	; (80138f4 <MX_FMC_Init+0x98>)
 8013882:	2200      	movs	r2, #0
 8013884:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8013886:	4b1b      	ldr	r3, [pc, #108]	; (80138f4 <MX_FMC_Init+0x98>)
 8013888:	2204      	movs	r2, #4
 801388a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 801388c:	4b19      	ldr	r3, [pc, #100]	; (80138f4 <MX_FMC_Init+0x98>)
 801388e:	2210      	movs	r2, #16
 8013890:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8013892:	4b18      	ldr	r3, [pc, #96]	; (80138f4 <MX_FMC_Init+0x98>)
 8013894:	2240      	movs	r2, #64	; 0x40
 8013896:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8013898:	4b16      	ldr	r3, [pc, #88]	; (80138f4 <MX_FMC_Init+0x98>)
 801389a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 801389e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80138a0:	4b14      	ldr	r3, [pc, #80]	; (80138f4 <MX_FMC_Init+0x98>)
 80138a2:	2200      	movs	r2, #0
 80138a4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80138a6:	4b13      	ldr	r3, [pc, #76]	; (80138f4 <MX_FMC_Init+0x98>)
 80138a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80138ac:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80138ae:	4b11      	ldr	r3, [pc, #68]	; (80138f4 <MX_FMC_Init+0x98>)
 80138b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80138b4:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80138b6:	4b0f      	ldr	r3, [pc, #60]	; (80138f4 <MX_FMC_Init+0x98>)
 80138b8:	2200      	movs	r2, #0
 80138ba:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80138bc:	2302      	movs	r3, #2
 80138be:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80138c0:	2307      	movs	r3, #7
 80138c2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80138c4:	2304      	movs	r3, #4
 80138c6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80138c8:	2307      	movs	r3, #7
 80138ca:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80138cc:	2303      	movs	r3, #3
 80138ce:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80138d0:	2302      	movs	r3, #2
 80138d2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80138d4:	2302      	movs	r3, #2
 80138d6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80138d8:	1d3b      	adds	r3, r7, #4
 80138da:	4619      	mov	r1, r3
 80138dc:	4805      	ldr	r0, [pc, #20]	; (80138f4 <MX_FMC_Init+0x98>)
 80138de:	f7f3 fe93 	bl	8007608 <HAL_SDRAM_Init>
 80138e2:	4603      	mov	r3, r0
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d001      	beq.n	80138ec <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80138e8:	f000 fb4e 	bl	8013f88 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80138ec:	bf00      	nop
 80138ee:	3720      	adds	r7, #32
 80138f0:	46bd      	mov	sp, r7
 80138f2:	bd80      	pop	{r7, pc}
 80138f4:	20009888 	.word	0x20009888
 80138f8:	a0000140 	.word	0xa0000140

080138fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80138fc:	b580      	push	{r7, lr}
 80138fe:	b090      	sub	sp, #64	; 0x40
 8013900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013902:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013906:	2200      	movs	r2, #0
 8013908:	601a      	str	r2, [r3, #0]
 801390a:	605a      	str	r2, [r3, #4]
 801390c:	609a      	str	r2, [r3, #8]
 801390e:	60da      	str	r2, [r3, #12]
 8013910:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8013912:	4baf      	ldr	r3, [pc, #700]	; (8013bd0 <MX_GPIO_Init+0x2d4>)
 8013914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013916:	4aae      	ldr	r2, [pc, #696]	; (8013bd0 <MX_GPIO_Init+0x2d4>)
 8013918:	f043 0310 	orr.w	r3, r3, #16
 801391c:	6313      	str	r3, [r2, #48]	; 0x30
 801391e:	4bac      	ldr	r3, [pc, #688]	; (8013bd0 <MX_GPIO_Init+0x2d4>)
 8013920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013922:	f003 0310 	and.w	r3, r3, #16
 8013926:	62bb      	str	r3, [r7, #40]	; 0x28
 8013928:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 801392a:	4ba9      	ldr	r3, [pc, #676]	; (8013bd0 <MX_GPIO_Init+0x2d4>)
 801392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801392e:	4aa8      	ldr	r2, [pc, #672]	; (8013bd0 <MX_GPIO_Init+0x2d4>)
 8013930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013934:	6313      	str	r3, [r2, #48]	; 0x30
 8013936:	4ba6      	ldr	r3, [pc, #664]	; (8013bd0 <MX_GPIO_Init+0x2d4>)
 8013938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801393a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801393e:	627b      	str	r3, [r7, #36]	; 0x24
 8013940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8013942:	4ba3      	ldr	r3, [pc, #652]	; (8013bd0 <MX_GPIO_Init+0x2d4>)
 8013944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013946:	4aa2      	ldr	r2, [pc, #648]	; (8013bd0 <MX_GPIO_Init+0x2d4>)
 8013948:	f043 0302 	orr.w	r3, r3, #2
 801394c:	6313      	str	r3, [r2, #48]	; 0x30
 801394e:	4ba0      	ldr	r3, [pc, #640]	; (8013bd0 <MX_GPIO_Init+0x2d4>)
 8013950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013952:	f003 0302 	and.w	r3, r3, #2
 8013956:	623b      	str	r3, [r7, #32]
 8013958:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801395a:	4b9d      	ldr	r3, [pc, #628]	; (8013bd0 <MX_GPIO_Init+0x2d4>)
 801395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801395e:	4a9c      	ldr	r2, [pc, #624]	; (8013bd0 <MX_GPIO_Init+0x2d4>)
 8013960:	f043 0308 	orr.w	r3, r3, #8
 8013964:	6313      	str	r3, [r2, #48]	; 0x30
 8013966:	4b9a      	ldr	r3, [pc, #616]	; (8013bd0 <MX_GPIO_Init+0x2d4>)
 8013968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801396a:	f003 0308 	and.w	r3, r3, #8
 801396e:	61fb      	str	r3, [r7, #28]
 8013970:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8013972:	4b97      	ldr	r3, [pc, #604]	; (8013bd0 <MX_GPIO_Init+0x2d4>)
 8013974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013976:	4a96      	ldr	r2, [pc, #600]	; (8013bd0 <MX_GPIO_Init+0x2d4>)
 8013978:	f043 0304 	orr.w	r3, r3, #4
 801397c:	6313      	str	r3, [r2, #48]	; 0x30
 801397e:	4b94      	ldr	r3, [pc, #592]	; (8013bd0 <MX_GPIO_Init+0x2d4>)
 8013980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013982:	f003 0304 	and.w	r3, r3, #4
 8013986:	61bb      	str	r3, [r7, #24]
 8013988:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801398a:	4b91      	ldr	r3, [pc, #580]	; (8013bd0 <MX_GPIO_Init+0x2d4>)
 801398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801398e:	4a90      	ldr	r2, [pc, #576]	; (8013bd0 <MX_GPIO_Init+0x2d4>)
 8013990:	f043 0301 	orr.w	r3, r3, #1
 8013994:	6313      	str	r3, [r2, #48]	; 0x30
 8013996:	4b8e      	ldr	r3, [pc, #568]	; (8013bd0 <MX_GPIO_Init+0x2d4>)
 8013998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801399a:	f003 0301 	and.w	r3, r3, #1
 801399e:	617b      	str	r3, [r7, #20]
 80139a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80139a2:	4b8b      	ldr	r3, [pc, #556]	; (8013bd0 <MX_GPIO_Init+0x2d4>)
 80139a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139a6:	4a8a      	ldr	r2, [pc, #552]	; (8013bd0 <MX_GPIO_Init+0x2d4>)
 80139a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80139ac:	6313      	str	r3, [r2, #48]	; 0x30
 80139ae:	4b88      	ldr	r3, [pc, #544]	; (8013bd0 <MX_GPIO_Init+0x2d4>)
 80139b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80139b6:	613b      	str	r3, [r7, #16]
 80139b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80139ba:	4b85      	ldr	r3, [pc, #532]	; (8013bd0 <MX_GPIO_Init+0x2d4>)
 80139bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139be:	4a84      	ldr	r2, [pc, #528]	; (8013bd0 <MX_GPIO_Init+0x2d4>)
 80139c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80139c4:	6313      	str	r3, [r2, #48]	; 0x30
 80139c6:	4b82      	ldr	r3, [pc, #520]	; (8013bd0 <MX_GPIO_Init+0x2d4>)
 80139c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80139ce:	60fb      	str	r3, [r7, #12]
 80139d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80139d2:	4b7f      	ldr	r3, [pc, #508]	; (8013bd0 <MX_GPIO_Init+0x2d4>)
 80139d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139d6:	4a7e      	ldr	r2, [pc, #504]	; (8013bd0 <MX_GPIO_Init+0x2d4>)
 80139d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80139dc:	6313      	str	r3, [r2, #48]	; 0x30
 80139de:	4b7c      	ldr	r3, [pc, #496]	; (8013bd0 <MX_GPIO_Init+0x2d4>)
 80139e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80139e6:	60bb      	str	r3, [r7, #8]
 80139e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80139ea:	4b79      	ldr	r3, [pc, #484]	; (8013bd0 <MX_GPIO_Init+0x2d4>)
 80139ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139ee:	4a78      	ldr	r2, [pc, #480]	; (8013bd0 <MX_GPIO_Init+0x2d4>)
 80139f0:	f043 0320 	orr.w	r3, r3, #32
 80139f4:	6313      	str	r3, [r2, #48]	; 0x30
 80139f6:	4b76      	ldr	r3, [pc, #472]	; (8013bd0 <MX_GPIO_Init+0x2d4>)
 80139f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139fa:	f003 0320 	and.w	r3, r3, #32
 80139fe:	607b      	str	r3, [r7, #4]
 8013a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8013a02:	4b73      	ldr	r3, [pc, #460]	; (8013bd0 <MX_GPIO_Init+0x2d4>)
 8013a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a06:	4a72      	ldr	r2, [pc, #456]	; (8013bd0 <MX_GPIO_Init+0x2d4>)
 8013a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8013a0e:	4b70      	ldr	r3, [pc, #448]	; (8013bd0 <MX_GPIO_Init+0x2d4>)
 8013a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013a16:	603b      	str	r3, [r7, #0]
 8013a18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8013a1a:	2201      	movs	r2, #1
 8013a1c:	2120      	movs	r1, #32
 8013a1e:	486d      	ldr	r0, [pc, #436]	; (8013bd4 <MX_GPIO_Init+0x2d8>)
 8013a20:	f7ee f9c8 	bl	8001db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1, GPIO_PIN_RESET);
 8013a24:	2200      	movs	r2, #0
 8013a26:	210e      	movs	r1, #14
 8013a28:	486b      	ldr	r0, [pc, #428]	; (8013bd8 <MX_GPIO_Init+0x2dc>)
 8013a2a:	f7ee f9c3 	bl	8001db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8013a2e:	2201      	movs	r2, #1
 8013a30:	2108      	movs	r1, #8
 8013a32:	486a      	ldr	r0, [pc, #424]	; (8013bdc <MX_GPIO_Init+0x2e0>)
 8013a34:	f7ee f9be 	bl	8001db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8013a38:	2201      	movs	r2, #1
 8013a3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8013a3e:	4866      	ldr	r0, [pc, #408]	; (8013bd8 <MX_GPIO_Init+0x2dc>)
 8013a40:	f7ee f9b8 	bl	8001db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8013a44:	2200      	movs	r2, #0
 8013a46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8013a4a:	4865      	ldr	r0, [pc, #404]	; (8013be0 <MX_GPIO_Init+0x2e4>)
 8013a4c:	f7ee f9b2 	bl	8001db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8013a50:	2200      	movs	r2, #0
 8013a52:	21c8      	movs	r1, #200	; 0xc8
 8013a54:	4863      	ldr	r0, [pc, #396]	; (8013be4 <MX_GPIO_Init+0x2e8>)
 8013a56:	f7ee f9ad 	bl	8001db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8013a5a:	2308      	movs	r3, #8
 8013a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013a5e:	2300      	movs	r3, #0
 8013a60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013a62:	2300      	movs	r3, #0
 8013a64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8013a66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013a6a:	4619      	mov	r1, r3
 8013a6c:	485e      	ldr	r0, [pc, #376]	; (8013be8 <MX_GPIO_Init+0x2ec>)
 8013a6e:	f7ed ffdf 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8013a72:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8013a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013a78:	2302      	movs	r3, #2
 8013a7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013a7c:	2300      	movs	r3, #0
 8013a7e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013a80:	2303      	movs	r3, #3
 8013a82:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8013a84:	230b      	movs	r3, #11
 8013a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013a88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013a8c:	4619      	mov	r1, r3
 8013a8e:	4855      	ldr	r0, [pc, #340]	; (8013be4 <MX_GPIO_Init+0x2e8>)
 8013a90:	f7ed ffce 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8013a94:	f643 4323 	movw	r3, #15395	; 0x3c23
 8013a98:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013a9a:	2302      	movs	r3, #2
 8013a9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013a9e:	2300      	movs	r3, #0
 8013aa0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013aa2:	2303      	movs	r3, #3
 8013aa4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8013aa6:	230a      	movs	r3, #10
 8013aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013aaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013aae:	4619      	mov	r1, r3
 8013ab0:	484e      	ldr	r0, [pc, #312]	; (8013bec <MX_GPIO_Init+0x2f0>)
 8013ab2:	f7ed ffbd 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8013ab6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013abc:	2300      	movs	r3, #0
 8013abe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013ac0:	2300      	movs	r3, #0
 8013ac2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8013ac4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013ac8:	4619      	mov	r1, r3
 8013aca:	4849      	ldr	r0, [pc, #292]	; (8013bf0 <MX_GPIO_Init+0x2f4>)
 8013acc:	f7ed ffb0 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8013ad0:	2340      	movs	r3, #64	; 0x40
 8013ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8013ad4:	4b47      	ldr	r3, [pc, #284]	; (8013bf4 <MX_GPIO_Init+0x2f8>)
 8013ad6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013ad8:	2300      	movs	r3, #0
 8013ada:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8013adc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013ae0:	4619      	mov	r1, r3
 8013ae2:	483c      	ldr	r0, [pc, #240]	; (8013bd4 <MX_GPIO_Init+0x2d8>)
 8013ae4:	f7ed ffa4 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8013ae8:	2320      	movs	r3, #32
 8013aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013aec:	2301      	movs	r3, #1
 8013aee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013af0:	2300      	movs	r3, #0
 8013af2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013af4:	2300      	movs	r3, #0
 8013af6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8013af8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013afc:	4619      	mov	r1, r3
 8013afe:	4835      	ldr	r0, [pc, #212]	; (8013bd4 <MX_GPIO_Init+0x2d8>)
 8013b00:	f7ed ff96 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 8013b04:	f241 030e 	movw	r3, #4110	; 0x100e
 8013b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013b0a:	2301      	movs	r3, #1
 8013b0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013b0e:	2300      	movs	r3, #0
 8013b10:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013b12:	2300      	movs	r3, #0
 8013b14:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8013b16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013b1a:	4619      	mov	r1, r3
 8013b1c:	482e      	ldr	r0, [pc, #184]	; (8013bd8 <MX_GPIO_Init+0x2dc>)
 8013b1e:	f7ed ff87 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8013b22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013b28:	2300      	movs	r3, #0
 8013b2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8013b30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013b34:	4619      	mov	r1, r3
 8013b36:	4830      	ldr	r0, [pc, #192]	; (8013bf8 <MX_GPIO_Init+0x2fc>)
 8013b38:	f7ed ff7a 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8013b3c:	2308      	movs	r3, #8
 8013b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013b40:	2301      	movs	r3, #1
 8013b42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013b44:	2300      	movs	r3, #0
 8013b46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013b48:	2300      	movs	r3, #0
 8013b4a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8013b4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013b50:	4619      	mov	r1, r3
 8013b52:	4822      	ldr	r0, [pc, #136]	; (8013bdc <MX_GPIO_Init+0x2e0>)
 8013b54:	f7ed ff6c 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8013b58:	2310      	movs	r3, #16
 8013b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013b5c:	2300      	movs	r3, #0
 8013b5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013b60:	2300      	movs	r3, #0
 8013b62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8013b64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013b68:	4619      	mov	r1, r3
 8013b6a:	481a      	ldr	r0, [pc, #104]	; (8013bd4 <MX_GPIO_Init+0x2d8>)
 8013b6c:	f7ed ff60 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8013b70:	f248 0304 	movw	r3, #32772	; 0x8004
 8013b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013b76:	2300      	movs	r3, #0
 8013b78:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013b7a:	2300      	movs	r3, #0
 8013b7c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8013b7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013b82:	4619      	mov	r1, r3
 8013b84:	4816      	ldr	r0, [pc, #88]	; (8013be0 <MX_GPIO_Init+0x2e4>)
 8013b86:	f7ed ff53 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8013b8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013b90:	2301      	movs	r3, #1
 8013b92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013b94:	2300      	movs	r3, #0
 8013b96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013b98:	2300      	movs	r3, #0
 8013b9a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8013b9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013ba0:	4619      	mov	r1, r3
 8013ba2:	480f      	ldr	r0, [pc, #60]	; (8013be0 <MX_GPIO_Init+0x2e4>)
 8013ba4:	f7ed ff44 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8013ba8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8013bae:	4b13      	ldr	r3, [pc, #76]	; (8013bfc <MX_GPIO_Init+0x300>)
 8013bb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013bb2:	2300      	movs	r3, #0
 8013bb4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8013bb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013bba:	4619      	mov	r1, r3
 8013bbc:	4806      	ldr	r0, [pc, #24]	; (8013bd8 <MX_GPIO_Init+0x2dc>)
 8013bbe:	f7ed ff37 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8013bc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8013bc8:	4b0a      	ldr	r3, [pc, #40]	; (8013bf4 <MX_GPIO_Init+0x2f8>)
 8013bca:	633b      	str	r3, [r7, #48]	; 0x30
 8013bcc:	e018      	b.n	8013c00 <MX_GPIO_Init+0x304>
 8013bce:	bf00      	nop
 8013bd0:	40023800 	.word	0x40023800
 8013bd4:	40020c00 	.word	0x40020c00
 8013bd8:	40022000 	.word	0x40022000
 8013bdc:	40022800 	.word	0x40022800
 8013be0:	40021c00 	.word	0x40021c00
 8013be4:	40021800 	.word	0x40021800
 8013be8:	40021000 	.word	0x40021000
 8013bec:	40020400 	.word	0x40020400
 8013bf0:	40022400 	.word	0x40022400
 8013bf4:	10120000 	.word	0x10120000
 8013bf8:	40020800 	.word	0x40020800
 8013bfc:	10110000 	.word	0x10110000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013c00:	2300      	movs	r3, #0
 8013c02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8013c04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013c08:	4619      	mov	r1, r3
 8013c0a:	4845      	ldr	r0, [pc, #276]	; (8013d20 <MX_GPIO_Init+0x424>)
 8013c0c:	f7ed ff10 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8013c10:	2310      	movs	r3, #16
 8013c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013c14:	2302      	movs	r3, #2
 8013c16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013c18:	2300      	movs	r3, #0
 8013c1a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013c1c:	2303      	movs	r3, #3
 8013c1e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8013c20:	230a      	movs	r3, #10
 8013c22:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8013c24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013c28:	4619      	mov	r1, r3
 8013c2a:	483e      	ldr	r0, [pc, #248]	; (8013d24 <MX_GPIO_Init+0x428>)
 8013c2c:	f7ed ff00 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8013c30:	23c8      	movs	r3, #200	; 0xc8
 8013c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013c34:	2301      	movs	r3, #1
 8013c36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013c38:	2300      	movs	r3, #0
 8013c3a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013c3c:	2300      	movs	r3, #0
 8013c3e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013c40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013c44:	4619      	mov	r1, r3
 8013c46:	4838      	ldr	r0, [pc, #224]	; (8013d28 <MX_GPIO_Init+0x42c>)
 8013c48:	f7ed fef2 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8013c4c:	2305      	movs	r3, #5
 8013c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013c50:	2302      	movs	r3, #2
 8013c52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013c54:	2300      	movs	r3, #0
 8013c56:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013c58:	2303      	movs	r3, #3
 8013c5a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8013c5c:	230a      	movs	r3, #10
 8013c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013c60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013c64:	4619      	mov	r1, r3
 8013c66:	4831      	ldr	r0, [pc, #196]	; (8013d2c <MX_GPIO_Init+0x430>)
 8013c68:	f7ed fee2 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8013c6c:	2332      	movs	r3, #50	; 0x32
 8013c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013c70:	2302      	movs	r3, #2
 8013c72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013c74:	2300      	movs	r3, #0
 8013c76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013c78:	2303      	movs	r3, #3
 8013c7a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8013c7c:	230b      	movs	r3, #11
 8013c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013c80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013c84:	4619      	mov	r1, r3
 8013c86:	4829      	ldr	r0, [pc, #164]	; (8013d2c <MX_GPIO_Init+0x430>)
 8013c88:	f7ed fed2 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8013c8c:	2304      	movs	r3, #4
 8013c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013c90:	2300      	movs	r3, #0
 8013c92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013c94:	2300      	movs	r3, #0
 8013c96:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8013c98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013c9c:	4619      	mov	r1, r3
 8013c9e:	4822      	ldr	r0, [pc, #136]	; (8013d28 <MX_GPIO_Init+0x42c>)
 8013ca0:	f7ed fec6 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8013ca4:	2386      	movs	r3, #134	; 0x86
 8013ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013ca8:	2302      	movs	r3, #2
 8013caa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013cac:	2300      	movs	r3, #0
 8013cae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013cb0:	2303      	movs	r3, #3
 8013cb2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8013cb4:	230b      	movs	r3, #11
 8013cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013cb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013cbc:	4619      	mov	r1, r3
 8013cbe:	481c      	ldr	r0, [pc, #112]	; (8013d30 <MX_GPIO_Init+0x434>)
 8013cc0:	f7ed feb6 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8013cc4:	2328      	movs	r3, #40	; 0x28
 8013cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013cc8:	2302      	movs	r3, #2
 8013cca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013ccc:	2300      	movs	r3, #0
 8013cce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013cd0:	2303      	movs	r3, #3
 8013cd2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8013cd4:	230a      	movs	r3, #10
 8013cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013cd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013cdc:	4619      	mov	r1, r3
 8013cde:	4814      	ldr	r0, [pc, #80]	; (8013d30 <MX_GPIO_Init+0x434>)
 8013ce0:	f7ed fea6 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8013ce4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8013ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013cea:	2302      	movs	r3, #2
 8013cec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013cee:	2300      	movs	r3, #0
 8013cf0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013cf2:	2300      	movs	r3, #0
 8013cf4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8013cf6:	2305      	movs	r3, #5
 8013cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013cfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013cfe:	4619      	mov	r1, r3
 8013d00:	480c      	ldr	r0, [pc, #48]	; (8013d34 <MX_GPIO_Init+0x438>)
 8013d02:	f7ed fe95 	bl	8001a30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8013d06:	2200      	movs	r2, #0
 8013d08:	2105      	movs	r1, #5
 8013d0a:	2028      	movs	r0, #40	; 0x28
 8013d0c:	f7ec ff7a 	bl	8000c04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8013d10:	2028      	movs	r0, #40	; 0x28
 8013d12:	f7ec ff93 	bl	8000c3c <HAL_NVIC_EnableIRQ>

}
 8013d16:	bf00      	nop
 8013d18:	3740      	adds	r7, #64	; 0x40
 8013d1a:	46bd      	mov	sp, r7
 8013d1c:	bd80      	pop	{r7, pc}
 8013d1e:	bf00      	nop
 8013d20:	40022000 	.word	0x40022000
 8013d24:	40021c00 	.word	0x40021c00
 8013d28:	40021800 	.word	0x40021800
 8013d2c:	40020800 	.word	0x40020800
 8013d30:	40020000 	.word	0x40020000
 8013d34:	40020400 	.word	0x40020400

08013d38 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8013d38:	b580      	push	{r7, lr}
 8013d3a:	b082      	sub	sp, #8
 8013d3c:	af00      	add	r7, sp, #0
 8013d3e:	4603      	mov	r3, r0
 8013d40:	80fb      	strh	r3, [r7, #6]

	/* NOTE: This function Should not be modified, when the callback is needed,
		   the HAL_GPIO_EXTI_Callback could be implemented in the user file
	*/

	if(GPIO_Pin == GPIO_PIN_11){
 8013d42:	88fb      	ldrh	r3, [r7, #6]
 8013d44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013d48:	d10b      	bne.n	8013d62 <HAL_GPIO_EXTI_Callback+0x2a>
		b1PushCounter = 10;
 8013d4a:	4b08      	ldr	r3, [pc, #32]	; (8013d6c <HAL_GPIO_EXTI_Callback+0x34>)
 8013d4c:	220a      	movs	r2, #10
 8013d4e:	701a      	strb	r2, [r3, #0]
		b1LongPushCounter = 2000;
 8013d50:	4b07      	ldr	r3, [pc, #28]	; (8013d70 <HAL_GPIO_EXTI_Callback+0x38>)
 8013d52:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8013d56:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 8013d58:	2200      	movs	r2, #0
 8013d5a:	2102      	movs	r1, #2
 8013d5c:	4805      	ldr	r0, [pc, #20]	; (8013d74 <HAL_GPIO_EXTI_Callback+0x3c>)
 8013d5e:	f7ee f829 	bl	8001db4 <HAL_GPIO_WritePin>
	}
}
 8013d62:	bf00      	nop
 8013d64:	3708      	adds	r7, #8
 8013d66:	46bd      	mov	sp, r7
 8013d68:	bd80      	pop	{r7, pc}
 8013d6a:	bf00      	nop
 8013d6c:	200098bc 	.word	0x200098bc
 8013d70:	20008bd8 	.word	0x20008bd8
 8013d74:	40022000 	.word	0x40022000

08013d78 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8013d78:	b5b0      	push	{r4, r5, r7, lr}
 8013d7a:	b0aa      	sub	sp, #168	; 0xa8
 8013d7c:	af02      	add	r7, sp, #8
 8013d7e:	6078      	str	r0, [r7, #4]
    
    
                 
  /* init code for FATFS */
  MX_FATFS_Init();
 8013d80:	f7fe fd18 	bl	80127b4 <MX_FATFS_Init>

  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8013d84:	f001 fbda 	bl	801553c <MX_USB_HOST_Init>

  /* USER CODE BEGIN 5 */
  FRESULT res;                                          /* FatFs function common result code */
  uint32_t byteswritten, bytesread;                     /* File write/read counts */
  uint8_t wtext[] = "This is STM32 working with FatFs"; /* File write buffer */
 8013d88:	4b49      	ldr	r3, [pc, #292]	; (8013eb0 <StartDefaultTask+0x138>)
 8013d8a:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8013d8e:	461d      	mov	r5, r3
 8013d90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013d92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013d94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013d96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013d98:	682b      	ldr	r3, [r5, #0]
 8013d9a:	7023      	strb	r3, [r4, #0]

  /*##-1- Link the micro SD disk I/O driver ##################################*/
//  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
//  {
	/*##-2- Register the file system object to the FatFs module ##############*/
	if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 8013d9c:	2200      	movs	r2, #0
 8013d9e:	4945      	ldr	r1, [pc, #276]	; (8013eb4 <StartDefaultTask+0x13c>)
 8013da0:	4845      	ldr	r0, [pc, #276]	; (8013eb8 <StartDefaultTask+0x140>)
 8013da2:	f7fa fbd9 	bl	800e558 <f_mount>
 8013da6:	4603      	mov	r3, r0
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d002      	beq.n	8013db2 <StartDefaultTask+0x3a>
	{
	  /* FatFs Initialization Error */
	  Error_Handler();
 8013dac:	f000 f8ec 	bl	8013f88 <Error_Handler>
 8013db0:	e064      	b.n	8013e7c <StartDefaultTask+0x104>
	}
	else
	{
	  /*##-3- Create a FAT file system (format) on the logical drive #########*/
	  /* WARNING: Formatting the uSD card will delete all content on the device */
	  if(f_mkfs((TCHAR const*)SDPath, FM_FAT32, 0, workBuffer, sizeof(workBuffer)) != FR_OK)
 8013db2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013db6:	9300      	str	r3, [sp, #0]
 8013db8:	4b40      	ldr	r3, [pc, #256]	; (8013ebc <StartDefaultTask+0x144>)
 8013dba:	2200      	movs	r2, #0
 8013dbc:	2102      	movs	r1, #2
 8013dbe:	483d      	ldr	r0, [pc, #244]	; (8013eb4 <StartDefaultTask+0x13c>)
 8013dc0:	f7fb f9be 	bl	800f140 <f_mkfs>
 8013dc4:	4603      	mov	r3, r0
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d002      	beq.n	8013dd0 <StartDefaultTask+0x58>
	  {
		/* FatFs Format Error */
		Error_Handler();
 8013dca:	f000 f8dd 	bl	8013f88 <Error_Handler>
 8013dce:	e055      	b.n	8013e7c <StartDefaultTask+0x104>
	  }
	  else
	  {
		/*##-4- Create and Open a new text file object with write access #####*/
		if(f_open(&MyFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8013dd0:	220a      	movs	r2, #10
 8013dd2:	493b      	ldr	r1, [pc, #236]	; (8013ec0 <StartDefaultTask+0x148>)
 8013dd4:	483b      	ldr	r0, [pc, #236]	; (8013ec4 <StartDefaultTask+0x14c>)
 8013dd6:	f7fa fc23 	bl	800e620 <f_open>
 8013dda:	4603      	mov	r3, r0
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d002      	beq.n	8013de6 <StartDefaultTask+0x6e>
		{
		  /* 'STM32.TXT' file Open for write Error */
		  Error_Handler();
 8013de0:	f000 f8d2 	bl	8013f88 <Error_Handler>
 8013de4:	e04a      	b.n	8013e7c <StartDefaultTask+0x104>
		}
		else
		{
		  /*##-5- Write data to the text file ################################*/
		  res = f_write(&MyFile, wtext, sizeof(wtext), (void *)&byteswritten);
 8013de6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8013dea:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8013dee:	2221      	movs	r2, #33	; 0x21
 8013df0:	4834      	ldr	r0, [pc, #208]	; (8013ec4 <StartDefaultTask+0x14c>)
 8013df2:	f7fa ff48 	bl	800ec86 <f_write>
 8013df6:	4603      	mov	r3, r0
 8013df8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

		  if((byteswritten == 0) || (res != FR_OK))
 8013dfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d003      	beq.n	8013e0c <StartDefaultTask+0x94>
 8013e04:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d002      	beq.n	8013e12 <StartDefaultTask+0x9a>
		  {
			/* 'STM32.TXT' file Write or EOF Error */
			Error_Handler();
 8013e0c:	f000 f8bc 	bl	8013f88 <Error_Handler>
 8013e10:	e034      	b.n	8013e7c <StartDefaultTask+0x104>
		  }
		  else
		  {
			/*##-6- Close the open text file #################################*/
			f_close(&MyFile);
 8013e12:	482c      	ldr	r0, [pc, #176]	; (8013ec4 <StartDefaultTask+0x14c>)
 8013e14:	f7fb f964 	bl	800f0e0 <f_close>

			/*##-7- Open the text file object with read access ###############*/
			if(f_open(&MyFile, "STM32.TXT", FA_READ) != FR_OK)
 8013e18:	2201      	movs	r2, #1
 8013e1a:	4929      	ldr	r1, [pc, #164]	; (8013ec0 <StartDefaultTask+0x148>)
 8013e1c:	4829      	ldr	r0, [pc, #164]	; (8013ec4 <StartDefaultTask+0x14c>)
 8013e1e:	f7fa fbff 	bl	800e620 <f_open>
 8013e22:	4603      	mov	r3, r0
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d002      	beq.n	8013e2e <StartDefaultTask+0xb6>
			{
			  /* 'STM32.TXT' file Open for read Error */
			  Error_Handler();
 8013e28:	f000 f8ae 	bl	8013f88 <Error_Handler>
 8013e2c:	e026      	b.n	8013e7c <StartDefaultTask+0x104>
			}
			else
			{
			  /*##-8- Read data from the text file ###########################*/
			  res = f_read(&MyFile, rtext, sizeof(rtext), (UINT*)&bytesread);
 8013e2e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8013e32:	f107 010c 	add.w	r1, r7, #12
 8013e36:	2264      	movs	r2, #100	; 0x64
 8013e38:	4822      	ldr	r0, [pc, #136]	; (8013ec4 <StartDefaultTask+0x14c>)
 8013e3a:	f7fa fdb6 	bl	800e9aa <f_read>
 8013e3e:	4603      	mov	r3, r0
 8013e40:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

			  if((bytesread == 0) || (res != FR_OK))
 8013e44:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d003      	beq.n	8013e54 <StartDefaultTask+0xdc>
 8013e4c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d002      	beq.n	8013e5a <StartDefaultTask+0xe2>
			  {
				/* 'STM32.TXT' file Read or EOF Error */
				Error_Handler();
 8013e54:	f000 f898 	bl	8013f88 <Error_Handler>
 8013e58:	e010      	b.n	8013e7c <StartDefaultTask+0x104>
			  }
			  else
			  {
				/*##-9- Close the open text file #############################*/
				f_close(&MyFile);
 8013e5a:	481a      	ldr	r0, [pc, #104]	; (8013ec4 <StartDefaultTask+0x14c>)
 8013e5c:	f7fb f940 	bl	800f0e0 <f_close>

				/*##-10- Compare read data with the expected data ############*/
				if ((bytesread != byteswritten))
 8013e60:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8013e64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013e68:	429a      	cmp	r2, r3
 8013e6a:	d002      	beq.n	8013e72 <StartDefaultTask+0xfa>
				{
				  /* Read data is different from the expected data */
				  Error_Handler();
 8013e6c:	f000 f88c 	bl	8013f88 <Error_Handler>
 8013e70:	e004      	b.n	8013e7c <StartDefaultTask+0x104>
				}
				else
				{
				  /* Success of the demo: no error occurrence */
	//                  BSP_LED_On(LED1);
					HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_SET);
 8013e72:	2201      	movs	r2, #1
 8013e74:	2102      	movs	r1, #2
 8013e76:	4814      	ldr	r0, [pc, #80]	; (8013ec8 <StartDefaultTask+0x150>)
 8013e78:	f7ed ff9c 	bl	8001db4 <HAL_GPIO_WritePin>
//  FATFS_UnLinkDriver(SDPath);

  /* Infinite loop */
  for(;;)
  {
	  if(b1PushCounter > 0){
 8013e7c:	4b13      	ldr	r3, [pc, #76]	; (8013ecc <StartDefaultTask+0x154>)
 8013e7e:	781b      	ldrb	r3, [r3, #0]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d011      	beq.n	8013ea8 <StartDefaultTask+0x130>
		  if(--b1PushCounter == 0){
 8013e84:	4b11      	ldr	r3, [pc, #68]	; (8013ecc <StartDefaultTask+0x154>)
 8013e86:	781b      	ldrb	r3, [r3, #0]
 8013e88:	3b01      	subs	r3, #1
 8013e8a:	b2da      	uxtb	r2, r3
 8013e8c:	4b0f      	ldr	r3, [pc, #60]	; (8013ecc <StartDefaultTask+0x154>)
 8013e8e:	701a      	strb	r2, [r3, #0]
 8013e90:	4b0e      	ldr	r3, [pc, #56]	; (8013ecc <StartDefaultTask+0x154>)
 8013e92:	781b      	ldrb	r3, [r3, #0]
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d107      	bne.n	8013ea8 <StartDefaultTask+0x130>
			  b1LongPushCounter = 0;
 8013e98:	4b0d      	ldr	r3, [pc, #52]	; (8013ed0 <StartDefaultTask+0x158>)
 8013e9a:	2200      	movs	r2, #0
 8013e9c:	801a      	strh	r2, [r3, #0]
			  osSemaphoreRelease(sdReadBinarySemHandle);
 8013e9e:	4b0d      	ldr	r3, [pc, #52]	; (8013ed4 <StartDefaultTask+0x15c>)
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	f7fb ff18 	bl	800fcd8 <osSemaphoreRelease>
		  }
	  }
    osDelay(1);
 8013ea8:	2001      	movs	r0, #1
 8013eaa:	f7fb fe8e 	bl	800fbca <osDelay>
	  if(b1PushCounter > 0){
 8013eae:	e7e5      	b.n	8013e7c <StartDefaultTask+0x104>
 8013eb0:	08015e68 	.word	0x08015e68
 8013eb4:	20008498 	.word	0x20008498
 8013eb8:	20009240 	.word	0x20009240
 8013ebc:	20008d08 	.word	0x20008d08
 8013ec0:	08015e5c 	.word	0x08015e5c
 8013ec4:	200094b4 	.word	0x200094b4
 8013ec8:	40022000 	.word	0x40022000
 8013ecc:	200098bc 	.word	0x200098bc
 8013ed0:	20008bd8 	.word	0x20008bd8
 8013ed4:	200097c4 	.word	0x200097c4

08013ed8 <StartSdReadTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSdReadTask */
void StartSdReadTask(void const * argument)
{
 8013ed8:	b580      	push	{r7, lr}
 8013eda:	b09e      	sub	sp, #120	; 0x78
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSdReadTask */
  FRESULT res;       	/* FatFs function common result code */
  uint32_t bytesread;	/* File write/read counts */
  uint8_t rtext[100];	/* File read buffer */

  osSemaphoreWait(sdReadBinarySemHandle, 0);
 8013ee0:	4b1c      	ldr	r3, [pc, #112]	; (8013f54 <StartSdReadTask+0x7c>)
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	2100      	movs	r1, #0
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	f7fb fea8 	bl	800fc3c <osSemaphoreWait>

  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(sdReadBinarySemHandle, osWaitForever);
 8013eec:	4b19      	ldr	r3, [pc, #100]	; (8013f54 <StartSdReadTask+0x7c>)
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	f7fb fea1 	bl	800fc3c <osSemaphoreWait>

	  /*##-7- Open the text file object with read access ###############*/
	  if(f_open(&MyFile, "STM32.TXT", FA_READ) != FR_OK)
 8013efa:	2201      	movs	r2, #1
 8013efc:	4916      	ldr	r1, [pc, #88]	; (8013f58 <StartSdReadTask+0x80>)
 8013efe:	4817      	ldr	r0, [pc, #92]	; (8013f5c <StartSdReadTask+0x84>)
 8013f00:	f7fa fb8e 	bl	800e620 <f_open>
 8013f04:	4603      	mov	r3, r0
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d002      	beq.n	8013f10 <StartSdReadTask+0x38>
	  {
		  /* 'STM32.TXT' file Open for read Error */
		  Error_Handler();
 8013f0a:	f000 f83d 	bl	8013f88 <Error_Handler>
 8013f0e:	e01c      	b.n	8013f4a <StartSdReadTask+0x72>
	  }
	  else
	  {
		  /*##-8- Read data from the text file ###########################*/
		  res = f_read(&MyFile, rtext, sizeof(rtext), (UINT*)&bytesread);
 8013f10:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8013f14:	f107 010c 	add.w	r1, r7, #12
 8013f18:	2264      	movs	r2, #100	; 0x64
 8013f1a:	4810      	ldr	r0, [pc, #64]	; (8013f5c <StartSdReadTask+0x84>)
 8013f1c:	f7fa fd45 	bl	800e9aa <f_read>
 8013f20:	4603      	mov	r3, r0
 8013f22:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

		  if((bytesread == 0) || (res != FR_OK))
 8013f26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d003      	beq.n	8013f34 <StartSdReadTask+0x5c>
 8013f2c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d002      	beq.n	8013f3a <StartSdReadTask+0x62>
		  {
			/* 'STM32.TXT' file Read or EOF Error */
			Error_Handler();
 8013f34:	f000 f828 	bl	8013f88 <Error_Handler>
 8013f38:	e007      	b.n	8013f4a <StartSdReadTask+0x72>
		  }
		  else
		  {
			/*##-9- Close the open text file #############################*/
			f_close(&MyFile);
 8013f3a:	4808      	ldr	r0, [pc, #32]	; (8013f5c <StartSdReadTask+0x84>)
 8013f3c:	f7fb f8d0 	bl	800f0e0 <f_close>
	//			}
	//			else
	//			{
			  /* Success of the demo: no error occurrence */
	//                  BSP_LED_On(LED1);
			HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_SET);
 8013f40:	2201      	movs	r2, #1
 8013f42:	2102      	movs	r1, #2
 8013f44:	4806      	ldr	r0, [pc, #24]	; (8013f60 <StartSdReadTask+0x88>)
 8013f46:	f7ed ff35 	bl	8001db4 <HAL_GPIO_WritePin>
	//			}
		  }
	  }
	  osDelay(1);
 8013f4a:	2001      	movs	r0, #1
 8013f4c:	f7fb fe3d 	bl	800fbca <osDelay>
	  osSemaphoreWait(sdReadBinarySemHandle, osWaitForever);
 8013f50:	e7cc      	b.n	8013eec <StartSdReadTask+0x14>
 8013f52:	bf00      	nop
 8013f54:	200097c4 	.word	0x200097c4
 8013f58:	08015e5c 	.word	0x08015e5c
 8013f5c:	200094b4 	.word	0x200094b4
 8013f60:	40022000 	.word	0x40022000

08013f64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013f64:	b580      	push	{r7, lr}
 8013f66:	b082      	sub	sp, #8
 8013f68:	af00      	add	r7, sp, #0
 8013f6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	4a04      	ldr	r2, [pc, #16]	; (8013f84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8013f72:	4293      	cmp	r3, r2
 8013f74:	d101      	bne.n	8013f7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8013f76:	f7ec fad9 	bl	800052c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8013f7a:	bf00      	nop
 8013f7c:	3708      	adds	r7, #8
 8013f7e:	46bd      	mov	sp, r7
 8013f80:	bd80      	pop	{r7, pc}
 8013f82:	bf00      	nop
 8013f84:	40001000 	.word	0x40001000

08013f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8013f88:	b480      	push	{r7}
 8013f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8013f8c:	bf00      	nop
 8013f8e:	46bd      	mov	sp, r7
 8013f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f94:	4770      	bx	lr

08013f96 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8013f96:	b580      	push	{r7, lr}
 8013f98:	b084      	sub	sp, #16
 8013f9a:	af00      	add	r7, sp, #0
 8013f9c:	6078      	str	r0, [r7, #4]
  uint32_t timer = osKernelSysTick();
 8013f9e:	f7fb fddd 	bl	800fb5c <osKernelSysTick>
 8013fa2:	60f8      	str	r0, [r7, #12]
  /* block until SDIO peripherial is ready again or a timeout occur */
  while( osKernelSysTick() - timer < timeout)
 8013fa4:	e006      	b.n	8013fb4 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013fa6:	f7fe fbaf 	bl	8012708 <BSP_SD_GetCardState>
 8013faa:	4603      	mov	r3, r0
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d101      	bne.n	8013fb4 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8013fb0:	2300      	movs	r3, #0
 8013fb2:	e009      	b.n	8013fc8 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8013fb4:	f7fb fdd2 	bl	800fb5c <osKernelSysTick>
 8013fb8:	4602      	mov	r2, r0
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	1ad3      	subs	r3, r2, r3
 8013fbe:	687a      	ldr	r2, [r7, #4]
 8013fc0:	429a      	cmp	r2, r3
 8013fc2:	d8f0      	bhi.n	8013fa6 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8013fc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013fc8:	4618      	mov	r0, r3
 8013fca:	3710      	adds	r7, #16
 8013fcc:	46bd      	mov	sp, r7
 8013fce:	bd80      	pop	{r7, pc}

08013fd0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	b082      	sub	sp, #8
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	4603      	mov	r3, r0
 8013fd8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8013fda:	4b0b      	ldr	r3, [pc, #44]	; (8014008 <SD_CheckStatus+0x38>)
 8013fdc:	2201      	movs	r2, #1
 8013fde:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013fe0:	f7fe fb92 	bl	8012708 <BSP_SD_GetCardState>
 8013fe4:	4603      	mov	r3, r0
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d107      	bne.n	8013ffa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8013fea:	4b07      	ldr	r3, [pc, #28]	; (8014008 <SD_CheckStatus+0x38>)
 8013fec:	781b      	ldrb	r3, [r3, #0]
 8013fee:	b2db      	uxtb	r3, r3
 8013ff0:	f023 0301 	bic.w	r3, r3, #1
 8013ff4:	b2da      	uxtb	r2, r3
 8013ff6:	4b04      	ldr	r3, [pc, #16]	; (8014008 <SD_CheckStatus+0x38>)
 8013ff8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8013ffa:	4b03      	ldr	r3, [pc, #12]	; (8014008 <SD_CheckStatus+0x38>)
 8013ffc:	781b      	ldrb	r3, [r3, #0]
 8013ffe:	b2db      	uxtb	r3, r3
}
 8014000:	4618      	mov	r0, r3
 8014002:	3708      	adds	r7, #8
 8014004:	46bd      	mov	sp, r7
 8014006:	bd80      	pop	{r7, pc}
 8014008:	20000028 	.word	0x20000028

0801400c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801400c:	b580      	push	{r7, lr}
 801400e:	b084      	sub	sp, #16
 8014010:	af00      	add	r7, sp, #0
 8014012:	4603      	mov	r3, r0
 8014014:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 8014016:	4b1a      	ldr	r3, [pc, #104]	; (8014080 <SD_initialize+0x74>)
 8014018:	2201      	movs	r2, #1
 801401a:	701a      	strb	r2, [r3, #0]

  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 801401c:	f7fb fd92 	bl	800fb44 <osKernelRunning>
 8014020:	4603      	mov	r3, r0
 8014022:	2b00      	cmp	r3, #0
 8014024:	d025      	beq.n	8014072 <SD_initialize+0x66>
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8014026:	f7fe fb15 	bl	8012654 <BSP_SD_Init>
 801402a:	4603      	mov	r3, r0
 801402c:	2b00      	cmp	r3, #0
 801402e:	d107      	bne.n	8014040 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8014030:	79fb      	ldrb	r3, [r7, #7]
 8014032:	4618      	mov	r0, r3
 8014034:	f7ff ffcc 	bl	8013fd0 <SD_CheckStatus>
 8014038:	4603      	mov	r3, r0
 801403a:	461a      	mov	r2, r3
 801403c:	4b10      	ldr	r3, [pc, #64]	; (8014080 <SD_initialize+0x74>)
 801403e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if ((Stat != STA_NOINIT) && (SDQueueID == NULL))
 8014040:	4b0f      	ldr	r3, [pc, #60]	; (8014080 <SD_initialize+0x74>)
 8014042:	781b      	ldrb	r3, [r3, #0]
 8014044:	b2db      	uxtb	r3, r3
 8014046:	2b01      	cmp	r3, #1
 8014048:	d013      	beq.n	8014072 <SD_initialize+0x66>
 801404a:	4b0e      	ldr	r3, [pc, #56]	; (8014084 <SD_initialize+0x78>)
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	2b00      	cmp	r3, #0
 8014050:	d10f      	bne.n	8014072 <SD_initialize+0x66>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8014052:	4a0d      	ldr	r2, [pc, #52]	; (8014088 <SD_initialize+0x7c>)
 8014054:	f107 0308 	add.w	r3, r7, #8
 8014058:	e892 0003 	ldmia.w	r2, {r0, r1}
 801405c:	e883 0003 	stmia.w	r3, {r0, r1}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8014060:	f107 0308 	add.w	r3, r7, #8
 8014064:	2100      	movs	r1, #0
 8014066:	4618      	mov	r0, r3
 8014068:	f7fb fe7f 	bl	800fd6a <osMessageCreate>
 801406c:	4602      	mov	r2, r0
 801406e:	4b05      	ldr	r3, [pc, #20]	; (8014084 <SD_initialize+0x78>)
 8014070:	601a      	str	r2, [r3, #0]
    }
  }
  return Stat;
 8014072:	4b03      	ldr	r3, [pc, #12]	; (8014080 <SD_initialize+0x74>)
 8014074:	781b      	ldrb	r3, [r3, #0]
 8014076:	b2db      	uxtb	r3, r3
}
 8014078:	4618      	mov	r0, r3
 801407a:	3710      	adds	r7, #16
 801407c:	46bd      	mov	sp, r7
 801407e:	bd80      	pop	{r7, pc}
 8014080:	20000028 	.word	0x20000028
 8014084:	20008434 	.word	0x20008434
 8014088:	08015e8c 	.word	0x08015e8c

0801408c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801408c:	b580      	push	{r7, lr}
 801408e:	b082      	sub	sp, #8
 8014090:	af00      	add	r7, sp, #0
 8014092:	4603      	mov	r3, r0
 8014094:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8014096:	79fb      	ldrb	r3, [r7, #7]
 8014098:	4618      	mov	r0, r3
 801409a:	f7ff ff99 	bl	8013fd0 <SD_CheckStatus>
 801409e:	4603      	mov	r3, r0
}
 80140a0:	4618      	mov	r0, r3
 80140a2:	3708      	adds	r7, #8
 80140a4:	46bd      	mov	sp, r7
 80140a6:	bd80      	pop	{r7, pc}

080140a8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80140a8:	b580      	push	{r7, lr}
 80140aa:	b08e      	sub	sp, #56	; 0x38
 80140ac:	af00      	add	r7, sp, #0
 80140ae:	61b9      	str	r1, [r7, #24]
 80140b0:	617a      	str	r2, [r7, #20]
 80140b2:	613b      	str	r3, [r7, #16]
 80140b4:	4603      	mov	r3, r0
 80140b6:	77fb      	strb	r3, [r7, #31]
  DRESULT res = RES_ERROR;
 80140b8:	2301      	movs	r3, #1
 80140ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80140be:	f247 5030 	movw	r0, #30000	; 0x7530
 80140c2:	f7ff ff68 	bl	8013f96 <SD_CheckStatusWithTimeout>
 80140c6:	4603      	mov	r3, r0
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	da02      	bge.n	80140d2 <SD_read+0x2a>
  {
    return res;
 80140cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80140d0:	e06c      	b.n	80141ac <SD_read+0x104>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 80140d2:	69bb      	ldr	r3, [r7, #24]
 80140d4:	f003 0303 	and.w	r3, r3, #3
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d11e      	bne.n	801411a <SD_read+0x72>
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 80140dc:	693a      	ldr	r2, [r7, #16]
 80140de:	6979      	ldr	r1, [r7, #20]
 80140e0:	69b8      	ldr	r0, [r7, #24]
 80140e2:	f7fe fadd 	bl	80126a0 <BSP_SD_ReadBlocks_DMA>
 80140e6:	4603      	mov	r3, r0
 80140e8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    if (ret == MSD_OK) {
 80140ec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d159      	bne.n	80141a8 <SD_read+0x100>
      /* wait for a message from the queue or a timeout */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80140f4:	4b2f      	ldr	r3, [pc, #188]	; (80141b4 <SD_read+0x10c>)
 80140f6:	6819      	ldr	r1, [r3, #0]
 80140f8:	f107 0320 	add.w	r3, r7, #32
 80140fc:	f247 5230 	movw	r2, #30000	; 0x7530
 8014100:	4618      	mov	r0, r3
 8014102:	f7fb fe85 	bl	800fe10 <osMessageGet>
      if (event.status == osEventMessage) {
 8014106:	6a3b      	ldr	r3, [r7, #32]
 8014108:	2b10      	cmp	r3, #16
 801410a:	d14d      	bne.n	80141a8 <SD_read+0x100>
        if (event.value.v == READ_CPLT_MSG) {
 801410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801410e:	2b01      	cmp	r3, #1
 8014110:	d14a      	bne.n	80141a8 <SD_read+0x100>
          res = RES_OK;
 8014112:	2300      	movs	r3, #0
 8014114:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014118:	e046      	b.n	80141a8 <SD_read+0x100>
#if defined(ENABLE_SCRATCH_BUFFER)
  } else {
    /* Slow path, fetch each sector a part and memcpy to destination buffer */
    int i;
    uint8_t ret;
    for (i = 0; i < count; i++) {
 801411a:	2300      	movs	r3, #0
 801411c:	633b      	str	r3, [r7, #48]	; 0x30
 801411e:	e032      	b.n	8014186 <SD_read+0xde>
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8014120:	697b      	ldr	r3, [r7, #20]
 8014122:	1c5a      	adds	r2, r3, #1
 8014124:	617a      	str	r2, [r7, #20]
 8014126:	2201      	movs	r2, #1
 8014128:	4619      	mov	r1, r3
 801412a:	4823      	ldr	r0, [pc, #140]	; (80141b8 <SD_read+0x110>)
 801412c:	f7fe fab8 	bl	80126a0 <BSP_SD_ReadBlocks_DMA>
 8014130:	4603      	mov	r3, r0
 8014132:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (ret == MSD_OK) {
 8014136:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801413a:	2b00      	cmp	r3, #0
 801413c:	d128      	bne.n	8014190 <SD_read+0xe8>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 801413e:	4b1d      	ldr	r3, [pc, #116]	; (80141b4 <SD_read+0x10c>)
 8014140:	6819      	ldr	r1, [r3, #0]
 8014142:	463b      	mov	r3, r7
 8014144:	f247 5230 	movw	r2, #30000	; 0x7530
 8014148:	4618      	mov	r0, r3
 801414a:	f7fb fe61 	bl	800fe10 <osMessageGet>
 801414e:	f107 0320 	add.w	r3, r7, #32
 8014152:	463a      	mov	r2, r7
 8014154:	ca07      	ldmia	r2, {r0, r1, r2}
 8014156:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 801415a:	6a3b      	ldr	r3, [r7, #32]
 801415c:	2b10      	cmp	r3, #16
 801415e:	d10f      	bne.n	8014180 <SD_read+0xd8>
          if (event.value.v == READ_CPLT_MSG) {
 8014160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014162:	2b01      	cmp	r3, #1
 8014164:	d10c      	bne.n	8014180 <SD_read+0xd8>
            *
            * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
            */
            SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
            memcpy(buff, scratch, BLOCKSIZE);
 8014166:	69bb      	ldr	r3, [r7, #24]
 8014168:	4a13      	ldr	r2, [pc, #76]	; (80141b8 <SD_read+0x110>)
 801416a:	4618      	mov	r0, r3
 801416c:	4611      	mov	r1, r2
 801416e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014172:	461a      	mov	r2, r3
 8014174:	f001 fd3c 	bl	8015bf0 <memcpy>
            buff += BLOCKSIZE;
 8014178:	69bb      	ldr	r3, [r7, #24]
 801417a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801417e:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 8014180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014182:	3301      	adds	r3, #1
 8014184:	633b      	str	r3, [r7, #48]	; 0x30
 8014186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014188:	693a      	ldr	r2, [r7, #16]
 801418a:	429a      	cmp	r2, r3
 801418c:	d8c8      	bhi.n	8014120 <SD_read+0x78>
 801418e:	e000      	b.n	8014192 <SD_read+0xea>
          }
        }
      }
      else
      {
        break;
 8014190:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 8014192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014194:	693a      	ldr	r2, [r7, #16]
 8014196:	429a      	cmp	r2, r3
 8014198:	d106      	bne.n	80141a8 <SD_read+0x100>
 801419a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d102      	bne.n	80141a8 <SD_read+0x100>
      res = RES_OK;
 80141a2:	2300      	movs	r3, #0
 80141a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

#endif

  return res;
 80141a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
} 
 80141ac:	4618      	mov	r0, r3
 80141ae:	3738      	adds	r7, #56	; 0x38
 80141b0:	46bd      	mov	sp, r7
 80141b2:	bd80      	pop	{r7, pc}
 80141b4:	20008434 	.word	0x20008434
 80141b8:	20008234 	.word	0x20008234

080141bc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80141bc:	b580      	push	{r7, lr}
 80141be:	b090      	sub	sp, #64	; 0x40
 80141c0:	af00      	add	r7, sp, #0
 80141c2:	61b9      	str	r1, [r7, #24]
 80141c4:	617a      	str	r2, [r7, #20]
 80141c6:	613b      	str	r3, [r7, #16]
 80141c8:	4603      	mov	r3, r0
 80141ca:	77fb      	strb	r3, [r7, #31]
  osEvent event;
  DRESULT res = RES_ERROR;
 80141cc:	2301      	movs	r3, #1
 80141ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80141d2:	f247 5030 	movw	r0, #30000	; 0x7530
 80141d6:	f7ff fede 	bl	8013f96 <SD_CheckStatusWithTimeout>
 80141da:	4603      	mov	r3, r0
 80141dc:	2b00      	cmp	r3, #0
 80141de:	da02      	bge.n	80141e6 <SD_write+0x2a>
  {
    return res;
 80141e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80141e4:	e07c      	b.n	80142e0 <SD_write+0x124>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 80141e6:	69bb      	ldr	r3, [r7, #24]
 80141e8:	f003 0303 	and.w	r3, r3, #3
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d12e      	bne.n	801424e <SD_write+0x92>
    * This is not needed if the memory region is configured as W/T.
    */
    alignedAddr = (uint32_t)buff & ~0x1F;
    SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80141f0:	693a      	ldr	r2, [r7, #16]
 80141f2:	6979      	ldr	r1, [r7, #20]
 80141f4:	69b8      	ldr	r0, [r7, #24]
 80141f6:	f7fe fa6d 	bl	80126d4 <BSP_SD_WriteBlocks_DMA>
 80141fa:	4603      	mov	r3, r0
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d16d      	bne.n	80142dc <SD_write+0x120>
                              (uint32_t) (sector),
                              count) == MSD_OK)
    {
      /* Get the message from the queue */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8014200:	4b39      	ldr	r3, [pc, #228]	; (80142e8 <SD_write+0x12c>)
 8014202:	6819      	ldr	r1, [r3, #0]
 8014204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014208:	f247 5230 	movw	r2, #30000	; 0x7530
 801420c:	4618      	mov	r0, r3
 801420e:	f7fb fdff 	bl	800fe10 <osMessageGet>

      if (event.status == osEventMessage)
 8014212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014214:	2b10      	cmp	r3, #16
 8014216:	d161      	bne.n	80142dc <SD_write+0x120>
      {
        if (event.value.v == WRITE_CPLT_MSG)
 8014218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801421a:	2b02      	cmp	r3, #2
 801421c:	d15e      	bne.n	80142dc <SD_write+0x120>
        {
          timer = osKernelSysTick() + SD_TIMEOUT;
 801421e:	f7fb fc9d 	bl	800fb5c <osKernelSysTick>
 8014222:	4602      	mov	r2, r0
 8014224:	f247 5330 	movw	r3, #30000	; 0x7530
 8014228:	4413      	add	r3, r2
 801422a:	633b      	str	r3, [r7, #48]	; 0x30
          /* block until SDIO IP is ready or a timeout occur */
          while(timer > osKernelSysTick())
 801422c:	e008      	b.n	8014240 <SD_write+0x84>
          {
            if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801422e:	f7fe fa6b 	bl	8012708 <BSP_SD_GetCardState>
 8014232:	4603      	mov	r3, r0
 8014234:	2b00      	cmp	r3, #0
 8014236:	d103      	bne.n	8014240 <SD_write+0x84>
            {
              res = RES_OK;
 8014238:	2300      	movs	r3, #0
 801423a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 801423e:	e04d      	b.n	80142dc <SD_write+0x120>
          while(timer > osKernelSysTick())
 8014240:	f7fb fc8c 	bl	800fb5c <osKernelSysTick>
 8014244:	4602      	mov	r2, r0
 8014246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014248:	4293      	cmp	r3, r2
 801424a:	d8f0      	bhi.n	801422e <SD_write+0x72>
 801424c:	e046      	b.n	80142dc <SD_write+0x120>
    * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
    */
    SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

    for (i = 0; i < count; i++) {
 801424e:	2300      	movs	r3, #0
 8014250:	63bb      	str	r3, [r7, #56]	; 0x38
 8014252:	e032      	b.n	80142ba <SD_write+0xfe>
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8014254:	697b      	ldr	r3, [r7, #20]
 8014256:	1c5a      	adds	r2, r3, #1
 8014258:	617a      	str	r2, [r7, #20]
 801425a:	2201      	movs	r2, #1
 801425c:	4619      	mov	r1, r3
 801425e:	4823      	ldr	r0, [pc, #140]	; (80142ec <SD_write+0x130>)
 8014260:	f7fe fa38 	bl	80126d4 <BSP_SD_WriteBlocks_DMA>
 8014264:	4603      	mov	r3, r0
 8014266:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (ret == MSD_OK) {
 801426a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801426e:	2b00      	cmp	r3, #0
 8014270:	d128      	bne.n	80142c4 <SD_write+0x108>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8014272:	4b1d      	ldr	r3, [pc, #116]	; (80142e8 <SD_write+0x12c>)
 8014274:	6819      	ldr	r1, [r3, #0]
 8014276:	463b      	mov	r3, r7
 8014278:	f247 5230 	movw	r2, #30000	; 0x7530
 801427c:	4618      	mov	r0, r3
 801427e:	f7fb fdc7 	bl	800fe10 <osMessageGet>
 8014282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014286:	463a      	mov	r2, r7
 8014288:	ca07      	ldmia	r2, {r0, r1, r2}
 801428a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 801428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014290:	2b10      	cmp	r3, #16
 8014292:	d10f      	bne.n	80142b4 <SD_write+0xf8>
          if (event.value.v == WRITE_CPLT_MSG) {
 8014294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014296:	2b02      	cmp	r3, #2
 8014298:	d10c      	bne.n	80142b4 <SD_write+0xf8>
            memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 801429a:	69bb      	ldr	r3, [r7, #24]
 801429c:	4a13      	ldr	r2, [pc, #76]	; (80142ec <SD_write+0x130>)
 801429e:	4618      	mov	r0, r3
 80142a0:	4611      	mov	r1, r2
 80142a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80142a6:	461a      	mov	r2, r3
 80142a8:	f001 fca2 	bl	8015bf0 <memcpy>
            buff += BLOCKSIZE;
 80142ac:	69bb      	ldr	r3, [r7, #24]
 80142ae:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80142b2:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 80142b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142b6:	3301      	adds	r3, #1
 80142b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80142ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142bc:	693a      	ldr	r2, [r7, #16]
 80142be:	429a      	cmp	r2, r3
 80142c0:	d8c8      	bhi.n	8014254 <SD_write+0x98>
 80142c2:	e000      	b.n	80142c6 <SD_write+0x10a>
          }
        }
      }
      else
      {
        break;
 80142c4:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 80142c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142c8:	693a      	ldr	r2, [r7, #16]
 80142ca:	429a      	cmp	r2, r3
 80142cc:	d106      	bne.n	80142dc <SD_write+0x120>
 80142ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d102      	bne.n	80142dc <SD_write+0x120>
      res = RES_OK;
 80142d6:	2300      	movs	r3, #0
 80142d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
#endif
  return res;
 80142dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
} 
 80142e0:	4618      	mov	r0, r3
 80142e2:	3740      	adds	r7, #64	; 0x40
 80142e4:	46bd      	mov	sp, r7
 80142e6:	bd80      	pop	{r7, pc}
 80142e8:	20008434 	.word	0x20008434
 80142ec:	20008234 	.word	0x20008234

080142f0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80142f0:	b580      	push	{r7, lr}
 80142f2:	b08c      	sub	sp, #48	; 0x30
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	4603      	mov	r3, r0
 80142f8:	603a      	str	r2, [r7, #0]
 80142fa:	71fb      	strb	r3, [r7, #7]
 80142fc:	460b      	mov	r3, r1
 80142fe:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8014300:	2301      	movs	r3, #1
 8014302:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8014306:	4b25      	ldr	r3, [pc, #148]	; (801439c <SD_ioctl+0xac>)
 8014308:	781b      	ldrb	r3, [r3, #0]
 801430a:	b2db      	uxtb	r3, r3
 801430c:	f003 0301 	and.w	r3, r3, #1
 8014310:	2b00      	cmp	r3, #0
 8014312:	d001      	beq.n	8014318 <SD_ioctl+0x28>
 8014314:	2303      	movs	r3, #3
 8014316:	e03c      	b.n	8014392 <SD_ioctl+0xa2>

  switch (cmd)
 8014318:	79bb      	ldrb	r3, [r7, #6]
 801431a:	2b03      	cmp	r3, #3
 801431c:	d834      	bhi.n	8014388 <SD_ioctl+0x98>
 801431e:	a201      	add	r2, pc, #4	; (adr r2, 8014324 <SD_ioctl+0x34>)
 8014320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014324:	08014335 	.word	0x08014335
 8014328:	0801433d 	.word	0x0801433d
 801432c:	08014355 	.word	0x08014355
 8014330:	0801436f 	.word	0x0801436f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8014334:	2300      	movs	r3, #0
 8014336:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801433a:	e028      	b.n	801438e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801433c:	f107 030c 	add.w	r3, r7, #12
 8014340:	4618      	mov	r0, r3
 8014342:	f7fe f9f1 	bl	8012728 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8014346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014348:	683b      	ldr	r3, [r7, #0]
 801434a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801434c:	2300      	movs	r3, #0
 801434e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014352:	e01c      	b.n	801438e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014354:	f107 030c 	add.w	r3, r7, #12
 8014358:	4618      	mov	r0, r3
 801435a:	f7fe f9e5 	bl	8012728 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801435e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014360:	b29a      	uxth	r2, r3
 8014362:	683b      	ldr	r3, [r7, #0]
 8014364:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8014366:	2300      	movs	r3, #0
 8014368:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801436c:	e00f      	b.n	801438e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801436e:	f107 030c 	add.w	r3, r7, #12
 8014372:	4618      	mov	r0, r3
 8014374:	f7fe f9d8 	bl	8012728 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8014378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801437a:	0a5a      	lsrs	r2, r3, #9
 801437c:	683b      	ldr	r3, [r7, #0]
 801437e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014380:	2300      	movs	r3, #0
 8014382:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014386:	e002      	b.n	801438e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8014388:	2304      	movs	r3, #4
 801438a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801438e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8014392:	4618      	mov	r0, r3
 8014394:	3730      	adds	r7, #48	; 0x30
 8014396:	46bd      	mov	sp, r7
 8014398:	bd80      	pop	{r7, pc}
 801439a:	bf00      	nop
 801439c:	20000028 	.word	0x20000028

080143a0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80143a0:	b580      	push	{r7, lr}
 80143a2:	af00      	add	r7, sp, #0
  
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, WRITE_CPLT_MSG, osWaitForever);
 80143a4:	4b04      	ldr	r3, [pc, #16]	; (80143b8 <BSP_SD_WriteCpltCallback+0x18>)
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	f04f 32ff 	mov.w	r2, #4294967295
 80143ac:	2102      	movs	r1, #2
 80143ae:	4618      	mov	r0, r3
 80143b0:	f7fb fcee 	bl	800fd90 <osMessagePut>
}
 80143b4:	bf00      	nop
 80143b6:	bd80      	pop	{r7, pc}
 80143b8:	20008434 	.word	0x20008434

080143bc <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80143bc:	b580      	push	{r7, lr}
 80143be:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 80143c0:	4b04      	ldr	r3, [pc, #16]	; (80143d4 <BSP_SD_ReadCpltCallback+0x18>)
 80143c2:	681b      	ldr	r3, [r3, #0]
 80143c4:	f04f 32ff 	mov.w	r2, #4294967295
 80143c8:	2101      	movs	r1, #1
 80143ca:	4618      	mov	r0, r3
 80143cc:	f7fb fce0 	bl	800fd90 <osMessagePut>
}
 80143d0:	bf00      	nop
 80143d2:	bd80      	pop	{r7, pc}
 80143d4:	20008434 	.word	0x20008434

080143d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80143d8:	b580      	push	{r7, lr}
 80143da:	b082      	sub	sp, #8
 80143dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80143de:	4b11      	ldr	r3, [pc, #68]	; (8014424 <HAL_MspInit+0x4c>)
 80143e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80143e2:	4a10      	ldr	r2, [pc, #64]	; (8014424 <HAL_MspInit+0x4c>)
 80143e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80143e8:	6413      	str	r3, [r2, #64]	; 0x40
 80143ea:	4b0e      	ldr	r3, [pc, #56]	; (8014424 <HAL_MspInit+0x4c>)
 80143ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80143ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80143f2:	607b      	str	r3, [r7, #4]
 80143f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80143f6:	4b0b      	ldr	r3, [pc, #44]	; (8014424 <HAL_MspInit+0x4c>)
 80143f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80143fa:	4a0a      	ldr	r2, [pc, #40]	; (8014424 <HAL_MspInit+0x4c>)
 80143fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014400:	6453      	str	r3, [r2, #68]	; 0x44
 8014402:	4b08      	ldr	r3, [pc, #32]	; (8014424 <HAL_MspInit+0x4c>)
 8014404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801440a:	603b      	str	r3, [r7, #0]
 801440c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 801440e:	2200      	movs	r2, #0
 8014410:	210f      	movs	r1, #15
 8014412:	f06f 0001 	mvn.w	r0, #1
 8014416:	f7ec fbf5 	bl	8000c04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801441a:	bf00      	nop
 801441c:	3708      	adds	r7, #8
 801441e:	46bd      	mov	sp, r7
 8014420:	bd80      	pop	{r7, pc}
 8014422:	bf00      	nop
 8014424:	40023800 	.word	0x40023800

08014428 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8014428:	b580      	push	{r7, lr}
 801442a:	b08a      	sub	sp, #40	; 0x28
 801442c:	af00      	add	r7, sp, #0
 801442e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014430:	f107 0314 	add.w	r3, r7, #20
 8014434:	2200      	movs	r2, #0
 8014436:	601a      	str	r2, [r3, #0]
 8014438:	605a      	str	r2, [r3, #4]
 801443a:	609a      	str	r2, [r3, #8]
 801443c:	60da      	str	r2, [r3, #12]
 801443e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	4a21      	ldr	r2, [pc, #132]	; (80144cc <HAL_ADC_MspInit+0xa4>)
 8014446:	4293      	cmp	r3, r2
 8014448:	d13c      	bne.n	80144c4 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 801444a:	4b21      	ldr	r3, [pc, #132]	; (80144d0 <HAL_ADC_MspInit+0xa8>)
 801444c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801444e:	4a20      	ldr	r2, [pc, #128]	; (80144d0 <HAL_ADC_MspInit+0xa8>)
 8014450:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8014454:	6453      	str	r3, [r2, #68]	; 0x44
 8014456:	4b1e      	ldr	r3, [pc, #120]	; (80144d0 <HAL_ADC_MspInit+0xa8>)
 8014458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801445a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801445e:	613b      	str	r3, [r7, #16]
 8014460:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8014462:	4b1b      	ldr	r3, [pc, #108]	; (80144d0 <HAL_ADC_MspInit+0xa8>)
 8014464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014466:	4a1a      	ldr	r2, [pc, #104]	; (80144d0 <HAL_ADC_MspInit+0xa8>)
 8014468:	f043 0320 	orr.w	r3, r3, #32
 801446c:	6313      	str	r3, [r2, #48]	; 0x30
 801446e:	4b18      	ldr	r3, [pc, #96]	; (80144d0 <HAL_ADC_MspInit+0xa8>)
 8014470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014472:	f003 0320 	and.w	r3, r3, #32
 8014476:	60fb      	str	r3, [r7, #12]
 8014478:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801447a:	4b15      	ldr	r3, [pc, #84]	; (80144d0 <HAL_ADC_MspInit+0xa8>)
 801447c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801447e:	4a14      	ldr	r2, [pc, #80]	; (80144d0 <HAL_ADC_MspInit+0xa8>)
 8014480:	f043 0301 	orr.w	r3, r3, #1
 8014484:	6313      	str	r3, [r2, #48]	; 0x30
 8014486:	4b12      	ldr	r3, [pc, #72]	; (80144d0 <HAL_ADC_MspInit+0xa8>)
 8014488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801448a:	f003 0301 	and.w	r3, r3, #1
 801448e:	60bb      	str	r3, [r7, #8]
 8014490:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 8014492:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8014496:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014498:	2303      	movs	r3, #3
 801449a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801449c:	2300      	movs	r3, #0
 801449e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80144a0:	f107 0314 	add.w	r3, r7, #20
 80144a4:	4619      	mov	r1, r3
 80144a6:	480b      	ldr	r0, [pc, #44]	; (80144d4 <HAL_ADC_MspInit+0xac>)
 80144a8:	f7ed fac2 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80144ac:	2301      	movs	r3, #1
 80144ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80144b0:	2303      	movs	r3, #3
 80144b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80144b4:	2300      	movs	r3, #0
 80144b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80144b8:	f107 0314 	add.w	r3, r7, #20
 80144bc:	4619      	mov	r1, r3
 80144be:	4806      	ldr	r0, [pc, #24]	; (80144d8 <HAL_ADC_MspInit+0xb0>)
 80144c0:	f7ed fab6 	bl	8001a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80144c4:	bf00      	nop
 80144c6:	3728      	adds	r7, #40	; 0x28
 80144c8:	46bd      	mov	sp, r7
 80144ca:	bd80      	pop	{r7, pc}
 80144cc:	40012200 	.word	0x40012200
 80144d0:	40023800 	.word	0x40023800
 80144d4:	40021400 	.word	0x40021400
 80144d8:	40020000 	.word	0x40020000

080144dc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80144dc:	b480      	push	{r7}
 80144de:	b085      	sub	sp, #20
 80144e0:	af00      	add	r7, sp, #0
 80144e2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	681b      	ldr	r3, [r3, #0]
 80144e8:	4a0a      	ldr	r2, [pc, #40]	; (8014514 <HAL_CRC_MspInit+0x38>)
 80144ea:	4293      	cmp	r3, r2
 80144ec:	d10b      	bne.n	8014506 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80144ee:	4b0a      	ldr	r3, [pc, #40]	; (8014518 <HAL_CRC_MspInit+0x3c>)
 80144f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80144f2:	4a09      	ldr	r2, [pc, #36]	; (8014518 <HAL_CRC_MspInit+0x3c>)
 80144f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80144f8:	6313      	str	r3, [r2, #48]	; 0x30
 80144fa:	4b07      	ldr	r3, [pc, #28]	; (8014518 <HAL_CRC_MspInit+0x3c>)
 80144fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80144fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8014502:	60fb      	str	r3, [r7, #12]
 8014504:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8014506:	bf00      	nop
 8014508:	3714      	adds	r7, #20
 801450a:	46bd      	mov	sp, r7
 801450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014510:	4770      	bx	lr
 8014512:	bf00      	nop
 8014514:	40023000 	.word	0x40023000
 8014518:	40023800 	.word	0x40023800

0801451c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 801451c:	b580      	push	{r7, lr}
 801451e:	b08e      	sub	sp, #56	; 0x38
 8014520:	af00      	add	r7, sp, #0
 8014522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014528:	2200      	movs	r2, #0
 801452a:	601a      	str	r2, [r3, #0]
 801452c:	605a      	str	r2, [r3, #4]
 801452e:	609a      	str	r2, [r3, #8]
 8014530:	60da      	str	r2, [r3, #12]
 8014532:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	4a50      	ldr	r2, [pc, #320]	; (801467c <HAL_DCMI_MspInit+0x160>)
 801453a:	4293      	cmp	r3, r2
 801453c:	f040 809a 	bne.w	8014674 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8014540:	4b4f      	ldr	r3, [pc, #316]	; (8014680 <HAL_DCMI_MspInit+0x164>)
 8014542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014544:	4a4e      	ldr	r2, [pc, #312]	; (8014680 <HAL_DCMI_MspInit+0x164>)
 8014546:	f043 0301 	orr.w	r3, r3, #1
 801454a:	6353      	str	r3, [r2, #52]	; 0x34
 801454c:	4b4c      	ldr	r3, [pc, #304]	; (8014680 <HAL_DCMI_MspInit+0x164>)
 801454e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014550:	f003 0301 	and.w	r3, r3, #1
 8014554:	623b      	str	r3, [r7, #32]
 8014556:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8014558:	4b49      	ldr	r3, [pc, #292]	; (8014680 <HAL_DCMI_MspInit+0x164>)
 801455a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801455c:	4a48      	ldr	r2, [pc, #288]	; (8014680 <HAL_DCMI_MspInit+0x164>)
 801455e:	f043 0310 	orr.w	r3, r3, #16
 8014562:	6313      	str	r3, [r2, #48]	; 0x30
 8014564:	4b46      	ldr	r3, [pc, #280]	; (8014680 <HAL_DCMI_MspInit+0x164>)
 8014566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014568:	f003 0310 	and.w	r3, r3, #16
 801456c:	61fb      	str	r3, [r7, #28]
 801456e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8014570:	4b43      	ldr	r3, [pc, #268]	; (8014680 <HAL_DCMI_MspInit+0x164>)
 8014572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014574:	4a42      	ldr	r2, [pc, #264]	; (8014680 <HAL_DCMI_MspInit+0x164>)
 8014576:	f043 0308 	orr.w	r3, r3, #8
 801457a:	6313      	str	r3, [r2, #48]	; 0x30
 801457c:	4b40      	ldr	r3, [pc, #256]	; (8014680 <HAL_DCMI_MspInit+0x164>)
 801457e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014580:	f003 0308 	and.w	r3, r3, #8
 8014584:	61bb      	str	r3, [r7, #24]
 8014586:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8014588:	4b3d      	ldr	r3, [pc, #244]	; (8014680 <HAL_DCMI_MspInit+0x164>)
 801458a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801458c:	4a3c      	ldr	r2, [pc, #240]	; (8014680 <HAL_DCMI_MspInit+0x164>)
 801458e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014592:	6313      	str	r3, [r2, #48]	; 0x30
 8014594:	4b3a      	ldr	r3, [pc, #232]	; (8014680 <HAL_DCMI_MspInit+0x164>)
 8014596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801459c:	617b      	str	r3, [r7, #20]
 801459e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80145a0:	4b37      	ldr	r3, [pc, #220]	; (8014680 <HAL_DCMI_MspInit+0x164>)
 80145a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80145a4:	4a36      	ldr	r2, [pc, #216]	; (8014680 <HAL_DCMI_MspInit+0x164>)
 80145a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80145aa:	6313      	str	r3, [r2, #48]	; 0x30
 80145ac:	4b34      	ldr	r3, [pc, #208]	; (8014680 <HAL_DCMI_MspInit+0x164>)
 80145ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80145b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80145b4:	613b      	str	r3, [r7, #16]
 80145b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80145b8:	4b31      	ldr	r3, [pc, #196]	; (8014680 <HAL_DCMI_MspInit+0x164>)
 80145ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80145bc:	4a30      	ldr	r2, [pc, #192]	; (8014680 <HAL_DCMI_MspInit+0x164>)
 80145be:	f043 0301 	orr.w	r3, r3, #1
 80145c2:	6313      	str	r3, [r2, #48]	; 0x30
 80145c4:	4b2e      	ldr	r3, [pc, #184]	; (8014680 <HAL_DCMI_MspInit+0x164>)
 80145c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80145c8:	f003 0301 	and.w	r3, r3, #1
 80145cc:	60fb      	str	r3, [r7, #12]
 80145ce:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80145d0:	2360      	movs	r3, #96	; 0x60
 80145d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80145d4:	2302      	movs	r3, #2
 80145d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80145d8:	2300      	movs	r3, #0
 80145da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80145dc:	2300      	movs	r3, #0
 80145de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80145e0:	230d      	movs	r3, #13
 80145e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80145e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80145e8:	4619      	mov	r1, r3
 80145ea:	4826      	ldr	r0, [pc, #152]	; (8014684 <HAL_DCMI_MspInit+0x168>)
 80145ec:	f7ed fa20 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80145f0:	2308      	movs	r3, #8
 80145f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80145f4:	2302      	movs	r3, #2
 80145f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80145f8:	2300      	movs	r3, #0
 80145fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80145fc:	2300      	movs	r3, #0
 80145fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8014600:	230d      	movs	r3, #13
 8014602:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8014604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014608:	4619      	mov	r1, r3
 801460a:	481f      	ldr	r0, [pc, #124]	; (8014688 <HAL_DCMI_MspInit+0x16c>)
 801460c:	f7ed fa10 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8014610:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014614:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014616:	2302      	movs	r3, #2
 8014618:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801461a:	2300      	movs	r3, #0
 801461c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801461e:	2300      	movs	r3, #0
 8014620:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8014622:	230d      	movs	r3, #13
 8014624:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8014626:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801462a:	4619      	mov	r1, r3
 801462c:	4817      	ldr	r0, [pc, #92]	; (801468c <HAL_DCMI_MspInit+0x170>)
 801462e:	f7ed f9ff 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 8014632:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8014636:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014638:	2302      	movs	r3, #2
 801463a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801463c:	2300      	movs	r3, #0
 801463e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014640:	2300      	movs	r3, #0
 8014642:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8014644:	230d      	movs	r3, #13
 8014646:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8014648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801464c:	4619      	mov	r1, r3
 801464e:	4810      	ldr	r0, [pc, #64]	; (8014690 <HAL_DCMI_MspInit+0x174>)
 8014650:	f7ed f9ee 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8014654:	2350      	movs	r3, #80	; 0x50
 8014656:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014658:	2302      	movs	r3, #2
 801465a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801465c:	2300      	movs	r3, #0
 801465e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014660:	2300      	movs	r3, #0
 8014662:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8014664:	230d      	movs	r3, #13
 8014666:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801466c:	4619      	mov	r1, r3
 801466e:	4809      	ldr	r0, [pc, #36]	; (8014694 <HAL_DCMI_MspInit+0x178>)
 8014670:	f7ed f9de 	bl	8001a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8014674:	bf00      	nop
 8014676:	3738      	adds	r7, #56	; 0x38
 8014678:	46bd      	mov	sp, r7
 801467a:	bd80      	pop	{r7, pc}
 801467c:	50050000 	.word	0x50050000
 8014680:	40023800 	.word	0x40023800
 8014684:	40021000 	.word	0x40021000
 8014688:	40020c00 	.word	0x40020c00
 801468c:	40021800 	.word	0x40021800
 8014690:	40021c00 	.word	0x40021c00
 8014694:	40020000 	.word	0x40020000

08014698 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8014698:	b580      	push	{r7, lr}
 801469a:	b084      	sub	sp, #16
 801469c:	af00      	add	r7, sp, #0
 801469e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	4a0d      	ldr	r2, [pc, #52]	; (80146dc <HAL_DMA2D_MspInit+0x44>)
 80146a6:	4293      	cmp	r3, r2
 80146a8:	d113      	bne.n	80146d2 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80146aa:	4b0d      	ldr	r3, [pc, #52]	; (80146e0 <HAL_DMA2D_MspInit+0x48>)
 80146ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146ae:	4a0c      	ldr	r2, [pc, #48]	; (80146e0 <HAL_DMA2D_MspInit+0x48>)
 80146b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80146b4:	6313      	str	r3, [r2, #48]	; 0x30
 80146b6:	4b0a      	ldr	r3, [pc, #40]	; (80146e0 <HAL_DMA2D_MspInit+0x48>)
 80146b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80146be:	60fb      	str	r3, [r7, #12]
 80146c0:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80146c2:	2200      	movs	r2, #0
 80146c4:	2105      	movs	r1, #5
 80146c6:	205a      	movs	r0, #90	; 0x5a
 80146c8:	f7ec fa9c 	bl	8000c04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80146cc:	205a      	movs	r0, #90	; 0x5a
 80146ce:	f7ec fab5 	bl	8000c3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80146d2:	bf00      	nop
 80146d4:	3710      	adds	r7, #16
 80146d6:	46bd      	mov	sp, r7
 80146d8:	bd80      	pop	{r7, pc}
 80146da:	bf00      	nop
 80146dc:	4002b000 	.word	0x4002b000
 80146e0:	40023800 	.word	0x40023800

080146e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80146e4:	b580      	push	{r7, lr}
 80146e6:	b08c      	sub	sp, #48	; 0x30
 80146e8:	af00      	add	r7, sp, #0
 80146ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80146ec:	f107 031c 	add.w	r3, r7, #28
 80146f0:	2200      	movs	r2, #0
 80146f2:	601a      	str	r2, [r3, #0]
 80146f4:	605a      	str	r2, [r3, #4]
 80146f6:	609a      	str	r2, [r3, #8]
 80146f8:	60da      	str	r2, [r3, #12]
 80146fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	4a2f      	ldr	r2, [pc, #188]	; (80147c0 <HAL_I2C_MspInit+0xdc>)
 8014702:	4293      	cmp	r3, r2
 8014704:	d129      	bne.n	801475a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014706:	4b2f      	ldr	r3, [pc, #188]	; (80147c4 <HAL_I2C_MspInit+0xe0>)
 8014708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801470a:	4a2e      	ldr	r2, [pc, #184]	; (80147c4 <HAL_I2C_MspInit+0xe0>)
 801470c:	f043 0302 	orr.w	r3, r3, #2
 8014710:	6313      	str	r3, [r2, #48]	; 0x30
 8014712:	4b2c      	ldr	r3, [pc, #176]	; (80147c4 <HAL_I2C_MspInit+0xe0>)
 8014714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014716:	f003 0302 	and.w	r3, r3, #2
 801471a:	61bb      	str	r3, [r7, #24]
 801471c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 801471e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8014722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8014724:	2312      	movs	r3, #18
 8014726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8014728:	2301      	movs	r3, #1
 801472a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801472c:	2300      	movs	r3, #0
 801472e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8014730:	2304      	movs	r3, #4
 8014732:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014734:	f107 031c 	add.w	r3, r7, #28
 8014738:	4619      	mov	r1, r3
 801473a:	4823      	ldr	r0, [pc, #140]	; (80147c8 <HAL_I2C_MspInit+0xe4>)
 801473c:	f7ed f978 	bl	8001a30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8014740:	4b20      	ldr	r3, [pc, #128]	; (80147c4 <HAL_I2C_MspInit+0xe0>)
 8014742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014744:	4a1f      	ldr	r2, [pc, #124]	; (80147c4 <HAL_I2C_MspInit+0xe0>)
 8014746:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801474a:	6413      	str	r3, [r2, #64]	; 0x40
 801474c:	4b1d      	ldr	r3, [pc, #116]	; (80147c4 <HAL_I2C_MspInit+0xe0>)
 801474e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014750:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8014754:	617b      	str	r3, [r7, #20]
 8014756:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8014758:	e02d      	b.n	80147b6 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	4a1b      	ldr	r2, [pc, #108]	; (80147cc <HAL_I2C_MspInit+0xe8>)
 8014760:	4293      	cmp	r3, r2
 8014762:	d128      	bne.n	80147b6 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8014764:	4b17      	ldr	r3, [pc, #92]	; (80147c4 <HAL_I2C_MspInit+0xe0>)
 8014766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014768:	4a16      	ldr	r2, [pc, #88]	; (80147c4 <HAL_I2C_MspInit+0xe0>)
 801476a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801476e:	6313      	str	r3, [r2, #48]	; 0x30
 8014770:	4b14      	ldr	r3, [pc, #80]	; (80147c4 <HAL_I2C_MspInit+0xe0>)
 8014772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014778:	613b      	str	r3, [r7, #16]
 801477a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 801477c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8014780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8014782:	2312      	movs	r3, #18
 8014784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8014786:	2301      	movs	r3, #1
 8014788:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801478a:	2303      	movs	r3, #3
 801478c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 801478e:	2304      	movs	r3, #4
 8014790:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8014792:	f107 031c 	add.w	r3, r7, #28
 8014796:	4619      	mov	r1, r3
 8014798:	480d      	ldr	r0, [pc, #52]	; (80147d0 <HAL_I2C_MspInit+0xec>)
 801479a:	f7ed f949 	bl	8001a30 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 801479e:	4b09      	ldr	r3, [pc, #36]	; (80147c4 <HAL_I2C_MspInit+0xe0>)
 80147a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147a2:	4a08      	ldr	r2, [pc, #32]	; (80147c4 <HAL_I2C_MspInit+0xe0>)
 80147a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80147a8:	6413      	str	r3, [r2, #64]	; 0x40
 80147aa:	4b06      	ldr	r3, [pc, #24]	; (80147c4 <HAL_I2C_MspInit+0xe0>)
 80147ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80147ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80147b2:	60fb      	str	r3, [r7, #12]
 80147b4:	68fb      	ldr	r3, [r7, #12]
}
 80147b6:	bf00      	nop
 80147b8:	3730      	adds	r7, #48	; 0x30
 80147ba:	46bd      	mov	sp, r7
 80147bc:	bd80      	pop	{r7, pc}
 80147be:	bf00      	nop
 80147c0:	40005400 	.word	0x40005400
 80147c4:	40023800 	.word	0x40023800
 80147c8:	40020400 	.word	0x40020400
 80147cc:	40005c00 	.word	0x40005c00
 80147d0:	40021c00 	.word	0x40021c00

080147d4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80147d4:	b580      	push	{r7, lr}
 80147d6:	b08e      	sub	sp, #56	; 0x38
 80147d8:	af00      	add	r7, sp, #0
 80147da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80147dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80147e0:	2200      	movs	r2, #0
 80147e2:	601a      	str	r2, [r3, #0]
 80147e4:	605a      	str	r2, [r3, #4]
 80147e6:	609a      	str	r2, [r3, #8]
 80147e8:	60da      	str	r2, [r3, #12]
 80147ea:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	4a55      	ldr	r2, [pc, #340]	; (8014948 <HAL_LTDC_MspInit+0x174>)
 80147f2:	4293      	cmp	r3, r2
 80147f4:	f040 80a3 	bne.w	801493e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80147f8:	4b54      	ldr	r3, [pc, #336]	; (801494c <HAL_LTDC_MspInit+0x178>)
 80147fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80147fc:	4a53      	ldr	r2, [pc, #332]	; (801494c <HAL_LTDC_MspInit+0x178>)
 80147fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8014802:	6453      	str	r3, [r2, #68]	; 0x44
 8014804:	4b51      	ldr	r3, [pc, #324]	; (801494c <HAL_LTDC_MspInit+0x178>)
 8014806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014808:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801480c:	623b      	str	r3, [r7, #32]
 801480e:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8014810:	4b4e      	ldr	r3, [pc, #312]	; (801494c <HAL_LTDC_MspInit+0x178>)
 8014812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014814:	4a4d      	ldr	r2, [pc, #308]	; (801494c <HAL_LTDC_MspInit+0x178>)
 8014816:	f043 0310 	orr.w	r3, r3, #16
 801481a:	6313      	str	r3, [r2, #48]	; 0x30
 801481c:	4b4b      	ldr	r3, [pc, #300]	; (801494c <HAL_LTDC_MspInit+0x178>)
 801481e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014820:	f003 0310 	and.w	r3, r3, #16
 8014824:	61fb      	str	r3, [r7, #28]
 8014826:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8014828:	4b48      	ldr	r3, [pc, #288]	; (801494c <HAL_LTDC_MspInit+0x178>)
 801482a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801482c:	4a47      	ldr	r2, [pc, #284]	; (801494c <HAL_LTDC_MspInit+0x178>)
 801482e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8014832:	6313      	str	r3, [r2, #48]	; 0x30
 8014834:	4b45      	ldr	r3, [pc, #276]	; (801494c <HAL_LTDC_MspInit+0x178>)
 8014836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014838:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801483c:	61bb      	str	r3, [r7, #24]
 801483e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8014840:	4b42      	ldr	r3, [pc, #264]	; (801494c <HAL_LTDC_MspInit+0x178>)
 8014842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014844:	4a41      	ldr	r2, [pc, #260]	; (801494c <HAL_LTDC_MspInit+0x178>)
 8014846:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801484a:	6313      	str	r3, [r2, #48]	; 0x30
 801484c:	4b3f      	ldr	r3, [pc, #252]	; (801494c <HAL_LTDC_MspInit+0x178>)
 801484e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014854:	617b      	str	r3, [r7, #20]
 8014856:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8014858:	4b3c      	ldr	r3, [pc, #240]	; (801494c <HAL_LTDC_MspInit+0x178>)
 801485a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801485c:	4a3b      	ldr	r2, [pc, #236]	; (801494c <HAL_LTDC_MspInit+0x178>)
 801485e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014862:	6313      	str	r3, [r2, #48]	; 0x30
 8014864:	4b39      	ldr	r3, [pc, #228]	; (801494c <HAL_LTDC_MspInit+0x178>)
 8014866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801486c:	613b      	str	r3, [r7, #16]
 801486e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8014870:	4b36      	ldr	r3, [pc, #216]	; (801494c <HAL_LTDC_MspInit+0x178>)
 8014872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014874:	4a35      	ldr	r2, [pc, #212]	; (801494c <HAL_LTDC_MspInit+0x178>)
 8014876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801487a:	6313      	str	r3, [r2, #48]	; 0x30
 801487c:	4b33      	ldr	r3, [pc, #204]	; (801494c <HAL_LTDC_MspInit+0x178>)
 801487e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014884:	60fb      	str	r3, [r7, #12]
 8014886:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8014888:	2310      	movs	r3, #16
 801488a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801488c:	2302      	movs	r3, #2
 801488e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014890:	2300      	movs	r3, #0
 8014892:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014894:	2300      	movs	r3, #0
 8014896:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8014898:	230e      	movs	r3, #14
 801489a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 801489c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80148a0:	4619      	mov	r1, r3
 80148a2:	482b      	ldr	r0, [pc, #172]	; (8014950 <HAL_LTDC_MspInit+0x17c>)
 80148a4:	f7ed f8c4 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 80148a8:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80148ac:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80148ae:	2302      	movs	r3, #2
 80148b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80148b2:	2300      	movs	r3, #0
 80148b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80148b6:	2300      	movs	r3, #0
 80148b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80148ba:	230e      	movs	r3, #14
 80148bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80148be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80148c2:	4619      	mov	r1, r3
 80148c4:	4823      	ldr	r0, [pc, #140]	; (8014954 <HAL_LTDC_MspInit+0x180>)
 80148c6:	f7ed f8b3 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 80148ca:	23f7      	movs	r3, #247	; 0xf7
 80148cc:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80148ce:	2302      	movs	r3, #2
 80148d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80148d2:	2300      	movs	r3, #0
 80148d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80148d6:	2300      	movs	r3, #0
 80148d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80148da:	230e      	movs	r3, #14
 80148dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80148de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80148e2:	4619      	mov	r1, r3
 80148e4:	481c      	ldr	r0, [pc, #112]	; (8014958 <HAL_LTDC_MspInit+0x184>)
 80148e6:	f7ed f8a3 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80148ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80148ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80148f0:	2302      	movs	r3, #2
 80148f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80148f4:	2300      	movs	r3, #0
 80148f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80148f8:	2300      	movs	r3, #0
 80148fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80148fc:	2309      	movs	r3, #9
 80148fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8014900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014904:	4619      	mov	r1, r3
 8014906:	4815      	ldr	r0, [pc, #84]	; (801495c <HAL_LTDC_MspInit+0x188>)
 8014908:	f7ed f892 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 801490c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8014910:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014912:	2302      	movs	r3, #2
 8014914:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014916:	2300      	movs	r3, #0
 8014918:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801491a:	2300      	movs	r3, #0
 801491c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 801491e:	230e      	movs	r3, #14
 8014920:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8014922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014926:	4619      	mov	r1, r3
 8014928:	480d      	ldr	r0, [pc, #52]	; (8014960 <HAL_LTDC_MspInit+0x18c>)
 801492a:	f7ed f881 	bl	8001a30 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 801492e:	2200      	movs	r2, #0
 8014930:	2105      	movs	r1, #5
 8014932:	2058      	movs	r0, #88	; 0x58
 8014934:	f7ec f966 	bl	8000c04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8014938:	2058      	movs	r0, #88	; 0x58
 801493a:	f7ec f97f 	bl	8000c3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 801493e:	bf00      	nop
 8014940:	3738      	adds	r7, #56	; 0x38
 8014942:	46bd      	mov	sp, r7
 8014944:	bd80      	pop	{r7, pc}
 8014946:	bf00      	nop
 8014948:	40016800 	.word	0x40016800
 801494c:	40023800 	.word	0x40023800
 8014950:	40021000 	.word	0x40021000
 8014954:	40022400 	.word	0x40022400
 8014958:	40022800 	.word	0x40022800
 801495c:	40021800 	.word	0x40021800
 8014960:	40022000 	.word	0x40022000

08014964 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8014964:	b580      	push	{r7, lr}
 8014966:	b08c      	sub	sp, #48	; 0x30
 8014968:	af00      	add	r7, sp, #0
 801496a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801496c:	f107 031c 	add.w	r3, r7, #28
 8014970:	2200      	movs	r2, #0
 8014972:	601a      	str	r2, [r3, #0]
 8014974:	605a      	str	r2, [r3, #4]
 8014976:	609a      	str	r2, [r3, #8]
 8014978:	60da      	str	r2, [r3, #12]
 801497a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	4a3b      	ldr	r2, [pc, #236]	; (8014a70 <HAL_QSPI_MspInit+0x10c>)
 8014982:	4293      	cmp	r3, r2
 8014984:	d170      	bne.n	8014a68 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8014986:	4b3b      	ldr	r3, [pc, #236]	; (8014a74 <HAL_QSPI_MspInit+0x110>)
 8014988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801498a:	4a3a      	ldr	r2, [pc, #232]	; (8014a74 <HAL_QSPI_MspInit+0x110>)
 801498c:	f043 0302 	orr.w	r3, r3, #2
 8014990:	6393      	str	r3, [r2, #56]	; 0x38
 8014992:	4b38      	ldr	r3, [pc, #224]	; (8014a74 <HAL_QSPI_MspInit+0x110>)
 8014994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014996:	f003 0302 	and.w	r3, r3, #2
 801499a:	61bb      	str	r3, [r7, #24]
 801499c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 801499e:	4b35      	ldr	r3, [pc, #212]	; (8014a74 <HAL_QSPI_MspInit+0x110>)
 80149a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149a2:	4a34      	ldr	r2, [pc, #208]	; (8014a74 <HAL_QSPI_MspInit+0x110>)
 80149a4:	f043 0310 	orr.w	r3, r3, #16
 80149a8:	6313      	str	r3, [r2, #48]	; 0x30
 80149aa:	4b32      	ldr	r3, [pc, #200]	; (8014a74 <HAL_QSPI_MspInit+0x110>)
 80149ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149ae:	f003 0310 	and.w	r3, r3, #16
 80149b2:	617b      	str	r3, [r7, #20]
 80149b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80149b6:	4b2f      	ldr	r3, [pc, #188]	; (8014a74 <HAL_QSPI_MspInit+0x110>)
 80149b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149ba:	4a2e      	ldr	r2, [pc, #184]	; (8014a74 <HAL_QSPI_MspInit+0x110>)
 80149bc:	f043 0302 	orr.w	r3, r3, #2
 80149c0:	6313      	str	r3, [r2, #48]	; 0x30
 80149c2:	4b2c      	ldr	r3, [pc, #176]	; (8014a74 <HAL_QSPI_MspInit+0x110>)
 80149c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149c6:	f003 0302 	and.w	r3, r3, #2
 80149ca:	613b      	str	r3, [r7, #16]
 80149cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80149ce:	4b29      	ldr	r3, [pc, #164]	; (8014a74 <HAL_QSPI_MspInit+0x110>)
 80149d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149d2:	4a28      	ldr	r2, [pc, #160]	; (8014a74 <HAL_QSPI_MspInit+0x110>)
 80149d4:	f043 0308 	orr.w	r3, r3, #8
 80149d8:	6313      	str	r3, [r2, #48]	; 0x30
 80149da:	4b26      	ldr	r3, [pc, #152]	; (8014a74 <HAL_QSPI_MspInit+0x110>)
 80149dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149de:	f003 0308 	and.w	r3, r3, #8
 80149e2:	60fb      	str	r3, [r7, #12]
 80149e4:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80149e6:	2304      	movs	r3, #4
 80149e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80149ea:	2302      	movs	r3, #2
 80149ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80149ee:	2300      	movs	r3, #0
 80149f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80149f2:	2303      	movs	r3, #3
 80149f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80149f6:	2309      	movs	r3, #9
 80149f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80149fa:	f107 031c 	add.w	r3, r7, #28
 80149fe:	4619      	mov	r1, r3
 8014a00:	481d      	ldr	r0, [pc, #116]	; (8014a78 <HAL_QSPI_MspInit+0x114>)
 8014a02:	f7ed f815 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8014a06:	2340      	movs	r3, #64	; 0x40
 8014a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014a0a:	2302      	movs	r3, #2
 8014a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014a0e:	2300      	movs	r3, #0
 8014a10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014a12:	2303      	movs	r3, #3
 8014a14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8014a16:	230a      	movs	r3, #10
 8014a18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8014a1a:	f107 031c 	add.w	r3, r7, #28
 8014a1e:	4619      	mov	r1, r3
 8014a20:	4816      	ldr	r0, [pc, #88]	; (8014a7c <HAL_QSPI_MspInit+0x118>)
 8014a22:	f7ed f805 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8014a26:	2304      	movs	r3, #4
 8014a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014a2a:	2302      	movs	r3, #2
 8014a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014a2e:	2300      	movs	r3, #0
 8014a30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014a32:	2303      	movs	r3, #3
 8014a34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8014a36:	2309      	movs	r3, #9
 8014a38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014a3a:	f107 031c 	add.w	r3, r7, #28
 8014a3e:	4619      	mov	r1, r3
 8014a40:	480e      	ldr	r0, [pc, #56]	; (8014a7c <HAL_QSPI_MspInit+0x118>)
 8014a42:	f7ec fff5 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8014a46:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8014a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014a4c:	2302      	movs	r3, #2
 8014a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014a50:	2300      	movs	r3, #0
 8014a52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014a54:	2303      	movs	r3, #3
 8014a56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8014a58:	2309      	movs	r3, #9
 8014a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8014a5c:	f107 031c 	add.w	r3, r7, #28
 8014a60:	4619      	mov	r1, r3
 8014a62:	4807      	ldr	r0, [pc, #28]	; (8014a80 <HAL_QSPI_MspInit+0x11c>)
 8014a64:	f7ec ffe4 	bl	8001a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8014a68:	bf00      	nop
 8014a6a:	3730      	adds	r7, #48	; 0x30
 8014a6c:	46bd      	mov	sp, r7
 8014a6e:	bd80      	pop	{r7, pc}
 8014a70:	a0001000 	.word	0xa0001000
 8014a74:	40023800 	.word	0x40023800
 8014a78:	40021000 	.word	0x40021000
 8014a7c:	40020400 	.word	0x40020400
 8014a80:	40020c00 	.word	0x40020c00

08014a84 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8014a84:	b480      	push	{r7}
 8014a86:	b083      	sub	sp, #12
 8014a88:	af00      	add	r7, sp, #0
 8014a8a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	4a07      	ldr	r2, [pc, #28]	; (8014ab0 <HAL_RTC_MspInit+0x2c>)
 8014a92:	4293      	cmp	r3, r2
 8014a94:	d105      	bne.n	8014aa2 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8014a96:	4b07      	ldr	r3, [pc, #28]	; (8014ab4 <HAL_RTC_MspInit+0x30>)
 8014a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014a9a:	4a06      	ldr	r2, [pc, #24]	; (8014ab4 <HAL_RTC_MspInit+0x30>)
 8014a9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014aa0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8014aa2:	bf00      	nop
 8014aa4:	370c      	adds	r7, #12
 8014aa6:	46bd      	mov	sp, r7
 8014aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aac:	4770      	bx	lr
 8014aae:	bf00      	nop
 8014ab0:	40002800 	.word	0x40002800
 8014ab4:	40023800 	.word	0x40023800

08014ab8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8014ab8:	b580      	push	{r7, lr}
 8014aba:	b08a      	sub	sp, #40	; 0x28
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014ac0:	f107 0314 	add.w	r3, r7, #20
 8014ac4:	2200      	movs	r2, #0
 8014ac6:	601a      	str	r2, [r3, #0]
 8014ac8:	605a      	str	r2, [r3, #4]
 8014aca:	609a      	str	r2, [r3, #8]
 8014acc:	60da      	str	r2, [r3, #12]
 8014ace:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	4a65      	ldr	r2, [pc, #404]	; (8014c6c <HAL_SD_MspInit+0x1b4>)
 8014ad6:	4293      	cmp	r3, r2
 8014ad8:	f040 80c3 	bne.w	8014c62 <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8014adc:	4b64      	ldr	r3, [pc, #400]	; (8014c70 <HAL_SD_MspInit+0x1b8>)
 8014ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014ae0:	4a63      	ldr	r2, [pc, #396]	; (8014c70 <HAL_SD_MspInit+0x1b8>)
 8014ae2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014ae6:	6453      	str	r3, [r2, #68]	; 0x44
 8014ae8:	4b61      	ldr	r3, [pc, #388]	; (8014c70 <HAL_SD_MspInit+0x1b8>)
 8014aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014aec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014af0:	613b      	str	r3, [r7, #16]
 8014af2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8014af4:	4b5e      	ldr	r3, [pc, #376]	; (8014c70 <HAL_SD_MspInit+0x1b8>)
 8014af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014af8:	4a5d      	ldr	r2, [pc, #372]	; (8014c70 <HAL_SD_MspInit+0x1b8>)
 8014afa:	f043 0304 	orr.w	r3, r3, #4
 8014afe:	6313      	str	r3, [r2, #48]	; 0x30
 8014b00:	4b5b      	ldr	r3, [pc, #364]	; (8014c70 <HAL_SD_MspInit+0x1b8>)
 8014b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b04:	f003 0304 	and.w	r3, r3, #4
 8014b08:	60fb      	str	r3, [r7, #12]
 8014b0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8014b0c:	4b58      	ldr	r3, [pc, #352]	; (8014c70 <HAL_SD_MspInit+0x1b8>)
 8014b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b10:	4a57      	ldr	r2, [pc, #348]	; (8014c70 <HAL_SD_MspInit+0x1b8>)
 8014b12:	f043 0308 	orr.w	r3, r3, #8
 8014b16:	6313      	str	r3, [r2, #48]	; 0x30
 8014b18:	4b55      	ldr	r3, [pc, #340]	; (8014c70 <HAL_SD_MspInit+0x1b8>)
 8014b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b1c:	f003 0308 	and.w	r3, r3, #8
 8014b20:	60bb      	str	r3, [r7, #8]
 8014b22:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8014b24:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8014b28:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014b2a:	2302      	movs	r3, #2
 8014b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014b2e:	2300      	movs	r3, #0
 8014b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014b32:	2303      	movs	r3, #3
 8014b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8014b36:	230c      	movs	r3, #12
 8014b38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014b3a:	f107 0314 	add.w	r3, r7, #20
 8014b3e:	4619      	mov	r1, r3
 8014b40:	484c      	ldr	r0, [pc, #304]	; (8014c74 <HAL_SD_MspInit+0x1bc>)
 8014b42:	f7ec ff75 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8014b46:	2304      	movs	r3, #4
 8014b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014b4a:	2302      	movs	r3, #2
 8014b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014b4e:	2300      	movs	r3, #0
 8014b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014b52:	2303      	movs	r3, #3
 8014b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8014b56:	230c      	movs	r3, #12
 8014b58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8014b5a:	f107 0314 	add.w	r3, r7, #20
 8014b5e:	4619      	mov	r1, r3
 8014b60:	4845      	ldr	r0, [pc, #276]	; (8014c78 <HAL_SD_MspInit+0x1c0>)
 8014b62:	f7ec ff65 	bl	8001a30 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream3;
 8014b66:	4b45      	ldr	r3, [pc, #276]	; (8014c7c <HAL_SD_MspInit+0x1c4>)
 8014b68:	4a45      	ldr	r2, [pc, #276]	; (8014c80 <HAL_SD_MspInit+0x1c8>)
 8014b6a:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8014b6c:	4b43      	ldr	r3, [pc, #268]	; (8014c7c <HAL_SD_MspInit+0x1c4>)
 8014b6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8014b72:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8014b74:	4b41      	ldr	r3, [pc, #260]	; (8014c7c <HAL_SD_MspInit+0x1c4>)
 8014b76:	2240      	movs	r2, #64	; 0x40
 8014b78:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8014b7a:	4b40      	ldr	r3, [pc, #256]	; (8014c7c <HAL_SD_MspInit+0x1c4>)
 8014b7c:	2200      	movs	r2, #0
 8014b7e:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8014b80:	4b3e      	ldr	r3, [pc, #248]	; (8014c7c <HAL_SD_MspInit+0x1c4>)
 8014b82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014b86:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8014b88:	4b3c      	ldr	r3, [pc, #240]	; (8014c7c <HAL_SD_MspInit+0x1c4>)
 8014b8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014b8e:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8014b90:	4b3a      	ldr	r3, [pc, #232]	; (8014c7c <HAL_SD_MspInit+0x1c4>)
 8014b92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8014b96:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8014b98:	4b38      	ldr	r3, [pc, #224]	; (8014c7c <HAL_SD_MspInit+0x1c4>)
 8014b9a:	2220      	movs	r2, #32
 8014b9c:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8014b9e:	4b37      	ldr	r3, [pc, #220]	; (8014c7c <HAL_SD_MspInit+0x1c4>)
 8014ba0:	2200      	movs	r2, #0
 8014ba2:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8014ba4:	4b35      	ldr	r3, [pc, #212]	; (8014c7c <HAL_SD_MspInit+0x1c4>)
 8014ba6:	2204      	movs	r2, #4
 8014ba8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8014baa:	4b34      	ldr	r3, [pc, #208]	; (8014c7c <HAL_SD_MspInit+0x1c4>)
 8014bac:	2203      	movs	r2, #3
 8014bae:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8014bb0:	4b32      	ldr	r3, [pc, #200]	; (8014c7c <HAL_SD_MspInit+0x1c4>)
 8014bb2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8014bb6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8014bb8:	4b30      	ldr	r3, [pc, #192]	; (8014c7c <HAL_SD_MspInit+0x1c4>)
 8014bba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8014bbe:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8014bc0:	482e      	ldr	r0, [pc, #184]	; (8014c7c <HAL_SD_MspInit+0x1c4>)
 8014bc2:	f7ec f9a5 	bl	8000f10 <HAL_DMA_Init>
 8014bc6:	4603      	mov	r3, r0
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d001      	beq.n	8014bd0 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 8014bcc:	f7ff f9dc 	bl	8013f88 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	4a2a      	ldr	r2, [pc, #168]	; (8014c7c <HAL_SD_MspInit+0x1c4>)
 8014bd4:	641a      	str	r2, [r3, #64]	; 0x40
 8014bd6:	4a29      	ldr	r2, [pc, #164]	; (8014c7c <HAL_SD_MspInit+0x1c4>)
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream6;
 8014bdc:	4b29      	ldr	r3, [pc, #164]	; (8014c84 <HAL_SD_MspInit+0x1cc>)
 8014bde:	4a2a      	ldr	r2, [pc, #168]	; (8014c88 <HAL_SD_MspInit+0x1d0>)
 8014be0:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8014be2:	4b28      	ldr	r3, [pc, #160]	; (8014c84 <HAL_SD_MspInit+0x1cc>)
 8014be4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8014be8:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8014bea:	4b26      	ldr	r3, [pc, #152]	; (8014c84 <HAL_SD_MspInit+0x1cc>)
 8014bec:	2200      	movs	r2, #0
 8014bee:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8014bf0:	4b24      	ldr	r3, [pc, #144]	; (8014c84 <HAL_SD_MspInit+0x1cc>)
 8014bf2:	2200      	movs	r2, #0
 8014bf4:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8014bf6:	4b23      	ldr	r3, [pc, #140]	; (8014c84 <HAL_SD_MspInit+0x1cc>)
 8014bf8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014bfc:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8014bfe:	4b21      	ldr	r3, [pc, #132]	; (8014c84 <HAL_SD_MspInit+0x1cc>)
 8014c00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014c04:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8014c06:	4b1f      	ldr	r3, [pc, #124]	; (8014c84 <HAL_SD_MspInit+0x1cc>)
 8014c08:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8014c0c:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8014c0e:	4b1d      	ldr	r3, [pc, #116]	; (8014c84 <HAL_SD_MspInit+0x1cc>)
 8014c10:	2220      	movs	r2, #32
 8014c12:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8014c14:	4b1b      	ldr	r3, [pc, #108]	; (8014c84 <HAL_SD_MspInit+0x1cc>)
 8014c16:	2200      	movs	r2, #0
 8014c18:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8014c1a:	4b1a      	ldr	r3, [pc, #104]	; (8014c84 <HAL_SD_MspInit+0x1cc>)
 8014c1c:	2204      	movs	r2, #4
 8014c1e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8014c20:	4b18      	ldr	r3, [pc, #96]	; (8014c84 <HAL_SD_MspInit+0x1cc>)
 8014c22:	2203      	movs	r2, #3
 8014c24:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8014c26:	4b17      	ldr	r3, [pc, #92]	; (8014c84 <HAL_SD_MspInit+0x1cc>)
 8014c28:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8014c2c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8014c2e:	4b15      	ldr	r3, [pc, #84]	; (8014c84 <HAL_SD_MspInit+0x1cc>)
 8014c30:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8014c34:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8014c36:	4813      	ldr	r0, [pc, #76]	; (8014c84 <HAL_SD_MspInit+0x1cc>)
 8014c38:	f7ec f96a 	bl	8000f10 <HAL_DMA_Init>
 8014c3c:	4603      	mov	r3, r0
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d001      	beq.n	8014c46 <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 8014c42:	f7ff f9a1 	bl	8013f88 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	4a0e      	ldr	r2, [pc, #56]	; (8014c84 <HAL_SD_MspInit+0x1cc>)
 8014c4a:	63da      	str	r2, [r3, #60]	; 0x3c
 8014c4c:	4a0d      	ldr	r2, [pc, #52]	; (8014c84 <HAL_SD_MspInit+0x1cc>)
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8014c52:	2200      	movs	r2, #0
 8014c54:	2105      	movs	r1, #5
 8014c56:	2031      	movs	r0, #49	; 0x31
 8014c58:	f7eb ffd4 	bl	8000c04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8014c5c:	2031      	movs	r0, #49	; 0x31
 8014c5e:	f7eb ffed 	bl	8000c3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8014c62:	bf00      	nop
 8014c64:	3728      	adds	r7, #40	; 0x28
 8014c66:	46bd      	mov	sp, r7
 8014c68:	bd80      	pop	{r7, pc}
 8014c6a:	bf00      	nop
 8014c6c:	40012c00 	.word	0x40012c00
 8014c70:	40023800 	.word	0x40023800
 8014c74:	40020800 	.word	0x40020800
 8014c78:	40020c00 	.word	0x40020c00
 8014c7c:	200098c0 	.word	0x200098c0
 8014c80:	40026458 	.word	0x40026458
 8014c84:	200096e4 	.word	0x200096e4
 8014c88:	400264a0 	.word	0x400264a0

08014c8c <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8014c8c:	b580      	push	{r7, lr}
 8014c8e:	b08a      	sub	sp, #40	; 0x28
 8014c90:	af00      	add	r7, sp, #0
 8014c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014c94:	f107 0314 	add.w	r3, r7, #20
 8014c98:	2200      	movs	r2, #0
 8014c9a:	601a      	str	r2, [r3, #0]
 8014c9c:	605a      	str	r2, [r3, #4]
 8014c9e:	609a      	str	r2, [r3, #8]
 8014ca0:	60da      	str	r2, [r3, #12]
 8014ca2:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8014cac:	d127      	bne.n	8014cfe <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8014cae:	4b16      	ldr	r3, [pc, #88]	; (8014d08 <HAL_SPDIFRX_MspInit+0x7c>)
 8014cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014cb2:	4a15      	ldr	r2, [pc, #84]	; (8014d08 <HAL_SPDIFRX_MspInit+0x7c>)
 8014cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8014cba:	4b13      	ldr	r3, [pc, #76]	; (8014d08 <HAL_SPDIFRX_MspInit+0x7c>)
 8014cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014cc2:	613b      	str	r3, [r7, #16]
 8014cc4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8014cc6:	4b10      	ldr	r3, [pc, #64]	; (8014d08 <HAL_SPDIFRX_MspInit+0x7c>)
 8014cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014cca:	4a0f      	ldr	r2, [pc, #60]	; (8014d08 <HAL_SPDIFRX_MspInit+0x7c>)
 8014ccc:	f043 0308 	orr.w	r3, r3, #8
 8014cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8014cd2:	4b0d      	ldr	r3, [pc, #52]	; (8014d08 <HAL_SPDIFRX_MspInit+0x7c>)
 8014cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014cd6:	f003 0308 	and.w	r3, r3, #8
 8014cda:	60fb      	str	r3, [r7, #12]
 8014cdc:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8014cde:	2380      	movs	r3, #128	; 0x80
 8014ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014ce2:	2302      	movs	r3, #2
 8014ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014ce6:	2300      	movs	r3, #0
 8014ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014cea:	2300      	movs	r3, #0
 8014cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8014cee:	2308      	movs	r3, #8
 8014cf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8014cf2:	f107 0314 	add.w	r3, r7, #20
 8014cf6:	4619      	mov	r1, r3
 8014cf8:	4804      	ldr	r0, [pc, #16]	; (8014d0c <HAL_SPDIFRX_MspInit+0x80>)
 8014cfa:	f7ec fe99 	bl	8001a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8014cfe:	bf00      	nop
 8014d00:	3728      	adds	r7, #40	; 0x28
 8014d02:	46bd      	mov	sp, r7
 8014d04:	bd80      	pop	{r7, pc}
 8014d06:	bf00      	nop
 8014d08:	40023800 	.word	0x40023800
 8014d0c:	40020c00 	.word	0x40020c00

08014d10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8014d10:	b480      	push	{r7}
 8014d12:	b089      	sub	sp, #36	; 0x24
 8014d14:	af00      	add	r7, sp, #0
 8014d16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	681b      	ldr	r3, [r3, #0]
 8014d1c:	4a2e      	ldr	r2, [pc, #184]	; (8014dd8 <HAL_TIM_Base_MspInit+0xc8>)
 8014d1e:	4293      	cmp	r3, r2
 8014d20:	d10c      	bne.n	8014d3c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8014d22:	4b2e      	ldr	r3, [pc, #184]	; (8014ddc <HAL_TIM_Base_MspInit+0xcc>)
 8014d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d26:	4a2d      	ldr	r2, [pc, #180]	; (8014ddc <HAL_TIM_Base_MspInit+0xcc>)
 8014d28:	f043 0301 	orr.w	r3, r3, #1
 8014d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8014d2e:	4b2b      	ldr	r3, [pc, #172]	; (8014ddc <HAL_TIM_Base_MspInit+0xcc>)
 8014d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d32:	f003 0301 	and.w	r3, r3, #1
 8014d36:	61fb      	str	r3, [r7, #28]
 8014d38:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8014d3a:	e046      	b.n	8014dca <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	681b      	ldr	r3, [r3, #0]
 8014d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014d44:	d10c      	bne.n	8014d60 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8014d46:	4b25      	ldr	r3, [pc, #148]	; (8014ddc <HAL_TIM_Base_MspInit+0xcc>)
 8014d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d4a:	4a24      	ldr	r2, [pc, #144]	; (8014ddc <HAL_TIM_Base_MspInit+0xcc>)
 8014d4c:	f043 0301 	orr.w	r3, r3, #1
 8014d50:	6413      	str	r3, [r2, #64]	; 0x40
 8014d52:	4b22      	ldr	r3, [pc, #136]	; (8014ddc <HAL_TIM_Base_MspInit+0xcc>)
 8014d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d56:	f003 0301 	and.w	r3, r3, #1
 8014d5a:	61bb      	str	r3, [r7, #24]
 8014d5c:	69bb      	ldr	r3, [r7, #24]
}
 8014d5e:	e034      	b.n	8014dca <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	681b      	ldr	r3, [r3, #0]
 8014d64:	4a1e      	ldr	r2, [pc, #120]	; (8014de0 <HAL_TIM_Base_MspInit+0xd0>)
 8014d66:	4293      	cmp	r3, r2
 8014d68:	d10c      	bne.n	8014d84 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8014d6a:	4b1c      	ldr	r3, [pc, #112]	; (8014ddc <HAL_TIM_Base_MspInit+0xcc>)
 8014d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d6e:	4a1b      	ldr	r2, [pc, #108]	; (8014ddc <HAL_TIM_Base_MspInit+0xcc>)
 8014d70:	f043 0302 	orr.w	r3, r3, #2
 8014d74:	6413      	str	r3, [r2, #64]	; 0x40
 8014d76:	4b19      	ldr	r3, [pc, #100]	; (8014ddc <HAL_TIM_Base_MspInit+0xcc>)
 8014d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d7a:	f003 0302 	and.w	r3, r3, #2
 8014d7e:	617b      	str	r3, [r7, #20]
 8014d80:	697b      	ldr	r3, [r7, #20]
}
 8014d82:	e022      	b.n	8014dca <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	4a16      	ldr	r2, [pc, #88]	; (8014de4 <HAL_TIM_Base_MspInit+0xd4>)
 8014d8a:	4293      	cmp	r3, r2
 8014d8c:	d10c      	bne.n	8014da8 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8014d8e:	4b13      	ldr	r3, [pc, #76]	; (8014ddc <HAL_TIM_Base_MspInit+0xcc>)
 8014d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d92:	4a12      	ldr	r2, [pc, #72]	; (8014ddc <HAL_TIM_Base_MspInit+0xcc>)
 8014d94:	f043 0308 	orr.w	r3, r3, #8
 8014d98:	6413      	str	r3, [r2, #64]	; 0x40
 8014d9a:	4b10      	ldr	r3, [pc, #64]	; (8014ddc <HAL_TIM_Base_MspInit+0xcc>)
 8014d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d9e:	f003 0308 	and.w	r3, r3, #8
 8014da2:	613b      	str	r3, [r7, #16]
 8014da4:	693b      	ldr	r3, [r7, #16]
}
 8014da6:	e010      	b.n	8014dca <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	681b      	ldr	r3, [r3, #0]
 8014dac:	4a0e      	ldr	r2, [pc, #56]	; (8014de8 <HAL_TIM_Base_MspInit+0xd8>)
 8014dae:	4293      	cmp	r3, r2
 8014db0:	d10b      	bne.n	8014dca <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8014db2:	4b0a      	ldr	r3, [pc, #40]	; (8014ddc <HAL_TIM_Base_MspInit+0xcc>)
 8014db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014db6:	4a09      	ldr	r2, [pc, #36]	; (8014ddc <HAL_TIM_Base_MspInit+0xcc>)
 8014db8:	f043 0302 	orr.w	r3, r3, #2
 8014dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8014dbe:	4b07      	ldr	r3, [pc, #28]	; (8014ddc <HAL_TIM_Base_MspInit+0xcc>)
 8014dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014dc2:	f003 0302 	and.w	r3, r3, #2
 8014dc6:	60fb      	str	r3, [r7, #12]
 8014dc8:	68fb      	ldr	r3, [r7, #12]
}
 8014dca:	bf00      	nop
 8014dcc:	3724      	adds	r7, #36	; 0x24
 8014dce:	46bd      	mov	sp, r7
 8014dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dd4:	4770      	bx	lr
 8014dd6:	bf00      	nop
 8014dd8:	40010000 	.word	0x40010000
 8014ddc:	40023800 	.word	0x40023800
 8014de0:	40000400 	.word	0x40000400
 8014de4:	40000c00 	.word	0x40000c00
 8014de8:	40010400 	.word	0x40010400

08014dec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8014dec:	b480      	push	{r7}
 8014dee:	b085      	sub	sp, #20
 8014df0:	af00      	add	r7, sp, #0
 8014df2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	681b      	ldr	r3, [r3, #0]
 8014df8:	4a0a      	ldr	r2, [pc, #40]	; (8014e24 <HAL_TIM_PWM_MspInit+0x38>)
 8014dfa:	4293      	cmp	r3, r2
 8014dfc:	d10b      	bne.n	8014e16 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8014dfe:	4b0a      	ldr	r3, [pc, #40]	; (8014e28 <HAL_TIM_PWM_MspInit+0x3c>)
 8014e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e02:	4a09      	ldr	r2, [pc, #36]	; (8014e28 <HAL_TIM_PWM_MspInit+0x3c>)
 8014e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014e08:	6413      	str	r3, [r2, #64]	; 0x40
 8014e0a:	4b07      	ldr	r3, [pc, #28]	; (8014e28 <HAL_TIM_PWM_MspInit+0x3c>)
 8014e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014e12:	60fb      	str	r3, [r7, #12]
 8014e14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8014e16:	bf00      	nop
 8014e18:	3714      	adds	r7, #20
 8014e1a:	46bd      	mov	sp, r7
 8014e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e20:	4770      	bx	lr
 8014e22:	bf00      	nop
 8014e24:	40001800 	.word	0x40001800
 8014e28:	40023800 	.word	0x40023800

08014e2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8014e2c:	b580      	push	{r7, lr}
 8014e2e:	b08c      	sub	sp, #48	; 0x30
 8014e30:	af00      	add	r7, sp, #0
 8014e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014e34:	f107 031c 	add.w	r3, r7, #28
 8014e38:	2200      	movs	r2, #0
 8014e3a:	601a      	str	r2, [r3, #0]
 8014e3c:	605a      	str	r2, [r3, #4]
 8014e3e:	609a      	str	r2, [r3, #8]
 8014e40:	60da      	str	r2, [r3, #12]
 8014e42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	4a56      	ldr	r2, [pc, #344]	; (8014fa4 <HAL_TIM_MspPostInit+0x178>)
 8014e4a:	4293      	cmp	r3, r2
 8014e4c:	d11d      	bne.n	8014e8a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014e4e:	4b56      	ldr	r3, [pc, #344]	; (8014fa8 <HAL_TIM_MspPostInit+0x17c>)
 8014e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e52:	4a55      	ldr	r2, [pc, #340]	; (8014fa8 <HAL_TIM_MspPostInit+0x17c>)
 8014e54:	f043 0301 	orr.w	r3, r3, #1
 8014e58:	6313      	str	r3, [r2, #48]	; 0x30
 8014e5a:	4b53      	ldr	r3, [pc, #332]	; (8014fa8 <HAL_TIM_MspPostInit+0x17c>)
 8014e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e5e:	f003 0301 	and.w	r3, r3, #1
 8014e62:	61bb      	str	r3, [r7, #24]
 8014e64:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8014e66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014e6c:	2302      	movs	r3, #2
 8014e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014e70:	2300      	movs	r3, #0
 8014e72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014e74:	2300      	movs	r3, #0
 8014e76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8014e78:	2301      	movs	r3, #1
 8014e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8014e7c:	f107 031c 	add.w	r3, r7, #28
 8014e80:	4619      	mov	r1, r3
 8014e82:	484a      	ldr	r0, [pc, #296]	; (8014fac <HAL_TIM_MspPostInit+0x180>)
 8014e84:	f7ec fdd4 	bl	8001a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8014e88:	e087      	b.n	8014f9a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	681b      	ldr	r3, [r3, #0]
 8014e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014e92:	d11d      	bne.n	8014ed0 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014e94:	4b44      	ldr	r3, [pc, #272]	; (8014fa8 <HAL_TIM_MspPostInit+0x17c>)
 8014e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e98:	4a43      	ldr	r2, [pc, #268]	; (8014fa8 <HAL_TIM_MspPostInit+0x17c>)
 8014e9a:	f043 0301 	orr.w	r3, r3, #1
 8014e9e:	6313      	str	r3, [r2, #48]	; 0x30
 8014ea0:	4b41      	ldr	r3, [pc, #260]	; (8014fa8 <HAL_TIM_MspPostInit+0x17c>)
 8014ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ea4:	f003 0301 	and.w	r3, r3, #1
 8014ea8:	617b      	str	r3, [r7, #20]
 8014eaa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8014eac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014eb2:	2302      	movs	r3, #2
 8014eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014eb6:	2300      	movs	r3, #0
 8014eb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014eba:	2300      	movs	r3, #0
 8014ebc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8014ebe:	2301      	movs	r3, #1
 8014ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8014ec2:	f107 031c 	add.w	r3, r7, #28
 8014ec6:	4619      	mov	r1, r3
 8014ec8:	4838      	ldr	r0, [pc, #224]	; (8014fac <HAL_TIM_MspPostInit+0x180>)
 8014eca:	f7ec fdb1 	bl	8001a30 <HAL_GPIO_Init>
}
 8014ece:	e064      	b.n	8014f9a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	4a36      	ldr	r2, [pc, #216]	; (8014fb0 <HAL_TIM_MspPostInit+0x184>)
 8014ed6:	4293      	cmp	r3, r2
 8014ed8:	d11c      	bne.n	8014f14 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014eda:	4b33      	ldr	r3, [pc, #204]	; (8014fa8 <HAL_TIM_MspPostInit+0x17c>)
 8014edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ede:	4a32      	ldr	r2, [pc, #200]	; (8014fa8 <HAL_TIM_MspPostInit+0x17c>)
 8014ee0:	f043 0302 	orr.w	r3, r3, #2
 8014ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8014ee6:	4b30      	ldr	r3, [pc, #192]	; (8014fa8 <HAL_TIM_MspPostInit+0x17c>)
 8014ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014eea:	f003 0302 	and.w	r3, r3, #2
 8014eee:	613b      	str	r3, [r7, #16]
 8014ef0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8014ef2:	2310      	movs	r3, #16
 8014ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014ef6:	2302      	movs	r3, #2
 8014ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014efa:	2300      	movs	r3, #0
 8014efc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014efe:	2300      	movs	r3, #0
 8014f00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8014f02:	2302      	movs	r3, #2
 8014f04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8014f06:	f107 031c 	add.w	r3, r7, #28
 8014f0a:	4619      	mov	r1, r3
 8014f0c:	4829      	ldr	r0, [pc, #164]	; (8014fb4 <HAL_TIM_MspPostInit+0x188>)
 8014f0e:	f7ec fd8f 	bl	8001a30 <HAL_GPIO_Init>
}
 8014f12:	e042      	b.n	8014f9a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	4a27      	ldr	r2, [pc, #156]	; (8014fb8 <HAL_TIM_MspPostInit+0x18c>)
 8014f1a:	4293      	cmp	r3, r2
 8014f1c:	d11c      	bne.n	8014f58 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8014f1e:	4b22      	ldr	r3, [pc, #136]	; (8014fa8 <HAL_TIM_MspPostInit+0x17c>)
 8014f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f22:	4a21      	ldr	r2, [pc, #132]	; (8014fa8 <HAL_TIM_MspPostInit+0x17c>)
 8014f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014f28:	6313      	str	r3, [r2, #48]	; 0x30
 8014f2a:	4b1f      	ldr	r3, [pc, #124]	; (8014fa8 <HAL_TIM_MspPostInit+0x17c>)
 8014f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014f32:	60fb      	str	r3, [r7, #12]
 8014f34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8014f36:	2301      	movs	r3, #1
 8014f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014f3a:	2302      	movs	r3, #2
 8014f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014f3e:	2300      	movs	r3, #0
 8014f40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014f42:	2300      	movs	r3, #0
 8014f44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8014f46:	2302      	movs	r3, #2
 8014f48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8014f4a:	f107 031c 	add.w	r3, r7, #28
 8014f4e:	4619      	mov	r1, r3
 8014f50:	481a      	ldr	r0, [pc, #104]	; (8014fbc <HAL_TIM_MspPostInit+0x190>)
 8014f52:	f7ec fd6d 	bl	8001a30 <HAL_GPIO_Init>
}
 8014f56:	e020      	b.n	8014f9a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	4a18      	ldr	r2, [pc, #96]	; (8014fc0 <HAL_TIM_MspPostInit+0x194>)
 8014f5e:	4293      	cmp	r3, r2
 8014f60:	d11b      	bne.n	8014f9a <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8014f62:	4b11      	ldr	r3, [pc, #68]	; (8014fa8 <HAL_TIM_MspPostInit+0x17c>)
 8014f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f66:	4a10      	ldr	r2, [pc, #64]	; (8014fa8 <HAL_TIM_MspPostInit+0x17c>)
 8014f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8014f6e:	4b0e      	ldr	r3, [pc, #56]	; (8014fa8 <HAL_TIM_MspPostInit+0x17c>)
 8014f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014f76:	60bb      	str	r3, [r7, #8]
 8014f78:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8014f7a:	2340      	movs	r3, #64	; 0x40
 8014f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014f7e:	2302      	movs	r3, #2
 8014f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014f82:	2300      	movs	r3, #0
 8014f84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014f86:	2300      	movs	r3, #0
 8014f88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8014f8a:	2309      	movs	r3, #9
 8014f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8014f8e:	f107 031c 	add.w	r3, r7, #28
 8014f92:	4619      	mov	r1, r3
 8014f94:	480b      	ldr	r0, [pc, #44]	; (8014fc4 <HAL_TIM_MspPostInit+0x198>)
 8014f96:	f7ec fd4b 	bl	8001a30 <HAL_GPIO_Init>
}
 8014f9a:	bf00      	nop
 8014f9c:	3730      	adds	r7, #48	; 0x30
 8014f9e:	46bd      	mov	sp, r7
 8014fa0:	bd80      	pop	{r7, pc}
 8014fa2:	bf00      	nop
 8014fa4:	40010000 	.word	0x40010000
 8014fa8:	40023800 	.word	0x40023800
 8014fac:	40020000 	.word	0x40020000
 8014fb0:	40000400 	.word	0x40000400
 8014fb4:	40020400 	.word	0x40020400
 8014fb8:	40000c00 	.word	0x40000c00
 8014fbc:	40022000 	.word	0x40022000
 8014fc0:	40001800 	.word	0x40001800
 8014fc4:	40021c00 	.word	0x40021c00

08014fc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8014fc8:	b580      	push	{r7, lr}
 8014fca:	b08c      	sub	sp, #48	; 0x30
 8014fcc:	af00      	add	r7, sp, #0
 8014fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014fd0:	f107 031c 	add.w	r3, r7, #28
 8014fd4:	2200      	movs	r2, #0
 8014fd6:	601a      	str	r2, [r3, #0]
 8014fd8:	605a      	str	r2, [r3, #4]
 8014fda:	609a      	str	r2, [r3, #8]
 8014fdc:	60da      	str	r2, [r3, #12]
 8014fde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	4a3c      	ldr	r2, [pc, #240]	; (80150d8 <HAL_UART_MspInit+0x110>)
 8014fe6:	4293      	cmp	r3, r2
 8014fe8:	d145      	bne.n	8015076 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8014fea:	4b3c      	ldr	r3, [pc, #240]	; (80150dc <HAL_UART_MspInit+0x114>)
 8014fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014fee:	4a3b      	ldr	r2, [pc, #236]	; (80150dc <HAL_UART_MspInit+0x114>)
 8014ff0:	f043 0310 	orr.w	r3, r3, #16
 8014ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8014ff6:	4b39      	ldr	r3, [pc, #228]	; (80150dc <HAL_UART_MspInit+0x114>)
 8014ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014ffa:	f003 0310 	and.w	r3, r3, #16
 8014ffe:	61bb      	str	r3, [r7, #24]
 8015000:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015002:	4b36      	ldr	r3, [pc, #216]	; (80150dc <HAL_UART_MspInit+0x114>)
 8015004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015006:	4a35      	ldr	r2, [pc, #212]	; (80150dc <HAL_UART_MspInit+0x114>)
 8015008:	f043 0302 	orr.w	r3, r3, #2
 801500c:	6313      	str	r3, [r2, #48]	; 0x30
 801500e:	4b33      	ldr	r3, [pc, #204]	; (80150dc <HAL_UART_MspInit+0x114>)
 8015010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015012:	f003 0302 	and.w	r3, r3, #2
 8015016:	617b      	str	r3, [r7, #20]
 8015018:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801501a:	4b30      	ldr	r3, [pc, #192]	; (80150dc <HAL_UART_MspInit+0x114>)
 801501c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801501e:	4a2f      	ldr	r2, [pc, #188]	; (80150dc <HAL_UART_MspInit+0x114>)
 8015020:	f043 0301 	orr.w	r3, r3, #1
 8015024:	6313      	str	r3, [r2, #48]	; 0x30
 8015026:	4b2d      	ldr	r3, [pc, #180]	; (80150dc <HAL_UART_MspInit+0x114>)
 8015028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801502a:	f003 0301 	and.w	r3, r3, #1
 801502e:	613b      	str	r3, [r7, #16]
 8015030:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8015032:	2380      	movs	r3, #128	; 0x80
 8015034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015036:	2302      	movs	r3, #2
 8015038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801503a:	2300      	movs	r3, #0
 801503c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801503e:	2300      	movs	r3, #0
 8015040:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8015042:	2307      	movs	r3, #7
 8015044:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8015046:	f107 031c 	add.w	r3, r7, #28
 801504a:	4619      	mov	r1, r3
 801504c:	4824      	ldr	r0, [pc, #144]	; (80150e0 <HAL_UART_MspInit+0x118>)
 801504e:	f7ec fcef 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8015052:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015058:	2302      	movs	r3, #2
 801505a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801505c:	2300      	movs	r3, #0
 801505e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015060:	2300      	movs	r3, #0
 8015062:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8015064:	2307      	movs	r3, #7
 8015066:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8015068:	f107 031c 	add.w	r3, r7, #28
 801506c:	4619      	mov	r1, r3
 801506e:	481d      	ldr	r0, [pc, #116]	; (80150e4 <HAL_UART_MspInit+0x11c>)
 8015070:	f7ec fcde 	bl	8001a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8015074:	e02c      	b.n	80150d0 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	4a1b      	ldr	r2, [pc, #108]	; (80150e8 <HAL_UART_MspInit+0x120>)
 801507c:	4293      	cmp	r3, r2
 801507e:	d127      	bne.n	80150d0 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8015080:	4b16      	ldr	r3, [pc, #88]	; (80150dc <HAL_UART_MspInit+0x114>)
 8015082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015084:	4a15      	ldr	r2, [pc, #84]	; (80150dc <HAL_UART_MspInit+0x114>)
 8015086:	f043 0320 	orr.w	r3, r3, #32
 801508a:	6453      	str	r3, [r2, #68]	; 0x44
 801508c:	4b13      	ldr	r3, [pc, #76]	; (80150dc <HAL_UART_MspInit+0x114>)
 801508e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015090:	f003 0320 	and.w	r3, r3, #32
 8015094:	60fb      	str	r3, [r7, #12]
 8015096:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8015098:	4b10      	ldr	r3, [pc, #64]	; (80150dc <HAL_UART_MspInit+0x114>)
 801509a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801509c:	4a0f      	ldr	r2, [pc, #60]	; (80150dc <HAL_UART_MspInit+0x114>)
 801509e:	f043 0304 	orr.w	r3, r3, #4
 80150a2:	6313      	str	r3, [r2, #48]	; 0x30
 80150a4:	4b0d      	ldr	r3, [pc, #52]	; (80150dc <HAL_UART_MspInit+0x114>)
 80150a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80150a8:	f003 0304 	and.w	r3, r3, #4
 80150ac:	60bb      	str	r3, [r7, #8]
 80150ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80150b0:	23c0      	movs	r3, #192	; 0xc0
 80150b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80150b4:	2302      	movs	r3, #2
 80150b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80150b8:	2300      	movs	r3, #0
 80150ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80150bc:	2303      	movs	r3, #3
 80150be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80150c0:	2308      	movs	r3, #8
 80150c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80150c4:	f107 031c 	add.w	r3, r7, #28
 80150c8:	4619      	mov	r1, r3
 80150ca:	4808      	ldr	r0, [pc, #32]	; (80150ec <HAL_UART_MspInit+0x124>)
 80150cc:	f7ec fcb0 	bl	8001a30 <HAL_GPIO_Init>
}
 80150d0:	bf00      	nop
 80150d2:	3730      	adds	r7, #48	; 0x30
 80150d4:	46bd      	mov	sp, r7
 80150d6:	bd80      	pop	{r7, pc}
 80150d8:	40011000 	.word	0x40011000
 80150dc:	40023800 	.word	0x40023800
 80150e0:	40020400 	.word	0x40020400
 80150e4:	40020000 	.word	0x40020000
 80150e8:	40011400 	.word	0x40011400
 80150ec:	40020800 	.word	0x40020800

080150f0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80150f0:	b580      	push	{r7, lr}
 80150f2:	b086      	sub	sp, #24
 80150f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80150f6:	1d3b      	adds	r3, r7, #4
 80150f8:	2200      	movs	r2, #0
 80150fa:	601a      	str	r2, [r3, #0]
 80150fc:	605a      	str	r2, [r3, #4]
 80150fe:	609a      	str	r2, [r3, #8]
 8015100:	60da      	str	r2, [r3, #12]
 8015102:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8015104:	4b3a      	ldr	r3, [pc, #232]	; (80151f0 <HAL_FMC_MspInit+0x100>)
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	2b00      	cmp	r3, #0
 801510a:	d16d      	bne.n	80151e8 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 801510c:	4b38      	ldr	r3, [pc, #224]	; (80151f0 <HAL_FMC_MspInit+0x100>)
 801510e:	2201      	movs	r2, #1
 8015110:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8015112:	4b38      	ldr	r3, [pc, #224]	; (80151f4 <HAL_FMC_MspInit+0x104>)
 8015114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015116:	4a37      	ldr	r2, [pc, #220]	; (80151f4 <HAL_FMC_MspInit+0x104>)
 8015118:	f043 0301 	orr.w	r3, r3, #1
 801511c:	6393      	str	r3, [r2, #56]	; 0x38
 801511e:	4b35      	ldr	r3, [pc, #212]	; (80151f4 <HAL_FMC_MspInit+0x104>)
 8015120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015122:	f003 0301 	and.w	r3, r3, #1
 8015126:	603b      	str	r3, [r7, #0]
 8015128:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 801512a:	f64f 7383 	movw	r3, #65411	; 0xff83
 801512e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015130:	2302      	movs	r3, #2
 8015132:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015134:	2300      	movs	r3, #0
 8015136:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015138:	2303      	movs	r3, #3
 801513a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801513c:	230c      	movs	r3, #12
 801513e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8015140:	1d3b      	adds	r3, r7, #4
 8015142:	4619      	mov	r1, r3
 8015144:	482c      	ldr	r0, [pc, #176]	; (80151f8 <HAL_FMC_MspInit+0x108>)
 8015146:	f7ec fc73 	bl	8001a30 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 801514a:	f248 1333 	movw	r3, #33075	; 0x8133
 801514e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015150:	2302      	movs	r3, #2
 8015152:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015154:	2300      	movs	r3, #0
 8015156:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015158:	2303      	movs	r3, #3
 801515a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801515c:	230c      	movs	r3, #12
 801515e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8015160:	1d3b      	adds	r3, r7, #4
 8015162:	4619      	mov	r1, r3
 8015164:	4825      	ldr	r0, [pc, #148]	; (80151fc <HAL_FMC_MspInit+0x10c>)
 8015166:	f7ec fc63 	bl	8001a30 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 801516a:	f24c 7303 	movw	r3, #50947	; 0xc703
 801516e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015170:	2302      	movs	r3, #2
 8015172:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015174:	2300      	movs	r3, #0
 8015176:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015178:	2303      	movs	r3, #3
 801517a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801517c:	230c      	movs	r3, #12
 801517e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8015180:	1d3b      	adds	r3, r7, #4
 8015182:	4619      	mov	r1, r3
 8015184:	481e      	ldr	r0, [pc, #120]	; (8015200 <HAL_FMC_MspInit+0x110>)
 8015186:	f7ec fc53 	bl	8001a30 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 801518a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 801518e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015190:	2302      	movs	r3, #2
 8015192:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015194:	2300      	movs	r3, #0
 8015196:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015198:	2303      	movs	r3, #3
 801519a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801519c:	230c      	movs	r3, #12
 801519e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80151a0:	1d3b      	adds	r3, r7, #4
 80151a2:	4619      	mov	r1, r3
 80151a4:	4817      	ldr	r0, [pc, #92]	; (8015204 <HAL_FMC_MspInit+0x114>)
 80151a6:	f7ec fc43 	bl	8001a30 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80151aa:	2328      	movs	r3, #40	; 0x28
 80151ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80151ae:	2302      	movs	r3, #2
 80151b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80151b2:	2300      	movs	r3, #0
 80151b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80151b6:	2303      	movs	r3, #3
 80151b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80151ba:	230c      	movs	r3, #12
 80151bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80151be:	1d3b      	adds	r3, r7, #4
 80151c0:	4619      	mov	r1, r3
 80151c2:	4811      	ldr	r0, [pc, #68]	; (8015208 <HAL_FMC_MspInit+0x118>)
 80151c4:	f7ec fc34 	bl	8001a30 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80151c8:	2308      	movs	r3, #8
 80151ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80151cc:	2302      	movs	r3, #2
 80151ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80151d0:	2300      	movs	r3, #0
 80151d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80151d4:	2303      	movs	r3, #3
 80151d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80151d8:	230c      	movs	r3, #12
 80151da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80151dc:	1d3b      	adds	r3, r7, #4
 80151de:	4619      	mov	r1, r3
 80151e0:	480a      	ldr	r0, [pc, #40]	; (801520c <HAL_FMC_MspInit+0x11c>)
 80151e2:	f7ec fc25 	bl	8001a30 <HAL_GPIO_Init>
 80151e6:	e000      	b.n	80151ea <HAL_FMC_MspInit+0xfa>
    return;
 80151e8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80151ea:	3718      	adds	r7, #24
 80151ec:	46bd      	mov	sp, r7
 80151ee:	bd80      	pop	{r7, pc}
 80151f0:	20008438 	.word	0x20008438
 80151f4:	40023800 	.word	0x40023800
 80151f8:	40021000 	.word	0x40021000
 80151fc:	40021800 	.word	0x40021800
 8015200:	40020c00 	.word	0x40020c00
 8015204:	40021400 	.word	0x40021400
 8015208:	40021c00 	.word	0x40021c00
 801520c:	40020800 	.word	0x40020800

08015210 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8015210:	b580      	push	{r7, lr}
 8015212:	b082      	sub	sp, #8
 8015214:	af00      	add	r7, sp, #0
 8015216:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8015218:	f7ff ff6a 	bl	80150f0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 801521c:	bf00      	nop
 801521e:	3708      	adds	r7, #8
 8015220:	46bd      	mov	sp, r7
 8015222:	bd80      	pop	{r7, pc}

08015224 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8015224:	b580      	push	{r7, lr}
 8015226:	b08a      	sub	sp, #40	; 0x28
 8015228:	af00      	add	r7, sp, #0
 801522a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	681b      	ldr	r3, [r3, #0]
 8015230:	4a2b      	ldr	r2, [pc, #172]	; (80152e0 <HAL_SAI_MspInit+0xbc>)
 8015232:	4293      	cmp	r3, r2
 8015234:	d124      	bne.n	8015280 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8015236:	4b2b      	ldr	r3, [pc, #172]	; (80152e4 <HAL_SAI_MspInit+0xc0>)
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	2b00      	cmp	r3, #0
 801523c:	d10b      	bne.n	8015256 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 801523e:	4b2a      	ldr	r3, [pc, #168]	; (80152e8 <HAL_SAI_MspInit+0xc4>)
 8015240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015242:	4a29      	ldr	r2, [pc, #164]	; (80152e8 <HAL_SAI_MspInit+0xc4>)
 8015244:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015248:	6453      	str	r3, [r2, #68]	; 0x44
 801524a:	4b27      	ldr	r3, [pc, #156]	; (80152e8 <HAL_SAI_MspInit+0xc4>)
 801524c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801524e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015252:	613b      	str	r3, [r7, #16]
 8015254:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8015256:	4b23      	ldr	r3, [pc, #140]	; (80152e4 <HAL_SAI_MspInit+0xc0>)
 8015258:	681b      	ldr	r3, [r3, #0]
 801525a:	3301      	adds	r3, #1
 801525c:	4a21      	ldr	r2, [pc, #132]	; (80152e4 <HAL_SAI_MspInit+0xc0>)
 801525e:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8015260:	23f0      	movs	r3, #240	; 0xf0
 8015262:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015264:	2302      	movs	r3, #2
 8015266:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015268:	2300      	movs	r3, #0
 801526a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801526c:	2300      	movs	r3, #0
 801526e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8015270:	230a      	movs	r3, #10
 8015272:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8015274:	f107 0314 	add.w	r3, r7, #20
 8015278:	4619      	mov	r1, r3
 801527a:	481c      	ldr	r0, [pc, #112]	; (80152ec <HAL_SAI_MspInit+0xc8>)
 801527c:	f7ec fbd8 	bl	8001a30 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	4a1a      	ldr	r2, [pc, #104]	; (80152f0 <HAL_SAI_MspInit+0xcc>)
 8015286:	4293      	cmp	r3, r2
 8015288:	d125      	bne.n	80152d6 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 801528a:	4b16      	ldr	r3, [pc, #88]	; (80152e4 <HAL_SAI_MspInit+0xc0>)
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	2b00      	cmp	r3, #0
 8015290:	d10b      	bne.n	80152aa <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8015292:	4b15      	ldr	r3, [pc, #84]	; (80152e8 <HAL_SAI_MspInit+0xc4>)
 8015294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015296:	4a14      	ldr	r2, [pc, #80]	; (80152e8 <HAL_SAI_MspInit+0xc4>)
 8015298:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801529c:	6453      	str	r3, [r2, #68]	; 0x44
 801529e:	4b12      	ldr	r3, [pc, #72]	; (80152e8 <HAL_SAI_MspInit+0xc4>)
 80152a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80152a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80152a6:	60fb      	str	r3, [r7, #12]
 80152a8:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80152aa:	4b0e      	ldr	r3, [pc, #56]	; (80152e4 <HAL_SAI_MspInit+0xc0>)
 80152ac:	681b      	ldr	r3, [r3, #0]
 80152ae:	3301      	adds	r3, #1
 80152b0:	4a0c      	ldr	r2, [pc, #48]	; (80152e4 <HAL_SAI_MspInit+0xc0>)
 80152b2:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80152b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80152b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80152ba:	2302      	movs	r3, #2
 80152bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80152be:	2300      	movs	r3, #0
 80152c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80152c2:	2300      	movs	r3, #0
 80152c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80152c6:	230a      	movs	r3, #10
 80152c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80152ca:	f107 0314 	add.w	r3, r7, #20
 80152ce:	4619      	mov	r1, r3
 80152d0:	4808      	ldr	r0, [pc, #32]	; (80152f4 <HAL_SAI_MspInit+0xd0>)
 80152d2:	f7ec fbad 	bl	8001a30 <HAL_GPIO_Init>

    }
}
 80152d6:	bf00      	nop
 80152d8:	3728      	adds	r7, #40	; 0x28
 80152da:	46bd      	mov	sp, r7
 80152dc:	bd80      	pop	{r7, pc}
 80152de:	bf00      	nop
 80152e0:	40015c04 	.word	0x40015c04
 80152e4:	2000843c 	.word	0x2000843c
 80152e8:	40023800 	.word	0x40023800
 80152ec:	40022000 	.word	0x40022000
 80152f0:	40015c24 	.word	0x40015c24
 80152f4:	40021800 	.word	0x40021800

080152f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80152f8:	b580      	push	{r7, lr}
 80152fa:	b08c      	sub	sp, #48	; 0x30
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8015300:	2300      	movs	r3, #0
 8015302:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8015304:	2300      	movs	r3, #0
 8015306:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8015308:	2200      	movs	r2, #0
 801530a:	6879      	ldr	r1, [r7, #4]
 801530c:	2036      	movs	r0, #54	; 0x36
 801530e:	f7eb fc79 	bl	8000c04 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8015312:	2036      	movs	r0, #54	; 0x36
 8015314:	f7eb fc92 	bl	8000c3c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8015318:	4b1f      	ldr	r3, [pc, #124]	; (8015398 <HAL_InitTick+0xa0>)
 801531a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801531c:	4a1e      	ldr	r2, [pc, #120]	; (8015398 <HAL_InitTick+0xa0>)
 801531e:	f043 0310 	orr.w	r3, r3, #16
 8015322:	6413      	str	r3, [r2, #64]	; 0x40
 8015324:	4b1c      	ldr	r3, [pc, #112]	; (8015398 <HAL_InitTick+0xa0>)
 8015326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015328:	f003 0310 	and.w	r3, r3, #16
 801532c:	60fb      	str	r3, [r7, #12]
 801532e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8015330:	f107 0210 	add.w	r2, r7, #16
 8015334:	f107 0314 	add.w	r3, r7, #20
 8015338:	4611      	mov	r1, r2
 801533a:	4618      	mov	r0, r3
 801533c:	f7ef fbc8 	bl	8004ad0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8015340:	f7ef fb9e 	bl	8004a80 <HAL_RCC_GetPCLK1Freq>
 8015344:	4603      	mov	r3, r0
 8015346:	005b      	lsls	r3, r3, #1
 8015348:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 801534a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801534c:	4a13      	ldr	r2, [pc, #76]	; (801539c <HAL_InitTick+0xa4>)
 801534e:	fba2 2303 	umull	r2, r3, r2, r3
 8015352:	0c9b      	lsrs	r3, r3, #18
 8015354:	3b01      	subs	r3, #1
 8015356:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8015358:	4b11      	ldr	r3, [pc, #68]	; (80153a0 <HAL_InitTick+0xa8>)
 801535a:	4a12      	ldr	r2, [pc, #72]	; (80153a4 <HAL_InitTick+0xac>)
 801535c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 801535e:	4b10      	ldr	r3, [pc, #64]	; (80153a0 <HAL_InitTick+0xa8>)
 8015360:	f240 32e7 	movw	r2, #999	; 0x3e7
 8015364:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8015366:	4a0e      	ldr	r2, [pc, #56]	; (80153a0 <HAL_InitTick+0xa8>)
 8015368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801536a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 801536c:	4b0c      	ldr	r3, [pc, #48]	; (80153a0 <HAL_InitTick+0xa8>)
 801536e:	2200      	movs	r2, #0
 8015370:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8015372:	4b0b      	ldr	r3, [pc, #44]	; (80153a0 <HAL_InitTick+0xa8>)
 8015374:	2200      	movs	r2, #0
 8015376:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8015378:	4809      	ldr	r0, [pc, #36]	; (80153a0 <HAL_InitTick+0xa8>)
 801537a:	f7f2 f9d5 	bl	8007728 <HAL_TIM_Base_Init>
 801537e:	4603      	mov	r3, r0
 8015380:	2b00      	cmp	r3, #0
 8015382:	d104      	bne.n	801538e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8015384:	4806      	ldr	r0, [pc, #24]	; (80153a0 <HAL_InitTick+0xa8>)
 8015386:	f7f2 f9fb 	bl	8007780 <HAL_TIM_Base_Start_IT>
 801538a:	4603      	mov	r3, r0
 801538c:	e000      	b.n	8015390 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 801538e:	2301      	movs	r3, #1
}
 8015390:	4618      	mov	r0, r3
 8015392:	3730      	adds	r7, #48	; 0x30
 8015394:	46bd      	mov	sp, r7
 8015396:	bd80      	pop	{r7, pc}
 8015398:	40023800 	.word	0x40023800
 801539c:	431bde83 	.word	0x431bde83
 80153a0:	2000996c 	.word	0x2000996c
 80153a4:	40001000 	.word	0x40001000

080153a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80153a8:	b480      	push	{r7}
 80153aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80153ac:	bf00      	nop
 80153ae:	46bd      	mov	sp, r7
 80153b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b4:	4770      	bx	lr

080153b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80153b6:	b480      	push	{r7}
 80153b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80153ba:	e7fe      	b.n	80153ba <HardFault_Handler+0x4>

080153bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80153bc:	b480      	push	{r7}
 80153be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80153c0:	e7fe      	b.n	80153c0 <MemManage_Handler+0x4>

080153c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80153c2:	b480      	push	{r7}
 80153c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80153c6:	e7fe      	b.n	80153c6 <BusFault_Handler+0x4>

080153c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80153c8:	b480      	push	{r7}
 80153ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80153cc:	e7fe      	b.n	80153cc <UsageFault_Handler+0x4>

080153ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80153ce:	b480      	push	{r7}
 80153d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80153d2:	bf00      	nop
 80153d4:	46bd      	mov	sp, r7
 80153d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153da:	4770      	bx	lr

080153dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80153dc:	b580      	push	{r7, lr}
 80153de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80153e0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80153e4:	f7ec fd00 	bl	8001de8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80153e8:	bf00      	nop
 80153ea:	bd80      	pop	{r7, pc}

080153ec <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80153ec:	b580      	push	{r7, lr}
 80153ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80153f0:	4802      	ldr	r0, [pc, #8]	; (80153fc <SDMMC1_IRQHandler+0x10>)
 80153f2:	f7f1 f857 	bl	80064a4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80153f6:	bf00      	nop
 80153f8:	bd80      	pop	{r7, pc}
 80153fa:	bf00      	nop
 80153fc:	20008b54 	.word	0x20008b54

08015400 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8015400:	b580      	push	{r7, lr}
 8015402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8015404:	4802      	ldr	r0, [pc, #8]	; (8015410 <TIM6_DAC_IRQHandler+0x10>)
 8015406:	f7f2 fa10 	bl	800782a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 801540a:	bf00      	nop
 801540c:	bd80      	pop	{r7, pc}
 801540e:	bf00      	nop
 8015410:	2000996c 	.word	0x2000996c

08015414 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8015414:	b580      	push	{r7, lr}
 8015416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8015418:	4802      	ldr	r0, [pc, #8]	; (8015424 <DMA2_Stream3_IRQHandler+0x10>)
 801541a:	f7eb fea9 	bl	8001170 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 801541e:	bf00      	nop
 8015420:	bd80      	pop	{r7, pc}
 8015422:	bf00      	nop
 8015424:	200098c0 	.word	0x200098c0

08015428 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8015428:	b580      	push	{r7, lr}
 801542a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 801542c:	4802      	ldr	r0, [pc, #8]	; (8015438 <OTG_FS_IRQHandler+0x10>)
 801542e:	f7ec ff6d 	bl	800230c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8015432:	bf00      	nop
 8015434:	bd80      	pop	{r7, pc}
 8015436:	bf00      	nop
 8015438:	20009d84 	.word	0x20009d84

0801543c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 801543c:	b580      	push	{r7, lr}
 801543e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8015440:	4802      	ldr	r0, [pc, #8]	; (801544c <DMA2_Stream6_IRQHandler+0x10>)
 8015442:	f7eb fe95 	bl	8001170 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8015446:	bf00      	nop
 8015448:	bd80      	pop	{r7, pc}
 801544a:	bf00      	nop
 801544c:	200096e4 	.word	0x200096e4

08015450 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8015450:	b580      	push	{r7, lr}
 8015452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8015454:	4802      	ldr	r0, [pc, #8]	; (8015460 <LTDC_IRQHandler+0x10>)
 8015456:	f7ee fb33 	bl	8003ac0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 801545a:	bf00      	nop
 801545c:	bd80      	pop	{r7, pc}
 801545e:	bf00      	nop
 8015460:	20008c5c 	.word	0x20008c5c

08015464 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8015464:	b580      	push	{r7, lr}
 8015466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8015468:	4802      	ldr	r0, [pc, #8]	; (8015474 <DMA2D_IRQHandler+0x10>)
 801546a:	f7ec f93f 	bl	80016ec <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 801546e:	bf00      	nop
 8015470:	bd80      	pop	{r7, pc}
 8015472:	bf00      	nop
 8015474:	200097c8 	.word	0x200097c8

08015478 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8015478:	b580      	push	{r7, lr}
 801547a:	b084      	sub	sp, #16
 801547c:	af00      	add	r7, sp, #0
 801547e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8015480:	4b11      	ldr	r3, [pc, #68]	; (80154c8 <_sbrk+0x50>)
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	2b00      	cmp	r3, #0
 8015486:	d102      	bne.n	801548e <_sbrk+0x16>
		heap_end = &end;
 8015488:	4b0f      	ldr	r3, [pc, #60]	; (80154c8 <_sbrk+0x50>)
 801548a:	4a10      	ldr	r2, [pc, #64]	; (80154cc <_sbrk+0x54>)
 801548c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 801548e:	4b0e      	ldr	r3, [pc, #56]	; (80154c8 <_sbrk+0x50>)
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8015494:	4b0c      	ldr	r3, [pc, #48]	; (80154c8 <_sbrk+0x50>)
 8015496:	681a      	ldr	r2, [r3, #0]
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	4413      	add	r3, r2
 801549c:	466a      	mov	r2, sp
 801549e:	4293      	cmp	r3, r2
 80154a0:	d907      	bls.n	80154b2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80154a2:	f000 fb6b 	bl	8015b7c <__errno>
 80154a6:	4602      	mov	r2, r0
 80154a8:	230c      	movs	r3, #12
 80154aa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80154ac:	f04f 33ff 	mov.w	r3, #4294967295
 80154b0:	e006      	b.n	80154c0 <_sbrk+0x48>
	}

	heap_end += incr;
 80154b2:	4b05      	ldr	r3, [pc, #20]	; (80154c8 <_sbrk+0x50>)
 80154b4:	681a      	ldr	r2, [r3, #0]
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	4413      	add	r3, r2
 80154ba:	4a03      	ldr	r2, [pc, #12]	; (80154c8 <_sbrk+0x50>)
 80154bc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80154be:	68fb      	ldr	r3, [r7, #12]
}
 80154c0:	4618      	mov	r0, r3
 80154c2:	3710      	adds	r7, #16
 80154c4:	46bd      	mov	sp, r7
 80154c6:	bd80      	pop	{r7, pc}
 80154c8:	20008440 	.word	0x20008440
 80154cc:	2000a050 	.word	0x2000a050

080154d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80154d0:	b480      	push	{r7}
 80154d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80154d4:	4b15      	ldr	r3, [pc, #84]	; (801552c <SystemInit+0x5c>)
 80154d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80154da:	4a14      	ldr	r2, [pc, #80]	; (801552c <SystemInit+0x5c>)
 80154dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80154e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80154e4:	4b12      	ldr	r3, [pc, #72]	; (8015530 <SystemInit+0x60>)
 80154e6:	681b      	ldr	r3, [r3, #0]
 80154e8:	4a11      	ldr	r2, [pc, #68]	; (8015530 <SystemInit+0x60>)
 80154ea:	f043 0301 	orr.w	r3, r3, #1
 80154ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80154f0:	4b0f      	ldr	r3, [pc, #60]	; (8015530 <SystemInit+0x60>)
 80154f2:	2200      	movs	r2, #0
 80154f4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80154f6:	4b0e      	ldr	r3, [pc, #56]	; (8015530 <SystemInit+0x60>)
 80154f8:	681a      	ldr	r2, [r3, #0]
 80154fa:	490d      	ldr	r1, [pc, #52]	; (8015530 <SystemInit+0x60>)
 80154fc:	4b0d      	ldr	r3, [pc, #52]	; (8015534 <SystemInit+0x64>)
 80154fe:	4013      	ands	r3, r2
 8015500:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8015502:	4b0b      	ldr	r3, [pc, #44]	; (8015530 <SystemInit+0x60>)
 8015504:	4a0c      	ldr	r2, [pc, #48]	; (8015538 <SystemInit+0x68>)
 8015506:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8015508:	4b09      	ldr	r3, [pc, #36]	; (8015530 <SystemInit+0x60>)
 801550a:	681b      	ldr	r3, [r3, #0]
 801550c:	4a08      	ldr	r2, [pc, #32]	; (8015530 <SystemInit+0x60>)
 801550e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8015512:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8015514:	4b06      	ldr	r3, [pc, #24]	; (8015530 <SystemInit+0x60>)
 8015516:	2200      	movs	r2, #0
 8015518:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801551a:	4b04      	ldr	r3, [pc, #16]	; (801552c <SystemInit+0x5c>)
 801551c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8015520:	609a      	str	r2, [r3, #8]
#endif
}
 8015522:	bf00      	nop
 8015524:	46bd      	mov	sp, r7
 8015526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801552a:	4770      	bx	lr
 801552c:	e000ed00 	.word	0xe000ed00
 8015530:	40023800 	.word	0x40023800
 8015534:	fef6ffff 	.word	0xfef6ffff
 8015538:	24003010 	.word	0x24003010

0801553c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801553c:	b580      	push	{r7, lr}
 801553e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8015540:	2201      	movs	r2, #1
 8015542:	490e      	ldr	r1, [pc, #56]	; (801557c <MX_USB_HOST_Init+0x40>)
 8015544:	480e      	ldr	r0, [pc, #56]	; (8015580 <MX_USB_HOST_Init+0x44>)
 8015546:	f7f5 fe65 	bl	800b214 <USBH_Init>
 801554a:	4603      	mov	r3, r0
 801554c:	2b00      	cmp	r3, #0
 801554e:	d001      	beq.n	8015554 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8015550:	f7fe fd1a 	bl	8013f88 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8015554:	490b      	ldr	r1, [pc, #44]	; (8015584 <MX_USB_HOST_Init+0x48>)
 8015556:	480a      	ldr	r0, [pc, #40]	; (8015580 <MX_USB_HOST_Init+0x44>)
 8015558:	f7f5 fef7 	bl	800b34a <USBH_RegisterClass>
 801555c:	4603      	mov	r3, r0
 801555e:	2b00      	cmp	r3, #0
 8015560:	d001      	beq.n	8015566 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8015562:	f7fe fd11 	bl	8013f88 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8015566:	4806      	ldr	r0, [pc, #24]	; (8015580 <MX_USB_HOST_Init+0x44>)
 8015568:	f7f5 ff7c 	bl	800b464 <USBH_Start>
 801556c:	4603      	mov	r3, r0
 801556e:	2b00      	cmp	r3, #0
 8015570:	d001      	beq.n	8015576 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8015572:	f7fe fd09 	bl	8013f88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8015576:	bf00      	nop
 8015578:	bd80      	pop	{r7, pc}
 801557a:	bf00      	nop
 801557c:	08015589 	.word	0x08015589
 8015580:	200099ac 	.word	0x200099ac
 8015584:	20000004 	.word	0x20000004

08015588 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8015588:	b480      	push	{r7}
 801558a:	b083      	sub	sp, #12
 801558c:	af00      	add	r7, sp, #0
 801558e:	6078      	str	r0, [r7, #4]
 8015590:	460b      	mov	r3, r1
 8015592:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8015594:	78fb      	ldrb	r3, [r7, #3]
 8015596:	3b01      	subs	r3, #1
 8015598:	2b04      	cmp	r3, #4
 801559a:	d819      	bhi.n	80155d0 <USBH_UserProcess+0x48>
 801559c:	a201      	add	r2, pc, #4	; (adr r2, 80155a4 <USBH_UserProcess+0x1c>)
 801559e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155a2:	bf00      	nop
 80155a4:	080155d1 	.word	0x080155d1
 80155a8:	080155c1 	.word	0x080155c1
 80155ac:	080155d1 	.word	0x080155d1
 80155b0:	080155c9 	.word	0x080155c9
 80155b4:	080155b9 	.word	0x080155b9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80155b8:	4b09      	ldr	r3, [pc, #36]	; (80155e0 <USBH_UserProcess+0x58>)
 80155ba:	2203      	movs	r2, #3
 80155bc:	701a      	strb	r2, [r3, #0]
  break;
 80155be:	e008      	b.n	80155d2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80155c0:	4b07      	ldr	r3, [pc, #28]	; (80155e0 <USBH_UserProcess+0x58>)
 80155c2:	2202      	movs	r2, #2
 80155c4:	701a      	strb	r2, [r3, #0]
  break;
 80155c6:	e004      	b.n	80155d2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80155c8:	4b05      	ldr	r3, [pc, #20]	; (80155e0 <USBH_UserProcess+0x58>)
 80155ca:	2201      	movs	r2, #1
 80155cc:	701a      	strb	r2, [r3, #0]
  break;
 80155ce:	e000      	b.n	80155d2 <USBH_UserProcess+0x4a>

  default:
  break;
 80155d0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80155d2:	bf00      	nop
 80155d4:	370c      	adds	r7, #12
 80155d6:	46bd      	mov	sp, r7
 80155d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155dc:	4770      	bx	lr
 80155de:	bf00      	nop
 80155e0:	20008444 	.word	0x20008444

080155e4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80155e4:	b580      	push	{r7, lr}
 80155e6:	b08a      	sub	sp, #40	; 0x28
 80155e8:	af00      	add	r7, sp, #0
 80155ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80155ec:	f107 0314 	add.w	r3, r7, #20
 80155f0:	2200      	movs	r2, #0
 80155f2:	601a      	str	r2, [r3, #0]
 80155f4:	605a      	str	r2, [r3, #4]
 80155f6:	609a      	str	r2, [r3, #8]
 80155f8:	60da      	str	r2, [r3, #12]
 80155fa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	681b      	ldr	r3, [r3, #0]
 8015600:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015604:	d13c      	bne.n	8015680 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015606:	4b20      	ldr	r3, [pc, #128]	; (8015688 <HAL_HCD_MspInit+0xa4>)
 8015608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801560a:	4a1f      	ldr	r2, [pc, #124]	; (8015688 <HAL_HCD_MspInit+0xa4>)
 801560c:	f043 0301 	orr.w	r3, r3, #1
 8015610:	6313      	str	r3, [r2, #48]	; 0x30
 8015612:	4b1d      	ldr	r3, [pc, #116]	; (8015688 <HAL_HCD_MspInit+0xa4>)
 8015614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015616:	f003 0301 	and.w	r3, r3, #1
 801561a:	613b      	str	r3, [r7, #16]
 801561c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID 
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 801561e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8015622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015624:	2302      	movs	r3, #2
 8015626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015628:	2300      	movs	r3, #0
 801562a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801562c:	2303      	movs	r3, #3
 801562e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8015630:	230a      	movs	r3, #10
 8015632:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015634:	f107 0314 	add.w	r3, r7, #20
 8015638:	4619      	mov	r1, r3
 801563a:	4814      	ldr	r0, [pc, #80]	; (801568c <HAL_HCD_MspInit+0xa8>)
 801563c:	f7ec f9f8 	bl	8001a30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015640:	4b11      	ldr	r3, [pc, #68]	; (8015688 <HAL_HCD_MspInit+0xa4>)
 8015642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015644:	4a10      	ldr	r2, [pc, #64]	; (8015688 <HAL_HCD_MspInit+0xa4>)
 8015646:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801564a:	6353      	str	r3, [r2, #52]	; 0x34
 801564c:	4b0e      	ldr	r3, [pc, #56]	; (8015688 <HAL_HCD_MspInit+0xa4>)
 801564e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015654:	60fb      	str	r3, [r7, #12]
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	4b0b      	ldr	r3, [pc, #44]	; (8015688 <HAL_HCD_MspInit+0xa4>)
 801565a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801565c:	4a0a      	ldr	r2, [pc, #40]	; (8015688 <HAL_HCD_MspInit+0xa4>)
 801565e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015662:	6453      	str	r3, [r2, #68]	; 0x44
 8015664:	4b08      	ldr	r3, [pc, #32]	; (8015688 <HAL_HCD_MspInit+0xa4>)
 8015666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801566c:	60bb      	str	r3, [r7, #8]
 801566e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8015670:	2200      	movs	r2, #0
 8015672:	2105      	movs	r1, #5
 8015674:	2043      	movs	r0, #67	; 0x43
 8015676:	f7eb fac5 	bl	8000c04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801567a:	2043      	movs	r0, #67	; 0x43
 801567c:	f7eb fade 	bl	8000c3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015680:	bf00      	nop
 8015682:	3728      	adds	r7, #40	; 0x28
 8015684:	46bd      	mov	sp, r7
 8015686:	bd80      	pop	{r7, pc}
 8015688:	40023800 	.word	0x40023800
 801568c:	40020000 	.word	0x40020000

08015690 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8015690:	b580      	push	{r7, lr}
 8015692:	b082      	sub	sp, #8
 8015694:	af00      	add	r7, sp, #0
 8015696:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801569e:	4618      	mov	r0, r3
 80156a0:	f7f6 fa33 	bl	800bb0a <USBH_LL_IncTimer>
}
 80156a4:	bf00      	nop
 80156a6:	3708      	adds	r7, #8
 80156a8:	46bd      	mov	sp, r7
 80156aa:	bd80      	pop	{r7, pc}

080156ac <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80156ac:	b580      	push	{r7, lr}
 80156ae:	b082      	sub	sp, #8
 80156b0:	af00      	add	r7, sp, #0
 80156b2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80156ba:	4618      	mov	r0, r3
 80156bc:	f7f6 fa78 	bl	800bbb0 <USBH_LL_Connect>
}
 80156c0:	bf00      	nop
 80156c2:	3708      	adds	r7, #8
 80156c4:	46bd      	mov	sp, r7
 80156c6:	bd80      	pop	{r7, pc}

080156c8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80156c8:	b580      	push	{r7, lr}
 80156ca:	b082      	sub	sp, #8
 80156cc:	af00      	add	r7, sp, #0
 80156ce:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80156d6:	4618      	mov	r0, r3
 80156d8:	f7f6 fa9e 	bl	800bc18 <USBH_LL_Disconnect>
}
 80156dc:	bf00      	nop
 80156de:	3708      	adds	r7, #8
 80156e0:	46bd      	mov	sp, r7
 80156e2:	bd80      	pop	{r7, pc}

080156e4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80156e4:	b580      	push	{r7, lr}
 80156e6:	b082      	sub	sp, #8
 80156e8:	af00      	add	r7, sp, #0
 80156ea:	6078      	str	r0, [r7, #4]
 80156ec:	460b      	mov	r3, r1
 80156ee:	70fb      	strb	r3, [r7, #3]
 80156f0:	4613      	mov	r3, r2
 80156f2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80156fa:	4618      	mov	r0, r3
 80156fc:	f7f6 fadc 	bl	800bcb8 <USBH_LL_NotifyURBChange>
#endif
}
 8015700:	bf00      	nop
 8015702:	3708      	adds	r7, #8
 8015704:	46bd      	mov	sp, r7
 8015706:	bd80      	pop	{r7, pc}

08015708 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8015708:	b580      	push	{r7, lr}
 801570a:	b082      	sub	sp, #8
 801570c:	af00      	add	r7, sp, #0
 801570e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015716:	4618      	mov	r0, r3
 8015718:	f7f6 fa21 	bl	800bb5e <USBH_LL_PortEnabled>
} 
 801571c:	bf00      	nop
 801571e:	3708      	adds	r7, #8
 8015720:	46bd      	mov	sp, r7
 8015722:	bd80      	pop	{r7, pc}

08015724 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8015724:	b580      	push	{r7, lr}
 8015726:	b082      	sub	sp, #8
 8015728:	af00      	add	r7, sp, #0
 801572a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015732:	4618      	mov	r0, r3
 8015734:	f7f6 fa21 	bl	800bb7a <USBH_LL_PortDisabled>
} 
 8015738:	bf00      	nop
 801573a:	3708      	adds	r7, #8
 801573c:	46bd      	mov	sp, r7
 801573e:	bd80      	pop	{r7, pc}

08015740 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8015740:	b580      	push	{r7, lr}
 8015742:	b082      	sub	sp, #8
 8015744:	af00      	add	r7, sp, #0
 8015746:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 801574e:	2b01      	cmp	r3, #1
 8015750:	d12a      	bne.n	80157a8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8015752:	4a18      	ldr	r2, [pc, #96]	; (80157b4 <USBH_LL_Init+0x74>)
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	4a15      	ldr	r2, [pc, #84]	; (80157b4 <USBH_LL_Init+0x74>)
 801575e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015762:	4b14      	ldr	r3, [pc, #80]	; (80157b4 <USBH_LL_Init+0x74>)
 8015764:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015768:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801576a:	4b12      	ldr	r3, [pc, #72]	; (80157b4 <USBH_LL_Init+0x74>)
 801576c:	2208      	movs	r2, #8
 801576e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8015770:	4b10      	ldr	r3, [pc, #64]	; (80157b4 <USBH_LL_Init+0x74>)
 8015772:	2203      	movs	r2, #3
 8015774:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015776:	4b0f      	ldr	r3, [pc, #60]	; (80157b4 <USBH_LL_Init+0x74>)
 8015778:	2200      	movs	r2, #0
 801577a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801577c:	4b0d      	ldr	r3, [pc, #52]	; (80157b4 <USBH_LL_Init+0x74>)
 801577e:	2202      	movs	r2, #2
 8015780:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015782:	4b0c      	ldr	r3, [pc, #48]	; (80157b4 <USBH_LL_Init+0x74>)
 8015784:	2200      	movs	r2, #0
 8015786:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8015788:	480a      	ldr	r0, [pc, #40]	; (80157b4 <USBH_LL_Init+0x74>)
 801578a:	f7ec fb45 	bl	8001e18 <HAL_HCD_Init>
 801578e:	4603      	mov	r3, r0
 8015790:	2b00      	cmp	r3, #0
 8015792:	d001      	beq.n	8015798 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8015794:	f7fe fbf8 	bl	8013f88 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8015798:	4806      	ldr	r0, [pc, #24]	; (80157b4 <USBH_LL_Init+0x74>)
 801579a:	f7ec ff35 	bl	8002608 <HAL_HCD_GetCurrentFrame>
 801579e:	4603      	mov	r3, r0
 80157a0:	4619      	mov	r1, r3
 80157a2:	6878      	ldr	r0, [r7, #4]
 80157a4:	f7f6 f9a2 	bl	800baec <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80157a8:	2300      	movs	r3, #0
}
 80157aa:	4618      	mov	r0, r3
 80157ac:	3708      	adds	r7, #8
 80157ae:	46bd      	mov	sp, r7
 80157b0:	bd80      	pop	{r7, pc}
 80157b2:	bf00      	nop
 80157b4:	20009d84 	.word	0x20009d84

080157b8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80157b8:	b580      	push	{r7, lr}
 80157ba:	b084      	sub	sp, #16
 80157bc:	af00      	add	r7, sp, #0
 80157be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80157c0:	2300      	movs	r3, #0
 80157c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80157c4:	2300      	movs	r3, #0
 80157c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80157ce:	4618      	mov	r0, r3
 80157d0:	f7ec fea2 	bl	8002518 <HAL_HCD_Start>
 80157d4:	4603      	mov	r3, r0
 80157d6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80157d8:	7bfb      	ldrb	r3, [r7, #15]
 80157da:	4618      	mov	r0, r3
 80157dc:	f000 f95c 	bl	8015a98 <USBH_Get_USB_Status>
 80157e0:	4603      	mov	r3, r0
 80157e2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80157e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80157e6:	4618      	mov	r0, r3
 80157e8:	3710      	adds	r7, #16
 80157ea:	46bd      	mov	sp, r7
 80157ec:	bd80      	pop	{r7, pc}

080157ee <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80157ee:	b580      	push	{r7, lr}
 80157f0:	b084      	sub	sp, #16
 80157f2:	af00      	add	r7, sp, #0
 80157f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80157f6:	2300      	movs	r3, #0
 80157f8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80157fa:	2300      	movs	r3, #0
 80157fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8015804:	4618      	mov	r0, r3
 8015806:	f7ec feaa 	bl	800255e <HAL_HCD_Stop>
 801580a:	4603      	mov	r3, r0
 801580c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801580e:	7bfb      	ldrb	r3, [r7, #15]
 8015810:	4618      	mov	r0, r3
 8015812:	f000 f941 	bl	8015a98 <USBH_Get_USB_Status>
 8015816:	4603      	mov	r3, r0
 8015818:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 801581a:	7bbb      	ldrb	r3, [r7, #14]
}
 801581c:	4618      	mov	r0, r3
 801581e:	3710      	adds	r7, #16
 8015820:	46bd      	mov	sp, r7
 8015822:	bd80      	pop	{r7, pc}

08015824 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8015824:	b580      	push	{r7, lr}
 8015826:	b084      	sub	sp, #16
 8015828:	af00      	add	r7, sp, #0
 801582a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 801582c:	2301      	movs	r3, #1
 801582e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8015836:	4618      	mov	r0, r3
 8015838:	f7ec fef4 	bl	8002624 <HAL_HCD_GetCurrentSpeed>
 801583c:	4603      	mov	r3, r0
 801583e:	2b01      	cmp	r3, #1
 8015840:	d007      	beq.n	8015852 <USBH_LL_GetSpeed+0x2e>
 8015842:	2b01      	cmp	r3, #1
 8015844:	d302      	bcc.n	801584c <USBH_LL_GetSpeed+0x28>
 8015846:	2b02      	cmp	r3, #2
 8015848:	d006      	beq.n	8015858 <USBH_LL_GetSpeed+0x34>
 801584a:	e008      	b.n	801585e <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 801584c:	2300      	movs	r3, #0
 801584e:	73fb      	strb	r3, [r7, #15]
    break;
 8015850:	e008      	b.n	8015864 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8015852:	2301      	movs	r3, #1
 8015854:	73fb      	strb	r3, [r7, #15]
    break;
 8015856:	e005      	b.n	8015864 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8015858:	2302      	movs	r3, #2
 801585a:	73fb      	strb	r3, [r7, #15]
    break;
 801585c:	e002      	b.n	8015864 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 801585e:	2301      	movs	r3, #1
 8015860:	73fb      	strb	r3, [r7, #15]
    break;
 8015862:	bf00      	nop
  }
  return  speed;
 8015864:	7bfb      	ldrb	r3, [r7, #15]
}
 8015866:	4618      	mov	r0, r3
 8015868:	3710      	adds	r7, #16
 801586a:	46bd      	mov	sp, r7
 801586c:	bd80      	pop	{r7, pc}

0801586e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801586e:	b580      	push	{r7, lr}
 8015870:	b084      	sub	sp, #16
 8015872:	af00      	add	r7, sp, #0
 8015874:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015876:	2300      	movs	r3, #0
 8015878:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801587a:	2300      	movs	r3, #0
 801587c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8015884:	4618      	mov	r0, r3
 8015886:	f7ec fe87 	bl	8002598 <HAL_HCD_ResetPort>
 801588a:	4603      	mov	r3, r0
 801588c:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 801588e:	7bfb      	ldrb	r3, [r7, #15]
 8015890:	4618      	mov	r0, r3
 8015892:	f000 f901 	bl	8015a98 <USBH_Get_USB_Status>
 8015896:	4603      	mov	r3, r0
 8015898:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801589a:	7bbb      	ldrb	r3, [r7, #14]
}
 801589c:	4618      	mov	r0, r3
 801589e:	3710      	adds	r7, #16
 80158a0:	46bd      	mov	sp, r7
 80158a2:	bd80      	pop	{r7, pc}

080158a4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80158a4:	b580      	push	{r7, lr}
 80158a6:	b082      	sub	sp, #8
 80158a8:	af00      	add	r7, sp, #0
 80158aa:	6078      	str	r0, [r7, #4]
 80158ac:	460b      	mov	r3, r1
 80158ae:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80158b6:	78fa      	ldrb	r2, [r7, #3]
 80158b8:	4611      	mov	r1, r2
 80158ba:	4618      	mov	r0, r3
 80158bc:	f7ec fe8f 	bl	80025de <HAL_HCD_HC_GetXferCount>
 80158c0:	4603      	mov	r3, r0
}
 80158c2:	4618      	mov	r0, r3
 80158c4:	3708      	adds	r7, #8
 80158c6:	46bd      	mov	sp, r7
 80158c8:	bd80      	pop	{r7, pc}

080158ca <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80158ca:	b590      	push	{r4, r7, lr}
 80158cc:	b089      	sub	sp, #36	; 0x24
 80158ce:	af04      	add	r7, sp, #16
 80158d0:	6078      	str	r0, [r7, #4]
 80158d2:	4608      	mov	r0, r1
 80158d4:	4611      	mov	r1, r2
 80158d6:	461a      	mov	r2, r3
 80158d8:	4603      	mov	r3, r0
 80158da:	70fb      	strb	r3, [r7, #3]
 80158dc:	460b      	mov	r3, r1
 80158de:	70bb      	strb	r3, [r7, #2]
 80158e0:	4613      	mov	r3, r2
 80158e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80158e4:	2300      	movs	r3, #0
 80158e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80158e8:	2300      	movs	r3, #0
 80158ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80158f2:	787c      	ldrb	r4, [r7, #1]
 80158f4:	78ba      	ldrb	r2, [r7, #2]
 80158f6:	78f9      	ldrb	r1, [r7, #3]
 80158f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80158fa:	9302      	str	r3, [sp, #8]
 80158fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015900:	9301      	str	r3, [sp, #4]
 8015902:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015906:	9300      	str	r3, [sp, #0]
 8015908:	4623      	mov	r3, r4
 801590a:	f7ec fadb 	bl	8001ec4 <HAL_HCD_HC_Init>
 801590e:	4603      	mov	r3, r0
 8015910:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8015912:	7bfb      	ldrb	r3, [r7, #15]
 8015914:	4618      	mov	r0, r3
 8015916:	f000 f8bf 	bl	8015a98 <USBH_Get_USB_Status>
 801591a:	4603      	mov	r3, r0
 801591c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801591e:	7bbb      	ldrb	r3, [r7, #14]
}
 8015920:	4618      	mov	r0, r3
 8015922:	3714      	adds	r7, #20
 8015924:	46bd      	mov	sp, r7
 8015926:	bd90      	pop	{r4, r7, pc}

08015928 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8015928:	b580      	push	{r7, lr}
 801592a:	b084      	sub	sp, #16
 801592c:	af00      	add	r7, sp, #0
 801592e:	6078      	str	r0, [r7, #4]
 8015930:	460b      	mov	r3, r1
 8015932:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015934:	2300      	movs	r3, #0
 8015936:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015938:	2300      	movs	r3, #0
 801593a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8015942:	78fa      	ldrb	r2, [r7, #3]
 8015944:	4611      	mov	r1, r2
 8015946:	4618      	mov	r0, r3
 8015948:	f7ec fb54 	bl	8001ff4 <HAL_HCD_HC_Halt>
 801594c:	4603      	mov	r3, r0
 801594e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015950:	7bfb      	ldrb	r3, [r7, #15]
 8015952:	4618      	mov	r0, r3
 8015954:	f000 f8a0 	bl	8015a98 <USBH_Get_USB_Status>
 8015958:	4603      	mov	r3, r0
 801595a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801595c:	7bbb      	ldrb	r3, [r7, #14]
}
 801595e:	4618      	mov	r0, r3
 8015960:	3710      	adds	r7, #16
 8015962:	46bd      	mov	sp, r7
 8015964:	bd80      	pop	{r7, pc}

08015966 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8015966:	b590      	push	{r4, r7, lr}
 8015968:	b089      	sub	sp, #36	; 0x24
 801596a:	af04      	add	r7, sp, #16
 801596c:	6078      	str	r0, [r7, #4]
 801596e:	4608      	mov	r0, r1
 8015970:	4611      	mov	r1, r2
 8015972:	461a      	mov	r2, r3
 8015974:	4603      	mov	r3, r0
 8015976:	70fb      	strb	r3, [r7, #3]
 8015978:	460b      	mov	r3, r1
 801597a:	70bb      	strb	r3, [r7, #2]
 801597c:	4613      	mov	r3, r2
 801597e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015980:	2300      	movs	r3, #0
 8015982:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015984:	2300      	movs	r3, #0
 8015986:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 801598e:	787c      	ldrb	r4, [r7, #1]
 8015990:	78ba      	ldrb	r2, [r7, #2]
 8015992:	78f9      	ldrb	r1, [r7, #3]
 8015994:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8015998:	9303      	str	r3, [sp, #12]
 801599a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801599c:	9302      	str	r3, [sp, #8]
 801599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159a0:	9301      	str	r3, [sp, #4]
 80159a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80159a6:	9300      	str	r3, [sp, #0]
 80159a8:	4623      	mov	r3, r4
 80159aa:	f7ec fb47 	bl	800203c <HAL_HCD_HC_SubmitRequest>
 80159ae:	4603      	mov	r3, r0
 80159b0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80159b2:	7bfb      	ldrb	r3, [r7, #15]
 80159b4:	4618      	mov	r0, r3
 80159b6:	f000 f86f 	bl	8015a98 <USBH_Get_USB_Status>
 80159ba:	4603      	mov	r3, r0
 80159bc:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80159be:	7bbb      	ldrb	r3, [r7, #14]
}
 80159c0:	4618      	mov	r0, r3
 80159c2:	3714      	adds	r7, #20
 80159c4:	46bd      	mov	sp, r7
 80159c6:	bd90      	pop	{r4, r7, pc}

080159c8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80159c8:	b580      	push	{r7, lr}
 80159ca:	b082      	sub	sp, #8
 80159cc:	af00      	add	r7, sp, #0
 80159ce:	6078      	str	r0, [r7, #4]
 80159d0:	460b      	mov	r3, r1
 80159d2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80159da:	78fa      	ldrb	r2, [r7, #3]
 80159dc:	4611      	mov	r1, r2
 80159de:	4618      	mov	r0, r3
 80159e0:	f7ec fde8 	bl	80025b4 <HAL_HCD_HC_GetURBState>
 80159e4:	4603      	mov	r3, r0
}
 80159e6:	4618      	mov	r0, r3
 80159e8:	3708      	adds	r7, #8
 80159ea:	46bd      	mov	sp, r7
 80159ec:	bd80      	pop	{r7, pc}

080159ee <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80159ee:	b580      	push	{r7, lr}
 80159f0:	b082      	sub	sp, #8
 80159f2:	af00      	add	r7, sp, #0
 80159f4:	6078      	str	r0, [r7, #4]
 80159f6:	460b      	mov	r3, r1
 80159f8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8015a00:	2b01      	cmp	r3, #1
 8015a02:	d103      	bne.n	8015a0c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8015a04:	78fb      	ldrb	r3, [r7, #3]
 8015a06:	4618      	mov	r0, r3
 8015a08:	f000 f872 	bl	8015af0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8015a0c:	20c8      	movs	r0, #200	; 0xc8
 8015a0e:	f7ea fdad 	bl	800056c <HAL_Delay>
  return USBH_OK;
 8015a12:	2300      	movs	r3, #0
}
 8015a14:	4618      	mov	r0, r3
 8015a16:	3708      	adds	r7, #8
 8015a18:	46bd      	mov	sp, r7
 8015a1a:	bd80      	pop	{r7, pc}

08015a1c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8015a1c:	b480      	push	{r7}
 8015a1e:	b085      	sub	sp, #20
 8015a20:	af00      	add	r7, sp, #0
 8015a22:	6078      	str	r0, [r7, #4]
 8015a24:	460b      	mov	r3, r1
 8015a26:	70fb      	strb	r3, [r7, #3]
 8015a28:	4613      	mov	r3, r2
 8015a2a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8015a32:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8015a34:	78fa      	ldrb	r2, [r7, #3]
 8015a36:	68f9      	ldr	r1, [r7, #12]
 8015a38:	4613      	mov	r3, r2
 8015a3a:	009b      	lsls	r3, r3, #2
 8015a3c:	4413      	add	r3, r2
 8015a3e:	00db      	lsls	r3, r3, #3
 8015a40:	440b      	add	r3, r1
 8015a42:	333b      	adds	r3, #59	; 0x3b
 8015a44:	781b      	ldrb	r3, [r3, #0]
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d00a      	beq.n	8015a60 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8015a4a:	78fa      	ldrb	r2, [r7, #3]
 8015a4c:	68f9      	ldr	r1, [r7, #12]
 8015a4e:	4613      	mov	r3, r2
 8015a50:	009b      	lsls	r3, r3, #2
 8015a52:	4413      	add	r3, r2
 8015a54:	00db      	lsls	r3, r3, #3
 8015a56:	440b      	add	r3, r1
 8015a58:	3350      	adds	r3, #80	; 0x50
 8015a5a:	78ba      	ldrb	r2, [r7, #2]
 8015a5c:	701a      	strb	r2, [r3, #0]
 8015a5e:	e009      	b.n	8015a74 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8015a60:	78fa      	ldrb	r2, [r7, #3]
 8015a62:	68f9      	ldr	r1, [r7, #12]
 8015a64:	4613      	mov	r3, r2
 8015a66:	009b      	lsls	r3, r3, #2
 8015a68:	4413      	add	r3, r2
 8015a6a:	00db      	lsls	r3, r3, #3
 8015a6c:	440b      	add	r3, r1
 8015a6e:	3351      	adds	r3, #81	; 0x51
 8015a70:	78ba      	ldrb	r2, [r7, #2]
 8015a72:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8015a74:	2300      	movs	r3, #0
}
 8015a76:	4618      	mov	r0, r3
 8015a78:	3714      	adds	r7, #20
 8015a7a:	46bd      	mov	sp, r7
 8015a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a80:	4770      	bx	lr

08015a82 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8015a82:	b580      	push	{r7, lr}
 8015a84:	b082      	sub	sp, #8
 8015a86:	af00      	add	r7, sp, #0
 8015a88:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8015a8a:	6878      	ldr	r0, [r7, #4]
 8015a8c:	f7ea fd6e 	bl	800056c <HAL_Delay>
}
 8015a90:	bf00      	nop
 8015a92:	3708      	adds	r7, #8
 8015a94:	46bd      	mov	sp, r7
 8015a96:	bd80      	pop	{r7, pc}

08015a98 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015a98:	b480      	push	{r7}
 8015a9a:	b085      	sub	sp, #20
 8015a9c:	af00      	add	r7, sp, #0
 8015a9e:	4603      	mov	r3, r0
 8015aa0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015aa2:	2300      	movs	r3, #0
 8015aa4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015aa6:	79fb      	ldrb	r3, [r7, #7]
 8015aa8:	2b03      	cmp	r3, #3
 8015aaa:	d817      	bhi.n	8015adc <USBH_Get_USB_Status+0x44>
 8015aac:	a201      	add	r2, pc, #4	; (adr r2, 8015ab4 <USBH_Get_USB_Status+0x1c>)
 8015aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ab2:	bf00      	nop
 8015ab4:	08015ac5 	.word	0x08015ac5
 8015ab8:	08015acb 	.word	0x08015acb
 8015abc:	08015ad1 	.word	0x08015ad1
 8015ac0:	08015ad7 	.word	0x08015ad7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8015ac4:	2300      	movs	r3, #0
 8015ac6:	73fb      	strb	r3, [r7, #15]
    break;
 8015ac8:	e00b      	b.n	8015ae2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8015aca:	2302      	movs	r3, #2
 8015acc:	73fb      	strb	r3, [r7, #15]
    break;
 8015ace:	e008      	b.n	8015ae2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8015ad0:	2301      	movs	r3, #1
 8015ad2:	73fb      	strb	r3, [r7, #15]
    break;
 8015ad4:	e005      	b.n	8015ae2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8015ad6:	2302      	movs	r3, #2
 8015ad8:	73fb      	strb	r3, [r7, #15]
    break;
 8015ada:	e002      	b.n	8015ae2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8015adc:	2302      	movs	r3, #2
 8015ade:	73fb      	strb	r3, [r7, #15]
    break;
 8015ae0:	bf00      	nop
  }
  return usb_status;
 8015ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ae4:	4618      	mov	r0, r3
 8015ae6:	3714      	adds	r7, #20
 8015ae8:	46bd      	mov	sp, r7
 8015aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aee:	4770      	bx	lr

08015af0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8015af0:	b580      	push	{r7, lr}
 8015af2:	b084      	sub	sp, #16
 8015af4:	af00      	add	r7, sp, #0
 8015af6:	4603      	mov	r3, r0
 8015af8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8015afa:	79fb      	ldrb	r3, [r7, #7]
 8015afc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8015afe:	79fb      	ldrb	r3, [r7, #7]
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d102      	bne.n	8015b0a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8015b04:	2301      	movs	r3, #1
 8015b06:	73fb      	strb	r3, [r7, #15]
 8015b08:	e001      	b.n	8015b0e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8015b0a:	2300      	movs	r3, #0
 8015b0c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8015b0e:	7bfb      	ldrb	r3, [r7, #15]
 8015b10:	461a      	mov	r2, r3
 8015b12:	2120      	movs	r1, #32
 8015b14:	4803      	ldr	r0, [pc, #12]	; (8015b24 <MX_DriverVbusFS+0x34>)
 8015b16:	f7ec f94d 	bl	8001db4 <HAL_GPIO_WritePin>
}
 8015b1a:	bf00      	nop
 8015b1c:	3710      	adds	r7, #16
 8015b1e:	46bd      	mov	sp, r7
 8015b20:	bd80      	pop	{r7, pc}
 8015b22:	bf00      	nop
 8015b24:	40020c00 	.word	0x40020c00

08015b28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8015b28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8015b60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8015b2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8015b2e:	e003      	b.n	8015b38 <LoopCopyDataInit>

08015b30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8015b30:	4b0c      	ldr	r3, [pc, #48]	; (8015b64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8015b32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8015b34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8015b36:	3104      	adds	r1, #4

08015b38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8015b38:	480b      	ldr	r0, [pc, #44]	; (8015b68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8015b3a:	4b0c      	ldr	r3, [pc, #48]	; (8015b6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8015b3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8015b3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8015b40:	d3f6      	bcc.n	8015b30 <CopyDataInit>
  ldr  r2, =_sbss
 8015b42:	4a0b      	ldr	r2, [pc, #44]	; (8015b70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8015b44:	e002      	b.n	8015b4c <LoopFillZerobss>

08015b46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8015b46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8015b48:	f842 3b04 	str.w	r3, [r2], #4

08015b4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8015b4c:	4b09      	ldr	r3, [pc, #36]	; (8015b74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8015b4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8015b50:	d3f9      	bcc.n	8015b46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8015b52:	f7ff fcbd 	bl	80154d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8015b56:	f000 f817 	bl	8015b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8015b5a:	f7fc fe75 	bl	8012848 <main>
  bx  lr    
 8015b5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8015b60:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8015b64:	08015f78 	.word	0x08015f78
  ldr  r0, =_sdata
 8015b68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8015b6c:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8015b70:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8015b74:	2000a04c 	.word	0x2000a04c

08015b78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8015b78:	e7fe      	b.n	8015b78 <ADC_IRQHandler>
	...

08015b7c <__errno>:
 8015b7c:	4b01      	ldr	r3, [pc, #4]	; (8015b84 <__errno+0x8>)
 8015b7e:	6818      	ldr	r0, [r3, #0]
 8015b80:	4770      	bx	lr
 8015b82:	bf00      	nop
 8015b84:	20000030 	.word	0x20000030

08015b88 <__libc_init_array>:
 8015b88:	b570      	push	{r4, r5, r6, lr}
 8015b8a:	4e0d      	ldr	r6, [pc, #52]	; (8015bc0 <__libc_init_array+0x38>)
 8015b8c:	4c0d      	ldr	r4, [pc, #52]	; (8015bc4 <__libc_init_array+0x3c>)
 8015b8e:	1ba4      	subs	r4, r4, r6
 8015b90:	10a4      	asrs	r4, r4, #2
 8015b92:	2500      	movs	r5, #0
 8015b94:	42a5      	cmp	r5, r4
 8015b96:	d109      	bne.n	8015bac <__libc_init_array+0x24>
 8015b98:	4e0b      	ldr	r6, [pc, #44]	; (8015bc8 <__libc_init_array+0x40>)
 8015b9a:	4c0c      	ldr	r4, [pc, #48]	; (8015bcc <__libc_init_array+0x44>)
 8015b9c:	f000 f8f6 	bl	8015d8c <_init>
 8015ba0:	1ba4      	subs	r4, r4, r6
 8015ba2:	10a4      	asrs	r4, r4, #2
 8015ba4:	2500      	movs	r5, #0
 8015ba6:	42a5      	cmp	r5, r4
 8015ba8:	d105      	bne.n	8015bb6 <__libc_init_array+0x2e>
 8015baa:	bd70      	pop	{r4, r5, r6, pc}
 8015bac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015bb0:	4798      	blx	r3
 8015bb2:	3501      	adds	r5, #1
 8015bb4:	e7ee      	b.n	8015b94 <__libc_init_array+0xc>
 8015bb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015bba:	4798      	blx	r3
 8015bbc:	3501      	adds	r5, #1
 8015bbe:	e7f2      	b.n	8015ba6 <__libc_init_array+0x1e>
 8015bc0:	08015f70 	.word	0x08015f70
 8015bc4:	08015f70 	.word	0x08015f70
 8015bc8:	08015f70 	.word	0x08015f70
 8015bcc:	08015f74 	.word	0x08015f74

08015bd0 <malloc>:
 8015bd0:	4b02      	ldr	r3, [pc, #8]	; (8015bdc <malloc+0xc>)
 8015bd2:	4601      	mov	r1, r0
 8015bd4:	6818      	ldr	r0, [r3, #0]
 8015bd6:	f000 b86d 	b.w	8015cb4 <_malloc_r>
 8015bda:	bf00      	nop
 8015bdc:	20000030 	.word	0x20000030

08015be0 <free>:
 8015be0:	4b02      	ldr	r3, [pc, #8]	; (8015bec <free+0xc>)
 8015be2:	4601      	mov	r1, r0
 8015be4:	6818      	ldr	r0, [r3, #0]
 8015be6:	f000 b817 	b.w	8015c18 <_free_r>
 8015bea:	bf00      	nop
 8015bec:	20000030 	.word	0x20000030

08015bf0 <memcpy>:
 8015bf0:	b510      	push	{r4, lr}
 8015bf2:	1e43      	subs	r3, r0, #1
 8015bf4:	440a      	add	r2, r1
 8015bf6:	4291      	cmp	r1, r2
 8015bf8:	d100      	bne.n	8015bfc <memcpy+0xc>
 8015bfa:	bd10      	pop	{r4, pc}
 8015bfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015c00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015c04:	e7f7      	b.n	8015bf6 <memcpy+0x6>

08015c06 <memset>:
 8015c06:	4402      	add	r2, r0
 8015c08:	4603      	mov	r3, r0
 8015c0a:	4293      	cmp	r3, r2
 8015c0c:	d100      	bne.n	8015c10 <memset+0xa>
 8015c0e:	4770      	bx	lr
 8015c10:	f803 1b01 	strb.w	r1, [r3], #1
 8015c14:	e7f9      	b.n	8015c0a <memset+0x4>
	...

08015c18 <_free_r>:
 8015c18:	b538      	push	{r3, r4, r5, lr}
 8015c1a:	4605      	mov	r5, r0
 8015c1c:	2900      	cmp	r1, #0
 8015c1e:	d045      	beq.n	8015cac <_free_r+0x94>
 8015c20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015c24:	1f0c      	subs	r4, r1, #4
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	bfb8      	it	lt
 8015c2a:	18e4      	addlt	r4, r4, r3
 8015c2c:	f000 f8ac 	bl	8015d88 <__malloc_lock>
 8015c30:	4a1f      	ldr	r2, [pc, #124]	; (8015cb0 <_free_r+0x98>)
 8015c32:	6813      	ldr	r3, [r2, #0]
 8015c34:	4610      	mov	r0, r2
 8015c36:	b933      	cbnz	r3, 8015c46 <_free_r+0x2e>
 8015c38:	6063      	str	r3, [r4, #4]
 8015c3a:	6014      	str	r4, [r2, #0]
 8015c3c:	4628      	mov	r0, r5
 8015c3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015c42:	f000 b8a2 	b.w	8015d8a <__malloc_unlock>
 8015c46:	42a3      	cmp	r3, r4
 8015c48:	d90c      	bls.n	8015c64 <_free_r+0x4c>
 8015c4a:	6821      	ldr	r1, [r4, #0]
 8015c4c:	1862      	adds	r2, r4, r1
 8015c4e:	4293      	cmp	r3, r2
 8015c50:	bf04      	itt	eq
 8015c52:	681a      	ldreq	r2, [r3, #0]
 8015c54:	685b      	ldreq	r3, [r3, #4]
 8015c56:	6063      	str	r3, [r4, #4]
 8015c58:	bf04      	itt	eq
 8015c5a:	1852      	addeq	r2, r2, r1
 8015c5c:	6022      	streq	r2, [r4, #0]
 8015c5e:	6004      	str	r4, [r0, #0]
 8015c60:	e7ec      	b.n	8015c3c <_free_r+0x24>
 8015c62:	4613      	mov	r3, r2
 8015c64:	685a      	ldr	r2, [r3, #4]
 8015c66:	b10a      	cbz	r2, 8015c6c <_free_r+0x54>
 8015c68:	42a2      	cmp	r2, r4
 8015c6a:	d9fa      	bls.n	8015c62 <_free_r+0x4a>
 8015c6c:	6819      	ldr	r1, [r3, #0]
 8015c6e:	1858      	adds	r0, r3, r1
 8015c70:	42a0      	cmp	r0, r4
 8015c72:	d10b      	bne.n	8015c8c <_free_r+0x74>
 8015c74:	6820      	ldr	r0, [r4, #0]
 8015c76:	4401      	add	r1, r0
 8015c78:	1858      	adds	r0, r3, r1
 8015c7a:	4282      	cmp	r2, r0
 8015c7c:	6019      	str	r1, [r3, #0]
 8015c7e:	d1dd      	bne.n	8015c3c <_free_r+0x24>
 8015c80:	6810      	ldr	r0, [r2, #0]
 8015c82:	6852      	ldr	r2, [r2, #4]
 8015c84:	605a      	str	r2, [r3, #4]
 8015c86:	4401      	add	r1, r0
 8015c88:	6019      	str	r1, [r3, #0]
 8015c8a:	e7d7      	b.n	8015c3c <_free_r+0x24>
 8015c8c:	d902      	bls.n	8015c94 <_free_r+0x7c>
 8015c8e:	230c      	movs	r3, #12
 8015c90:	602b      	str	r3, [r5, #0]
 8015c92:	e7d3      	b.n	8015c3c <_free_r+0x24>
 8015c94:	6820      	ldr	r0, [r4, #0]
 8015c96:	1821      	adds	r1, r4, r0
 8015c98:	428a      	cmp	r2, r1
 8015c9a:	bf04      	itt	eq
 8015c9c:	6811      	ldreq	r1, [r2, #0]
 8015c9e:	6852      	ldreq	r2, [r2, #4]
 8015ca0:	6062      	str	r2, [r4, #4]
 8015ca2:	bf04      	itt	eq
 8015ca4:	1809      	addeq	r1, r1, r0
 8015ca6:	6021      	streq	r1, [r4, #0]
 8015ca8:	605c      	str	r4, [r3, #4]
 8015caa:	e7c7      	b.n	8015c3c <_free_r+0x24>
 8015cac:	bd38      	pop	{r3, r4, r5, pc}
 8015cae:	bf00      	nop
 8015cb0:	20008448 	.word	0x20008448

08015cb4 <_malloc_r>:
 8015cb4:	b570      	push	{r4, r5, r6, lr}
 8015cb6:	1ccd      	adds	r5, r1, #3
 8015cb8:	f025 0503 	bic.w	r5, r5, #3
 8015cbc:	3508      	adds	r5, #8
 8015cbe:	2d0c      	cmp	r5, #12
 8015cc0:	bf38      	it	cc
 8015cc2:	250c      	movcc	r5, #12
 8015cc4:	2d00      	cmp	r5, #0
 8015cc6:	4606      	mov	r6, r0
 8015cc8:	db01      	blt.n	8015cce <_malloc_r+0x1a>
 8015cca:	42a9      	cmp	r1, r5
 8015ccc:	d903      	bls.n	8015cd6 <_malloc_r+0x22>
 8015cce:	230c      	movs	r3, #12
 8015cd0:	6033      	str	r3, [r6, #0]
 8015cd2:	2000      	movs	r0, #0
 8015cd4:	bd70      	pop	{r4, r5, r6, pc}
 8015cd6:	f000 f857 	bl	8015d88 <__malloc_lock>
 8015cda:	4a21      	ldr	r2, [pc, #132]	; (8015d60 <_malloc_r+0xac>)
 8015cdc:	6814      	ldr	r4, [r2, #0]
 8015cde:	4621      	mov	r1, r4
 8015ce0:	b991      	cbnz	r1, 8015d08 <_malloc_r+0x54>
 8015ce2:	4c20      	ldr	r4, [pc, #128]	; (8015d64 <_malloc_r+0xb0>)
 8015ce4:	6823      	ldr	r3, [r4, #0]
 8015ce6:	b91b      	cbnz	r3, 8015cf0 <_malloc_r+0x3c>
 8015ce8:	4630      	mov	r0, r6
 8015cea:	f000 f83d 	bl	8015d68 <_sbrk_r>
 8015cee:	6020      	str	r0, [r4, #0]
 8015cf0:	4629      	mov	r1, r5
 8015cf2:	4630      	mov	r0, r6
 8015cf4:	f000 f838 	bl	8015d68 <_sbrk_r>
 8015cf8:	1c43      	adds	r3, r0, #1
 8015cfa:	d124      	bne.n	8015d46 <_malloc_r+0x92>
 8015cfc:	230c      	movs	r3, #12
 8015cfe:	6033      	str	r3, [r6, #0]
 8015d00:	4630      	mov	r0, r6
 8015d02:	f000 f842 	bl	8015d8a <__malloc_unlock>
 8015d06:	e7e4      	b.n	8015cd2 <_malloc_r+0x1e>
 8015d08:	680b      	ldr	r3, [r1, #0]
 8015d0a:	1b5b      	subs	r3, r3, r5
 8015d0c:	d418      	bmi.n	8015d40 <_malloc_r+0x8c>
 8015d0e:	2b0b      	cmp	r3, #11
 8015d10:	d90f      	bls.n	8015d32 <_malloc_r+0x7e>
 8015d12:	600b      	str	r3, [r1, #0]
 8015d14:	50cd      	str	r5, [r1, r3]
 8015d16:	18cc      	adds	r4, r1, r3
 8015d18:	4630      	mov	r0, r6
 8015d1a:	f000 f836 	bl	8015d8a <__malloc_unlock>
 8015d1e:	f104 000b 	add.w	r0, r4, #11
 8015d22:	1d23      	adds	r3, r4, #4
 8015d24:	f020 0007 	bic.w	r0, r0, #7
 8015d28:	1ac3      	subs	r3, r0, r3
 8015d2a:	d0d3      	beq.n	8015cd4 <_malloc_r+0x20>
 8015d2c:	425a      	negs	r2, r3
 8015d2e:	50e2      	str	r2, [r4, r3]
 8015d30:	e7d0      	b.n	8015cd4 <_malloc_r+0x20>
 8015d32:	428c      	cmp	r4, r1
 8015d34:	684b      	ldr	r3, [r1, #4]
 8015d36:	bf16      	itet	ne
 8015d38:	6063      	strne	r3, [r4, #4]
 8015d3a:	6013      	streq	r3, [r2, #0]
 8015d3c:	460c      	movne	r4, r1
 8015d3e:	e7eb      	b.n	8015d18 <_malloc_r+0x64>
 8015d40:	460c      	mov	r4, r1
 8015d42:	6849      	ldr	r1, [r1, #4]
 8015d44:	e7cc      	b.n	8015ce0 <_malloc_r+0x2c>
 8015d46:	1cc4      	adds	r4, r0, #3
 8015d48:	f024 0403 	bic.w	r4, r4, #3
 8015d4c:	42a0      	cmp	r0, r4
 8015d4e:	d005      	beq.n	8015d5c <_malloc_r+0xa8>
 8015d50:	1a21      	subs	r1, r4, r0
 8015d52:	4630      	mov	r0, r6
 8015d54:	f000 f808 	bl	8015d68 <_sbrk_r>
 8015d58:	3001      	adds	r0, #1
 8015d5a:	d0cf      	beq.n	8015cfc <_malloc_r+0x48>
 8015d5c:	6025      	str	r5, [r4, #0]
 8015d5e:	e7db      	b.n	8015d18 <_malloc_r+0x64>
 8015d60:	20008448 	.word	0x20008448
 8015d64:	2000844c 	.word	0x2000844c

08015d68 <_sbrk_r>:
 8015d68:	b538      	push	{r3, r4, r5, lr}
 8015d6a:	4c06      	ldr	r4, [pc, #24]	; (8015d84 <_sbrk_r+0x1c>)
 8015d6c:	2300      	movs	r3, #0
 8015d6e:	4605      	mov	r5, r0
 8015d70:	4608      	mov	r0, r1
 8015d72:	6023      	str	r3, [r4, #0]
 8015d74:	f7ff fb80 	bl	8015478 <_sbrk>
 8015d78:	1c43      	adds	r3, r0, #1
 8015d7a:	d102      	bne.n	8015d82 <_sbrk_r+0x1a>
 8015d7c:	6823      	ldr	r3, [r4, #0]
 8015d7e:	b103      	cbz	r3, 8015d82 <_sbrk_r+0x1a>
 8015d80:	602b      	str	r3, [r5, #0]
 8015d82:	bd38      	pop	{r3, r4, r5, pc}
 8015d84:	2000a048 	.word	0x2000a048

08015d88 <__malloc_lock>:
 8015d88:	4770      	bx	lr

08015d8a <__malloc_unlock>:
 8015d8a:	4770      	bx	lr

08015d8c <_init>:
 8015d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d8e:	bf00      	nop
 8015d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015d92:	bc08      	pop	{r3}
 8015d94:	469e      	mov	lr, r3
 8015d96:	4770      	bx	lr

08015d98 <_fini>:
 8015d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d9a:	bf00      	nop
 8015d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015d9e:	bc08      	pop	{r3}
 8015da0:	469e      	mov	lr, r3
 8015da2:	4770      	bx	lr
