
F746DiscoFatfsSDwithRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016760  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08016930  08016930  00026930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016b28  08016b28  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  08016b28  08016b28  00026b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016b30  08016b30  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016b30  08016b30  00026b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016b34  08016b34  00026b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08016b38  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012014  20000094  08016bcc  00030094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200120a8  08016bcc  000320a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00045007  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008a26  00000000  00000000  000750cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003158  00000000  00000000  0007daf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002db8  00000000  00000000  00080c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035f23  00000000  00000000  00083a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00040750  00000000  00000000  000b992b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011d2f7  00000000  00000000  000fa07b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00217372  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d2c8  00000000  00000000  002173c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000094 	.word	0x20000094
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08016918 	.word	0x08016918

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000098 	.word	0x20000098
 800020c:	08016918 	.word	0x08016918

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 fb6c 	bl	8000bea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000512:	2000      	movs	r0, #0
 8000514:	f015 fc68 	bl	8015de8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000518:	f014 fcce 	bl	8014eb8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800051c:	2300      	movs	r3, #0
}
 800051e:	4618      	mov	r0, r3
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <HAL_IncTick+0x20>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <HAL_IncTick+0x24>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4413      	add	r3, r2
 8000534:	4a04      	ldr	r2, [pc, #16]	; (8000548 <HAL_IncTick+0x24>)
 8000536:	6013      	str	r3, [r2, #0]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000000 	.word	0x20000000
 8000548:	20010450 	.word	0x20010450

0800054c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  return uwTick;
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <HAL_GetTick+0x14>)
 8000552:	681b      	ldr	r3, [r3, #0]
}
 8000554:	4618      	mov	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20010450 	.word	0x20010450

08000564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800056c:	f7ff ffee 	bl	800054c <HAL_GetTick>
 8000570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800057c:	d005      	beq.n	800058a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800057e:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <HAL_Delay+0x44>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	461a      	mov	r2, r3
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4413      	add	r3, r2
 8000588:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800058a:	bf00      	nop
 800058c:	f7ff ffde 	bl	800054c <HAL_GetTick>
 8000590:	4602      	mov	r2, r0
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	1ad3      	subs	r3, r2, r3
 8000596:	68fa      	ldr	r2, [r7, #12]
 8000598:	429a      	cmp	r2, r3
 800059a:	d8f7      	bhi.n	800058c <HAL_Delay+0x28>
  {
  }
}
 800059c:	bf00      	nop
 800059e:	bf00      	nop
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000000 	.word	0x20000000

080005ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005b4:	2300      	movs	r3, #0
 80005b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d101      	bne.n	80005c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80005be:	2301      	movs	r3, #1
 80005c0:	e031      	b.n	8000626 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d109      	bne.n	80005de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	f014 fc9c 	bl	8014f08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2200      	movs	r2, #0
 80005d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2200      	movs	r2, #0
 80005da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e2:	f003 0310 	and.w	r3, r3, #16
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d116      	bne.n	8000618 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005ee:	4b10      	ldr	r3, [pc, #64]	; (8000630 <HAL_ADC_Init+0x84>)
 80005f0:	4013      	ands	r3, r2
 80005f2:	f043 0202 	orr.w	r2, r3, #2
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f000 f94e 	bl	800089c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2200      	movs	r2, #0
 8000604:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060a:	f023 0303 	bic.w	r3, r3, #3
 800060e:	f043 0201 	orr.w	r2, r3, #1
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	641a      	str	r2, [r3, #64]	; 0x40
 8000616:	e001      	b.n	800061c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000618:	2301      	movs	r3, #1
 800061a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2200      	movs	r2, #0
 8000620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000624:	7bfb      	ldrb	r3, [r7, #15]
}
 8000626:	4618      	mov	r0, r3
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	ffffeefd 	.word	0xffffeefd

08000634 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000648:	2b01      	cmp	r3, #1
 800064a:	d101      	bne.n	8000650 <HAL_ADC_ConfigChannel+0x1c>
 800064c:	2302      	movs	r3, #2
 800064e:	e115      	b.n	800087c <HAL_ADC_ConfigChannel+0x248>
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2201      	movs	r2, #1
 8000654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b09      	cmp	r3, #9
 800065e:	d935      	bls.n	80006cc <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	68d9      	ldr	r1, [r3, #12]
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	b29b      	uxth	r3, r3
 800066c:	461a      	mov	r2, r3
 800066e:	4613      	mov	r3, r2
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	4413      	add	r3, r2
 8000674:	3b1e      	subs	r3, #30
 8000676:	2207      	movs	r2, #7
 8000678:	fa02 f303 	lsl.w	r3, r2, r3
 800067c:	43da      	mvns	r2, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	400a      	ands	r2, r1
 8000684:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a7f      	ldr	r2, [pc, #508]	; (8000888 <HAL_ADC_ConfigChannel+0x254>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d10a      	bne.n	80006a6 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	68d9      	ldr	r1, [r3, #12]
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	689b      	ldr	r3, [r3, #8]
 800069a:	061a      	lsls	r2, r3, #24
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	430a      	orrs	r2, r1
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	e035      	b.n	8000712 <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	68d9      	ldr	r1, [r3, #12]
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	689a      	ldr	r2, [r3, #8]
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	4618      	mov	r0, r3
 80006b8:	4603      	mov	r3, r0
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	4403      	add	r3, r0
 80006be:	3b1e      	subs	r3, #30
 80006c0:	409a      	lsls	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	430a      	orrs	r2, r1
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	e022      	b.n	8000712 <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	6919      	ldr	r1, [r3, #16]
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	461a      	mov	r2, r3
 80006da:	4613      	mov	r3, r2
 80006dc:	005b      	lsls	r3, r3, #1
 80006de:	4413      	add	r3, r2
 80006e0:	2207      	movs	r2, #7
 80006e2:	fa02 f303 	lsl.w	r3, r2, r3
 80006e6:	43da      	mvns	r2, r3
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	400a      	ands	r2, r1
 80006ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	6919      	ldr	r1, [r3, #16]
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	689a      	ldr	r2, [r3, #8]
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	b29b      	uxth	r3, r3
 8000700:	4618      	mov	r0, r3
 8000702:	4603      	mov	r3, r0
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	4403      	add	r3, r0
 8000708:	409a      	lsls	r2, r3
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	430a      	orrs	r2, r1
 8000710:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	2b06      	cmp	r3, #6
 8000718:	d824      	bhi.n	8000764 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	685a      	ldr	r2, [r3, #4]
 8000724:	4613      	mov	r3, r2
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	4413      	add	r3, r2
 800072a:	3b05      	subs	r3, #5
 800072c:	221f      	movs	r2, #31
 800072e:	fa02 f303 	lsl.w	r3, r2, r3
 8000732:	43da      	mvns	r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	400a      	ands	r2, r1
 800073a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	b29b      	uxth	r3, r3
 8000748:	4618      	mov	r0, r3
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	685a      	ldr	r2, [r3, #4]
 800074e:	4613      	mov	r3, r2
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	4413      	add	r3, r2
 8000754:	3b05      	subs	r3, #5
 8000756:	fa00 f203 	lsl.w	r2, r0, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	430a      	orrs	r2, r1
 8000760:	635a      	str	r2, [r3, #52]	; 0x34
 8000762:	e04c      	b.n	80007fe <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	2b0c      	cmp	r3, #12
 800076a:	d824      	bhi.n	80007b6 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	685a      	ldr	r2, [r3, #4]
 8000776:	4613      	mov	r3, r2
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	4413      	add	r3, r2
 800077c:	3b23      	subs	r3, #35	; 0x23
 800077e:	221f      	movs	r2, #31
 8000780:	fa02 f303 	lsl.w	r3, r2, r3
 8000784:	43da      	mvns	r2, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	400a      	ands	r2, r1
 800078c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	b29b      	uxth	r3, r3
 800079a:	4618      	mov	r0, r3
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	685a      	ldr	r2, [r3, #4]
 80007a0:	4613      	mov	r3, r2
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	4413      	add	r3, r2
 80007a6:	3b23      	subs	r3, #35	; 0x23
 80007a8:	fa00 f203 	lsl.w	r2, r0, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	430a      	orrs	r2, r1
 80007b2:	631a      	str	r2, [r3, #48]	; 0x30
 80007b4:	e023      	b.n	80007fe <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	685a      	ldr	r2, [r3, #4]
 80007c0:	4613      	mov	r3, r2
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	4413      	add	r3, r2
 80007c6:	3b41      	subs	r3, #65	; 0x41
 80007c8:	221f      	movs	r2, #31
 80007ca:	fa02 f303 	lsl.w	r3, r2, r3
 80007ce:	43da      	mvns	r2, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	400a      	ands	r2, r1
 80007d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	4618      	mov	r0, r3
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	685a      	ldr	r2, [r3, #4]
 80007ea:	4613      	mov	r3, r2
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	4413      	add	r3, r2
 80007f0:	3b41      	subs	r3, #65	; 0x41
 80007f2:	fa00 f203 	lsl.w	r2, r0, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	430a      	orrs	r2, r1
 80007fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a22      	ldr	r2, [pc, #136]	; (800088c <HAL_ADC_ConfigChannel+0x258>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d109      	bne.n	800081c <HAL_ADC_ConfigChannel+0x1e8>
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b12      	cmp	r3, #18
 800080e:	d105      	bne.n	800081c <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8000810:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <HAL_ADC_ConfigChannel+0x25c>)
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	4a1e      	ldr	r2, [pc, #120]	; (8000890 <HAL_ADC_ConfigChannel+0x25c>)
 8000816:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800081a:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a1a      	ldr	r2, [pc, #104]	; (800088c <HAL_ADC_ConfigChannel+0x258>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d125      	bne.n	8000872 <HAL_ADC_ConfigChannel+0x23e>
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a17      	ldr	r2, [pc, #92]	; (8000888 <HAL_ADC_ConfigChannel+0x254>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d003      	beq.n	8000838 <HAL_ADC_ConfigChannel+0x204>
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b11      	cmp	r3, #17
 8000836:	d11c      	bne.n	8000872 <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000838:	4b15      	ldr	r3, [pc, #84]	; (8000890 <HAL_ADC_ConfigChannel+0x25c>)
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	4a14      	ldr	r2, [pc, #80]	; (8000890 <HAL_ADC_ConfigChannel+0x25c>)
 800083e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000842:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a0f      	ldr	r2, [pc, #60]	; (8000888 <HAL_ADC_ConfigChannel+0x254>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d111      	bne.n	8000872 <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <HAL_ADC_ConfigChannel+0x260>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a11      	ldr	r2, [pc, #68]	; (8000898 <HAL_ADC_ConfigChannel+0x264>)
 8000854:	fba2 2303 	umull	r2, r3, r2, r3
 8000858:	0c9a      	lsrs	r2, r3, #18
 800085a:	4613      	mov	r3, r2
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	4413      	add	r3, r2
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000864:	e002      	b.n	800086c <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	3b01      	subs	r3, #1
 800086a:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d1f9      	bne.n	8000866 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2200      	movs	r2, #0
 8000876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800087a:	2300      	movs	r3, #0
}
 800087c:	4618      	mov	r0, r3
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	10000012 	.word	0x10000012
 800088c:	40012000 	.word	0x40012000
 8000890:	40012300 	.word	0x40012300
 8000894:	2000002c 	.word	0x2000002c
 8000898:	431bde83 	.word	0x431bde83

0800089c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80008a4:	4b78      	ldr	r3, [pc, #480]	; (8000a88 <ADC_Init+0x1ec>)
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	4a77      	ldr	r2, [pc, #476]	; (8000a88 <ADC_Init+0x1ec>)
 80008aa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80008ae:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80008b0:	4b75      	ldr	r3, [pc, #468]	; (8000a88 <ADC_Init+0x1ec>)
 80008b2:	685a      	ldr	r2, [r3, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	4973      	ldr	r1, [pc, #460]	; (8000a88 <ADC_Init+0x1ec>)
 80008ba:	4313      	orrs	r3, r2
 80008bc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	685a      	ldr	r2, [r3, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80008cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	6859      	ldr	r1, [r3, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	691b      	ldr	r3, [r3, #16]
 80008d8:	021a      	lsls	r2, r3, #8
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	430a      	orrs	r2, r1
 80008e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	685a      	ldr	r2, [r3, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80008f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	6859      	ldr	r1, [r3, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	689a      	ldr	r2, [r3, #8]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	430a      	orrs	r2, r1
 8000902:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	689a      	ldr	r2, [r3, #8]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000912:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	6899      	ldr	r1, [r3, #8]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	68da      	ldr	r2, [r3, #12]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	430a      	orrs	r2, r1
 8000924:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800092a:	4a58      	ldr	r2, [pc, #352]	; (8000a8c <ADC_Init+0x1f0>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d022      	beq.n	8000976 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	689a      	ldr	r2, [r3, #8]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800093e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	6899      	ldr	r1, [r3, #8]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	430a      	orrs	r2, r1
 8000950:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	689a      	ldr	r2, [r3, #8]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000960:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	6899      	ldr	r1, [r3, #8]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	430a      	orrs	r2, r1
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	e00f      	b.n	8000996 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	689a      	ldr	r2, [r3, #8]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000984:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	689a      	ldr	r2, [r3, #8]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000994:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	689a      	ldr	r2, [r3, #8]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f022 0202 	bic.w	r2, r2, #2
 80009a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	6899      	ldr	r1, [r3, #8]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	005a      	lsls	r2, r3, #1
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	430a      	orrs	r2, r1
 80009b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d01b      	beq.n	80009fc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	685a      	ldr	r2, [r3, #4]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80009d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	685a      	ldr	r2, [r3, #4]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80009e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	6859      	ldr	r1, [r3, #4]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ee:	3b01      	subs	r3, #1
 80009f0:	035a      	lsls	r2, r3, #13
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	430a      	orrs	r2, r1
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	e007      	b.n	8000a0c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	685a      	ldr	r2, [r3, #4]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000a0a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	051a      	lsls	r2, r3, #20
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	430a      	orrs	r2, r1
 8000a30:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	689a      	ldr	r2, [r3, #8]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	6899      	ldr	r1, [r3, #8]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000a4e:	025a      	lsls	r2, r3, #9
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	430a      	orrs	r2, r1
 8000a56:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	689a      	ldr	r2, [r3, #8]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	6899      	ldr	r1, [r3, #8]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	029a      	lsls	r2, r3, #10
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	430a      	orrs	r2, r1
 8000a7a:	609a      	str	r2, [r3, #8]
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	40012300 	.word	0x40012300
 8000a8c:	0f000001 	.word	0x0f000001

08000a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f003 0307 	and.w	r3, r3, #7
 8000a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <__NVIC_SetPriorityGrouping+0x40>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aa6:	68ba      	ldr	r2, [r7, #8]
 8000aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aac:	4013      	ands	r3, r2
 8000aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8000aba:	4313      	orrs	r3, r2
 8000abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000abe:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <__NVIC_SetPriorityGrouping+0x40>)
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	60d3      	str	r3, [r2, #12]
}
 8000ac4:	bf00      	nop
 8000ac6:	3714      	adds	r7, #20
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	e000ed00 	.word	0xe000ed00
 8000ad4:	05fa0000 	.word	0x05fa0000

08000ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000adc:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	0a1b      	lsrs	r3, r3, #8
 8000ae2:	f003 0307 	and.w	r3, r3, #7
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	db0b      	blt.n	8000b1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	f003 021f 	and.w	r2, r3, #31
 8000b0c:	4907      	ldr	r1, [pc, #28]	; (8000b2c <__NVIC_EnableIRQ+0x38>)
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	095b      	lsrs	r3, r3, #5
 8000b14:	2001      	movs	r0, #1
 8000b16:	fa00 f202 	lsl.w	r2, r0, r2
 8000b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000e100 	.word	0xe000e100

08000b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	6039      	str	r1, [r7, #0]
 8000b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	db0a      	blt.n	8000b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	490c      	ldr	r1, [pc, #48]	; (8000b7c <__NVIC_SetPriority+0x4c>)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	0112      	lsls	r2, r2, #4
 8000b50:	b2d2      	uxtb	r2, r2
 8000b52:	440b      	add	r3, r1
 8000b54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b58:	e00a      	b.n	8000b70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	4908      	ldr	r1, [pc, #32]	; (8000b80 <__NVIC_SetPriority+0x50>)
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	f003 030f 	and.w	r3, r3, #15
 8000b66:	3b04      	subs	r3, #4
 8000b68:	0112      	lsls	r2, r2, #4
 8000b6a:	b2d2      	uxtb	r2, r2
 8000b6c:	440b      	add	r3, r1
 8000b6e:	761a      	strb	r2, [r3, #24]
}
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000e100 	.word	0xe000e100
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b089      	sub	sp, #36	; 0x24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	f1c3 0307 	rsb	r3, r3, #7
 8000b9e:	2b04      	cmp	r3, #4
 8000ba0:	bf28      	it	cs
 8000ba2:	2304      	movcs	r3, #4
 8000ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	3304      	adds	r3, #4
 8000baa:	2b06      	cmp	r3, #6
 8000bac:	d902      	bls.n	8000bb4 <NVIC_EncodePriority+0x30>
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	3b03      	subs	r3, #3
 8000bb2:	e000      	b.n	8000bb6 <NVIC_EncodePriority+0x32>
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	43da      	mvns	r2, r3
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	401a      	ands	r2, r3
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd6:	43d9      	mvns	r1, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bdc:	4313      	orrs	r3, r2
         );
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3724      	adds	r7, #36	; 0x24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f7ff ff4c 	bl	8000a90 <__NVIC_SetPriorityGrouping>
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
 8000c0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c12:	f7ff ff61 	bl	8000ad8 <__NVIC_GetPriorityGrouping>
 8000c16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	68b9      	ldr	r1, [r7, #8]
 8000c1c:	6978      	ldr	r0, [r7, #20]
 8000c1e:	f7ff ffb1 	bl	8000b84 <NVIC_EncodePriority>
 8000c22:	4602      	mov	r2, r0
 8000c24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c28:	4611      	mov	r1, r2
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff ff80 	bl	8000b30 <__NVIC_SetPriority>
}
 8000c30:	bf00      	nop
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff ff54 	bl	8000af4 <__NVIC_EnableIRQ>
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d101      	bne.n	8000c66 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e054      	b.n	8000d10 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	7f5b      	ldrb	r3, [r3, #29]
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d105      	bne.n	8000c7c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2200      	movs	r2, #0
 8000c74:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f014 f9a0 	bl	8014fbc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2202      	movs	r2, #2
 8000c80:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	791b      	ldrb	r3, [r3, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d10c      	bne.n	8000ca4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a22      	ldr	r2, [pc, #136]	; (8000d18 <HAL_CRC_Init+0xc4>)
 8000c90:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	689a      	ldr	r2, [r3, #8]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f022 0218 	bic.w	r2, r2, #24
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	e00c      	b.n	8000cbe <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6899      	ldr	r1, [r3, #8]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	461a      	mov	r2, r3
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f000 f834 	bl	8000d1c <HAL_CRCEx_Polynomial_Set>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e028      	b.n	8000d10 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	795b      	ldrb	r3, [r3, #5]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d105      	bne.n	8000cd2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f04f 32ff 	mov.w	r2, #4294967295
 8000cce:	611a      	str	r2, [r3, #16]
 8000cd0:	e004      	b.n	8000cdc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	6912      	ldr	r2, [r2, #16]
 8000cda:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	695a      	ldr	r2, [r3, #20]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	430a      	orrs	r2, r1
 8000cf0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	699a      	ldr	r2, [r3, #24]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	430a      	orrs	r2, r1
 8000d06:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000d0e:	2300      	movs	r3, #0
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	04c11db7 	.word	0x04c11db7

08000d1c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b087      	sub	sp, #28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000d2c:	231f      	movs	r3, #31
 8000d2e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000d30:	bf00      	nop
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	1e5a      	subs	r2, r3, #1
 8000d36:	613a      	str	r2, [r7, #16]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d009      	beq.n	8000d50 <HAL_CRCEx_Polynomial_Set+0x34>
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	f003 031f 	and.w	r3, r3, #31
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	fa22 f303 	lsr.w	r3, r2, r3
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d0f0      	beq.n	8000d32 <HAL_CRCEx_Polynomial_Set+0x16>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2b18      	cmp	r3, #24
 8000d54:	d846      	bhi.n	8000de4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8000d56:	a201      	add	r2, pc, #4	; (adr r2, 8000d5c <HAL_CRCEx_Polynomial_Set+0x40>)
 8000d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d5c:	08000deb 	.word	0x08000deb
 8000d60:	08000de5 	.word	0x08000de5
 8000d64:	08000de5 	.word	0x08000de5
 8000d68:	08000de5 	.word	0x08000de5
 8000d6c:	08000de5 	.word	0x08000de5
 8000d70:	08000de5 	.word	0x08000de5
 8000d74:	08000de5 	.word	0x08000de5
 8000d78:	08000de5 	.word	0x08000de5
 8000d7c:	08000dd9 	.word	0x08000dd9
 8000d80:	08000de5 	.word	0x08000de5
 8000d84:	08000de5 	.word	0x08000de5
 8000d88:	08000de5 	.word	0x08000de5
 8000d8c:	08000de5 	.word	0x08000de5
 8000d90:	08000de5 	.word	0x08000de5
 8000d94:	08000de5 	.word	0x08000de5
 8000d98:	08000de5 	.word	0x08000de5
 8000d9c:	08000dcd 	.word	0x08000dcd
 8000da0:	08000de5 	.word	0x08000de5
 8000da4:	08000de5 	.word	0x08000de5
 8000da8:	08000de5 	.word	0x08000de5
 8000dac:	08000de5 	.word	0x08000de5
 8000db0:	08000de5 	.word	0x08000de5
 8000db4:	08000de5 	.word	0x08000de5
 8000db8:	08000de5 	.word	0x08000de5
 8000dbc:	08000dc1 	.word	0x08000dc1
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	2b06      	cmp	r3, #6
 8000dc4:	d913      	bls.n	8000dee <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000dca:	e010      	b.n	8000dee <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	2b07      	cmp	r3, #7
 8000dd0:	d90f      	bls.n	8000df2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000dd6:	e00c      	b.n	8000df2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	2b0f      	cmp	r3, #15
 8000ddc:	d90b      	bls.n	8000df6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000de2:	e008      	b.n	8000df6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	75fb      	strb	r3, [r7, #23]
      break;
 8000de8:	e006      	b.n	8000df8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000dea:	bf00      	nop
 8000dec:	e004      	b.n	8000df8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000dee:	bf00      	nop
 8000df0:	e002      	b.n	8000df8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000df2:	bf00      	nop
 8000df4:	e000      	b.n	8000df8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000df6:	bf00      	nop
  }
  if (status == HAL_OK)
 8000df8:	7dfb      	ldrb	r3, [r7, #23]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d10d      	bne.n	8000e1a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	f023 0118 	bic.w	r1, r3, #24
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	430a      	orrs	r2, r1
 8000e18:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	371c      	adds	r7, #28
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{     
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d101      	bne.n	8000e3a <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e062      	b.n	8000f00 <HAL_DCMI_Init+0xd8>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
                
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d102      	bne.n	8000e4c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else  
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f014 f8d8 	bl	8014ffc <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  } 
  
  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2202      	movs	r2, #2
 8000e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	6819      	ldr	r1, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	4b2a      	ldr	r3, [pc, #168]	; (8000f08 <HAL_DCMI_Init+0xe0>)
 8000e60:	400b      	ands	r3, r1
 8000e62:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	6819      	ldr	r1, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685a      	ldr	r2, [r3, #4]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	695b      	ldr	r3, [r3, #20]
 8000e72:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000e78:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	691b      	ldr	r3, [r3, #16]
 8000e7e:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8000e84:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8000e90:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e96:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8000e9c:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea2:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8000ea8:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	601a      	str	r2, [r3, #0]
                                     
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2b10      	cmp	r3, #16
 8000eb8:	d112      	bne.n	8000ee0 <HAL_DCMI_Init+0xb8>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	7f1b      	ldrb	r3, [r3, #28]
 8000ebe:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	7f5b      	ldrb	r3, [r3, #29]
 8000ec4:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8000ec6:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	7f9b      	ldrb	r3, [r3, #30]
 8000ecc:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8000ece:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	7fdb      	ldrb	r3, [r3, #31]
 8000ed6:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8000edc:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8000ede:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	68da      	ldr	r2, [r3, #12]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f042 021e 	orr.w	r2, r2, #30
 8000eee:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000efe:	2300      	movs	r3, #0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	ffe0f007 	.word	0xffe0f007

08000f0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f18:	f7ff fb18 	bl	800054c <HAL_GetTick>
 8000f1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d101      	bne.n	8000f28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e099      	b.n	800105c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2202      	movs	r2, #2
 8000f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f022 0201 	bic.w	r2, r2, #1
 8000f46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f48:	e00f      	b.n	8000f6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f4a:	f7ff faff 	bl	800054c <HAL_GetTick>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	2b05      	cmp	r3, #5
 8000f56:	d908      	bls.n	8000f6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2220      	movs	r2, #32
 8000f5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2203      	movs	r2, #3
 8000f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000f66:	2303      	movs	r3, #3
 8000f68:	e078      	b.n	800105c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 0301 	and.w	r3, r3, #1
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d1e8      	bne.n	8000f4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f80:	697a      	ldr	r2, [r7, #20]
 8000f82:	4b38      	ldr	r3, [pc, #224]	; (8001064 <HAL_DMA_Init+0x158>)
 8000f84:	4013      	ands	r3, r2
 8000f86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685a      	ldr	r2, [r3, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	691b      	ldr	r3, [r3, #16]
 8000f9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a1b      	ldr	r3, [r3, #32]
 8000fb4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fb6:	697a      	ldr	r2, [r7, #20]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc0:	2b04      	cmp	r3, #4
 8000fc2:	d107      	bne.n	8000fd4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	697a      	ldr	r2, [r7, #20]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	697a      	ldr	r2, [r7, #20]
 8000fda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	f023 0307 	bic.w	r3, r3, #7
 8000fea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff0:	697a      	ldr	r2, [r7, #20]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	d117      	bne.n	800102e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001002:	697a      	ldr	r2, [r7, #20]
 8001004:	4313      	orrs	r3, r2
 8001006:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800100c:	2b00      	cmp	r3, #0
 800100e:	d00e      	beq.n	800102e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f000 faa5 	bl	8001560 <DMA_CheckFifoParam>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d008      	beq.n	800102e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2240      	movs	r2, #64	; 0x40
 8001020:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2201      	movs	r2, #1
 8001026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800102a:	2301      	movs	r3, #1
 800102c:	e016      	b.n	800105c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	697a      	ldr	r2, [r7, #20]
 8001034:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f000 fa5c 	bl	80014f4 <DMA_CalcBaseAndBitshift>
 800103c:	4603      	mov	r3, r0
 800103e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001044:	223f      	movs	r2, #63	; 0x3f
 8001046:	409a      	lsls	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2201      	movs	r2, #1
 8001056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	f010803f 	.word	0xf010803f

08001068 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
 8001074:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001076:	2300      	movs	r3, #0
 8001078:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001086:	2b01      	cmp	r3, #1
 8001088:	d101      	bne.n	800108e <HAL_DMA_Start_IT+0x26>
 800108a:	2302      	movs	r3, #2
 800108c:	e048      	b.n	8001120 <HAL_DMA_Start_IT+0xb8>
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2201      	movs	r2, #1
 8001092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d137      	bne.n	8001112 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2202      	movs	r2, #2
 80010a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2200      	movs	r2, #0
 80010ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	68b9      	ldr	r1, [r7, #8]
 80010b6:	68f8      	ldr	r0, [r7, #12]
 80010b8:	f000 f9ee 	bl	8001498 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010c0:	223f      	movs	r2, #63	; 0x3f
 80010c2:	409a      	lsls	r2, r3
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f042 0216 	orr.w	r2, r2, #22
 80010d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	695a      	ldr	r2, [r3, #20]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010e6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d007      	beq.n	8001100 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f042 0208 	orr.w	r2, r2, #8
 80010fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f042 0201 	orr.w	r2, r2, #1
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	e005      	b.n	800111e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2200      	movs	r2, #0
 8001116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800111a:	2302      	movs	r3, #2
 800111c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800111e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d004      	beq.n	8001146 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2280      	movs	r2, #128	; 0x80
 8001140:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e00c      	b.n	8001160 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2205      	movs	r2, #5
 800114a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f022 0201 	bic.w	r2, r2, #1
 800115c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001178:	4b92      	ldr	r3, [pc, #584]	; (80013c4 <HAL_DMA_IRQHandler+0x258>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a92      	ldr	r2, [pc, #584]	; (80013c8 <HAL_DMA_IRQHandler+0x25c>)
 800117e:	fba2 2303 	umull	r2, r3, r2, r3
 8001182:	0a9b      	lsrs	r3, r3, #10
 8001184:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001196:	2208      	movs	r2, #8
 8001198:	409a      	lsls	r2, r3
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	4013      	ands	r3, r2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d01a      	beq.n	80011d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d013      	beq.n	80011d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 0204 	bic.w	r2, r2, #4
 80011be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011c4:	2208      	movs	r2, #8
 80011c6:	409a      	lsls	r2, r3
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d0:	f043 0201 	orr.w	r2, r3, #1
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011dc:	2201      	movs	r2, #1
 80011de:	409a      	lsls	r2, r3
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4013      	ands	r3, r2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d012      	beq.n	800120e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d00b      	beq.n	800120e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011fa:	2201      	movs	r2, #1
 80011fc:	409a      	lsls	r2, r3
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001206:	f043 0202 	orr.w	r2, r3, #2
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001212:	2204      	movs	r2, #4
 8001214:	409a      	lsls	r2, r3
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	4013      	ands	r3, r2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d012      	beq.n	8001244 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d00b      	beq.n	8001244 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001230:	2204      	movs	r2, #4
 8001232:	409a      	lsls	r2, r3
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800123c:	f043 0204 	orr.w	r2, r3, #4
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001248:	2210      	movs	r2, #16
 800124a:	409a      	lsls	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4013      	ands	r3, r2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d043      	beq.n	80012dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0308 	and.w	r3, r3, #8
 800125e:	2b00      	cmp	r3, #0
 8001260:	d03c      	beq.n	80012dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001266:	2210      	movs	r2, #16
 8001268:	409a      	lsls	r2, r3
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d018      	beq.n	80012ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d108      	bne.n	800129c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	2b00      	cmp	r3, #0
 8001290:	d024      	beq.n	80012dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	4798      	blx	r3
 800129a:	e01f      	b.n	80012dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d01b      	beq.n	80012dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	4798      	blx	r3
 80012ac:	e016      	b.n	80012dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d107      	bne.n	80012cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f022 0208 	bic.w	r2, r2, #8
 80012ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012e0:	2220      	movs	r2, #32
 80012e2:	409a      	lsls	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4013      	ands	r3, r2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 808e 	beq.w	800140a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0310 	and.w	r3, r3, #16
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f000 8086 	beq.w	800140a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001302:	2220      	movs	r2, #32
 8001304:	409a      	lsls	r2, r3
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b05      	cmp	r3, #5
 8001314:	d136      	bne.n	8001384 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f022 0216 	bic.w	r2, r2, #22
 8001324:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	695a      	ldr	r2, [r3, #20]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001334:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	2b00      	cmp	r3, #0
 800133c:	d103      	bne.n	8001346 <HAL_DMA_IRQHandler+0x1da>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001342:	2b00      	cmp	r3, #0
 8001344:	d007      	beq.n	8001356 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f022 0208 	bic.w	r2, r2, #8
 8001354:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800135a:	223f      	movs	r2, #63	; 0x3f
 800135c:	409a      	lsls	r2, r3
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2201      	movs	r2, #1
 800136e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001376:	2b00      	cmp	r3, #0
 8001378:	d07d      	beq.n	8001476 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	4798      	blx	r3
        }
        return;
 8001382:	e078      	b.n	8001476 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d01c      	beq.n	80013cc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d108      	bne.n	80013b2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d030      	beq.n	800140a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	4798      	blx	r3
 80013b0:	e02b      	b.n	800140a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d027      	beq.n	800140a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	4798      	blx	r3
 80013c2:	e022      	b.n	800140a <HAL_DMA_IRQHandler+0x29e>
 80013c4:	2000002c 	.word	0x2000002c
 80013c8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d10f      	bne.n	80013fa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f022 0210 	bic.w	r2, r2, #16
 80013e8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2201      	movs	r2, #1
 80013f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800140e:	2b00      	cmp	r3, #0
 8001410:	d032      	beq.n	8001478 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	2b00      	cmp	r3, #0
 800141c:	d022      	beq.n	8001464 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2205      	movs	r2, #5
 8001422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 0201 	bic.w	r2, r2, #1
 8001434:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	3301      	adds	r3, #1
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	429a      	cmp	r2, r3
 8001440:	d307      	bcc.n	8001452 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1f2      	bne.n	8001436 <HAL_DMA_IRQHandler+0x2ca>
 8001450:	e000      	b.n	8001454 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001452:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2201      	movs	r2, #1
 8001460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001468:	2b00      	cmp	r3, #0
 800146a:	d005      	beq.n	8001478 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	4798      	blx	r3
 8001474:	e000      	b.n	8001478 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001476:	bf00      	nop
    }
  }
}
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop

08001480 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800148c:	4618      	mov	r0, r3
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
 80014a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80014b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	2b40      	cmp	r3, #64	; 0x40
 80014c4:	d108      	bne.n	80014d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80014d6:	e007      	b.n	80014e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	68ba      	ldr	r2, [r7, #8]
 80014de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	60da      	str	r2, [r3, #12]
}
 80014e8:	bf00      	nop
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	3b10      	subs	r3, #16
 8001504:	4a13      	ldr	r2, [pc, #76]	; (8001554 <DMA_CalcBaseAndBitshift+0x60>)
 8001506:	fba2 2303 	umull	r2, r3, r2, r3
 800150a:	091b      	lsrs	r3, r3, #4
 800150c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800150e:	4a12      	ldr	r2, [pc, #72]	; (8001558 <DMA_CalcBaseAndBitshift+0x64>)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4413      	add	r3, r2
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	461a      	mov	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2b03      	cmp	r3, #3
 8001520:	d908      	bls.n	8001534 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	461a      	mov	r2, r3
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <DMA_CalcBaseAndBitshift+0x68>)
 800152a:	4013      	ands	r3, r2
 800152c:	1d1a      	adds	r2, r3, #4
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	659a      	str	r2, [r3, #88]	; 0x58
 8001532:	e006      	b.n	8001542 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	461a      	mov	r2, r3
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <DMA_CalcBaseAndBitshift+0x68>)
 800153c:	4013      	ands	r3, r2
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001546:	4618      	mov	r0, r3
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	aaaaaaab 	.word	0xaaaaaaab
 8001558:	08016a54 	.word	0x08016a54
 800155c:	fffffc00 	.word	0xfffffc00

08001560 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001568:	2300      	movs	r3, #0
 800156a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001570:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d11f      	bne.n	80015ba <DMA_CheckFifoParam+0x5a>
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	2b03      	cmp	r3, #3
 800157e:	d856      	bhi.n	800162e <DMA_CheckFifoParam+0xce>
 8001580:	a201      	add	r2, pc, #4	; (adr r2, 8001588 <DMA_CheckFifoParam+0x28>)
 8001582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001586:	bf00      	nop
 8001588:	08001599 	.word	0x08001599
 800158c:	080015ab 	.word	0x080015ab
 8001590:	08001599 	.word	0x08001599
 8001594:	0800162f 	.word	0x0800162f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d046      	beq.n	8001632 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015a8:	e043      	b.n	8001632 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015b2:	d140      	bne.n	8001636 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015b8:	e03d      	b.n	8001636 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015c2:	d121      	bne.n	8001608 <DMA_CheckFifoParam+0xa8>
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	2b03      	cmp	r3, #3
 80015c8:	d837      	bhi.n	800163a <DMA_CheckFifoParam+0xda>
 80015ca:	a201      	add	r2, pc, #4	; (adr r2, 80015d0 <DMA_CheckFifoParam+0x70>)
 80015cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d0:	080015e1 	.word	0x080015e1
 80015d4:	080015e7 	.word	0x080015e7
 80015d8:	080015e1 	.word	0x080015e1
 80015dc:	080015f9 	.word	0x080015f9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	73fb      	strb	r3, [r7, #15]
      break;
 80015e4:	e030      	b.n	8001648 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d025      	beq.n	800163e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015f6:	e022      	b.n	800163e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001600:	d11f      	bne.n	8001642 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001606:	e01c      	b.n	8001642 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d903      	bls.n	8001616 <DMA_CheckFifoParam+0xb6>
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	2b03      	cmp	r3, #3
 8001612:	d003      	beq.n	800161c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001614:	e018      	b.n	8001648 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	73fb      	strb	r3, [r7, #15]
      break;
 800161a:	e015      	b.n	8001648 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001620:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d00e      	beq.n	8001646 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	73fb      	strb	r3, [r7, #15]
      break;
 800162c:	e00b      	b.n	8001646 <DMA_CheckFifoParam+0xe6>
      break;
 800162e:	bf00      	nop
 8001630:	e00a      	b.n	8001648 <DMA_CheckFifoParam+0xe8>
      break;
 8001632:	bf00      	nop
 8001634:	e008      	b.n	8001648 <DMA_CheckFifoParam+0xe8>
      break;
 8001636:	bf00      	nop
 8001638:	e006      	b.n	8001648 <DMA_CheckFifoParam+0xe8>
      break;
 800163a:	bf00      	nop
 800163c:	e004      	b.n	8001648 <DMA_CheckFifoParam+0xe8>
      break;
 800163e:	bf00      	nop
 8001640:	e002      	b.n	8001648 <DMA_CheckFifoParam+0xe8>
      break;   
 8001642:	bf00      	nop
 8001644:	e000      	b.n	8001648 <DMA_CheckFifoParam+0xe8>
      break;
 8001646:	bf00      	nop
    }
  } 
  
  return status; 
 8001648:	7bfb      	ldrb	r3, [r7, #15]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop

08001658 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e039      	b.n	80016de <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d106      	bne.n	8001684 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f013 fd7a 	bl	8015178 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2202      	movs	r2, #2
 8001688:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	430a      	orrs	r2, r1
 80016a0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016a8:	f023 0107 	bic.w	r1, r3, #7
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689a      	ldr	r2, [r3, #8]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016be:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <HAL_DMA2D_Init+0x90>)
 80016c0:	4013      	ands	r3, r2
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	68d1      	ldr	r1, [r2, #12]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	6812      	ldr	r2, [r2, #0]
 80016ca:	430b      	orrs	r3, r1
 80016cc:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2201      	movs	r2, #1
 80016d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	ffffc000 	.word	0xffffc000

080016ec <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b00      	cmp	r3, #0
 800170c:	d026      	beq.n	800175c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001714:	2b00      	cmp	r3, #0
 8001716:	d021      	beq.n	800175c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001726:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800172c:	f043 0201 	orr.w	r2, r3, #1
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2201      	movs	r2, #1
 800173a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2204      	movs	r2, #4
 8001740:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 0320 	and.w	r3, r3, #32
 8001762:	2b00      	cmp	r3, #0
 8001764:	d026      	beq.n	80017b4 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d021      	beq.n	80017b4 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800177e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2220      	movs	r2, #32
 8001786:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800178c:	f043 0202 	orr.w	r2, r3, #2
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2204      	movs	r2, #4
 8001798:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	695b      	ldr	r3, [r3, #20]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f003 0308 	and.w	r3, r3, #8
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d026      	beq.n	800180c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d021      	beq.n	800180c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017d6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2208      	movs	r2, #8
 80017de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017e4:	f043 0204 	orr.w	r2, r3, #4
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2204      	movs	r2, #4
 80017f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	695b      	ldr	r3, [r3, #20]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	695b      	ldr	r3, [r3, #20]
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f003 0304 	and.w	r3, r3, #4
 8001812:	2b00      	cmp	r3, #0
 8001814:	d013      	beq.n	800183e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800181c:	2b00      	cmp	r3, #0
 800181e:	d00e      	beq.n	800183e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800182e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2204      	movs	r2, #4
 8001836:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f000 f853 	bl	80018e4 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d024      	beq.n	8001892 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800184e:	2b00      	cmp	r3, #0
 8001850:	d01f      	beq.n	8001892 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001860:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2202      	movs	r2, #2
 8001868:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f003 0310 	and.w	r3, r3, #16
 8001898:	2b00      	cmp	r3, #0
 800189a:	d01f      	beq.n	80018dc <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d01a      	beq.n	80018dc <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018b4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2210      	movs	r2, #16
 80018bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 f80e 	bl	80018f8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80018dc:	bf00      	nop
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800190c:	b480      	push	{r7}
 800190e:	b087      	sub	sp, #28
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001924:	2b01      	cmp	r3, #1
 8001926:	d101      	bne.n	800192c <HAL_DMA2D_ConfigLayer+0x20>
 8001928:	2302      	movs	r3, #2
 800192a:	e079      	b.n	8001a20 <HAL_DMA2D_ConfigLayer+0x114>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2202      	movs	r2, #2
 8001938:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	011b      	lsls	r3, r3, #4
 8001940:	3318      	adds	r3, #24
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	041b      	lsls	r3, r3, #16
 8001952:	4313      	orrs	r3, r2
 8001954:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001956:	4b35      	ldr	r3, [pc, #212]	; (8001a2c <HAL_DMA2D_ConfigLayer+0x120>)
 8001958:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b0a      	cmp	r3, #10
 8001960:	d003      	beq.n	800196a <HAL_DMA2D_ConfigLayer+0x5e>
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b09      	cmp	r3, #9
 8001968:	d107      	bne.n	800197a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	4313      	orrs	r3, r2
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	e005      	b.n	8001986 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	061b      	lsls	r3, r3, #24
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	4313      	orrs	r3, r2
 8001984:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d120      	bne.n	80019ce <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	43db      	mvns	r3, r3
 8001996:	ea02 0103 	and.w	r1, r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	430a      	orrs	r2, r1
 80019a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	6812      	ldr	r2, [r2, #0]
 80019ac:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b0a      	cmp	r3, #10
 80019b4:	d003      	beq.n	80019be <HAL_DMA2D_ConfigLayer+0xb2>
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b09      	cmp	r3, #9
 80019bc:	d127      	bne.n	8001a0e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	68da      	ldr	r2, [r3, #12]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80019ca:	629a      	str	r2, [r3, #40]	; 0x28
 80019cc:	e01f      	b.n	8001a0e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	69da      	ldr	r2, [r3, #28]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	43db      	mvns	r3, r3
 80019d8:	ea02 0103 	and.w	r1, r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	430a      	orrs	r2, r1
 80019e4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	6812      	ldr	r2, [r2, #0]
 80019ee:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	2b0a      	cmp	r3, #10
 80019f6:	d003      	beq.n	8001a00 <HAL_DMA2D_ConfigLayer+0xf4>
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b09      	cmp	r3, #9
 80019fe:	d106      	bne.n	8001a0e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	68da      	ldr	r2, [r3, #12]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001a0c:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2201      	movs	r2, #1
 8001a12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	371c      	adds	r7, #28
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	ff03000f 	.word	0xff03000f

08001a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b089      	sub	sp, #36	; 0x24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a46:	2300      	movs	r3, #0
 8001a48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
 8001a4e:	e175      	b.n	8001d3c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a50:	2201      	movs	r2, #1
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	4013      	ands	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	f040 8164 	bne.w	8001d36 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d003      	beq.n	8001a7e <HAL_GPIO_Init+0x4e>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b12      	cmp	r3, #18
 8001a7c:	d123      	bne.n	8001ac6 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	08da      	lsrs	r2, r3, #3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	3208      	adds	r2, #8
 8001a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	220f      	movs	r2, #15
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	691a      	ldr	r2, [r3, #16]
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	08da      	lsrs	r2, r3, #3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3208      	adds	r2, #8
 8001ac0:	69b9      	ldr	r1, [r7, #24]
 8001ac2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4013      	ands	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 0203 	and.w	r2, r3, #3
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d00b      	beq.n	8001b1a <HAL_GPIO_Init+0xea>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d007      	beq.n	8001b1a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b0e:	2b11      	cmp	r3, #17
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b12      	cmp	r3, #18
 8001b18:	d130      	bne.n	8001b7c <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	2203      	movs	r2, #3
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b50:	2201      	movs	r2, #1
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	091b      	lsrs	r3, r3, #4
 8001b66:	f003 0201 	and.w	r2, r3, #1
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	2203      	movs	r2, #3
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 80be 	beq.w	8001d36 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bba:	4b66      	ldr	r3, [pc, #408]	; (8001d54 <HAL_GPIO_Init+0x324>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	4a65      	ldr	r2, [pc, #404]	; (8001d54 <HAL_GPIO_Init+0x324>)
 8001bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bc6:	4b63      	ldr	r3, [pc, #396]	; (8001d54 <HAL_GPIO_Init+0x324>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001bd2:	4a61      	ldr	r2, [pc, #388]	; (8001d58 <HAL_GPIO_Init+0x328>)
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	089b      	lsrs	r3, r3, #2
 8001bd8:	3302      	adds	r3, #2
 8001bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	220f      	movs	r2, #15
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a58      	ldr	r2, [pc, #352]	; (8001d5c <HAL_GPIO_Init+0x32c>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d037      	beq.n	8001c6e <HAL_GPIO_Init+0x23e>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a57      	ldr	r2, [pc, #348]	; (8001d60 <HAL_GPIO_Init+0x330>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d031      	beq.n	8001c6a <HAL_GPIO_Init+0x23a>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a56      	ldr	r2, [pc, #344]	; (8001d64 <HAL_GPIO_Init+0x334>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d02b      	beq.n	8001c66 <HAL_GPIO_Init+0x236>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a55      	ldr	r2, [pc, #340]	; (8001d68 <HAL_GPIO_Init+0x338>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d025      	beq.n	8001c62 <HAL_GPIO_Init+0x232>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a54      	ldr	r2, [pc, #336]	; (8001d6c <HAL_GPIO_Init+0x33c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d01f      	beq.n	8001c5e <HAL_GPIO_Init+0x22e>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a53      	ldr	r2, [pc, #332]	; (8001d70 <HAL_GPIO_Init+0x340>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d019      	beq.n	8001c5a <HAL_GPIO_Init+0x22a>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a52      	ldr	r2, [pc, #328]	; (8001d74 <HAL_GPIO_Init+0x344>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d013      	beq.n	8001c56 <HAL_GPIO_Init+0x226>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a51      	ldr	r2, [pc, #324]	; (8001d78 <HAL_GPIO_Init+0x348>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d00d      	beq.n	8001c52 <HAL_GPIO_Init+0x222>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a50      	ldr	r2, [pc, #320]	; (8001d7c <HAL_GPIO_Init+0x34c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d007      	beq.n	8001c4e <HAL_GPIO_Init+0x21e>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a4f      	ldr	r2, [pc, #316]	; (8001d80 <HAL_GPIO_Init+0x350>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d101      	bne.n	8001c4a <HAL_GPIO_Init+0x21a>
 8001c46:	2309      	movs	r3, #9
 8001c48:	e012      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c4a:	230a      	movs	r3, #10
 8001c4c:	e010      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c4e:	2308      	movs	r3, #8
 8001c50:	e00e      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c52:	2307      	movs	r3, #7
 8001c54:	e00c      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c56:	2306      	movs	r3, #6
 8001c58:	e00a      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c5a:	2305      	movs	r3, #5
 8001c5c:	e008      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c5e:	2304      	movs	r3, #4
 8001c60:	e006      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c62:	2303      	movs	r3, #3
 8001c64:	e004      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c66:	2302      	movs	r3, #2
 8001c68:	e002      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <HAL_GPIO_Init+0x240>
 8001c6e:	2300      	movs	r3, #0
 8001c70:	69fa      	ldr	r2, [r7, #28]
 8001c72:	f002 0203 	and.w	r2, r2, #3
 8001c76:	0092      	lsls	r2, r2, #2
 8001c78:	4093      	lsls	r3, r2
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c80:	4935      	ldr	r1, [pc, #212]	; (8001d58 <HAL_GPIO_Init+0x328>)
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	089b      	lsrs	r3, r3, #2
 8001c86:	3302      	adds	r3, #2
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c8e:	4b3d      	ldr	r3, [pc, #244]	; (8001d84 <HAL_GPIO_Init+0x354>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	43db      	mvns	r3, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cb2:	4a34      	ldr	r2, [pc, #208]	; (8001d84 <HAL_GPIO_Init+0x354>)
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cb8:	4b32      	ldr	r3, [pc, #200]	; (8001d84 <HAL_GPIO_Init+0x354>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cdc:	4a29      	ldr	r2, [pc, #164]	; (8001d84 <HAL_GPIO_Init+0x354>)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ce2:	4b28      	ldr	r3, [pc, #160]	; (8001d84 <HAL_GPIO_Init+0x354>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	43db      	mvns	r3, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d06:	4a1f      	ldr	r2, [pc, #124]	; (8001d84 <HAL_GPIO_Init+0x354>)
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d0c:	4b1d      	ldr	r3, [pc, #116]	; (8001d84 <HAL_GPIO_Init+0x354>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d30:	4a14      	ldr	r2, [pc, #80]	; (8001d84 <HAL_GPIO_Init+0x354>)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	61fb      	str	r3, [r7, #28]
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	2b0f      	cmp	r3, #15
 8001d40:	f67f ae86 	bls.w	8001a50 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d44:	bf00      	nop
 8001d46:	bf00      	nop
 8001d48:	3724      	adds	r7, #36	; 0x24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40013800 	.word	0x40013800
 8001d5c:	40020000 	.word	0x40020000
 8001d60:	40020400 	.word	0x40020400
 8001d64:	40020800 	.word	0x40020800
 8001d68:	40020c00 	.word	0x40020c00
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40021400 	.word	0x40021400
 8001d74:	40021800 	.word	0x40021800
 8001d78:	40021c00 	.word	0x40021c00
 8001d7c:	40022000 	.word	0x40022000
 8001d80:	40022400 	.word	0x40022400
 8001d84:	40013c00 	.word	0x40013c00

08001d88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691a      	ldr	r2, [r3, #16]
 8001d98:	887b      	ldrh	r3, [r7, #2]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d002      	beq.n	8001da6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001da0:	2301      	movs	r3, #1
 8001da2:	73fb      	strb	r3, [r7, #15]
 8001da4:	e001      	b.n	8001daa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001da6:	2300      	movs	r3, #0
 8001da8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	807b      	strh	r3, [r7, #2]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dc8:	787b      	ldrb	r3, [r7, #1]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dce:	887a      	ldrh	r2, [r7, #2]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001dd4:	e003      	b.n	8001dde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001dd6:	887b      	ldrh	r3, [r7, #2]
 8001dd8:	041a      	lsls	r2, r3, #16
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	619a      	str	r2, [r3, #24]
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
	...

08001dec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001df6:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001df8:	695a      	ldr	r2, [r3, #20]
 8001dfa:	88fb      	ldrh	r3, [r7, #6]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d006      	beq.n	8001e10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e02:	4a05      	ldr	r2, [pc, #20]	; (8001e18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e04:	88fb      	ldrh	r3, [r7, #6]
 8001e06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e08:	88fb      	ldrh	r3, [r7, #6]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f012 fbda 	bl	80145c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40013c00 	.word	0x40013c00

08001e1c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e1e:	b08d      	sub	sp, #52	; 0x34
 8001e20:	af0a      	add	r7, sp, #40	; 0x28
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e048      	b.n	8001ec0 <HAL_HCD_Init+0xa4>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d106      	bne.n	8001e48 <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f014 f950 	bl	80160e8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f008 fb1c 	bl	800a492 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	603b      	str	r3, [r7, #0]
 8001e60:	687e      	ldr	r6, [r7, #4]
 8001e62:	466d      	mov	r5, sp
 8001e64:	f106 0410 	add.w	r4, r6, #16
 8001e68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e74:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e78:	1d33      	adds	r3, r6, #4
 8001e7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e7c:	6838      	ldr	r0, [r7, #0]
 8001e7e:	f008 fa9f 	bl	800a3c0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2101      	movs	r1, #1
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f008 fb13 	bl	800a4b4 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	603b      	str	r3, [r7, #0]
 8001e94:	687e      	ldr	r6, [r7, #4]
 8001e96:	466d      	mov	r5, sp
 8001e98:	f106 0410 	add.w	r4, r6, #16
 8001e9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ea0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ea2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ea4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ea8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001eac:	1d33      	adds	r3, r6, #4
 8001eae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eb0:	6838      	ldr	r0, [r7, #0]
 8001eb2:	f008 fc25 	bl	800a700 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ec8 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001ec8:	b590      	push	{r4, r7, lr}
 8001eca:	b089      	sub	sp, #36	; 0x24
 8001ecc:	af04      	add	r7, sp, #16
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	4608      	mov	r0, r1
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	70fb      	strb	r3, [r7, #3]
 8001eda:	460b      	mov	r3, r1
 8001edc:	70bb      	strb	r3, [r7, #2]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d101      	bne.n	8001ef0 <HAL_HCD_HC_Init+0x28>
 8001eec:	2302      	movs	r3, #2
 8001eee:	e07f      	b.n	8001ff0 <HAL_HCD_HC_Init+0x128>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001ef8:	78fa      	ldrb	r2, [r7, #3]
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	440b      	add	r3, r1
 8001f06:	333d      	adds	r3, #61	; 0x3d
 8001f08:	2200      	movs	r2, #0
 8001f0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001f0c:	78fa      	ldrb	r2, [r7, #3]
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	440b      	add	r3, r1
 8001f1a:	3338      	adds	r3, #56	; 0x38
 8001f1c:	787a      	ldrb	r2, [r7, #1]
 8001f1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001f20:	78fa      	ldrb	r2, [r7, #3]
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	4613      	mov	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	440b      	add	r3, r1
 8001f2e:	3340      	adds	r3, #64	; 0x40
 8001f30:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001f32:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f34:	78fa      	ldrb	r2, [r7, #3]
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	440b      	add	r3, r1
 8001f42:	3339      	adds	r3, #57	; 0x39
 8001f44:	78fa      	ldrb	r2, [r7, #3]
 8001f46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001f48:	78fa      	ldrb	r2, [r7, #3]
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	440b      	add	r3, r1
 8001f56:	333f      	adds	r3, #63	; 0x3f
 8001f58:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001f5c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001f5e:	78fa      	ldrb	r2, [r7, #3]
 8001f60:	78bb      	ldrb	r3, [r7, #2]
 8001f62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f66:	b2d8      	uxtb	r0, r3
 8001f68:	6879      	ldr	r1, [r7, #4]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	440b      	add	r3, r1
 8001f74:	333a      	adds	r3, #58	; 0x3a
 8001f76:	4602      	mov	r2, r0
 8001f78:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001f7a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	da0a      	bge.n	8001f98 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001f82:	78fa      	ldrb	r2, [r7, #3]
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	4613      	mov	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4413      	add	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	440b      	add	r3, r1
 8001f90:	333b      	adds	r3, #59	; 0x3b
 8001f92:	2201      	movs	r2, #1
 8001f94:	701a      	strb	r2, [r3, #0]
 8001f96:	e009      	b.n	8001fac <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001f98:	78fa      	ldrb	r2, [r7, #3]
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	440b      	add	r3, r1
 8001fa6:	333b      	adds	r3, #59	; 0x3b
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001fac:	78fa      	ldrb	r2, [r7, #3]
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	440b      	add	r3, r1
 8001fba:	333c      	adds	r3, #60	; 0x3c
 8001fbc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001fc0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6818      	ldr	r0, [r3, #0]
 8001fc6:	787c      	ldrb	r4, [r7, #1]
 8001fc8:	78ba      	ldrb	r2, [r7, #2]
 8001fca:	78f9      	ldrb	r1, [r7, #3]
 8001fcc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001fce:	9302      	str	r3, [sp, #8]
 8001fd0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001fd4:	9301      	str	r3, [sp, #4]
 8001fd6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001fda:	9300      	str	r3, [sp, #0]
 8001fdc:	4623      	mov	r3, r4
 8001fde:	f008 fd05 	bl	800a9ec <USB_HC_Init>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd90      	pop	{r4, r7, pc}

08001ff8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	460b      	mov	r3, r1
 8002002:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800200e:	2b01      	cmp	r3, #1
 8002010:	d101      	bne.n	8002016 <HAL_HCD_HC_Halt+0x1e>
 8002012:	2302      	movs	r3, #2
 8002014:	e00f      	b.n	8002036 <HAL_HCD_HC_Halt+0x3e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	78fa      	ldrb	r2, [r7, #3]
 8002024:	4611      	mov	r1, r2
 8002026:	4618      	mov	r0, r3
 8002028:	f008 ff3d 	bl	800aea6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002034:	7bfb      	ldrb	r3, [r7, #15]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	4608      	mov	r0, r1
 800204a:	4611      	mov	r1, r2
 800204c:	461a      	mov	r2, r3
 800204e:	4603      	mov	r3, r0
 8002050:	70fb      	strb	r3, [r7, #3]
 8002052:	460b      	mov	r3, r1
 8002054:	70bb      	strb	r3, [r7, #2]
 8002056:	4613      	mov	r3, r2
 8002058:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 800205a:	78fa      	ldrb	r2, [r7, #3]
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	440b      	add	r3, r1
 8002068:	333b      	adds	r3, #59	; 0x3b
 800206a:	78ba      	ldrb	r2, [r7, #2]
 800206c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800206e:	78fa      	ldrb	r2, [r7, #3]
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	440b      	add	r3, r1
 800207c:	333f      	adds	r3, #63	; 0x3f
 800207e:	787a      	ldrb	r2, [r7, #1]
 8002080:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002082:	7c3b      	ldrb	r3, [r7, #16]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d10a      	bne.n	800209e <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002088:	78fa      	ldrb	r2, [r7, #3]
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	440b      	add	r3, r1
 8002096:	3342      	adds	r3, #66	; 0x42
 8002098:	2203      	movs	r2, #3
 800209a:	701a      	strb	r2, [r3, #0]
 800209c:	e009      	b.n	80020b2 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800209e:	78fa      	ldrb	r2, [r7, #3]
 80020a0:	6879      	ldr	r1, [r7, #4]
 80020a2:	4613      	mov	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	440b      	add	r3, r1
 80020ac:	3342      	adds	r3, #66	; 0x42
 80020ae:	2202      	movs	r2, #2
 80020b0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80020b2:	787b      	ldrb	r3, [r7, #1]
 80020b4:	2b03      	cmp	r3, #3
 80020b6:	f200 80d6 	bhi.w	8002266 <HAL_HCD_HC_SubmitRequest+0x226>
 80020ba:	a201      	add	r2, pc, #4	; (adr r2, 80020c0 <HAL_HCD_HC_SubmitRequest+0x80>)
 80020bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c0:	080020d1 	.word	0x080020d1
 80020c4:	08002251 	.word	0x08002251
 80020c8:	0800213d 	.word	0x0800213d
 80020cc:	080021c7 	.word	0x080021c7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80020d0:	7c3b      	ldrb	r3, [r7, #16]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	f040 80c9 	bne.w	800226a <HAL_HCD_HC_SubmitRequest+0x22a>
 80020d8:	78bb      	ldrb	r3, [r7, #2]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f040 80c5 	bne.w	800226a <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 80020e0:	8b3b      	ldrh	r3, [r7, #24]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d109      	bne.n	80020fa <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80020e6:	78fa      	ldrb	r2, [r7, #3]
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	4613      	mov	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	440b      	add	r3, r1
 80020f4:	3351      	adds	r3, #81	; 0x51
 80020f6:	2201      	movs	r2, #1
 80020f8:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80020fa:	78fa      	ldrb	r2, [r7, #3]
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	4613      	mov	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	440b      	add	r3, r1
 8002108:	3351      	adds	r3, #81	; 0x51
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10a      	bne.n	8002126 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002110:	78fa      	ldrb	r2, [r7, #3]
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	4613      	mov	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	440b      	add	r3, r1
 800211e:	3342      	adds	r3, #66	; 0x42
 8002120:	2200      	movs	r2, #0
 8002122:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002124:	e0a1      	b.n	800226a <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002126:	78fa      	ldrb	r2, [r7, #3]
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	440b      	add	r3, r1
 8002134:	3342      	adds	r3, #66	; 0x42
 8002136:	2202      	movs	r2, #2
 8002138:	701a      	strb	r2, [r3, #0]
      break;
 800213a:	e096      	b.n	800226a <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800213c:	78bb      	ldrb	r3, [r7, #2]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d120      	bne.n	8002184 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002142:	78fa      	ldrb	r2, [r7, #3]
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	440b      	add	r3, r1
 8002150:	3351      	adds	r3, #81	; 0x51
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d10a      	bne.n	800216e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002158:	78fa      	ldrb	r2, [r7, #3]
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	4613      	mov	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	440b      	add	r3, r1
 8002166:	3342      	adds	r3, #66	; 0x42
 8002168:	2200      	movs	r2, #0
 800216a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800216c:	e07e      	b.n	800226c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800216e:	78fa      	ldrb	r2, [r7, #3]
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	440b      	add	r3, r1
 800217c:	3342      	adds	r3, #66	; 0x42
 800217e:	2202      	movs	r2, #2
 8002180:	701a      	strb	r2, [r3, #0]
      break;
 8002182:	e073      	b.n	800226c <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002184:	78fa      	ldrb	r2, [r7, #3]
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	440b      	add	r3, r1
 8002192:	3350      	adds	r3, #80	; 0x50
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10a      	bne.n	80021b0 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800219a:	78fa      	ldrb	r2, [r7, #3]
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	440b      	add	r3, r1
 80021a8:	3342      	adds	r3, #66	; 0x42
 80021aa:	2200      	movs	r2, #0
 80021ac:	701a      	strb	r2, [r3, #0]
      break;
 80021ae:	e05d      	b.n	800226c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021b0:	78fa      	ldrb	r2, [r7, #3]
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	440b      	add	r3, r1
 80021be:	3342      	adds	r3, #66	; 0x42
 80021c0:	2202      	movs	r2, #2
 80021c2:	701a      	strb	r2, [r3, #0]
      break;
 80021c4:	e052      	b.n	800226c <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80021c6:	78bb      	ldrb	r3, [r7, #2]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d120      	bne.n	800220e <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80021cc:	78fa      	ldrb	r2, [r7, #3]
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	440b      	add	r3, r1
 80021da:	3351      	adds	r3, #81	; 0x51
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10a      	bne.n	80021f8 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021e2:	78fa      	ldrb	r2, [r7, #3]
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	440b      	add	r3, r1
 80021f0:	3342      	adds	r3, #66	; 0x42
 80021f2:	2200      	movs	r2, #0
 80021f4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80021f6:	e039      	b.n	800226c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021f8:	78fa      	ldrb	r2, [r7, #3]
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	440b      	add	r3, r1
 8002206:	3342      	adds	r3, #66	; 0x42
 8002208:	2202      	movs	r2, #2
 800220a:	701a      	strb	r2, [r3, #0]
      break;
 800220c:	e02e      	b.n	800226c <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800220e:	78fa      	ldrb	r2, [r7, #3]
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	4413      	add	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	440b      	add	r3, r1
 800221c:	3350      	adds	r3, #80	; 0x50
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10a      	bne.n	800223a <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002224:	78fa      	ldrb	r2, [r7, #3]
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	440b      	add	r3, r1
 8002232:	3342      	adds	r3, #66	; 0x42
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]
      break;
 8002238:	e018      	b.n	800226c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800223a:	78fa      	ldrb	r2, [r7, #3]
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	440b      	add	r3, r1
 8002248:	3342      	adds	r3, #66	; 0x42
 800224a:	2202      	movs	r2, #2
 800224c:	701a      	strb	r2, [r3, #0]
      break;
 800224e:	e00d      	b.n	800226c <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002250:	78fa      	ldrb	r2, [r7, #3]
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	4613      	mov	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	440b      	add	r3, r1
 800225e:	3342      	adds	r3, #66	; 0x42
 8002260:	2200      	movs	r2, #0
 8002262:	701a      	strb	r2, [r3, #0]
      break;
 8002264:	e002      	b.n	800226c <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8002266:	bf00      	nop
 8002268:	e000      	b.n	800226c <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 800226a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800226c:	78fa      	ldrb	r2, [r7, #3]
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	440b      	add	r3, r1
 800227a:	3344      	adds	r3, #68	; 0x44
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002280:	78fa      	ldrb	r2, [r7, #3]
 8002282:	8b39      	ldrh	r1, [r7, #24]
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	4403      	add	r3, r0
 8002290:	3348      	adds	r3, #72	; 0x48
 8002292:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002294:	78fa      	ldrb	r2, [r7, #3]
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	4613      	mov	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	440b      	add	r3, r1
 80022a2:	335c      	adds	r3, #92	; 0x5c
 80022a4:	2200      	movs	r2, #0
 80022a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80022a8:	78fa      	ldrb	r2, [r7, #3]
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	4613      	mov	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	440b      	add	r3, r1
 80022b6:	334c      	adds	r3, #76	; 0x4c
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80022bc:	78fa      	ldrb	r2, [r7, #3]
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	440b      	add	r3, r1
 80022ca:	3339      	adds	r3, #57	; 0x39
 80022cc:	78fa      	ldrb	r2, [r7, #3]
 80022ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80022d0:	78fa      	ldrb	r2, [r7, #3]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	4613      	mov	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	440b      	add	r3, r1
 80022de:	335d      	adds	r3, #93	; 0x5d
 80022e0:	2200      	movs	r2, #0
 80022e2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6818      	ldr	r0, [r3, #0]
 80022e8:	78fa      	ldrb	r2, [r7, #3]
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	3338      	adds	r3, #56	; 0x38
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	18d1      	adds	r1, r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	461a      	mov	r2, r3
 8002300:	f008 fc7e 	bl	800ac00 <USB_HC_StartXfer>
 8002304:	4603      	mov	r3, r0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop

08002310 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f008 f9a7 	bl	800a67a <USB_GetMode>
 800232c:	4603      	mov	r3, r0
 800232e:	2b01      	cmp	r3, #1
 8002330:	f040 80f1 	bne.w	8002516 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f008 f98b 	bl	800a654 <USB_ReadInterrupts>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 80e7 	beq.w	8002514 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f008 f982 	bl	800a654 <USB_ReadInterrupts>
 8002350:	4603      	mov	r3, r0
 8002352:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002356:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800235a:	d104      	bne.n	8002366 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002364:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f008 f972 	bl	800a654 <USB_ReadInterrupts>
 8002370:	4603      	mov	r3, r0
 8002372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002376:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800237a:	d104      	bne.n	8002386 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002384:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f008 f962 	bl	800a654 <USB_ReadInterrupts>
 8002390:	4603      	mov	r3, r0
 8002392:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002396:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800239a:	d104      	bne.n	80023a6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f008 f952 	bl	800a654 <USB_ReadInterrupts>
 80023b0:	4603      	mov	r3, r0
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d103      	bne.n	80023c2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2202      	movs	r2, #2
 80023c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f008 f944 	bl	800a654 <USB_ReadInterrupts>
 80023cc:	4603      	mov	r3, r0
 80023ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023d6:	d117      	bne.n	8002408 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80023e6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80023ea:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f013 feed 	bl	80161cc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2101      	movs	r1, #1
 80023f8:	4618      	mov	r0, r3
 80023fa:	f008 fa31 	bl	800a860 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002406:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f008 f921 	bl	800a654 <USB_ReadInterrupts>
 8002412:	4603      	mov	r3, r0
 8002414:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002418:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800241c:	d102      	bne.n	8002424 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f001 f8ca 	bl	80035b8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f008 f913 	bl	800a654 <USB_ReadInterrupts>
 800242e:	4603      	mov	r3, r0
 8002430:	f003 0308 	and.w	r3, r3, #8
 8002434:	2b08      	cmp	r3, #8
 8002436:	d106      	bne.n	8002446 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f013 feab 	bl	8016194 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2208      	movs	r2, #8
 8002444:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f008 f902 	bl	800a654 <USB_ReadInterrupts>
 8002450:	4603      	mov	r3, r0
 8002452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002456:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800245a:	d138      	bne.n	80024ce <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f008 fd0f 	bl	800ae84 <USB_HC_ReadInterrupt>
 8002466:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]
 800246c:	e025      	b.n	80024ba <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	f003 030f 	and.w	r3, r3, #15
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	fa22 f303 	lsr.w	r3, r2, r3
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d018      	beq.n	80024b4 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	015a      	lsls	r2, r3, #5
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	4413      	add	r3, r2
 800248a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002498:	d106      	bne.n	80024a8 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	b2db      	uxtb	r3, r3
 800249e:	4619      	mov	r1, r3
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f8cf 	bl	8002644 <HCD_HC_IN_IRQHandler>
 80024a6:	e005      	b.n	80024b4 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	4619      	mov	r1, r3
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 fc5f 	bl	8002d72 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	3301      	adds	r3, #1
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d3d4      	bcc.n	800246e <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f008 f8be 	bl	800a654 <USB_ReadInterrupts>
 80024d8:	4603      	mov	r3, r0
 80024da:	f003 0310 	and.w	r3, r3, #16
 80024de:	2b10      	cmp	r3, #16
 80024e0:	d101      	bne.n	80024e6 <HAL_HCD_IRQHandler+0x1d6>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <HAL_HCD_IRQHandler+0x1d8>
 80024e6:	2300      	movs	r3, #0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d014      	beq.n	8002516 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	699a      	ldr	r2, [r3, #24]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0210 	bic.w	r2, r2, #16
 80024fa:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 ffad 	bl	800345c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	699a      	ldr	r2, [r3, #24]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0210 	orr.w	r2, r2, #16
 8002510:	619a      	str	r2, [r3, #24]
 8002512:	e000      	b.n	8002516 <HAL_HCD_IRQHandler+0x206>
      return;
 8002514:	bf00      	nop
    }
  }
}
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800252a:	2b01      	cmp	r3, #1
 800252c:	d101      	bne.n	8002532 <HAL_HCD_Start+0x16>
 800252e:	2302      	movs	r3, #2
 8002530:	e013      	b.n	800255a <HAL_HCD_Start+0x3e>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f007 ff96 	bl	800a470 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2101      	movs	r1, #1
 800254a:	4618      	mov	r0, r3
 800254c:	f008 f9ec 	bl	800a928 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002570:	2b01      	cmp	r3, #1
 8002572:	d101      	bne.n	8002578 <HAL_HCD_Stop+0x16>
 8002574:	2302      	movs	r3, #2
 8002576:	e00d      	b.n	8002594 <HAL_HCD_Stop+0x32>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f008 fdc9 	bl	800b11c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f008 f993 	bl	800a8d4 <USB_ResetPort>
 80025ae:	4603      	mov	r3, r0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80025c4:	78fa      	ldrb	r2, [r7, #3]
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	440b      	add	r3, r1
 80025d2:	335c      	adds	r3, #92	; 0x5c
 80025d4:	781b      	ldrb	r3, [r3, #0]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	460b      	mov	r3, r1
 80025ec:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80025ee:	78fa      	ldrb	r2, [r7, #3]
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	440b      	add	r3, r1
 80025fc:	334c      	adds	r3, #76	; 0x4c
 80025fe:	681b      	ldr	r3, [r3, #0]
}
 8002600:	4618      	mov	r0, r3
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f008 f9d5 	bl	800a9c8 <USB_GetCurrentFrame>
 800261e:	4603      	mov	r3, r0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f008 f9b0 	bl	800a99a <USB_GetHostSpeed>
 800263a:	4603      	mov	r3, r0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800265a:	78fb      	ldrb	r3, [r7, #3]
 800265c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	015a      	lsls	r2, r3, #5
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4413      	add	r3, r2
 8002666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b04      	cmp	r3, #4
 8002672:	d119      	bne.n	80026a8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	015a      	lsls	r2, r3, #5
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	4413      	add	r3, r2
 800267c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002680:	461a      	mov	r2, r3
 8002682:	2304      	movs	r3, #4
 8002684:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	015a      	lsls	r2, r3, #5
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4413      	add	r3, r2
 800268e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	0151      	lsls	r1, r2, #5
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	440a      	add	r2, r1
 800269c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026a0:	f043 0302 	orr.w	r3, r3, #2
 80026a4:	60d3      	str	r3, [r2, #12]
 80026a6:	e095      	b.n	80027d4 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	015a      	lsls	r2, r3, #5
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	4413      	add	r3, r2
 80026b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 0320 	and.w	r3, r3, #32
 80026ba:	2b20      	cmp	r3, #32
 80026bc:	d109      	bne.n	80026d2 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	015a      	lsls	r2, r3, #5
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	4413      	add	r3, r2
 80026c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ca:	461a      	mov	r2, r3
 80026cc:	2320      	movs	r3, #32
 80026ce:	6093      	str	r3, [r2, #8]
 80026d0:	e080      	b.n	80027d4 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	015a      	lsls	r2, r3, #5
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	4413      	add	r3, r2
 80026da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 0308 	and.w	r3, r3, #8
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d134      	bne.n	8002752 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	015a      	lsls	r2, r3, #5
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4413      	add	r3, r2
 80026f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	0151      	lsls	r1, r2, #5
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	440a      	add	r2, r1
 80026fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002702:	f043 0302 	orr.w	r3, r3, #2
 8002706:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002708:	6879      	ldr	r1, [r7, #4]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	4613      	mov	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	440b      	add	r3, r1
 8002716:	335d      	adds	r3, #93	; 0x5d
 8002718:	2205      	movs	r2, #5
 800271a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	015a      	lsls	r2, r3, #5
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4413      	add	r3, r2
 8002724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002728:	461a      	mov	r2, r3
 800272a:	2310      	movs	r3, #16
 800272c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	015a      	lsls	r2, r3, #5
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	4413      	add	r3, r2
 8002736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273a:	461a      	mov	r2, r3
 800273c:	2308      	movs	r3, #8
 800273e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	4611      	mov	r1, r2
 800274a:	4618      	mov	r0, r3
 800274c:	f008 fbab 	bl	800aea6 <USB_HC_Halt>
 8002750:	e040      	b.n	80027d4 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	015a      	lsls	r2, r3, #5
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	4413      	add	r3, r2
 800275a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002768:	d134      	bne.n	80027d4 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	015a      	lsls	r2, r3, #5
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4413      	add	r3, r2
 8002772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	0151      	lsls	r1, r2, #5
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	440a      	add	r2, r1
 8002780:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002784:	f043 0302 	orr.w	r3, r3, #2
 8002788:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	4611      	mov	r1, r2
 8002794:	4618      	mov	r0, r3
 8002796:	f008 fb86 	bl	800aea6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	015a      	lsls	r2, r3, #5
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a6:	461a      	mov	r2, r3
 80027a8:	2310      	movs	r3, #16
 80027aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80027ac:	6879      	ldr	r1, [r7, #4]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	440b      	add	r3, r1
 80027ba:	335d      	adds	r3, #93	; 0x5d
 80027bc:	2208      	movs	r2, #8
 80027be:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	015a      	lsls	r2, r3, #5
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	4413      	add	r3, r2
 80027c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027cc:	461a      	mov	r2, r3
 80027ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027d2:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	015a      	lsls	r2, r3, #5
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	4413      	add	r3, r2
 80027dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027ea:	d122      	bne.n	8002832 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	015a      	lsls	r2, r3, #5
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	4413      	add	r3, r2
 80027f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	0151      	lsls	r1, r2, #5
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	440a      	add	r2, r1
 8002802:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002806:	f043 0302 	orr.w	r3, r3, #2
 800280a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	4611      	mov	r1, r2
 8002816:	4618      	mov	r0, r3
 8002818:	f008 fb45 	bl	800aea6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	015a      	lsls	r2, r3, #5
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	4413      	add	r3, r2
 8002824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002828:	461a      	mov	r2, r3
 800282a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800282e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002830:	e29b      	b.n	8002d6a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	015a      	lsls	r2, r3, #5
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4413      	add	r3, r2
 800283a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b01      	cmp	r3, #1
 8002846:	f040 80c1 	bne.w	80029cc <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d01b      	beq.n	800288a <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	440b      	add	r3, r1
 8002860:	3348      	adds	r3, #72	; 0x48
 8002862:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	0159      	lsls	r1, r3, #5
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	440b      	add	r3, r1
 800286c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002876:	1ad1      	subs	r1, r2, r3
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	4403      	add	r3, r0
 8002886:	334c      	adds	r3, #76	; 0x4c
 8002888:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	4613      	mov	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	440b      	add	r3, r1
 8002898:	335d      	adds	r3, #93	; 0x5d
 800289a:	2201      	movs	r2, #1
 800289c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	4613      	mov	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	440b      	add	r3, r1
 80028ac:	3358      	adds	r3, #88	; 0x58
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	015a      	lsls	r2, r3, #5
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	4413      	add	r3, r2
 80028ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028be:	461a      	mov	r2, r3
 80028c0:	2301      	movs	r3, #1
 80028c2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028c4:	6879      	ldr	r1, [r7, #4]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	440b      	add	r3, r1
 80028d2:	333f      	adds	r3, #63	; 0x3f
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00a      	beq.n	80028f0 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	4613      	mov	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	440b      	add	r3, r1
 80028e8:	333f      	adds	r3, #63	; 0x3f
 80028ea:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d121      	bne.n	8002934 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	015a      	lsls	r2, r3, #5
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	4413      	add	r3, r2
 80028f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	0151      	lsls	r1, r2, #5
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	440a      	add	r2, r1
 8002906:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800290a:	f043 0302 	orr.w	r3, r3, #2
 800290e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	4611      	mov	r1, r2
 800291a:	4618      	mov	r0, r3
 800291c:	f008 fac3 	bl	800aea6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4413      	add	r3, r2
 8002928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292c:	461a      	mov	r2, r3
 800292e:	2310      	movs	r3, #16
 8002930:	6093      	str	r3, [r2, #8]
 8002932:	e034      	b.n	800299e <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	440b      	add	r3, r1
 8002942:	333f      	adds	r3, #63	; 0x3f
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b03      	cmp	r3, #3
 8002948:	d129      	bne.n	800299e <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	015a      	lsls	r2, r3, #5
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	4413      	add	r3, r2
 8002952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	0151      	lsls	r1, r2, #5
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	440a      	add	r2, r1
 8002960:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002964:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002968:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	4613      	mov	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	440b      	add	r3, r1
 8002978:	335c      	adds	r3, #92	; 0x5c
 800297a:	2201      	movs	r2, #1
 800297c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	b2d8      	uxtb	r0, r3
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	440b      	add	r3, r1
 8002990:	335c      	adds	r3, #92	; 0x5c
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	461a      	mov	r2, r3
 8002996:	4601      	mov	r1, r0
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f013 fc25 	bl	80161e8 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	4613      	mov	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	440b      	add	r3, r1
 80029ac:	3350      	adds	r3, #80	; 0x50
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	f083 0301 	eor.w	r3, r3, #1
 80029b4:	b2d8      	uxtb	r0, r3
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	440b      	add	r3, r1
 80029c4:	3350      	adds	r3, #80	; 0x50
 80029c6:	4602      	mov	r2, r0
 80029c8:	701a      	strb	r2, [r3, #0]
}
 80029ca:	e1ce      	b.n	8002d6a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	015a      	lsls	r2, r3, #5
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	4413      	add	r3, r2
 80029d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b02      	cmp	r3, #2
 80029e0:	f040 80f1 	bne.w	8002bc6 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	015a      	lsls	r2, r3, #5
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4413      	add	r3, r2
 80029ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	0151      	lsls	r1, r2, #5
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	440a      	add	r2, r1
 80029fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029fe:	f023 0302 	bic.w	r3, r3, #2
 8002a02:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	440b      	add	r3, r1
 8002a12:	335d      	adds	r3, #93	; 0x5d
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d10a      	bne.n	8002a30 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	440b      	add	r3, r1
 8002a28:	335c      	adds	r3, #92	; 0x5c
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	701a      	strb	r2, [r3, #0]
 8002a2e:	e0b0      	b.n	8002b92 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	4613      	mov	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	440b      	add	r3, r1
 8002a3e:	335d      	adds	r3, #93	; 0x5d
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b05      	cmp	r3, #5
 8002a44:	d10a      	bne.n	8002a5c <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	440b      	add	r3, r1
 8002a54:	335c      	adds	r3, #92	; 0x5c
 8002a56:	2205      	movs	r2, #5
 8002a58:	701a      	strb	r2, [r3, #0]
 8002a5a:	e09a      	b.n	8002b92 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	440b      	add	r3, r1
 8002a6a:	335d      	adds	r3, #93	; 0x5d
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b06      	cmp	r3, #6
 8002a70:	d00a      	beq.n	8002a88 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	440b      	add	r3, r1
 8002a80:	335d      	adds	r3, #93	; 0x5d
 8002a82:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a84:	2b08      	cmp	r3, #8
 8002a86:	d156      	bne.n	8002b36 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	440b      	add	r3, r1
 8002a96:	3358      	adds	r3, #88	; 0x58
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	1c59      	adds	r1, r3, #1
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	4403      	add	r3, r0
 8002aaa:	3358      	adds	r3, #88	; 0x58
 8002aac:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4413      	add	r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	440b      	add	r3, r1
 8002abc:	3358      	adds	r3, #88	; 0x58
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b03      	cmp	r3, #3
 8002ac2:	d914      	bls.n	8002aee <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	440b      	add	r3, r1
 8002ad2:	3358      	adds	r3, #88	; 0x58
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	440b      	add	r3, r1
 8002ae6:	335c      	adds	r3, #92	; 0x5c
 8002ae8:	2204      	movs	r2, #4
 8002aea:	701a      	strb	r2, [r3, #0]
 8002aec:	e009      	b.n	8002b02 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	440b      	add	r3, r1
 8002afc:	335c      	adds	r3, #92	; 0x5c
 8002afe:	2202      	movs	r2, #2
 8002b00:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	015a      	lsls	r2, r3, #5
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	4413      	add	r3, r2
 8002b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b18:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b20:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	015a      	lsls	r2, r3, #5
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	4413      	add	r3, r2
 8002b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2e:	461a      	mov	r2, r3
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	6013      	str	r3, [r2, #0]
 8002b34:	e02d      	b.n	8002b92 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	440b      	add	r3, r1
 8002b44:	335d      	adds	r3, #93	; 0x5d
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b03      	cmp	r3, #3
 8002b4a:	d122      	bne.n	8002b92 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	4613      	mov	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	440b      	add	r3, r1
 8002b5a:	335c      	adds	r3, #92	; 0x5c
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	015a      	lsls	r2, r3, #5
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	4413      	add	r3, r2
 8002b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b76:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b7e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	015a      	lsls	r2, r3, #5
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	015a      	lsls	r2, r3, #5
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	4413      	add	r3, r2
 8002b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	b2d8      	uxtb	r0, r3
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	4613      	mov	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	440b      	add	r3, r1
 8002bb6:	335c      	adds	r3, #92	; 0x5c
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	4601      	mov	r1, r0
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f013 fb12 	bl	80161e8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002bc4:	e0d1      	b.n	8002d6a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	015a      	lsls	r2, r3, #5
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd8:	2b80      	cmp	r3, #128	; 0x80
 8002bda:	d13e      	bne.n	8002c5a <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	015a      	lsls	r2, r3, #5
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	4413      	add	r3, r2
 8002be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	0151      	lsls	r1, r2, #5
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	440a      	add	r2, r1
 8002bf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bf6:	f043 0302 	orr.w	r3, r3, #2
 8002bfa:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	440b      	add	r3, r1
 8002c0a:	3358      	adds	r3, #88	; 0x58
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	1c59      	adds	r1, r3, #1
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	4613      	mov	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	4403      	add	r3, r0
 8002c1e:	3358      	adds	r3, #88	; 0x58
 8002c20:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	4613      	mov	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	440b      	add	r3, r1
 8002c30:	335d      	adds	r3, #93	; 0x5d
 8002c32:	2206      	movs	r2, #6
 8002c34:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	4611      	mov	r1, r2
 8002c40:	4618      	mov	r0, r3
 8002c42:	f008 f930 	bl	800aea6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	015a      	lsls	r2, r3, #5
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c52:	461a      	mov	r2, r3
 8002c54:	2380      	movs	r3, #128	; 0x80
 8002c56:	6093      	str	r3, [r2, #8]
}
 8002c58:	e087      	b.n	8002d6a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	015a      	lsls	r2, r3, #5
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	4413      	add	r3, r2
 8002c62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 0310 	and.w	r3, r3, #16
 8002c6c:	2b10      	cmp	r3, #16
 8002c6e:	d17c      	bne.n	8002d6a <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	4613      	mov	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	440b      	add	r3, r1
 8002c7e:	333f      	adds	r3, #63	; 0x3f
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b03      	cmp	r3, #3
 8002c84:	d122      	bne.n	8002ccc <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	440b      	add	r3, r1
 8002c94:	3358      	adds	r3, #88	; 0x58
 8002c96:	2200      	movs	r2, #0
 8002c98:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	015a      	lsls	r2, r3, #5
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	0151      	lsls	r1, r2, #5
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	440a      	add	r2, r1
 8002cb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cb4:	f043 0302 	orr.w	r3, r3, #2
 8002cb8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f008 f8ee 	bl	800aea6 <USB_HC_Halt>
 8002cca:	e045      	b.n	8002d58 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	440b      	add	r3, r1
 8002cda:	333f      	adds	r3, #63	; 0x3f
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00a      	beq.n	8002cf8 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	440b      	add	r3, r1
 8002cf0:	333f      	adds	r3, #63	; 0x3f
 8002cf2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d12f      	bne.n	8002d58 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	440b      	add	r3, r1
 8002d06:	3358      	adds	r3, #88	; 0x58
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d121      	bne.n	8002d58 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	440b      	add	r3, r1
 8002d22:	335d      	adds	r3, #93	; 0x5d
 8002d24:	2203      	movs	r2, #3
 8002d26:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	015a      	lsls	r2, r3, #5
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	4413      	add	r3, r2
 8002d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	0151      	lsls	r1, r2, #5
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	440a      	add	r2, r1
 8002d3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d42:	f043 0302 	orr.w	r3, r3, #2
 8002d46:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	b2d2      	uxtb	r2, r2
 8002d50:	4611      	mov	r1, r2
 8002d52:	4618      	mov	r0, r3
 8002d54:	f008 f8a7 	bl	800aea6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	015a      	lsls	r2, r3, #5
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	4413      	add	r3, r2
 8002d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d64:	461a      	mov	r2, r3
 8002d66:	2310      	movs	r3, #16
 8002d68:	6093      	str	r3, [r2, #8]
}
 8002d6a:	bf00      	nop
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b086      	sub	sp, #24
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002d88:	78fb      	ldrb	r3, [r7, #3]
 8002d8a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	015a      	lsls	r2, r3, #5
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 0304 	and.w	r3, r3, #4
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d119      	bne.n	8002dd6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	015a      	lsls	r2, r3, #5
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dae:	461a      	mov	r2, r3
 8002db0:	2304      	movs	r3, #4
 8002db2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	015a      	lsls	r2, r3, #5
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	0151      	lsls	r1, r2, #5
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	440a      	add	r2, r1
 8002dca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dce:	f043 0302 	orr.w	r3, r3, #2
 8002dd2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002dd4:	e33e      	b.n	8003454 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	015a      	lsls	r2, r3, #5
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 0320 	and.w	r3, r3, #32
 8002de8:	2b20      	cmp	r3, #32
 8002dea:	d141      	bne.n	8002e70 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	015a      	lsls	r2, r3, #5
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	4413      	add	r3, r2
 8002df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df8:	461a      	mov	r2, r3
 8002dfa:	2320      	movs	r3, #32
 8002dfc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	440b      	add	r3, r1
 8002e0c:	333d      	adds	r3, #61	; 0x3d
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	f040 831f 	bne.w	8003454 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	440b      	add	r3, r1
 8002e24:	333d      	adds	r3, #61	; 0x3d
 8002e26:	2200      	movs	r2, #0
 8002e28:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	4413      	add	r3, r2
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	440b      	add	r3, r1
 8002e38:	335c      	adds	r3, #92	; 0x5c
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	015a      	lsls	r2, r3, #5
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	0151      	lsls	r1, r2, #5
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	440a      	add	r2, r1
 8002e54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e58:	f043 0302 	orr.w	r3, r3, #2
 8002e5c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	4611      	mov	r1, r2
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f008 f81c 	bl	800aea6 <USB_HC_Halt>
}
 8002e6e:	e2f1      	b.n	8003454 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	015a      	lsls	r2, r3, #5
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	4413      	add	r3, r2
 8002e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e82:	2b40      	cmp	r3, #64	; 0x40
 8002e84:	d13f      	bne.n	8002f06 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	440b      	add	r3, r1
 8002e94:	335d      	adds	r3, #93	; 0x5d
 8002e96:	2204      	movs	r2, #4
 8002e98:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	440b      	add	r3, r1
 8002ea8:	333d      	adds	r3, #61	; 0x3d
 8002eaa:	2201      	movs	r2, #1
 8002eac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002eae:	6879      	ldr	r1, [r7, #4]
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	440b      	add	r3, r1
 8002ebc:	3358      	adds	r3, #88	; 0x58
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	015a      	lsls	r2, r3, #5
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	4413      	add	r3, r2
 8002eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	0151      	lsls	r1, r2, #5
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	440a      	add	r2, r1
 8002ed8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002edc:	f043 0302 	orr.w	r3, r3, #2
 8002ee0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	b2d2      	uxtb	r2, r2
 8002eea:	4611      	mov	r1, r2
 8002eec:	4618      	mov	r0, r3
 8002eee:	f007 ffda 	bl	800aea6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	015a      	lsls	r2, r3, #5
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	4413      	add	r3, r2
 8002efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002efe:	461a      	mov	r2, r3
 8002f00:	2340      	movs	r3, #64	; 0x40
 8002f02:	6093      	str	r3, [r2, #8]
}
 8002f04:	e2a6      	b.n	8003454 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	015a      	lsls	r2, r3, #5
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f1c:	d122      	bne.n	8002f64 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	015a      	lsls	r2, r3, #5
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	4413      	add	r3, r2
 8002f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	0151      	lsls	r1, r2, #5
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	440a      	add	r2, r1
 8002f34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f38:	f043 0302 	orr.w	r3, r3, #2
 8002f3c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	4611      	mov	r1, r2
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f007 ffac 	bl	800aea6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	015a      	lsls	r2, r3, #5
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	4413      	add	r3, r2
 8002f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f60:	6093      	str	r3, [r2, #8]
}
 8002f62:	e277      	b.n	8003454 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	015a      	lsls	r2, r3, #5
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d135      	bne.n	8002fe6 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	440b      	add	r3, r1
 8002f88:	3358      	adds	r3, #88	; 0x58
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	015a      	lsls	r2, r3, #5
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	4413      	add	r3, r2
 8002f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	0151      	lsls	r1, r2, #5
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	440a      	add	r2, r1
 8002fa4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fa8:	f043 0302 	orr.w	r3, r3, #2
 8002fac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	b2d2      	uxtb	r2, r2
 8002fb6:	4611      	mov	r1, r2
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f007 ff74 	bl	800aea6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	015a      	lsls	r2, r3, #5
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fca:	461a      	mov	r2, r3
 8002fcc:	2301      	movs	r3, #1
 8002fce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	440b      	add	r3, r1
 8002fde:	335d      	adds	r3, #93	; 0x5d
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	701a      	strb	r2, [r3, #0]
}
 8002fe4:	e236      	b.n	8003454 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	015a      	lsls	r2, r3, #5
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	4413      	add	r3, r2
 8002fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 0308 	and.w	r3, r3, #8
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d12b      	bne.n	8003054 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	015a      	lsls	r2, r3, #5
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	4413      	add	r3, r2
 8003004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003008:	461a      	mov	r2, r3
 800300a:	2308      	movs	r3, #8
 800300c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	015a      	lsls	r2, r3, #5
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	4413      	add	r3, r2
 8003016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	0151      	lsls	r1, r2, #5
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	440a      	add	r2, r1
 8003024:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003028:	f043 0302 	orr.w	r3, r3, #2
 800302c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	4611      	mov	r1, r2
 8003038:	4618      	mov	r0, r3
 800303a:	f007 ff34 	bl	800aea6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	4613      	mov	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	440b      	add	r3, r1
 800304c:	335d      	adds	r3, #93	; 0x5d
 800304e:	2205      	movs	r2, #5
 8003050:	701a      	strb	r2, [r3, #0]
}
 8003052:	e1ff      	b.n	8003454 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4413      	add	r3, r2
 800305c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 0310 	and.w	r3, r3, #16
 8003066:	2b10      	cmp	r3, #16
 8003068:	d155      	bne.n	8003116 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	440b      	add	r3, r1
 8003078:	3358      	adds	r3, #88	; 0x58
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	4613      	mov	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	440b      	add	r3, r1
 800308c:	335d      	adds	r3, #93	; 0x5d
 800308e:	2203      	movs	r2, #3
 8003090:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	4613      	mov	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	440b      	add	r3, r1
 80030a0:	333d      	adds	r3, #61	; 0x3d
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d114      	bne.n	80030d2 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	4613      	mov	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	440b      	add	r3, r1
 80030b6:	333c      	adds	r3, #60	; 0x3c
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d109      	bne.n	80030d2 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	4613      	mov	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4413      	add	r3, r2
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	440b      	add	r3, r1
 80030cc:	333d      	adds	r3, #61	; 0x3d
 80030ce:	2201      	movs	r2, #1
 80030d0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	015a      	lsls	r2, r3, #5
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	4413      	add	r3, r2
 80030da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	0151      	lsls	r1, r2, #5
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	440a      	add	r2, r1
 80030e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030ec:	f043 0302 	orr.w	r3, r3, #2
 80030f0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	4611      	mov	r1, r2
 80030fc:	4618      	mov	r0, r3
 80030fe:	f007 fed2 	bl	800aea6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	015a      	lsls	r2, r3, #5
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4413      	add	r3, r2
 800310a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310e:	461a      	mov	r2, r3
 8003110:	2310      	movs	r3, #16
 8003112:	6093      	str	r3, [r2, #8]
}
 8003114:	e19e      	b.n	8003454 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	015a      	lsls	r2, r3, #5
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	4413      	add	r3, r2
 800311e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003128:	2b80      	cmp	r3, #128	; 0x80
 800312a:	d12b      	bne.n	8003184 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	015a      	lsls	r2, r3, #5
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4413      	add	r3, r2
 8003134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	0151      	lsls	r1, r2, #5
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	440a      	add	r2, r1
 8003142:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003146:	f043 0302 	orr.w	r3, r3, #2
 800314a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	4611      	mov	r1, r2
 8003156:	4618      	mov	r0, r3
 8003158:	f007 fea5 	bl	800aea6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	4613      	mov	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	440b      	add	r3, r1
 800316a:	335d      	adds	r3, #93	; 0x5d
 800316c:	2206      	movs	r2, #6
 800316e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	015a      	lsls	r2, r3, #5
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	4413      	add	r3, r2
 8003178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800317c:	461a      	mov	r2, r3
 800317e:	2380      	movs	r3, #128	; 0x80
 8003180:	6093      	str	r3, [r2, #8]
}
 8003182:	e167      	b.n	8003454 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	015a      	lsls	r2, r3, #5
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	4413      	add	r3, r2
 800318c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800319a:	d135      	bne.n	8003208 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	015a      	lsls	r2, r3, #5
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	4413      	add	r3, r2
 80031a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	0151      	lsls	r1, r2, #5
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	440a      	add	r2, r1
 80031b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031b6:	f043 0302 	orr.w	r3, r3, #2
 80031ba:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	4611      	mov	r1, r2
 80031c6:	4618      	mov	r0, r3
 80031c8:	f007 fe6d 	bl	800aea6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	015a      	lsls	r2, r3, #5
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d8:	461a      	mov	r2, r3
 80031da:	2310      	movs	r3, #16
 80031dc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	015a      	lsls	r2, r3, #5
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	4413      	add	r3, r2
 80031e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ea:	461a      	mov	r2, r3
 80031ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	4613      	mov	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	440b      	add	r3, r1
 8003200:	335d      	adds	r3, #93	; 0x5d
 8003202:	2208      	movs	r2, #8
 8003204:	701a      	strb	r2, [r3, #0]
}
 8003206:	e125      	b.n	8003454 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	015a      	lsls	r2, r3, #5
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	4413      	add	r3, r2
 8003210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b02      	cmp	r3, #2
 800321c:	f040 811a 	bne.w	8003454 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	015a      	lsls	r2, r3, #5
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	4413      	add	r3, r2
 8003228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	0151      	lsls	r1, r2, #5
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	440a      	add	r2, r1
 8003236:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800323a:	f023 0302 	bic.w	r3, r3, #2
 800323e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	4613      	mov	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	440b      	add	r3, r1
 800324e:	335d      	adds	r3, #93	; 0x5d
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d137      	bne.n	80032c6 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	4613      	mov	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	440b      	add	r3, r1
 8003264:	335c      	adds	r3, #92	; 0x5c
 8003266:	2201      	movs	r2, #1
 8003268:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	4613      	mov	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	440b      	add	r3, r1
 8003278:	333f      	adds	r3, #63	; 0x3f
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b02      	cmp	r3, #2
 800327e:	d00b      	beq.n	8003298 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	4613      	mov	r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	440b      	add	r3, r1
 800328e:	333f      	adds	r3, #63	; 0x3f
 8003290:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003292:	2b03      	cmp	r3, #3
 8003294:	f040 80c5 	bne.w	8003422 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	4613      	mov	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	440b      	add	r3, r1
 80032a6:	3351      	adds	r3, #81	; 0x51
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	f083 0301 	eor.w	r3, r3, #1
 80032ae:	b2d8      	uxtb	r0, r3
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	4613      	mov	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	440b      	add	r3, r1
 80032be:	3351      	adds	r3, #81	; 0x51
 80032c0:	4602      	mov	r2, r0
 80032c2:	701a      	strb	r2, [r3, #0]
 80032c4:	e0ad      	b.n	8003422 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4613      	mov	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	440b      	add	r3, r1
 80032d4:	335d      	adds	r3, #93	; 0x5d
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	2b03      	cmp	r3, #3
 80032da:	d10a      	bne.n	80032f2 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	4613      	mov	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	440b      	add	r3, r1
 80032ea:	335c      	adds	r3, #92	; 0x5c
 80032ec:	2202      	movs	r2, #2
 80032ee:	701a      	strb	r2, [r3, #0]
 80032f0:	e097      	b.n	8003422 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	4613      	mov	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	440b      	add	r3, r1
 8003300:	335d      	adds	r3, #93	; 0x5d
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	2b04      	cmp	r3, #4
 8003306:	d10a      	bne.n	800331e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	4613      	mov	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4413      	add	r3, r2
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	440b      	add	r3, r1
 8003316:	335c      	adds	r3, #92	; 0x5c
 8003318:	2202      	movs	r2, #2
 800331a:	701a      	strb	r2, [r3, #0]
 800331c:	e081      	b.n	8003422 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	4613      	mov	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	440b      	add	r3, r1
 800332c:	335d      	adds	r3, #93	; 0x5d
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b05      	cmp	r3, #5
 8003332:	d10a      	bne.n	800334a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003334:	6879      	ldr	r1, [r7, #4]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	4613      	mov	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	440b      	add	r3, r1
 8003342:	335c      	adds	r3, #92	; 0x5c
 8003344:	2205      	movs	r2, #5
 8003346:	701a      	strb	r2, [r3, #0]
 8003348:	e06b      	b.n	8003422 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	4613      	mov	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4413      	add	r3, r2
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	440b      	add	r3, r1
 8003358:	335d      	adds	r3, #93	; 0x5d
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b06      	cmp	r3, #6
 800335e:	d00a      	beq.n	8003376 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	4613      	mov	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	440b      	add	r3, r1
 800336e:	335d      	adds	r3, #93	; 0x5d
 8003370:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003372:	2b08      	cmp	r3, #8
 8003374:	d155      	bne.n	8003422 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	4613      	mov	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	440b      	add	r3, r1
 8003384:	3358      	adds	r3, #88	; 0x58
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	1c59      	adds	r1, r3, #1
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	4613      	mov	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	4403      	add	r3, r0
 8003398:	3358      	adds	r3, #88	; 0x58
 800339a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800339c:	6879      	ldr	r1, [r7, #4]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	4613      	mov	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	440b      	add	r3, r1
 80033aa:	3358      	adds	r3, #88	; 0x58
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2b03      	cmp	r3, #3
 80033b0:	d914      	bls.n	80033dc <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	4613      	mov	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4413      	add	r3, r2
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	440b      	add	r3, r1
 80033c0:	3358      	adds	r3, #88	; 0x58
 80033c2:	2200      	movs	r2, #0
 80033c4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	4613      	mov	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	440b      	add	r3, r1
 80033d4:	335c      	adds	r3, #92	; 0x5c
 80033d6:	2204      	movs	r2, #4
 80033d8:	701a      	strb	r2, [r3, #0]
 80033da:	e009      	b.n	80033f0 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	440b      	add	r3, r1
 80033ea:	335c      	adds	r3, #92	; 0x5c
 80033ec:	2202      	movs	r2, #2
 80033ee:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	015a      	lsls	r2, r3, #5
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003406:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800340e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	015a      	lsls	r2, r3, #5
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	4413      	add	r3, r2
 8003418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800341c:	461a      	mov	r2, r3
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	015a      	lsls	r2, r3, #5
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	4413      	add	r3, r2
 800342a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800342e:	461a      	mov	r2, r3
 8003430:	2302      	movs	r3, #2
 8003432:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	b2d8      	uxtb	r0, r3
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	4613      	mov	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	440b      	add	r3, r1
 8003446:	335c      	adds	r3, #92	; 0x5c
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	461a      	mov	r2, r3
 800344c:	4601      	mov	r1, r0
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f012 feca 	bl	80161e8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003454:	bf00      	nop
 8003456:	3718      	adds	r7, #24
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08a      	sub	sp, #40	; 0x28
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	f003 030f 	and.w	r3, r3, #15
 800347c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	0c5b      	lsrs	r3, r3, #17
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	091b      	lsrs	r3, r3, #4
 800348c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003490:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2b02      	cmp	r3, #2
 8003496:	d004      	beq.n	80034a2 <HCD_RXQLVL_IRQHandler+0x46>
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	2b05      	cmp	r3, #5
 800349c:	f000 8082 	beq.w	80035a4 <HCD_RXQLVL_IRQHandler+0x148>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80034a0:	e083      	b.n	80035aa <HCD_RXQLVL_IRQHandler+0x14e>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d07f      	beq.n	80035a8 <HCD_RXQLVL_IRQHandler+0x14c>
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4613      	mov	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	440b      	add	r3, r1
 80034b6:	3344      	adds	r3, #68	; 0x44
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d074      	beq.n	80035a8 <HCD_RXQLVL_IRQHandler+0x14c>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6818      	ldr	r0, [r3, #0]
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4613      	mov	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4413      	add	r3, r2
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	440b      	add	r3, r1
 80034d0:	3344      	adds	r3, #68	; 0x44
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	b292      	uxth	r2, r2
 80034d8:	4619      	mov	r1, r3
 80034da:	f007 f892 	bl	800a602 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	4613      	mov	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4413      	add	r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	440b      	add	r3, r1
 80034ec:	3344      	adds	r3, #68	; 0x44
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	18d1      	adds	r1, r2, r3
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	4613      	mov	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	4403      	add	r3, r0
 8003502:	3344      	adds	r3, #68	; 0x44
 8003504:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4613      	mov	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4413      	add	r3, r2
 8003510:	00db      	lsls	r3, r3, #3
 8003512:	440b      	add	r3, r1
 8003514:	334c      	adds	r3, #76	; 0x4c
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	18d1      	adds	r1, r2, r3
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4613      	mov	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	4403      	add	r3, r0
 800352a:	334c      	adds	r3, #76	; 0x4c
 800352c:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	015a      	lsls	r2, r3, #5
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	4413      	add	r3, r2
 8003536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800353a:	691a      	ldr	r2, [r3, #16]
 800353c:	4b1d      	ldr	r3, [pc, #116]	; (80035b4 <HCD_RXQLVL_IRQHandler+0x158>)
 800353e:	4013      	ands	r3, r2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d031      	beq.n	80035a8 <HCD_RXQLVL_IRQHandler+0x14c>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	015a      	lsls	r2, r3, #5
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	4413      	add	r3, r2
 800354c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800355a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003562:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	015a      	lsls	r2, r3, #5
 8003568:	6a3b      	ldr	r3, [r7, #32]
 800356a:	4413      	add	r3, r2
 800356c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003570:	461a      	mov	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	4613      	mov	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	4413      	add	r3, r2
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	440b      	add	r3, r1
 8003584:	3350      	adds	r3, #80	; 0x50
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	f083 0301 	eor.w	r3, r3, #1
 800358c:	b2d8      	uxtb	r0, r3
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	4613      	mov	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	440b      	add	r3, r1
 800359c:	3350      	adds	r3, #80	; 0x50
 800359e:	4602      	mov	r2, r0
 80035a0:	701a      	strb	r2, [r3, #0]
      break;
 80035a2:	e001      	b.n	80035a8 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80035a4:	bf00      	nop
 80035a6:	e000      	b.n	80035aa <HCD_RXQLVL_IRQHandler+0x14e>
      break;
 80035a8:	bf00      	nop
  }
}
 80035aa:	bf00      	nop
 80035ac:	3728      	adds	r7, #40	; 0x28
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	1ff80000 	.word	0x1ff80000

080035b8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80035e4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d113      	bne.n	8003618 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d10a      	bne.n	8003610 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	699a      	ldr	r2, [r3, #24]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003608:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f012 fdd0 	bl	80161b0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	f043 0302 	orr.w	r3, r3, #2
 8003616:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b08      	cmp	r3, #8
 8003620:	d147      	bne.n	80036b2 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	f043 0308 	orr.w	r3, r3, #8
 8003628:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b04      	cmp	r3, #4
 8003632:	d129      	bne.n	8003688 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	2b02      	cmp	r3, #2
 800363a:	d113      	bne.n	8003664 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003642:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003646:	d106      	bne.n	8003656 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2102      	movs	r1, #2
 800364e:	4618      	mov	r0, r3
 8003650:	f007 f906 	bl	800a860 <USB_InitFSLSPClkSel>
 8003654:	e011      	b.n	800367a <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2101      	movs	r1, #1
 800365c:	4618      	mov	r0, r3
 800365e:	f007 f8ff 	bl	800a860 <USB_InitFSLSPClkSel>
 8003662:	e00a      	b.n	800367a <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	2b03      	cmp	r3, #3
 800366a:	d106      	bne.n	800367a <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003672:	461a      	mov	r2, r3
 8003674:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003678:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f012 fdc6 	bl	801620c <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f012 fd95 	bl	80161b0 <HAL_HCD_Connect_Callback>
 8003686:	e014      	b.n	80036b2 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f012 fdcd 	bl	8016228 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800369c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80036a0:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	699a      	ldr	r2, [r3, #24]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80036b0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f003 0320 	and.w	r3, r3, #32
 80036b8:	2b20      	cmp	r3, #32
 80036ba:	d103      	bne.n	80036c4 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f043 0320 	orr.w	r3, r3, #32
 80036c2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036ca:	461a      	mov	r2, r3
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	6013      	str	r3, [r2, #0]
}
 80036d0:	bf00      	nop
 80036d2:	3718      	adds	r7, #24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e07f      	b.n	80037ea <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d106      	bne.n	8003704 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f011 fd60 	bl	80151c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2224      	movs	r2, #36	; 0x24
 8003708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0201 	bic.w	r2, r2, #1
 800371a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003728:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003738:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d107      	bne.n	8003752 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689a      	ldr	r2, [r3, #8]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800374e:	609a      	str	r2, [r3, #8]
 8003750:	e006      	b.n	8003760 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689a      	ldr	r2, [r3, #8]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800375e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	2b02      	cmp	r3, #2
 8003766:	d104      	bne.n	8003772 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003770:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6859      	ldr	r1, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	4b1d      	ldr	r3, [pc, #116]	; (80037f4 <HAL_I2C_Init+0x11c>)
 800377e:	430b      	orrs	r3, r1
 8003780:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003790:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691a      	ldr	r2, [r3, #16]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	ea42 0103 	orr.w	r1, r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	021a      	lsls	r2, r3, #8
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	69d9      	ldr	r1, [r3, #28]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a1a      	ldr	r2, [r3, #32]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f042 0201 	orr.w	r2, r2, #1
 80037ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2220      	movs	r2, #32
 80037d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	02008000 	.word	0x02008000

080037f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b20      	cmp	r3, #32
 800380c:	d138      	bne.n	8003880 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003818:	2302      	movs	r3, #2
 800381a:	e032      	b.n	8003882 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2224      	movs	r2, #36	; 0x24
 8003828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0201 	bic.w	r2, r2, #1
 800383a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800384a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6819      	ldr	r1, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0201 	orr.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2220      	movs	r2, #32
 8003870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800387c:	2300      	movs	r3, #0
 800387e:	e000      	b.n	8003882 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003880:	2302      	movs	r3, #2
  }
}
 8003882:	4618      	mov	r0, r3
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800388e:	b480      	push	{r7}
 8003890:	b085      	sub	sp, #20
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
 8003896:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b20      	cmp	r3, #32
 80038a2:	d139      	bne.n	8003918 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d101      	bne.n	80038b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038ae:	2302      	movs	r3, #2
 80038b0:	e033      	b.n	800391a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2224      	movs	r2, #36	; 0x24
 80038be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 0201 	bic.w	r2, r2, #1
 80038d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	021b      	lsls	r3, r3, #8
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0201 	orr.w	r2, r2, #1
 8003902:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003914:	2300      	movs	r3, #0
 8003916:	e000      	b.n	800391a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003918:	2302      	movs	r3, #2
  }
}
 800391a:	4618      	mov	r0, r3
 800391c:	3714      	adds	r7, #20
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
	...

08003928 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e0bf      	b.n	8003aba <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d106      	bne.n	8003954 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f011 fcb0 	bl	80152b4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2202      	movs	r2, #2
 8003958:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	699a      	ldr	r2, [r3, #24]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800396a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6999      	ldr	r1, [r3, #24]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003980:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6899      	ldr	r1, [r3, #8]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	4b4a      	ldr	r3, [pc, #296]	; (8003ac4 <HAL_LTDC_Init+0x19c>)
 800399c:	400b      	ands	r3, r1
 800399e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	041b      	lsls	r3, r3, #16
 80039a6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6899      	ldr	r1, [r3, #8]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	699a      	ldr	r2, [r3, #24]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	431a      	orrs	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68d9      	ldr	r1, [r3, #12]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	4b3e      	ldr	r3, [pc, #248]	; (8003ac4 <HAL_LTDC_Init+0x19c>)
 80039ca:	400b      	ands	r3, r1
 80039cc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	041b      	lsls	r3, r3, #16
 80039d4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68d9      	ldr	r1, [r3, #12]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1a      	ldr	r2, [r3, #32]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6919      	ldr	r1, [r3, #16]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	4b33      	ldr	r3, [pc, #204]	; (8003ac4 <HAL_LTDC_Init+0x19c>)
 80039f8:	400b      	ands	r3, r1
 80039fa:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	041b      	lsls	r3, r3, #16
 8003a02:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6919      	ldr	r1, [r3, #16]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	431a      	orrs	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6959      	ldr	r1, [r3, #20]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	4b27      	ldr	r3, [pc, #156]	; (8003ac4 <HAL_LTDC_Init+0x19c>)
 8003a26:	400b      	ands	r3, r1
 8003a28:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2e:	041b      	lsls	r3, r3, #16
 8003a30:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6959      	ldr	r1, [r3, #20]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a4e:	021b      	lsls	r3, r3, #8
 8003a50:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003a58:	041b      	lsls	r3, r3, #16
 8003a5a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003a6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f042 0206 	orr.w	r2, r2, #6
 8003a96:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699a      	ldr	r2, [r3, #24]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 0201 	orr.w	r2, r2, #1
 8003aa6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	f000f800 	.word	0xf000f800

08003ac8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ade:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f003 0304 	and.w	r3, r3, #4
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d023      	beq.n	8003b32 <HAL_LTDC_IRQHandler+0x6a>
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d01e      	beq.n	8003b32 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 0204 	bic.w	r2, r2, #4
 8003b02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2204      	movs	r2, #4
 8003b0a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b12:	f043 0201 	orr.w	r2, r3, #1
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2204      	movs	r2, #4
 8003b20:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f86f 	bl	8003c10 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d023      	beq.n	8003b84 <HAL_LTDC_IRQHandler+0xbc>
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d01e      	beq.n	8003b84 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 0202 	bic.w	r2, r2, #2
 8003b54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b64:	f043 0202 	orr.w	r2, r3, #2
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2204      	movs	r2, #4
 8003b72:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f846 	bl	8003c10 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d01b      	beq.n	8003bc6 <HAL_LTDC_IRQHandler+0xfe>
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d016      	beq.n	8003bc6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0201 	bic.w	r2, r2, #1
 8003ba6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2201      	movs	r2, #1
 8003bae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f82f 	bl	8003c24 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f003 0308 	and.w	r3, r3, #8
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d01b      	beq.n	8003c08 <HAL_LTDC_IRQHandler+0x140>
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f003 0308 	and.w	r3, r3, #8
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d016      	beq.n	8003c08 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0208 	bic.w	r2, r2, #8
 8003be8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2208      	movs	r2, #8
 8003bf0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f818 	bl	8003c38 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003c08:	bf00      	nop
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003c4c:	b5b0      	push	{r4, r5, r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d101      	bne.n	8003c66 <HAL_LTDC_ConfigLayer+0x1a>
 8003c62:	2302      	movs	r3, #2
 8003c64:	e02c      	b.n	8003cc0 <HAL_LTDC_ConfigLayer+0x74>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2202      	movs	r2, #2
 8003c72:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2134      	movs	r1, #52	; 0x34
 8003c7c:	fb01 f303 	mul.w	r3, r1, r3
 8003c80:	4413      	add	r3, r2
 8003c82:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	4614      	mov	r4, r2
 8003c8a:	461d      	mov	r5, r3
 8003c8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c98:	682b      	ldr	r3, [r5, #0]
 8003c9a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	68b9      	ldr	r1, [r7, #8]
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 f811 	bl	8003cc8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2201      	movs	r2, #1
 8003cac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bdb0      	pop	{r4, r5, r7, pc}

08003cc8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b089      	sub	sp, #36	; 0x24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	0c1b      	lsrs	r3, r3, #16
 8003ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ce4:	4413      	add	r3, r2
 8003ce6:	041b      	lsls	r3, r3, #16
 8003ce8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	01db      	lsls	r3, r3, #7
 8003cf4:	4413      	add	r3, r2
 8003cf6:	3384      	adds	r3, #132	; 0x84
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	6812      	ldr	r2, [r2, #0]
 8003cfe:	4611      	mov	r1, r2
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	01d2      	lsls	r2, r2, #7
 8003d04:	440a      	add	r2, r1
 8003d06:	3284      	adds	r2, #132	; 0x84
 8003d08:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003d0c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	0c1b      	lsrs	r3, r3, #16
 8003d1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d1e:	4413      	add	r3, r2
 8003d20:	1c5a      	adds	r2, r3, #1
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4619      	mov	r1, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	01db      	lsls	r3, r3, #7
 8003d2c:	440b      	add	r3, r1
 8003d2e:	3384      	adds	r3, #132	; 0x84
 8003d30:	4619      	mov	r1, r3
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	68da      	ldr	r2, [r3, #12]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d46:	4413      	add	r3, r2
 8003d48:	041b      	lsls	r3, r3, #16
 8003d4a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	461a      	mov	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	01db      	lsls	r3, r3, #7
 8003d56:	4413      	add	r3, r2
 8003d58:	3384      	adds	r3, #132	; 0x84
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	6812      	ldr	r2, [r2, #0]
 8003d60:	4611      	mov	r1, r2
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	01d2      	lsls	r2, r2, #7
 8003d66:	440a      	add	r2, r1
 8003d68:	3284      	adds	r2, #132	; 0x84
 8003d6a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003d6e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d7e:	4413      	add	r3, r2
 8003d80:	1c5a      	adds	r2, r3, #1
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4619      	mov	r1, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	01db      	lsls	r3, r3, #7
 8003d8c:	440b      	add	r3, r1
 8003d8e:	3384      	adds	r3, #132	; 0x84
 8003d90:	4619      	mov	r1, r3
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	01db      	lsls	r3, r3, #7
 8003da2:	4413      	add	r3, r2
 8003da4:	3384      	adds	r3, #132	; 0x84
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	6812      	ldr	r2, [r2, #0]
 8003dac:	4611      	mov	r1, r2
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	01d2      	lsls	r2, r2, #7
 8003db2:	440a      	add	r2, r1
 8003db4:	3284      	adds	r2, #132	; 0x84
 8003db6:	f023 0307 	bic.w	r3, r3, #7
 8003dba:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	01db      	lsls	r3, r3, #7
 8003dc6:	4413      	add	r3, r2
 8003dc8:	3384      	adds	r3, #132	; 0x84
 8003dca:	461a      	mov	r2, r3
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003dd8:	021b      	lsls	r3, r3, #8
 8003dda:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003de2:	041b      	lsls	r3, r3, #16
 8003de4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	061b      	lsls	r3, r3, #24
 8003dec:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	461a      	mov	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	01db      	lsls	r3, r3, #7
 8003df8:	4413      	add	r3, r2
 8003dfa:	3384      	adds	r3, #132	; 0x84
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	461a      	mov	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	01db      	lsls	r3, r3, #7
 8003e08:	4413      	add	r3, r2
 8003e0a:	3384      	adds	r3, #132	; 0x84
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	2300      	movs	r3, #0
 8003e10:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e18:	461a      	mov	r2, r3
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	431a      	orrs	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4619      	mov	r1, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	01db      	lsls	r3, r3, #7
 8003e2c:	440b      	add	r3, r1
 8003e2e:	3384      	adds	r3, #132	; 0x84
 8003e30:	4619      	mov	r1, r3
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	01db      	lsls	r3, r3, #7
 8003e42:	4413      	add	r3, r2
 8003e44:	3384      	adds	r3, #132	; 0x84
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	6812      	ldr	r2, [r2, #0]
 8003e4c:	4611      	mov	r1, r2
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	01d2      	lsls	r2, r2, #7
 8003e52:	440a      	add	r2, r1
 8003e54:	3284      	adds	r2, #132	; 0x84
 8003e56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e5a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	461a      	mov	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	01db      	lsls	r3, r3, #7
 8003e66:	4413      	add	r3, r2
 8003e68:	3384      	adds	r3, #132	; 0x84
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	461a      	mov	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	01db      	lsls	r3, r3, #7
 8003e7c:	4413      	add	r3, r2
 8003e7e:	3384      	adds	r3, #132	; 0x84
 8003e80:	69da      	ldr	r2, [r3, #28]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4619      	mov	r1, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	01db      	lsls	r3, r3, #7
 8003e8c:	440b      	add	r3, r1
 8003e8e:	3384      	adds	r3, #132	; 0x84
 8003e90:	4619      	mov	r1, r3
 8003e92:	4b58      	ldr	r3, [pc, #352]	; (8003ff4 <LTDC_SetConfig+0x32c>)
 8003e94:	4013      	ands	r3, r2
 8003e96:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	69da      	ldr	r2, [r3, #28]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	68f9      	ldr	r1, [r7, #12]
 8003ea2:	6809      	ldr	r1, [r1, #0]
 8003ea4:	4608      	mov	r0, r1
 8003ea6:	6879      	ldr	r1, [r7, #4]
 8003ea8:	01c9      	lsls	r1, r1, #7
 8003eaa:	4401      	add	r1, r0
 8003eac:	3184      	adds	r1, #132	; 0x84
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	01db      	lsls	r3, r3, #7
 8003ebc:	4413      	add	r3, r2
 8003ebe:	3384      	adds	r3, #132	; 0x84
 8003ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	01db      	lsls	r3, r3, #7
 8003ecc:	4413      	add	r3, r2
 8003ece:	3384      	adds	r3, #132	; 0x84
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	461a      	mov	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	01db      	lsls	r3, r3, #7
 8003ee0:	4413      	add	r3, r2
 8003ee2:	3384      	adds	r3, #132	; 0x84
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d102      	bne.n	8003efa <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8003ef4:	2304      	movs	r3, #4
 8003ef6:	61fb      	str	r3, [r7, #28]
 8003ef8:	e01b      	b.n	8003f32 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d102      	bne.n	8003f08 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8003f02:	2303      	movs	r3, #3
 8003f04:	61fb      	str	r3, [r7, #28]
 8003f06:	e014      	b.n	8003f32 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	2b04      	cmp	r3, #4
 8003f0e:	d00b      	beq.n	8003f28 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d007      	beq.n	8003f28 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003f1c:	2b03      	cmp	r3, #3
 8003f1e:	d003      	beq.n	8003f28 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003f24:	2b07      	cmp	r3, #7
 8003f26:	d102      	bne.n	8003f2e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8003f28:	2302      	movs	r3, #2
 8003f2a:	61fb      	str	r3, [r7, #28]
 8003f2c:	e001      	b.n	8003f32 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	461a      	mov	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	01db      	lsls	r3, r3, #7
 8003f3c:	4413      	add	r3, r2
 8003f3e:	3384      	adds	r3, #132	; 0x84
 8003f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	6812      	ldr	r2, [r2, #0]
 8003f46:	4611      	mov	r1, r2
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	01d2      	lsls	r2, r2, #7
 8003f4c:	440a      	add	r2, r1
 8003f4e:	3284      	adds	r2, #132	; 0x84
 8003f50:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003f54:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5a:	69fa      	ldr	r2, [r7, #28]
 8003f5c:	fb02 f303 	mul.w	r3, r2, r3
 8003f60:	041a      	lsls	r2, r3, #16
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	6859      	ldr	r1, [r3, #4]
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	1acb      	subs	r3, r1, r3
 8003f6c:	69f9      	ldr	r1, [r7, #28]
 8003f6e:	fb01 f303 	mul.w	r3, r1, r3
 8003f72:	3303      	adds	r3, #3
 8003f74:	68f9      	ldr	r1, [r7, #12]
 8003f76:	6809      	ldr	r1, [r1, #0]
 8003f78:	4608      	mov	r0, r1
 8003f7a:	6879      	ldr	r1, [r7, #4]
 8003f7c:	01c9      	lsls	r1, r1, #7
 8003f7e:	4401      	add	r1, r0
 8003f80:	3184      	adds	r1, #132	; 0x84
 8003f82:	4313      	orrs	r3, r2
 8003f84:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	01db      	lsls	r3, r3, #7
 8003f90:	4413      	add	r3, r2
 8003f92:	3384      	adds	r3, #132	; 0x84
 8003f94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	01db      	lsls	r3, r3, #7
 8003fa0:	440b      	add	r3, r1
 8003fa2:	3384      	adds	r3, #132	; 0x84
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	4b14      	ldr	r3, [pc, #80]	; (8003ff8 <LTDC_SetConfig+0x330>)
 8003fa8:	4013      	ands	r3, r2
 8003faa:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	01db      	lsls	r3, r3, #7
 8003fb6:	4413      	add	r3, r2
 8003fb8:	3384      	adds	r3, #132	; 0x84
 8003fba:	461a      	mov	r2, r3
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	01db      	lsls	r3, r3, #7
 8003fcc:	4413      	add	r3, r2
 8003fce:	3384      	adds	r3, #132	; 0x84
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	6812      	ldr	r2, [r2, #0]
 8003fd6:	4611      	mov	r1, r2
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	01d2      	lsls	r2, r2, #7
 8003fdc:	440a      	add	r2, r1
 8003fde:	3284      	adds	r2, #132	; 0x84
 8003fe0:	f043 0301 	orr.w	r3, r3, #1
 8003fe4:	6013      	str	r3, [r2, #0]
}
 8003fe6:	bf00      	nop
 8003fe8:	3724      	adds	r7, #36	; 0x24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	fffff8f8 	.word	0xfffff8f8
 8003ff8:	fffff800 	.word	0xfffff800

08003ffc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004000:	4b05      	ldr	r3, [pc, #20]	; (8004018 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a04      	ldr	r2, [pc, #16]	; (8004018 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800400a:	6013      	str	r3, [r2, #0]
}
 800400c:	bf00      	nop
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	40007000 	.word	0x40007000

0800401c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004022:	2300      	movs	r3, #0
 8004024:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004026:	4b23      	ldr	r3, [pc, #140]	; (80040b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	4a22      	ldr	r2, [pc, #136]	; (80040b4 <HAL_PWREx_EnableOverDrive+0x98>)
 800402c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004030:	6413      	str	r3, [r2, #64]	; 0x40
 8004032:	4b20      	ldr	r3, [pc, #128]	; (80040b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800403a:	603b      	str	r3, [r7, #0]
 800403c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800403e:	4b1e      	ldr	r3, [pc, #120]	; (80040b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a1d      	ldr	r2, [pc, #116]	; (80040b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004048:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800404a:	f7fc fa7f 	bl	800054c <HAL_GetTick>
 800404e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004050:	e009      	b.n	8004066 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004052:	f7fc fa7b 	bl	800054c <HAL_GetTick>
 8004056:	4602      	mov	r2, r0
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004060:	d901      	bls.n	8004066 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e022      	b.n	80040ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004066:	4b14      	ldr	r3, [pc, #80]	; (80040b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800406e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004072:	d1ee      	bne.n	8004052 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004074:	4b10      	ldr	r3, [pc, #64]	; (80040b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a0f      	ldr	r2, [pc, #60]	; (80040b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800407a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800407e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004080:	f7fc fa64 	bl	800054c <HAL_GetTick>
 8004084:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004086:	e009      	b.n	800409c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004088:	f7fc fa60 	bl	800054c <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004096:	d901      	bls.n	800409c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e007      	b.n	80040ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800409c:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040a8:	d1ee      	bne.n	8004088 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3708      	adds	r7, #8
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	40023800 	.word	0x40023800
 80040b8:	40007000 	.word	0x40007000

080040bc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af02      	add	r7, sp, #8
 80040c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80040c8:	f7fc fa40 	bl	800054c <HAL_GetTick>
 80040cc:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e073      	b.n	80041c0 <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d101      	bne.n	80040e8 <HAL_QSPI_Init+0x2c>
 80040e4:	2302      	movs	r3, #2
 80040e6:	e06b      	b.n	80041c0 <HAL_QSPI_Init+0x104>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10b      	bne.n	8004114 <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f011 f99d 	bl	8015444 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 800410a:	f241 3188 	movw	r1, #5000	; 0x1388
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f85e 	bl	80041d0 <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	3b01      	subs	r3, #1
 8004124:	021a      	lsls	r2, r3, #8
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	2200      	movs	r2, #0
 8004138:	2120      	movs	r1, #32
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f856 	bl	80041ec <QSPI_WaitFlagStateUntilTimeout>
 8004140:	4603      	mov	r3, r0
 8004142:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8004144:	7bfb      	ldrb	r3, [r7, #15]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d135      	bne.n	80041b6 <HAL_QSPI_Init+0xfa>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	4b1d      	ldr	r3, [pc, #116]	; (80041c8 <HAL_QSPI_Init+0x10c>)
 8004152:	4013      	ands	r3, r2
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	6852      	ldr	r2, [r2, #4]
 8004158:	0611      	lsls	r1, r2, #24
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	68d2      	ldr	r2, [r2, #12]
 800415e:	4311      	orrs	r1, r2
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	69d2      	ldr	r2, [r2, #28]
 8004164:	4311      	orrs	r1, r2
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	6a12      	ldr	r2, [r2, #32]
 800416a:	4311      	orrs	r1, r2
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	6812      	ldr	r2, [r2, #0]
 8004170:	430b      	orrs	r3, r1
 8004172:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	4b14      	ldr	r3, [pc, #80]	; (80041cc <HAL_QSPI_Init+0x110>)
 800417c:	4013      	ands	r3, r2
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6912      	ldr	r2, [r2, #16]
 8004182:	0411      	lsls	r1, r2, #16
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6952      	ldr	r2, [r2, #20]
 8004188:	4311      	orrs	r1, r2
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6992      	ldr	r2, [r2, #24]
 800418e:	4311      	orrs	r1, r2
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	6812      	ldr	r2, [r2, #0]
 8004194:	430b      	orrs	r3, r1
 8004196:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 0201 	orr.w	r2, r2, #1
 80041a6:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80041be:	7bfb      	ldrb	r3, [r7, #15]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	00ffff2f 	.word	0x00ffff2f
 80041cc:	ffe0f8fe 	.word	0xffe0f8fe

080041d0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	649a      	str	r2, [r3, #72]	; 0x48
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	603b      	str	r3, [r7, #0]
 80041f8:	4613      	mov	r3, r2
 80041fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80041fc:	e01a      	b.n	8004234 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004204:	d016      	beq.n	8004234 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d007      	beq.n	800421c <QSPI_WaitFlagStateUntilTimeout+0x30>
 800420c:	f7fc f99e 	bl	800054c <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	429a      	cmp	r2, r3
 800421a:	d20b      	bcs.n	8004234 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2204      	movs	r2, #4
 8004220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004228:	f043 0201 	orr.w	r2, r3, #1
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e00e      	b.n	8004252 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689a      	ldr	r2, [r3, #8]
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	4013      	ands	r3, r2
 800423e:	2b00      	cmp	r3, #0
 8004240:	bf14      	ite	ne
 8004242:	2301      	movne	r3, #1
 8004244:	2300      	moveq	r3, #0
 8004246:	b2db      	uxtb	r3, r3
 8004248:	461a      	mov	r2, r3
 800424a:	79fb      	ldrb	r3, [r7, #7]
 800424c:	429a      	cmp	r2, r3
 800424e:	d1d6      	bne.n	80041fe <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
	...

0800425c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8004264:	2300      	movs	r3, #0
 8004266:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e25c      	b.n	800472c <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	f000 8087 	beq.w	800438e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004280:	4b96      	ldr	r3, [pc, #600]	; (80044dc <HAL_RCC_OscConfig+0x280>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f003 030c 	and.w	r3, r3, #12
 8004288:	2b04      	cmp	r3, #4
 800428a:	d00c      	beq.n	80042a6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800428c:	4b93      	ldr	r3, [pc, #588]	; (80044dc <HAL_RCC_OscConfig+0x280>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f003 030c 	and.w	r3, r3, #12
 8004294:	2b08      	cmp	r3, #8
 8004296:	d112      	bne.n	80042be <HAL_RCC_OscConfig+0x62>
 8004298:	4b90      	ldr	r3, [pc, #576]	; (80044dc <HAL_RCC_OscConfig+0x280>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042a4:	d10b      	bne.n	80042be <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042a6:	4b8d      	ldr	r3, [pc, #564]	; (80044dc <HAL_RCC_OscConfig+0x280>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d06c      	beq.n	800438c <HAL_RCC_OscConfig+0x130>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d168      	bne.n	800438c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e236      	b.n	800472c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042c6:	d106      	bne.n	80042d6 <HAL_RCC_OscConfig+0x7a>
 80042c8:	4b84      	ldr	r3, [pc, #528]	; (80044dc <HAL_RCC_OscConfig+0x280>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a83      	ldr	r2, [pc, #524]	; (80044dc <HAL_RCC_OscConfig+0x280>)
 80042ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d2:	6013      	str	r3, [r2, #0]
 80042d4:	e02e      	b.n	8004334 <HAL_RCC_OscConfig+0xd8>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10c      	bne.n	80042f8 <HAL_RCC_OscConfig+0x9c>
 80042de:	4b7f      	ldr	r3, [pc, #508]	; (80044dc <HAL_RCC_OscConfig+0x280>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a7e      	ldr	r2, [pc, #504]	; (80044dc <HAL_RCC_OscConfig+0x280>)
 80042e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042e8:	6013      	str	r3, [r2, #0]
 80042ea:	4b7c      	ldr	r3, [pc, #496]	; (80044dc <HAL_RCC_OscConfig+0x280>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a7b      	ldr	r2, [pc, #492]	; (80044dc <HAL_RCC_OscConfig+0x280>)
 80042f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	e01d      	b.n	8004334 <HAL_RCC_OscConfig+0xd8>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004300:	d10c      	bne.n	800431c <HAL_RCC_OscConfig+0xc0>
 8004302:	4b76      	ldr	r3, [pc, #472]	; (80044dc <HAL_RCC_OscConfig+0x280>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a75      	ldr	r2, [pc, #468]	; (80044dc <HAL_RCC_OscConfig+0x280>)
 8004308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	4b73      	ldr	r3, [pc, #460]	; (80044dc <HAL_RCC_OscConfig+0x280>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a72      	ldr	r2, [pc, #456]	; (80044dc <HAL_RCC_OscConfig+0x280>)
 8004314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004318:	6013      	str	r3, [r2, #0]
 800431a:	e00b      	b.n	8004334 <HAL_RCC_OscConfig+0xd8>
 800431c:	4b6f      	ldr	r3, [pc, #444]	; (80044dc <HAL_RCC_OscConfig+0x280>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a6e      	ldr	r2, [pc, #440]	; (80044dc <HAL_RCC_OscConfig+0x280>)
 8004322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004326:	6013      	str	r3, [r2, #0]
 8004328:	4b6c      	ldr	r3, [pc, #432]	; (80044dc <HAL_RCC_OscConfig+0x280>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a6b      	ldr	r2, [pc, #428]	; (80044dc <HAL_RCC_OscConfig+0x280>)
 800432e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004332:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d013      	beq.n	8004364 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433c:	f7fc f906 	bl	800054c <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004344:	f7fc f902 	bl	800054c <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b64      	cmp	r3, #100	; 0x64
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e1ea      	b.n	800472c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004356:	4b61      	ldr	r3, [pc, #388]	; (80044dc <HAL_RCC_OscConfig+0x280>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0f0      	beq.n	8004344 <HAL_RCC_OscConfig+0xe8>
 8004362:	e014      	b.n	800438e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004364:	f7fc f8f2 	bl	800054c <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800436c:	f7fc f8ee 	bl	800054c <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b64      	cmp	r3, #100	; 0x64
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e1d6      	b.n	800472c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800437e:	4b57      	ldr	r3, [pc, #348]	; (80044dc <HAL_RCC_OscConfig+0x280>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1f0      	bne.n	800436c <HAL_RCC_OscConfig+0x110>
 800438a:	e000      	b.n	800438e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800438c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d069      	beq.n	800446e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800439a:	4b50      	ldr	r3, [pc, #320]	; (80044dc <HAL_RCC_OscConfig+0x280>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 030c 	and.w	r3, r3, #12
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00b      	beq.n	80043be <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043a6:	4b4d      	ldr	r3, [pc, #308]	; (80044dc <HAL_RCC_OscConfig+0x280>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 030c 	and.w	r3, r3, #12
 80043ae:	2b08      	cmp	r3, #8
 80043b0:	d11c      	bne.n	80043ec <HAL_RCC_OscConfig+0x190>
 80043b2:	4b4a      	ldr	r3, [pc, #296]	; (80044dc <HAL_RCC_OscConfig+0x280>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d116      	bne.n	80043ec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043be:	4b47      	ldr	r3, [pc, #284]	; (80044dc <HAL_RCC_OscConfig+0x280>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d005      	beq.n	80043d6 <HAL_RCC_OscConfig+0x17a>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d001      	beq.n	80043d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e1aa      	b.n	800472c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043d6:	4b41      	ldr	r3, [pc, #260]	; (80044dc <HAL_RCC_OscConfig+0x280>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	493d      	ldr	r1, [pc, #244]	; (80044dc <HAL_RCC_OscConfig+0x280>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ea:	e040      	b.n	800446e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d023      	beq.n	800443c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043f4:	4b39      	ldr	r3, [pc, #228]	; (80044dc <HAL_RCC_OscConfig+0x280>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a38      	ldr	r2, [pc, #224]	; (80044dc <HAL_RCC_OscConfig+0x280>)
 80043fa:	f043 0301 	orr.w	r3, r3, #1
 80043fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004400:	f7fc f8a4 	bl	800054c <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004408:	f7fc f8a0 	bl	800054c <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e188      	b.n	800472c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800441a:	4b30      	ldr	r3, [pc, #192]	; (80044dc <HAL_RCC_OscConfig+0x280>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0f0      	beq.n	8004408 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004426:	4b2d      	ldr	r3, [pc, #180]	; (80044dc <HAL_RCC_OscConfig+0x280>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	00db      	lsls	r3, r3, #3
 8004434:	4929      	ldr	r1, [pc, #164]	; (80044dc <HAL_RCC_OscConfig+0x280>)
 8004436:	4313      	orrs	r3, r2
 8004438:	600b      	str	r3, [r1, #0]
 800443a:	e018      	b.n	800446e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800443c:	4b27      	ldr	r3, [pc, #156]	; (80044dc <HAL_RCC_OscConfig+0x280>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a26      	ldr	r2, [pc, #152]	; (80044dc <HAL_RCC_OscConfig+0x280>)
 8004442:	f023 0301 	bic.w	r3, r3, #1
 8004446:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004448:	f7fc f880 	bl	800054c <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004450:	f7fc f87c 	bl	800054c <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b02      	cmp	r3, #2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e164      	b.n	800472c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004462:	4b1e      	ldr	r3, [pc, #120]	; (80044dc <HAL_RCC_OscConfig+0x280>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1f0      	bne.n	8004450 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0308 	and.w	r3, r3, #8
 8004476:	2b00      	cmp	r3, #0
 8004478:	d038      	beq.n	80044ec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d019      	beq.n	80044b6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004482:	4b16      	ldr	r3, [pc, #88]	; (80044dc <HAL_RCC_OscConfig+0x280>)
 8004484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004486:	4a15      	ldr	r2, [pc, #84]	; (80044dc <HAL_RCC_OscConfig+0x280>)
 8004488:	f043 0301 	orr.w	r3, r3, #1
 800448c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800448e:	f7fc f85d 	bl	800054c <HAL_GetTick>
 8004492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004494:	e008      	b.n	80044a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004496:	f7fc f859 	bl	800054c <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e141      	b.n	800472c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044a8:	4b0c      	ldr	r3, [pc, #48]	; (80044dc <HAL_RCC_OscConfig+0x280>)
 80044aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0f0      	beq.n	8004496 <HAL_RCC_OscConfig+0x23a>
 80044b4:	e01a      	b.n	80044ec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044b6:	4b09      	ldr	r3, [pc, #36]	; (80044dc <HAL_RCC_OscConfig+0x280>)
 80044b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ba:	4a08      	ldr	r2, [pc, #32]	; (80044dc <HAL_RCC_OscConfig+0x280>)
 80044bc:	f023 0301 	bic.w	r3, r3, #1
 80044c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044c2:	f7fc f843 	bl	800054c <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044c8:	e00a      	b.n	80044e0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044ca:	f7fc f83f 	bl	800054c <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d903      	bls.n	80044e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e127      	b.n	800472c <HAL_RCC_OscConfig+0x4d0>
 80044dc:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044e0:	4b94      	ldr	r3, [pc, #592]	; (8004734 <HAL_RCC_OscConfig+0x4d8>)
 80044e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1ee      	bne.n	80044ca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0304 	and.w	r3, r3, #4
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 80a4 	beq.w	8004642 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044fa:	4b8e      	ldr	r3, [pc, #568]	; (8004734 <HAL_RCC_OscConfig+0x4d8>)
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10d      	bne.n	8004522 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004506:	4b8b      	ldr	r3, [pc, #556]	; (8004734 <HAL_RCC_OscConfig+0x4d8>)
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	4a8a      	ldr	r2, [pc, #552]	; (8004734 <HAL_RCC_OscConfig+0x4d8>)
 800450c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004510:	6413      	str	r3, [r2, #64]	; 0x40
 8004512:	4b88      	ldr	r3, [pc, #544]	; (8004734 <HAL_RCC_OscConfig+0x4d8>)
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451a:	60fb      	str	r3, [r7, #12]
 800451c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800451e:	2301      	movs	r3, #1
 8004520:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004522:	4b85      	ldr	r3, [pc, #532]	; (8004738 <HAL_RCC_OscConfig+0x4dc>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452a:	2b00      	cmp	r3, #0
 800452c:	d118      	bne.n	8004560 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800452e:	4b82      	ldr	r3, [pc, #520]	; (8004738 <HAL_RCC_OscConfig+0x4dc>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a81      	ldr	r2, [pc, #516]	; (8004738 <HAL_RCC_OscConfig+0x4dc>)
 8004534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800453a:	f7fc f807 	bl	800054c <HAL_GetTick>
 800453e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004540:	e008      	b.n	8004554 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004542:	f7fc f803 	bl	800054c <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b64      	cmp	r3, #100	; 0x64
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e0eb      	b.n	800472c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004554:	4b78      	ldr	r3, [pc, #480]	; (8004738 <HAL_RCC_OscConfig+0x4dc>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0f0      	beq.n	8004542 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d106      	bne.n	8004576 <HAL_RCC_OscConfig+0x31a>
 8004568:	4b72      	ldr	r3, [pc, #456]	; (8004734 <HAL_RCC_OscConfig+0x4d8>)
 800456a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456c:	4a71      	ldr	r2, [pc, #452]	; (8004734 <HAL_RCC_OscConfig+0x4d8>)
 800456e:	f043 0301 	orr.w	r3, r3, #1
 8004572:	6713      	str	r3, [r2, #112]	; 0x70
 8004574:	e02d      	b.n	80045d2 <HAL_RCC_OscConfig+0x376>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10c      	bne.n	8004598 <HAL_RCC_OscConfig+0x33c>
 800457e:	4b6d      	ldr	r3, [pc, #436]	; (8004734 <HAL_RCC_OscConfig+0x4d8>)
 8004580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004582:	4a6c      	ldr	r2, [pc, #432]	; (8004734 <HAL_RCC_OscConfig+0x4d8>)
 8004584:	f023 0301 	bic.w	r3, r3, #1
 8004588:	6713      	str	r3, [r2, #112]	; 0x70
 800458a:	4b6a      	ldr	r3, [pc, #424]	; (8004734 <HAL_RCC_OscConfig+0x4d8>)
 800458c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458e:	4a69      	ldr	r2, [pc, #420]	; (8004734 <HAL_RCC_OscConfig+0x4d8>)
 8004590:	f023 0304 	bic.w	r3, r3, #4
 8004594:	6713      	str	r3, [r2, #112]	; 0x70
 8004596:	e01c      	b.n	80045d2 <HAL_RCC_OscConfig+0x376>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	2b05      	cmp	r3, #5
 800459e:	d10c      	bne.n	80045ba <HAL_RCC_OscConfig+0x35e>
 80045a0:	4b64      	ldr	r3, [pc, #400]	; (8004734 <HAL_RCC_OscConfig+0x4d8>)
 80045a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a4:	4a63      	ldr	r2, [pc, #396]	; (8004734 <HAL_RCC_OscConfig+0x4d8>)
 80045a6:	f043 0304 	orr.w	r3, r3, #4
 80045aa:	6713      	str	r3, [r2, #112]	; 0x70
 80045ac:	4b61      	ldr	r3, [pc, #388]	; (8004734 <HAL_RCC_OscConfig+0x4d8>)
 80045ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b0:	4a60      	ldr	r2, [pc, #384]	; (8004734 <HAL_RCC_OscConfig+0x4d8>)
 80045b2:	f043 0301 	orr.w	r3, r3, #1
 80045b6:	6713      	str	r3, [r2, #112]	; 0x70
 80045b8:	e00b      	b.n	80045d2 <HAL_RCC_OscConfig+0x376>
 80045ba:	4b5e      	ldr	r3, [pc, #376]	; (8004734 <HAL_RCC_OscConfig+0x4d8>)
 80045bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045be:	4a5d      	ldr	r2, [pc, #372]	; (8004734 <HAL_RCC_OscConfig+0x4d8>)
 80045c0:	f023 0301 	bic.w	r3, r3, #1
 80045c4:	6713      	str	r3, [r2, #112]	; 0x70
 80045c6:	4b5b      	ldr	r3, [pc, #364]	; (8004734 <HAL_RCC_OscConfig+0x4d8>)
 80045c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ca:	4a5a      	ldr	r2, [pc, #360]	; (8004734 <HAL_RCC_OscConfig+0x4d8>)
 80045cc:	f023 0304 	bic.w	r3, r3, #4
 80045d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d015      	beq.n	8004606 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045da:	f7fb ffb7 	bl	800054c <HAL_GetTick>
 80045de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e0:	e00a      	b.n	80045f8 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045e2:	f7fb ffb3 	bl	800054c <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d901      	bls.n	80045f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e099      	b.n	800472c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f8:	4b4e      	ldr	r3, [pc, #312]	; (8004734 <HAL_RCC_OscConfig+0x4d8>)
 80045fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0ee      	beq.n	80045e2 <HAL_RCC_OscConfig+0x386>
 8004604:	e014      	b.n	8004630 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004606:	f7fb ffa1 	bl	800054c <HAL_GetTick>
 800460a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800460c:	e00a      	b.n	8004624 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800460e:	f7fb ff9d 	bl	800054c <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	f241 3288 	movw	r2, #5000	; 0x1388
 800461c:	4293      	cmp	r3, r2
 800461e:	d901      	bls.n	8004624 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e083      	b.n	800472c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004624:	4b43      	ldr	r3, [pc, #268]	; (8004734 <HAL_RCC_OscConfig+0x4d8>)
 8004626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1ee      	bne.n	800460e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004630:	7dfb      	ldrb	r3, [r7, #23]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d105      	bne.n	8004642 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004636:	4b3f      	ldr	r3, [pc, #252]	; (8004734 <HAL_RCC_OscConfig+0x4d8>)
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	4a3e      	ldr	r2, [pc, #248]	; (8004734 <HAL_RCC_OscConfig+0x4d8>)
 800463c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004640:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d06f      	beq.n	800472a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800464a:	4b3a      	ldr	r3, [pc, #232]	; (8004734 <HAL_RCC_OscConfig+0x4d8>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f003 030c 	and.w	r3, r3, #12
 8004652:	2b08      	cmp	r3, #8
 8004654:	d067      	beq.n	8004726 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	2b02      	cmp	r3, #2
 800465c:	d149      	bne.n	80046f2 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800465e:	4b35      	ldr	r3, [pc, #212]	; (8004734 <HAL_RCC_OscConfig+0x4d8>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a34      	ldr	r2, [pc, #208]	; (8004734 <HAL_RCC_OscConfig+0x4d8>)
 8004664:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004668:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800466a:	f7fb ff6f 	bl	800054c <HAL_GetTick>
 800466e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004670:	e008      	b.n	8004684 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004672:	f7fb ff6b 	bl	800054c <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b02      	cmp	r3, #2
 800467e:	d901      	bls.n	8004684 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e053      	b.n	800472c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004684:	4b2b      	ldr	r3, [pc, #172]	; (8004734 <HAL_RCC_OscConfig+0x4d8>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1f0      	bne.n	8004672 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	69da      	ldr	r2, [r3, #28]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	431a      	orrs	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	019b      	lsls	r3, r3, #6
 80046a0:	431a      	orrs	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a6:	085b      	lsrs	r3, r3, #1
 80046a8:	3b01      	subs	r3, #1
 80046aa:	041b      	lsls	r3, r3, #16
 80046ac:	431a      	orrs	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b2:	061b      	lsls	r3, r3, #24
 80046b4:	4313      	orrs	r3, r2
 80046b6:	4a1f      	ldr	r2, [pc, #124]	; (8004734 <HAL_RCC_OscConfig+0x4d8>)
 80046b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80046bc:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046be:	4b1d      	ldr	r3, [pc, #116]	; (8004734 <HAL_RCC_OscConfig+0x4d8>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a1c      	ldr	r2, [pc, #112]	; (8004734 <HAL_RCC_OscConfig+0x4d8>)
 80046c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ca:	f7fb ff3f 	bl	800054c <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046d2:	f7fb ff3b 	bl	800054c <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e023      	b.n	800472c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046e4:	4b13      	ldr	r3, [pc, #76]	; (8004734 <HAL_RCC_OscConfig+0x4d8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0f0      	beq.n	80046d2 <HAL_RCC_OscConfig+0x476>
 80046f0:	e01b      	b.n	800472a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f2:	4b10      	ldr	r3, [pc, #64]	; (8004734 <HAL_RCC_OscConfig+0x4d8>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a0f      	ldr	r2, [pc, #60]	; (8004734 <HAL_RCC_OscConfig+0x4d8>)
 80046f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fe:	f7fb ff25 	bl	800054c <HAL_GetTick>
 8004702:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004704:	e008      	b.n	8004718 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004706:	f7fb ff21 	bl	800054c <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e009      	b.n	800472c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004718:	4b06      	ldr	r3, [pc, #24]	; (8004734 <HAL_RCC_OscConfig+0x4d8>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1f0      	bne.n	8004706 <HAL_RCC_OscConfig+0x4aa>
 8004724:	e001      	b.n	800472a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e000      	b.n	800472c <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3718      	adds	r7, #24
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	40023800 	.word	0x40023800
 8004738:	40007000 	.word	0x40007000

0800473c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004746:	2300      	movs	r3, #0
 8004748:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e0ce      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004754:	4b69      	ldr	r3, [pc, #420]	; (80048fc <HAL_RCC_ClockConfig+0x1c0>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 030f 	and.w	r3, r3, #15
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	429a      	cmp	r2, r3
 8004760:	d910      	bls.n	8004784 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004762:	4b66      	ldr	r3, [pc, #408]	; (80048fc <HAL_RCC_ClockConfig+0x1c0>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f023 020f 	bic.w	r2, r3, #15
 800476a:	4964      	ldr	r1, [pc, #400]	; (80048fc <HAL_RCC_ClockConfig+0x1c0>)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	4313      	orrs	r3, r2
 8004770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004772:	4b62      	ldr	r3, [pc, #392]	; (80048fc <HAL_RCC_ClockConfig+0x1c0>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 030f 	and.w	r3, r3, #15
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	429a      	cmp	r2, r3
 800477e:	d001      	beq.n	8004784 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e0b6      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d020      	beq.n	80047d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	d005      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800479c:	4b58      	ldr	r3, [pc, #352]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	4a57      	ldr	r2, [pc, #348]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 80047a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0308 	and.w	r3, r3, #8
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d005      	beq.n	80047c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047b4:	4b52      	ldr	r3, [pc, #328]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	4a51      	ldr	r2, [pc, #324]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 80047ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047c0:	4b4f      	ldr	r3, [pc, #316]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	494c      	ldr	r1, [pc, #304]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d040      	beq.n	8004860 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d107      	bne.n	80047f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047e6:	4b46      	ldr	r3, [pc, #280]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d115      	bne.n	800481e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e07d      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d107      	bne.n	800480e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047fe:	4b40      	ldr	r3, [pc, #256]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d109      	bne.n	800481e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e071      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800480e:	4b3c      	ldr	r3, [pc, #240]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e069      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800481e:	4b38      	ldr	r3, [pc, #224]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f023 0203 	bic.w	r2, r3, #3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	4935      	ldr	r1, [pc, #212]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 800482c:	4313      	orrs	r3, r2
 800482e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004830:	f7fb fe8c 	bl	800054c <HAL_GetTick>
 8004834:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004836:	e00a      	b.n	800484e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004838:	f7fb fe88 	bl	800054c <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	f241 3288 	movw	r2, #5000	; 0x1388
 8004846:	4293      	cmp	r3, r2
 8004848:	d901      	bls.n	800484e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e051      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800484e:	4b2c      	ldr	r3, [pc, #176]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 020c 	and.w	r2, r3, #12
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	429a      	cmp	r2, r3
 800485e:	d1eb      	bne.n	8004838 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004860:	4b26      	ldr	r3, [pc, #152]	; (80048fc <HAL_RCC_ClockConfig+0x1c0>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 030f 	and.w	r3, r3, #15
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	429a      	cmp	r2, r3
 800486c:	d210      	bcs.n	8004890 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800486e:	4b23      	ldr	r3, [pc, #140]	; (80048fc <HAL_RCC_ClockConfig+0x1c0>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f023 020f 	bic.w	r2, r3, #15
 8004876:	4921      	ldr	r1, [pc, #132]	; (80048fc <HAL_RCC_ClockConfig+0x1c0>)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	4313      	orrs	r3, r2
 800487c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800487e:	4b1f      	ldr	r3, [pc, #124]	; (80048fc <HAL_RCC_ClockConfig+0x1c0>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 030f 	and.w	r3, r3, #15
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	429a      	cmp	r2, r3
 800488a:	d001      	beq.n	8004890 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e030      	b.n	80048f2 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b00      	cmp	r3, #0
 800489a:	d008      	beq.n	80048ae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800489c:	4b18      	ldr	r3, [pc, #96]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	4915      	ldr	r1, [pc, #84]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0308 	and.w	r3, r3, #8
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d009      	beq.n	80048ce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048ba:	4b11      	ldr	r3, [pc, #68]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	490d      	ldr	r1, [pc, #52]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048ce:	f000 f81d 	bl	800490c <HAL_RCC_GetSysClockFreq>
 80048d2:	4602      	mov	r2, r0
 80048d4:	4b0a      	ldr	r3, [pc, #40]	; (8004900 <HAL_RCC_ClockConfig+0x1c4>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	091b      	lsrs	r3, r3, #4
 80048da:	f003 030f 	and.w	r3, r3, #15
 80048de:	4909      	ldr	r1, [pc, #36]	; (8004904 <HAL_RCC_ClockConfig+0x1c8>)
 80048e0:	5ccb      	ldrb	r3, [r1, r3]
 80048e2:	fa22 f303 	lsr.w	r3, r2, r3
 80048e6:	4a08      	ldr	r2, [pc, #32]	; (8004908 <HAL_RCC_ClockConfig+0x1cc>)
 80048e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80048ea:	2000      	movs	r0, #0
 80048ec:	f011 fa7c 	bl	8015de8 <HAL_InitTick>

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	40023c00 	.word	0x40023c00
 8004900:	40023800 	.word	0x40023800
 8004904:	08016b10 	.word	0x08016b10
 8004908:	2000002c 	.word	0x2000002c

0800490c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800490c:	b5b0      	push	{r4, r5, r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004912:	2100      	movs	r1, #0
 8004914:	6079      	str	r1, [r7, #4]
 8004916:	2100      	movs	r1, #0
 8004918:	60f9      	str	r1, [r7, #12]
 800491a:	2100      	movs	r1, #0
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800491e:	2100      	movs	r1, #0
 8004920:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004922:	4952      	ldr	r1, [pc, #328]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x160>)
 8004924:	6889      	ldr	r1, [r1, #8]
 8004926:	f001 010c 	and.w	r1, r1, #12
 800492a:	2908      	cmp	r1, #8
 800492c:	d00d      	beq.n	800494a <HAL_RCC_GetSysClockFreq+0x3e>
 800492e:	2908      	cmp	r1, #8
 8004930:	f200 8094 	bhi.w	8004a5c <HAL_RCC_GetSysClockFreq+0x150>
 8004934:	2900      	cmp	r1, #0
 8004936:	d002      	beq.n	800493e <HAL_RCC_GetSysClockFreq+0x32>
 8004938:	2904      	cmp	r1, #4
 800493a:	d003      	beq.n	8004944 <HAL_RCC_GetSysClockFreq+0x38>
 800493c:	e08e      	b.n	8004a5c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800493e:	4b4c      	ldr	r3, [pc, #304]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x164>)
 8004940:	60bb      	str	r3, [r7, #8]
       break;
 8004942:	e08e      	b.n	8004a62 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004944:	4b4b      	ldr	r3, [pc, #300]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x168>)
 8004946:	60bb      	str	r3, [r7, #8]
      break;
 8004948:	e08b      	b.n	8004a62 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800494a:	4948      	ldr	r1, [pc, #288]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x160>)
 800494c:	6849      	ldr	r1, [r1, #4]
 800494e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004952:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004954:	4945      	ldr	r1, [pc, #276]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x160>)
 8004956:	6849      	ldr	r1, [r1, #4]
 8004958:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800495c:	2900      	cmp	r1, #0
 800495e:	d024      	beq.n	80049aa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004960:	4942      	ldr	r1, [pc, #264]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x160>)
 8004962:	6849      	ldr	r1, [r1, #4]
 8004964:	0989      	lsrs	r1, r1, #6
 8004966:	4608      	mov	r0, r1
 8004968:	f04f 0100 	mov.w	r1, #0
 800496c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004970:	f04f 0500 	mov.w	r5, #0
 8004974:	ea00 0204 	and.w	r2, r0, r4
 8004978:	ea01 0305 	and.w	r3, r1, r5
 800497c:	493d      	ldr	r1, [pc, #244]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x168>)
 800497e:	fb01 f003 	mul.w	r0, r1, r3
 8004982:	2100      	movs	r1, #0
 8004984:	fb01 f102 	mul.w	r1, r1, r2
 8004988:	1844      	adds	r4, r0, r1
 800498a:	493a      	ldr	r1, [pc, #232]	; (8004a74 <HAL_RCC_GetSysClockFreq+0x168>)
 800498c:	fba2 0101 	umull	r0, r1, r2, r1
 8004990:	1863      	adds	r3, r4, r1
 8004992:	4619      	mov	r1, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	461a      	mov	r2, r3
 8004998:	f04f 0300 	mov.w	r3, #0
 800499c:	f7fb fc38 	bl	8000210 <__aeabi_uldivmod>
 80049a0:	4602      	mov	r2, r0
 80049a2:	460b      	mov	r3, r1
 80049a4:	4613      	mov	r3, r2
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	e04a      	b.n	8004a40 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049aa:	4b30      	ldr	r3, [pc, #192]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x160>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	099b      	lsrs	r3, r3, #6
 80049b0:	461a      	mov	r2, r3
 80049b2:	f04f 0300 	mov.w	r3, #0
 80049b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80049ba:	f04f 0100 	mov.w	r1, #0
 80049be:	ea02 0400 	and.w	r4, r2, r0
 80049c2:	ea03 0501 	and.w	r5, r3, r1
 80049c6:	4620      	mov	r0, r4
 80049c8:	4629      	mov	r1, r5
 80049ca:	f04f 0200 	mov.w	r2, #0
 80049ce:	f04f 0300 	mov.w	r3, #0
 80049d2:	014b      	lsls	r3, r1, #5
 80049d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80049d8:	0142      	lsls	r2, r0, #5
 80049da:	4610      	mov	r0, r2
 80049dc:	4619      	mov	r1, r3
 80049de:	1b00      	subs	r0, r0, r4
 80049e0:	eb61 0105 	sbc.w	r1, r1, r5
 80049e4:	f04f 0200 	mov.w	r2, #0
 80049e8:	f04f 0300 	mov.w	r3, #0
 80049ec:	018b      	lsls	r3, r1, #6
 80049ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80049f2:	0182      	lsls	r2, r0, #6
 80049f4:	1a12      	subs	r2, r2, r0
 80049f6:	eb63 0301 	sbc.w	r3, r3, r1
 80049fa:	f04f 0000 	mov.w	r0, #0
 80049fe:	f04f 0100 	mov.w	r1, #0
 8004a02:	00d9      	lsls	r1, r3, #3
 8004a04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a08:	00d0      	lsls	r0, r2, #3
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	1912      	adds	r2, r2, r4
 8004a10:	eb45 0303 	adc.w	r3, r5, r3
 8004a14:	f04f 0000 	mov.w	r0, #0
 8004a18:	f04f 0100 	mov.w	r1, #0
 8004a1c:	0299      	lsls	r1, r3, #10
 8004a1e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004a22:	0290      	lsls	r0, r2, #10
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	4610      	mov	r0, r2
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	f04f 0300 	mov.w	r3, #0
 8004a34:	f7fb fbec 	bl	8000210 <__aeabi_uldivmod>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8004a40:	4b0a      	ldr	r3, [pc, #40]	; (8004a6c <HAL_RCC_GetSysClockFreq+0x160>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	0c1b      	lsrs	r3, r3, #16
 8004a46:	f003 0303 	and.w	r3, r3, #3
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a58:	60bb      	str	r3, [r7, #8]
      break;
 8004a5a:	e002      	b.n	8004a62 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a5c:	4b04      	ldr	r3, [pc, #16]	; (8004a70 <HAL_RCC_GetSysClockFreq+0x164>)
 8004a5e:	60bb      	str	r3, [r7, #8]
      break;
 8004a60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a62:	68bb      	ldr	r3, [r7, #8]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bdb0      	pop	{r4, r5, r7, pc}
 8004a6c:	40023800 	.word	0x40023800
 8004a70:	00f42400 	.word	0x00f42400
 8004a74:	017d7840 	.word	0x017d7840

08004a78 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a7c:	4b03      	ldr	r3, [pc, #12]	; (8004a8c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	2000002c 	.word	0x2000002c

08004a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a94:	f7ff fff0 	bl	8004a78 <HAL_RCC_GetHCLKFreq>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	4b05      	ldr	r3, [pc, #20]	; (8004ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	0a9b      	lsrs	r3, r3, #10
 8004aa0:	f003 0307 	and.w	r3, r3, #7
 8004aa4:	4903      	ldr	r1, [pc, #12]	; (8004ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aa6:	5ccb      	ldrb	r3, [r1, r3]
 8004aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	08016b20 	.word	0x08016b20

08004ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004abc:	f7ff ffdc 	bl	8004a78 <HAL_RCC_GetHCLKFreq>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	4b05      	ldr	r3, [pc, #20]	; (8004ad8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	0b5b      	lsrs	r3, r3, #13
 8004ac8:	f003 0307 	and.w	r3, r3, #7
 8004acc:	4903      	ldr	r1, [pc, #12]	; (8004adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ace:	5ccb      	ldrb	r3, [r1, r3]
 8004ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	40023800 	.word	0x40023800
 8004adc:	08016b20 	.word	0x08016b20

08004ae0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	220f      	movs	r2, #15
 8004aee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004af0:	4b12      	ldr	r3, [pc, #72]	; (8004b3c <HAL_RCC_GetClockConfig+0x5c>)
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f003 0203 	and.w	r2, r3, #3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004afc:	4b0f      	ldr	r3, [pc, #60]	; (8004b3c <HAL_RCC_GetClockConfig+0x5c>)
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b08:	4b0c      	ldr	r3, [pc, #48]	; (8004b3c <HAL_RCC_GetClockConfig+0x5c>)
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004b14:	4b09      	ldr	r3, [pc, #36]	; (8004b3c <HAL_RCC_GetClockConfig+0x5c>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	08db      	lsrs	r3, r3, #3
 8004b1a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b22:	4b07      	ldr	r3, [pc, #28]	; (8004b40 <HAL_RCC_GetClockConfig+0x60>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 020f 	and.w	r2, r3, #15
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	601a      	str	r2, [r3, #0]
}
 8004b2e:	bf00      	nop
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	40023800 	.word	0x40023800
 8004b40:	40023c00 	.word	0x40023c00

08004b44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b088      	sub	sp, #32
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004b50:	2300      	movs	r3, #0
 8004b52:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004b54:	2300      	movs	r3, #0
 8004b56:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d012      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b6c:	4b69      	ldr	r3, [pc, #420]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	4a68      	ldr	r2, [pc, #416]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b72:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004b76:	6093      	str	r3, [r2, #8]
 8004b78:	4b66      	ldr	r3, [pc, #408]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b80:	4964      	ldr	r1, [pc, #400]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d017      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b9e:	4b5d      	ldr	r3, [pc, #372]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ba4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bac:	4959      	ldr	r1, [pc, #356]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bbc:	d101      	bne.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d017      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004bda:	4b4e      	ldr	r3, [pc, #312]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004be0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	494a      	ldr	r1, [pc, #296]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bf8:	d101      	bne.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004c06:	2301      	movs	r3, #1
 8004c08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004c16:	2301      	movs	r3, #1
 8004c18:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0320 	and.w	r3, r3, #32
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f000 808b 	beq.w	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c28:	4b3a      	ldr	r3, [pc, #232]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2c:	4a39      	ldr	r2, [pc, #228]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c32:	6413      	str	r3, [r2, #64]	; 0x40
 8004c34:	4b37      	ldr	r3, [pc, #220]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c3c:	60bb      	str	r3, [r7, #8]
 8004c3e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004c40:	4b35      	ldr	r3, [pc, #212]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a34      	ldr	r2, [pc, #208]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c4c:	f7fb fc7e 	bl	800054c <HAL_GetTick>
 8004c50:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c52:	e008      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c54:	f7fb fc7a 	bl	800054c <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b64      	cmp	r3, #100	; 0x64
 8004c60:	d901      	bls.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e355      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c66:	4b2c      	ldr	r3, [pc, #176]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0f0      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c72:	4b28      	ldr	r3, [pc, #160]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c7a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d035      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d02e      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c90:	4b20      	ldr	r3, [pc, #128]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c98:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c9a:	4b1e      	ldr	r3, [pc, #120]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9e:	4a1d      	ldr	r2, [pc, #116]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ca4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ca6:	4b1b      	ldr	r3, [pc, #108]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004caa:	4a1a      	ldr	r2, [pc, #104]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cb0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004cb2:	4a18      	ldr	r2, [pc, #96]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004cb8:	4b16      	ldr	r3, [pc, #88]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d114      	bne.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc4:	f7fb fc42 	bl	800054c <HAL_GetTick>
 8004cc8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cca:	e00a      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ccc:	f7fb fc3e 	bl	800054c <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e317      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ce2:	4b0c      	ldr	r3, [pc, #48]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d0ee      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cfa:	d111      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004cfc:	4b05      	ldr	r3, [pc, #20]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d08:	4b04      	ldr	r3, [pc, #16]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004d0a:	400b      	ands	r3, r1
 8004d0c:	4901      	ldr	r1, [pc, #4]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	608b      	str	r3, [r1, #8]
 8004d12:	e00b      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004d14:	40023800 	.word	0x40023800
 8004d18:	40007000 	.word	0x40007000
 8004d1c:	0ffffcff 	.word	0x0ffffcff
 8004d20:	4bb0      	ldr	r3, [pc, #704]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	4aaf      	ldr	r2, [pc, #700]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d26:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d2a:	6093      	str	r3, [r2, #8]
 8004d2c:	4bad      	ldr	r3, [pc, #692]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d38:	49aa      	ldr	r1, [pc, #680]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0310 	and.w	r3, r3, #16
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d010      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d4a:	4ba6      	ldr	r3, [pc, #664]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d50:	4aa4      	ldr	r2, [pc, #656]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d56:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004d5a:	4ba2      	ldr	r3, [pc, #648]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d5c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d64:	499f      	ldr	r1, [pc, #636]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00a      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d78:	4b9a      	ldr	r3, [pc, #616]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d86:	4997      	ldr	r1, [pc, #604]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00a      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d9a:	4b92      	ldr	r3, [pc, #584]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004da8:	498e      	ldr	r1, [pc, #568]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00a      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004dbc:	4b89      	ldr	r3, [pc, #548]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dca:	4986      	ldr	r1, [pc, #536]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00a      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004dde:	4b81      	ldr	r3, [pc, #516]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dec:	497d      	ldr	r1, [pc, #500]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00a      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e00:	4b78      	ldr	r3, [pc, #480]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e06:	f023 0203 	bic.w	r2, r3, #3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e0e:	4975      	ldr	r1, [pc, #468]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00a      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e22:	4b70      	ldr	r3, [pc, #448]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e28:	f023 020c 	bic.w	r2, r3, #12
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e30:	496c      	ldr	r1, [pc, #432]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00a      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e44:	4b67      	ldr	r3, [pc, #412]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e4a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e52:	4964      	ldr	r1, [pc, #400]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00a      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e66:	4b5f      	ldr	r3, [pc, #380]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e6c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e74:	495b      	ldr	r1, [pc, #364]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00a      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e88:	4b56      	ldr	r3, [pc, #344]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e96:	4953      	ldr	r1, [pc, #332]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00a      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004eaa:	4b4e      	ldr	r3, [pc, #312]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb8:	494a      	ldr	r1, [pc, #296]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00a      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004ecc:	4b45      	ldr	r3, [pc, #276]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eda:	4942      	ldr	r1, [pc, #264]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00a      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004eee:	4b3d      	ldr	r3, [pc, #244]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004efc:	4939      	ldr	r1, [pc, #228]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00a      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f10:	4b34      	ldr	r3, [pc, #208]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f16:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f1e:	4931      	ldr	r1, [pc, #196]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d011      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004f32:	4b2c      	ldr	r3, [pc, #176]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f38:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f40:	4928      	ldr	r1, [pc, #160]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f50:	d101      	bne.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004f52:	2301      	movs	r3, #1
 8004f54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0308 	and.w	r3, r3, #8
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004f62:	2301      	movs	r3, #1
 8004f64:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00a      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f72:	4b1c      	ldr	r3, [pc, #112]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f78:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f80:	4918      	ldr	r1, [pc, #96]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00b      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f94:	4b13      	ldr	r3, [pc, #76]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f9a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fa4:	490f      	ldr	r1, [pc, #60]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d005      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fba:	f040 80d8 	bne.w	800516e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004fbe:	4b09      	ldr	r3, [pc, #36]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a08      	ldr	r2, [pc, #32]	; (8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004fc4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004fc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fca:	f7fb fabf 	bl	800054c <HAL_GetTick>
 8004fce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fd0:	e00a      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004fd2:	f7fb fabb 	bl	800054c <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b64      	cmp	r3, #100	; 0x64
 8004fde:	d903      	bls.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e196      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8004fe4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fe8:	4b6c      	ldr	r3, [pc, #432]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1ee      	bne.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d021      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005004:	2b00      	cmp	r3, #0
 8005006:	d11d      	bne.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005008:	4b64      	ldr	r3, [pc, #400]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800500a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800500e:	0c1b      	lsrs	r3, r3, #16
 8005010:	f003 0303 	and.w	r3, r3, #3
 8005014:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005016:	4b61      	ldr	r3, [pc, #388]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005018:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800501c:	0e1b      	lsrs	r3, r3, #24
 800501e:	f003 030f 	and.w	r3, r3, #15
 8005022:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	019a      	lsls	r2, r3, #6
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	041b      	lsls	r3, r3, #16
 800502e:	431a      	orrs	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	061b      	lsls	r3, r3, #24
 8005034:	431a      	orrs	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	071b      	lsls	r3, r3, #28
 800503c:	4957      	ldr	r1, [pc, #348]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800503e:	4313      	orrs	r3, r2
 8005040:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d004      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x516>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005054:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005058:	d00a      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005062:	2b00      	cmp	r3, #0
 8005064:	d02e      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800506e:	d129      	bne.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005070:	4b4a      	ldr	r3, [pc, #296]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005076:	0c1b      	lsrs	r3, r3, #16
 8005078:	f003 0303 	and.w	r3, r3, #3
 800507c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800507e:	4b47      	ldr	r3, [pc, #284]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005084:	0f1b      	lsrs	r3, r3, #28
 8005086:	f003 0307 	and.w	r3, r3, #7
 800508a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	019a      	lsls	r2, r3, #6
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	041b      	lsls	r3, r3, #16
 8005096:	431a      	orrs	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	061b      	lsls	r3, r3, #24
 800509e:	431a      	orrs	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	071b      	lsls	r3, r3, #28
 80050a4:	493d      	ldr	r1, [pc, #244]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80050ac:	4b3b      	ldr	r3, [pc, #236]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80050ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050b2:	f023 021f 	bic.w	r2, r3, #31
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ba:	3b01      	subs	r3, #1
 80050bc:	4937      	ldr	r1, [pc, #220]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d01d      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80050d0:	4b32      	ldr	r3, [pc, #200]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80050d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050d6:	0e1b      	lsrs	r3, r3, #24
 80050d8:	f003 030f 	and.w	r3, r3, #15
 80050dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80050de:	4b2f      	ldr	r3, [pc, #188]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80050e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050e4:	0f1b      	lsrs	r3, r3, #28
 80050e6:	f003 0307 	and.w	r3, r3, #7
 80050ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	019a      	lsls	r2, r3, #6
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	041b      	lsls	r3, r3, #16
 80050f8:	431a      	orrs	r2, r3
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	061b      	lsls	r3, r3, #24
 80050fe:	431a      	orrs	r2, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	071b      	lsls	r3, r3, #28
 8005104:	4925      	ldr	r1, [pc, #148]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005106:	4313      	orrs	r3, r2
 8005108:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d011      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	019a      	lsls	r2, r3, #6
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	041b      	lsls	r3, r3, #16
 8005124:	431a      	orrs	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	061b      	lsls	r3, r3, #24
 800512c:	431a      	orrs	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	071b      	lsls	r3, r3, #28
 8005134:	4919      	ldr	r1, [pc, #100]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005136:	4313      	orrs	r3, r2
 8005138:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800513c:	4b17      	ldr	r3, [pc, #92]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a16      	ldr	r2, [pc, #88]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005142:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005146:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005148:	f7fb fa00 	bl	800054c <HAL_GetTick>
 800514c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800514e:	e008      	b.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005150:	f7fb f9fc 	bl	800054c <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	2b64      	cmp	r3, #100	; 0x64
 800515c:	d901      	bls.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e0d7      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005162:	4b0e      	ldr	r3, [pc, #56]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d0f0      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	2b01      	cmp	r3, #1
 8005172:	f040 80cd 	bne.w	8005310 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005176:	4b09      	ldr	r3, [pc, #36]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a08      	ldr	r2, [pc, #32]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800517c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005180:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005182:	f7fb f9e3 	bl	800054c <HAL_GetTick>
 8005186:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005188:	e00a      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800518a:	f7fb f9df 	bl	800054c <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	2b64      	cmp	r3, #100	; 0x64
 8005196:	d903      	bls.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e0ba      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800519c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80051a0:	4b5e      	ldr	r3, [pc, #376]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051ac:	d0ed      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d009      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d02e      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d12a      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80051d6:	4b51      	ldr	r3, [pc, #324]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80051d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051dc:	0c1b      	lsrs	r3, r3, #16
 80051de:	f003 0303 	and.w	r3, r3, #3
 80051e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80051e4:	4b4d      	ldr	r3, [pc, #308]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80051e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ea:	0f1b      	lsrs	r3, r3, #28
 80051ec:	f003 0307 	and.w	r3, r3, #7
 80051f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	019a      	lsls	r2, r3, #6
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	041b      	lsls	r3, r3, #16
 80051fc:	431a      	orrs	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	061b      	lsls	r3, r3, #24
 8005204:	431a      	orrs	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	071b      	lsls	r3, r3, #28
 800520a:	4944      	ldr	r1, [pc, #272]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800520c:	4313      	orrs	r3, r2
 800520e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005212:	4b42      	ldr	r3, [pc, #264]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005218:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005220:	3b01      	subs	r3, #1
 8005222:	021b      	lsls	r3, r3, #8
 8005224:	493d      	ldr	r1, [pc, #244]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005226:	4313      	orrs	r3, r2
 8005228:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005234:	2b00      	cmp	r3, #0
 8005236:	d022      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800523c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005240:	d11d      	bne.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005242:	4b36      	ldr	r3, [pc, #216]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005248:	0e1b      	lsrs	r3, r3, #24
 800524a:	f003 030f 	and.w	r3, r3, #15
 800524e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005250:	4b32      	ldr	r3, [pc, #200]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005256:	0f1b      	lsrs	r3, r3, #28
 8005258:	f003 0307 	and.w	r3, r3, #7
 800525c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	019a      	lsls	r2, r3, #6
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	041b      	lsls	r3, r3, #16
 800526a:	431a      	orrs	r2, r3
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	061b      	lsls	r3, r3, #24
 8005270:	431a      	orrs	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	071b      	lsls	r3, r3, #28
 8005276:	4929      	ldr	r1, [pc, #164]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005278:	4313      	orrs	r3, r2
 800527a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0308 	and.w	r3, r3, #8
 8005286:	2b00      	cmp	r3, #0
 8005288:	d028      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800528a:	4b24      	ldr	r3, [pc, #144]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800528c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005290:	0e1b      	lsrs	r3, r3, #24
 8005292:	f003 030f 	and.w	r3, r3, #15
 8005296:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005298:	4b20      	ldr	r3, [pc, #128]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800529a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529e:	0c1b      	lsrs	r3, r3, #16
 80052a0:	f003 0303 	and.w	r3, r3, #3
 80052a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	019a      	lsls	r2, r3, #6
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	041b      	lsls	r3, r3, #16
 80052b0:	431a      	orrs	r2, r3
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	061b      	lsls	r3, r3, #24
 80052b6:	431a      	orrs	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	69db      	ldr	r3, [r3, #28]
 80052bc:	071b      	lsls	r3, r3, #28
 80052be:	4917      	ldr	r1, [pc, #92]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80052c6:	4b15      	ldr	r3, [pc, #84]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80052c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d4:	4911      	ldr	r1, [pc, #68]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80052dc:	4b0f      	ldr	r3, [pc, #60]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a0e      	ldr	r2, [pc, #56]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80052e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052e8:	f7fb f930 	bl	800054c <HAL_GetTick>
 80052ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052ee:	e008      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80052f0:	f7fb f92c 	bl	800054c <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b64      	cmp	r3, #100	; 0x64
 80052fc:	d901      	bls.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e007      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005302:	4b06      	ldr	r3, [pc, #24]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800530a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800530e:	d1ef      	bne.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3720      	adds	r7, #32
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	40023800 	.word	0x40023800

08005320 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005328:	2300      	movs	r3, #0
 800532a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800532c:	2300      	movs	r3, #0
 800532e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8005330:	2300      	movs	r3, #0
 8005332:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8005334:	2300      	movs	r3, #0
 8005336:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800533e:	f040 808c 	bne.w	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 8005342:	4b95      	ldr	r3, [pc, #596]	; (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005348:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005350:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005358:	d07c      	beq.n	8005454 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005360:	d87d      	bhi.n	800545e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d004      	beq.n	8005372 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800536e:	d039      	beq.n	80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8005370:	e075      	b.n	800545e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005372:	4b89      	ldr	r3, [pc, #548]	; (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d108      	bne.n	8005390 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800537e:	4b86      	ldr	r3, [pc, #536]	; (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005386:	4a85      	ldr	r2, [pc, #532]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005388:	fbb2 f3f3 	udiv	r3, r2, r3
 800538c:	613b      	str	r3, [r7, #16]
 800538e:	e007      	b.n	80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005390:	4b81      	ldr	r3, [pc, #516]	; (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005398:	4a81      	ldr	r2, [pc, #516]	; (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800539a:	fbb2 f3f3 	udiv	r3, r2, r3
 800539e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80053a0:	4b7d      	ldr	r3, [pc, #500]	; (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80053a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a6:	0e1b      	lsrs	r3, r3, #24
 80053a8:	f003 030f 	and.w	r3, r3, #15
 80053ac:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80053ae:	4b7a      	ldr	r3, [pc, #488]	; (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80053b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b4:	099b      	lsrs	r3, r3, #6
 80053b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	fb02 f203 	mul.w	r2, r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80053c8:	4b73      	ldr	r3, [pc, #460]	; (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80053ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053ce:	0a1b      	lsrs	r3, r3, #8
 80053d0:	f003 031f 	and.w	r3, r3, #31
 80053d4:	3301      	adds	r3, #1
 80053d6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e0:	617b      	str	r3, [r7, #20]
        break;
 80053e2:	e03d      	b.n	8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80053e4:	4b6c      	ldr	r3, [pc, #432]	; (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d108      	bne.n	8005402 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80053f0:	4b69      	ldr	r3, [pc, #420]	; (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053f8:	4a68      	ldr	r2, [pc, #416]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80053fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80053fe:	613b      	str	r3, [r7, #16]
 8005400:	e007      	b.n	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005402:	4b65      	ldr	r3, [pc, #404]	; (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800540a:	4a65      	ldr	r2, [pc, #404]	; (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800540c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005410:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005412:	4b61      	ldr	r3, [pc, #388]	; (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005414:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005418:	0e1b      	lsrs	r3, r3, #24
 800541a:	f003 030f 	and.w	r3, r3, #15
 800541e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005420:	4b5d      	ldr	r3, [pc, #372]	; (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005422:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005426:	099b      	lsrs	r3, r3, #6
 8005428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	fb02 f203 	mul.w	r2, r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	fbb2 f3f3 	udiv	r3, r2, r3
 8005438:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800543a:	4b57      	ldr	r3, [pc, #348]	; (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800543c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005440:	f003 031f 	and.w	r3, r3, #31
 8005444:	3301      	adds	r3, #1
 8005446:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005450:	617b      	str	r3, [r7, #20]
        break;
 8005452:	e005      	b.n	8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005454:	4b53      	ldr	r3, [pc, #332]	; (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005456:	617b      	str	r3, [r7, #20]
        break;
 8005458:	e002      	b.n	8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 800545a:	bf00      	nop
 800545c:	e000      	b.n	8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 800545e:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005466:	f040 808c 	bne.w	8005582 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 800546a:	4b4b      	ldr	r3, [pc, #300]	; (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800546c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005470:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005478:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005480:	d07c      	beq.n	800557c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005488:	d87d      	bhi.n	8005586 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d004      	beq.n	800549a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005496:	d039      	beq.n	800550c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8005498:	e075      	b.n	8005586 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800549a:	4b3f      	ldr	r3, [pc, #252]	; (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d108      	bne.n	80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80054a6:	4b3c      	ldr	r3, [pc, #240]	; (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054ae:	4a3b      	ldr	r2, [pc, #236]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80054b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b4:	613b      	str	r3, [r7, #16]
 80054b6:	e007      	b.n	80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80054b8:	4b37      	ldr	r3, [pc, #220]	; (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054c0:	4a37      	ldr	r2, [pc, #220]	; (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80054c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80054c8:	4b33      	ldr	r3, [pc, #204]	; (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80054ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ce:	0e1b      	lsrs	r3, r3, #24
 80054d0:	f003 030f 	and.w	r3, r3, #15
 80054d4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80054d6:	4b30      	ldr	r3, [pc, #192]	; (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80054d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054dc:	099b      	lsrs	r3, r3, #6
 80054de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054e2:	693a      	ldr	r2, [r7, #16]
 80054e4:	fb02 f203 	mul.w	r2, r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ee:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80054f0:	4b29      	ldr	r3, [pc, #164]	; (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80054f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054f6:	0a1b      	lsrs	r3, r3, #8
 80054f8:	f003 031f 	and.w	r3, r3, #31
 80054fc:	3301      	adds	r3, #1
 80054fe:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	fbb2 f3f3 	udiv	r3, r2, r3
 8005508:	617b      	str	r3, [r7, #20]
        break;
 800550a:	e03d      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800550c:	4b22      	ldr	r3, [pc, #136]	; (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d108      	bne.n	800552a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005518:	4b1f      	ldr	r3, [pc, #124]	; (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005520:	4a1e      	ldr	r2, [pc, #120]	; (800559c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005522:	fbb2 f3f3 	udiv	r3, r2, r3
 8005526:	613b      	str	r3, [r7, #16]
 8005528:	e007      	b.n	800553a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800552a:	4b1b      	ldr	r3, [pc, #108]	; (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005532:	4a1b      	ldr	r2, [pc, #108]	; (80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005534:	fbb2 f3f3 	udiv	r3, r2, r3
 8005538:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800553a:	4b17      	ldr	r3, [pc, #92]	; (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800553c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005540:	0e1b      	lsrs	r3, r3, #24
 8005542:	f003 030f 	and.w	r3, r3, #15
 8005546:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005548:	4b13      	ldr	r3, [pc, #76]	; (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800554a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800554e:	099b      	lsrs	r3, r3, #6
 8005550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	fb02 f203 	mul.w	r2, r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005560:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8005562:	4b0d      	ldr	r3, [pc, #52]	; (8005598 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005564:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005568:	f003 031f 	and.w	r3, r3, #31
 800556c:	3301      	adds	r3, #1
 800556e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	fbb2 f3f3 	udiv	r3, r2, r3
 8005578:	617b      	str	r3, [r7, #20]
        break;
 800557a:	e005      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 800557c:	4b09      	ldr	r3, [pc, #36]	; (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800557e:	617b      	str	r3, [r7, #20]
        break;
 8005580:	e002      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 8005582:	bf00      	nop
 8005584:	e000      	b.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 8005586:	bf00      	nop

  return frequency;
 8005588:	697b      	ldr	r3, [r7, #20]
}
 800558a:	4618      	mov	r0, r3
 800558c:	371c      	adds	r7, #28
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop
 8005598:	40023800 	.word	0x40023800
 800559c:	00f42400 	.word	0x00f42400
 80055a0:	017d7840 	.word	0x017d7840
 80055a4:	00bb8000 	.word	0x00bb8000

080055a8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e06b      	b.n	8005692 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	7f5b      	ldrb	r3, [r3, #29]
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d105      	bne.n	80055d0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f00f ffca 	bl	8015564 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2202      	movs	r2, #2
 80055d4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	22ca      	movs	r2, #202	; 0xca
 80055dc:	625a      	str	r2, [r3, #36]	; 0x24
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2253      	movs	r2, #83	; 0x53
 80055e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 fb00 	bl	8005bec <RTC_EnterInitMode>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d008      	beq.n	8005604 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	22ff      	movs	r2, #255	; 0xff
 80055f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2204      	movs	r2, #4
 80055fe:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e046      	b.n	8005692 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6899      	ldr	r1, [r3, #8]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	4b23      	ldr	r3, [pc, #140]	; (800569c <HAL_RTC_Init+0xf4>)
 8005610:	400b      	ands	r3, r1
 8005612:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6899      	ldr	r1, [r3, #8]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	431a      	orrs	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	695b      	ldr	r3, [r3, #20]
 8005628:	431a      	orrs	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	68d2      	ldr	r2, [r2, #12]
 800563a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6919      	ldr	r1, [r3, #16]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	041a      	lsls	r2, r3, #16
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	430a      	orrs	r2, r1
 800564e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68da      	ldr	r2, [r3, #12]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800565e:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 0208 	bic.w	r2, r2, #8
 800566e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	699a      	ldr	r2, [r3, #24]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	22ff      	movs	r2, #255	; 0xff
 8005688:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005690:	2300      	movs	r3, #0
  }
}
 8005692:	4618      	mov	r0, r3
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	ff8fffbf 	.word	0xff8fffbf

080056a0 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80056a0:	b590      	push	{r4, r7, lr}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80056ac:	2300      	movs	r3, #0
 80056ae:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	7f1b      	ldrb	r3, [r3, #28]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d101      	bne.n	80056bc <HAL_RTC_SetTime+0x1c>
 80056b8:	2302      	movs	r3, #2
 80056ba:	e0a8      	b.n	800580e <HAL_RTC_SetTime+0x16e>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2201      	movs	r2, #1
 80056c0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2202      	movs	r2, #2
 80056c6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d126      	bne.n	800571c <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d102      	bne.n	80056e2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	2200      	movs	r2, #0
 80056e0:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 faac 	bl	8005c44 <RTC_ByteToBcd2>
 80056ec:	4603      	mov	r3, r0
 80056ee:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	785b      	ldrb	r3, [r3, #1]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f000 faa5 	bl	8005c44 <RTC_ByteToBcd2>
 80056fa:	4603      	mov	r3, r0
 80056fc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80056fe:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	789b      	ldrb	r3, [r3, #2]
 8005704:	4618      	mov	r0, r3
 8005706:	f000 fa9d 	bl	8005c44 <RTC_ByteToBcd2>
 800570a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800570c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	7b1b      	ldrb	r3, [r3, #12]
 8005714:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8005716:	4313      	orrs	r3, r2
 8005718:	617b      	str	r3, [r7, #20]
 800571a:	e018      	b.n	800574e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005726:	2b00      	cmp	r3, #0
 8005728:	d102      	bne.n	8005730 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	2200      	movs	r2, #0
 800572e:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	785b      	ldrb	r3, [r3, #1]
 800573a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800573c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8005742:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	7b1b      	ldrb	r3, [r3, #12]
 8005748:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800574a:	4313      	orrs	r3, r2
 800574c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	22ca      	movs	r2, #202	; 0xca
 8005754:	625a      	str	r2, [r3, #36]	; 0x24
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2253      	movs	r2, #83	; 0x53
 800575c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f000 fa44 	bl	8005bec <RTC_EnterInitMode>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00b      	beq.n	8005782 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	22ff      	movs	r2, #255	; 0xff
 8005770:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2204      	movs	r2, #4
 8005776:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e045      	b.n	800580e <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	6979      	ldr	r1, [r7, #20]
 8005788:	4b23      	ldr	r3, [pc, #140]	; (8005818 <HAL_RTC_SetTime+0x178>)
 800578a:	400b      	ands	r3, r1
 800578c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800579c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6899      	ldr	r1, [r3, #8]
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	691a      	ldr	r2, [r3, #16]
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	695b      	ldr	r3, [r3, #20]
 80057ac:	431a      	orrs	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68da      	ldr	r2, [r3, #12]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057c4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f003 0320 	and.w	r3, r3, #32
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d111      	bne.n	80057f8 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f000 f9e1 	bl	8005b9c <HAL_RTC_WaitForSynchro>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00b      	beq.n	80057f8 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	22ff      	movs	r2, #255	; 0xff
 80057e6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2204      	movs	r2, #4
 80057ec:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e00a      	b.n	800580e <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	22ff      	movs	r2, #255	; 0xff
 80057fe:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2201      	movs	r2, #1
 8005804:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800580c:	2300      	movs	r3, #0
  }
}
 800580e:	4618      	mov	r0, r3
 8005810:	371c      	adds	r7, #28
 8005812:	46bd      	mov	sp, r7
 8005814:	bd90      	pop	{r4, r7, pc}
 8005816:	bf00      	nop
 8005818:	007f7f7f 	.word	0x007f7f7f

0800581c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800581c:	b590      	push	{r4, r7, lr}
 800581e:	b087      	sub	sp, #28
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8005828:	2300      	movs	r3, #0
 800582a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	7f1b      	ldrb	r3, [r3, #28]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d101      	bne.n	8005838 <HAL_RTC_SetDate+0x1c>
 8005834:	2302      	movs	r3, #2
 8005836:	e092      	b.n	800595e <HAL_RTC_SetDate+0x142>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2201      	movs	r2, #1
 800583c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2202      	movs	r2, #2
 8005842:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10e      	bne.n	8005868 <HAL_RTC_SetDate+0x4c>
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	785b      	ldrb	r3, [r3, #1]
 800584e:	f003 0310 	and.w	r3, r3, #16
 8005852:	2b00      	cmp	r3, #0
 8005854:	d008      	beq.n	8005868 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	785b      	ldrb	r3, [r3, #1]
 800585a:	f023 0310 	bic.w	r3, r3, #16
 800585e:	b2db      	uxtb	r3, r3
 8005860:	330a      	adds	r3, #10
 8005862:	b2da      	uxtb	r2, r3
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d11c      	bne.n	80058a8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	78db      	ldrb	r3, [r3, #3]
 8005872:	4618      	mov	r0, r3
 8005874:	f000 f9e6 	bl	8005c44 <RTC_ByteToBcd2>
 8005878:	4603      	mov	r3, r0
 800587a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	785b      	ldrb	r3, [r3, #1]
 8005880:	4618      	mov	r0, r3
 8005882:	f000 f9df 	bl	8005c44 <RTC_ByteToBcd2>
 8005886:	4603      	mov	r3, r0
 8005888:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800588a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	789b      	ldrb	r3, [r3, #2]
 8005890:	4618      	mov	r0, r3
 8005892:	f000 f9d7 	bl	8005c44 <RTC_ByteToBcd2>
 8005896:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8005898:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80058a2:	4313      	orrs	r3, r2
 80058a4:	617b      	str	r3, [r7, #20]
 80058a6:	e00e      	b.n	80058c6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	78db      	ldrb	r3, [r3, #3]
 80058ac:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	785b      	ldrb	r3, [r3, #1]
 80058b2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80058b4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 80058ba:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80058c2:	4313      	orrs	r3, r2
 80058c4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	22ca      	movs	r2, #202	; 0xca
 80058cc:	625a      	str	r2, [r3, #36]	; 0x24
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	2253      	movs	r2, #83	; 0x53
 80058d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80058d6:	68f8      	ldr	r0, [r7, #12]
 80058d8:	f000 f988 	bl	8005bec <RTC_EnterInitMode>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00b      	beq.n	80058fa <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	22ff      	movs	r2, #255	; 0xff
 80058e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2204      	movs	r2, #4
 80058ee:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e031      	b.n	800595e <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	6979      	ldr	r1, [r7, #20]
 8005900:	4b19      	ldr	r3, [pc, #100]	; (8005968 <HAL_RTC_SetDate+0x14c>)
 8005902:	400b      	ands	r3, r1
 8005904:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68da      	ldr	r2, [r3, #12]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005914:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f003 0320 	and.w	r3, r3, #32
 8005920:	2b00      	cmp	r3, #0
 8005922:	d111      	bne.n	8005948 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f000 f939 	bl	8005b9c <HAL_RTC_WaitForSynchro>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00b      	beq.n	8005948 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	22ff      	movs	r2, #255	; 0xff
 8005936:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2204      	movs	r2, #4
 800593c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e00a      	b.n	800595e <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	22ff      	movs	r2, #255	; 0xff
 800594e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2201      	movs	r2, #1
 8005954:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800595c:	2300      	movs	r3, #0
  }
}
 800595e:	4618      	mov	r0, r3
 8005960:	371c      	adds	r7, #28
 8005962:	46bd      	mov	sp, r7
 8005964:	bd90      	pop	{r4, r7, pc}
 8005966:	bf00      	nop
 8005968:	00ffff3f 	.word	0x00ffff3f

0800596c <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800596c:	b590      	push	{r4, r7, lr}
 800596e:	b089      	sub	sp, #36	; 0x24
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8005978:	2300      	movs	r3, #0
 800597a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800597c:	2300      	movs	r3, #0
 800597e:	61fb      	str	r3, [r7, #28]
 8005980:	2300      	movs	r3, #0
 8005982:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	7f1b      	ldrb	r3, [r3, #28]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d101      	bne.n	8005990 <HAL_RTC_SetAlarm+0x24>
 800598c:	2302      	movs	r3, #2
 800598e:	e101      	b.n	8005b94 <HAL_RTC_SetAlarm+0x228>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2201      	movs	r2, #1
 8005994:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2202      	movs	r2, #2
 800599a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d137      	bne.n	8005a12 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d102      	bne.n	80059b6 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2200      	movs	r2, #0
 80059b4:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f000 f942 	bl	8005c44 <RTC_ByteToBcd2>
 80059c0:	4603      	mov	r3, r0
 80059c2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	785b      	ldrb	r3, [r3, #1]
 80059c8:	4618      	mov	r0, r3
 80059ca:	f000 f93b 	bl	8005c44 <RTC_ByteToBcd2>
 80059ce:	4603      	mov	r3, r0
 80059d0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80059d2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	789b      	ldrb	r3, [r3, #2]
 80059d8:	4618      	mov	r0, r3
 80059da:	f000 f933 	bl	8005c44 <RTC_ByteToBcd2>
 80059de:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80059e0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	7b1b      	ldrb	r3, [r3, #12]
 80059e8:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80059ea:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80059f4:	4618      	mov	r0, r3
 80059f6:	f000 f925 	bl	8005c44 <RTC_ByteToBcd2>
 80059fa:	4603      	mov	r3, r0
 80059fc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80059fe:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8005a06:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	61fb      	str	r3, [r7, #28]
 8005a10:	e023      	b.n	8005a5a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d102      	bne.n	8005a26 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2200      	movs	r2, #0
 8005a24:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	785b      	ldrb	r3, [r3, #1]
 8005a30:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8005a32:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8005a38:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	7b1b      	ldrb	r3, [r3, #12]
 8005a3e:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005a40:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a48:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005a4a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8005a50:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8005a56:	4313      	orrs	r3, r2
 8005a58:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	69db      	ldr	r3, [r3, #28]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	22ca      	movs	r2, #202	; 0xca
 8005a6c:	625a      	str	r2, [r3, #36]	; 0x24
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2253      	movs	r2, #83	; 0x53
 8005a74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a7e:	d13f      	bne.n	8005b00 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	689a      	ldr	r2, [r3, #8]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a8e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689a      	ldr	r2, [r3, #8]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a9e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005aa0:	f7fa fd54 	bl	800054c <HAL_GetTick>
 8005aa4:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005aa6:	e013      	b.n	8005ad0 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005aa8:	f7fa fd50 	bl	800054c <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ab6:	d90b      	bls.n	8005ad0 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	22ff      	movs	r2, #255	; 0xff
 8005abe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2203      	movs	r2, #3
 8005ac4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e061      	b.n	8005b94 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d0e4      	beq.n	8005aa8 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	69fa      	ldr	r2, [r7, #28]
 8005ae4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	689a      	ldr	r2, [r3, #8]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005afc:	609a      	str	r2, [r3, #8]
 8005afe:	e03e      	b.n	8005b7e <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	689a      	ldr	r2, [r3, #8]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005b0e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689a      	ldr	r2, [r3, #8]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b1e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b20:	f7fa fd14 	bl	800054c <HAL_GetTick>
 8005b24:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8005b26:	e013      	b.n	8005b50 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005b28:	f7fa fd10 	bl	800054c <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b36:	d90b      	bls.n	8005b50 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	22ff      	movs	r2, #255	; 0xff
 8005b3e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2203      	movs	r2, #3
 8005b44:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e021      	b.n	8005b94 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d0e4      	beq.n	8005b28 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69fa      	ldr	r2, [r7, #28]
 8005b64:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b7c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	22ff      	movs	r2, #255	; 0xff
 8005b84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3724      	adds	r7, #36	; 0x24
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd90      	pop	{r4, r7, pc}

08005b9c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68da      	ldr	r2, [r3, #12]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005bb6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005bb8:	f7fa fcc8 	bl	800054c <HAL_GetTick>
 8005bbc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005bbe:	e009      	b.n	8005bd4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005bc0:	f7fa fcc4 	bl	800054c <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bce:	d901      	bls.n	8005bd4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e007      	b.n	8005be4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	f003 0320 	and.w	r3, r3, #32
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d0ee      	beq.n	8005bc0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d119      	bne.n	8005c3a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c0e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c10:	f7fa fc9c 	bl	800054c <HAL_GetTick>
 8005c14:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005c16:	e009      	b.n	8005c2c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005c18:	f7fa fc98 	bl	800054c <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c26:	d901      	bls.n	8005c2c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e007      	b.n	8005c3c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d0ee      	beq.n	8005c18 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8005c52:	e005      	b.n	8005c60 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	3301      	adds	r3, #1
 8005c58:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8005c5a:	79fb      	ldrb	r3, [r7, #7]
 8005c5c:	3b0a      	subs	r3, #10
 8005c5e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8005c60:	79fb      	ldrb	r3, [r7, #7]
 8005c62:	2b09      	cmp	r3, #9
 8005c64:	d8f6      	bhi.n	8005c54 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	011b      	lsls	r3, r3, #4
 8005c6c:	b2da      	uxtb	r2, r3
 8005c6e:	79fb      	ldrb	r3, [r7, #7]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	b2db      	uxtb	r3, r3
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b087      	sub	sp, #28
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	7f1b      	ldrb	r3, [r3, #28]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d101      	bne.n	8005c9c <HAL_RTCEx_SetTimeStamp+0x1c>
 8005c98:	2302      	movs	r3, #2
 8005c9a:	e03e      	b.n	8005d1a <HAL_RTCEx_SetTimeStamp+0x9a>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2202      	movs	r2, #2
 8005ca6:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689a      	ldr	r2, [r3, #8]
 8005cae:	4b1e      	ldr	r3, [pc, #120]	; (8005d28 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	22ca      	movs	r2, #202	; 0xca
 8005cc2:	625a      	str	r2, [r3, #36]	; 0x24
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2253      	movs	r2, #83	; 0x53
 8005cca:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f022 0206 	bic.w	r2, r2, #6
 8005cda:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689a      	ldr	r2, [r3, #8]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d02:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	22ff      	movs	r2, #255	; 0xff
 8005d0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	371c      	adds	r7, #28
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	fffff7f7 	.word	0xfffff7f7

08005d2c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b088      	sub	sp, #32
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8005d34:	2300      	movs	r3, #0
 8005d36:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d101      	bne.n	8005d4a <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e14d      	b.n	8005fe6 <HAL_SAI_Init+0x2ba>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d106      	bne.n	8005d64 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f00f ffd8 	bl	8015d14 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2202      	movs	r2, #2
 8005d68:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f953 	bl	8006018 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d00c      	beq.n	8005d94 <HAL_SAI_Init+0x68>
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d80d      	bhi.n	8005d9a <HAL_SAI_Init+0x6e>
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d002      	beq.n	8005d88 <HAL_SAI_Init+0x5c>
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d003      	beq.n	8005d8e <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8005d86:	e008      	b.n	8005d9a <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	61fb      	str	r3, [r7, #28]
      break;
 8005d8c:	e006      	b.n	8005d9c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005d8e:	2310      	movs	r3, #16
 8005d90:	61fb      	str	r3, [r7, #28]
      break;
 8005d92:	e003      	b.n	8005d9c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005d94:	2320      	movs	r3, #32
 8005d96:	61fb      	str	r3, [r7, #28]
      break;
 8005d98:	e000      	b.n	8005d9c <HAL_SAI_Init+0x70>
    break;
 8005d9a:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	2b03      	cmp	r3, #3
 8005da2:	d81e      	bhi.n	8005de2 <HAL_SAI_Init+0xb6>
 8005da4:	a201      	add	r2, pc, #4	; (adr r2, 8005dac <HAL_SAI_Init+0x80>)
 8005da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005daa:	bf00      	nop
 8005dac:	08005dbd 	.word	0x08005dbd
 8005db0:	08005dc3 	.word	0x08005dc3
 8005db4:	08005dcb 	.word	0x08005dcb
 8005db8:	08005dd3 	.word	0x08005dd3
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	617b      	str	r3, [r7, #20]
      }
      break;
 8005dc0:	e010      	b.n	8005de4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8005dc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dc6:	617b      	str	r3, [r7, #20]
      }
      break;
 8005dc8:	e00c      	b.n	8005de4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8005dca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005dce:	617b      	str	r3, [r7, #20]
      }
      break;
 8005dd0:	e008      	b.n	8005de4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8005dd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005dd6:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	f043 0301 	orr.w	r3, r3, #1
 8005dde:	61fb      	str	r3, [r7, #28]
      }
      break;
 8005de0:	e000      	b.n	8005de4 <HAL_SAI_Init+0xb8>
  default:
    break;
 8005de2:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a81      	ldr	r2, [pc, #516]	; (8005ff0 <HAL_SAI_Init+0x2c4>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d004      	beq.n	8005df8 <HAL_SAI_Init+0xcc>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a80      	ldr	r2, [pc, #512]	; (8005ff4 <HAL_SAI_Init+0x2c8>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d103      	bne.n	8005e00 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8005df8:	4a7f      	ldr	r2, [pc, #508]	; (8005ff8 <HAL_SAI_Init+0x2cc>)
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	6013      	str	r3, [r2, #0]
 8005dfe:	e002      	b.n	8005e06 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005e00:	4a7e      	ldr	r2, [pc, #504]	; (8005ffc <HAL_SAI_Init+0x2d0>)
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d043      	beq.n	8005e96 <HAL_SAI_Init+0x16a>
  {
    uint32_t freq = 0;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a76      	ldr	r2, [pc, #472]	; (8005ff0 <HAL_SAI_Init+0x2c4>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d004      	beq.n	8005e26 <HAL_SAI_Init+0xfa>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a74      	ldr	r2, [pc, #464]	; (8005ff4 <HAL_SAI_Init+0x2c8>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d104      	bne.n	8005e30 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005e26:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005e2a:	f7ff fa79 	bl	8005320 <HAL_RCCEx_GetPeriphCLKFreq>
 8005e2e:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a72      	ldr	r2, [pc, #456]	; (8006000 <HAL_SAI_Init+0x2d4>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d004      	beq.n	8005e44 <HAL_SAI_Init+0x118>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a71      	ldr	r2, [pc, #452]	; (8006004 <HAL_SAI_Init+0x2d8>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d104      	bne.n	8005e4e <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005e44:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005e48:	f7ff fa6a 	bl	8005320 <HAL_RCCEx_GetPeriphCLKFreq>
 8005e4c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	4613      	mov	r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4413      	add	r3, r2
 8005e56:	005b      	lsls	r3, r3, #1
 8005e58:	461a      	mov	r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	69db      	ldr	r3, [r3, #28]
 8005e5e:	025b      	lsls	r3, r3, #9
 8005e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e64:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	4a67      	ldr	r2, [pc, #412]	; (8006008 <HAL_SAI_Init+0x2dc>)
 8005e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e6e:	08da      	lsrs	r2, r3, #3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8005e74:	68f9      	ldr	r1, [r7, #12]
 8005e76:	4b64      	ldr	r3, [pc, #400]	; (8006008 <HAL_SAI_Init+0x2dc>)
 8005e78:	fba3 2301 	umull	r2, r3, r3, r1
 8005e7c:	08da      	lsrs	r2, r3, #3
 8005e7e:	4613      	mov	r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4413      	add	r3, r2
 8005e84:	005b      	lsls	r3, r3, #1
 8005e86:	1aca      	subs	r2, r1, r3
 8005e88:	2a08      	cmp	r2, #8
 8005e8a:	d904      	bls.n	8005e96 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv+= 1;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a1b      	ldr	r3, [r3, #32]
 8005e90:	1c5a      	adds	r2, r3, #1
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	621a      	str	r2, [r3, #32]
    }
  }

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d003      	beq.n	8005ea6 <HAL_SAI_Init+0x17a>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d109      	bne.n	8005eba <HAL_SAI_Init+0x18e>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d101      	bne.n	8005eb2 <HAL_SAI_Init+0x186>
 8005eae:	2300      	movs	r3, #0
 8005eb0:	e001      	b.n	8005eb6 <HAL_SAI_Init+0x18a>
 8005eb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005eb6:	61bb      	str	r3, [r7, #24]
 8005eb8:	e008      	b.n	8005ecc <HAL_SAI_Init+0x1a0>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d102      	bne.n	8005ec8 <HAL_SAI_Init+0x19c>
 8005ec2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ec6:	e000      	b.n	8005eca <HAL_SAI_Init+0x19e>
 8005ec8:	2300      	movs	r3, #0
 8005eca:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6819      	ldr	r1, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	4b4d      	ldr	r3, [pc, #308]	; (800600c <HAL_SAI_Init+0x2e0>)
 8005ed8:	400b      	ands	r3, r1
 8005eda:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6819      	ldr	r1, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	685a      	ldr	r2, [r3, #4]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eea:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005ef0:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef6:	431a      	orrs	r2, r3
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8005f04:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005f10:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	051b      	lsls	r3, r3, #20
 8005f18:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	6859      	ldr	r1, [r3, #4]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	4b38      	ldr	r3, [pc, #224]	; (8006010 <HAL_SAI_Init+0x2e4>)
 8005f2e:	400b      	ands	r3, r1
 8005f30:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	6859      	ldr	r1, [r3, #4]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	699a      	ldr	r2, [r3, #24]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f40:	431a      	orrs	r2, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f46:	431a      	orrs	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6899      	ldr	r1, [r3, #8]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	4b2e      	ldr	r3, [pc, #184]	; (8006014 <HAL_SAI_Init+0x2e8>)
 8005f5c:	400b      	ands	r3, r1
 8005f5e:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6899      	ldr	r1, [r3, #8]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6a:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8005f70:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8005f76:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8005f7c:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f82:	3b01      	subs	r3, #1
 8005f84:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8005f86:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	430a      	orrs	r2, r1
 8005f8e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68d9      	ldr	r1, [r3, #12]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	f24f 0320 	movw	r3, #61472	; 0xf020
 8005f9e:	400b      	ands	r3, r1
 8005fa0:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68d9      	ldr	r1, [r3, #12]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fb0:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fb6:	041b      	lsls	r3, r3, #16
 8005fb8:	431a      	orrs	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	021b      	lsls	r3, r3, #8
 8005fc2:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3720      	adds	r7, #32
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	40015804 	.word	0x40015804
 8005ff4:	40015824 	.word	0x40015824
 8005ff8:	40015800 	.word	0x40015800
 8005ffc:	40015c00 	.word	0x40015c00
 8006000:	40015c04 	.word	0x40015c04
 8006004:	40015c24 	.word	0x40015c24
 8006008:	cccccccd 	.word	0xcccccccd
 800600c:	ff05c010 	.word	0xff05c010
 8006010:	ffff1ff0 	.word	0xffff1ff0
 8006014:	fff88000 	.word	0xfff88000

08006018 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006018:	b490      	push	{r4, r7}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8006020:	4b16      	ldr	r3, [pc, #88]	; (800607c <SAI_Disable+0x64>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a16      	ldr	r2, [pc, #88]	; (8006080 <SAI_Disable+0x68>)
 8006026:	fba2 2303 	umull	r2, r3, r2, r3
 800602a:	0b1b      	lsrs	r3, r3, #12
 800602c:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800602e:	2300      	movs	r3, #0
 8006030:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006040:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8006042:	4623      	mov	r3, r4
 8006044:	1e5c      	subs	r4, r3, #1
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10a      	bne.n	8006060 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006050:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	73fb      	strb	r3, [r7, #15]
      break;
 800605e:	e006      	b.n	800606e <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1e9      	bne.n	8006042 <SAI_Disable+0x2a>

  return status;
 800606e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006070:	4618      	mov	r0, r3
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bc90      	pop	{r4, r7}
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop
 800607c:	2000002c 	.word	0x2000002c
 8006080:	95cbec1b 	.word	0x95cbec1b

08006084 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e01d      	b.n	80060d2 <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d105      	bne.n	80060ae <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f00f fa75 	bl	8015598 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2203      	movs	r2, #3
 80060b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f80f 	bl	80060da <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3708      	adds	r7, #8
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80060da:	b5b0      	push	{r4, r5, r7, lr}
 80060dc:	b08e      	sub	sp, #56	; 0x38
 80060de:	af04      	add	r7, sp, #16
 80060e0:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80060e2:	2300      	movs	r3, #0
 80060e4:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80060e6:	2300      	movs	r3, #0
 80060e8:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80060ea:	2300      	movs	r3, #0
 80060ec:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80060ee:	2300      	movs	r3, #0
 80060f0:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80060f2:	2300      	movs	r3, #0
 80060f4:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80060f6:	2300      	movs	r3, #0
 80060f8:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80060fa:	2376      	movs	r3, #118	; 0x76
 80060fc:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681d      	ldr	r5, [r3, #0]
 8006102:	466c      	mov	r4, sp
 8006104:	f107 0318 	add.w	r3, r7, #24
 8006108:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800610c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006110:	f107 030c 	add.w	r3, r7, #12
 8006114:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006116:	4628      	mov	r0, r5
 8006118:	f003 fbf0 	bl	80098fc <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	685a      	ldr	r2, [r3, #4]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800612a:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4618      	mov	r0, r3
 8006132:	f003 fc2d 	bl	8009990 <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	685a      	ldr	r2, [r3, #4]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006144:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 8006146:	2002      	movs	r0, #2
 8006148:	f7fa fa0c 	bl	8000564 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 fff3 	bl	8007138 <SD_PowerON>
 8006152:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8006154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00b      	beq.n	8006172 <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006168:	431a      	orrs	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e013      	b.n	800619a <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 ff18 	bl	8006fa8 <SD_InitCard>
 8006178:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800617a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00b      	beq.n	8006198 <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	431a      	orrs	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e000      	b.n	800619a <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3728      	adds	r7, #40	; 0x28
 800619e:	46bd      	mov	sp, r7
 80061a0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080061a4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read  
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b08c      	sub	sp, #48	; 0x30
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
 80061b0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80061b2:	2300      	movs	r3, #0
 80061b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d107      	bne.n	80061cc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e0b0      	b.n	800632e <HAL_SD_ReadBlocks_DMA+0x18a>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	f040 80a9 	bne.w	800632c <HAL_SD_ReadBlocks_DMA+0x188>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	441a      	add	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d907      	bls.n	80061fe <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e097      	b.n	800632e <HAL_SD_ReadBlocks_DMA+0x18a>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2203      	movs	r2, #3
 8006202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2200      	movs	r2, #0
 800620c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800621c:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006222:	4a45      	ldr	r2, [pc, #276]	; (8006338 <HAL_SD_ReadBlocks_DMA+0x194>)
 8006224:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800622a:	4a44      	ldr	r2, [pc, #272]	; (800633c <HAL_SD_ReadBlocks_DMA+0x198>)
 800622c:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006232:	2200      	movs	r2, #0
 8006234:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	3380      	adds	r3, #128	; 0x80
 8006240:	4619      	mov	r1, r3
 8006242:	68ba      	ldr	r2, [r7, #8]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	025b      	lsls	r3, r3, #9
 8006248:	089b      	lsrs	r3, r3, #2
 800624a:	f7fa ff0d 	bl	8001068 <HAL_DMA_Start_IT>
    
    /* Enable SD DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f042 0208 	orr.w	r2, r2, #8
 800625c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006262:	2b01      	cmp	r3, #1
 8006264:	d002      	beq.n	800626c <HAL_SD_ReadBlocks_DMA+0xc8>
    {
      BlockAdd *= 512U;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	025b      	lsls	r3, r3, #9
 800626a:	607b      	str	r3, [r7, #4]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800626c:	f04f 33ff 	mov.w	r3, #4294967295
 8006270:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	025b      	lsls	r3, r3, #9
 8006276:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006278:	2390      	movs	r3, #144	; 0x90
 800627a:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800627c:	2302      	movs	r3, #2
 800627e:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006280:	2300      	movs	r3, #0
 8006282:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8006284:	2301      	movs	r3, #1
 8006286:	62bb      	str	r3, [r7, #40]	; 0x28
    SDMMC_ConfigData(hsd->Instance, &config);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f107 0214 	add.w	r2, r7, #20
 8006290:	4611      	mov	r1, r2
 8006292:	4618      	mov	r0, r3
 8006294:	f003 fbe4 	bl	8009a60 <SDMMC_ConfigData>

    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80062a0:	4618      	mov	r0, r3
 80062a2:	f003 fc09 	bl	8009ab8 <SDMMC_CmdBlockLength>
 80062a6:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 80062a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d010      	beq.n	80062d0 <HAL_SD_ReadBlocks_DMA+0x12c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80062b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062be:	431a      	orrs	r2, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e02e      	b.n	800632e <HAL_SD_ReadBlocks_DMA+0x18a>
    }
        
    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d90a      	bls.n	80062ec <HAL_SD_ReadBlocks_DMA+0x148>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2282      	movs	r2, #130	; 0x82
 80062da:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6879      	ldr	r1, [r7, #4]
 80062e2:	4618      	mov	r0, r3
 80062e4:	f003 fc30 	bl	8009b48 <SDMMC_CmdReadMultiBlock>
 80062e8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80062ea:	e009      	b.n	8006300 <HAL_SD_ReadBlocks_DMA+0x15c>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2281      	movs	r2, #129	; 0x81
 80062f0:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */ 
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6879      	ldr	r1, [r7, #4]
 80062f8:	4618      	mov	r0, r3
 80062fa:	f003 fc01 	bl	8009b00 <SDMMC_CmdReadSingleBlock>
 80062fe:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006302:	2b00      	cmp	r3, #0
 8006304:	d010      	beq.n	8006328 <HAL_SD_ReadBlocks_DMA+0x184>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800630e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006316:	431a      	orrs	r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e002      	b.n	800632e <HAL_SD_ReadBlocks_DMA+0x18a>
    }

    return HAL_OK;
 8006328:	2300      	movs	r3, #0
 800632a:	e000      	b.n	800632e <HAL_SD_ReadBlocks_DMA+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800632c:	2302      	movs	r3, #2
  }
}
 800632e:	4618      	mov	r0, r3
 8006330:	3730      	adds	r7, #48	; 0x30
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	08006dad 	.word	0x08006dad
 800633c:	08006e1b 	.word	0x08006e1b

08006340 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b08c      	sub	sp, #48	; 0x30
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
 800634c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800634e:	2300      	movs	r3, #0
 8006350:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d107      	bne.n	8006368 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e0b0      	b.n	80064ca <HAL_SD_WriteBlocks_DMA+0x18a>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b01      	cmp	r3, #1
 8006372:	f040 80a9 	bne.w	80064c8 <HAL_SD_WriteBlocks_DMA+0x188>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	441a      	add	r2, r3
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006386:	429a      	cmp	r2, r3
 8006388:	d907      	bls.n	800639a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e097      	b.n	80064ca <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2203      	movs	r2, #3
 800639e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2200      	movs	r2, #0
 80063a8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));    
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f042 021a 	orr.w	r2, r2, #26
 80063b8:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063be:	4a45      	ldr	r2, [pc, #276]	; (80064d4 <HAL_SD_WriteBlocks_DMA+0x194>)
 80063c0:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c6:	4a44      	ldr	r2, [pc, #272]	; (80064d8 <HAL_SD_WriteBlocks_DMA+0x198>)
 80063c8:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ce:	2200      	movs	r2, #0
 80063d0:	651a      	str	r2, [r3, #80]	; 0x50
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d002      	beq.n	80063e0 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      BlockAdd *= 512U;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	025b      	lsls	r3, r3, #9
 80063de:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80063e8:	4618      	mov	r0, r3
 80063ea:	f003 fb65 	bl	8009ab8 <SDMMC_CmdBlockLength>
 80063ee:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 80063f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d010      	beq.n	8006418 <HAL_SD_WriteBlocks_DMA+0xd8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80063fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006406:	431a      	orrs	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e058      	b.n	80064ca <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d90a      	bls.n	8006434 <HAL_SD_WriteBlocks_DMA+0xf4>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	22a0      	movs	r2, #160	; 0xa0
 8006422:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	6879      	ldr	r1, [r7, #4]
 800642a:	4618      	mov	r0, r3
 800642c:	f003 fbd4 	bl	8009bd8 <SDMMC_CmdWriteMultiBlock>
 8006430:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006432:	e009      	b.n	8006448 <HAL_SD_WriteBlocks_DMA+0x108>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2290      	movs	r2, #144	; 0x90
 8006438:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	6879      	ldr	r1, [r7, #4]
 8006440:	4618      	mov	r0, r3
 8006442:	f003 fba5 	bl	8009b90 <SDMMC_CmdWriteSingleBlock>
 8006446:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800644a:	2b00      	cmp	r3, #0
 800644c:	d010      	beq.n	8006470 <HAL_SD_WriteBlocks_DMA+0x130>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006456:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800645c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645e:	431a      	orrs	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e02c      	b.n	80064ca <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f042 0208 	orr.w	r2, r2, #8
 800647e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006484:	68b9      	ldr	r1, [r7, #8]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	3380      	adds	r3, #128	; 0x80
 800648c:	461a      	mov	r2, r3
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	025b      	lsls	r3, r3, #9
 8006492:	089b      	lsrs	r3, r3, #2
 8006494:	f7fa fde8 	bl	8001068 <HAL_DMA_Start_IT>
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006498:	f04f 33ff 	mov.w	r3, #4294967295
 800649c:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	025b      	lsls	r3, r3, #9
 80064a2:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80064a4:	2390      	movs	r3, #144	; 0x90
 80064a6:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80064a8:	2300      	movs	r3, #0
 80064aa:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80064ac:	2300      	movs	r3, #0
 80064ae:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80064b0:	2301      	movs	r3, #1
 80064b2:	62bb      	str	r3, [r7, #40]	; 0x28
    SDMMC_ConfigData(hsd->Instance, &config);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f107 0214 	add.w	r2, r7, #20
 80064bc:	4611      	mov	r1, r2
 80064be:	4618      	mov	r0, r3
 80064c0:	f003 face 	bl	8009a60 <SDMMC_ConfigData>
    
    return HAL_OK;
 80064c4:	2300      	movs	r3, #0
 80064c6:	e000      	b.n	80064ca <HAL_SD_WriteBlocks_DMA+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80064c8:	2302      	movs	r3, #2
  }
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3730      	adds	r7, #48	; 0x30
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	08006d83 	.word	0x08006d83
 80064d8:	08006e1b 	.word	0x08006e1b

080064dc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80064e4:	2300      	movs	r3, #0
 80064e6:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDMMC interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DATAEND) != RESET)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f000 808b 	beq.w	800660e <HAL_SD_IRQHandler+0x132>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND); 
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006500:	639a      	str	r2, [r3, #56]	; 0x38
    
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006510:	63da      	str	r2, [r3, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006516:	f003 0308 	and.w	r3, r3, #8
 800651a:	2b00      	cmp	r3, #0
 800651c:	d03a      	beq.n	8006594 <HAL_SD_IRQHandler+0xb8>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b00      	cmp	r3, #0
 8006528:	d105      	bne.n	8006536 <HAL_SD_IRQHandler+0x5a>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652e:	f003 0320 	and.w	r3, r3, #32
 8006532:	2b00      	cmp	r3, #0
 8006534:	d011      	beq.n	800655a <HAL_SD_IRQHandler+0x7e>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4618      	mov	r0, r3
 800653c:	f003 fb70 	bl	8009c20 <SDMMC_CmdStopTransfer>
 8006540:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d008      	beq.n	800655a <HAL_SD_IRQHandler+0x7e>
        {
          hsd->ErrorCode |= errorstate;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	431a      	orrs	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f915 	bl	8006784 <HAL_SD_ErrorCallback>
#endif
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006562:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	2b00      	cmp	r3, #0
 8006576:	d105      	bne.n	8006584 <HAL_SD_IRQHandler+0xa8>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800657c:	f003 0302 	and.w	r3, r3, #2
 8006580:	2b00      	cmp	r3, #0
 8006582:	d003      	beq.n	800658c <HAL_SD_IRQHandler+0xb0>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f00c fcf3 	bl	8012f70 <HAL_SD_RxCpltCallback>
#else
      HAL_SD_ErrorCallback(hsd);
#endif
    }
  }
}
 800658a:	e0f3      	b.n	8006774 <HAL_SD_IRQHandler+0x298>
        HAL_SD_TxCpltCallback(hsd);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f00c fce5 	bl	8012f5c <HAL_SD_TxCpltCallback>
}
 8006592:	e0ef      	b.n	8006774 <HAL_SD_IRQHandler+0x298>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800659c:	2b00      	cmp	r3, #0
 800659e:	f000 80e9 	beq.w	8006774 <HAL_SD_IRQHandler+0x298>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a6:	f003 0320 	and.w	r3, r3, #32
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d011      	beq.n	80065d2 <HAL_SD_IRQHandler+0xf6>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4618      	mov	r0, r3
 80065b4:	f003 fb34 	bl	8009c20 <SDMMC_CmdStopTransfer>
 80065b8:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d008      	beq.n	80065d2 <HAL_SD_IRQHandler+0xf6>
          hsd->ErrorCode |= errorstate;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	431a      	orrs	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f8d9 	bl	8006784 <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d6:	f003 0301 	and.w	r3, r3, #1
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f040 80ca 	bne.w	8006774 <HAL_SD_IRQHandler+0x298>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e4:	f003 0302 	and.w	r3, r3, #2
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f040 80c3 	bne.w	8006774 <HAL_SD_IRQHandler+0x298>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f022 0208 	bic.w	r2, r2, #8
 80065fc:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f00c fca8 	bl	8012f5c <HAL_SD_TxCpltCallback>
}
 800660c:	e0b2      	b.n	8006774 <HAL_SD_IRQHandler+0x298>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXFIFOHE) != RESET)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d008      	beq.n	800662e <HAL_SD_IRQHandler+0x152>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_TXFIFOHE);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006624:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 ffe3 	bl	80075f2 <SD_Write_IT>
}
 800662c:	e0a2      	b.n	8006774 <HAL_SD_IRQHandler+0x298>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXFIFOHF) != RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006634:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d008      	beq.n	800664e <HAL_SD_IRQHandler+0x172>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXFIFOHF);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006644:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 ffab 	bl	80075a2 <SD_Read_IT>
}
 800664c:	e092      	b.n	8006774 <HAL_SD_IRQHandler+0x298>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_TXUNDERR) != RESET)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006654:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006658:	2b00      	cmp	r3, #0
 800665a:	f000 808b 	beq.w	8006774 <HAL_SD_IRQHandler+0x298>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006664:	f003 0302 	and.w	r3, r3, #2
 8006668:	2b00      	cmp	r3, #0
 800666a:	d005      	beq.n	8006678 <HAL_SD_IRQHandler+0x19c>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006670:	f043 0202 	orr.w	r2, r3, #2
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800667e:	f003 0308 	and.w	r3, r3, #8
 8006682:	2b00      	cmp	r3, #0
 8006684:	d005      	beq.n	8006692 <HAL_SD_IRQHandler+0x1b6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668a:	f043 0208 	orr.w	r2, r3, #8
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006698:	f003 0320 	and.w	r3, r3, #32
 800669c:	2b00      	cmp	r3, #0
 800669e:	d005      	beq.n	80066ac <HAL_SD_IRQHandler+0x1d0>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a4:	f043 0220 	orr.w	r2, r3, #32
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066b2:	f003 0310 	and.w	r3, r3, #16
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d005      	beq.n	80066c6 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066be:	f043 0210 	orr.w	r2, r3, #16
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80066ce:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80066de:	63da      	str	r2, [r3, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d036      	beq.n	800675a <HAL_SD_IRQHandler+0x27e>
      if(hsd->hdmatx != NULL)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d011      	beq.n	8006718 <HAL_SD_IRQHandler+0x23c>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f8:	4a20      	ldr	r2, [pc, #128]	; (800677c <HAL_SD_IRQHandler+0x2a0>)
 80066fa:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006700:	4618      	mov	r0, r3
 8006702:	f7fa fd11 	bl	8001128 <HAL_DMA_Abort_IT>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d033      	beq.n	8006774 <HAL_SD_IRQHandler+0x298>
          SD_DMATxAbort(hsd->hdmatx);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006710:	4618      	mov	r0, r3
 8006712:	f000 fbcd 	bl	8006eb0 <SD_DMATxAbort>
}
 8006716:	e02d      	b.n	8006774 <HAL_SD_IRQHandler+0x298>
      else if(hsd->hdmarx != NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800671c:	2b00      	cmp	r3, #0
 800671e:	d011      	beq.n	8006744 <HAL_SD_IRQHandler+0x268>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006724:	4a16      	ldr	r2, [pc, #88]	; (8006780 <HAL_SD_IRQHandler+0x2a4>)
 8006726:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800672c:	4618      	mov	r0, r3
 800672e:	f7fa fcfb 	bl	8001128 <HAL_DMA_Abort_IT>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d01d      	beq.n	8006774 <HAL_SD_IRQHandler+0x298>
          SD_DMARxAbort(hsd->hdmarx);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800673c:	4618      	mov	r0, r3
 800673e:	f000 fbf5 	bl	8006f2c <SD_DMARxAbort>
}
 8006742:	e017      	b.n	8006774 <HAL_SD_IRQHandler+0x298>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f00c fbf8 	bl	8012f48 <HAL_SD_AbortCallback>
}
 8006758:	e00c      	b.n	8006774 <HAL_SD_IRQHandler+0x298>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675e:	f003 0308 	and.w	r3, r3, #8
 8006762:	2b00      	cmp	r3, #0
 8006764:	d006      	beq.n	8006774 <HAL_SD_IRQHandler+0x298>
      hsd->State = HAL_SD_STATE_READY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f808 	bl	8006784 <HAL_SD_ErrorCallback>
}
 8006774:	bf00      	nop
 8006776:	3710      	adds	r7, #16
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}
 800677c:	08006eb1 	.word	0x08006eb1
 8006780:	08006f2d 	.word	0x08006f2d

08006784 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 80067a2:	2300      	movs	r3, #0
 80067a4:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067aa:	0e1b      	lsrs	r3, r3, #24
 80067ac:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	099b      	lsrs	r3, r3, #6
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	f003 0303 	and.w	r3, r3, #3
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	089b      	lsrs	r3, r3, #2
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	f003 030f 	and.w	r3, r3, #15
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	f003 0303 	and.w	r3, r3, #3
 80067d6:	b2da      	uxtb	r2, r3
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067e0:	0c1b      	lsrs	r3, r3, #16
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	b2da      	uxtb	r2, r3
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067f2:	0a1b      	lsrs	r3, r3, #8
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	b2da      	uxtb	r2, r3
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006804:	b2db      	uxtb	r3, r3
 8006806:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	b2da      	uxtb	r2, r3
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006814:	0e1b      	lsrs	r3, r3, #24
 8006816:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	b29b      	uxth	r3, r3
 800681c:	011b      	lsls	r3, r3, #4
 800681e:	b29a      	uxth	r2, r3
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006828:	0c1b      	lsrs	r3, r3, #16
 800682a:	b2db      	uxtb	r3, r3
 800682c:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	88db      	ldrh	r3, [r3, #6]
 8006832:	b29a      	uxth	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	091b      	lsrs	r3, r3, #4
 8006838:	b29b      	uxth	r3, r3
 800683a:	f003 030f 	and.w	r3, r3, #15
 800683e:	b29b      	uxth	r3, r3
 8006840:	4313      	orrs	r3, r2
 8006842:	b29a      	uxth	r2, r3
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	b2db      	uxtb	r3, r3
 800684c:	f003 030f 	and.w	r3, r3, #15
 8006850:	b2da      	uxtb	r2, r3
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800685a:	0a1b      	lsrs	r3, r3, #8
 800685c:	b2db      	uxtb	r3, r3
 800685e:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	09db      	lsrs	r3, r3, #7
 8006864:	b2db      	uxtb	r3, r3
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	b2da      	uxtb	r2, r3
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	099b      	lsrs	r3, r3, #6
 8006874:	b2db      	uxtb	r3, r3
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	b2da      	uxtb	r2, r3
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	095b      	lsrs	r3, r3, #5
 8006884:	b2db      	uxtb	r3, r3
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	b2da      	uxtb	r2, r3
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	091b      	lsrs	r3, r3, #4
 8006894:	b2db      	uxtb	r3, r3
 8006896:	f003 0301 	and.w	r3, r3, #1
 800689a:	b2da      	uxtb	r2, r3
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	2200      	movs	r2, #0
 80068a4:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f040 8086 	bne.w	80069bc <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	029b      	lsls	r3, r3, #10
 80068b4:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	691a      	ldr	r2, [r3, #16]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	431a      	orrs	r2, r3
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068d6:	0e1b      	lsrs	r3, r3, #24
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	691a      	ldr	r2, [r3, #16]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	099b      	lsrs	r3, r3, #6
 80068e4:	f003 0303 	and.w	r3, r3, #3
 80068e8:	431a      	orrs	r2, r3
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	08db      	lsrs	r3, r3, #3
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	f003 0307 	and.w	r3, r3, #7
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	b2db      	uxtb	r3, r3
 8006902:	f003 0307 	and.w	r3, r3, #7
 8006906:	b2da      	uxtb	r2, r3
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006910:	0c1b      	lsrs	r3, r3, #16
 8006912:	b2db      	uxtb	r3, r3
 8006914:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	095b      	lsrs	r3, r3, #5
 800691a:	b2db      	uxtb	r3, r3
 800691c:	f003 0307 	and.w	r3, r3, #7
 8006920:	b2da      	uxtb	r2, r3
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	089b      	lsrs	r3, r3, #2
 800692a:	b2db      	uxtb	r3, r3
 800692c:	f003 0307 	and.w	r3, r3, #7
 8006930:	b2da      	uxtb	r2, r3
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	b2db      	uxtb	r3, r3
 800693a:	005b      	lsls	r3, r3, #1
 800693c:	b2db      	uxtb	r3, r3
 800693e:	f003 0306 	and.w	r3, r3, #6
 8006942:	b2da      	uxtb	r2, r3
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800694c:	0a1b      	lsrs	r3, r3, #8
 800694e:	b2db      	uxtb	r3, r3
 8006950:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	7e1b      	ldrb	r3, [r3, #24]
 8006956:	b2da      	uxtb	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	09db      	lsrs	r3, r3, #7
 800695c:	b2db      	uxtb	r3, r3
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	b2db      	uxtb	r3, r3
 8006964:	4313      	orrs	r3, r2
 8006966:	b2da      	uxtb	r2, r3
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	691b      	ldr	r3, [r3, #16]
 8006970:	1c5a      	adds	r2, r3, #1
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	7e1b      	ldrb	r3, [r3, #24]
 800697a:	b2db      	uxtb	r3, r3
 800697c:	3302      	adds	r3, #2
 800697e:	2201      	movs	r2, #1
 8006980:	409a      	lsls	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006986:	fb02 f203 	mul.w	r2, r2, r3
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	7a1b      	ldrb	r3, [r3, #8]
 8006992:	b2db      	uxtb	r3, r3
 8006994:	461a      	mov	r2, r3
 8006996:	2301      	movs	r3, #1
 8006998:	4093      	lsls	r3, r2
 800699a:	461a      	mov	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80069a8:	0a52      	lsrs	r2, r2, #9
 80069aa:	fb02 f203 	mul.w	r2, r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069b8:	661a      	str	r2, [r3, #96]	; 0x60
 80069ba:	e04d      	b.n	8006a58 <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d138      	bne.n	8006a36 <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	041b      	lsls	r3, r3, #16
 80069d0:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069dc:	0e1b      	lsrs	r3, r3, #24
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	691a      	ldr	r2, [r3, #16]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	021b      	lsls	r3, r3, #8
 80069ea:	431a      	orrs	r2, r3
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069f4:	0c1b      	lsrs	r3, r3, #16
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	691a      	ldr	r2, [r3, #16]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	431a      	orrs	r2, r3
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a0a:	0a1b      	lsrs	r3, r3, #8
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	3301      	adds	r3, #1
 8006a16:	029a      	lsls	r2, r3, #10
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	655a      	str	r2, [r3, #84]	; 0x54
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a2a:	659a      	str	r2, [r3, #88]	; 0x58
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	661a      	str	r2, [r3, #96]	; 0x60
 8006a34:	e010      	b.n	8006a58 <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006a3e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a44:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e0c1      	b.n	8006bdc <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	099b      	lsrs	r3, r3, #6
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	b2da      	uxtb	r2, r3
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	005b      	lsls	r3, r3, #1
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006a74:	b2da      	uxtb	r2, r3
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	7e9b      	ldrb	r3, [r3, #26]
 8006a86:	b2da      	uxtb	r2, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	09db      	lsrs	r3, r3, #7
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	f003 0301 	and.w	r3, r3, #1
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	4313      	orrs	r3, r2
 8006a96:	b2da      	uxtb	r2, r3
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006aa4:	b2da      	uxtb	r2, r3
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aae:	0e1b      	lsrs	r3, r3, #24
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	09db      	lsrs	r3, r3, #7
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	f003 0301 	and.w	r3, r3, #1
 8006abe:	b2da      	uxtb	r2, r3
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	095b      	lsrs	r3, r3, #5
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	f003 0303 	and.w	r3, r3, #3
 8006ace:	b2da      	uxtb	r2, r3
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	089b      	lsrs	r3, r3, #2
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	f003 0307 	and.w	r3, r3, #7
 8006ade:	b2da      	uxtb	r2, r3
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	f003 030c 	and.w	r3, r3, #12
 8006af0:	b2da      	uxtb	r2, r3
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006afa:	0c1b      	lsrs	r3, r3, #16
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	7fdb      	ldrb	r3, [r3, #31]
 8006b04:	b2da      	uxtb	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	099b      	lsrs	r3, r3, #6
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	f003 0303 	and.w	r3, r3, #3
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	4313      	orrs	r3, r2
 8006b14:	b2da      	uxtb	r2, r3
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	095b      	lsrs	r3, r3, #5
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	f003 0301 	and.w	r3, r3, #1
 8006b24:	b2da      	uxtb	r2, r3
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	f003 0301 	and.w	r3, r3, #1
 8006b3c:	b2da      	uxtb	r2, r3
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b48:	0a1b      	lsrs	r3, r3, #8
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	09db      	lsrs	r3, r3, #7
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	f003 0301 	and.w	r3, r3, #1
 8006b58:	b2da      	uxtb	r2, r3
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	099b      	lsrs	r3, r3, #6
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	b2da      	uxtb	r2, r3
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	095b      	lsrs	r3, r3, #5
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	b2da      	uxtb	r2, r3
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	091b      	lsrs	r3, r3, #4
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	f003 0301 	and.w	r3, r3, #1
 8006b8e:	b2da      	uxtb	r2, r3
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	089b      	lsrs	r3, r3, #2
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	f003 0303 	and.w	r3, r3, #3
 8006ba0:	b2da      	uxtb	r2, r3
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	f003 0303 	and.w	r3, r3, #3
 8006bb0:	b2da      	uxtb	r2, r3
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	085b      	lsrs	r3, r3, #1
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bca:	b2da      	uxtb	r2, r3
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3714      	adds	r7, #20
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006c40:	b5b0      	push	{r4, r5, r7, lr}
 8006c42:	b08e      	sub	sp, #56	; 0x38
 8006c44:	af04      	add	r7, sp, #16
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2203      	movs	r2, #3
 8006c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c5a:	2b03      	cmp	r3, #3
 8006c5c:	d02e      	beq.n	8006cbc <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c64:	d106      	bne.n	8006c74 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	639a      	str	r2, [r3, #56]	; 0x38
 8006c72:	e029      	b.n	8006cc8 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c7a:	d10a      	bne.n	8006c92 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 fb2d 	bl	80072dc <SD_WideBus_Enable>
 8006c82:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8a:	431a      	orrs	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	639a      	str	r2, [r3, #56]	; 0x38
 8006c90:	e01a      	b.n	8006cc8 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d10a      	bne.n	8006cae <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 fb6c 	bl	8007376 <SD_WideBus_Disable>
 8006c9e:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	431a      	orrs	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	639a      	str	r2, [r3, #56]	; 0x38
 8006cac:	e00c      	b.n	8006cc8 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	639a      	str	r2, [r3, #56]	; 0x38
 8006cba:	e005      	b.n	8006cc8 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00a      	beq.n	8006ce6 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006cd8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e024      	b.n	8006d30 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	695b      	ldr	r3, [r3, #20]
 8006d00:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	623b      	str	r3, [r7, #32]
    SDMMC_Init(hsd->Instance, Init);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681d      	ldr	r5, [r3, #0]
 8006d0c:	466c      	mov	r4, sp
 8006d0e:	f107 0318 	add.w	r3, r7, #24
 8006d12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006d16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006d1a:	f107 030c 	add.w	r3, r7, #12
 8006d1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d20:	4628      	mov	r0, r5
 8006d22:	f002 fdeb 	bl	80098fc <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3728      	adds	r7, #40	; 0x28
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bdb0      	pop	{r4, r5, r7, pc}

08006d38 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b086      	sub	sp, #24
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 8006d40:	2304      	movs	r3, #4
 8006d42:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006d44:	2300      	movs	r3, #0
 8006d46:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8006d4c:	f107 030c 	add.w	r3, r7, #12
 8006d50:	4619      	mov	r1, r3
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 fa98 	bl	8007288 <SD_SendStatus>
 8006d58:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d005      	beq.n	8006d6c <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	431a      	orrs	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	0a5b      	lsrs	r3, r3, #9
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	f003 030f 	and.w	r3, r3, #15
 8006d76:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8006d78:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3718      	adds	r7, #24
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 8006d82:	b480      	push	{r7}
 8006d84:	b085      	sub	sp, #20
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8e:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d9e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006da0:	bf00      	nop
 8006da2:	3714      	adds	r7, #20
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db8:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	60bb      	str	r3, [r7, #8]
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc2:	2b82      	cmp	r3, #130	; 0x82
 8006dc4:	d111      	bne.n	8006dea <SD_DMAReceiveCplt+0x3e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f002 ff28 	bl	8009c20 <SDMMC_CmdStopTransfer>
 8006dd0:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d008      	beq.n	8006dea <SD_DMAReceiveCplt+0x3e>
    {
      hsd->ErrorCode |= errorstate;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	431a      	orrs	r2, r3
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f7ff fccd 	bl	8006784 <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f022 0208 	bic.w	r2, r2, #8
 8006df8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006e02:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f00c f8af 	bl	8012f70 <HAL_SD_RxCpltCallback>
#endif
}
 8006e12:	bf00      	nop
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <SD_DMAError>:
* @brief  DMA SD communication error callback 
* @param  hdma DMA handle
* @retval None
*/
static void SD_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b084      	sub	sp, #16
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e26:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f7fa fb29 	bl	8001480 <HAL_DMA_GetError>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d039      	beq.n	8006ea8 <SD_DMAError+0x8e>
  {
    if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d004      	beq.n	8006e48 <SD_DMAError+0x2e>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d12c      	bne.n	8006ea2 <SD_DMAError+0x88>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006e50:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006e60:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);
      
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e66:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f7ff ff62 	bl	8006d38 <HAL_SD_GetCardState>
 8006e74:	4603      	mov	r3, r0
 8006e76:	72fb      	strb	r3, [r7, #11]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006e78:	7afb      	ldrb	r3, [r7, #11]
 8006e7a:	2b06      	cmp	r3, #6
 8006e7c:	d002      	beq.n	8006e84 <SD_DMAError+0x6a>
 8006e7e:	7afb      	ldrb	r3, [r7, #11]
 8006e80:	2b05      	cmp	r3, #5
 8006e82:	d10a      	bne.n	8006e9a <SD_DMAError+0x80>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f002 fec9 	bl	8009c20 <SDMMC_CmdStopTransfer>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e94:	431a      	orrs	r2, r3
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	639a      	str	r2, [r3, #56]	; 0x38
      }
      
      hsd->State= HAL_SD_STATE_READY;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f7ff fc6e 	bl	8006784 <HAL_SD_ErrorCallback>
#endif
  }
}
 8006ea8:	bf00      	nop
 8006eaa:	3710      	adds	r7, #16
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ebc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d002      	beq.n	8006ecc <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d127      	bne.n	8006f24 <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f7ff ff2f 	bl	8006d38 <HAL_SD_GetCardState>
 8006eda:	4603      	mov	r3, r0
 8006edc:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006eec:	7afb      	ldrb	r3, [r7, #11]
 8006eee:	2b06      	cmp	r3, #6
 8006ef0:	d002      	beq.n	8006ef8 <SD_DMATxAbort+0x48>
 8006ef2:	7afb      	ldrb	r3, [r7, #11]
 8006ef4:	2b05      	cmp	r3, #5
 8006ef6:	d115      	bne.n	8006f24 <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4618      	mov	r0, r3
 8006efe:	f002 fe8f 	bl	8009c20 <SDMMC_CmdStopTransfer>
 8006f02:	4602      	mov	r2, r0
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f08:	431a      	orrs	r2, r3
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d003      	beq.n	8006f1e <SD_DMATxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 8006f16:	68f8      	ldr	r0, [r7, #12]
 8006f18:	f00c f816 	bl	8012f48 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 8006f1c:	e002      	b.n	8006f24 <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8006f1e:	68f8      	ldr	r0, [r7, #12]
 8006f20:	f7ff fc30 	bl	8006784 <HAL_SD_ErrorCallback>
}
 8006f24:	bf00      	nop
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f38:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d002      	beq.n	8006f48 <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2200      	movs	r2, #0
 8006f46:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d127      	bne.n	8006fa0 <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f7ff fef1 	bl	8006d38 <HAL_SD_GetCardState>
 8006f56:	4603      	mov	r3, r0
 8006f58:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006f68:	7afb      	ldrb	r3, [r7, #11]
 8006f6a:	2b06      	cmp	r3, #6
 8006f6c:	d002      	beq.n	8006f74 <SD_DMARxAbort+0x48>
 8006f6e:	7afb      	ldrb	r3, [r7, #11]
 8006f70:	2b05      	cmp	r3, #5
 8006f72:	d115      	bne.n	8006fa0 <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f002 fe51 	bl	8009c20 <SDMMC_CmdStopTransfer>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f84:	431a      	orrs	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d003      	beq.n	8006f9a <SD_DMARxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f00b ffd8 	bl	8012f48 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 8006f98:	e002      	b.n	8006fa0 <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f7ff fbf2 	bl	8006784 <HAL_SD_ErrorCallback>
}
 8006fa0:	bf00      	nop
 8006fa2:	3710      	adds	r7, #16
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006fa8:	b5b0      	push	{r4, r5, r7, lr}
 8006faa:	b094      	sub	sp, #80	; 0x50
 8006fac:	af04      	add	r7, sp, #16
 8006fae:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f002 fcf5 	bl	80099ac <SDMMC_GetPowerState>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d102      	bne.n	8006fce <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006fc8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006fcc:	e0b0      	b.n	8007130 <SD_InitCard+0x188>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fd2:	2b03      	cmp	r3, #3
 8006fd4:	d02f      	beq.n	8007036 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f002 ff3b 	bl	8009e56 <SDMMC_CmdSendCID>
 8006fe0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d001      	beq.n	8006fec <SD_InitCard+0x44>
    {
      return errorstate;
 8006fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fea:	e0a1      	b.n	8007130 <SD_InitCard+0x188>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f002 fd1f 	bl	8009a36 <SDMMC_GetResponse>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2104      	movs	r1, #4
 8007004:	4618      	mov	r0, r3
 8007006:	f002 fd16 	bl	8009a36 <SDMMC_GetResponse>
 800700a:	4602      	mov	r2, r0
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2108      	movs	r1, #8
 8007016:	4618      	mov	r0, r3
 8007018:	f002 fd0d 	bl	8009a36 <SDMMC_GetResponse>
 800701c:	4602      	mov	r2, r0
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	210c      	movs	r1, #12
 8007028:	4618      	mov	r0, r3
 800702a:	f002 fd04 	bl	8009a36 <SDMMC_GetResponse>
 800702e:	4602      	mov	r2, r0
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800703a:	2b03      	cmp	r3, #3
 800703c:	d00d      	beq.n	800705a <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f107 020e 	add.w	r2, r7, #14
 8007046:	4611      	mov	r1, r2
 8007048:	4618      	mov	r0, r3
 800704a:	f002 ff45 	bl	8009ed8 <SDMMC_CmdSetRelAdd>
 800704e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007052:	2b00      	cmp	r3, #0
 8007054:	d001      	beq.n	800705a <SD_InitCard+0xb2>
    {
      return errorstate;
 8007056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007058:	e06a      	b.n	8007130 <SD_InitCard+0x188>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800705e:	2b03      	cmp	r3, #3
 8007060:	d036      	beq.n	80070d0 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007062:	89fb      	ldrh	r3, [r7, #14]
 8007064:	461a      	mov	r2, r3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007072:	041b      	lsls	r3, r3, #16
 8007074:	4619      	mov	r1, r3
 8007076:	4610      	mov	r0, r2
 8007078:	f002 ff0d 	bl	8009e96 <SDMMC_CmdSendCSD>
 800707c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800707e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007080:	2b00      	cmp	r3, #0
 8007082:	d001      	beq.n	8007088 <SD_InitCard+0xe0>
    {
      return errorstate;
 8007084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007086:	e053      	b.n	8007130 <SD_InitCard+0x188>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2100      	movs	r1, #0
 800708e:	4618      	mov	r0, r3
 8007090:	f002 fcd1 	bl	8009a36 <SDMMC_GetResponse>
 8007094:	4602      	mov	r2, r0
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2104      	movs	r1, #4
 80070a0:	4618      	mov	r0, r3
 80070a2:	f002 fcc8 	bl	8009a36 <SDMMC_GetResponse>
 80070a6:	4602      	mov	r2, r0
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2108      	movs	r1, #8
 80070b2:	4618      	mov	r0, r3
 80070b4:	f002 fcbf 	bl	8009a36 <SDMMC_GetResponse>
 80070b8:	4602      	mov	r2, r0
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	210c      	movs	r1, #12
 80070c4:	4618      	mov	r0, r3
 80070c6:	f002 fcb6 	bl	8009a36 <SDMMC_GetResponse>
 80070ca:	4602      	mov	r2, r0
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2104      	movs	r1, #4
 80070d6:	4618      	mov	r0, r3
 80070d8:	f002 fcad 	bl	8009a36 <SDMMC_GetResponse>
 80070dc:	4603      	mov	r3, r0
 80070de:	0d1a      	lsrs	r2, r3, #20
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 80070e4:	f107 0310 	add.w	r3, r7, #16
 80070e8:	4619      	mov	r1, r3
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7ff fb54 	bl	8006798 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6819      	ldr	r1, [r3, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070f8:	041b      	lsls	r3, r3, #16
 80070fa:	461a      	mov	r2, r3
 80070fc:	f04f 0300 	mov.w	r3, #0
 8007100:	4608      	mov	r0, r1
 8007102:	f002 fdb1 	bl	8009c68 <SDMMC_CmdSelDesel>
 8007106:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800710a:	2b00      	cmp	r3, #0
 800710c:	d001      	beq.n	8007112 <SD_InitCard+0x16a>
  {
    return errorstate;
 800710e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007110:	e00e      	b.n	8007130 <SD_InitCard+0x188>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681d      	ldr	r5, [r3, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	466c      	mov	r4, sp
 800711a:	f103 0210 	add.w	r2, r3, #16
 800711e:	ca07      	ldmia	r2, {r0, r1, r2}
 8007120:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007124:	3304      	adds	r3, #4
 8007126:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007128:	4628      	mov	r0, r5
 800712a:	f002 fbe7 	bl	80098fc <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3740      	adds	r7, #64	; 0x40
 8007134:	46bd      	mov	sp, r7
 8007136:	bdb0      	pop	{r4, r5, r7, pc}

08007138 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b086      	sub	sp, #24
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8007140:	2300      	movs	r3, #0
 8007142:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 8007144:	2300      	movs	r3, #0
 8007146:	617b      	str	r3, [r7, #20]
 8007148:	2300      	movs	r3, #0
 800714a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800714c:	2300      	movs	r3, #0
 800714e:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4618      	mov	r0, r3
 8007156:	f002 fdac 	bl	8009cb2 <SDMMC_CmdGoIdleState>
 800715a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d001      	beq.n	8007166 <SD_PowerON+0x2e>
  {
    return errorstate;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	e08c      	b.n	8007280 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4618      	mov	r0, r3
 800716c:	f002 fdc1 	bl	8009cf2 <SDMMC_CmdOperCond>
 8007170:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d03d      	beq.n	80071f4 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 800717e:	e032      	b.n	80071e6 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	1c5a      	adds	r2, r3, #1
 8007184:	60ba      	str	r2, [r7, #8]
 8007186:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800718a:	4293      	cmp	r3, r2
 800718c:	d102      	bne.n	8007194 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800718e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007192:	e075      	b.n	8007280 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2100      	movs	r1, #0
 800719a:	4618      	mov	r0, r3
 800719c:	f002 fdca 	bl	8009d34 <SDMMC_CmdAppCommand>
 80071a0:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d002      	beq.n	80071ae <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80071a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80071ac:	e068      	b.n	8007280 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2100      	movs	r1, #0
 80071b4:	4618      	mov	r0, r3
 80071b6:	f002 fde1 	bl	8009d7c <SDMMC_CmdAppOperCommand>
 80071ba:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d002      	beq.n	80071c8 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80071c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80071c6:	e05b      	b.n	8007280 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2100      	movs	r1, #0
 80071ce:	4618      	mov	r0, r3
 80071d0:	f002 fc31 	bl	8009a36 <SDMMC_GetResponse>
 80071d4:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	0fdb      	lsrs	r3, r3, #31
 80071da:	2b01      	cmp	r3, #1
 80071dc:	bf0c      	ite	eq
 80071de:	2301      	moveq	r3, #1
 80071e0:	2300      	movne	r3, #0
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d0c9      	beq.n	8007180 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	645a      	str	r2, [r3, #68]	; 0x44
 80071f2:	e044      	b.n	800727e <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 80071fa:	e031      	b.n	8007260 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	1c5a      	adds	r2, r3, #1
 8007200:	60ba      	str	r2, [r7, #8]
 8007202:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007206:	4293      	cmp	r3, r2
 8007208:	d102      	bne.n	8007210 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800720a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800720e:	e037      	b.n	8007280 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2100      	movs	r1, #0
 8007216:	4618      	mov	r0, r3
 8007218:	f002 fd8c 	bl	8009d34 <SDMMC_CmdAppCommand>
 800721c:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d001      	beq.n	8007228 <SD_PowerON+0xf0>
      {
        return errorstate;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	e02b      	b.n	8007280 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007230:	4618      	mov	r0, r3
 8007232:	f002 fda3 	bl	8009d7c <SDMMC_CmdAppOperCommand>
 8007236:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d001      	beq.n	8007242 <SD_PowerON+0x10a>
      {
        return errorstate;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	e01e      	b.n	8007280 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2100      	movs	r1, #0
 8007248:	4618      	mov	r0, r3
 800724a:	f002 fbf4 	bl	8009a36 <SDMMC_GetResponse>
 800724e:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	0fdb      	lsrs	r3, r3, #31
 8007254:	2b01      	cmp	r3, #1
 8007256:	bf0c      	ite	eq
 8007258:	2301      	moveq	r3, #1
 800725a:	2300      	movne	r3, #0
 800725c:	b2db      	uxtb	r3, r3
 800725e:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d0ca      	beq.n	80071fc <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800726c:	2b00      	cmp	r3, #0
 800726e:	d003      	beq.n	8007278 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	645a      	str	r2, [r3, #68]	; 0x44
 8007276:	e002      	b.n	800727e <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3718      	adds	r7, #24
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007292:	2300      	movs	r3, #0
 8007294:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d102      	bne.n	80072a2 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 800729c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80072a0:	e018      	b.n	80072d4 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072aa:	041b      	lsls	r3, r3, #16
 80072ac:	4619      	mov	r1, r3
 80072ae:	4610      	mov	r0, r2
 80072b0:	f002 fe35 	bl	8009f1e <SDMMC_CmdSendStatus>
 80072b4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d001      	beq.n	80072c0 <SD_SendStatus+0x38>
  {
    return errorstate;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	e009      	b.n	80072d4 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2100      	movs	r1, #0
 80072c6:	4618      	mov	r0, r3
 80072c8:	f002 fbb5 	bl	8009a36 <SDMMC_GetResponse>
 80072cc:	4602      	mov	r2, r0
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 80072e4:	2300      	movs	r3, #0
 80072e6:	60fb      	str	r3, [r7, #12]
 80072e8:	2300      	movs	r3, #0
 80072ea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80072ec:	2300      	movs	r3, #0
 80072ee:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2100      	movs	r1, #0
 80072f6:	4618      	mov	r0, r3
 80072f8:	f002 fb9d 	bl	8009a36 <SDMMC_GetResponse>
 80072fc:	4603      	mov	r3, r0
 80072fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007302:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007306:	d102      	bne.n	800730e <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007308:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800730c:	e02f      	b.n	800736e <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800730e:	f107 030c 	add.w	r3, r7, #12
 8007312:	4619      	mov	r1, r3
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 f87b 	bl	8007410 <SD_FindSCR>
 800731a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d001      	beq.n	8007326 <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	e023      	b.n	800736e <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d01c      	beq.n	800736a <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007338:	041b      	lsls	r3, r3, #16
 800733a:	4619      	mov	r1, r3
 800733c:	4610      	mov	r0, r2
 800733e:	f002 fcf9 	bl	8009d34 <SDMMC_CmdAppCommand>
 8007342:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d001      	beq.n	800734e <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	e00f      	b.n	800736e <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2102      	movs	r1, #2
 8007354:	4618      	mov	r0, r3
 8007356:	f002 fd37 	bl	8009dc8 <SDMMC_CmdBusWidth>
 800735a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d001      	beq.n	8007366 <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	e003      	b.n	800736e <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 8007366:	2300      	movs	r3, #0
 8007368:	e001      	b.n	800736e <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800736a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800736e:	4618      	mov	r0, r3
 8007370:	3718      	adds	r7, #24
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007376:	b580      	push	{r7, lr}
 8007378:	b086      	sub	sp, #24
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 800737e:	2300      	movs	r3, #0
 8007380:	60fb      	str	r3, [r7, #12]
 8007382:	2300      	movs	r3, #0
 8007384:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007386:	2300      	movs	r3, #0
 8007388:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2100      	movs	r1, #0
 8007390:	4618      	mov	r0, r3
 8007392:	f002 fb50 	bl	8009a36 <SDMMC_GetResponse>
 8007396:	4603      	mov	r3, r0
 8007398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800739c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073a0:	d102      	bne.n	80073a8 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80073a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80073a6:	e02f      	b.n	8007408 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80073a8:	f107 030c 	add.w	r3, r7, #12
 80073ac:	4619      	mov	r1, r3
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 f82e 	bl	8007410 <SD_FindSCR>
 80073b4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d001      	beq.n	80073c0 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	e023      	b.n	8007408 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d01c      	beq.n	8007404 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073d2:	041b      	lsls	r3, r3, #16
 80073d4:	4619      	mov	r1, r3
 80073d6:	4610      	mov	r0, r2
 80073d8:	f002 fcac 	bl	8009d34 <SDMMC_CmdAppCommand>
 80073dc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d001      	beq.n	80073e8 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	e00f      	b.n	8007408 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2100      	movs	r1, #0
 80073ee:	4618      	mov	r0, r3
 80073f0:	f002 fcea 	bl	8009dc8 <SDMMC_CmdBusWidth>
 80073f4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d001      	beq.n	8007400 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	e003      	b.n	8007408 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8007400:	2300      	movs	r3, #0
 8007402:	e001      	b.n	8007408 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007404:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007408:	4618      	mov	r0, r3
 800740a:	3718      	adds	r7, #24
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007410:	b590      	push	{r4, r7, lr}
 8007412:	b08f      	sub	sp, #60	; 0x3c
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800741a:	2300      	movs	r3, #0
 800741c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800741e:	f7f9 f895 	bl	800054c <HAL_GetTick>
 8007422:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0;
 8007424:	2300      	movs	r3, #0
 8007426:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2] = {0, 0};
 8007428:	2300      	movs	r3, #0
 800742a:	60fb      	str	r3, [r7, #12]
 800742c:	2300      	movs	r3, #0
 800742e:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2108      	movs	r1, #8
 8007436:	4618      	mov	r0, r3
 8007438:	f002 fb3e 	bl	8009ab8 <SDMMC_CmdBlockLength>
 800743c:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800743e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007440:	2b00      	cmp	r3, #0
 8007442:	d001      	beq.n	8007448 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007446:	e0a8      	b.n	800759a <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007450:	041b      	lsls	r3, r3, #16
 8007452:	4619      	mov	r1, r3
 8007454:	4610      	mov	r0, r2
 8007456:	f002 fc6d 	bl	8009d34 <SDMMC_CmdAppCommand>
 800745a:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800745c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745e:	2b00      	cmp	r3, #0
 8007460:	d001      	beq.n	8007466 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007464:	e099      	b.n	800759a <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007466:	f04f 33ff 	mov.w	r3, #4294967295
 800746a:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8;
 800746c:	2308      	movs	r3, #8
 800746e:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007470:	2330      	movs	r3, #48	; 0x30
 8007472:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007474:	2302      	movs	r3, #2
 8007476:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007478:	2300      	movs	r3, #0
 800747a:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800747c:	2301      	movs	r3, #1
 800747e:	62bb      	str	r3, [r7, #40]	; 0x28
  SDMMC_ConfigData(hsd->Instance, &config);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f107 0214 	add.w	r2, r7, #20
 8007488:	4611      	mov	r1, r2
 800748a:	4618      	mov	r0, r3
 800748c:	f002 fae8 	bl	8009a60 <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4618      	mov	r0, r3
 8007496:	f002 fcbb 	bl	8009e10 <SDMMC_CmdSendSCR>
 800749a:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800749c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d022      	beq.n	80074e8 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80074a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a4:	e079      	b.n	800759a <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00e      	beq.n	80074d2 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6819      	ldr	r1, [r3, #0]
 80074b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	f107 020c 	add.w	r2, r7, #12
 80074c0:	18d4      	adds	r4, r2, r3
 80074c2:	4608      	mov	r0, r1
 80074c4:	f002 fa46 	bl	8009954 <SDMMC_ReadFIFO>
 80074c8:	4603      	mov	r3, r0
 80074ca:	6023      	str	r3, [r4, #0]
      index++;
 80074cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ce:	3301      	adds	r3, #1
 80074d0:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80074d2:	f7f9 f83b 	bl	800054c <HAL_GetTick>
 80074d6:	4602      	mov	r2, r0
 80074d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074da:	1ad3      	subs	r3, r2, r3
 80074dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074e0:	d102      	bne.n	80074e8 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80074e2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80074e6:	e058      	b.n	800759a <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074ee:	f240 432a 	movw	r3, #1066	; 0x42a
 80074f2:	4013      	ands	r3, r2
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d0d6      	beq.n	80074a6 <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074fe:	f003 0308 	and.w	r3, r3, #8
 8007502:	2b00      	cmp	r3, #0
 8007504:	d005      	beq.n	8007512 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2208      	movs	r2, #8
 800750c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800750e:	2308      	movs	r3, #8
 8007510:	e043      	b.n	800759a <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007518:	f003 0302 	and.w	r3, r3, #2
 800751c:	2b00      	cmp	r3, #0
 800751e:	d005      	beq.n	800752c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2202      	movs	r2, #2
 8007526:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007528:	2302      	movs	r3, #2
 800752a:	e036      	b.n	800759a <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007532:	f003 0320 	and.w	r3, r3, #32
 8007536:	2b00      	cmp	r3, #0
 8007538:	d005      	beq.n	8007546 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2220      	movs	r2, #32
 8007540:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8007542:	2320      	movs	r3, #32
 8007544:	e029      	b.n	800759a <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800754e:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	061a      	lsls	r2, r3, #24
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	021b      	lsls	r3, r3, #8
 8007558:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800755c:	431a      	orrs	r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	0a1b      	lsrs	r3, r3, #8
 8007562:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007566:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	3304      	adds	r3, #4
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8007572:	430a      	orrs	r2, r1
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007574:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	061a      	lsls	r2, r3, #24
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	021b      	lsls	r3, r3, #8
 800757e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007582:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	0a1b      	lsrs	r3, r3, #8
 8007588:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800758c:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	0e1b      	lsrs	r3, r3, #24
 8007592:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	373c      	adds	r7, #60	; 0x3c
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd90      	pop	{r4, r7, pc}

080075a2 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80075a2:	b590      	push	{r4, r7, lr}
 80075a4:	b085      	sub	sp, #20
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80075aa:	2300      	movs	r3, #0
 80075ac:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b2:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDMMC Rx FIFO */
  for(count = 0; count < 8; count++)
 80075b4:	2300      	movs	r3, #0
 80075b6:	60fb      	str	r3, [r7, #12]
 80075b8:	e00d      	b.n	80075d6 <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDMMC_ReadFIFO(hsd->Instance);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6819      	ldr	r1, [r3, #0]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	68ba      	ldr	r2, [r7, #8]
 80075c4:	18d4      	adds	r4, r2, r3
 80075c6:	4608      	mov	r0, r1
 80075c8:	f002 f9c4 	bl	8009954 <SDMMC_ReadFIFO>
 80075cc:	4603      	mov	r3, r0
 80075ce:	6023      	str	r3, [r4, #0]
  for(count = 0; count < 8; count++)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	3301      	adds	r3, #1
 80075d4:	60fb      	str	r3, [r7, #12]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2b07      	cmp	r3, #7
 80075da:	d9ee      	bls.n	80075ba <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e0:	f103 0220 	add.w	r2, r3, #32
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3714      	adds	r7, #20
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd90      	pop	{r4, r7, pc}

080075f2 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b084      	sub	sp, #16
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80075fa:	2300      	movs	r3, #0
 80075fc:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDMMC Tx FIFO */
  for(count = 0; count < 8; count++)
 8007604:	2300      	movs	r3, #0
 8007606:	60fb      	str	r3, [r7, #12]
 8007608:	e00b      	b.n	8007622 <SD_Write_IT+0x30>
  {
    SDMMC_WriteFIFO(hsd->Instance, (tmp + count));
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6818      	ldr	r0, [r3, #0]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	68ba      	ldr	r2, [r7, #8]
 8007614:	4413      	add	r3, r2
 8007616:	4619      	mov	r1, r3
 8007618:	f002 f9a9 	bl	800996e <SDMMC_WriteFIFO>
  for(count = 0; count < 8; count++)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	3301      	adds	r3, #1
 8007620:	60fb      	str	r3, [r7, #12]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2b07      	cmp	r3, #7
 8007626:	d9f0      	bls.n	800760a <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a1b      	ldr	r3, [r3, #32]
 800762c:	f103 0220 	add.w	r2, r3, #32
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800763e:	b580      	push	{r7, lr}
 8007640:	b082      	sub	sp, #8
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
 8007646:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d101      	bne.n	8007652 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	e025      	b.n	800769e <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007658:	b2db      	uxtb	r3, r3
 800765a:	2b00      	cmp	r3, #0
 800765c:	d106      	bne.n	800766c <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f00e fb4a 	bl	8015d00 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2202      	movs	r2, #2
 8007670:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	3304      	adds	r3, #4
 800767c:	4619      	mov	r1, r3
 800767e:	4610      	mov	r0, r2
 8007680:	f002 f84a 	bl	8009718 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6818      	ldr	r0, [r3, #0]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	461a      	mov	r2, r3
 800768e:	6839      	ldr	r1, [r7, #0]
 8007690:	f002 f8b4 	bl	80097fc <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3708      	adds	r7, #8
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
	...

080076a8 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d101      	bne.n	80076ba <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e04c      	b.n	8007754 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d106      	bne.n	80076d4 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f00e f84c 	bl	801576c <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2202      	movs	r2, #2
 80076d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f022 0203 	bic.w	r2, r2, #3
 80076ea:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	4b19      	ldr	r3, [pc, #100]	; (800775c <HAL_SPDIFRX_Init+0xb4>)
 80076f8:	4013      	ands	r3, r2
 80076fa:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8007704:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800770a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8007710:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8007716:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800771c:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8007722:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8007728:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800772e:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8007734:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	4313      	orrs	r3, r2
 800773a:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2201      	movs	r2, #1
 800774e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	fff88407 	.word	0xfff88407

08007760 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d101      	bne.n	8007772 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	e01d      	b.n	80077ae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007778:	b2db      	uxtb	r3, r3
 800777a:	2b00      	cmp	r3, #0
 800777c:	d106      	bne.n	800778c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f00e f832 	bl	80157f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2202      	movs	r2, #2
 8007790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	3304      	adds	r3, #4
 800779c:	4619      	mov	r1, r3
 800779e:	4610      	mov	r0, r2
 80077a0:	f000 fb84 	bl	8007eac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3708      	adds	r7, #8
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
	...

080077b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68da      	ldr	r2, [r3, #12]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f042 0201 	orr.w	r2, r2, #1
 80077ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	689a      	ldr	r2, [r3, #8]
 80077d6:	4b0c      	ldr	r3, [pc, #48]	; (8007808 <HAL_TIM_Base_Start_IT+0x50>)
 80077d8:	4013      	ands	r3, r2
 80077da:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2b06      	cmp	r3, #6
 80077e0:	d00b      	beq.n	80077fa <HAL_TIM_Base_Start_IT+0x42>
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077e8:	d007      	beq.n	80077fa <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f042 0201 	orr.w	r2, r2, #1
 80077f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077fa:	2300      	movs	r3, #0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3714      	adds	r7, #20
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr
 8007808:	00010007 	.word	0x00010007

0800780c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d101      	bne.n	800781e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e01d      	b.n	800785a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007824:	b2db      	uxtb	r3, r3
 8007826:	2b00      	cmp	r3, #0
 8007828:	d106      	bne.n	8007838 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f00e f84a 	bl	80158cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2202      	movs	r2, #2
 800783c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	3304      	adds	r3, #4
 8007848:	4619      	mov	r1, r3
 800784a:	4610      	mov	r0, r2
 800784c:	f000 fb2e 	bl	8007eac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3708      	adds	r7, #8
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b082      	sub	sp, #8
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	f003 0302 	and.w	r3, r3, #2
 8007874:	2b02      	cmp	r3, #2
 8007876:	d122      	bne.n	80078be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	f003 0302 	and.w	r3, r3, #2
 8007882:	2b02      	cmp	r3, #2
 8007884:	d11b      	bne.n	80078be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f06f 0202 	mvn.w	r2, #2
 800788e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	699b      	ldr	r3, [r3, #24]
 800789c:	f003 0303 	and.w	r3, r3, #3
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d003      	beq.n	80078ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 fae3 	bl	8007e70 <HAL_TIM_IC_CaptureCallback>
 80078aa:	e005      	b.n	80078b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 fad5 	bl	8007e5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 fae6 	bl	8007e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	f003 0304 	and.w	r3, r3, #4
 80078c8:	2b04      	cmp	r3, #4
 80078ca:	d122      	bne.n	8007912 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	f003 0304 	and.w	r3, r3, #4
 80078d6:	2b04      	cmp	r3, #4
 80078d8:	d11b      	bne.n	8007912 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f06f 0204 	mvn.w	r2, #4
 80078e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2202      	movs	r2, #2
 80078e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d003      	beq.n	8007900 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 fab9 	bl	8007e70 <HAL_TIM_IC_CaptureCallback>
 80078fe:	e005      	b.n	800790c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 faab 	bl	8007e5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 fabc 	bl	8007e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	f003 0308 	and.w	r3, r3, #8
 800791c:	2b08      	cmp	r3, #8
 800791e:	d122      	bne.n	8007966 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	f003 0308 	and.w	r3, r3, #8
 800792a:	2b08      	cmp	r3, #8
 800792c:	d11b      	bne.n	8007966 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f06f 0208 	mvn.w	r2, #8
 8007936:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2204      	movs	r2, #4
 800793c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	69db      	ldr	r3, [r3, #28]
 8007944:	f003 0303 	and.w	r3, r3, #3
 8007948:	2b00      	cmp	r3, #0
 800794a:	d003      	beq.n	8007954 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 fa8f 	bl	8007e70 <HAL_TIM_IC_CaptureCallback>
 8007952:	e005      	b.n	8007960 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 fa81 	bl	8007e5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 fa92 	bl	8007e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	f003 0310 	and.w	r3, r3, #16
 8007970:	2b10      	cmp	r3, #16
 8007972:	d122      	bne.n	80079ba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	f003 0310 	and.w	r3, r3, #16
 800797e:	2b10      	cmp	r3, #16
 8007980:	d11b      	bne.n	80079ba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f06f 0210 	mvn.w	r2, #16
 800798a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2208      	movs	r2, #8
 8007990:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	69db      	ldr	r3, [r3, #28]
 8007998:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800799c:	2b00      	cmp	r3, #0
 800799e:	d003      	beq.n	80079a8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 fa65 	bl	8007e70 <HAL_TIM_IC_CaptureCallback>
 80079a6:	e005      	b.n	80079b4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fa57 	bl	8007e5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fa68 	bl	8007e84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	f003 0301 	and.w	r3, r3, #1
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d10e      	bne.n	80079e6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	f003 0301 	and.w	r3, r3, #1
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d107      	bne.n	80079e6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f06f 0201 	mvn.w	r2, #1
 80079de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f00d f82f 	bl	8014a44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079f0:	2b80      	cmp	r3, #128	; 0x80
 80079f2:	d10e      	bne.n	8007a12 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079fe:	2b80      	cmp	r3, #128	; 0x80
 8007a00:	d107      	bne.n	8007a12 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 fec9 	bl	80087a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	691b      	ldr	r3, [r3, #16]
 8007a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a20:	d10e      	bne.n	8007a40 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a2c:	2b80      	cmp	r3, #128	; 0x80
 8007a2e:	d107      	bne.n	8007a40 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 febc 	bl	80087b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a4a:	2b40      	cmp	r3, #64	; 0x40
 8007a4c:	d10e      	bne.n	8007a6c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a58:	2b40      	cmp	r3, #64	; 0x40
 8007a5a:	d107      	bne.n	8007a6c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 fa16 	bl	8007e98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	f003 0320 	and.w	r3, r3, #32
 8007a76:	2b20      	cmp	r3, #32
 8007a78:	d10e      	bne.n	8007a98 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	f003 0320 	and.w	r3, r3, #32
 8007a84:	2b20      	cmp	r3, #32
 8007a86:	d107      	bne.n	8007a98 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f06f 0220 	mvn.w	r2, #32
 8007a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 fe7c 	bl	8008790 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a98:	bf00      	nop
 8007a9a:	3708      	adds	r7, #8
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d101      	bne.n	8007aba <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007ab6:	2302      	movs	r3, #2
 8007ab8:	e105      	b.n	8007cc6 <HAL_TIM_PWM_ConfigChannel+0x226>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2202      	movs	r2, #2
 8007ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2b14      	cmp	r3, #20
 8007ace:	f200 80f0 	bhi.w	8007cb2 <HAL_TIM_PWM_ConfigChannel+0x212>
 8007ad2:	a201      	add	r2, pc, #4	; (adr r2, 8007ad8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad8:	08007b2d 	.word	0x08007b2d
 8007adc:	08007cb3 	.word	0x08007cb3
 8007ae0:	08007cb3 	.word	0x08007cb3
 8007ae4:	08007cb3 	.word	0x08007cb3
 8007ae8:	08007b6d 	.word	0x08007b6d
 8007aec:	08007cb3 	.word	0x08007cb3
 8007af0:	08007cb3 	.word	0x08007cb3
 8007af4:	08007cb3 	.word	0x08007cb3
 8007af8:	08007baf 	.word	0x08007baf
 8007afc:	08007cb3 	.word	0x08007cb3
 8007b00:	08007cb3 	.word	0x08007cb3
 8007b04:	08007cb3 	.word	0x08007cb3
 8007b08:	08007bef 	.word	0x08007bef
 8007b0c:	08007cb3 	.word	0x08007cb3
 8007b10:	08007cb3 	.word	0x08007cb3
 8007b14:	08007cb3 	.word	0x08007cb3
 8007b18:	08007c31 	.word	0x08007c31
 8007b1c:	08007cb3 	.word	0x08007cb3
 8007b20:	08007cb3 	.word	0x08007cb3
 8007b24:	08007cb3 	.word	0x08007cb3
 8007b28:	08007c71 	.word	0x08007c71
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68b9      	ldr	r1, [r7, #8]
 8007b32:	4618      	mov	r0, r3
 8007b34:	f000 fa5a 	bl	8007fec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	699a      	ldr	r2, [r3, #24]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f042 0208 	orr.w	r2, r2, #8
 8007b46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	699a      	ldr	r2, [r3, #24]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f022 0204 	bic.w	r2, r2, #4
 8007b56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	6999      	ldr	r1, [r3, #24]
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	691a      	ldr	r2, [r3, #16]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	430a      	orrs	r2, r1
 8007b68:	619a      	str	r2, [r3, #24]
      break;
 8007b6a:	e0a3      	b.n	8007cb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68b9      	ldr	r1, [r7, #8]
 8007b72:	4618      	mov	r0, r3
 8007b74:	f000 faac 	bl	80080d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	699a      	ldr	r2, [r3, #24]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	699a      	ldr	r2, [r3, #24]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	6999      	ldr	r1, [r3, #24]
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	021a      	lsls	r2, r3, #8
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	430a      	orrs	r2, r1
 8007baa:	619a      	str	r2, [r3, #24]
      break;
 8007bac:	e082      	b.n	8007cb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68b9      	ldr	r1, [r7, #8]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f000 fb03 	bl	80081c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	69da      	ldr	r2, [r3, #28]
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f042 0208 	orr.w	r2, r2, #8
 8007bc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	69da      	ldr	r2, [r3, #28]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f022 0204 	bic.w	r2, r2, #4
 8007bd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	69d9      	ldr	r1, [r3, #28]
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	691a      	ldr	r2, [r3, #16]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	430a      	orrs	r2, r1
 8007bea:	61da      	str	r2, [r3, #28]
      break;
 8007bec:	e062      	b.n	8007cb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68b9      	ldr	r1, [r7, #8]
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f000 fb59 	bl	80082ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	69da      	ldr	r2, [r3, #28]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	69da      	ldr	r2, [r3, #28]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	69d9      	ldr	r1, [r3, #28]
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	691b      	ldr	r3, [r3, #16]
 8007c24:	021a      	lsls	r2, r3, #8
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	61da      	str	r2, [r3, #28]
      break;
 8007c2e:	e041      	b.n	8007cb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68b9      	ldr	r1, [r7, #8]
 8007c36:	4618      	mov	r0, r3
 8007c38:	f000 fb90 	bl	800835c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f042 0208 	orr.w	r2, r2, #8
 8007c4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f022 0204 	bic.w	r2, r2, #4
 8007c5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	691a      	ldr	r2, [r3, #16]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	430a      	orrs	r2, r1
 8007c6c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007c6e:	e021      	b.n	8007cb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68b9      	ldr	r1, [r7, #8]
 8007c76:	4618      	mov	r0, r3
 8007c78:	f000 fbc2 	bl	8008400 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	021a      	lsls	r2, r3, #8
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	430a      	orrs	r2, r1
 8007cae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007cb0:	e000      	b.n	8007cb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8007cb2:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop

08007cd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d101      	bne.n	8007ce8 <HAL_TIM_ConfigClockSource+0x18>
 8007ce4:	2302      	movs	r3, #2
 8007ce6:	e0b3      	b.n	8007e50 <HAL_TIM_ConfigClockSource+0x180>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2202      	movs	r2, #2
 8007cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	4b55      	ldr	r3, [pc, #340]	; (8007e58 <HAL_TIM_ConfigClockSource+0x188>)
 8007d04:	4013      	ands	r3, r2
 8007d06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d0e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d20:	d03e      	beq.n	8007da0 <HAL_TIM_ConfigClockSource+0xd0>
 8007d22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d26:	f200 8087 	bhi.w	8007e38 <HAL_TIM_ConfigClockSource+0x168>
 8007d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d2e:	f000 8085 	beq.w	8007e3c <HAL_TIM_ConfigClockSource+0x16c>
 8007d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d36:	d87f      	bhi.n	8007e38 <HAL_TIM_ConfigClockSource+0x168>
 8007d38:	2b70      	cmp	r3, #112	; 0x70
 8007d3a:	d01a      	beq.n	8007d72 <HAL_TIM_ConfigClockSource+0xa2>
 8007d3c:	2b70      	cmp	r3, #112	; 0x70
 8007d3e:	d87b      	bhi.n	8007e38 <HAL_TIM_ConfigClockSource+0x168>
 8007d40:	2b60      	cmp	r3, #96	; 0x60
 8007d42:	d050      	beq.n	8007de6 <HAL_TIM_ConfigClockSource+0x116>
 8007d44:	2b60      	cmp	r3, #96	; 0x60
 8007d46:	d877      	bhi.n	8007e38 <HAL_TIM_ConfigClockSource+0x168>
 8007d48:	2b50      	cmp	r3, #80	; 0x50
 8007d4a:	d03c      	beq.n	8007dc6 <HAL_TIM_ConfigClockSource+0xf6>
 8007d4c:	2b50      	cmp	r3, #80	; 0x50
 8007d4e:	d873      	bhi.n	8007e38 <HAL_TIM_ConfigClockSource+0x168>
 8007d50:	2b40      	cmp	r3, #64	; 0x40
 8007d52:	d058      	beq.n	8007e06 <HAL_TIM_ConfigClockSource+0x136>
 8007d54:	2b40      	cmp	r3, #64	; 0x40
 8007d56:	d86f      	bhi.n	8007e38 <HAL_TIM_ConfigClockSource+0x168>
 8007d58:	2b30      	cmp	r3, #48	; 0x30
 8007d5a:	d064      	beq.n	8007e26 <HAL_TIM_ConfigClockSource+0x156>
 8007d5c:	2b30      	cmp	r3, #48	; 0x30
 8007d5e:	d86b      	bhi.n	8007e38 <HAL_TIM_ConfigClockSource+0x168>
 8007d60:	2b20      	cmp	r3, #32
 8007d62:	d060      	beq.n	8007e26 <HAL_TIM_ConfigClockSource+0x156>
 8007d64:	2b20      	cmp	r3, #32
 8007d66:	d867      	bhi.n	8007e38 <HAL_TIM_ConfigClockSource+0x168>
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d05c      	beq.n	8007e26 <HAL_TIM_ConfigClockSource+0x156>
 8007d6c:	2b10      	cmp	r3, #16
 8007d6e:	d05a      	beq.n	8007e26 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007d70:	e062      	b.n	8007e38 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6818      	ldr	r0, [r3, #0]
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	6899      	ldr	r1, [r3, #8]
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	685a      	ldr	r2, [r3, #4]
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	f000 fc0b 	bl	800859c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007d94:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	609a      	str	r2, [r3, #8]
      break;
 8007d9e:	e04e      	b.n	8007e3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6818      	ldr	r0, [r3, #0]
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	6899      	ldr	r1, [r3, #8]
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	f000 fbf4 	bl	800859c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	689a      	ldr	r2, [r3, #8]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007dc2:	609a      	str	r2, [r3, #8]
      break;
 8007dc4:	e03b      	b.n	8007e3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6818      	ldr	r0, [r3, #0]
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	6859      	ldr	r1, [r3, #4]
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	f000 fb68 	bl	80084a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2150      	movs	r1, #80	; 0x50
 8007dde:	4618      	mov	r0, r3
 8007de0:	f000 fbc1 	bl	8008566 <TIM_ITRx_SetConfig>
      break;
 8007de4:	e02b      	b.n	8007e3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6818      	ldr	r0, [r3, #0]
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	6859      	ldr	r1, [r3, #4]
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	461a      	mov	r2, r3
 8007df4:	f000 fb87 	bl	8008506 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	2160      	movs	r1, #96	; 0x60
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f000 fbb1 	bl	8008566 <TIM_ITRx_SetConfig>
      break;
 8007e04:	e01b      	b.n	8007e3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6818      	ldr	r0, [r3, #0]
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	6859      	ldr	r1, [r3, #4]
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	461a      	mov	r2, r3
 8007e14:	f000 fb48 	bl	80084a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2140      	movs	r1, #64	; 0x40
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f000 fba1 	bl	8008566 <TIM_ITRx_SetConfig>
      break;
 8007e24:	e00b      	b.n	8007e3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4619      	mov	r1, r3
 8007e30:	4610      	mov	r0, r2
 8007e32:	f000 fb98 	bl	8008566 <TIM_ITRx_SetConfig>
      break;
 8007e36:	e002      	b.n	8007e3e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007e38:	bf00      	nop
 8007e3a:	e000      	b.n	8007e3e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007e3c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2201      	movs	r2, #1
 8007e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	fffeff88 	.word	0xfffeff88

08007e5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e64:	bf00      	nop
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e78:	bf00      	nop
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e8c:	bf00      	nop
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ea0:	bf00      	nop
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b085      	sub	sp, #20
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	4a40      	ldr	r2, [pc, #256]	; (8007fc0 <TIM_Base_SetConfig+0x114>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d013      	beq.n	8007eec <TIM_Base_SetConfig+0x40>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eca:	d00f      	beq.n	8007eec <TIM_Base_SetConfig+0x40>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	4a3d      	ldr	r2, [pc, #244]	; (8007fc4 <TIM_Base_SetConfig+0x118>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d00b      	beq.n	8007eec <TIM_Base_SetConfig+0x40>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4a3c      	ldr	r2, [pc, #240]	; (8007fc8 <TIM_Base_SetConfig+0x11c>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d007      	beq.n	8007eec <TIM_Base_SetConfig+0x40>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	4a3b      	ldr	r2, [pc, #236]	; (8007fcc <TIM_Base_SetConfig+0x120>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d003      	beq.n	8007eec <TIM_Base_SetConfig+0x40>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a3a      	ldr	r2, [pc, #232]	; (8007fd0 <TIM_Base_SetConfig+0x124>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d108      	bne.n	8007efe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a2f      	ldr	r2, [pc, #188]	; (8007fc0 <TIM_Base_SetConfig+0x114>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d02b      	beq.n	8007f5e <TIM_Base_SetConfig+0xb2>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f0c:	d027      	beq.n	8007f5e <TIM_Base_SetConfig+0xb2>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a2c      	ldr	r2, [pc, #176]	; (8007fc4 <TIM_Base_SetConfig+0x118>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d023      	beq.n	8007f5e <TIM_Base_SetConfig+0xb2>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a2b      	ldr	r2, [pc, #172]	; (8007fc8 <TIM_Base_SetConfig+0x11c>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d01f      	beq.n	8007f5e <TIM_Base_SetConfig+0xb2>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a2a      	ldr	r2, [pc, #168]	; (8007fcc <TIM_Base_SetConfig+0x120>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d01b      	beq.n	8007f5e <TIM_Base_SetConfig+0xb2>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a29      	ldr	r2, [pc, #164]	; (8007fd0 <TIM_Base_SetConfig+0x124>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d017      	beq.n	8007f5e <TIM_Base_SetConfig+0xb2>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a28      	ldr	r2, [pc, #160]	; (8007fd4 <TIM_Base_SetConfig+0x128>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d013      	beq.n	8007f5e <TIM_Base_SetConfig+0xb2>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a27      	ldr	r2, [pc, #156]	; (8007fd8 <TIM_Base_SetConfig+0x12c>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d00f      	beq.n	8007f5e <TIM_Base_SetConfig+0xb2>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a26      	ldr	r2, [pc, #152]	; (8007fdc <TIM_Base_SetConfig+0x130>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d00b      	beq.n	8007f5e <TIM_Base_SetConfig+0xb2>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a25      	ldr	r2, [pc, #148]	; (8007fe0 <TIM_Base_SetConfig+0x134>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d007      	beq.n	8007f5e <TIM_Base_SetConfig+0xb2>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a24      	ldr	r2, [pc, #144]	; (8007fe4 <TIM_Base_SetConfig+0x138>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d003      	beq.n	8007f5e <TIM_Base_SetConfig+0xb2>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a23      	ldr	r2, [pc, #140]	; (8007fe8 <TIM_Base_SetConfig+0x13c>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d108      	bne.n	8007f70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	695b      	ldr	r3, [r3, #20]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	689a      	ldr	r2, [r3, #8]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	4a0a      	ldr	r2, [pc, #40]	; (8007fc0 <TIM_Base_SetConfig+0x114>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d003      	beq.n	8007fa4 <TIM_Base_SetConfig+0xf8>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4a0c      	ldr	r2, [pc, #48]	; (8007fd0 <TIM_Base_SetConfig+0x124>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d103      	bne.n	8007fac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	691a      	ldr	r2, [r3, #16]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	615a      	str	r2, [r3, #20]
}
 8007fb2:	bf00      	nop
 8007fb4:	3714      	adds	r7, #20
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	40010000 	.word	0x40010000
 8007fc4:	40000400 	.word	0x40000400
 8007fc8:	40000800 	.word	0x40000800
 8007fcc:	40000c00 	.word	0x40000c00
 8007fd0:	40010400 	.word	0x40010400
 8007fd4:	40014000 	.word	0x40014000
 8007fd8:	40014400 	.word	0x40014400
 8007fdc:	40014800 	.word	0x40014800
 8007fe0:	40001800 	.word	0x40001800
 8007fe4:	40001c00 	.word	0x40001c00
 8007fe8:	40002000 	.word	0x40002000

08007fec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b087      	sub	sp, #28
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a1b      	ldr	r3, [r3, #32]
 8007ffa:	f023 0201 	bic.w	r2, r3, #1
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6a1b      	ldr	r3, [r3, #32]
 8008006:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	699b      	ldr	r3, [r3, #24]
 8008012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	4b2b      	ldr	r3, [pc, #172]	; (80080c4 <TIM_OC1_SetConfig+0xd8>)
 8008018:	4013      	ands	r3, r2
 800801a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f023 0303 	bic.w	r3, r3, #3
 8008022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	4313      	orrs	r3, r2
 800802c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	f023 0302 	bic.w	r3, r3, #2
 8008034:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	697a      	ldr	r2, [r7, #20]
 800803c:	4313      	orrs	r3, r2
 800803e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a21      	ldr	r2, [pc, #132]	; (80080c8 <TIM_OC1_SetConfig+0xdc>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d003      	beq.n	8008050 <TIM_OC1_SetConfig+0x64>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a20      	ldr	r2, [pc, #128]	; (80080cc <TIM_OC1_SetConfig+0xe0>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d10c      	bne.n	800806a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	f023 0308 	bic.w	r3, r3, #8
 8008056:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	697a      	ldr	r2, [r7, #20]
 800805e:	4313      	orrs	r3, r2
 8008060:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	f023 0304 	bic.w	r3, r3, #4
 8008068:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4a16      	ldr	r2, [pc, #88]	; (80080c8 <TIM_OC1_SetConfig+0xdc>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d003      	beq.n	800807a <TIM_OC1_SetConfig+0x8e>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4a15      	ldr	r2, [pc, #84]	; (80080cc <TIM_OC1_SetConfig+0xe0>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d111      	bne.n	800809e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008080:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008088:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	695b      	ldr	r3, [r3, #20]
 800808e:	693a      	ldr	r2, [r7, #16]
 8008090:	4313      	orrs	r3, r2
 8008092:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	4313      	orrs	r3, r2
 800809c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	693a      	ldr	r2, [r7, #16]
 80080a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	685a      	ldr	r2, [r3, #4]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	697a      	ldr	r2, [r7, #20]
 80080b6:	621a      	str	r2, [r3, #32]
}
 80080b8:	bf00      	nop
 80080ba:	371c      	adds	r7, #28
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr
 80080c4:	fffeff8f 	.word	0xfffeff8f
 80080c8:	40010000 	.word	0x40010000
 80080cc:	40010400 	.word	0x40010400

080080d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b087      	sub	sp, #28
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a1b      	ldr	r3, [r3, #32]
 80080de:	f023 0210 	bic.w	r2, r3, #16
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6a1b      	ldr	r3, [r3, #32]
 80080ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	699b      	ldr	r3, [r3, #24]
 80080f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80080f8:	68fa      	ldr	r2, [r7, #12]
 80080fa:	4b2e      	ldr	r3, [pc, #184]	; (80081b4 <TIM_OC2_SetConfig+0xe4>)
 80080fc:	4013      	ands	r3, r2
 80080fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008106:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	021b      	lsls	r3, r3, #8
 800810e:	68fa      	ldr	r2, [r7, #12]
 8008110:	4313      	orrs	r3, r2
 8008112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	f023 0320 	bic.w	r3, r3, #32
 800811a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	011b      	lsls	r3, r3, #4
 8008122:	697a      	ldr	r2, [r7, #20]
 8008124:	4313      	orrs	r3, r2
 8008126:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4a23      	ldr	r2, [pc, #140]	; (80081b8 <TIM_OC2_SetConfig+0xe8>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d003      	beq.n	8008138 <TIM_OC2_SetConfig+0x68>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	4a22      	ldr	r2, [pc, #136]	; (80081bc <TIM_OC2_SetConfig+0xec>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d10d      	bne.n	8008154 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800813e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	011b      	lsls	r3, r3, #4
 8008146:	697a      	ldr	r2, [r7, #20]
 8008148:	4313      	orrs	r3, r2
 800814a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008152:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4a18      	ldr	r2, [pc, #96]	; (80081b8 <TIM_OC2_SetConfig+0xe8>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d003      	beq.n	8008164 <TIM_OC2_SetConfig+0x94>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4a17      	ldr	r2, [pc, #92]	; (80081bc <TIM_OC2_SetConfig+0xec>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d113      	bne.n	800818c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800816a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008172:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	695b      	ldr	r3, [r3, #20]
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	693a      	ldr	r2, [r7, #16]
 800817c:	4313      	orrs	r3, r2
 800817e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	699b      	ldr	r3, [r3, #24]
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	693a      	ldr	r2, [r7, #16]
 8008188:	4313      	orrs	r3, r2
 800818a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	693a      	ldr	r2, [r7, #16]
 8008190:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	685a      	ldr	r2, [r3, #4]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	697a      	ldr	r2, [r7, #20]
 80081a4:	621a      	str	r2, [r3, #32]
}
 80081a6:	bf00      	nop
 80081a8:	371c      	adds	r7, #28
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	feff8fff 	.word	0xfeff8fff
 80081b8:	40010000 	.word	0x40010000
 80081bc:	40010400 	.word	0x40010400

080081c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b087      	sub	sp, #28
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a1b      	ldr	r3, [r3, #32]
 80081ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a1b      	ldr	r3, [r3, #32]
 80081da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	69db      	ldr	r3, [r3, #28]
 80081e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	4b2d      	ldr	r3, [pc, #180]	; (80082a0 <TIM_OC3_SetConfig+0xe0>)
 80081ec:	4013      	ands	r3, r2
 80081ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f023 0303 	bic.w	r3, r3, #3
 80081f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	4313      	orrs	r3, r2
 8008200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008208:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	021b      	lsls	r3, r3, #8
 8008210:	697a      	ldr	r2, [r7, #20]
 8008212:	4313      	orrs	r3, r2
 8008214:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	4a22      	ldr	r2, [pc, #136]	; (80082a4 <TIM_OC3_SetConfig+0xe4>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d003      	beq.n	8008226 <TIM_OC3_SetConfig+0x66>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4a21      	ldr	r2, [pc, #132]	; (80082a8 <TIM_OC3_SetConfig+0xe8>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d10d      	bne.n	8008242 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800822c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	021b      	lsls	r3, r3, #8
 8008234:	697a      	ldr	r2, [r7, #20]
 8008236:	4313      	orrs	r3, r2
 8008238:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008240:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4a17      	ldr	r2, [pc, #92]	; (80082a4 <TIM_OC3_SetConfig+0xe4>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d003      	beq.n	8008252 <TIM_OC3_SetConfig+0x92>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4a16      	ldr	r2, [pc, #88]	; (80082a8 <TIM_OC3_SetConfig+0xe8>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d113      	bne.n	800827a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008258:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008260:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	695b      	ldr	r3, [r3, #20]
 8008266:	011b      	lsls	r3, r3, #4
 8008268:	693a      	ldr	r2, [r7, #16]
 800826a:	4313      	orrs	r3, r2
 800826c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	699b      	ldr	r3, [r3, #24]
 8008272:	011b      	lsls	r3, r3, #4
 8008274:	693a      	ldr	r2, [r7, #16]
 8008276:	4313      	orrs	r3, r2
 8008278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	693a      	ldr	r2, [r7, #16]
 800827e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	68fa      	ldr	r2, [r7, #12]
 8008284:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	685a      	ldr	r2, [r3, #4]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	697a      	ldr	r2, [r7, #20]
 8008292:	621a      	str	r2, [r3, #32]
}
 8008294:	bf00      	nop
 8008296:	371c      	adds	r7, #28
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr
 80082a0:	fffeff8f 	.word	0xfffeff8f
 80082a4:	40010000 	.word	0x40010000
 80082a8:	40010400 	.word	0x40010400

080082ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b087      	sub	sp, #28
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a1b      	ldr	r3, [r3, #32]
 80082ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a1b      	ldr	r3, [r3, #32]
 80082c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	69db      	ldr	r3, [r3, #28]
 80082d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	4b1e      	ldr	r3, [pc, #120]	; (8008350 <TIM_OC4_SetConfig+0xa4>)
 80082d8:	4013      	ands	r3, r2
 80082da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	021b      	lsls	r3, r3, #8
 80082ea:	68fa      	ldr	r2, [r7, #12]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	031b      	lsls	r3, r3, #12
 80082fe:	693a      	ldr	r2, [r7, #16]
 8008300:	4313      	orrs	r3, r2
 8008302:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a13      	ldr	r2, [pc, #76]	; (8008354 <TIM_OC4_SetConfig+0xa8>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d003      	beq.n	8008314 <TIM_OC4_SetConfig+0x68>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a12      	ldr	r2, [pc, #72]	; (8008358 <TIM_OC4_SetConfig+0xac>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d109      	bne.n	8008328 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800831a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	695b      	ldr	r3, [r3, #20]
 8008320:	019b      	lsls	r3, r3, #6
 8008322:	697a      	ldr	r2, [r7, #20]
 8008324:	4313      	orrs	r3, r2
 8008326:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	697a      	ldr	r2, [r7, #20]
 800832c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	685a      	ldr	r2, [r3, #4]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	693a      	ldr	r2, [r7, #16]
 8008340:	621a      	str	r2, [r3, #32]
}
 8008342:	bf00      	nop
 8008344:	371c      	adds	r7, #28
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop
 8008350:	feff8fff 	.word	0xfeff8fff
 8008354:	40010000 	.word	0x40010000
 8008358:	40010400 	.word	0x40010400

0800835c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800835c:	b480      	push	{r7}
 800835e:	b087      	sub	sp, #28
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a1b      	ldr	r3, [r3, #32]
 800836a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6a1b      	ldr	r3, [r3, #32]
 8008376:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008384:	68fa      	ldr	r2, [r7, #12]
 8008386:	4b1b      	ldr	r3, [pc, #108]	; (80083f4 <TIM_OC5_SetConfig+0x98>)
 8008388:	4013      	ands	r3, r2
 800838a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	4313      	orrs	r3, r2
 8008394:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800839c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	041b      	lsls	r3, r3, #16
 80083a4:	693a      	ldr	r2, [r7, #16]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a12      	ldr	r2, [pc, #72]	; (80083f8 <TIM_OC5_SetConfig+0x9c>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d003      	beq.n	80083ba <TIM_OC5_SetConfig+0x5e>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4a11      	ldr	r2, [pc, #68]	; (80083fc <TIM_OC5_SetConfig+0xa0>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d109      	bne.n	80083ce <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	695b      	ldr	r3, [r3, #20]
 80083c6:	021b      	lsls	r3, r3, #8
 80083c8:	697a      	ldr	r2, [r7, #20]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	697a      	ldr	r2, [r7, #20]
 80083d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	68fa      	ldr	r2, [r7, #12]
 80083d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	685a      	ldr	r2, [r3, #4]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	693a      	ldr	r2, [r7, #16]
 80083e6:	621a      	str	r2, [r3, #32]
}
 80083e8:	bf00      	nop
 80083ea:	371c      	adds	r7, #28
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr
 80083f4:	fffeff8f 	.word	0xfffeff8f
 80083f8:	40010000 	.word	0x40010000
 80083fc:	40010400 	.word	0x40010400

08008400 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008400:	b480      	push	{r7}
 8008402:	b087      	sub	sp, #28
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6a1b      	ldr	r3, [r3, #32]
 800840e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a1b      	ldr	r3, [r3, #32]
 800841a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008428:	68fa      	ldr	r2, [r7, #12]
 800842a:	4b1c      	ldr	r3, [pc, #112]	; (800849c <TIM_OC6_SetConfig+0x9c>)
 800842c:	4013      	ands	r3, r2
 800842e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	021b      	lsls	r3, r3, #8
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	4313      	orrs	r3, r2
 800843a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008442:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	051b      	lsls	r3, r3, #20
 800844a:	693a      	ldr	r2, [r7, #16]
 800844c:	4313      	orrs	r3, r2
 800844e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4a13      	ldr	r2, [pc, #76]	; (80084a0 <TIM_OC6_SetConfig+0xa0>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d003      	beq.n	8008460 <TIM_OC6_SetConfig+0x60>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a12      	ldr	r2, [pc, #72]	; (80084a4 <TIM_OC6_SetConfig+0xa4>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d109      	bne.n	8008474 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008466:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	695b      	ldr	r3, [r3, #20]
 800846c:	029b      	lsls	r3, r3, #10
 800846e:	697a      	ldr	r2, [r7, #20]
 8008470:	4313      	orrs	r3, r2
 8008472:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	697a      	ldr	r2, [r7, #20]
 8008478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	685a      	ldr	r2, [r3, #4]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	693a      	ldr	r2, [r7, #16]
 800848c:	621a      	str	r2, [r3, #32]
}
 800848e:	bf00      	nop
 8008490:	371c      	adds	r7, #28
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop
 800849c:	feff8fff 	.word	0xfeff8fff
 80084a0:	40010000 	.word	0x40010000
 80084a4:	40010400 	.word	0x40010400

080084a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b087      	sub	sp, #28
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	60f8      	str	r0, [r7, #12]
 80084b0:	60b9      	str	r1, [r7, #8]
 80084b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	6a1b      	ldr	r3, [r3, #32]
 80084b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6a1b      	ldr	r3, [r3, #32]
 80084be:	f023 0201 	bic.w	r2, r3, #1
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	699b      	ldr	r3, [r3, #24]
 80084ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	011b      	lsls	r3, r3, #4
 80084d8:	693a      	ldr	r2, [r7, #16]
 80084da:	4313      	orrs	r3, r2
 80084dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	f023 030a 	bic.w	r3, r3, #10
 80084e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084e6:	697a      	ldr	r2, [r7, #20]
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	693a      	ldr	r2, [r7, #16]
 80084f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	697a      	ldr	r2, [r7, #20]
 80084f8:	621a      	str	r2, [r3, #32]
}
 80084fa:	bf00      	nop
 80084fc:	371c      	adds	r7, #28
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr

08008506 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008506:	b480      	push	{r7}
 8008508:	b087      	sub	sp, #28
 800850a:	af00      	add	r7, sp, #0
 800850c:	60f8      	str	r0, [r7, #12]
 800850e:	60b9      	str	r1, [r7, #8]
 8008510:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6a1b      	ldr	r3, [r3, #32]
 8008516:	f023 0210 	bic.w	r2, r3, #16
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	699b      	ldr	r3, [r3, #24]
 8008522:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	6a1b      	ldr	r3, [r3, #32]
 8008528:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008530:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	031b      	lsls	r3, r3, #12
 8008536:	697a      	ldr	r2, [r7, #20]
 8008538:	4313      	orrs	r3, r2
 800853a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008542:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	011b      	lsls	r3, r3, #4
 8008548:	693a      	ldr	r2, [r7, #16]
 800854a:	4313      	orrs	r3, r2
 800854c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	697a      	ldr	r2, [r7, #20]
 8008552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	693a      	ldr	r2, [r7, #16]
 8008558:	621a      	str	r2, [r3, #32]
}
 800855a:	bf00      	nop
 800855c:	371c      	adds	r7, #28
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr

08008566 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008566:	b480      	push	{r7}
 8008568:	b085      	sub	sp, #20
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
 800856e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800857c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800857e:	683a      	ldr	r2, [r7, #0]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	4313      	orrs	r3, r2
 8008584:	f043 0307 	orr.w	r3, r3, #7
 8008588:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	609a      	str	r2, [r3, #8]
}
 8008590:	bf00      	nop
 8008592:	3714      	adds	r7, #20
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800859c:	b480      	push	{r7}
 800859e:	b087      	sub	sp, #28
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	607a      	str	r2, [r7, #4]
 80085a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	021a      	lsls	r2, r3, #8
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	431a      	orrs	r2, r3
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	697a      	ldr	r2, [r7, #20]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	697a      	ldr	r2, [r7, #20]
 80085ce:	609a      	str	r2, [r3, #8]
}
 80085d0:	bf00      	nop
 80085d2:	371c      	adds	r7, #28
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085dc:	b480      	push	{r7}
 80085de:	b085      	sub	sp, #20
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d101      	bne.n	80085f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085f0:	2302      	movs	r3, #2
 80085f2:	e045      	b.n	8008680 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2202      	movs	r2, #2
 8008600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a1c      	ldr	r2, [pc, #112]	; (800868c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d004      	beq.n	8008628 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a1b      	ldr	r2, [pc, #108]	; (8008690 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d108      	bne.n	800863a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800862e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	68fa      	ldr	r2, [r7, #12]
 8008636:	4313      	orrs	r3, r2
 8008638:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008640:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	4313      	orrs	r3, r2
 800864a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008652:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	68ba      	ldr	r2, [r7, #8]
 800865a:	4313      	orrs	r3, r2
 800865c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	68fa      	ldr	r2, [r7, #12]
 8008664:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	68ba      	ldr	r2, [r7, #8]
 800866c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2201      	movs	r2, #1
 8008672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3714      	adds	r7, #20
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr
 800868c:	40010000 	.word	0x40010000
 8008690:	40010400 	.word	0x40010400

08008694 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008694:	b480      	push	{r7}
 8008696:	b085      	sub	sp, #20
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800869e:	2300      	movs	r3, #0
 80086a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d101      	bne.n	80086b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80086ac:	2302      	movs	r3, #2
 80086ae:	e065      	b.n	800877c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	4313      	orrs	r3, r2
 80086e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4313      	orrs	r3, r2
 80086ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	691b      	ldr	r3, [r3, #16]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	695b      	ldr	r3, [r3, #20]
 8008708:	4313      	orrs	r3, r2
 800870a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008716:	4313      	orrs	r3, r2
 8008718:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	699b      	ldr	r3, [r3, #24]
 8008724:	041b      	lsls	r3, r3, #16
 8008726:	4313      	orrs	r3, r2
 8008728:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a16      	ldr	r2, [pc, #88]	; (8008788 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d004      	beq.n	800873e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a14      	ldr	r2, [pc, #80]	; (800878c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d115      	bne.n	800876a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008748:	051b      	lsls	r3, r3, #20
 800874a:	4313      	orrs	r3, r2
 800874c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	69db      	ldr	r3, [r3, #28]
 8008758:	4313      	orrs	r3, r2
 800875a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	6a1b      	ldr	r3, [r3, #32]
 8008766:	4313      	orrs	r3, r2
 8008768:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68fa      	ldr	r2, [r7, #12]
 8008770:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	3714      	adds	r7, #20
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr
 8008788:	40010000 	.word	0x40010000
 800878c:	40010400 	.word	0x40010400

08008790 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008798:	bf00      	nop
 800879a:	370c      	adds	r7, #12
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087ac:	bf00      	nop
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80087c0:	bf00      	nop
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr

080087cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d101      	bne.n	80087de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	e040      	b.n	8008860 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d106      	bne.n	80087f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f00d f95a 	bl	8015aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2224      	movs	r2, #36	; 0x24
 80087f8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f022 0201 	bic.w	r2, r2, #1
 8008808:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 fa58 	bl	8008cc0 <UART_SetConfig>
 8008810:	4603      	mov	r3, r0
 8008812:	2b01      	cmp	r3, #1
 8008814:	d101      	bne.n	800881a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	e022      	b.n	8008860 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800881e:	2b00      	cmp	r3, #0
 8008820:	d002      	beq.n	8008828 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 fcf2 	bl	800920c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	685a      	ldr	r2, [r3, #4]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008836:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	689a      	ldr	r2, [r3, #8]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008846:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f042 0201 	orr.w	r2, r2, #1
 8008856:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 fd79 	bl	8009350 <UART_CheckIdleState>
 800885e:	4603      	mov	r3, r0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3708      	adds	r7, #8
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008868:	b480      	push	{r7}
 800886a:	b085      	sub	sp, #20
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	4613      	mov	r3, r2
 8008874:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800887a:	2b20      	cmp	r3, #32
 800887c:	d144      	bne.n	8008908 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d002      	beq.n	800888a <HAL_UART_Transmit_IT+0x22>
 8008884:	88fb      	ldrh	r3, [r7, #6]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d101      	bne.n	800888e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	e03d      	b.n	800890a <HAL_UART_Transmit_IT+0xa2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008894:	2b01      	cmp	r3, #1
 8008896:	d101      	bne.n	800889c <HAL_UART_Transmit_IT+0x34>
 8008898:	2302      	movs	r3, #2
 800889a:	e036      	b.n	800890a <HAL_UART_Transmit_IT+0xa2>
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	68ba      	ldr	r2, [r7, #8]
 80088a8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	88fa      	ldrh	r2, [r7, #6]
 80088ae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	88fa      	ldrh	r2, [r7, #6]
 80088b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2200      	movs	r2, #0
 80088be:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2200      	movs	r2, #0
 80088c4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2221      	movs	r2, #33	; 0x21
 80088ca:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088d4:	d107      	bne.n	80088e6 <HAL_UART_Transmit_IT+0x7e>
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	691b      	ldr	r3, [r3, #16]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d103      	bne.n	80088e6 <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	4a0d      	ldr	r2, [pc, #52]	; (8008918 <HAL_UART_Transmit_IT+0xb0>)
 80088e2:	665a      	str	r2, [r3, #100]	; 0x64
 80088e4:	e002      	b.n	80088ec <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	4a0c      	ldr	r2, [pc, #48]	; (800891c <HAL_UART_Transmit_IT+0xb4>)
 80088ea:	665a      	str	r2, [r3, #100]	; 0x64
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	681a      	ldr	r2, [r3, #0]
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008902:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8008904:	2300      	movs	r3, #0
 8008906:	e000      	b.n	800890a <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8008908:	2302      	movs	r3, #2
  }
}
 800890a:	4618      	mov	r0, r3
 800890c:	3714      	adds	r7, #20
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	0800951d 	.word	0x0800951d
 800891c:	080094ab 	.word	0x080094ab

08008920 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008920:	b480      	push	{r7}
 8008922:	b085      	sub	sp, #20
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	4613      	mov	r3, r2
 800892c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008932:	2b20      	cmp	r3, #32
 8008934:	f040 808a 	bne.w	8008a4c <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d002      	beq.n	8008944 <HAL_UART_Receive_IT+0x24>
 800893e:	88fb      	ldrh	r3, [r7, #6]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d101      	bne.n	8008948 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	e082      	b.n	8008a4e <HAL_UART_Receive_IT+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800894e:	2b01      	cmp	r3, #1
 8008950:	d101      	bne.n	8008956 <HAL_UART_Receive_IT+0x36>
 8008952:	2302      	movs	r3, #2
 8008954:	e07b      	b.n	8008a4e <HAL_UART_Receive_IT+0x12e>
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2201      	movs	r2, #1
 800895a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	68ba      	ldr	r2, [r7, #8]
 8008962:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	88fa      	ldrh	r2, [r7, #6]
 8008968:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	88fa      	ldrh	r2, [r7, #6]
 8008970:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2200      	movs	r2, #0
 8008978:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008982:	d10e      	bne.n	80089a2 <HAL_UART_Receive_IT+0x82>
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	691b      	ldr	r3, [r3, #16]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d105      	bne.n	8008998 <HAL_UART_Receive_IT+0x78>
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008992:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008996:	e02d      	b.n	80089f4 <HAL_UART_Receive_IT+0xd4>
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	22ff      	movs	r2, #255	; 0xff
 800899c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80089a0:	e028      	b.n	80089f4 <HAL_UART_Receive_IT+0xd4>
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d10d      	bne.n	80089c6 <HAL_UART_Receive_IT+0xa6>
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	691b      	ldr	r3, [r3, #16]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d104      	bne.n	80089bc <HAL_UART_Receive_IT+0x9c>
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	22ff      	movs	r2, #255	; 0xff
 80089b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80089ba:	e01b      	b.n	80089f4 <HAL_UART_Receive_IT+0xd4>
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	227f      	movs	r2, #127	; 0x7f
 80089c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80089c4:	e016      	b.n	80089f4 <HAL_UART_Receive_IT+0xd4>
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089ce:	d10d      	bne.n	80089ec <HAL_UART_Receive_IT+0xcc>
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	691b      	ldr	r3, [r3, #16]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d104      	bne.n	80089e2 <HAL_UART_Receive_IT+0xc2>
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	227f      	movs	r2, #127	; 0x7f
 80089dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80089e0:	e008      	b.n	80089f4 <HAL_UART_Receive_IT+0xd4>
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	223f      	movs	r2, #63	; 0x3f
 80089e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80089ea:	e003      	b.n	80089f4 <HAL_UART_Receive_IT+0xd4>
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2200      	movs	r2, #0
 80089f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2200      	movs	r2, #0
 80089f8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2222      	movs	r2, #34	; 0x22
 80089fe:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	689a      	ldr	r2, [r3, #8]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f042 0201 	orr.w	r2, r2, #1
 8008a0e:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a18:	d107      	bne.n	8008a2a <HAL_UART_Receive_IT+0x10a>
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d103      	bne.n	8008a2a <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	4a0d      	ldr	r2, [pc, #52]	; (8008a5c <HAL_UART_Receive_IT+0x13c>)
 8008a26:	661a      	str	r2, [r3, #96]	; 0x60
 8008a28:	e002      	b.n	8008a30 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	4a0c      	ldr	r2, [pc, #48]	; (8008a60 <HAL_UART_Receive_IT+0x140>)
 8008a2e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2200      	movs	r2, #0
 8008a34:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8008a46:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	e000      	b.n	8008a4e <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8008a4c:	2302      	movs	r3, #2
  }
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3714      	adds	r7, #20
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	08009671 	.word	0x08009671
 8008a60:	080095cb 	.word	0x080095cb

08008a64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b088      	sub	sp, #32
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	69db      	ldr	r3, [r3, #28]
 8008a72:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	f003 030f 	and.w	r3, r3, #15
 8008a8a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d113      	bne.n	8008aba <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	f003 0320 	and.w	r3, r3, #32
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d00e      	beq.n	8008aba <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008a9c:	69bb      	ldr	r3, [r7, #24]
 8008a9e:	f003 0320 	and.w	r3, r3, #32
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d009      	beq.n	8008aba <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	f000 80ea 	beq.w	8008c84 <HAL_UART_IRQHandler+0x220>
      {
        huart->RxISR(huart);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	4798      	blx	r3
      }
      return;
 8008ab8:	e0e4      	b.n	8008c84 <HAL_UART_IRQHandler+0x220>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	f000 80c0 	beq.w	8008c42 <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	f003 0301 	and.w	r3, r3, #1
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d105      	bne.n	8008ad8 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8008acc:	69bb      	ldr	r3, [r7, #24]
 8008ace:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	f000 80b5 	beq.w	8008c42 <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	f003 0301 	and.w	r3, r3, #1
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d00e      	beq.n	8008b00 <HAL_UART_IRQHandler+0x9c>
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d009      	beq.n	8008b00 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2201      	movs	r2, #1
 8008af2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008af8:	f043 0201 	orr.w	r2, r3, #1
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	f003 0302 	and.w	r3, r3, #2
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d00e      	beq.n	8008b28 <HAL_UART_IRQHandler+0xc4>
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	f003 0301 	and.w	r3, r3, #1
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d009      	beq.n	8008b28 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2202      	movs	r2, #2
 8008b1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b20:	f043 0204 	orr.w	r2, r3, #4
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	f003 0304 	and.w	r3, r3, #4
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00e      	beq.n	8008b50 <HAL_UART_IRQHandler+0xec>
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	f003 0301 	and.w	r3, r3, #1
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d009      	beq.n	8008b50 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	2204      	movs	r2, #4
 8008b42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b48:	f043 0202 	orr.w	r2, r3, #2
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	f003 0308 	and.w	r3, r3, #8
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d013      	beq.n	8008b82 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	f003 0320 	and.w	r3, r3, #32
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d104      	bne.n	8008b6e <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d009      	beq.n	8008b82 <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2208      	movs	r2, #8
 8008b74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b7a:	f043 0208 	orr.w	r2, r3, #8
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d07e      	beq.n	8008c88 <HAL_UART_IRQHandler+0x224>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	f003 0320 	and.w	r3, r3, #32
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00c      	beq.n	8008bae <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	f003 0320 	and.w	r3, r3, #32
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d007      	beq.n	8008bae <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d003      	beq.n	8008bae <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bb2:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bbe:	2b40      	cmp	r3, #64	; 0x40
 8008bc0:	d004      	beq.n	8008bcc <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d031      	beq.n	8008c30 <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 fc36 	bl	800943e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bdc:	2b40      	cmp	r3, #64	; 0x40
 8008bde:	d123      	bne.n	8008c28 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	689a      	ldr	r2, [r3, #8]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bee:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d013      	beq.n	8008c20 <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bfc:	4a25      	ldr	r2, [pc, #148]	; (8008c94 <HAL_UART_IRQHandler+0x230>)
 8008bfe:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7f8 fa8f 	bl	8001128 <HAL_DMA_Abort_IT>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d016      	beq.n	8008c3e <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008c1a:	4610      	mov	r0, r2
 8008c1c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c1e:	e00e      	b.n	8008c3e <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 f843 	bl	8008cac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c26:	e00a      	b.n	8008c3e <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 f83f 	bl	8008cac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c2e:	e006      	b.n	8008c3e <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 f83b 	bl	8008cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8008c3c:	e024      	b.n	8008c88 <HAL_UART_IRQHandler+0x224>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c3e:	bf00      	nop
    return;
 8008c40:	e022      	b.n	8008c88 <HAL_UART_IRQHandler+0x224>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008c42:	69fb      	ldr	r3, [r7, #28]
 8008c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d00d      	beq.n	8008c68 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008c4c:	69bb      	ldr	r3, [r7, #24]
 8008c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d008      	beq.n	8008c68 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d016      	beq.n	8008c8c <HAL_UART_IRQHandler+0x228>
    {
      huart->TxISR(huart);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	4798      	blx	r3
    }
    return;
 8008c66:	e011      	b.n	8008c8c <HAL_UART_IRQHandler+0x228>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d00d      	beq.n	8008c8e <HAL_UART_IRQHandler+0x22a>
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d008      	beq.n	8008c8e <HAL_UART_IRQHandler+0x22a>
  {
    UART_EndTransmit_IT(huart);
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 fc8b 	bl	8009598 <UART_EndTransmit_IT>
    return;
 8008c82:	e004      	b.n	8008c8e <HAL_UART_IRQHandler+0x22a>
      return;
 8008c84:	bf00      	nop
 8008c86:	e002      	b.n	8008c8e <HAL_UART_IRQHandler+0x22a>
    return;
 8008c88:	bf00      	nop
 8008c8a:	e000      	b.n	8008c8e <HAL_UART_IRQHandler+0x22a>
    return;
 8008c8c:	bf00      	nop
  }

}
 8008c8e:	3720      	adds	r7, #32
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}
 8008c94:	0800947f 	.word	0x0800947f

08008c98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008cb4:	bf00      	nop
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b088      	sub	sp, #32
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	689a      	ldr	r2, [r3, #8]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	691b      	ldr	r3, [r3, #16]
 8008cd8:	431a      	orrs	r2, r3
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	695b      	ldr	r3, [r3, #20]
 8008cde:	431a      	orrs	r2, r3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	69db      	ldr	r3, [r3, #28]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	4ba7      	ldr	r3, [pc, #668]	; (8008f8c <UART_SetConfig+0x2cc>)
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	6812      	ldr	r2, [r2, #0]
 8008cf6:	6939      	ldr	r1, [r7, #16]
 8008cf8:	430b      	orrs	r3, r1
 8008cfa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	68da      	ldr	r2, [r3, #12]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	430a      	orrs	r2, r1
 8008d10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	699b      	ldr	r3, [r3, #24]
 8008d16:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6a1b      	ldr	r3, [r3, #32]
 8008d1c:	693a      	ldr	r2, [r7, #16]
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	693a      	ldr	r2, [r7, #16]
 8008d32:	430a      	orrs	r2, r1
 8008d34:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a95      	ldr	r2, [pc, #596]	; (8008f90 <UART_SetConfig+0x2d0>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d120      	bne.n	8008d82 <UART_SetConfig+0xc2>
 8008d40:	4b94      	ldr	r3, [pc, #592]	; (8008f94 <UART_SetConfig+0x2d4>)
 8008d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d46:	f003 0303 	and.w	r3, r3, #3
 8008d4a:	2b03      	cmp	r3, #3
 8008d4c:	d816      	bhi.n	8008d7c <UART_SetConfig+0xbc>
 8008d4e:	a201      	add	r2, pc, #4	; (adr r2, 8008d54 <UART_SetConfig+0x94>)
 8008d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d54:	08008d65 	.word	0x08008d65
 8008d58:	08008d71 	.word	0x08008d71
 8008d5c:	08008d6b 	.word	0x08008d6b
 8008d60:	08008d77 	.word	0x08008d77
 8008d64:	2301      	movs	r3, #1
 8008d66:	77fb      	strb	r3, [r7, #31]
 8008d68:	e14f      	b.n	800900a <UART_SetConfig+0x34a>
 8008d6a:	2302      	movs	r3, #2
 8008d6c:	77fb      	strb	r3, [r7, #31]
 8008d6e:	e14c      	b.n	800900a <UART_SetConfig+0x34a>
 8008d70:	2304      	movs	r3, #4
 8008d72:	77fb      	strb	r3, [r7, #31]
 8008d74:	e149      	b.n	800900a <UART_SetConfig+0x34a>
 8008d76:	2308      	movs	r3, #8
 8008d78:	77fb      	strb	r3, [r7, #31]
 8008d7a:	e146      	b.n	800900a <UART_SetConfig+0x34a>
 8008d7c:	2310      	movs	r3, #16
 8008d7e:	77fb      	strb	r3, [r7, #31]
 8008d80:	e143      	b.n	800900a <UART_SetConfig+0x34a>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a84      	ldr	r2, [pc, #528]	; (8008f98 <UART_SetConfig+0x2d8>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d132      	bne.n	8008df2 <UART_SetConfig+0x132>
 8008d8c:	4b81      	ldr	r3, [pc, #516]	; (8008f94 <UART_SetConfig+0x2d4>)
 8008d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d92:	f003 030c 	and.w	r3, r3, #12
 8008d96:	2b0c      	cmp	r3, #12
 8008d98:	d828      	bhi.n	8008dec <UART_SetConfig+0x12c>
 8008d9a:	a201      	add	r2, pc, #4	; (adr r2, 8008da0 <UART_SetConfig+0xe0>)
 8008d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da0:	08008dd5 	.word	0x08008dd5
 8008da4:	08008ded 	.word	0x08008ded
 8008da8:	08008ded 	.word	0x08008ded
 8008dac:	08008ded 	.word	0x08008ded
 8008db0:	08008de1 	.word	0x08008de1
 8008db4:	08008ded 	.word	0x08008ded
 8008db8:	08008ded 	.word	0x08008ded
 8008dbc:	08008ded 	.word	0x08008ded
 8008dc0:	08008ddb 	.word	0x08008ddb
 8008dc4:	08008ded 	.word	0x08008ded
 8008dc8:	08008ded 	.word	0x08008ded
 8008dcc:	08008ded 	.word	0x08008ded
 8008dd0:	08008de7 	.word	0x08008de7
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	77fb      	strb	r3, [r7, #31]
 8008dd8:	e117      	b.n	800900a <UART_SetConfig+0x34a>
 8008dda:	2302      	movs	r3, #2
 8008ddc:	77fb      	strb	r3, [r7, #31]
 8008dde:	e114      	b.n	800900a <UART_SetConfig+0x34a>
 8008de0:	2304      	movs	r3, #4
 8008de2:	77fb      	strb	r3, [r7, #31]
 8008de4:	e111      	b.n	800900a <UART_SetConfig+0x34a>
 8008de6:	2308      	movs	r3, #8
 8008de8:	77fb      	strb	r3, [r7, #31]
 8008dea:	e10e      	b.n	800900a <UART_SetConfig+0x34a>
 8008dec:	2310      	movs	r3, #16
 8008dee:	77fb      	strb	r3, [r7, #31]
 8008df0:	e10b      	b.n	800900a <UART_SetConfig+0x34a>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a69      	ldr	r2, [pc, #420]	; (8008f9c <UART_SetConfig+0x2dc>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d120      	bne.n	8008e3e <UART_SetConfig+0x17e>
 8008dfc:	4b65      	ldr	r3, [pc, #404]	; (8008f94 <UART_SetConfig+0x2d4>)
 8008dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e02:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008e06:	2b30      	cmp	r3, #48	; 0x30
 8008e08:	d013      	beq.n	8008e32 <UART_SetConfig+0x172>
 8008e0a:	2b30      	cmp	r3, #48	; 0x30
 8008e0c:	d814      	bhi.n	8008e38 <UART_SetConfig+0x178>
 8008e0e:	2b20      	cmp	r3, #32
 8008e10:	d009      	beq.n	8008e26 <UART_SetConfig+0x166>
 8008e12:	2b20      	cmp	r3, #32
 8008e14:	d810      	bhi.n	8008e38 <UART_SetConfig+0x178>
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d002      	beq.n	8008e20 <UART_SetConfig+0x160>
 8008e1a:	2b10      	cmp	r3, #16
 8008e1c:	d006      	beq.n	8008e2c <UART_SetConfig+0x16c>
 8008e1e:	e00b      	b.n	8008e38 <UART_SetConfig+0x178>
 8008e20:	2300      	movs	r3, #0
 8008e22:	77fb      	strb	r3, [r7, #31]
 8008e24:	e0f1      	b.n	800900a <UART_SetConfig+0x34a>
 8008e26:	2302      	movs	r3, #2
 8008e28:	77fb      	strb	r3, [r7, #31]
 8008e2a:	e0ee      	b.n	800900a <UART_SetConfig+0x34a>
 8008e2c:	2304      	movs	r3, #4
 8008e2e:	77fb      	strb	r3, [r7, #31]
 8008e30:	e0eb      	b.n	800900a <UART_SetConfig+0x34a>
 8008e32:	2308      	movs	r3, #8
 8008e34:	77fb      	strb	r3, [r7, #31]
 8008e36:	e0e8      	b.n	800900a <UART_SetConfig+0x34a>
 8008e38:	2310      	movs	r3, #16
 8008e3a:	77fb      	strb	r3, [r7, #31]
 8008e3c:	e0e5      	b.n	800900a <UART_SetConfig+0x34a>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a57      	ldr	r2, [pc, #348]	; (8008fa0 <UART_SetConfig+0x2e0>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d120      	bne.n	8008e8a <UART_SetConfig+0x1ca>
 8008e48:	4b52      	ldr	r3, [pc, #328]	; (8008f94 <UART_SetConfig+0x2d4>)
 8008e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e4e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008e52:	2bc0      	cmp	r3, #192	; 0xc0
 8008e54:	d013      	beq.n	8008e7e <UART_SetConfig+0x1be>
 8008e56:	2bc0      	cmp	r3, #192	; 0xc0
 8008e58:	d814      	bhi.n	8008e84 <UART_SetConfig+0x1c4>
 8008e5a:	2b80      	cmp	r3, #128	; 0x80
 8008e5c:	d009      	beq.n	8008e72 <UART_SetConfig+0x1b2>
 8008e5e:	2b80      	cmp	r3, #128	; 0x80
 8008e60:	d810      	bhi.n	8008e84 <UART_SetConfig+0x1c4>
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d002      	beq.n	8008e6c <UART_SetConfig+0x1ac>
 8008e66:	2b40      	cmp	r3, #64	; 0x40
 8008e68:	d006      	beq.n	8008e78 <UART_SetConfig+0x1b8>
 8008e6a:	e00b      	b.n	8008e84 <UART_SetConfig+0x1c4>
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	77fb      	strb	r3, [r7, #31]
 8008e70:	e0cb      	b.n	800900a <UART_SetConfig+0x34a>
 8008e72:	2302      	movs	r3, #2
 8008e74:	77fb      	strb	r3, [r7, #31]
 8008e76:	e0c8      	b.n	800900a <UART_SetConfig+0x34a>
 8008e78:	2304      	movs	r3, #4
 8008e7a:	77fb      	strb	r3, [r7, #31]
 8008e7c:	e0c5      	b.n	800900a <UART_SetConfig+0x34a>
 8008e7e:	2308      	movs	r3, #8
 8008e80:	77fb      	strb	r3, [r7, #31]
 8008e82:	e0c2      	b.n	800900a <UART_SetConfig+0x34a>
 8008e84:	2310      	movs	r3, #16
 8008e86:	77fb      	strb	r3, [r7, #31]
 8008e88:	e0bf      	b.n	800900a <UART_SetConfig+0x34a>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a45      	ldr	r2, [pc, #276]	; (8008fa4 <UART_SetConfig+0x2e4>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d125      	bne.n	8008ee0 <UART_SetConfig+0x220>
 8008e94:	4b3f      	ldr	r3, [pc, #252]	; (8008f94 <UART_SetConfig+0x2d4>)
 8008e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ea2:	d017      	beq.n	8008ed4 <UART_SetConfig+0x214>
 8008ea4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ea8:	d817      	bhi.n	8008eda <UART_SetConfig+0x21a>
 8008eaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008eae:	d00b      	beq.n	8008ec8 <UART_SetConfig+0x208>
 8008eb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008eb4:	d811      	bhi.n	8008eda <UART_SetConfig+0x21a>
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d003      	beq.n	8008ec2 <UART_SetConfig+0x202>
 8008eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ebe:	d006      	beq.n	8008ece <UART_SetConfig+0x20e>
 8008ec0:	e00b      	b.n	8008eda <UART_SetConfig+0x21a>
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	77fb      	strb	r3, [r7, #31]
 8008ec6:	e0a0      	b.n	800900a <UART_SetConfig+0x34a>
 8008ec8:	2302      	movs	r3, #2
 8008eca:	77fb      	strb	r3, [r7, #31]
 8008ecc:	e09d      	b.n	800900a <UART_SetConfig+0x34a>
 8008ece:	2304      	movs	r3, #4
 8008ed0:	77fb      	strb	r3, [r7, #31]
 8008ed2:	e09a      	b.n	800900a <UART_SetConfig+0x34a>
 8008ed4:	2308      	movs	r3, #8
 8008ed6:	77fb      	strb	r3, [r7, #31]
 8008ed8:	e097      	b.n	800900a <UART_SetConfig+0x34a>
 8008eda:	2310      	movs	r3, #16
 8008edc:	77fb      	strb	r3, [r7, #31]
 8008ede:	e094      	b.n	800900a <UART_SetConfig+0x34a>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a30      	ldr	r2, [pc, #192]	; (8008fa8 <UART_SetConfig+0x2e8>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d125      	bne.n	8008f36 <UART_SetConfig+0x276>
 8008eea:	4b2a      	ldr	r3, [pc, #168]	; (8008f94 <UART_SetConfig+0x2d4>)
 8008eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ef0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008ef4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008ef8:	d017      	beq.n	8008f2a <UART_SetConfig+0x26a>
 8008efa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008efe:	d817      	bhi.n	8008f30 <UART_SetConfig+0x270>
 8008f00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f04:	d00b      	beq.n	8008f1e <UART_SetConfig+0x25e>
 8008f06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f0a:	d811      	bhi.n	8008f30 <UART_SetConfig+0x270>
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d003      	beq.n	8008f18 <UART_SetConfig+0x258>
 8008f10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f14:	d006      	beq.n	8008f24 <UART_SetConfig+0x264>
 8008f16:	e00b      	b.n	8008f30 <UART_SetConfig+0x270>
 8008f18:	2301      	movs	r3, #1
 8008f1a:	77fb      	strb	r3, [r7, #31]
 8008f1c:	e075      	b.n	800900a <UART_SetConfig+0x34a>
 8008f1e:	2302      	movs	r3, #2
 8008f20:	77fb      	strb	r3, [r7, #31]
 8008f22:	e072      	b.n	800900a <UART_SetConfig+0x34a>
 8008f24:	2304      	movs	r3, #4
 8008f26:	77fb      	strb	r3, [r7, #31]
 8008f28:	e06f      	b.n	800900a <UART_SetConfig+0x34a>
 8008f2a:	2308      	movs	r3, #8
 8008f2c:	77fb      	strb	r3, [r7, #31]
 8008f2e:	e06c      	b.n	800900a <UART_SetConfig+0x34a>
 8008f30:	2310      	movs	r3, #16
 8008f32:	77fb      	strb	r3, [r7, #31]
 8008f34:	e069      	b.n	800900a <UART_SetConfig+0x34a>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a1c      	ldr	r2, [pc, #112]	; (8008fac <UART_SetConfig+0x2ec>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d137      	bne.n	8008fb0 <UART_SetConfig+0x2f0>
 8008f40:	4b14      	ldr	r3, [pc, #80]	; (8008f94 <UART_SetConfig+0x2d4>)
 8008f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f46:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008f4a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f4e:	d017      	beq.n	8008f80 <UART_SetConfig+0x2c0>
 8008f50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008f54:	d817      	bhi.n	8008f86 <UART_SetConfig+0x2c6>
 8008f56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f5a:	d00b      	beq.n	8008f74 <UART_SetConfig+0x2b4>
 8008f5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f60:	d811      	bhi.n	8008f86 <UART_SetConfig+0x2c6>
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d003      	beq.n	8008f6e <UART_SetConfig+0x2ae>
 8008f66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f6a:	d006      	beq.n	8008f7a <UART_SetConfig+0x2ba>
 8008f6c:	e00b      	b.n	8008f86 <UART_SetConfig+0x2c6>
 8008f6e:	2300      	movs	r3, #0
 8008f70:	77fb      	strb	r3, [r7, #31]
 8008f72:	e04a      	b.n	800900a <UART_SetConfig+0x34a>
 8008f74:	2302      	movs	r3, #2
 8008f76:	77fb      	strb	r3, [r7, #31]
 8008f78:	e047      	b.n	800900a <UART_SetConfig+0x34a>
 8008f7a:	2304      	movs	r3, #4
 8008f7c:	77fb      	strb	r3, [r7, #31]
 8008f7e:	e044      	b.n	800900a <UART_SetConfig+0x34a>
 8008f80:	2308      	movs	r3, #8
 8008f82:	77fb      	strb	r3, [r7, #31]
 8008f84:	e041      	b.n	800900a <UART_SetConfig+0x34a>
 8008f86:	2310      	movs	r3, #16
 8008f88:	77fb      	strb	r3, [r7, #31]
 8008f8a:	e03e      	b.n	800900a <UART_SetConfig+0x34a>
 8008f8c:	efff69f3 	.word	0xefff69f3
 8008f90:	40011000 	.word	0x40011000
 8008f94:	40023800 	.word	0x40023800
 8008f98:	40004400 	.word	0x40004400
 8008f9c:	40004800 	.word	0x40004800
 8008fa0:	40004c00 	.word	0x40004c00
 8008fa4:	40005000 	.word	0x40005000
 8008fa8:	40011400 	.word	0x40011400
 8008fac:	40007800 	.word	0x40007800
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a91      	ldr	r2, [pc, #580]	; (80091fc <UART_SetConfig+0x53c>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d125      	bne.n	8009006 <UART_SetConfig+0x346>
 8008fba:	4b91      	ldr	r3, [pc, #580]	; (8009200 <UART_SetConfig+0x540>)
 8008fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008fc4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008fc8:	d017      	beq.n	8008ffa <UART_SetConfig+0x33a>
 8008fca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008fce:	d817      	bhi.n	8009000 <UART_SetConfig+0x340>
 8008fd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fd4:	d00b      	beq.n	8008fee <UART_SetConfig+0x32e>
 8008fd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fda:	d811      	bhi.n	8009000 <UART_SetConfig+0x340>
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d003      	beq.n	8008fe8 <UART_SetConfig+0x328>
 8008fe0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008fe4:	d006      	beq.n	8008ff4 <UART_SetConfig+0x334>
 8008fe6:	e00b      	b.n	8009000 <UART_SetConfig+0x340>
 8008fe8:	2300      	movs	r3, #0
 8008fea:	77fb      	strb	r3, [r7, #31]
 8008fec:	e00d      	b.n	800900a <UART_SetConfig+0x34a>
 8008fee:	2302      	movs	r3, #2
 8008ff0:	77fb      	strb	r3, [r7, #31]
 8008ff2:	e00a      	b.n	800900a <UART_SetConfig+0x34a>
 8008ff4:	2304      	movs	r3, #4
 8008ff6:	77fb      	strb	r3, [r7, #31]
 8008ff8:	e007      	b.n	800900a <UART_SetConfig+0x34a>
 8008ffa:	2308      	movs	r3, #8
 8008ffc:	77fb      	strb	r3, [r7, #31]
 8008ffe:	e004      	b.n	800900a <UART_SetConfig+0x34a>
 8009000:	2310      	movs	r3, #16
 8009002:	77fb      	strb	r3, [r7, #31]
 8009004:	e001      	b.n	800900a <UART_SetConfig+0x34a>
 8009006:	2310      	movs	r3, #16
 8009008:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	69db      	ldr	r3, [r3, #28]
 800900e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009012:	d17c      	bne.n	800910e <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8009014:	7ffb      	ldrb	r3, [r7, #31]
 8009016:	2b08      	cmp	r3, #8
 8009018:	d859      	bhi.n	80090ce <UART_SetConfig+0x40e>
 800901a:	a201      	add	r2, pc, #4	; (adr r2, 8009020 <UART_SetConfig+0x360>)
 800901c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009020:	08009045 	.word	0x08009045
 8009024:	08009063 	.word	0x08009063
 8009028:	08009081 	.word	0x08009081
 800902c:	080090cf 	.word	0x080090cf
 8009030:	08009099 	.word	0x08009099
 8009034:	080090cf 	.word	0x080090cf
 8009038:	080090cf 	.word	0x080090cf
 800903c:	080090cf 	.word	0x080090cf
 8009040:	080090b7 	.word	0x080090b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8009044:	f7fb fd24 	bl	8004a90 <HAL_RCC_GetPCLK1Freq>
 8009048:	4603      	mov	r3, r0
 800904a:	005a      	lsls	r2, r3, #1
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	085b      	lsrs	r3, r3, #1
 8009052:	441a      	add	r2, r3
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	fbb2 f3f3 	udiv	r3, r2, r3
 800905c:	b29b      	uxth	r3, r3
 800905e:	61bb      	str	r3, [r7, #24]
        break;
 8009060:	e038      	b.n	80090d4 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8009062:	f7fb fd29 	bl	8004ab8 <HAL_RCC_GetPCLK2Freq>
 8009066:	4603      	mov	r3, r0
 8009068:	005a      	lsls	r2, r3, #1
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	085b      	lsrs	r3, r3, #1
 8009070:	441a      	add	r2, r3
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	fbb2 f3f3 	udiv	r3, r2, r3
 800907a:	b29b      	uxth	r3, r3
 800907c:	61bb      	str	r3, [r7, #24]
        break;
 800907e:	e029      	b.n	80090d4 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	085a      	lsrs	r2, r3, #1
 8009086:	4b5f      	ldr	r3, [pc, #380]	; (8009204 <UART_SetConfig+0x544>)
 8009088:	4413      	add	r3, r2
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	6852      	ldr	r2, [r2, #4]
 800908e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009092:	b29b      	uxth	r3, r3
 8009094:	61bb      	str	r3, [r7, #24]
        break;
 8009096:	e01d      	b.n	80090d4 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8009098:	f7fb fc38 	bl	800490c <HAL_RCC_GetSysClockFreq>
 800909c:	4603      	mov	r3, r0
 800909e:	005a      	lsls	r2, r3, #1
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	085b      	lsrs	r3, r3, #1
 80090a6:	441a      	add	r2, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	61bb      	str	r3, [r7, #24]
        break;
 80090b4:	e00e      	b.n	80090d4 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	085b      	lsrs	r3, r3, #1
 80090bc:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	61bb      	str	r3, [r7, #24]
        break;
 80090cc:	e002      	b.n	80090d4 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	75fb      	strb	r3, [r7, #23]
        break;
 80090d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090d4:	69bb      	ldr	r3, [r7, #24]
 80090d6:	2b0f      	cmp	r3, #15
 80090d8:	d916      	bls.n	8009108 <UART_SetConfig+0x448>
 80090da:	69bb      	ldr	r3, [r7, #24]
 80090dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090e0:	d212      	bcs.n	8009108 <UART_SetConfig+0x448>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	f023 030f 	bic.w	r3, r3, #15
 80090ea:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80090ec:	69bb      	ldr	r3, [r7, #24]
 80090ee:	085b      	lsrs	r3, r3, #1
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	f003 0307 	and.w	r3, r3, #7
 80090f6:	b29a      	uxth	r2, r3
 80090f8:	89fb      	ldrh	r3, [r7, #14]
 80090fa:	4313      	orrs	r3, r2
 80090fc:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	89fa      	ldrh	r2, [r7, #14]
 8009104:	60da      	str	r2, [r3, #12]
 8009106:	e06e      	b.n	80091e6 <UART_SetConfig+0x526>
    }
    else
    {
      ret = HAL_ERROR;
 8009108:	2301      	movs	r3, #1
 800910a:	75fb      	strb	r3, [r7, #23]
 800910c:	e06b      	b.n	80091e6 <UART_SetConfig+0x526>
    }
  }
  else
  {
    switch (clocksource)
 800910e:	7ffb      	ldrb	r3, [r7, #31]
 8009110:	2b08      	cmp	r3, #8
 8009112:	d857      	bhi.n	80091c4 <UART_SetConfig+0x504>
 8009114:	a201      	add	r2, pc, #4	; (adr r2, 800911c <UART_SetConfig+0x45c>)
 8009116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800911a:	bf00      	nop
 800911c:	08009141 	.word	0x08009141
 8009120:	0800915d 	.word	0x0800915d
 8009124:	08009179 	.word	0x08009179
 8009128:	080091c5 	.word	0x080091c5
 800912c:	08009191 	.word	0x08009191
 8009130:	080091c5 	.word	0x080091c5
 8009134:	080091c5 	.word	0x080091c5
 8009138:	080091c5 	.word	0x080091c5
 800913c:	080091ad 	.word	0x080091ad
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8009140:	f7fb fca6 	bl	8004a90 <HAL_RCC_GetPCLK1Freq>
 8009144:	4602      	mov	r2, r0
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	085b      	lsrs	r3, r3, #1
 800914c:	441a      	add	r2, r3
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	fbb2 f3f3 	udiv	r3, r2, r3
 8009156:	b29b      	uxth	r3, r3
 8009158:	61bb      	str	r3, [r7, #24]
        break;
 800915a:	e036      	b.n	80091ca <UART_SetConfig+0x50a>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800915c:	f7fb fcac 	bl	8004ab8 <HAL_RCC_GetPCLK2Freq>
 8009160:	4602      	mov	r2, r0
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	085b      	lsrs	r3, r3, #1
 8009168:	441a      	add	r2, r3
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009172:	b29b      	uxth	r3, r3
 8009174:	61bb      	str	r3, [r7, #24]
        break;
 8009176:	e028      	b.n	80091ca <UART_SetConfig+0x50a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	085a      	lsrs	r2, r3, #1
 800917e:	4b22      	ldr	r3, [pc, #136]	; (8009208 <UART_SetConfig+0x548>)
 8009180:	4413      	add	r3, r2
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	6852      	ldr	r2, [r2, #4]
 8009186:	fbb3 f3f2 	udiv	r3, r3, r2
 800918a:	b29b      	uxth	r3, r3
 800918c:	61bb      	str	r3, [r7, #24]
        break;
 800918e:	e01c      	b.n	80091ca <UART_SetConfig+0x50a>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8009190:	f7fb fbbc 	bl	800490c <HAL_RCC_GetSysClockFreq>
 8009194:	4602      	mov	r2, r0
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	085b      	lsrs	r3, r3, #1
 800919c:	441a      	add	r2, r3
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	61bb      	str	r3, [r7, #24]
        break;
 80091aa:	e00e      	b.n	80091ca <UART_SetConfig+0x50a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	085b      	lsrs	r3, r3, #1
 80091b2:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80091be:	b29b      	uxth	r3, r3
 80091c0:	61bb      	str	r3, [r7, #24]
        break;
 80091c2:	e002      	b.n	80091ca <UART_SetConfig+0x50a>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80091c4:	2301      	movs	r3, #1
 80091c6:	75fb      	strb	r3, [r7, #23]
        break;
 80091c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091ca:	69bb      	ldr	r3, [r7, #24]
 80091cc:	2b0f      	cmp	r3, #15
 80091ce:	d908      	bls.n	80091e2 <UART_SetConfig+0x522>
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091d6:	d204      	bcs.n	80091e2 <UART_SetConfig+0x522>
    {
      huart->Instance->BRR = usartdiv;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	69ba      	ldr	r2, [r7, #24]
 80091de:	60da      	str	r2, [r3, #12]
 80091e0:	e001      	b.n	80091e6 <UART_SetConfig+0x526>
    }
    else
    {
      ret = HAL_ERROR;
 80091e2:	2301      	movs	r3, #1
 80091e4:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80091f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3720      	adds	r7, #32
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	40007c00 	.word	0x40007c00
 8009200:	40023800 	.word	0x40023800
 8009204:	01e84800 	.word	0x01e84800
 8009208:	00f42400 	.word	0x00f42400

0800920c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009218:	f003 0301 	and.w	r3, r3, #1
 800921c:	2b00      	cmp	r3, #0
 800921e:	d00a      	beq.n	8009236 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	430a      	orrs	r2, r1
 8009234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800923a:	f003 0302 	and.w	r3, r3, #2
 800923e:	2b00      	cmp	r3, #0
 8009240:	d00a      	beq.n	8009258 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	430a      	orrs	r2, r1
 8009256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800925c:	f003 0304 	and.w	r3, r3, #4
 8009260:	2b00      	cmp	r3, #0
 8009262:	d00a      	beq.n	800927a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	430a      	orrs	r2, r1
 8009278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800927e:	f003 0308 	and.w	r3, r3, #8
 8009282:	2b00      	cmp	r3, #0
 8009284:	d00a      	beq.n	800929c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	430a      	orrs	r2, r1
 800929a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a0:	f003 0310 	and.w	r3, r3, #16
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d00a      	beq.n	80092be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	430a      	orrs	r2, r1
 80092bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c2:	f003 0320 	and.w	r3, r3, #32
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d00a      	beq.n	80092e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	689b      	ldr	r3, [r3, #8]
 80092d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	430a      	orrs	r2, r1
 80092de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d01a      	beq.n	8009322 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	430a      	orrs	r2, r1
 8009300:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800930a:	d10a      	bne.n	8009322 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	430a      	orrs	r2, r1
 8009320:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00a      	beq.n	8009344 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	430a      	orrs	r2, r1
 8009342:	605a      	str	r2, [r3, #4]
  }
}
 8009344:	bf00      	nop
 8009346:	370c      	adds	r7, #12
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr

08009350 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b086      	sub	sp, #24
 8009354:	af02      	add	r7, sp, #8
 8009356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2200      	movs	r2, #0
 800935c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800935e:	f7f7 f8f5 	bl	800054c <HAL_GetTick>
 8009362:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f003 0308 	and.w	r3, r3, #8
 800936e:	2b08      	cmp	r3, #8
 8009370:	d10e      	bne.n	8009390 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009372:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009376:	9300      	str	r3, [sp, #0]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2200      	movs	r2, #0
 800937c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 f814 	bl	80093ae <UART_WaitOnFlagUntilTimeout>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d001      	beq.n	8009390 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800938c:	2303      	movs	r3, #3
 800938e:	e00a      	b.n	80093a6 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2220      	movs	r2, #32
 8009394:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2220      	movs	r2, #32
 800939a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80093a4:	2300      	movs	r3, #0
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b084      	sub	sp, #16
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	60f8      	str	r0, [r7, #12]
 80093b6:	60b9      	str	r1, [r7, #8]
 80093b8:	603b      	str	r3, [r7, #0]
 80093ba:	4613      	mov	r3, r2
 80093bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093be:	e02a      	b.n	8009416 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093c0:	69bb      	ldr	r3, [r7, #24]
 80093c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093c6:	d026      	beq.n	8009416 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093c8:	f7f7 f8c0 	bl	800054c <HAL_GetTick>
 80093cc:	4602      	mov	r2, r0
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	1ad3      	subs	r3, r2, r3
 80093d2:	69ba      	ldr	r2, [r7, #24]
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d302      	bcc.n	80093de <UART_WaitOnFlagUntilTimeout+0x30>
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d11b      	bne.n	8009416 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80093ec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	689a      	ldr	r2, [r3, #8]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f022 0201 	bic.w	r2, r2, #1
 80093fc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2220      	movs	r2, #32
 8009402:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2220      	movs	r2, #32
 8009408:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2200      	movs	r2, #0
 800940e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8009412:	2303      	movs	r3, #3
 8009414:	e00f      	b.n	8009436 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	69da      	ldr	r2, [r3, #28]
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	4013      	ands	r3, r2
 8009420:	68ba      	ldr	r2, [r7, #8]
 8009422:	429a      	cmp	r2, r3
 8009424:	bf0c      	ite	eq
 8009426:	2301      	moveq	r3, #1
 8009428:	2300      	movne	r3, #0
 800942a:	b2db      	uxtb	r3, r3
 800942c:	461a      	mov	r2, r3
 800942e:	79fb      	ldrb	r3, [r7, #7]
 8009430:	429a      	cmp	r2, r3
 8009432:	d0c5      	beq.n	80093c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009434:	2300      	movs	r3, #0
}
 8009436:	4618      	mov	r0, r3
 8009438:	3710      	adds	r7, #16
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}

0800943e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800943e:	b480      	push	{r7}
 8009440:	b083      	sub	sp, #12
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009454:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	689a      	ldr	r2, [r3, #8]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f022 0201 	bic.w	r2, r2, #1
 8009464:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2220      	movs	r2, #32
 800946a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2200      	movs	r2, #0
 8009470:	661a      	str	r2, [r3, #96]	; 0x60
}
 8009472:	bf00      	nop
 8009474:	370c      	adds	r7, #12
 8009476:	46bd      	mov	sp, r7
 8009478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947c:	4770      	bx	lr

0800947e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800947e:	b580      	push	{r7, lr}
 8009480:	b084      	sub	sp, #16
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800948a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2200      	movs	r2, #0
 8009490:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2200      	movs	r2, #0
 8009498:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800949c:	68f8      	ldr	r0, [r7, #12]
 800949e:	f7ff fc05 	bl	8008cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094a2:	bf00      	nop
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80094aa:	b480      	push	{r7}
 80094ac:	b083      	sub	sp, #12
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094b6:	2b21      	cmp	r3, #33	; 0x21
 80094b8:	d12a      	bne.n	8009510 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80094c0:	b29b      	uxth	r3, r3
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d110      	bne.n	80094e8 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80094d4:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	681a      	ldr	r2, [r3, #0]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094e4:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80094e6:	e013      	b.n	8009510 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094ec:	781a      	ldrb	r2, [r3, #0]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094f8:	1c5a      	adds	r2, r3, #1
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009504:	b29b      	uxth	r3, r3
 8009506:	3b01      	subs	r3, #1
 8009508:	b29a      	uxth	r2, r3
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009510:	bf00      	nop
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800951c:	b480      	push	{r7}
 800951e:	b085      	sub	sp, #20
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009528:	2b21      	cmp	r3, #33	; 0x21
 800952a:	d12f      	bne.n	800958c <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009532:	b29b      	uxth	r3, r3
 8009534:	2b00      	cmp	r3, #0
 8009536:	d110      	bne.n	800955a <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009546:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009556:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009558:	e018      	b.n	800958c <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800955e:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	881b      	ldrh	r3, [r3, #0]
 8009564:	461a      	mov	r2, r3
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800956e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009574:	1c9a      	adds	r2, r3, #2
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009580:	b29b      	uxth	r3, r3
 8009582:	3b01      	subs	r3, #1
 8009584:	b29a      	uxth	r2, r3
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800958c:	bf00      	nop
 800958e:	3714      	adds	r7, #20
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr

08009598 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095ae:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2220      	movs	r2, #32
 80095b4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f7ff fb6b 	bl	8008c98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095c2:	bf00      	nop
 80095c4:	3708      	adds	r7, #8
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b084      	sub	sp, #16
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80095d8:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095de:	2b22      	cmp	r3, #34	; 0x22
 80095e0:	d13a      	bne.n	8009658 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e8:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80095ea:	89bb      	ldrh	r3, [r7, #12]
 80095ec:	b2d9      	uxtb	r1, r3
 80095ee:	89fb      	ldrh	r3, [r7, #14]
 80095f0:	b2da      	uxtb	r2, r3
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095f6:	400a      	ands	r2, r1
 80095f8:	b2d2      	uxtb	r2, r2
 80095fa:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009600:	1c5a      	adds	r2, r3, #1
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800960c:	b29b      	uxth	r3, r3
 800960e:	3b01      	subs	r3, #1
 8009610:	b29a      	uxth	r2, r3
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800961e:	b29b      	uxth	r3, r3
 8009620:	2b00      	cmp	r3, #0
 8009622:	d121      	bne.n	8009668 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009632:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	689a      	ldr	r2, [r3, #8]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f022 0201 	bic.w	r2, r2, #1
 8009642:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2220      	movs	r2, #32
 8009648:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f00a ffd1 	bl	80145f8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009656:	e007      	b.n	8009668 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	699a      	ldr	r2, [r3, #24]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f042 0208 	orr.w	r2, r2, #8
 8009666:	619a      	str	r2, [r3, #24]
}
 8009668:	bf00      	nop
 800966a:	3710      	adds	r7, #16
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b084      	sub	sp, #16
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800967e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009684:	2b22      	cmp	r3, #34	; 0x22
 8009686:	d13a      	bne.n	80096fe <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009694:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8009696:	89ba      	ldrh	r2, [r7, #12]
 8009698:	89fb      	ldrh	r3, [r7, #14]
 800969a:	4013      	ands	r3, r2
 800969c:	b29a      	uxth	r2, r3
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096a6:	1c9a      	adds	r2, r3, #2
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	3b01      	subs	r3, #1
 80096b6:	b29a      	uxth	r2, r3
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d121      	bne.n	800970e <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80096d8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	689a      	ldr	r2, [r3, #8]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f022 0201 	bic.w	r2, r2, #1
 80096e8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2220      	movs	r2, #32
 80096ee:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2200      	movs	r2, #0
 80096f4:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f00a ff7e 	bl	80145f8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80096fc:	e007      	b.n	800970e <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	699a      	ldr	r2, [r3, #24]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f042 0208 	orr.w	r2, r2, #8
 800970c:	619a      	str	r2, [r3, #24]
}
 800970e:	bf00      	nop
 8009710:	3710      	adds	r7, #16
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
	...

08009718 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009718:	b480      	push	{r7}
 800971a:	b085      	sub	sp, #20
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8009722:	2300      	movs	r3, #0
 8009724:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8009726:	2300      	movs	r3, #0
 8009728:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	2b01      	cmp	r3, #1
 8009730:	d027      	beq.n	8009782 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009738:	68fa      	ldr	r2, [r7, #12]
 800973a:	4b2f      	ldr	r3, [pc, #188]	; (80097f8 <FMC_SDRAM_Init+0xe0>)
 800973c:	4013      	ands	r3, r2
 800973e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009748:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800974e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8009754:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800975a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8009760:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8009766:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800976c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8009772:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009774:	68fa      	ldr	r2, [r7, #12]
 8009776:	4313      	orrs	r3, r2
 8009778:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	68fa      	ldr	r2, [r7, #12]
 800977e:	601a      	str	r2, [r3, #0]
 8009780:	e032      	b.n	80097e8 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800978e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009798:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800979e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	4313      	orrs	r3, r2
 80097a4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80097ac:	68ba      	ldr	r2, [r7, #8]
 80097ae:	4b12      	ldr	r3, [pc, #72]	; (80097f8 <FMC_SDRAM_Init+0xe0>)
 80097b0:	4013      	ands	r3, r2
 80097b2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80097bc:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 80097c2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 80097c8:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 80097ce:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 80097d4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80097d6:	68ba      	ldr	r2, [r7, #8]
 80097d8:	4313      	orrs	r3, r2
 80097da:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	68fa      	ldr	r2, [r7, #12]
 80097e0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	68ba      	ldr	r2, [r7, #8]
 80097e6:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 80097e8:	2300      	movs	r3, #0
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3714      	adds	r7, #20
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr
 80097f6:	bf00      	nop
 80097f8:	ffff8000 	.word	0xffff8000

080097fc <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b087      	sub	sp, #28
 8009800:	af00      	add	r7, sp, #0
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	60b9      	str	r1, [r7, #8]
 8009806:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8009808:	2300      	movs	r3, #0
 800980a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800980c:	2300      	movs	r3, #0
 800980e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2b01      	cmp	r3, #1
 8009814:	d02e      	beq.n	8009874 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009822:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	3b01      	subs	r3, #1
 8009830:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009832:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	3b01      	subs	r3, #1
 800983a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800983c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	68db      	ldr	r3, [r3, #12]
 8009842:	3b01      	subs	r3, #1
 8009844:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8009846:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	691b      	ldr	r3, [r3, #16]
 800984c:	3b01      	subs	r3, #1
 800984e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8009850:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	695b      	ldr	r3, [r3, #20]
 8009856:	3b01      	subs	r3, #1
 8009858:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800985a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	699b      	ldr	r3, [r3, #24]
 8009860:	3b01      	subs	r3, #1
 8009862:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8009864:	4313      	orrs	r3, r2
 8009866:	697a      	ldr	r2, [r7, #20]
 8009868:	4313      	orrs	r3, r2
 800986a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	697a      	ldr	r2, [r7, #20]
 8009870:	609a      	str	r2, [r3, #8]
 8009872:	e039      	b.n	80098e8 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800987a:	697a      	ldr	r2, [r7, #20]
 800987c:	4b1e      	ldr	r3, [pc, #120]	; (80098f8 <FMC_SDRAM_Timing_Init+0xfc>)
 800987e:	4013      	ands	r3, r2
 8009880:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	68db      	ldr	r3, [r3, #12]
 8009886:	3b01      	subs	r3, #1
 8009888:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	695b      	ldr	r3, [r3, #20]
 800988e:	3b01      	subs	r3, #1
 8009890:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8009892:	4313      	orrs	r3, r2
 8009894:	697a      	ldr	r2, [r7, #20]
 8009896:	4313      	orrs	r3, r2
 8009898:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	68db      	ldr	r3, [r3, #12]
 800989e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80098a6:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	3b01      	subs	r3, #1
 80098b4:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80098b6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	3b01      	subs	r3, #1
 80098be:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80098c0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	691b      	ldr	r3, [r3, #16]
 80098c6:	3b01      	subs	r3, #1
 80098c8:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80098ca:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	699b      	ldr	r3, [r3, #24]
 80098d0:	3b01      	subs	r3, #1
 80098d2:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80098d4:	4313      	orrs	r3, r2
 80098d6:	693a      	ldr	r2, [r7, #16]
 80098d8:	4313      	orrs	r3, r2
 80098da:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	697a      	ldr	r2, [r7, #20]
 80098e0:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	693a      	ldr	r2, [r7, #16]
 80098e6:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 80098e8:	2300      	movs	r3, #0
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	371c      	adds	r7, #28
 80098ee:	46bd      	mov	sp, r7
 80098f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f4:	4770      	bx	lr
 80098f6:	bf00      	nop
 80098f8:	ff0f0fff 	.word	0xff0f0fff

080098fc <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80098fc:	b084      	sub	sp, #16
 80098fe:	b480      	push	{r7}
 8009900:	b085      	sub	sp, #20
 8009902:	af00      	add	r7, sp, #0
 8009904:	6078      	str	r0, [r7, #4]
 8009906:	f107 001c 	add.w	r0, r7, #28
 800990a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800990e:	2300      	movs	r3, #0
 8009910:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009912:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009914:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009916:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800991a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800991c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800991e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009922:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009926:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009928:	68fa      	ldr	r2, [r7, #12]
 800992a:	4313      	orrs	r3, r2
 800992c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	685a      	ldr	r2, [r3, #4]
 8009932:	4b07      	ldr	r3, [pc, #28]	; (8009950 <SDMMC_Init+0x54>)
 8009934:	4013      	ands	r3, r2
 8009936:	68fa      	ldr	r2, [r7, #12]
 8009938:	431a      	orrs	r2, r3
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800993e:	2300      	movs	r3, #0
}
 8009940:	4618      	mov	r0, r3
 8009942:	3714      	adds	r7, #20
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	b004      	add	sp, #16
 800994c:	4770      	bx	lr
 800994e:	bf00      	nop
 8009950:	ffff8100 	.word	0xffff8100

08009954 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009962:	4618      	mov	r0, r3
 8009964:	370c      	adds	r7, #12
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr

0800996e <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800996e:	b480      	push	{r7}
 8009970:	b083      	sub	sp, #12
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
 8009976:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009982:	2300      	movs	r3, #0
}
 8009984:	4618      	mov	r0, r3
 8009986:	370c      	adds	r7, #12
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8009990:	b480      	push	{r7}
 8009992:	b083      	sub	sp, #12
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2203      	movs	r2, #3
 800999c:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 800999e:	2300      	movs	r3, #0
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	370c      	adds	r7, #12
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80099ac:	b480      	push	{r7}
 80099ae:	b083      	sub	sp, #12
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f003 0303 	and.w	r3, r3, #3
}
 80099bc:	4618      	mov	r0, r3
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b085      	sub	sp, #20
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80099d2:	2300      	movs	r3, #0
 80099d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80099e6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80099ec:	431a      	orrs	r2, r3
                       Command->CPSM);
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80099f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80099f4:	68fa      	ldr	r2, [r7, #12]
 80099f6:	4313      	orrs	r3, r2
 80099f8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	68da      	ldr	r2, [r3, #12]
 80099fe:	4b06      	ldr	r3, [pc, #24]	; (8009a18 <SDMMC_SendCommand+0x50>)
 8009a00:	4013      	ands	r3, r2
 8009a02:	68fa      	ldr	r2, [r7, #12]
 8009a04:	431a      	orrs	r2, r3
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009a0a:	2300      	movs	r3, #0
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3714      	adds	r7, #20
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr
 8009a18:	fffff000 	.word	0xfffff000

08009a1c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	691b      	ldr	r3, [r3, #16]
 8009a28:	b2db      	uxtb	r3, r3
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	370c      	adds	r7, #12
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr

08009a36 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009a36:	b480      	push	{r7}
 8009a38:	b085      	sub	sp, #20
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
 8009a3e:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 8009a40:	2300      	movs	r3, #0
 8009a42:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	3314      	adds	r3, #20
 8009a48:	461a      	mov	r2, r3
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	4413      	add	r3, r2
 8009a4e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
}  
 8009a54:	4618      	mov	r0, r3
 8009a56:	3714      	adds	r7, #20
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b085      	sub	sp, #20
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	685a      	ldr	r2, [r3, #4]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009a86:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009a8c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009a92:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009a94:	68fa      	ldr	r2, [r7, #12]
 8009a96:	4313      	orrs	r3, r2
 8009a98:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a9e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	431a      	orrs	r2, r3
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009aaa:	2300      	movs	r3, #0

}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3714      	adds	r7, #20
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b088      	sub	sp, #32
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009aca:	2310      	movs	r3, #16
 8009acc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ace:	2340      	movs	r3, #64	; 0x40
 8009ad0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ad6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ada:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009adc:	f107 0308 	add.w	r3, r7, #8
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f7ff ff70 	bl	80099c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009aec:	2110      	movs	r1, #16
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 fa64 	bl	8009fbc <SDMMC_GetCmdResp1>
 8009af4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009af6:	69fb      	ldr	r3, [r7, #28]
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3720      	adds	r7, #32
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b088      	sub	sp, #32
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009b12:	2311      	movs	r3, #17
 8009b14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b16:	2340      	movs	r3, #64	; 0x40
 8009b18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b22:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b24:	f107 0308 	add.w	r3, r7, #8
 8009b28:	4619      	mov	r1, r3
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f7ff ff4c 	bl	80099c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b34:	2111      	movs	r1, #17
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 fa40 	bl	8009fbc <SDMMC_GetCmdResp1>
 8009b3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b3e:	69fb      	ldr	r3, [r7, #28]
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3720      	adds	r7, #32
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b088      	sub	sp, #32
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009b52:	2300      	movs	r3, #0
 8009b54:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009b5a:	2312      	movs	r3, #18
 8009b5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b5e:	2340      	movs	r3, #64	; 0x40
 8009b60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b62:	2300      	movs	r3, #0
 8009b64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b6a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b6c:	f107 0308 	add.w	r3, r7, #8
 8009b70:	4619      	mov	r1, r3
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f7ff ff28 	bl	80099c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b7c:	2112      	movs	r1, #18
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 fa1c 	bl	8009fbc <SDMMC_GetCmdResp1>
 8009b84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b86:	69fb      	ldr	r3, [r7, #28]
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3720      	adds	r7, #32
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b088      	sub	sp, #32
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
 8009b98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009ba2:	2318      	movs	r3, #24
 8009ba4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ba6:	2340      	movs	r3, #64	; 0x40
 8009ba8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009baa:	2300      	movs	r3, #0
 8009bac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bb2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bb4:	f107 0308 	add.w	r3, r7, #8
 8009bb8:	4619      	mov	r1, r3
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f7ff ff04 	bl	80099c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bc4:	2118      	movs	r1, #24
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 f9f8 	bl	8009fbc <SDMMC_GetCmdResp1>
 8009bcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bce:	69fb      	ldr	r3, [r7, #28]
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3720      	adds	r7, #32
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b088      	sub	sp, #32
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009be2:	2300      	movs	r3, #0
 8009be4:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009bea:	2319      	movs	r3, #25
 8009bec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009bee:	2340      	movs	r3, #64	; 0x40
 8009bf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bfa:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bfc:	f107 0308 	add.w	r3, r7, #8
 8009c00:	4619      	mov	r1, r3
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f7ff fee0 	bl	80099c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c0c:	2119      	movs	r1, #25
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 f9d4 	bl	8009fbc <SDMMC_GetCmdResp1>
 8009c14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c16:	69fb      	ldr	r3, [r7, #28]
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3720      	adds	r7, #32
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b088      	sub	sp, #32
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009c30:	230c      	movs	r3, #12
 8009c32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c34:	2340      	movs	r3, #64	; 0x40
 8009c36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c40:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c42:	f107 0308 	add.w	r3, r7, #8
 8009c46:	4619      	mov	r1, r3
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f7ff febd 	bl	80099c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 8009c4e:	4a05      	ldr	r2, [pc, #20]	; (8009c64 <SDMMC_CmdStopTransfer+0x44>)
 8009c50:	210c      	movs	r1, #12
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 f9b2 	bl	8009fbc <SDMMC_GetCmdResp1>
 8009c58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c5a:	69fb      	ldr	r3, [r7, #28]
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3720      	adds	r7, #32
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}
 8009c64:	05f5e100 	.word	0x05f5e100

08009c68 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b08a      	sub	sp, #40	; 0x28
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009c74:	2300      	movs	r3, #0
 8009c76:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009c7c:	2307      	movs	r3, #7
 8009c7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c80:	2340      	movs	r3, #64	; 0x40
 8009c82:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c84:	2300      	movs	r3, #0
 8009c86:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c8c:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c8e:	f107 0310 	add.w	r3, r7, #16
 8009c92:	4619      	mov	r1, r3
 8009c94:	68f8      	ldr	r0, [r7, #12]
 8009c96:	f7ff fe97 	bl	80099c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c9e:	2107      	movs	r1, #7
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	f000 f98b 	bl	8009fbc <SDMMC_GetCmdResp1>
 8009ca6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3728      	adds	r7, #40	; 0x28
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}

08009cb2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009cb2:	b580      	push	{r7, lr}
 8009cb4:	b088      	sub	sp, #32
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009cce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cd2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009cd4:	f107 0308 	add.w	r3, r7, #8
 8009cd8:	4619      	mov	r1, r3
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f7ff fe74 	bl	80099c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 f941 	bl	8009f68 <SDMMC_GetCmdError>
 8009ce6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ce8:	69fb      	ldr	r3, [r7, #28]
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3720      	adds	r7, #32
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}

08009cf2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b088      	sub	sp, #32
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009cfe:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009d02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009d04:	2308      	movs	r3, #8
 8009d06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d08:	2340      	movs	r3, #64	; 0x40
 8009d0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d14:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d16:	f107 0308 	add.w	r3, r7, #8
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f7ff fe53 	bl	80099c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 fb12 	bl	800a34c <SDMMC_GetCmdResp7>
 8009d28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d2a:	69fb      	ldr	r3, [r7, #28]
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3720      	adds	r7, #32
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b088      	sub	sp, #32
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009d46:	2337      	movs	r3, #55	; 0x37
 8009d48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d4a:	2340      	movs	r3, #64	; 0x40
 8009d4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d56:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d58:	f107 0308 	add.w	r3, r7, #8
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f7ff fe32 	bl	80099c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d68:	2137      	movs	r1, #55	; 0x37
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 f926 	bl	8009fbc <SDMMC_GetCmdResp1>
 8009d70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d72:	69fb      	ldr	r3, [r7, #28]
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3720      	adds	r7, #32
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b088      	sub	sp, #32
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009d86:	2300      	movs	r3, #0
 8009d88:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8009d8a:	683a      	ldr	r2, [r7, #0]
 8009d8c:	4b0d      	ldr	r3, [pc, #52]	; (8009dc4 <SDMMC_CmdAppOperCommand+0x48>)
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009d92:	2329      	movs	r3, #41	; 0x29
 8009d94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d96:	2340      	movs	r3, #64	; 0x40
 8009d98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009da2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009da4:	f107 0308 	add.w	r3, r7, #8
 8009da8:	4619      	mov	r1, r3
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f7ff fe0c 	bl	80099c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 fa29 	bl	800a208 <SDMMC_GetCmdResp3>
 8009db6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009db8:	69fb      	ldr	r3, [r7, #28]
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3720      	adds	r7, #32
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	80100000 	.word	0x80100000

08009dc8 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b088      	sub	sp, #32
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009dda:	2306      	movs	r3, #6
 8009ddc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009dde:	2340      	movs	r3, #64	; 0x40
 8009de0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009de2:	2300      	movs	r3, #0
 8009de4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009de6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dea:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009dec:	f107 0308 	add.w	r3, r7, #8
 8009df0:	4619      	mov	r1, r3
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f7ff fde8 	bl	80099c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dfc:	2106      	movs	r1, #6
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f000 f8dc 	bl	8009fbc <SDMMC_GetCmdResp1>
 8009e04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e06:	69fb      	ldr	r3, [r7, #28]
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3720      	adds	r7, #32
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b088      	sub	sp, #32
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009e20:	2333      	movs	r3, #51	; 0x33
 8009e22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e24:	2340      	movs	r3, #64	; 0x40
 8009e26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e30:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e32:	f107 0308 	add.w	r3, r7, #8
 8009e36:	4619      	mov	r1, r3
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f7ff fdc5 	bl	80099c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e42:	2133      	movs	r1, #51	; 0x33
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 f8b9 	bl	8009fbc <SDMMC_GetCmdResp1>
 8009e4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e4c:	69fb      	ldr	r3, [r7, #28]
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3720      	adds	r7, #32
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}

08009e56 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009e56:	b580      	push	{r7, lr}
 8009e58:	b088      	sub	sp, #32
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 8009e62:	2300      	movs	r3, #0
 8009e64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009e66:	2302      	movs	r3, #2
 8009e68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009e6a:	23c0      	movs	r3, #192	; 0xc0
 8009e6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e76:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e78:	f107 0308 	add.w	r3, r7, #8
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f7ff fda2 	bl	80099c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f000 f97f 	bl	800a188 <SDMMC_GetCmdResp2>
 8009e8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e8c:	69fb      	ldr	r3, [r7, #28]
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3720      	adds	r7, #32
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b088      	sub	sp, #32
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
 8009e9e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009ea8:	2309      	movs	r3, #9
 8009eaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009eac:	23c0      	movs	r3, #192	; 0xc0
 8009eae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009eb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009eb8:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009eba:	f107 0308 	add.w	r3, r7, #8
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f7ff fd81 	bl	80099c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 f95e 	bl	800a188 <SDMMC_GetCmdResp2>
 8009ecc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ece:	69fb      	ldr	r3, [r7, #28]
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3720      	adds	r7, #32
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b088      	sub	sp, #32
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009eea:	2303      	movs	r3, #3
 8009eec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009eee:	2340      	movs	r3, #64	; 0x40
 8009ef0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ef6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009efa:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009efc:	f107 0308 	add.w	r3, r7, #8
 8009f00:	4619      	mov	r1, r3
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f7ff fd60 	bl	80099c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009f08:	683a      	ldr	r2, [r7, #0]
 8009f0a:	2103      	movs	r1, #3
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 f9af 	bl	800a270 <SDMMC_GetCmdResp6>
 8009f12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f14:	69fb      	ldr	r3, [r7, #28]
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3720      	adds	r7, #32
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}

08009f1e <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009f1e:	b580      	push	{r7, lr}
 8009f20:	b088      	sub	sp, #32
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
 8009f26:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009f30:	230d      	movs	r3, #13
 8009f32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f34:	2340      	movs	r3, #64	; 0x40
 8009f36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f40:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f42:	f107 0308 	add.w	r3, r7, #8
 8009f46:	4619      	mov	r1, r3
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f7ff fd3d 	bl	80099c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f52:	210d      	movs	r1, #13
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 f831 	bl	8009fbc <SDMMC_GetCmdResp1>
 8009f5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f5c:	69fb      	ldr	r3, [r7, #28]
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3720      	adds	r7, #32
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
	...

08009f68 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009f68:	b490      	push	{r4, r7}
 8009f6a:	b082      	sub	sp, #8
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8009f70:	4b10      	ldr	r3, [pc, #64]	; (8009fb4 <SDMMC_GetCmdError+0x4c>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a10      	ldr	r2, [pc, #64]	; (8009fb8 <SDMMC_GetCmdError+0x50>)
 8009f76:	fba2 2303 	umull	r2, r3, r2, r3
 8009f7a:	0a5b      	lsrs	r3, r3, #9
 8009f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f80:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009f84:	4623      	mov	r3, r4
 8009f86:	1e5c      	subs	r4, r3, #1
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d102      	bne.n	8009f92 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009f8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f90:	e00a      	b.n	8009fa8 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d0f2      	beq.n	8009f84 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8009fa4:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009fa6:	2300      	movs	r3, #0
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3708      	adds	r7, #8
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bc90      	pop	{r4, r7}
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop
 8009fb4:	2000002c 	.word	0x2000002c
 8009fb8:	10624dd3 	.word	0x10624dd3

08009fbc <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009fbc:	b590      	push	{r4, r7, lr}
 8009fbe:	b087      	sub	sp, #28
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	607a      	str	r2, [r7, #4]
 8009fc8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8009fca:	4b6c      	ldr	r3, [pc, #432]	; (800a17c <SDMMC_GetCmdResp1+0x1c0>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4a6c      	ldr	r2, [pc, #432]	; (800a180 <SDMMC_GetCmdResp1+0x1c4>)
 8009fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8009fd4:	0a5b      	lsrs	r3, r3, #9
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8009fdc:	4623      	mov	r3, r4
 8009fde:	1e5c      	subs	r4, r3, #1
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d102      	bne.n	8009fea <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009fe4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009fe8:	e0c3      	b.n	800a172 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fee:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d0f2      	beq.n	8009fdc <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ffa:	f003 0304 	and.w	r3, r3, #4
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d004      	beq.n	800a00c <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2204      	movs	r2, #4
 800a006:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a008:	2304      	movs	r3, #4
 800a00a:	e0b2      	b.n	800a172 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a010:	f003 0301 	and.w	r3, r3, #1
 800a014:	2b00      	cmp	r3, #0
 800a016:	d004      	beq.n	800a022 <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2201      	movs	r2, #1
 800a01c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a01e:	2301      	movs	r3, #1
 800a020:	e0a7      	b.n	800a172 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	f7ff fcfa 	bl	8009a1c <SDMMC_GetCommandResponse>
 800a028:	4603      	mov	r3, r0
 800a02a:	461a      	mov	r2, r3
 800a02c:	7afb      	ldrb	r3, [r7, #11]
 800a02e:	4293      	cmp	r3, r2
 800a030:	d001      	beq.n	800a036 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a032:	2301      	movs	r3, #1
 800a034:	e09d      	b.n	800a172 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a03c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a03e:	2100      	movs	r1, #0
 800a040:	68f8      	ldr	r0, [r7, #12]
 800a042:	f7ff fcf8 	bl	8009a36 <SDMMC_GetResponse>
 800a046:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a048:	697a      	ldr	r2, [r7, #20]
 800a04a:	4b4e      	ldr	r3, [pc, #312]	; (800a184 <SDMMC_GetCmdResp1+0x1c8>)
 800a04c:	4013      	ands	r3, r2
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d101      	bne.n	800a056 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800a052:	2300      	movs	r3, #0
 800a054:	e08d      	b.n	800a172 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	da02      	bge.n	800a062 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a05c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a060:	e087      	b.n	800a172 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d001      	beq.n	800a070 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a06c:	2340      	movs	r3, #64	; 0x40
 800a06e:	e080      	b.n	800a172 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a076:	2b00      	cmp	r3, #0
 800a078:	d001      	beq.n	800a07e <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a07a:	2380      	movs	r3, #128	; 0x80
 800a07c:	e079      	b.n	800a172 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a084:	2b00      	cmp	r3, #0
 800a086:	d002      	beq.n	800a08e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a088:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a08c:	e071      	b.n	800a172 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a094:	2b00      	cmp	r3, #0
 800a096:	d002      	beq.n	800a09e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a098:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a09c:	e069      	b.n	800a172 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d002      	beq.n	800a0ae <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a0a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0ac:	e061      	b.n	800a172 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d002      	beq.n	800a0be <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a0b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a0bc:	e059      	b.n	800a172 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d002      	beq.n	800a0ce <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a0c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a0cc:	e051      	b.n	800a172 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d002      	beq.n	800a0de <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a0d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a0dc:	e049      	b.n	800a172 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d002      	beq.n	800a0ee <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a0e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a0ec:	e041      	b.n	800a172 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d002      	beq.n	800a0fe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 800a0f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0fc:	e039      	b.n	800a172 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a104:	2b00      	cmp	r3, #0
 800a106:	d002      	beq.n	800a10e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a108:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a10c:	e031      	b.n	800a172 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a114:	2b00      	cmp	r3, #0
 800a116:	d002      	beq.n	800a11e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a118:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a11c:	e029      	b.n	800a172 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a124:	2b00      	cmp	r3, #0
 800a126:	d002      	beq.n	800a12e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a128:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a12c:	e021      	b.n	800a172 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a134:	2b00      	cmp	r3, #0
 800a136:	d002      	beq.n	800a13e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a138:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a13c:	e019      	b.n	800a172 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a144:	2b00      	cmp	r3, #0
 800a146:	d002      	beq.n	800a14e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a148:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a14c:	e011      	b.n	800a172 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a154:	2b00      	cmp	r3, #0
 800a156:	d002      	beq.n	800a15e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a158:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a15c:	e009      	b.n	800a172 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	f003 0308 	and.w	r3, r3, #8
 800a164:	2b00      	cmp	r3, #0
 800a166:	d002      	beq.n	800a16e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a168:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a16c:	e001      	b.n	800a172 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a16e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a172:	4618      	mov	r0, r3
 800a174:	371c      	adds	r7, #28
 800a176:	46bd      	mov	sp, r7
 800a178:	bd90      	pop	{r4, r7, pc}
 800a17a:	bf00      	nop
 800a17c:	2000002c 	.word	0x2000002c
 800a180:	10624dd3 	.word	0x10624dd3
 800a184:	fdffe008 	.word	0xfdffe008

0800a188 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a188:	b490      	push	{r4, r7}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800a190:	4b1b      	ldr	r3, [pc, #108]	; (800a200 <SDMMC_GetCmdResp2+0x78>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4a1b      	ldr	r2, [pc, #108]	; (800a204 <SDMMC_GetCmdResp2+0x7c>)
 800a196:	fba2 2303 	umull	r2, r3, r2, r3
 800a19a:	0a5b      	lsrs	r3, r3, #9
 800a19c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1a0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800a1a4:	4623      	mov	r3, r4
 800a1a6:	1e5c      	subs	r4, r3, #1
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d102      	bne.n	800a1b2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a1ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a1b0:	e020      	b.n	800a1f4 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d0f2      	beq.n	800a1a4 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1c2:	f003 0304 	and.w	r3, r3, #4
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d004      	beq.n	800a1d4 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2204      	movs	r2, #4
 800a1ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a1d0:	2304      	movs	r3, #4
 800a1d2:	e00f      	b.n	800a1f4 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1d8:	f003 0301 	and.w	r3, r3, #1
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d004      	beq.n	800a1ea <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e004      	b.n	800a1f4 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a1f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a1f2:	2300      	movs	r3, #0
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3708      	adds	r7, #8
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bc90      	pop	{r4, r7}
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop
 800a200:	2000002c 	.word	0x2000002c
 800a204:	10624dd3 	.word	0x10624dd3

0800a208 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a208:	b490      	push	{r4, r7}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800a210:	4b15      	ldr	r3, [pc, #84]	; (800a268 <SDMMC_GetCmdResp3+0x60>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a15      	ldr	r2, [pc, #84]	; (800a26c <SDMMC_GetCmdResp3+0x64>)
 800a216:	fba2 2303 	umull	r2, r3, r2, r3
 800a21a:	0a5b      	lsrs	r3, r3, #9
 800a21c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a220:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800a224:	4623      	mov	r3, r4
 800a226:	1e5c      	subs	r4, r3, #1
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d102      	bne.n	800a232 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a22c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a230:	e015      	b.n	800a25e <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a236:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d0f2      	beq.n	800a224 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a242:	f003 0304 	and.w	r3, r3, #4
 800a246:	2b00      	cmp	r3, #0
 800a248:	d004      	beq.n	800a254 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2204      	movs	r2, #4
 800a24e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a250:	2304      	movs	r3, #4
 800a252:	e004      	b.n	800a25e <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a25a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a25c:	2300      	movs	r3, #0
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3708      	adds	r7, #8
 800a262:	46bd      	mov	sp, r7
 800a264:	bc90      	pop	{r4, r7}
 800a266:	4770      	bx	lr
 800a268:	2000002c 	.word	0x2000002c
 800a26c:	10624dd3 	.word	0x10624dd3

0800a270 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a270:	b590      	push	{r4, r7, lr}
 800a272:	b087      	sub	sp, #28
 800a274:	af00      	add	r7, sp, #0
 800a276:	60f8      	str	r0, [r7, #12]
 800a278:	460b      	mov	r3, r1
 800a27a:	607a      	str	r2, [r7, #4]
 800a27c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800a27e:	4b31      	ldr	r3, [pc, #196]	; (800a344 <SDMMC_GetCmdResp6+0xd4>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4a31      	ldr	r2, [pc, #196]	; (800a348 <SDMMC_GetCmdResp6+0xd8>)
 800a284:	fba2 2303 	umull	r2, r3, r2, r3
 800a288:	0a5b      	lsrs	r3, r3, #9
 800a28a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a28e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800a292:	4623      	mov	r3, r4
 800a294:	1e5c      	subs	r4, r3, #1
 800a296:	2b00      	cmp	r3, #0
 800a298:	d102      	bne.n	800a2a0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a29a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a29e:	e04c      	b.n	800a33a <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2a4:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d0f2      	beq.n	800a292 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2b0:	f003 0304 	and.w	r3, r3, #4
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d004      	beq.n	800a2c2 <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2204      	movs	r2, #4
 800a2bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a2be:	2304      	movs	r3, #4
 800a2c0:	e03b      	b.n	800a33a <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2c6:	f003 0301 	and.w	r3, r3, #1
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d004      	beq.n	800a2d8 <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2201      	movs	r2, #1
 800a2d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	e030      	b.n	800a33a <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a2d8:	68f8      	ldr	r0, [r7, #12]
 800a2da:	f7ff fb9f 	bl	8009a1c <SDMMC_GetCommandResponse>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	7afb      	ldrb	r3, [r7, #11]
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d001      	beq.n	800a2ec <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	e026      	b.n	800a33a <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800a2f2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a2f4:	2100      	movs	r1, #0
 800a2f6:	68f8      	ldr	r0, [r7, #12]
 800a2f8:	f7ff fb9d 	bl	8009a36 <SDMMC_GetResponse>
 800a2fc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a304:	2b00      	cmp	r3, #0
 800a306:	d106      	bne.n	800a316 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	0c1b      	lsrs	r3, r3, #16
 800a30c:	b29a      	uxth	r2, r3
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a312:	2300      	movs	r3, #0
 800a314:	e011      	b.n	800a33a <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d002      	beq.n	800a326 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a320:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a324:	e009      	b.n	800a33a <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d002      	beq.n	800a336 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a330:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a334:	e001      	b.n	800a33a <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a336:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	371c      	adds	r7, #28
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd90      	pop	{r4, r7, pc}
 800a342:	bf00      	nop
 800a344:	2000002c 	.word	0x2000002c
 800a348:	10624dd3 	.word	0x10624dd3

0800a34c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a34c:	b490      	push	{r4, r7}
 800a34e:	b082      	sub	sp, #8
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800a354:	4b18      	ldr	r3, [pc, #96]	; (800a3b8 <SDMMC_GetCmdResp7+0x6c>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a18      	ldr	r2, [pc, #96]	; (800a3bc <SDMMC_GetCmdResp7+0x70>)
 800a35a:	fba2 2303 	umull	r2, r3, r2, r3
 800a35e:	0a5b      	lsrs	r3, r3, #9
 800a360:	f241 3288 	movw	r2, #5000	; 0x1388
 800a364:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800a368:	4623      	mov	r3, r4
 800a36a:	1e5c      	subs	r4, r3, #1
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d102      	bne.n	800a376 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a370:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a374:	e01a      	b.n	800a3ac <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a37a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d0f2      	beq.n	800a368 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a386:	f003 0304 	and.w	r3, r3, #4
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d004      	beq.n	800a398 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2240      	movs	r2, #64	; 0x40
 800a392:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a394:	2304      	movs	r3, #4
 800a396:	e009      	b.n	800a3ac <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a39c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d002      	beq.n	800a3aa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2240      	movs	r2, #64	; 0x40
 800a3a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a3aa:	2300      	movs	r3, #0
  
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3708      	adds	r7, #8
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bc90      	pop	{r4, r7}
 800a3b4:	4770      	bx	lr
 800a3b6:	bf00      	nop
 800a3b8:	2000002c 	.word	0x2000002c
 800a3bc:	10624dd3 	.word	0x10624dd3

0800a3c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a3c0:	b084      	sub	sp, #16
 800a3c2:	b580      	push	{r7, lr}
 800a3c4:	b084      	sub	sp, #16
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	6078      	str	r0, [r7, #4]
 800a3ca:	f107 001c 	add.w	r0, r7, #28
 800a3ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d120      	bne.n	800a41a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	68da      	ldr	r2, [r3, #12]
 800a3e8:	4b20      	ldr	r3, [pc, #128]	; (800a46c <USB_CoreInit+0xac>)
 800a3ea:	4013      	ands	r3, r2
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a3fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3fe:	2b01      	cmp	r3, #1
 800a400:	d105      	bne.n	800a40e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	68db      	ldr	r3, [r3, #12]
 800a406:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f000 f942 	bl	800a698 <USB_CoreReset>
 800a414:	4603      	mov	r3, r0
 800a416:	73fb      	strb	r3, [r7, #15]
 800a418:	e010      	b.n	800a43c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	68db      	ldr	r3, [r3, #12]
 800a41e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f000 f936 	bl	800a698 <USB_CoreReset>
 800a42c:	4603      	mov	r3, r0
 800a42e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a434:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800a43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43e:	2b01      	cmp	r3, #1
 800a440:	d10b      	bne.n	800a45a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	689b      	ldr	r3, [r3, #8]
 800a446:	f043 0206 	orr.w	r2, r3, #6
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	689b      	ldr	r3, [r3, #8]
 800a452:	f043 0220 	orr.w	r2, r3, #32
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a45a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3710      	adds	r7, #16
 800a460:	46bd      	mov	sp, r7
 800a462:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a466:	b004      	add	sp, #16
 800a468:	4770      	bx	lr
 800a46a:	bf00      	nop
 800a46c:	ffbdffbf 	.word	0xffbdffbf

0800a470 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a470:	b480      	push	{r7}
 800a472:	b083      	sub	sp, #12
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	689b      	ldr	r3, [r3, #8]
 800a47c:	f043 0201 	orr.w	r2, r3, #1
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a484:	2300      	movs	r3, #0
}
 800a486:	4618      	mov	r0, r3
 800a488:	370c      	adds	r7, #12
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr

0800a492 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a492:	b480      	push	{r7}
 800a494:	b083      	sub	sp, #12
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	f023 0201 	bic.w	r2, r3, #1
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a4a6:	2300      	movs	r3, #0
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	370c      	adds	r7, #12
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	460b      	mov	r3, r1
 800a4be:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a4cc:	78fb      	ldrb	r3, [r7, #3]
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	d106      	bne.n	800a4e0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	68db      	ldr	r3, [r3, #12]
 800a4d6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	60da      	str	r2, [r3, #12]
 800a4de:	e00b      	b.n	800a4f8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a4e0:	78fb      	ldrb	r3, [r7, #3]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d106      	bne.n	800a4f4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	68db      	ldr	r3, [r3, #12]
 800a4ea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	60da      	str	r2, [r3, #12]
 800a4f2:	e001      	b.n	800a4f8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	e003      	b.n	800a500 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a4f8:	2032      	movs	r0, #50	; 0x32
 800a4fa:	f7f6 f833 	bl	8000564 <HAL_Delay>

  return HAL_OK;
 800a4fe:	2300      	movs	r3, #0
}
 800a500:	4618      	mov	r0, r3
 800a502:	3708      	adds	r7, #8
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a508:	b480      	push	{r7}
 800a50a:	b085      	sub	sp, #20
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a512:	2300      	movs	r3, #0
 800a514:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	019b      	lsls	r3, r3, #6
 800a51a:	f043 0220 	orr.w	r2, r3, #32
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	3301      	adds	r3, #1
 800a526:	60fb      	str	r3, [r7, #12]
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	4a09      	ldr	r2, [pc, #36]	; (800a550 <USB_FlushTxFifo+0x48>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d901      	bls.n	800a534 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a530:	2303      	movs	r3, #3
 800a532:	e006      	b.n	800a542 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	691b      	ldr	r3, [r3, #16]
 800a538:	f003 0320 	and.w	r3, r3, #32
 800a53c:	2b20      	cmp	r3, #32
 800a53e:	d0f0      	beq.n	800a522 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a540:	2300      	movs	r3, #0
}
 800a542:	4618      	mov	r0, r3
 800a544:	3714      	adds	r7, #20
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr
 800a54e:	bf00      	nop
 800a550:	00030d40 	.word	0x00030d40

0800a554 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a554:	b480      	push	{r7}
 800a556:	b085      	sub	sp, #20
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a55c:	2300      	movs	r3, #0
 800a55e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2210      	movs	r2, #16
 800a564:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	3301      	adds	r3, #1
 800a56a:	60fb      	str	r3, [r7, #12]
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	4a09      	ldr	r2, [pc, #36]	; (800a594 <USB_FlushRxFifo+0x40>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d901      	bls.n	800a578 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a574:	2303      	movs	r3, #3
 800a576:	e006      	b.n	800a586 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	691b      	ldr	r3, [r3, #16]
 800a57c:	f003 0310 	and.w	r3, r3, #16
 800a580:	2b10      	cmp	r3, #16
 800a582:	d0f0      	beq.n	800a566 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a584:	2300      	movs	r3, #0
}
 800a586:	4618      	mov	r0, r3
 800a588:	3714      	adds	r7, #20
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr
 800a592:	bf00      	nop
 800a594:	00030d40 	.word	0x00030d40

0800a598 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a598:	b480      	push	{r7}
 800a59a:	b089      	sub	sp, #36	; 0x24
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	60b9      	str	r1, [r7, #8]
 800a5a2:	4611      	mov	r1, r2
 800a5a4:	461a      	mov	r2, r3
 800a5a6:	460b      	mov	r3, r1
 800a5a8:	71fb      	strb	r3, [r7, #7]
 800a5aa:	4613      	mov	r3, r2
 800a5ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800a5b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d11a      	bne.n	800a5f4 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a5be:	88bb      	ldrh	r3, [r7, #4]
 800a5c0:	3303      	adds	r3, #3
 800a5c2:	089b      	lsrs	r3, r3, #2
 800a5c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	61bb      	str	r3, [r7, #24]
 800a5ca:	e00f      	b.n	800a5ec <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800a5cc:	79fb      	ldrb	r3, [r7, #7]
 800a5ce:	031a      	lsls	r2, r3, #12
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	4413      	add	r3, r2
 800a5d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5d8:	461a      	mov	r2, r3
 800a5da:	69fb      	ldr	r3, [r7, #28]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	3304      	adds	r3, #4
 800a5e4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a5e6:	69bb      	ldr	r3, [r7, #24]
 800a5e8:	3301      	adds	r3, #1
 800a5ea:	61bb      	str	r3, [r7, #24]
 800a5ec:	69ba      	ldr	r2, [r7, #24]
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d3eb      	bcc.n	800a5cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a5f4:	2300      	movs	r3, #0
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3724      	adds	r7, #36	; 0x24
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a600:	4770      	bx	lr

0800a602 <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a602:	b480      	push	{r7}
 800a604:	b089      	sub	sp, #36	; 0x24
 800a606:	af00      	add	r7, sp, #0
 800a608:	60f8      	str	r0, [r7, #12]
 800a60a:	60b9      	str	r1, [r7, #8]
 800a60c:	4613      	mov	r3, r2
 800a60e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a618:	88fb      	ldrh	r3, [r7, #6]
 800a61a:	3303      	adds	r3, #3
 800a61c:	089b      	lsrs	r3, r3, #2
 800a61e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800a620:	2300      	movs	r3, #0
 800a622:	61bb      	str	r3, [r7, #24]
 800a624:	e00b      	b.n	800a63e <USB_ReadPacket+0x3c>
  {
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	69fb      	ldr	r3, [r7, #28]
 800a630:	601a      	str	r2, [r3, #0]
    pDest++;
 800a632:	69fb      	ldr	r3, [r7, #28]
 800a634:	3304      	adds	r3, #4
 800a636:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a638:	69bb      	ldr	r3, [r7, #24]
 800a63a:	3301      	adds	r3, #1
 800a63c:	61bb      	str	r3, [r7, #24]
 800a63e:	69ba      	ldr	r2, [r7, #24]
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	429a      	cmp	r2, r3
 800a644:	d3ef      	bcc.n	800a626 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800a646:	69fb      	ldr	r3, [r7, #28]
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3724      	adds	r7, #36	; 0x24
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr

0800a654 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a654:	b480      	push	{r7}
 800a656:	b085      	sub	sp, #20
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	695b      	ldr	r3, [r3, #20]
 800a660:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	699b      	ldr	r3, [r3, #24]
 800a666:	68fa      	ldr	r2, [r7, #12]
 800a668:	4013      	ands	r3, r2
 800a66a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a66c:	68fb      	ldr	r3, [r7, #12]
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3714      	adds	r7, #20
 800a672:	46bd      	mov	sp, r7
 800a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a678:	4770      	bx	lr

0800a67a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a67a:	b480      	push	{r7}
 800a67c:	b083      	sub	sp, #12
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	695b      	ldr	r3, [r3, #20]
 800a686:	f003 0301 	and.w	r3, r3, #1
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	370c      	adds	r7, #12
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr
	...

0800a698 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a698:	b480      	push	{r7}
 800a69a:	b085      	sub	sp, #20
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	60fb      	str	r3, [r7, #12]
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	4a13      	ldr	r2, [pc, #76]	; (800a6fc <USB_CoreReset+0x64>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d901      	bls.n	800a6b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a6b2:	2303      	movs	r3, #3
 800a6b4:	e01b      	b.n	800a6ee <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	691b      	ldr	r3, [r3, #16]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	daf2      	bge.n	800a6a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	691b      	ldr	r3, [r3, #16]
 800a6c6:	f043 0201 	orr.w	r2, r3, #1
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	3301      	adds	r3, #1
 800a6d2:	60fb      	str	r3, [r7, #12]
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	4a09      	ldr	r2, [pc, #36]	; (800a6fc <USB_CoreReset+0x64>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d901      	bls.n	800a6e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a6dc:	2303      	movs	r3, #3
 800a6de:	e006      	b.n	800a6ee <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	691b      	ldr	r3, [r3, #16]
 800a6e4:	f003 0301 	and.w	r3, r3, #1
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d0f0      	beq.n	800a6ce <USB_CoreReset+0x36>

  return HAL_OK;
 800a6ec:	2300      	movs	r3, #0
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3714      	adds	r7, #20
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f8:	4770      	bx	lr
 800a6fa:	bf00      	nop
 800a6fc:	00030d40 	.word	0x00030d40

0800a700 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a700:	b084      	sub	sp, #16
 800a702:	b580      	push	{r7, lr}
 800a704:	b084      	sub	sp, #16
 800a706:	af00      	add	r7, sp, #0
 800a708:	6078      	str	r0, [r7, #4]
 800a70a:	f107 001c 	add.w	r0, r7, #28
 800a70e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a71c:	461a      	mov	r2, r3
 800a71e:	2300      	movs	r3, #0
 800a720:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a726:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a736:	2b00      	cmp	r3, #0
 800a738:	d018      	beq.n	800a76c <USB_HostInit+0x6c>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800a73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73c:	2b03      	cmp	r3, #3
 800a73e:	d10a      	bne.n	800a756 <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	68ba      	ldr	r2, [r7, #8]
 800a74a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a74e:	f043 0304 	orr.w	r3, r3, #4
 800a752:	6013      	str	r3, [r2, #0]
 800a754:	e014      	b.n	800a780 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	68ba      	ldr	r2, [r7, #8]
 800a760:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a764:	f023 0304 	bic.w	r3, r3, #4
 800a768:	6013      	str	r3, [r2, #0]
 800a76a:	e009      	b.n	800a780 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	68ba      	ldr	r2, [r7, #8]
 800a776:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a77a:	f023 0304 	bic.w	r3, r3, #4
 800a77e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800a780:	2110      	movs	r1, #16
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f7ff fec0 	bl	800a508 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f7ff fee3 	bl	800a554 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a78e:	2300      	movs	r3, #0
 800a790:	60fb      	str	r3, [r7, #12]
 800a792:	e015      	b.n	800a7c0 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	015a      	lsls	r2, r3, #5
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	4413      	add	r3, r2
 800a79c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	f04f 33ff 	mov.w	r3, #4294967295
 800a7a6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	015a      	lsls	r2, r3, #5
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	4413      	add	r3, r2
 800a7b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	3301      	adds	r3, #1
 800a7be:	60fb      	str	r3, [r7, #12]
 800a7c0:	6a3b      	ldr	r3, [r7, #32]
 800a7c2:	68fa      	ldr	r2, [r7, #12]
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d3e5      	bcc.n	800a794 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800a7c8:	2101      	movs	r1, #1
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 f8ac 	bl	800a928 <USB_DriveVbus>

  HAL_Delay(200U);
 800a7d0:	20c8      	movs	r0, #200	; 0xc8
 800a7d2:	f7f5 fec7 	bl	8000564 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f04f 32ff 	mov.w	r2, #4294967295
 800a7e2:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d00b      	beq.n	800a808 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7f6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	4a14      	ldr	r2, [pc, #80]	; (800a84c <USB_HostInit+0x14c>)
 800a7fc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	4a13      	ldr	r2, [pc, #76]	; (800a850 <USB_HostInit+0x150>)
 800a802:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800a806:	e009      	b.n	800a81c <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2280      	movs	r2, #128	; 0x80
 800a80c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	4a10      	ldr	r2, [pc, #64]	; (800a854 <USB_HostInit+0x154>)
 800a812:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	4a10      	ldr	r2, [pc, #64]	; (800a858 <USB_HostInit+0x158>)
 800a818:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d105      	bne.n	800a82e <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	699b      	ldr	r3, [r3, #24]
 800a826:	f043 0210 	orr.w	r2, r3, #16
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	699a      	ldr	r2, [r3, #24]
 800a832:	4b0a      	ldr	r3, [pc, #40]	; (800a85c <USB_HostInit+0x15c>)
 800a834:	4313      	orrs	r3, r2
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800a83a:	2300      	movs	r3, #0
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3710      	adds	r7, #16
 800a840:	46bd      	mov	sp, r7
 800a842:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a846:	b004      	add	sp, #16
 800a848:	4770      	bx	lr
 800a84a:	bf00      	nop
 800a84c:	01000200 	.word	0x01000200
 800a850:	00e00300 	.word	0x00e00300
 800a854:	00600080 	.word	0x00600080
 800a858:	004000e0 	.word	0x004000e0
 800a85c:	a3200008 	.word	0xa3200008

0800a860 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a860:	b480      	push	{r7}
 800a862:	b085      	sub	sp, #20
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	460b      	mov	r3, r1
 800a86a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	68fa      	ldr	r2, [r7, #12]
 800a87a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a87e:	f023 0303 	bic.w	r3, r3, #3
 800a882:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a88a:	681a      	ldr	r2, [r3, #0]
 800a88c:	78fb      	ldrb	r3, [r7, #3]
 800a88e:	f003 0303 	and.w	r3, r3, #3
 800a892:	68f9      	ldr	r1, [r7, #12]
 800a894:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a898:	4313      	orrs	r3, r2
 800a89a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a89c:	78fb      	ldrb	r3, [r7, #3]
 800a89e:	2b01      	cmp	r3, #1
 800a8a0:	d107      	bne.n	800a8b2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a8ae:	6053      	str	r3, [r2, #4]
 800a8b0:	e009      	b.n	800a8c6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800a8b2:	78fb      	ldrb	r3, [r7, #3]
 800a8b4:	2b02      	cmp	r3, #2
 800a8b6:	d106      	bne.n	800a8c6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a8be:	461a      	mov	r2, r3
 800a8c0:	f241 7370 	movw	r3, #6000	; 0x1770
 800a8c4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800a8c6:	2300      	movs	r3, #0
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3714      	adds	r7, #20
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr

0800a8d4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b084      	sub	sp, #16
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a8f4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	68fa      	ldr	r2, [r7, #12]
 800a8fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a8fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a902:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800a904:	2064      	movs	r0, #100	; 0x64
 800a906:	f7f5 fe2d 	bl	8000564 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	68fa      	ldr	r2, [r7, #12]
 800a90e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a912:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a916:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a918:	200a      	movs	r0, #10
 800a91a:	f7f5 fe23 	bl	8000564 <HAL_Delay>

  return HAL_OK;
 800a91e:	2300      	movs	r3, #0
}
 800a920:	4618      	mov	r0, r3
 800a922:	3710      	adds	r7, #16
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a928:	b480      	push	{r7}
 800a92a:	b085      	sub	sp, #20
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	460b      	mov	r3, r1
 800a932:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a938:	2300      	movs	r3, #0
 800a93a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a94c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a954:	2b00      	cmp	r3, #0
 800a956:	d109      	bne.n	800a96c <USB_DriveVbus+0x44>
 800a958:	78fb      	ldrb	r3, [r7, #3]
 800a95a:	2b01      	cmp	r3, #1
 800a95c:	d106      	bne.n	800a96c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	68fa      	ldr	r2, [r7, #12]
 800a962:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a966:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a96a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a976:	d109      	bne.n	800a98c <USB_DriveVbus+0x64>
 800a978:	78fb      	ldrb	r3, [r7, #3]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d106      	bne.n	800a98c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	68fa      	ldr	r2, [r7, #12]
 800a982:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a986:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a98a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a98c:	2300      	movs	r3, #0
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3714      	adds	r7, #20
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr

0800a99a <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a99a:	b480      	push	{r7}
 800a99c:	b085      	sub	sp, #20
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	0c5b      	lsrs	r3, r3, #17
 800a9b8:	f003 0303 	and.w	r3, r3, #3
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3714      	adds	r7, #20
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b085      	sub	sp, #20
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a9da:	689b      	ldr	r3, [r3, #8]
 800a9dc:	b29b      	uxth	r3, r3
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3714      	adds	r7, #20
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr
	...

0800a9ec <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b087      	sub	sp, #28
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	4608      	mov	r0, r1
 800a9f6:	4611      	mov	r1, r2
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	70fb      	strb	r3, [r7, #3]
 800a9fe:	460b      	mov	r3, r1
 800aa00:	70bb      	strb	r3, [r7, #2]
 800aa02:	4613      	mov	r3, r2
 800aa04:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800aa06:	2300      	movs	r3, #0
 800aa08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800aa0e:	78fb      	ldrb	r3, [r7, #3]
 800aa10:	015a      	lsls	r2, r3, #5
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	4413      	add	r3, r2
 800aa16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	f04f 33ff 	mov.w	r3, #4294967295
 800aa20:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800aa22:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800aa26:	2b03      	cmp	r3, #3
 800aa28:	d87e      	bhi.n	800ab28 <USB_HC_Init+0x13c>
 800aa2a:	a201      	add	r2, pc, #4	; (adr r2, 800aa30 <USB_HC_Init+0x44>)
 800aa2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa30:	0800aa41 	.word	0x0800aa41
 800aa34:	0800aaeb 	.word	0x0800aaeb
 800aa38:	0800aa41 	.word	0x0800aa41
 800aa3c:	0800aaad 	.word	0x0800aaad
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800aa40:	78fb      	ldrb	r3, [r7, #3]
 800aa42:	015a      	lsls	r2, r3, #5
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	4413      	add	r3, r2
 800aa48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	f240 439d 	movw	r3, #1181	; 0x49d
 800aa52:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800aa54:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	da10      	bge.n	800aa7e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800aa5c:	78fb      	ldrb	r3, [r7, #3]
 800aa5e:	015a      	lsls	r2, r3, #5
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	4413      	add	r3, r2
 800aa64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa68:	68db      	ldr	r3, [r3, #12]
 800aa6a:	78fa      	ldrb	r2, [r7, #3]
 800aa6c:	0151      	lsls	r1, r2, #5
 800aa6e:	68ba      	ldr	r2, [r7, #8]
 800aa70:	440a      	add	r2, r1
 800aa72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa7a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800aa7c:	e057      	b.n	800ab2e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d051      	beq.n	800ab2e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800aa8a:	78fb      	ldrb	r3, [r7, #3]
 800aa8c:	015a      	lsls	r2, r3, #5
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	4413      	add	r3, r2
 800aa92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa96:	68db      	ldr	r3, [r3, #12]
 800aa98:	78fa      	ldrb	r2, [r7, #3]
 800aa9a:	0151      	lsls	r1, r2, #5
 800aa9c:	68ba      	ldr	r2, [r7, #8]
 800aa9e:	440a      	add	r2, r1
 800aaa0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aaa4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800aaa8:	60d3      	str	r3, [r2, #12]
      break;
 800aaaa:	e040      	b.n	800ab2e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800aaac:	78fb      	ldrb	r3, [r7, #3]
 800aaae:	015a      	lsls	r2, r3, #5
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	4413      	add	r3, r2
 800aab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aab8:	461a      	mov	r2, r3
 800aaba:	f240 639d 	movw	r3, #1693	; 0x69d
 800aabe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800aac0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	da34      	bge.n	800ab32 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800aac8:	78fb      	ldrb	r3, [r7, #3]
 800aaca:	015a      	lsls	r2, r3, #5
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	4413      	add	r3, r2
 800aad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aad4:	68db      	ldr	r3, [r3, #12]
 800aad6:	78fa      	ldrb	r2, [r7, #3]
 800aad8:	0151      	lsls	r1, r2, #5
 800aada:	68ba      	ldr	r2, [r7, #8]
 800aadc:	440a      	add	r2, r1
 800aade:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aae6:	60d3      	str	r3, [r2, #12]
      }

      break;
 800aae8:	e023      	b.n	800ab32 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800aaea:	78fb      	ldrb	r3, [r7, #3]
 800aaec:	015a      	lsls	r2, r3, #5
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	4413      	add	r3, r2
 800aaf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	f240 2325 	movw	r3, #549	; 0x225
 800aafc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800aafe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	da17      	bge.n	800ab36 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800ab06:	78fb      	ldrb	r3, [r7, #3]
 800ab08:	015a      	lsls	r2, r3, #5
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	4413      	add	r3, r2
 800ab0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab12:	68db      	ldr	r3, [r3, #12]
 800ab14:	78fa      	ldrb	r2, [r7, #3]
 800ab16:	0151      	lsls	r1, r2, #5
 800ab18:	68ba      	ldr	r2, [r7, #8]
 800ab1a:	440a      	add	r2, r1
 800ab1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab20:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800ab24:	60d3      	str	r3, [r2, #12]
      }
      break;
 800ab26:	e006      	b.n	800ab36 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800ab28:	2301      	movs	r3, #1
 800ab2a:	75fb      	strb	r3, [r7, #23]
      break;
 800ab2c:	e004      	b.n	800ab38 <USB_HC_Init+0x14c>
      break;
 800ab2e:	bf00      	nop
 800ab30:	e002      	b.n	800ab38 <USB_HC_Init+0x14c>
      break;
 800ab32:	bf00      	nop
 800ab34:	e000      	b.n	800ab38 <USB_HC_Init+0x14c>
      break;
 800ab36:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab3e:	699a      	ldr	r2, [r3, #24]
 800ab40:	78fb      	ldrb	r3, [r7, #3]
 800ab42:	f003 030f 	and.w	r3, r3, #15
 800ab46:	2101      	movs	r1, #1
 800ab48:	fa01 f303 	lsl.w	r3, r1, r3
 800ab4c:	68b9      	ldr	r1, [r7, #8]
 800ab4e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ab52:	4313      	orrs	r3, r2
 800ab54:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	699b      	ldr	r3, [r3, #24]
 800ab5a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800ab62:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	da03      	bge.n	800ab72 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800ab6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab6e:	613b      	str	r3, [r7, #16]
 800ab70:	e001      	b.n	800ab76 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800ab72:	2300      	movs	r3, #0
 800ab74:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800ab76:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ab7a:	2b02      	cmp	r3, #2
 800ab7c:	d103      	bne.n	800ab86 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800ab7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ab82:	60fb      	str	r3, [r7, #12]
 800ab84:	e001      	b.n	800ab8a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800ab86:	2300      	movs	r3, #0
 800ab88:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ab8a:	787b      	ldrb	r3, [r7, #1]
 800ab8c:	059b      	lsls	r3, r3, #22
 800ab8e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800ab92:	78bb      	ldrb	r3, [r7, #2]
 800ab94:	02db      	lsls	r3, r3, #11
 800ab96:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800ab9a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800ab9c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800aba0:	049b      	lsls	r3, r3, #18
 800aba2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800aba6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800aba8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800abaa:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800abae:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800abb4:	78fb      	ldrb	r3, [r7, #3]
 800abb6:	0159      	lsls	r1, r3, #5
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	440b      	add	r3, r1
 800abbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abc0:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800abc6:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800abc8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800abcc:	2b03      	cmp	r3, #3
 800abce:	d10f      	bne.n	800abf0 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800abd0:	78fb      	ldrb	r3, [r7, #3]
 800abd2:	015a      	lsls	r2, r3, #5
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	4413      	add	r3, r2
 800abd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	78fa      	ldrb	r2, [r7, #3]
 800abe0:	0151      	lsls	r1, r2, #5
 800abe2:	68ba      	ldr	r2, [r7, #8]
 800abe4:	440a      	add	r2, r1
 800abe6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800abea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800abee:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800abf0:	7dfb      	ldrb	r3, [r7, #23]
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	371c      	adds	r7, #28
 800abf6:	46bd      	mov	sp, r7
 800abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfc:	4770      	bx	lr
 800abfe:	bf00      	nop

0800ac00 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b08c      	sub	sp, #48	; 0x30
 800ac04:	af02      	add	r7, sp, #8
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	60b9      	str	r1, [r7, #8]
 800ac0a:	4613      	mov	r3, r2
 800ac0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	785b      	ldrb	r3, [r3, #1]
 800ac16:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800ac18:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac1c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USB_OTG_SPEED_HIGH))
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d028      	beq.n	800ac7c <USB_HC_StartXfer+0x7c>
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	791b      	ldrb	r3, [r3, #4]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d124      	bne.n	800ac7c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800ac32:	79fb      	ldrb	r3, [r7, #7]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d10b      	bne.n	800ac50 <USB_HC_StartXfer+0x50>
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	795b      	ldrb	r3, [r3, #5]
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d107      	bne.n	800ac50 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	785b      	ldrb	r3, [r3, #1]
 800ac44:	4619      	mov	r1, r3
 800ac46:	68f8      	ldr	r0, [r7, #12]
 800ac48:	f000 fa2c 	bl	800b0a4 <USB_DoPing>
      return HAL_OK;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	e111      	b.n	800ae74 <USB_HC_StartXfer+0x274>
    }
    else if (dma == 1U)
 800ac50:	79fb      	ldrb	r3, [r7, #7]
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	d112      	bne.n	800ac7c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800ac56:	69fb      	ldr	r3, [r7, #28]
 800ac58:	015a      	lsls	r2, r3, #5
 800ac5a:	6a3b      	ldr	r3, [r7, #32]
 800ac5c:	4413      	add	r3, r2
 800ac5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac62:	68db      	ldr	r3, [r3, #12]
 800ac64:	69fa      	ldr	r2, [r7, #28]
 800ac66:	0151      	lsls	r1, r2, #5
 800ac68:	6a3a      	ldr	r2, [r7, #32]
 800ac6a:	440a      	add	r2, r1
 800ac6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac70:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800ac74:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	691b      	ldr	r3, [r3, #16]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d018      	beq.n	800acb6 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	691b      	ldr	r3, [r3, #16]
 800ac88:	68ba      	ldr	r2, [r7, #8]
 800ac8a:	8912      	ldrh	r2, [r2, #8]
 800ac8c:	4413      	add	r3, r2
 800ac8e:	3b01      	subs	r3, #1
 800ac90:	68ba      	ldr	r2, [r7, #8]
 800ac92:	8912      	ldrh	r2, [r2, #8]
 800ac94:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac98:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800ac9a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ac9c:	8b7b      	ldrh	r3, [r7, #26]
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d90b      	bls.n	800acba <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800aca2:	8b7b      	ldrh	r3, [r7, #26]
 800aca4:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800aca6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aca8:	68ba      	ldr	r2, [r7, #8]
 800acaa:	8912      	ldrh	r2, [r2, #8]
 800acac:	fb02 f203 	mul.w	r2, r2, r3
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	611a      	str	r2, [r3, #16]
 800acb4:	e001      	b.n	800acba <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800acb6:	2301      	movs	r3, #1
 800acb8:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	78db      	ldrb	r3, [r3, #3]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d006      	beq.n	800acd0 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800acc2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800acc4:	68ba      	ldr	r2, [r7, #8]
 800acc6:	8912      	ldrh	r2, [r2, #8]
 800acc8:	fb02 f203 	mul.w	r2, r2, r3
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	691b      	ldr	r3, [r3, #16]
 800acd4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800acd8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800acda:	04d9      	lsls	r1, r3, #19
 800acdc:	4b67      	ldr	r3, [pc, #412]	; (800ae7c <USB_HC_StartXfer+0x27c>)
 800acde:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800ace0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	7a9b      	ldrb	r3, [r3, #10]
 800ace6:	075b      	lsls	r3, r3, #29
 800ace8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800acec:	69f9      	ldr	r1, [r7, #28]
 800acee:	0148      	lsls	r0, r1, #5
 800acf0:	6a39      	ldr	r1, [r7, #32]
 800acf2:	4401      	add	r1, r0
 800acf4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800acf8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800acfa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800acfc:	79fb      	ldrb	r3, [r7, #7]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d009      	beq.n	800ad16 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	68d9      	ldr	r1, [r3, #12]
 800ad06:	69fb      	ldr	r3, [r7, #28]
 800ad08:	015a      	lsls	r2, r3, #5
 800ad0a:	6a3b      	ldr	r3, [r7, #32]
 800ad0c:	4413      	add	r3, r2
 800ad0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad12:	460a      	mov	r2, r1
 800ad14:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800ad16:	6a3b      	ldr	r3, [r7, #32]
 800ad18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad1c:	689b      	ldr	r3, [r3, #8]
 800ad1e:	f003 0301 	and.w	r3, r3, #1
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	bf0c      	ite	eq
 800ad26:	2301      	moveq	r3, #1
 800ad28:	2300      	movne	r3, #0
 800ad2a:	b2db      	uxtb	r3, r3
 800ad2c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800ad2e:	69fb      	ldr	r3, [r7, #28]
 800ad30:	015a      	lsls	r2, r3, #5
 800ad32:	6a3b      	ldr	r3, [r7, #32]
 800ad34:	4413      	add	r3, r2
 800ad36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	69fa      	ldr	r2, [r7, #28]
 800ad3e:	0151      	lsls	r1, r2, #5
 800ad40:	6a3a      	ldr	r2, [r7, #32]
 800ad42:	440a      	add	r2, r1
 800ad44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad48:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ad4c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800ad4e:	69fb      	ldr	r3, [r7, #28]
 800ad50:	015a      	lsls	r2, r3, #5
 800ad52:	6a3b      	ldr	r3, [r7, #32]
 800ad54:	4413      	add	r3, r2
 800ad56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad5a:	681a      	ldr	r2, [r3, #0]
 800ad5c:	7e7b      	ldrb	r3, [r7, #25]
 800ad5e:	075b      	lsls	r3, r3, #29
 800ad60:	69f9      	ldr	r1, [r7, #28]
 800ad62:	0148      	lsls	r0, r1, #5
 800ad64:	6a39      	ldr	r1, [r7, #32]
 800ad66:	4401      	add	r1, r0
 800ad68:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800ad70:	69fb      	ldr	r3, [r7, #28]
 800ad72:	015a      	lsls	r2, r3, #5
 800ad74:	6a3b      	ldr	r3, [r7, #32]
 800ad76:	4413      	add	r3, r2
 800ad78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4a40      	ldr	r2, [pc, #256]	; (800ae80 <USB_HC_StartXfer+0x280>)
 800ad80:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ad82:	4b3f      	ldr	r3, [pc, #252]	; (800ae80 <USB_HC_StartXfer+0x280>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ad8a:	4a3d      	ldr	r2, [pc, #244]	; (800ae80 <USB_HC_StartXfer+0x280>)
 800ad8c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	78db      	ldrb	r3, [r3, #3]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d006      	beq.n	800ada4 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800ad96:	4b3a      	ldr	r3, [pc, #232]	; (800ae80 <USB_HC_StartXfer+0x280>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad9e:	4a38      	ldr	r2, [pc, #224]	; (800ae80 <USB_HC_StartXfer+0x280>)
 800ada0:	6013      	str	r3, [r2, #0]
 800ada2:	e005      	b.n	800adb0 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800ada4:	4b36      	ldr	r3, [pc, #216]	; (800ae80 <USB_HC_StartXfer+0x280>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800adac:	4a34      	ldr	r2, [pc, #208]	; (800ae80 <USB_HC_StartXfer+0x280>)
 800adae:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800adb0:	4b33      	ldr	r3, [pc, #204]	; (800ae80 <USB_HC_StartXfer+0x280>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800adb8:	4a31      	ldr	r2, [pc, #196]	; (800ae80 <USB_HC_StartXfer+0x280>)
 800adba:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800adbc:	69fb      	ldr	r3, [r7, #28]
 800adbe:	015a      	lsls	r2, r3, #5
 800adc0:	6a3b      	ldr	r3, [r7, #32]
 800adc2:	4413      	add	r3, r2
 800adc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adc8:	461a      	mov	r2, r3
 800adca:	4b2d      	ldr	r3, [pc, #180]	; (800ae80 <USB_HC_StartXfer+0x280>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800add0:	79fb      	ldrb	r3, [r7, #7]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d14d      	bne.n	800ae72 <USB_HC_StartXfer+0x272>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	78db      	ldrb	r3, [r3, #3]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d149      	bne.n	800ae72 <USB_HC_StartXfer+0x272>
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	691b      	ldr	r3, [r3, #16]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d045      	beq.n	800ae72 <USB_HC_StartXfer+0x272>
    {
      switch (hc->ep_type)
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	79db      	ldrb	r3, [r3, #7]
 800adea:	2b03      	cmp	r3, #3
 800adec:	d830      	bhi.n	800ae50 <USB_HC_StartXfer+0x250>
 800adee:	a201      	add	r2, pc, #4	; (adr r2, 800adf4 <USB_HC_StartXfer+0x1f4>)
 800adf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adf4:	0800ae05 	.word	0x0800ae05
 800adf8:	0800ae29 	.word	0x0800ae29
 800adfc:	0800ae05 	.word	0x0800ae05
 800ae00:	0800ae29 	.word	0x0800ae29
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	691b      	ldr	r3, [r3, #16]
 800ae08:	3303      	adds	r3, #3
 800ae0a:	089b      	lsrs	r3, r3, #2
 800ae0c:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800ae0e:	8afa      	ldrh	r2, [r7, #22]
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae14:	b29b      	uxth	r3, r3
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d91c      	bls.n	800ae54 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	699b      	ldr	r3, [r3, #24]
 800ae1e:	f043 0220 	orr.w	r2, r3, #32
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	619a      	str	r2, [r3, #24]
          }
          break;
 800ae26:	e015      	b.n	800ae54 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	691b      	ldr	r3, [r3, #16]
 800ae2c:	3303      	adds	r3, #3
 800ae2e:	089b      	lsrs	r3, r3, #2
 800ae30:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800ae32:	8afa      	ldrh	r2, [r7, #22]
 800ae34:	6a3b      	ldr	r3, [r7, #32]
 800ae36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ae3a:	691b      	ldr	r3, [r3, #16]
 800ae3c:	b29b      	uxth	r3, r3
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d90a      	bls.n	800ae58 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	699b      	ldr	r3, [r3, #24]
 800ae46:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	619a      	str	r2, [r3, #24]
          }
          break;
 800ae4e:	e003      	b.n	800ae58 <USB_HC_StartXfer+0x258>

        default:
          break;
 800ae50:	bf00      	nop
 800ae52:	e002      	b.n	800ae5a <USB_HC_StartXfer+0x25a>
          break;
 800ae54:	bf00      	nop
 800ae56:	e000      	b.n	800ae5a <USB_HC_StartXfer+0x25a>
          break;
 800ae58:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	68d9      	ldr	r1, [r3, #12]
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	785a      	ldrb	r2, [r3, #1]
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	691b      	ldr	r3, [r3, #16]
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	2000      	movs	r0, #0
 800ae6a:	9000      	str	r0, [sp, #0]
 800ae6c:	68f8      	ldr	r0, [r7, #12]
 800ae6e:	f7ff fb93 	bl	800a598 <USB_WritePacket>
    }
  }

  return HAL_OK;
 800ae72:	2300      	movs	r3, #0
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3728      	adds	r7, #40	; 0x28
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}
 800ae7c:	1ff80000 	.word	0x1ff80000
 800ae80:	200000b0 	.word	0x200000b0

0800ae84 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ae84:	b480      	push	{r7}
 800ae86:	b085      	sub	sp, #20
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ae96:	695b      	ldr	r3, [r3, #20]
 800ae98:	b29b      	uxth	r3, r3
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3714      	adds	r7, #20
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea4:	4770      	bx	lr

0800aea6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800aea6:	b480      	push	{r7}
 800aea8:	b087      	sub	sp, #28
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
 800aeae:	460b      	mov	r3, r1
 800aeb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800aeb6:	78fb      	ldrb	r3, [r7, #3]
 800aeb8:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800aeba:	2300      	movs	r3, #0
 800aebc:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	015a      	lsls	r2, r3, #5
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	4413      	add	r3, r2
 800aec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	0c9b      	lsrs	r3, r3, #18
 800aece:	f003 0303 	and.w	r3, r3, #3
 800aed2:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d002      	beq.n	800aee0 <USB_HC_Halt+0x3a>
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	2b02      	cmp	r3, #2
 800aede:	d16c      	bne.n	800afba <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	015a      	lsls	r2, r3, #5
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	4413      	add	r3, r2
 800aee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	68fa      	ldr	r2, [r7, #12]
 800aef0:	0151      	lsls	r1, r2, #5
 800aef2:	693a      	ldr	r2, [r7, #16]
 800aef4:	440a      	add	r2, r1
 800aef6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aefa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aefe:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d143      	bne.n	800af94 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	015a      	lsls	r2, r3, #5
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	4413      	add	r3, r2
 800af14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	68fa      	ldr	r2, [r7, #12]
 800af1c:	0151      	lsls	r1, r2, #5
 800af1e:	693a      	ldr	r2, [r7, #16]
 800af20:	440a      	add	r2, r1
 800af22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af2a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	015a      	lsls	r2, r3, #5
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	4413      	add	r3, r2
 800af34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	68fa      	ldr	r2, [r7, #12]
 800af3c:	0151      	lsls	r1, r2, #5
 800af3e:	693a      	ldr	r2, [r7, #16]
 800af40:	440a      	add	r2, r1
 800af42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800af4a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	015a      	lsls	r2, r3, #5
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	4413      	add	r3, r2
 800af54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	68fa      	ldr	r2, [r7, #12]
 800af5c:	0151      	lsls	r1, r2, #5
 800af5e:	693a      	ldr	r2, [r7, #16]
 800af60:	440a      	add	r2, r1
 800af62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af66:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800af6a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	3301      	adds	r3, #1
 800af70:	617b      	str	r3, [r7, #20]
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800af78:	d81d      	bhi.n	800afb6 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	015a      	lsls	r2, r3, #5
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	4413      	add	r3, r2
 800af82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af90:	d0ec      	beq.n	800af6c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800af92:	e080      	b.n	800b096 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	015a      	lsls	r2, r3, #5
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	4413      	add	r3, r2
 800af9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	68fa      	ldr	r2, [r7, #12]
 800afa4:	0151      	lsls	r1, r2, #5
 800afa6:	693a      	ldr	r2, [r7, #16]
 800afa8:	440a      	add	r2, r1
 800afaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800afae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800afb2:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800afb4:	e06f      	b.n	800b096 <USB_HC_Halt+0x1f0>
          break;
 800afb6:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800afb8:	e06d      	b.n	800b096 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	015a      	lsls	r2, r3, #5
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	4413      	add	r3, r2
 800afc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	68fa      	ldr	r2, [r7, #12]
 800afca:	0151      	lsls	r1, r2, #5
 800afcc:	693a      	ldr	r2, [r7, #16]
 800afce:	440a      	add	r2, r1
 800afd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800afd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800afd8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800afe0:	691b      	ldr	r3, [r3, #16]
 800afe2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d143      	bne.n	800b072 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	015a      	lsls	r2, r3, #5
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	4413      	add	r3, r2
 800aff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	68fa      	ldr	r2, [r7, #12]
 800affa:	0151      	lsls	r1, r2, #5
 800affc:	693a      	ldr	r2, [r7, #16]
 800affe:	440a      	add	r2, r1
 800b000:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b004:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b008:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	015a      	lsls	r2, r3, #5
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	4413      	add	r3, r2
 800b012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	68fa      	ldr	r2, [r7, #12]
 800b01a:	0151      	lsls	r1, r2, #5
 800b01c:	693a      	ldr	r2, [r7, #16]
 800b01e:	440a      	add	r2, r1
 800b020:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b024:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b028:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	015a      	lsls	r2, r3, #5
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	4413      	add	r3, r2
 800b032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	68fa      	ldr	r2, [r7, #12]
 800b03a:	0151      	lsls	r1, r2, #5
 800b03c:	693a      	ldr	r2, [r7, #16]
 800b03e:	440a      	add	r2, r1
 800b040:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b044:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b048:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	3301      	adds	r3, #1
 800b04e:	617b      	str	r3, [r7, #20]
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b056:	d81d      	bhi.n	800b094 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	015a      	lsls	r2, r3, #5
 800b05c:	693b      	ldr	r3, [r7, #16]
 800b05e:	4413      	add	r3, r2
 800b060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b06a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b06e:	d0ec      	beq.n	800b04a <USB_HC_Halt+0x1a4>
 800b070:	e011      	b.n	800b096 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	015a      	lsls	r2, r3, #5
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	4413      	add	r3, r2
 800b07a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	68fa      	ldr	r2, [r7, #12]
 800b082:	0151      	lsls	r1, r2, #5
 800b084:	693a      	ldr	r2, [r7, #16]
 800b086:	440a      	add	r2, r1
 800b088:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b08c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b090:	6013      	str	r3, [r2, #0]
 800b092:	e000      	b.n	800b096 <USB_HC_Halt+0x1f0>
          break;
 800b094:	bf00      	nop
    }
  }

  return HAL_OK;
 800b096:	2300      	movs	r3, #0
}
 800b098:	4618      	mov	r0, r3
 800b09a:	371c      	adds	r7, #28
 800b09c:	46bd      	mov	sp, r7
 800b09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a2:	4770      	bx	lr

0800b0a4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b087      	sub	sp, #28
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
 800b0ac:	460b      	mov	r3, r1
 800b0ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800b0b4:	78fb      	ldrb	r3, [r7, #3]
 800b0b6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	04da      	lsls	r2, r3, #19
 800b0c0:	4b15      	ldr	r3, [pc, #84]	; (800b118 <USB_DoPing+0x74>)
 800b0c2:	4013      	ands	r3, r2
 800b0c4:	693a      	ldr	r2, [r7, #16]
 800b0c6:	0151      	lsls	r1, r2, #5
 800b0c8:	697a      	ldr	r2, [r7, #20]
 800b0ca:	440a      	add	r2, r1
 800b0cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b0d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b0d4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	015a      	lsls	r2, r3, #5
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	4413      	add	r3, r2
 800b0de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b0ec:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b0f4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	015a      	lsls	r2, r3, #5
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	4413      	add	r3, r2
 800b0fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b102:	461a      	mov	r2, r3
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b108:	2300      	movs	r3, #0
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	371c      	adds	r7, #28
 800b10e:	46bd      	mov	sp, r7
 800b110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b114:	4770      	bx	lr
 800b116:	bf00      	nop
 800b118:	1ff80000 	.word	0x1ff80000

0800b11c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b086      	sub	sp, #24
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800b128:	2300      	movs	r3, #0
 800b12a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f7ff f9b0 	bl	800a492 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800b132:	2110      	movs	r1, #16
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f7ff f9e7 	bl	800a508 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f7ff fa0a 	bl	800a554 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800b140:	2300      	movs	r3, #0
 800b142:	613b      	str	r3, [r7, #16]
 800b144:	e01f      	b.n	800b186 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	015a      	lsls	r2, r3, #5
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	4413      	add	r3, r2
 800b14e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b15c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b164:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b16c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	015a      	lsls	r2, r3, #5
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	4413      	add	r3, r2
 800b176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b17a:	461a      	mov	r2, r3
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	3301      	adds	r3, #1
 800b184:	613b      	str	r3, [r7, #16]
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	2b0f      	cmp	r3, #15
 800b18a:	d9dc      	bls.n	800b146 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b18c:	2300      	movs	r3, #0
 800b18e:	613b      	str	r3, [r7, #16]
 800b190:	e034      	b.n	800b1fc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	015a      	lsls	r2, r3, #5
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	4413      	add	r3, r2
 800b19a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b1a8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b1b0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b1b8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800b1ba:	693b      	ldr	r3, [r7, #16]
 800b1bc:	015a      	lsls	r2, r3, #5
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	4413      	add	r3, r2
 800b1c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	617b      	str	r3, [r7, #20]
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b1d8:	d80c      	bhi.n	800b1f4 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	015a      	lsls	r2, r3, #5
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	4413      	add	r3, r2
 800b1e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b1ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b1f0:	d0ec      	beq.n	800b1cc <USB_StopHost+0xb0>
 800b1f2:	e000      	b.n	800b1f6 <USB_StopHost+0xda>
        break;
 800b1f4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	3301      	adds	r3, #1
 800b1fa:	613b      	str	r3, [r7, #16]
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	2b0f      	cmp	r3, #15
 800b200:	d9c7      	bls.n	800b192 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b208:	461a      	mov	r2, r3
 800b20a:	f04f 33ff 	mov.w	r3, #4294967295
 800b20e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f04f 32ff 	mov.w	r2, #4294967295
 800b216:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f7ff f929 	bl	800a470 <USB_EnableGlobalInt>

  return HAL_OK;
 800b21e:	2300      	movs	r3, #0
}
 800b220:	4618      	mov	r0, r3
 800b222:	3718      	adds	r7, #24
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}

0800b228 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 800b228:	b590      	push	{r4, r7, lr}
 800b22a:	b089      	sub	sp, #36	; 0x24
 800b22c:	af04      	add	r7, sp, #16
 800b22e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 800b230:	2302      	movs	r3, #2
 800b232:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 800b234:	2301      	movs	r3, #1
 800b236:	2202      	movs	r2, #2
 800b238:	2102      	movs	r1, #2
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f000 fc8a 	bl	800bb54 <USBH_FindInterface>
 800b240:	4603      	mov	r3, r0
 800b242:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 800b244:	7bbb      	ldrb	r3, [r7, #14]
 800b246:	2bff      	cmp	r3, #255	; 0xff
 800b248:	f000 812a 	beq.w	800b4a0 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 800b24c:	7bbb      	ldrb	r3, [r7, #14]
 800b24e:	4619      	mov	r1, r3
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f000 fc63 	bl	800bb1c <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 800b25c:	2050      	movs	r0, #80	; 0x50
 800b25e:	f00b fa3b 	bl	80166d8 <malloc>
 800b262:	4603      	mov	r3, r0
 800b264:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b26c:	69db      	ldr	r3, [r3, #28]
 800b26e:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800b270:	7bbb      	ldrb	r3, [r7, #14]
 800b272:	687a      	ldr	r2, [r7, #4]
 800b274:	211a      	movs	r1, #26
 800b276:	fb01 f303 	mul.w	r3, r1, r3
 800b27a:	4413      	add	r3, r2
 800b27c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800b280:	781b      	ldrb	r3, [r3, #0]
 800b282:	b25b      	sxtb	r3, r3
 800b284:	2b00      	cmp	r3, #0
 800b286:	da15      	bge.n	800b2b4 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b288:	7bbb      	ldrb	r3, [r7, #14]
 800b28a:	687a      	ldr	r2, [r7, #4]
 800b28c:	211a      	movs	r1, #26
 800b28e:	fb01 f303 	mul.w	r3, r1, r3
 800b292:	4413      	add	r3, r2
 800b294:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800b298:	781a      	ldrb	r2, [r3, #0]
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b29e:	7bbb      	ldrb	r3, [r7, #14]
 800b2a0:	687a      	ldr	r2, [r7, #4]
 800b2a2:	211a      	movs	r1, #26
 800b2a4:	fb01 f303 	mul.w	r3, r1, r3
 800b2a8:	4413      	add	r3, r2
 800b2aa:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800b2ae:	881a      	ldrh	r2, [r3, #0]
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	785b      	ldrb	r3, [r3, #1]
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f001 ff2b 	bl	800d116 <USBH_AllocPipe>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	7819      	ldrb	r1, [r3, #0]
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	7858      	ldrb	r0, [r3, #1]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b2dc:	68ba      	ldr	r2, [r7, #8]
 800b2de:	8952      	ldrh	r2, [r2, #10]
 800b2e0:	9202      	str	r2, [sp, #8]
 800b2e2:	2203      	movs	r2, #3
 800b2e4:	9201      	str	r2, [sp, #4]
 800b2e6:	9300      	str	r3, [sp, #0]
 800b2e8:	4623      	mov	r3, r4
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f001 fee3 	bl	800d0b8 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	781b      	ldrb	r3, [r3, #0]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	4619      	mov	r1, r3
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f00b f912 	bl	8016524 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 800b300:	2300      	movs	r3, #0
 800b302:	2200      	movs	r2, #0
 800b304:	210a      	movs	r1, #10
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 fc24 	bl	800bb54 <USBH_FindInterface>
 800b30c:	4603      	mov	r3, r0
 800b30e:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 800b310:	7bbb      	ldrb	r3, [r7, #14]
 800b312:	2bff      	cmp	r3, #255	; 0xff
 800b314:	f000 80c4 	beq.w	800b4a0 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800b318:	7bbb      	ldrb	r3, [r7, #14]
 800b31a:	687a      	ldr	r2, [r7, #4]
 800b31c:	211a      	movs	r1, #26
 800b31e:	fb01 f303 	mul.w	r3, r1, r3
 800b322:	4413      	add	r3, r2
 800b324:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800b328:	781b      	ldrb	r3, [r3, #0]
 800b32a:	b25b      	sxtb	r3, r3
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	da16      	bge.n	800b35e <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b330:	7bbb      	ldrb	r3, [r7, #14]
 800b332:	687a      	ldr	r2, [r7, #4]
 800b334:	211a      	movs	r1, #26
 800b336:	fb01 f303 	mul.w	r3, r1, r3
 800b33a:	4413      	add	r3, r2
 800b33c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800b340:	781a      	ldrb	r2, [r3, #0]
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b346:	7bbb      	ldrb	r3, [r7, #14]
 800b348:	687a      	ldr	r2, [r7, #4]
 800b34a:	211a      	movs	r1, #26
 800b34c:	fb01 f303 	mul.w	r3, r1, r3
 800b350:	4413      	add	r3, r2
 800b352:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800b356:	881a      	ldrh	r2, [r3, #0]
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	835a      	strh	r2, [r3, #26]
 800b35c:	e015      	b.n	800b38a <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b35e:	7bbb      	ldrb	r3, [r7, #14]
 800b360:	687a      	ldr	r2, [r7, #4]
 800b362:	211a      	movs	r1, #26
 800b364:	fb01 f303 	mul.w	r3, r1, r3
 800b368:	4413      	add	r3, r2
 800b36a:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800b36e:	781a      	ldrb	r2, [r3, #0]
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b374:	7bbb      	ldrb	r3, [r7, #14]
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	211a      	movs	r1, #26
 800b37a:	fb01 f303 	mul.w	r3, r1, r3
 800b37e:	4413      	add	r3, r2
 800b380:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800b384:	881a      	ldrh	r2, [r3, #0]
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800b38a:	7bbb      	ldrb	r3, [r7, #14]
 800b38c:	687a      	ldr	r2, [r7, #4]
 800b38e:	211a      	movs	r1, #26
 800b390:	fb01 f303 	mul.w	r3, r1, r3
 800b394:	4413      	add	r3, r2
 800b396:	f203 3352 	addw	r3, r3, #850	; 0x352
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	b25b      	sxtb	r3, r3
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	da16      	bge.n	800b3d0 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b3a2:	7bbb      	ldrb	r3, [r7, #14]
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	211a      	movs	r1, #26
 800b3a8:	fb01 f303 	mul.w	r3, r1, r3
 800b3ac:	4413      	add	r3, r2
 800b3ae:	f203 3352 	addw	r3, r3, #850	; 0x352
 800b3b2:	781a      	ldrb	r2, [r3, #0]
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b3b8:	7bbb      	ldrb	r3, [r7, #14]
 800b3ba:	687a      	ldr	r2, [r7, #4]
 800b3bc:	211a      	movs	r1, #26
 800b3be:	fb01 f303 	mul.w	r3, r1, r3
 800b3c2:	4413      	add	r3, r2
 800b3c4:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800b3c8:	881a      	ldrh	r2, [r3, #0]
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	835a      	strh	r2, [r3, #26]
 800b3ce:	e015      	b.n	800b3fc <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b3d0:	7bbb      	ldrb	r3, [r7, #14]
 800b3d2:	687a      	ldr	r2, [r7, #4]
 800b3d4:	211a      	movs	r1, #26
 800b3d6:	fb01 f303 	mul.w	r3, r1, r3
 800b3da:	4413      	add	r3, r2
 800b3dc:	f203 3352 	addw	r3, r3, #850	; 0x352
 800b3e0:	781a      	ldrb	r2, [r3, #0]
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b3e6:	7bbb      	ldrb	r3, [r7, #14]
 800b3e8:	687a      	ldr	r2, [r7, #4]
 800b3ea:	211a      	movs	r1, #26
 800b3ec:	fb01 f303 	mul.w	r3, r1, r3
 800b3f0:	4413      	add	r3, r2
 800b3f2:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800b3f6:	881a      	ldrh	r2, [r3, #0]
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	7b9b      	ldrb	r3, [r3, #14]
 800b400:	4619      	mov	r1, r3
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f001 fe87 	bl	800d116 <USBH_AllocPipe>
 800b408:	4603      	mov	r3, r0
 800b40a:	461a      	mov	r2, r3
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	7bdb      	ldrb	r3, [r3, #15]
 800b414:	4619      	mov	r1, r3
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f001 fe7d 	bl	800d116 <USBH_AllocPipe>
 800b41c:	4603      	mov	r3, r0
 800b41e:	461a      	mov	r2, r3
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	7b59      	ldrb	r1, [r3, #13]
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	7b98      	ldrb	r0, [r3, #14]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b438:	68ba      	ldr	r2, [r7, #8]
 800b43a:	8b12      	ldrh	r2, [r2, #24]
 800b43c:	9202      	str	r2, [sp, #8]
 800b43e:	2202      	movs	r2, #2
 800b440:	9201      	str	r2, [sp, #4]
 800b442:	9300      	str	r3, [sp, #0]
 800b444:	4623      	mov	r3, r4
 800b446:	4602      	mov	r2, r0
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	f001 fe35 	bl	800d0b8 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	7b19      	ldrb	r1, [r3, #12]
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	7bd8      	ldrb	r0, [r3, #15]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b462:	68ba      	ldr	r2, [r7, #8]
 800b464:	8b52      	ldrh	r2, [r2, #26]
 800b466:	9202      	str	r2, [sp, #8]
 800b468:	2202      	movs	r2, #2
 800b46a:	9201      	str	r2, [sp, #4]
 800b46c:	9300      	str	r3, [sp, #0]
 800b46e:	4623      	mov	r3, r4
 800b470:	4602      	mov	r2, r0
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f001 fe20 	bl	800d0b8 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	2200      	movs	r2, #0
 800b47c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	7b5b      	ldrb	r3, [r3, #13]
 800b484:	2200      	movs	r2, #0
 800b486:	4619      	mov	r1, r3
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	f00b f84b 	bl	8016524 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	7b1b      	ldrb	r3, [r3, #12]
 800b492:	2200      	movs	r2, #0
 800b494:	4619      	mov	r1, r3
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f00b f844 	bl	8016524 <USBH_LL_SetToggle>
      status = USBH_OK;
 800b49c:	2300      	movs	r3, #0
 800b49e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 800b4a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3714      	adds	r7, #20
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd90      	pop	{r4, r7, pc}

0800b4aa <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800b4aa:	b580      	push	{r7, lr}
 800b4ac:	b084      	sub	sp, #16
 800b4ae:	af00      	add	r7, sp, #0
 800b4b0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b4b8:	69db      	ldr	r3, [r3, #28]
 800b4ba:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	781b      	ldrb	r3, [r3, #0]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d00e      	beq.n	800b4e2 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f001 fe13 	bl	800d0f6 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	781b      	ldrb	r3, [r3, #0]
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f001 fe3b 	bl	800d152 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	7b1b      	ldrb	r3, [r3, #12]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d00e      	beq.n	800b508 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	7b1b      	ldrb	r3, [r3, #12]
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f001 fe00 	bl	800d0f6 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	7b1b      	ldrb	r3, [r3, #12]
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f001 fe28 	bl	800d152 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	2200      	movs	r2, #0
 800b506:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	7b5b      	ldrb	r3, [r3, #13]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d00e      	beq.n	800b52e <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	7b5b      	ldrb	r3, [r3, #13]
 800b514:	4619      	mov	r1, r3
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f001 fded 	bl	800d0f6 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	7b5b      	ldrb	r3, [r3, #13]
 800b520:	4619      	mov	r1, r3
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f001 fe15 	bl	800d152 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	2200      	movs	r2, #0
 800b52c:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b534:	69db      	ldr	r3, [r3, #28]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d00b      	beq.n	800b552 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b540:	69db      	ldr	r3, [r3, #28]
 800b542:	4618      	mov	r0, r3
 800b544:	f00b f8d0 	bl	80166e8 <free>
    phost->pActiveClass->pData = 0U;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b54e:	2200      	movs	r2, #0
 800b550:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b552:	2300      	movs	r3, #0
}
 800b554:	4618      	mov	r0, r3
 800b556:	3710      	adds	r7, #16
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b084      	sub	sp, #16
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 800b564:	2302      	movs	r3, #2
 800b566:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b56e:	69db      	ldr	r3, [r3, #28]
 800b570:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	3340      	adds	r3, #64	; 0x40
 800b576:	4619      	mov	r1, r3
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f000 f8b2 	bl	800b6e2 <GetLineCoding>
 800b57e:	4603      	mov	r3, r0
 800b580:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 800b582:	7bfb      	ldrb	r3, [r7, #15]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d105      	bne.n	800b594 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b58e:	2102      	movs	r1, #2
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	4798      	blx	r3
  }
  return status;
 800b594:	7bfb      	ldrb	r3, [r7, #15]
}
 800b596:	4618      	mov	r0, r3
 800b598:	3710      	adds	r7, #16
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}
	...

0800b5a0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b084      	sub	sp, #16
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b5b6:	69db      	ldr	r3, [r3, #28]
 800b5b8:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800b5c0:	2b04      	cmp	r3, #4
 800b5c2:	d877      	bhi.n	800b6b4 <USBH_CDC_Process+0x114>
 800b5c4:	a201      	add	r2, pc, #4	; (adr r2, 800b5cc <USBH_CDC_Process+0x2c>)
 800b5c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5ca:	bf00      	nop
 800b5cc:	0800b5e1 	.word	0x0800b5e1
 800b5d0:	0800b5e7 	.word	0x0800b5e7
 800b5d4:	0800b617 	.word	0x0800b617
 800b5d8:	0800b68b 	.word	0x0800b68b
 800b5dc:	0800b699 	.word	0x0800b699
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	73fb      	strb	r3, [r7, #15]
    break;
 800b5e4:	e06d      	b.n	800b6c2 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 f897 	bl	800b720 <SetLineCoding>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800b5f6:	7bbb      	ldrb	r3, [r7, #14]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d104      	bne.n	800b606 <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	2202      	movs	r2, #2
 800b600:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800b604:	e058      	b.n	800b6b8 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 800b606:	7bbb      	ldrb	r3, [r7, #14]
 800b608:	2b01      	cmp	r3, #1
 800b60a:	d055      	beq.n	800b6b8 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	2204      	movs	r2, #4
 800b610:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800b614:	e050      	b.n	800b6b8 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	3340      	adds	r3, #64	; 0x40
 800b61a:	4619      	mov	r1, r3
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f000 f860 	bl	800b6e2 <GetLineCoding>
 800b622:	4603      	mov	r3, r0
 800b624:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800b626:	7bbb      	ldrb	r3, [r7, #14]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d126      	bne.n	800b67a <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	2200      	movs	r2, #0
 800b630:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b63e:	791b      	ldrb	r3, [r3, #4]
 800b640:	429a      	cmp	r2, r3
 800b642:	d13b      	bne.n	800b6bc <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b64e:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b650:	429a      	cmp	r2, r3
 800b652:	d133      	bne.n	800b6bc <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b65e:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b660:	429a      	cmp	r2, r3
 800b662:	d12b      	bne.n	800b6bc <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b66c:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b66e:	429a      	cmp	r2, r3
 800b670:	d124      	bne.n	800b6bc <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f000 f982 	bl	800b97c <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800b678:	e020      	b.n	800b6bc <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 800b67a:	7bbb      	ldrb	r3, [r7, #14]
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d01d      	beq.n	800b6bc <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	2204      	movs	r2, #4
 800b684:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800b688:	e018      	b.n	800b6bc <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f000 f867 	bl	800b75e <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f000 f8f6 	bl	800b882 <CDC_ProcessReception>
    break;
 800b696:	e014      	b.n	800b6c2 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 800b698:	2100      	movs	r1, #0
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f000 fff8 	bl	800c690 <USBH_ClrFeature>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 800b6a4:	7bbb      	ldrb	r3, [r7, #14]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d10a      	bne.n	800b6c0 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 800b6b2:	e005      	b.n	800b6c0 <USBH_CDC_Process+0x120>

  default:
    break;
 800b6b4:	bf00      	nop
 800b6b6:	e004      	b.n	800b6c2 <USBH_CDC_Process+0x122>
    break;
 800b6b8:	bf00      	nop
 800b6ba:	e002      	b.n	800b6c2 <USBH_CDC_Process+0x122>
    break;
 800b6bc:	bf00      	nop
 800b6be:	e000      	b.n	800b6c2 <USBH_CDC_Process+0x122>
    break;
 800b6c0:	bf00      	nop

  }

  return status;
 800b6c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3710      	adds	r7, #16
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b083      	sub	sp, #12
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 800b6d4:	2300      	movs	r3, #0
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	370c      	adds	r7, #12
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e0:	4770      	bx	lr

0800b6e2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800b6e2:	b580      	push	{r7, lr}
 800b6e4:	b082      	sub	sp, #8
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]
 800b6ea:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	22a1      	movs	r2, #161	; 0xa1
 800b6f0:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2221      	movs	r2, #33	; 0x21
 800b6f6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2200      	movs	r2, #0
 800b702:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2207      	movs	r2, #7
 800b708:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	2207      	movs	r2, #7
 800b70e:	4619      	mov	r1, r3
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f001 f99d 	bl	800ca50 <USBH_CtlReq>
 800b716:	4603      	mov	r3, r0
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3708      	adds	r7, #8
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b082      	sub	sp, #8
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2221      	movs	r2, #33	; 0x21
 800b72e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2220      	movs	r2, #32
 800b734:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2200      	movs	r2, #0
 800b73a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2200      	movs	r2, #0
 800b740:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2207      	movs	r2, #7
 800b746:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	2207      	movs	r2, #7
 800b74c:	4619      	mov	r1, r3
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f001 f97e 	bl	800ca50 <USBH_CtlReq>
 800b754:	4603      	mov	r3, r0
}
 800b756:	4618      	mov	r0, r3
 800b758:	3708      	adds	r7, #8
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}

0800b75e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800b75e:	b580      	push	{r7, lr}
 800b760:	b086      	sub	sp, #24
 800b762:	af02      	add	r7, sp, #8
 800b764:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b76c:	69db      	ldr	r3, [r3, #28]
 800b76e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b770:	2300      	movs	r3, #0
 800b772:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800b77a:	2b01      	cmp	r3, #1
 800b77c:	d002      	beq.n	800b784 <CDC_ProcessTransmission+0x26>
 800b77e:	2b02      	cmp	r3, #2
 800b780:	d023      	beq.n	800b7ca <CDC_ProcessTransmission+0x6c>
      }
    }
    break;

  default:
    break;
 800b782:	e07a      	b.n	800b87a <CDC_ProcessTransmission+0x11c>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b788:	68fa      	ldr	r2, [r7, #12]
 800b78a:	8b12      	ldrh	r2, [r2, #24]
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d90b      	bls.n	800b7a8 <CDC_ProcessTransmission+0x4a>
      USBH_BulkSendData (phost,
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	69d9      	ldr	r1, [r3, #28]
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	8b1a      	ldrh	r2, [r3, #24]
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	7b5b      	ldrb	r3, [r3, #13]
 800b79c:	2001      	movs	r0, #1
 800b79e:	9000      	str	r0, [sp, #0]
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f001 fc46 	bl	800d032 <USBH_BulkSendData>
 800b7a6:	e00b      	b.n	800b7c0 <CDC_ProcessTransmission+0x62>
      USBH_BulkSendData (phost,
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 800b7b0:	b29a      	uxth	r2, r3
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	7b5b      	ldrb	r3, [r3, #13]
 800b7b6:	2001      	movs	r0, #1
 800b7b8:	9000      	str	r0, [sp, #0]
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f001 fc39 	bl	800d032 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2202      	movs	r2, #2
 800b7c4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800b7c8:	e057      	b.n	800b87a <CDC_ProcessTransmission+0x11c>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	7b5b      	ldrb	r3, [r3, #13]
 800b7ce:	4619      	mov	r1, r3
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f00a fe7d 	bl	80164d0 <USBH_LL_GetURBState>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 800b7da:	7afb      	ldrb	r3, [r7, #11]
 800b7dc:	2b01      	cmp	r3, #1
 800b7de:	d136      	bne.n	800b84e <CDC_ProcessTransmission+0xf0>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e4:	68fa      	ldr	r2, [r7, #12]
 800b7e6:	8b12      	ldrh	r2, [r2, #24]
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d90e      	bls.n	800b80a <CDC_ProcessTransmission+0xac>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f0:	68fa      	ldr	r2, [r7, #12]
 800b7f2:	8b12      	ldrh	r2, [r2, #24]
 800b7f4:	1a9a      	subs	r2, r3, r2
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	69db      	ldr	r3, [r3, #28]
 800b7fe:	68fa      	ldr	r2, [r7, #12]
 800b800:	8b12      	ldrh	r2, [r2, #24]
 800b802:	441a      	add	r2, r3
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	61da      	str	r2, [r3, #28]
 800b808:	e002      	b.n	800b810 <CDC_ProcessTransmission+0xb2>
        CDC_Handle->TxDataLength = 0U;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2200      	movs	r2, #0
 800b80e:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b814:	2b00      	cmp	r3, #0
 800b816:	d004      	beq.n	800b822 <CDC_ProcessTransmission+0xc4>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	2201      	movs	r2, #1
 800b81c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800b820:	e006      	b.n	800b830 <CDC_ProcessTransmission+0xd2>
        CDC_Handle->data_tx_state = CDC_IDLE;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	2200      	movs	r2, #0
 800b826:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f000 f892 	bl	800b954 <USBH_CDC_TransmitCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2204      	movs	r2, #4
 800b834:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b844:	2200      	movs	r2, #0
 800b846:	4619      	mov	r1, r3
 800b848:	f004 fe68 	bl	801051c <osMessagePut>
    break;
 800b84c:	e014      	b.n	800b878 <CDC_ProcessTransmission+0x11a>
      if (URB_Status == USBH_URB_NOTREADY)
 800b84e:	7afb      	ldrb	r3, [r7, #11]
 800b850:	2b02      	cmp	r3, #2
 800b852:	d111      	bne.n	800b878 <CDC_ProcessTransmission+0x11a>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	2201      	movs	r2, #1
 800b858:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2204      	movs	r2, #4
 800b860:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b870:	2200      	movs	r2, #0
 800b872:	4619      	mov	r1, r3
 800b874:	f004 fe52 	bl	801051c <osMessagePut>
    break;
 800b878:	bf00      	nop
  }
}
 800b87a:	bf00      	nop
 800b87c:	3710      	adds	r7, #16
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}

0800b882 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800b882:	b580      	push	{r7, lr}
 800b884:	b086      	sub	sp, #24
 800b886:	af00      	add	r7, sp, #0
 800b888:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800b890:	69db      	ldr	r3, [r3, #28]
 800b892:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b894:	2300      	movs	r3, #0
 800b896:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800b89e:	2b03      	cmp	r3, #3
 800b8a0:	d002      	beq.n	800b8a8 <CDC_ProcessReception+0x26>
 800b8a2:	2b04      	cmp	r3, #4
 800b8a4:	d00e      	beq.n	800b8c4 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 800b8a6:	e051      	b.n	800b94c <CDC_ProcessReception+0xca>
    USBH_BulkReceiveData (phost,
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	6a19      	ldr	r1, [r3, #32]
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	8b5a      	ldrh	r2, [r3, #26]
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	7b1b      	ldrb	r3, [r3, #12]
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f001 fbe1 	bl	800d07c <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	2204      	movs	r2, #4
 800b8be:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800b8c2:	e043      	b.n	800b94c <CDC_ProcessReception+0xca>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	7b1b      	ldrb	r3, [r3, #12]
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f00a fe00 	bl	80164d0 <USBH_LL_GetURBState>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 800b8d4:	7cfb      	ldrb	r3, [r7, #19]
 800b8d6:	2b01      	cmp	r3, #1
 800b8d8:	d137      	bne.n	800b94a <CDC_ProcessReception+0xc8>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800b8da:	697b      	ldr	r3, [r7, #20]
 800b8dc:	7b1b      	ldrb	r3, [r3, #12]
 800b8de:	4619      	mov	r1, r3
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f00a fd63 	bl	80163ac <USBH_LL_GetLastXferSize>
 800b8e6:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8ec:	68fa      	ldr	r2, [r7, #12]
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	d016      	beq.n	800b920 <CDC_ProcessReception+0x9e>
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	8b5b      	ldrh	r3, [r3, #26]
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d910      	bls.n	800b920 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	1ad2      	subs	r2, r2, r3
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	6a1a      	ldr	r2, [r3, #32]
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	441a      	add	r2, r3
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	2203      	movs	r2, #3
 800b91a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800b91e:	e006      	b.n	800b92e <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	2200      	movs	r2, #0
 800b924:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f000 f81d 	bl	800b968 <USBH_CDC_ReceiveCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2204      	movs	r2, #4
 800b932:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b942:	2200      	movs	r2, #0
 800b944:	4619      	mov	r1, r3
 800b946:	f004 fde9 	bl	801051c <osMessagePut>
    break;
 800b94a:	bf00      	nop
  }
}
 800b94c:	bf00      	nop
 800b94e:	3718      	adds	r7, #24
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}

0800b954 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800b954:	b480      	push	{r7}
 800b956:	b083      	sub	sp, #12
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]

}
 800b95c:	bf00      	nop
 800b95e:	370c      	adds	r7, #12
 800b960:	46bd      	mov	sp, r7
 800b962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b966:	4770      	bx	lr

0800b968 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800b968:	b480      	push	{r7}
 800b96a:	b083      	sub	sp, #12
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]

}
 800b970:	bf00      	nop
 800b972:	370c      	adds	r7, #12
 800b974:	46bd      	mov	sp, r7
 800b976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97a:	4770      	bx	lr

0800b97c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b083      	sub	sp, #12
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]

}
 800b984:	bf00      	nop
 800b986:	370c      	adds	r7, #12
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr

0800b990 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 800b990:	b5b0      	push	{r4, r5, r7, lr}
 800b992:	b08c      	sub	sp, #48	; 0x30
 800b994:	af00      	add	r7, sp, #0
 800b996:	60f8      	str	r0, [r7, #12]
 800b998:	60b9      	str	r1, [r7, #8]
 800b99a:	4613      	mov	r3, r2
 800b99c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d101      	bne.n	800b9a8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b9a4:	2302      	movs	r3, #2
 800b9a6:	e03c      	b.n	800ba22 <USBH_Init+0x92>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	79fa      	ldrb	r2, [r7, #7]
 800b9ac:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800b9c0:	68f8      	ldr	r0, [r7, #12]
 800b9c2:	f000 f837 	bl	800ba34 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d003      	beq.n	800b9d4 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	68ba      	ldr	r2, [r7, #8]
 800b9d0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800b9d4:	4a15      	ldr	r2, [pc, #84]	; (800ba2c <USBH_Init+0x9c>)
 800b9d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b9da:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b9de:	e883 0003 	stmia.w	r3, {r0, r1}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 800b9e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b9e6:	2100      	movs	r1, #0
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f004 fd84 	bl	80104f6 <osMessageCreate>
 800b9ee:	4602      	mov	r2, r0
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800b9f6:	4b0e      	ldr	r3, [pc, #56]	; (800ba30 <USBH_Init+0xa0>)
 800b9f8:	f107 0414 	add.w	r4, r7, #20
 800b9fc:	461d      	mov	r5, r3
 800b9fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba02:	682b      	ldr	r3, [r5, #0]
 800ba04:	6023      	str	r3, [r4, #0]
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 800ba06:	f107 0314 	add.w	r3, r7, #20
 800ba0a:	68f9      	ldr	r1, [r7, #12]
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f004 fc7b 	bl	8010308 <osThreadCreate>
 800ba12:	4602      	mov	r2, r0
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800ba1a:	68f8      	ldr	r0, [r7, #12]
 800ba1c:	f00a fc12 	bl	8016244 <USBH_LL_Init>

  return USBH_OK;
 800ba20:	2300      	movs	r3, #0
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3730      	adds	r7, #48	; 0x30
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bdb0      	pop	{r4, r5, r7, pc}
 800ba2a:	bf00      	nop
 800ba2c:	08016940 	.word	0x08016940
 800ba30:	08016948 	.word	0x08016948

0800ba34 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b085      	sub	sp, #20
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800ba40:	e008      	b.n	800ba54 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	68fa      	ldr	r2, [r7, #12]
 800ba46:	32e0      	adds	r2, #224	; 0xe0
 800ba48:	2100      	movs	r1, #0
 800ba4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	3301      	adds	r3, #1
 800ba52:	60fb      	str	r3, [r7, #12]
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2b0e      	cmp	r3, #14
 800ba58:	d9f3      	bls.n	800ba42 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	60fb      	str	r3, [r7, #12]
 800ba5e:	e009      	b.n	800ba74 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 800ba60:	687a      	ldr	r2, [r7, #4]
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	4413      	add	r3, r2
 800ba66:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	3301      	adds	r3, #1
 800ba72:	60fb      	str	r3, [r7, #12]
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba7a:	d3f1      	bcc.n	800ba60 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2200      	movs	r2, #0
 800ba86:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2200      	movs	r2, #0
 800ba92:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2201      	movs	r2, #1
 800ba9a:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2240      	movs	r2, #64	; 0x40
 800baa0:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2200      	movs	r2, #0
 800baa6:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2200      	movs	r2, #0
 800baac:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2201      	movs	r2, #1
 800bab4:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 800bab8:	2300      	movs	r3, #0
}
 800baba:	4618      	mov	r0, r3
 800babc:	3714      	adds	r7, #20
 800babe:	46bd      	mov	sp, r7
 800bac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac4:	4770      	bx	lr

0800bac6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800bac6:	b480      	push	{r7}
 800bac8:	b085      	sub	sp, #20
 800baca:	af00      	add	r7, sp, #0
 800bacc:	6078      	str	r0, [r7, #4]
 800bace:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 800bad0:	2300      	movs	r3, #0
 800bad2:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d017      	beq.n	800bb0a <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d10f      	bne.n	800bb04 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800baea:	1c59      	adds	r1, r3, #1
 800baec:	687a      	ldr	r2, [r7, #4]
 800baee:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	33dc      	adds	r3, #220	; 0xdc
 800baf6:	009b      	lsls	r3, r3, #2
 800baf8:	4413      	add	r3, r2
 800bafa:	683a      	ldr	r2, [r7, #0]
 800bafc:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800bafe:	2300      	movs	r3, #0
 800bb00:	73fb      	strb	r3, [r7, #15]
 800bb02:	e004      	b.n	800bb0e <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800bb04:	2302      	movs	r3, #2
 800bb06:	73fb      	strb	r3, [r7, #15]
 800bb08:	e001      	b.n	800bb0e <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800bb0a:	2302      	movs	r3, #2
 800bb0c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bb0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3714      	adds	r7, #20
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr

0800bb1c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b085      	sub	sp, #20
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	460b      	mov	r3, r1
 800bb26:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 800bb32:	78fa      	ldrb	r2, [r7, #3]
 800bb34:	429a      	cmp	r2, r3
 800bb36:	d204      	bcs.n	800bb42 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	78fa      	ldrb	r2, [r7, #3]
 800bb3c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 800bb40:	e001      	b.n	800bb46 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 800bb42:	2302      	movs	r3, #2
 800bb44:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800bb46:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3714      	adds	r7, #20
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb52:	4770      	bx	lr

0800bb54 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b087      	sub	sp, #28
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
 800bb5c:	4608      	mov	r0, r1
 800bb5e:	4611      	mov	r1, r2
 800bb60:	461a      	mov	r2, r3
 800bb62:	4603      	mov	r3, r0
 800bb64:	70fb      	strb	r3, [r7, #3]
 800bb66:	460b      	mov	r3, r1
 800bb68:	70bb      	strb	r3, [r7, #2]
 800bb6a:	4613      	mov	r3, r2
 800bb6c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800bb72:	2300      	movs	r3, #0
 800bb74:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800bb7c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bb7e:	e025      	b.n	800bbcc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800bb80:	7dfb      	ldrb	r3, [r7, #23]
 800bb82:	221a      	movs	r2, #26
 800bb84:	fb02 f303 	mul.w	r3, r2, r3
 800bb88:	3308      	adds	r3, #8
 800bb8a:	68fa      	ldr	r2, [r7, #12]
 800bb8c:	4413      	add	r3, r2
 800bb8e:	3302      	adds	r3, #2
 800bb90:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	795b      	ldrb	r3, [r3, #5]
 800bb96:	78fa      	ldrb	r2, [r7, #3]
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d002      	beq.n	800bba2 <USBH_FindInterface+0x4e>
 800bb9c:	78fb      	ldrb	r3, [r7, #3]
 800bb9e:	2bff      	cmp	r3, #255	; 0xff
 800bba0:	d111      	bne.n	800bbc6 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800bba6:	78ba      	ldrb	r2, [r7, #2]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d002      	beq.n	800bbb2 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800bbac:	78bb      	ldrb	r3, [r7, #2]
 800bbae:	2bff      	cmp	r3, #255	; 0xff
 800bbb0:	d109      	bne.n	800bbc6 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800bbb6:	787a      	ldrb	r2, [r7, #1]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d002      	beq.n	800bbc2 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800bbbc:	787b      	ldrb	r3, [r7, #1]
 800bbbe:	2bff      	cmp	r3, #255	; 0xff
 800bbc0:	d101      	bne.n	800bbc6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800bbc2:	7dfb      	ldrb	r3, [r7, #23]
 800bbc4:	e006      	b.n	800bbd4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800bbc6:	7dfb      	ldrb	r3, [r7, #23]
 800bbc8:	3301      	adds	r3, #1
 800bbca:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800bbcc:	7dfb      	ldrb	r3, [r7, #23]
 800bbce:	2b01      	cmp	r3, #1
 800bbd0:	d9d6      	bls.n	800bb80 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800bbd2:	23ff      	movs	r3, #255	; 0xff
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	371c      	adds	r7, #28
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr

0800bbe0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b082      	sub	sp, #8
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f00a fb67 	bl	80162bc <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 800bbee:	2101      	movs	r1, #1
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f00a fc80 	bl	80164f6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800bbf6:	2300      	movs	r3, #0
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3708      	adds	r7, #8
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b088      	sub	sp, #32
 800bc04:	af04      	add	r7, sp, #16
 800bc06:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800bc08:	2302      	movs	r3, #2
 800bc0a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f000 fb7e 	bl	800c312 <USBH_IsPortEnabled>
 800bc16:	4603      	mov	r3, r0
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d10c      	bne.n	800bc36 <USBH_Process+0x36>
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	781b      	ldrb	r3, [r3, #0]
 800bc20:	b2db      	uxtb	r3, r3
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d007      	beq.n	800bc36 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	781b      	ldrb	r3, [r3, #0]
 800bc2a:	b2db      	uxtb	r3, r3
 800bc2c:	2b03      	cmp	r3, #3
 800bc2e:	d002      	beq.n	800bc36 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2203      	movs	r2, #3
 800bc34:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	781b      	ldrb	r3, [r3, #0]
 800bc3a:	b2db      	uxtb	r3, r3
 800bc3c:	2b0b      	cmp	r3, #11
 800bc3e:	f200 81ab 	bhi.w	800bf98 <USBH_Process+0x398>
 800bc42:	a201      	add	r2, pc, #4	; (adr r2, 800bc48 <USBH_Process+0x48>)
 800bc44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc48:	0800bc79 	.word	0x0800bc79
 800bc4c:	0800bcb7 	.word	0x0800bcb7
 800bc50:	0800bccb 	.word	0x0800bccb
 800bc54:	0800bf73 	.word	0x0800bf73
 800bc58:	0800bf99 	.word	0x0800bf99
 800bc5c:	0800bd75 	.word	0x0800bd75
 800bc60:	0800bf0d 	.word	0x0800bf0d
 800bc64:	0800bda5 	.word	0x0800bda5
 800bc68:	0800bde1 	.word	0x0800bde1
 800bc6c:	0800be1b 	.word	0x0800be1b
 800bc70:	0800be63 	.word	0x0800be63
 800bc74:	0800bf5b 	.word	0x0800bf5b
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bc7e:	b2db      	uxtb	r3, r3
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	f000 818b 	beq.w	800bf9c <USBH_Process+0x39c>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2201      	movs	r2, #1
 800bc8a:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 800bc8c:	20c8      	movs	r0, #200	; 0xc8
 800bc8e:	f00a fc7c 	bl	801658a <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f00a fb6f 	bl	8016376 <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bcac:	2200      	movs	r2, #0
 800bcae:	4619      	mov	r1, r3
 800bcb0:	f004 fc34 	bl	801051c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800bcb4:	e172      	b.n	800bf9c <USBH_Process+0x39c>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800bcbc:	2b01      	cmp	r3, #1
 800bcbe:	f040 816f 	bne.w	800bfa0 <USBH_Process+0x3a0>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2202      	movs	r2, #2
 800bcc6:	701a      	strb	r2, [r3, #0]
    }
    break;
 800bcc8:	e16a      	b.n	800bfa0 <USBH_Process+0x3a0>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 800bcca:	2064      	movs	r0, #100	; 0x64
 800bccc:	f00a fc5d 	bl	801658a <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f00a fb29 	bl	8016328 <USBH_LL_GetSpeed>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	461a      	mov	r2, r3
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2205      	movs	r2, #5
 800bce4:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800bce6:	2100      	movs	r1, #0
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f001 fa14 	bl	800d116 <USBH_AllocPipe>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	461a      	mov	r2, r3
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800bcf6:	2180      	movs	r1, #128	; 0x80
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f001 fa0c 	bl	800d116 <USBH_AllocPipe>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	461a      	mov	r2, r3
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	7919      	ldrb	r1, [r3, #4]
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800bd16:	687a      	ldr	r2, [r7, #4]
 800bd18:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800bd1a:	b292      	uxth	r2, r2
 800bd1c:	9202      	str	r2, [sp, #8]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	9201      	str	r2, [sp, #4]
 800bd22:	9300      	str	r3, [sp, #0]
 800bd24:	4603      	mov	r3, r0
 800bd26:	2280      	movs	r2, #128	; 0x80
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f001 f9c5 	bl	800d0b8 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	7959      	ldrb	r1, [r3, #5]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800bd3e:	687a      	ldr	r2, [r7, #4]
 800bd40:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800bd42:	b292      	uxth	r2, r2
 800bd44:	9202      	str	r2, [sp, #8]
 800bd46:	2200      	movs	r2, #0
 800bd48:	9201      	str	r2, [sp, #4]
 800bd4a:	9300      	str	r3, [sp, #0]
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	2200      	movs	r2, #0
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f001 f9b1 	bl	800d0b8 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2201      	movs	r2, #1
 800bd5a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	4619      	mov	r1, r3
 800bd6e:	f004 fbd5 	bl	801051c <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800bd72:	e120      	b.n	800bfb6 <USBH_Process+0x3b6>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f000 f923 	bl	800bfc0 <USBH_HandleEnum>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	f040 8111 	bne.w	800bfa4 <USBH_Process+0x3a4>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2200      	movs	r2, #0
 800bd86:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800bd90:	2b01      	cmp	r3, #1
 800bd92:	d103      	bne.n	800bd9c <USBH_Process+0x19c>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2208      	movs	r2, #8
 800bd98:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 800bd9a:	e103      	b.n	800bfa4 <USBH_Process+0x3a4>
        phost->gState  = HOST_INPUT;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2207      	movs	r2, #7
 800bda0:	701a      	strb	r2, [r3, #0]
    break;
 800bda2:	e0ff      	b.n	800bfa4 <USBH_Process+0x3a4>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	f000 80fc 	beq.w	800bfa8 <USBH_Process+0x3a8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bdb6:	2101      	movs	r1, #1
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2208      	movs	r2, #8
 800bdc0:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2205      	movs	r2, #5
 800bdc6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	4619      	mov	r1, r3
 800bdda:	f004 fb9f 	bl	801051c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800bdde:	e0e3      	b.n	800bfa8 <USBH_Process+0x3a8>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 800bde6:	b29b      	uxth	r3, r3
 800bde8:	4619      	mov	r1, r3
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f000 fc09 	bl	800c602 <USBH_SetCfg>
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d102      	bne.n	800bdfc <USBH_Process+0x1fc>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2209      	movs	r2, #9
 800bdfa:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2201      	movs	r2, #1
 800be00:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800be10:	2200      	movs	r2, #0
 800be12:	4619      	mov	r1, r3
 800be14:	f004 fb82 	bl	801051c <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800be18:	e0cd      	b.n	800bfb6 <USBH_Process+0x3b6>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800be20:	f003 0320 	and.w	r3, r3, #32
 800be24:	2b00      	cmp	r3, #0
 800be26:	d00a      	beq.n	800be3e <USBH_Process+0x23e>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800be28:	2101      	movs	r1, #1
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f000 fc0c 	bl	800c648 <USBH_SetFeature>
 800be30:	4603      	mov	r3, r0
 800be32:	2b00      	cmp	r3, #0
 800be34:	d106      	bne.n	800be44 <USBH_Process+0x244>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	220a      	movs	r2, #10
 800be3a:	701a      	strb	r2, [r3, #0]
 800be3c:	e002      	b.n	800be44 <USBH_Process+0x244>
      }
    }
    else
    {
      phost->gState  = HOST_CHECK_CLASS;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	220a      	movs	r2, #10
 800be42:	701a      	strb	r2, [r3, #0]
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2201      	movs	r2, #1
 800be48:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800be58:	2200      	movs	r2, #0
 800be5a:	4619      	mov	r1, r3
 800be5c:	f004 fb5e 	bl	801051c <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800be60:	e0a9      	b.n	800bfb6 <USBH_Process+0x3b6>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d040      	beq.n	800beee <USBH_Process+0x2ee>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2200      	movs	r2, #0
 800be70:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800be74:	2300      	movs	r3, #0
 800be76:	73fb      	strb	r3, [r7, #15]
 800be78:	e017      	b.n	800beaa <USBH_Process+0x2aa>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800be7a:	7bfb      	ldrb	r3, [r7, #15]
 800be7c:	687a      	ldr	r2, [r7, #4]
 800be7e:	33dc      	adds	r3, #220	; 0xdc
 800be80:	009b      	lsls	r3, r3, #2
 800be82:	4413      	add	r3, r2
 800be84:	685b      	ldr	r3, [r3, #4]
 800be86:	791a      	ldrb	r2, [r3, #4]
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 800be8e:	429a      	cmp	r2, r3
 800be90:	d108      	bne.n	800bea4 <USBH_Process+0x2a4>
        {
          phost->pActiveClass = phost->pClass[idx];
 800be92:	7bfb      	ldrb	r3, [r7, #15]
 800be94:	687a      	ldr	r2, [r7, #4]
 800be96:	33dc      	adds	r3, #220	; 0xdc
 800be98:	009b      	lsls	r3, r3, #2
 800be9a:	4413      	add	r3, r2
 800be9c:	685a      	ldr	r2, [r3, #4]
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800bea4:	7bfb      	ldrb	r3, [r7, #15]
 800bea6:	3301      	adds	r3, #1
 800bea8:	73fb      	strb	r3, [r7, #15]
 800beaa:	7bfb      	ldrb	r3, [r7, #15]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d0e4      	beq.n	800be7a <USBH_Process+0x27a>
        }
      }

      if(phost->pActiveClass != NULL)
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d016      	beq.n	800bee8 <USBH_Process+0x2e8>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800bec0:	689b      	ldr	r3, [r3, #8]
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	4798      	blx	r3
 800bec6:	4603      	mov	r3, r0
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d109      	bne.n	800bee0 <USBH_Process+0x2e0>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2206      	movs	r2, #6
 800bed0:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800bed8:	2103      	movs	r1, #3
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	4798      	blx	r3
 800bede:	e006      	b.n	800beee <USBH_Process+0x2ee>
        }
        else
        {
          phost->gState  = HOST_ABORT_STATE;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	220d      	movs	r2, #13
 800bee4:	701a      	strb	r2, [r3, #0]
 800bee6:	e002      	b.n	800beee <USBH_Process+0x2ee>
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
        }
      }
      else
      {
        phost->gState  = HOST_ABORT_STATE;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	220d      	movs	r2, #13
 800beec:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog ("No registered class for this device.");
      }
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2205      	movs	r2, #5
 800bef2:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bf02:	2200      	movs	r2, #0
 800bf04:	4619      	mov	r1, r3
 800bf06:	f004 fb09 	bl	801051c <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800bf0a:	e054      	b.n	800bfb6 <USBH_Process+0x3b6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d00f      	beq.n	800bf36 <USBH_Process+0x336>
    {
      status = phost->pActiveClass->Requests(phost);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800bf1c:	691b      	ldr	r3, [r3, #16]
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	4798      	blx	r3
 800bf22:	4603      	mov	r3, r0
 800bf24:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 800bf26:	7bbb      	ldrb	r3, [r7, #14]
 800bf28:	b2db      	uxtb	r3, r3
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d13e      	bne.n	800bfac <USBH_Process+0x3ac>
      {
        phost->gState  = HOST_CLASS;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	220b      	movs	r2, #11
 800bf32:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 800bf34:	e03a      	b.n	800bfac <USBH_Process+0x3ac>
      phost->gState  = HOST_ABORT_STATE;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	220d      	movs	r2, #13
 800bf3a:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2205      	movs	r2, #5
 800bf40:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bf50:	2200      	movs	r2, #0
 800bf52:	4619      	mov	r1, r3
 800bf54:	f004 fae2 	bl	801051c <osMessagePut>
    break;
 800bf58:	e028      	b.n	800bfac <USBH_Process+0x3ac>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d025      	beq.n	800bfb0 <USBH_Process+0x3b0>
    {
      phost->pActiveClass->BgndProcess(phost);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800bf6a:	695b      	ldr	r3, [r3, #20]
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	4798      	blx	r3
    }
    break;
 800bf70:	e01e      	b.n	800bfb0 <USBH_Process+0x3b0>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f7ff fd5e 	bl	800ba34 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d018      	beq.n	800bfb4 <USBH_Process+0x3b4>
    {
      phost->pActiveClass->DeInit(phost);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800bf88:	68db      	ldr	r3, [r3, #12]
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	4798      	blx	r3
      phost->pActiveClass = NULL;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2200      	movs	r2, #0
 800bf92:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 800bf96:	e00d      	b.n	800bfb4 <USBH_Process+0x3b4>

  case HOST_ABORT_STATE:
  default :
    break;
 800bf98:	bf00      	nop
 800bf9a:	e00c      	b.n	800bfb6 <USBH_Process+0x3b6>
    break;
 800bf9c:	bf00      	nop
 800bf9e:	e00a      	b.n	800bfb6 <USBH_Process+0x3b6>
    break;
 800bfa0:	bf00      	nop
 800bfa2:	e008      	b.n	800bfb6 <USBH_Process+0x3b6>
    break;
 800bfa4:	bf00      	nop
 800bfa6:	e006      	b.n	800bfb6 <USBH_Process+0x3b6>
    break;
 800bfa8:	bf00      	nop
 800bfaa:	e004      	b.n	800bfb6 <USBH_Process+0x3b6>
    break;
 800bfac:	bf00      	nop
 800bfae:	e002      	b.n	800bfb6 <USBH_Process+0x3b6>
    break;
 800bfb0:	bf00      	nop
 800bfb2:	e000      	b.n	800bfb6 <USBH_Process+0x3b6>
    break;
 800bfb4:	bf00      	nop
  }
 return USBH_OK;
 800bfb6:	2300      	movs	r3, #0
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3710      	adds	r7, #16
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}

0800bfc0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b088      	sub	sp, #32
 800bfc4:	af04      	add	r7, sp, #16
 800bfc6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800bfc8:	2301      	movs	r3, #1
 800bfca:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	785b      	ldrb	r3, [r3, #1]
 800bfd0:	2b07      	cmp	r3, #7
 800bfd2:	f200 8132 	bhi.w	800c23a <USBH_HandleEnum+0x27a>
 800bfd6:	a201      	add	r2, pc, #4	; (adr r2, 800bfdc <USBH_HandleEnum+0x1c>)
 800bfd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfdc:	0800bffd 	.word	0x0800bffd
 800bfe0:	0800c06f 	.word	0x0800c06f
 800bfe4:	0800c087 	.word	0x0800c087
 800bfe8:	0800c0fd 	.word	0x0800c0fd
 800bfec:	0800c115 	.word	0x0800c115
 800bff0:	0800c133 	.word	0x0800c133
 800bff4:	0800c19f 	.word	0x0800c19f
 800bff8:	0800c1ef 	.word	0x0800c1ef
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800bffc:	2108      	movs	r1, #8
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f000 fa2f 	bl	800c462 <USBH_Get_DevDesc>
 800c004:	4603      	mov	r3, r0
 800c006:	2b00      	cmp	r3, #0
 800c008:	f040 8119 	bne.w	800c23e <USBH_HandleEnum+0x27e>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2201      	movs	r2, #1
 800c01a:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	7919      	ldrb	r1, [r3, #4]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800c02c:	687a      	ldr	r2, [r7, #4]
 800c02e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800c030:	b292      	uxth	r2, r2
 800c032:	9202      	str	r2, [sp, #8]
 800c034:	2200      	movs	r2, #0
 800c036:	9201      	str	r2, [sp, #4]
 800c038:	9300      	str	r3, [sp, #0]
 800c03a:	4603      	mov	r3, r0
 800c03c:	2280      	movs	r2, #128	; 0x80
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f001 f83a 	bl	800d0b8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	7959      	ldrb	r1, [r3, #5]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800c054:	687a      	ldr	r2, [r7, #4]
 800c056:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800c058:	b292      	uxth	r2, r2
 800c05a:	9202      	str	r2, [sp, #8]
 800c05c:	2200      	movs	r2, #0
 800c05e:	9201      	str	r2, [sp, #4]
 800c060:	9300      	str	r3, [sp, #0]
 800c062:	4603      	mov	r3, r0
 800c064:	2200      	movs	r2, #0
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f001 f826 	bl	800d0b8 <USBH_OpenPipe>

    }
    break;
 800c06c:	e0e7      	b.n	800c23e <USBH_HandleEnum+0x27e>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800c06e:	2112      	movs	r1, #18
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f000 f9f6 	bl	800c462 <USBH_Get_DevDesc>
 800c076:	4603      	mov	r3, r0
 800c078:	2b00      	cmp	r3, #0
 800c07a:	f040 80e2 	bne.w	800c242 <USBH_HandleEnum+0x282>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2202      	movs	r2, #2
 800c082:	705a      	strb	r2, [r3, #1]

    }
    break;
 800c084:	e0dd      	b.n	800c242 <USBH_HandleEnum+0x282>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800c086:	2101      	movs	r1, #1
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f000 fa96 	bl	800c5ba <USBH_SetAddress>
 800c08e:	4603      	mov	r3, r0
 800c090:	2b00      	cmp	r3, #0
 800c092:	f040 80d8 	bne.w	800c246 <USBH_HandleEnum+0x286>
    {
      USBH_Delay(2U);
 800c096:	2002      	movs	r0, #2
 800c098:	f00a fa77 	bl	801658a <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2201      	movs	r2, #1
 800c0a0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2203      	movs	r2, #3
 800c0a8:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	7919      	ldrb	r1, [r3, #4]
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800c0ba:	687a      	ldr	r2, [r7, #4]
 800c0bc:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800c0be:	b292      	uxth	r2, r2
 800c0c0:	9202      	str	r2, [sp, #8]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	9201      	str	r2, [sp, #4]
 800c0c6:	9300      	str	r3, [sp, #0]
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	2280      	movs	r2, #128	; 0x80
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f000 fff3 	bl	800d0b8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	7959      	ldrb	r1, [r3, #5]
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800c0e2:	687a      	ldr	r2, [r7, #4]
 800c0e4:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800c0e6:	b292      	uxth	r2, r2
 800c0e8:	9202      	str	r2, [sp, #8]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	9201      	str	r2, [sp, #4]
 800c0ee:	9300      	str	r3, [sp, #0]
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f000 ffdf 	bl	800d0b8 <USBH_OpenPipe>
    }
    break;
 800c0fa:	e0a4      	b.n	800c246 <USBH_HandleEnum+0x286>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 800c0fc:	2109      	movs	r1, #9
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f000 f9d7 	bl	800c4b2 <USBH_Get_CfgDesc>
 800c104:	4603      	mov	r3, r0
 800c106:	2b00      	cmp	r3, #0
 800c108:	f040 809f 	bne.w	800c24a <USBH_HandleEnum+0x28a>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2204      	movs	r2, #4
 800c110:	705a      	strb	r2, [r3, #1]
    }
    break;
 800c112:	e09a      	b.n	800c24a <USBH_HandleEnum+0x28a>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 800c11a:	4619      	mov	r1, r3
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f000 f9c8 	bl	800c4b2 <USBH_Get_CfgDesc>
 800c122:	4603      	mov	r3, r0
 800c124:	2b00      	cmp	r3, #0
 800c126:	f040 8092 	bne.w	800c24e <USBH_HandleEnum+0x28e>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2205      	movs	r2, #5
 800c12e:	705a      	strb	r2, [r3, #1]
    }
    break;
 800c130:	e08d      	b.n	800c24e <USBH_HandleEnum+0x28e>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d01e      	beq.n	800c17a <USBH_HandleEnum+0x1ba>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800c148:	23ff      	movs	r3, #255	; 0xff
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f000 f9d5 	bl	800c4fa <USBH_Get_StringDesc>
 800c150:	4603      	mov	r3, r0
 800c152:	2b00      	cmp	r3, #0
 800c154:	d17d      	bne.n	800c252 <USBH_HandleEnum+0x292>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2206      	movs	r2, #6
 800c15a:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2205      	movs	r2, #5
 800c160:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c170:	2200      	movs	r2, #0
 800c172:	4619      	mov	r1, r3
 800c174:	f004 f9d2 	bl	801051c <osMessagePut>
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800c178:	e06b      	b.n	800c252 <USBH_HandleEnum+0x292>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2206      	movs	r2, #6
 800c17e:	705a      	strb	r2, [r3, #1]
     phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2205      	movs	r2, #5
 800c184:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
     (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c194:	2200      	movs	r2, #0
 800c196:	4619      	mov	r1, r3
 800c198:	f004 f9c0 	bl	801051c <osMessagePut>
    break;
 800c19c:	e059      	b.n	800c252 <USBH_HandleEnum+0x292>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d010      	beq.n	800c1ca <USBH_HandleEnum+0x20a>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800c1b4:	23ff      	movs	r3, #255	; 0xff
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f000 f99f 	bl	800c4fa <USBH_Get_StringDesc>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d149      	bne.n	800c256 <USBH_HandleEnum+0x296>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2207      	movs	r2, #7
 800c1c6:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800c1c8:	e045      	b.n	800c256 <USBH_HandleEnum+0x296>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2207      	movs	r2, #7
 800c1ce:	705a      	strb	r2, [r3, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2205      	movs	r2, #5
 800c1d4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	4619      	mov	r1, r3
 800c1e8:	f004 f998 	bl	801051c <osMessagePut>
    break;
 800c1ec:	e033      	b.n	800c256 <USBH_HandleEnum+0x296>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d00f      	beq.n	800c218 <USBH_HandleEnum+0x258>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800c204:	23ff      	movs	r3, #255	; 0xff
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f000 f977 	bl	800c4fa <USBH_Get_StringDesc>
 800c20c:	4603      	mov	r3, r0
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d123      	bne.n	800c25a <USBH_HandleEnum+0x29a>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 800c212:	2300      	movs	r3, #0
 800c214:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800c216:	e020      	b.n	800c25a <USBH_HandleEnum+0x29a>
      Status = USBH_OK;
 800c218:	2300      	movs	r3, #0
 800c21a:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2205      	movs	r2, #5
 800c220:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c230:	2200      	movs	r2, #0
 800c232:	4619      	mov	r1, r3
 800c234:	f004 f972 	bl	801051c <osMessagePut>
    break;
 800c238:	e00f      	b.n	800c25a <USBH_HandleEnum+0x29a>

  default:
    break;
 800c23a:	bf00      	nop
 800c23c:	e00e      	b.n	800c25c <USBH_HandleEnum+0x29c>
    break;
 800c23e:	bf00      	nop
 800c240:	e00c      	b.n	800c25c <USBH_HandleEnum+0x29c>
    break;
 800c242:	bf00      	nop
 800c244:	e00a      	b.n	800c25c <USBH_HandleEnum+0x29c>
    break;
 800c246:	bf00      	nop
 800c248:	e008      	b.n	800c25c <USBH_HandleEnum+0x29c>
    break;
 800c24a:	bf00      	nop
 800c24c:	e006      	b.n	800c25c <USBH_HandleEnum+0x29c>
    break;
 800c24e:	bf00      	nop
 800c250:	e004      	b.n	800c25c <USBH_HandleEnum+0x29c>
    break;
 800c252:	bf00      	nop
 800c254:	e002      	b.n	800c25c <USBH_HandleEnum+0x29c>
    break;
 800c256:	bf00      	nop
 800c258:	e000      	b.n	800c25c <USBH_HandleEnum+0x29c>
    break;
 800c25a:	bf00      	nop
  }
  return Status;
 800c25c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3710      	adds	r7, #16
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
 800c266:	bf00      	nop

0800c268 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 800c268:	b480      	push	{r7}
 800c26a:	b083      	sub	sp, #12
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	683a      	ldr	r2, [r7, #0]
 800c276:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 800c27a:	bf00      	nop
 800c27c:	370c      	adds	r7, #12
 800c27e:	46bd      	mov	sp, r7
 800c280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c284:	4770      	bx	lr

0800c286 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800c286:	b580      	push	{r7, lr}
 800c288:	b082      	sub	sp, #8
 800c28a:	af00      	add	r7, sp, #0
 800c28c:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800c294:	1c5a      	adds	r2, r3, #1
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f000 f804 	bl	800c2aa <USBH_HandleSof>
}
 800c2a2:	bf00      	nop
 800c2a4:	3708      	adds	r7, #8
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}

0800c2aa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800c2aa:	b580      	push	{r7, lr}
 800c2ac:	b082      	sub	sp, #8
 800c2ae:	af00      	add	r7, sp, #0
 800c2b0:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	781b      	ldrb	r3, [r3, #0]
 800c2b6:	b2db      	uxtb	r3, r3
 800c2b8:	2b0b      	cmp	r3, #11
 800c2ba:	d10a      	bne.n	800c2d2 <USBH_HandleSof+0x28>
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d005      	beq.n	800c2d2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c2cc:	699b      	ldr	r3, [r3, #24]
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	4798      	blx	r3
  }
}
 800c2d2:	bf00      	nop
 800c2d4:	3708      	adds	r7, #8
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}

0800c2da <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 800c2da:	b480      	push	{r7}
 800c2dc:	b083      	sub	sp, #12
 800c2de:	af00      	add	r7, sp, #0
 800c2e0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2201      	movs	r2, #1
 800c2e6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800c2ea:	bf00      	nop
}
 800c2ec:	370c      	adds	r7, #12
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f4:	4770      	bx	lr

0800c2f6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 800c2f6:	b480      	push	{r7}
 800c2f8:	b083      	sub	sp, #12
 800c2fa:	af00      	add	r7, sp, #0
 800c2fc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2200      	movs	r2, #0
 800c302:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800c306:	bf00      	nop
}
 800c308:	370c      	adds	r7, #12
 800c30a:	46bd      	mov	sp, r7
 800c30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c310:	4770      	bx	lr

0800c312 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 800c312:	b480      	push	{r7}
 800c314:	b083      	sub	sp, #12
 800c316:	af00      	add	r7, sp, #0
 800c318:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 800c320:	4618      	mov	r0, r3
 800c322:	370c      	adds	r7, #12
 800c324:	46bd      	mov	sp, r7
 800c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32a:	4770      	bx	lr

0800c32c <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b082      	sub	sp, #8
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	781b      	ldrb	r3, [r3, #0]
 800c338:	b2db      	uxtb	r3, r3
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d10f      	bne.n	800c35e <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2201      	movs	r2, #1
 800c342:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d00e      	beq.n	800c36e <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c356:	2104      	movs	r1, #4
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	4798      	blx	r3
 800c35c:	e007      	b.n	800c36e <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c364:	2b01      	cmp	r3, #1
 800c366:	d102      	bne.n	800c36e <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2202      	movs	r2, #2
 800c36c:	701a      	strb	r2, [r3, #0]
    }
  }

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2201      	movs	r2, #1
 800c372:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c382:	2200      	movs	r2, #0
 800c384:	4619      	mov	r1, r3
 800c386:	f004 f8c9 	bl	801051c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800c38a:	2300      	movs	r3, #0
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3708      	adds	r7, #8
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}

0800c394 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b082      	sub	sp, #8
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f009 ffa8 	bl	80162f2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	791b      	ldrb	r3, [r3, #4]
 800c3a6:	4619      	mov	r1, r3
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f000 fed2 	bl	800d152 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	795b      	ldrb	r3, [r3, #5]
 800c3b2:	4619      	mov	r1, r3
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f000 fecc 	bl	800d152 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2200      	movs	r2, #0
 800c3be:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d005      	beq.n	800c3d8 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c3d2:	2105      	movs	r1, #5
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f009 ff6f 	bl	80162bc <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2203      	movs	r2, #3
 800c3e2:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2201      	movs	r2, #1
 800c3e8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	4619      	mov	r1, r3
 800c3fc:	f004 f88e 	bl	801051c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800c400:	2300      	movs	r3, #0
}
 800c402:	4618      	mov	r0, r3
 800c404:	3708      	adds	r7, #8
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}

0800c40a <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800c40a:	b580      	push	{r7, lr}
 800c40c:	b086      	sub	sp, #24
 800c40e:	af00      	add	r7, sp, #0
 800c410:	6078      	str	r0, [r7, #4]
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f8d3 13cc 	ldr.w	r1, [r3, #972]	; 0x3cc
 800c418:	f107 030c 	add.w	r3, r7, #12
 800c41c:	f04f 32ff 	mov.w	r2, #4294967295
 800c420:	4618      	mov	r0, r3
 800c422:	f004 f8bb 	bl	801059c <osMessageGet>
    if(event.status == osEventMessage)
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	2b10      	cmp	r3, #16
 800c42a:	d1f2      	bne.n	800c412 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f7ff fbe7 	bl	800bc00 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800c432:	e7ee      	b.n	800c412 <USBH_Process_OS+0x8>

0800c434 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b082      	sub	sp, #8
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2201      	movs	r2, #1
 800c440:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c450:	2200      	movs	r2, #0
 800c452:	4619      	mov	r1, r3
 800c454:	f004 f862 	bl	801051c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800c458:	2300      	movs	r3, #0
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	3708      	adds	r7, #8
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}

0800c462 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800c462:	b580      	push	{r7, lr}
 800c464:	b086      	sub	sp, #24
 800c466:	af02      	add	r7, sp, #8
 800c468:	6078      	str	r0, [r7, #4]
 800c46a:	460b      	mov	r3, r1
 800c46c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800c474:	78fb      	ldrb	r3, [r7, #3]
 800c476:	b29b      	uxth	r3, r3
 800c478:	9300      	str	r3, [sp, #0]
 800c47a:	4613      	mov	r3, r2
 800c47c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c480:	2100      	movs	r1, #0
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f000 f864 	bl	800c550 <USBH_GetDescriptor>
 800c488:	4603      	mov	r3, r0
 800c48a:	73fb      	strb	r3, [r7, #15]
 800c48c:	7bfb      	ldrb	r3, [r7, #15]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d10a      	bne.n	800c4a8 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f203 3022 	addw	r0, r3, #802	; 0x322
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c49e:	78fa      	ldrb	r2, [r7, #3]
 800c4a0:	b292      	uxth	r2, r2
 800c4a2:	4619      	mov	r1, r3
 800c4a4:	f000 f918 	bl	800c6d8 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 800c4a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3710      	adds	r7, #16
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}

0800c4b2 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 800c4b2:	b580      	push	{r7, lr}
 800c4b4:	b086      	sub	sp, #24
 800c4b6:	af02      	add	r7, sp, #8
 800c4b8:	6078      	str	r0, [r7, #4]
 800c4ba:	460b      	mov	r3, r1
 800c4bc:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	331c      	adds	r3, #28
 800c4c2:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 800c4c4:	887b      	ldrh	r3, [r7, #2]
 800c4c6:	9300      	str	r3, [sp, #0]
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c4ce:	2100      	movs	r1, #0
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f000 f83d 	bl	800c550 <USBH_GetDescriptor>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	72fb      	strb	r3, [r7, #11]
 800c4da:	7afb      	ldrb	r3, [r7, #11]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d107      	bne.n	800c4f0 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800c4e6:	887a      	ldrh	r2, [r7, #2]
 800c4e8:	68f9      	ldr	r1, [r7, #12]
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f000 f964 	bl	800c7b8 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 800c4f0:	7afb      	ldrb	r3, [r7, #11]
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	3710      	adds	r7, #16
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}

0800c4fa <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 800c4fa:	b580      	push	{r7, lr}
 800c4fc:	b088      	sub	sp, #32
 800c4fe:	af02      	add	r7, sp, #8
 800c500:	60f8      	str	r0, [r7, #12]
 800c502:	607a      	str	r2, [r7, #4]
 800c504:	461a      	mov	r2, r3
 800c506:	460b      	mov	r3, r1
 800c508:	72fb      	strb	r3, [r7, #11]
 800c50a:	4613      	mov	r3, r2
 800c50c:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 800c50e:	7afb      	ldrb	r3, [r7, #11]
 800c510:	b29b      	uxth	r3, r3
 800c512:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c516:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800c51e:	893b      	ldrh	r3, [r7, #8]
 800c520:	9300      	str	r3, [sp, #0]
 800c522:	460b      	mov	r3, r1
 800c524:	2100      	movs	r1, #0
 800c526:	68f8      	ldr	r0, [r7, #12]
 800c528:	f000 f812 	bl	800c550 <USBH_GetDescriptor>
 800c52c:	4603      	mov	r3, r0
 800c52e:	75fb      	strb	r3, [r7, #23]
 800c530:	7dfb      	ldrb	r3, [r7, #23]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d107      	bne.n	800c546 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c53c:	893a      	ldrh	r2, [r7, #8]
 800c53e:	6879      	ldr	r1, [r7, #4]
 800c540:	4618      	mov	r0, r3
 800c542:	f000 fa37 	bl	800c9b4 <USBH_ParseStringDesc>
  }
  return status;
 800c546:	7dfb      	ldrb	r3, [r7, #23]
}
 800c548:	4618      	mov	r0, r3
 800c54a:	3718      	adds	r7, #24
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}

0800c550 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
 800c556:	60f8      	str	r0, [r7, #12]
 800c558:	607b      	str	r3, [r7, #4]
 800c55a:	460b      	mov	r3, r1
 800c55c:	72fb      	strb	r3, [r7, #11]
 800c55e:	4613      	mov	r3, r2
 800c560:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	789b      	ldrb	r3, [r3, #2]
 800c566:	2b01      	cmp	r3, #1
 800c568:	d11c      	bne.n	800c5a4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c56a:	7afb      	ldrb	r3, [r7, #11]
 800c56c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c570:	b2da      	uxtb	r2, r3
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	2206      	movs	r2, #6
 800c57a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	893a      	ldrh	r2, [r7, #8]
 800c580:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c582:	893b      	ldrh	r3, [r7, #8]
 800c584:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c588:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c58c:	d104      	bne.n	800c598 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	f240 4209 	movw	r2, #1033	; 0x409
 800c594:	829a      	strh	r2, [r3, #20]
 800c596:	e002      	b.n	800c59e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	2200      	movs	r2, #0
 800c59c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	8b3a      	ldrh	r2, [r7, #24]
 800c5a2:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 800c5a4:	8b3b      	ldrh	r3, [r7, #24]
 800c5a6:	461a      	mov	r2, r3
 800c5a8:	6879      	ldr	r1, [r7, #4]
 800c5aa:	68f8      	ldr	r0, [r7, #12]
 800c5ac:	f000 fa50 	bl	800ca50 <USBH_CtlReq>
 800c5b0:	4603      	mov	r3, r0
}
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	3710      	adds	r7, #16
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd80      	pop	{r7, pc}

0800c5ba <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c5ba:	b580      	push	{r7, lr}
 800c5bc:	b082      	sub	sp, #8
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	6078      	str	r0, [r7, #4]
 800c5c2:	460b      	mov	r3, r1
 800c5c4:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	789b      	ldrb	r3, [r3, #2]
 800c5ca:	2b01      	cmp	r3, #1
 800c5cc:	d10f      	bne.n	800c5ee <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2205      	movs	r2, #5
 800c5d8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c5da:	78fb      	ldrb	r3, [r7, #3]
 800c5dc:	b29a      	uxth	r2, r3
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	2100      	movs	r1, #0
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f000 fa2c 	bl	800ca50 <USBH_CtlReq>
 800c5f8:	4603      	mov	r3, r0
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3708      	adds	r7, #8
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}

0800c602 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c602:	b580      	push	{r7, lr}
 800c604:	b082      	sub	sp, #8
 800c606:	af00      	add	r7, sp, #0
 800c608:	6078      	str	r0, [r7, #4]
 800c60a:	460b      	mov	r3, r1
 800c60c:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	789b      	ldrb	r3, [r3, #2]
 800c612:	2b01      	cmp	r3, #1
 800c614:	d10e      	bne.n	800c634 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2200      	movs	r2, #0
 800c61a:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2209      	movs	r2, #9
 800c620:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	887a      	ldrh	r2, [r7, #2]
 800c626:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2200      	movs	r2, #0
 800c62c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2200      	movs	r2, #0
 800c632:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 800c634:	2200      	movs	r2, #0
 800c636:	2100      	movs	r1, #0
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f000 fa09 	bl	800ca50 <USBH_CtlReq>
 800c63e:	4603      	mov	r3, r0
}
 800c640:	4618      	mov	r0, r3
 800c642:	3708      	adds	r7, #8
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}

0800c648 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b082      	sub	sp, #8
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	460b      	mov	r3, r1
 800c652:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	789b      	ldrb	r3, [r3, #2]
 800c658:	2b01      	cmp	r3, #1
 800c65a:	d10f      	bne.n	800c67c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2200      	movs	r2, #0
 800c660:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2203      	movs	r2, #3
 800c666:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c668:	78fb      	ldrb	r3, [r7, #3]
 800c66a:	b29a      	uxth	r2, r3
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2200      	movs	r2, #0
 800c674:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2200      	movs	r2, #0
 800c67a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800c67c:	2200      	movs	r2, #0
 800c67e:	2100      	movs	r1, #0
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f000 f9e5 	bl	800ca50 <USBH_CtlReq>
 800c686:	4603      	mov	r3, r0
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3708      	adds	r7, #8
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}

0800c690 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b082      	sub	sp, #8
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	460b      	mov	r3, r1
 800c69a:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	789b      	ldrb	r3, [r3, #2]
 800c6a0:	2b01      	cmp	r3, #1
 800c6a2:	d10f      	bne.n	800c6c4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2202      	movs	r2, #2
 800c6a8:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2201      	movs	r2, #1
 800c6ae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c6b6:	78fb      	ldrb	r3, [r7, #3]
 800c6b8:	b29a      	uxth	r2, r3
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	2100      	movs	r1, #0
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f000 f9c1 	bl	800ca50 <USBH_CtlReq>
 800c6ce:	4603      	mov	r3, r0
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3708      	adds	r7, #8
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}

0800c6d8 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 800c6d8:	b480      	push	{r7}
 800c6da:	b085      	sub	sp, #20
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	60f8      	str	r0, [r7, #12]
 800c6e0:	60b9      	str	r1, [r7, #8]
 800c6e2:	4613      	mov	r3, r2
 800c6e4:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	781a      	ldrb	r2, [r3, #0]
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	785a      	ldrb	r2, [r3, #1]
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	3302      	adds	r3, #2
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	b29a      	uxth	r2, r3
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	3303      	adds	r3, #3
 800c702:	781b      	ldrb	r3, [r3, #0]
 800c704:	b29b      	uxth	r3, r3
 800c706:	021b      	lsls	r3, r3, #8
 800c708:	b29b      	uxth	r3, r3
 800c70a:	4313      	orrs	r3, r2
 800c70c:	b29a      	uxth	r2, r3
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	791a      	ldrb	r2, [r3, #4]
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	795a      	ldrb	r2, [r3, #5]
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	799a      	ldrb	r2, [r3, #6]
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	79da      	ldrb	r2, [r3, #7]
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800c732:	88fb      	ldrh	r3, [r7, #6]
 800c734:	2b08      	cmp	r3, #8
 800c736:	d939      	bls.n	800c7ac <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	3308      	adds	r3, #8
 800c73c:	781b      	ldrb	r3, [r3, #0]
 800c73e:	b29a      	uxth	r2, r3
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	3309      	adds	r3, #9
 800c744:	781b      	ldrb	r3, [r3, #0]
 800c746:	b29b      	uxth	r3, r3
 800c748:	021b      	lsls	r3, r3, #8
 800c74a:	b29b      	uxth	r3, r3
 800c74c:	4313      	orrs	r3, r2
 800c74e:	b29a      	uxth	r2, r3
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	330a      	adds	r3, #10
 800c758:	781b      	ldrb	r3, [r3, #0]
 800c75a:	b29a      	uxth	r2, r3
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	330b      	adds	r3, #11
 800c760:	781b      	ldrb	r3, [r3, #0]
 800c762:	b29b      	uxth	r3, r3
 800c764:	021b      	lsls	r3, r3, #8
 800c766:	b29b      	uxth	r3, r3
 800c768:	4313      	orrs	r3, r2
 800c76a:	b29a      	uxth	r2, r3
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	330c      	adds	r3, #12
 800c774:	781b      	ldrb	r3, [r3, #0]
 800c776:	b29a      	uxth	r2, r3
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	330d      	adds	r3, #13
 800c77c:	781b      	ldrb	r3, [r3, #0]
 800c77e:	b29b      	uxth	r3, r3
 800c780:	021b      	lsls	r3, r3, #8
 800c782:	b29b      	uxth	r3, r3
 800c784:	4313      	orrs	r3, r2
 800c786:	b29a      	uxth	r2, r3
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	7b9a      	ldrb	r2, [r3, #14]
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	7bda      	ldrb	r2, [r3, #15]
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	7c1a      	ldrb	r2, [r3, #16]
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	7c5a      	ldrb	r2, [r3, #17]
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	745a      	strb	r2, [r3, #17]
  }
}
 800c7ac:	bf00      	nop
 800c7ae:	3714      	adds	r7, #20
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b6:	4770      	bx	lr

0800c7b8 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b08a      	sub	sp, #40	; 0x28
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	60f8      	str	r0, [r7, #12]
 800c7c0:	60b9      	str	r1, [r7, #8]
 800c7c2:	4613      	mov	r3, r2
 800c7c4:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	781a      	ldrb	r2, [r3, #0]
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	785a      	ldrb	r2, [r3, #1]
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	3302      	adds	r3, #2
 800c7ee:	781b      	ldrb	r3, [r3, #0]
 800c7f0:	b29a      	uxth	r2, r3
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	3303      	adds	r3, #3
 800c7f6:	781b      	ldrb	r3, [r3, #0]
 800c7f8:	b29b      	uxth	r3, r3
 800c7fa:	021b      	lsls	r3, r3, #8
 800c7fc:	b29b      	uxth	r3, r3
 800c7fe:	4313      	orrs	r3, r2
 800c800:	b29a      	uxth	r2, r3
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	791a      	ldrb	r2, [r3, #4]
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	795a      	ldrb	r2, [r3, #5]
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	799a      	ldrb	r2, [r3, #6]
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	79da      	ldrb	r2, [r3, #7]
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	7a1a      	ldrb	r2, [r3, #8]
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c82e:	88fb      	ldrh	r3, [r7, #6]
 800c830:	2b09      	cmp	r3, #9
 800c832:	d95f      	bls.n	800c8f4 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800c834:	2309      	movs	r3, #9
 800c836:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800c838:	2300      	movs	r3, #0
 800c83a:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c83c:	e051      	b.n	800c8e2 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c83e:	f107 0316 	add.w	r3, r7, #22
 800c842:	4619      	mov	r1, r3
 800c844:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c846:	f000 f8e8 	bl	800ca1a <USBH_GetNextDesc>
 800c84a:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800c84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c84e:	785b      	ldrb	r3, [r3, #1]
 800c850:	2b04      	cmp	r3, #4
 800c852:	d146      	bne.n	800c8e2 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800c854:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c858:	221a      	movs	r2, #26
 800c85a:	fb02 f303 	mul.w	r3, r2, r3
 800c85e:	3308      	adds	r3, #8
 800c860:	68fa      	ldr	r2, [r7, #12]
 800c862:	4413      	add	r3, r2
 800c864:	3302      	adds	r3, #2
 800c866:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 800c868:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c86a:	69f8      	ldr	r0, [r7, #28]
 800c86c:	f000 f846 	bl	800c8fc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c870:	2300      	movs	r3, #0
 800c872:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800c876:	2300      	movs	r3, #0
 800c878:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c87a:	e022      	b.n	800c8c2 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 800c87c:	f107 0316 	add.w	r3, r7, #22
 800c880:	4619      	mov	r1, r3
 800c882:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c884:	f000 f8c9 	bl	800ca1a <USBH_GetNextDesc>
 800c888:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800c88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c88c:	785b      	ldrb	r3, [r3, #1]
 800c88e:	2b05      	cmp	r3, #5
 800c890:	d117      	bne.n	800c8c2 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c892:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c896:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800c89a:	3201      	adds	r2, #1
 800c89c:	00d2      	lsls	r2, r2, #3
 800c89e:	211a      	movs	r1, #26
 800c8a0:	fb01 f303 	mul.w	r3, r1, r3
 800c8a4:	4413      	add	r3, r2
 800c8a6:	3308      	adds	r3, #8
 800c8a8:	68fa      	ldr	r2, [r7, #12]
 800c8aa:	4413      	add	r3, r2
 800c8ac:	3304      	adds	r3, #4
 800c8ae:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 800c8b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c8b2:	69b8      	ldr	r0, [r7, #24]
 800c8b4:	f000 f851 	bl	800c95a <USBH_ParseEPDesc>
            ep_ix++;
 800c8b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c8bc:	3301      	adds	r3, #1
 800c8be:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c8c2:	69fb      	ldr	r3, [r7, #28]
 800c8c4:	791b      	ldrb	r3, [r3, #4]
 800c8c6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d204      	bcs.n	800c8d8 <USBH_ParseCfgDesc+0x120>
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	885a      	ldrh	r2, [r3, #2]
 800c8d2:	8afb      	ldrh	r3, [r7, #22]
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d8d1      	bhi.n	800c87c <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800c8d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c8dc:	3301      	adds	r3, #1
 800c8de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c8e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c8e6:	2b01      	cmp	r3, #1
 800c8e8:	d804      	bhi.n	800c8f4 <USBH_ParseCfgDesc+0x13c>
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	885a      	ldrh	r2, [r3, #2]
 800c8ee:	8afb      	ldrh	r3, [r7, #22]
 800c8f0:	429a      	cmp	r2, r3
 800c8f2:	d8a4      	bhi.n	800c83e <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800c8f4:	bf00      	nop
 800c8f6:	3728      	adds	r7, #40	; 0x28
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}

0800c8fc <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	b083      	sub	sp, #12
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
 800c904:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	781a      	ldrb	r2, [r3, #0]
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	785a      	ldrb	r2, [r3, #1]
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	789a      	ldrb	r2, [r3, #2]
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	78da      	ldrb	r2, [r3, #3]
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	791a      	ldrb	r2, [r3, #4]
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	795a      	ldrb	r2, [r3, #5]
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	799a      	ldrb	r2, [r3, #6]
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	79da      	ldrb	r2, [r3, #7]
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	7a1a      	ldrb	r2, [r3, #8]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	721a      	strb	r2, [r3, #8]
}
 800c94e:	bf00      	nop
 800c950:	370c      	adds	r7, #12
 800c952:	46bd      	mov	sp, r7
 800c954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c958:	4770      	bx	lr

0800c95a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 800c95a:	b480      	push	{r7}
 800c95c:	b083      	sub	sp, #12
 800c95e:	af00      	add	r7, sp, #0
 800c960:	6078      	str	r0, [r7, #4]
 800c962:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	781a      	ldrb	r2, [r3, #0]
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	785a      	ldrb	r2, [r3, #1]
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	789a      	ldrb	r2, [r3, #2]
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	78da      	ldrb	r2, [r3, #3]
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	3304      	adds	r3, #4
 800c988:	781b      	ldrb	r3, [r3, #0]
 800c98a:	b29a      	uxth	r2, r3
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	3305      	adds	r3, #5
 800c990:	781b      	ldrb	r3, [r3, #0]
 800c992:	b29b      	uxth	r3, r3
 800c994:	021b      	lsls	r3, r3, #8
 800c996:	b29b      	uxth	r3, r3
 800c998:	4313      	orrs	r3, r2
 800c99a:	b29a      	uxth	r2, r3
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	799a      	ldrb	r2, [r3, #6]
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	719a      	strb	r2, [r3, #6]
}
 800c9a8:	bf00      	nop
 800c9aa:	370c      	adds	r7, #12
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b2:	4770      	bx	lr

0800c9b4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b087      	sub	sp, #28
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	60f8      	str	r0, [r7, #12]
 800c9bc:	60b9      	str	r1, [r7, #8]
 800c9be:	4613      	mov	r3, r2
 800c9c0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	3301      	adds	r3, #1
 800c9c6:	781b      	ldrb	r3, [r3, #0]
 800c9c8:	2b03      	cmp	r3, #3
 800c9ca:	d120      	bne.n	800ca0e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	781b      	ldrb	r3, [r3, #0]
 800c9d0:	1e9a      	subs	r2, r3, #2
 800c9d2:	88fb      	ldrh	r3, [r7, #6]
 800c9d4:	4293      	cmp	r3, r2
 800c9d6:	bf28      	it	cs
 800c9d8:	4613      	movcs	r3, r2
 800c9da:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	3302      	adds	r3, #2
 800c9e0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	82fb      	strh	r3, [r7, #22]
 800c9e6:	e00b      	b.n	800ca00 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c9e8:	8afb      	ldrh	r3, [r7, #22]
 800c9ea:	68fa      	ldr	r2, [r7, #12]
 800c9ec:	4413      	add	r3, r2
 800c9ee:	781a      	ldrb	r2, [r3, #0]
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	3301      	adds	r3, #1
 800c9f8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c9fa:	8afb      	ldrh	r3, [r7, #22]
 800c9fc:	3302      	adds	r3, #2
 800c9fe:	82fb      	strh	r3, [r7, #22]
 800ca00:	8afa      	ldrh	r2, [r7, #22]
 800ca02:	8abb      	ldrh	r3, [r7, #20]
 800ca04:	429a      	cmp	r2, r3
 800ca06:	d3ef      	bcc.n	800c9e8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	701a      	strb	r2, [r3, #0]
  }
}
 800ca0e:	bf00      	nop
 800ca10:	371c      	adds	r7, #28
 800ca12:	46bd      	mov	sp, r7
 800ca14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca18:	4770      	bx	lr

0800ca1a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800ca1a:	b480      	push	{r7}
 800ca1c:	b085      	sub	sp, #20
 800ca1e:	af00      	add	r7, sp, #0
 800ca20:	6078      	str	r0, [r7, #4]
 800ca22:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	881a      	ldrh	r2, [r3, #0]
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	781b      	ldrb	r3, [r3, #0]
 800ca2c:	b29b      	uxth	r3, r3
 800ca2e:	4413      	add	r3, r2
 800ca30:	b29a      	uxth	r2, r3
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	781b      	ldrb	r3, [r3, #0]
 800ca3a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	4413      	add	r3, r2
 800ca40:	60fb      	str	r3, [r7, #12]

  return(pnext);
 800ca42:	68fb      	ldr	r3, [r7, #12]
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	3714      	adds	r7, #20
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4e:	4770      	bx	lr

0800ca50 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b086      	sub	sp, #24
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	60f8      	str	r0, [r7, #12]
 800ca58:	60b9      	str	r1, [r7, #8]
 800ca5a:	4613      	mov	r3, r2
 800ca5c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ca5e:	2301      	movs	r3, #1
 800ca60:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	789b      	ldrb	r3, [r3, #2]
 800ca66:	2b01      	cmp	r3, #1
 800ca68:	d002      	beq.n	800ca70 <USBH_CtlReq+0x20>
 800ca6a:	2b02      	cmp	r3, #2
 800ca6c:	d01d      	beq.n	800caaa <USBH_CtlReq+0x5a>
      }
    }
    break;

  default:
    break;
 800ca6e:	e042      	b.n	800caf6 <USBH_CtlReq+0xa6>
    phost->Control.buff = buff;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	68ba      	ldr	r2, [r7, #8]
 800ca74:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	88fa      	ldrh	r2, [r7, #6]
 800ca7a:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	2201      	movs	r2, #1
 800ca80:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	2202      	movs	r2, #2
 800ca86:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 800ca88:	2301      	movs	r3, #1
 800ca8a:	75fb      	strb	r3, [r7, #23]
    phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	2203      	movs	r2, #3
 800ca90:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800caa0:	2200      	movs	r2, #0
 800caa2:	4619      	mov	r1, r3
 800caa4:	f003 fd3a 	bl	801051c <osMessagePut>
    break;
 800caa8:	e025      	b.n	800caf6 <USBH_CtlReq+0xa6>
    status = USBH_HandleControl(phost);
 800caaa:	68f8      	ldr	r0, [r7, #12]
 800caac:	f000 f828 	bl	800cb00 <USBH_HandleControl>
 800cab0:	4603      	mov	r3, r0
 800cab2:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 800cab4:	7dfb      	ldrb	r3, [r7, #23]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d108      	bne.n	800cacc <USBH_CtlReq+0x7c>
      phost->RequestState = CMD_SEND;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	2201      	movs	r2, #1
 800cabe:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	2200      	movs	r2, #0
 800cac4:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800cac6:	2300      	movs	r3, #0
 800cac8:	75fb      	strb	r3, [r7, #23]
    break;
 800caca:	e013      	b.n	800caf4 <USBH_CtlReq+0xa4>
    else if (status == USBH_NOT_SUPPORTED)
 800cacc:	7dfb      	ldrb	r3, [r7, #23]
 800cace:	2b03      	cmp	r3, #3
 800cad0:	d108      	bne.n	800cae4 <USBH_CtlReq+0x94>
      phost->RequestState = CMD_SEND;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	2201      	movs	r2, #1
 800cad6:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	2200      	movs	r2, #0
 800cadc:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800cade:	2303      	movs	r3, #3
 800cae0:	75fb      	strb	r3, [r7, #23]
    break;
 800cae2:	e007      	b.n	800caf4 <USBH_CtlReq+0xa4>
      if (status == USBH_FAIL)
 800cae4:	7dfb      	ldrb	r3, [r7, #23]
 800cae6:	2b02      	cmp	r3, #2
 800cae8:	d104      	bne.n	800caf4 <USBH_CtlReq+0xa4>
        phost->RequestState = CMD_SEND;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	2201      	movs	r2, #1
 800caee:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800caf0:	2302      	movs	r3, #2
 800caf2:	75fb      	strb	r3, [r7, #23]
    break;
 800caf4:	bf00      	nop
  }
  return status;
 800caf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800caf8:	4618      	mov	r0, r3
 800cafa:	3718      	adds	r7, #24
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}

0800cb00 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b086      	sub	sp, #24
 800cb04:	af02      	add	r7, sp, #8
 800cb06:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800cb08:	2301      	movs	r3, #1
 800cb0a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	7e1b      	ldrb	r3, [r3, #24]
 800cb14:	3b01      	subs	r3, #1
 800cb16:	2b0a      	cmp	r3, #10
 800cb18:	f200 821d 	bhi.w	800cf56 <USBH_HandleControl+0x456>
 800cb1c:	a201      	add	r2, pc, #4	; (adr r2, 800cb24 <USBH_HandleControl+0x24>)
 800cb1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb22:	bf00      	nop
 800cb24:	0800cb51 	.word	0x0800cb51
 800cb28:	0800cb6b 	.word	0x0800cb6b
 800cb2c:	0800cc0d 	.word	0x0800cc0d
 800cb30:	0800cc33 	.word	0x0800cc33
 800cb34:	0800ccbf 	.word	0x0800ccbf
 800cb38:	0800cce9 	.word	0x0800cce9
 800cb3c:	0800cdab 	.word	0x0800cdab
 800cb40:	0800cdcd 	.word	0x0800cdcd
 800cb44:	0800ce5f 	.word	0x0800ce5f
 800cb48:	0800ce85 	.word	0x0800ce85
 800cb4c:	0800cf17 	.word	0x0800cf17
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f103 0110 	add.w	r1, r3, #16
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	795b      	ldrb	r3, [r3, #5]
 800cb5a:	461a      	mov	r2, r3
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f000 fa0b 	bl	800cf78 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2202      	movs	r2, #2
 800cb66:	761a      	strb	r2, [r3, #24]
    break;
 800cb68:	e200      	b.n	800cf6c <USBH_HandleControl+0x46c>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	795b      	ldrb	r3, [r3, #5]
 800cb6e:	4619      	mov	r1, r3
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f009 fcad 	bl	80164d0 <USBH_LL_GetURBState>
 800cb76:	4603      	mov	r3, r0
 800cb78:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800cb7a:	7bbb      	ldrb	r3, [r7, #14]
 800cb7c:	2b01      	cmp	r3, #1
 800cb7e:	d12c      	bne.n	800cbda <USBH_HandleControl+0xda>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	7c1b      	ldrb	r3, [r3, #16]
 800cb84:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cb88:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	8adb      	ldrh	r3, [r3, #22]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d00a      	beq.n	800cba8 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 800cb92:	7b7b      	ldrb	r3, [r7, #13]
 800cb94:	2b80      	cmp	r3, #128	; 0x80
 800cb96:	d103      	bne.n	800cba0 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2203      	movs	r2, #3
 800cb9c:	761a      	strb	r2, [r3, #24]
 800cb9e:	e00d      	b.n	800cbbc <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2205      	movs	r2, #5
 800cba4:	761a      	strb	r2, [r3, #24]
 800cba6:	e009      	b.n	800cbbc <USBH_HandleControl+0xbc>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 800cba8:	7b7b      	ldrb	r3, [r7, #13]
 800cbaa:	2b80      	cmp	r3, #128	; 0x80
 800cbac:	d103      	bne.n	800cbb6 <USBH_HandleControl+0xb6>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2209      	movs	r2, #9
 800cbb2:	761a      	strb	r2, [r3, #24]
 800cbb4:	e002      	b.n	800cbbc <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2207      	movs	r2, #7
 800cbba:	761a      	strb	r2, [r3, #24]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2203      	movs	r2, #3
 800cbc0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	4619      	mov	r1, r3
 800cbd4:	f003 fca2 	bl	801051c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800cbd8:	e1bf      	b.n	800cf5a <USBH_HandleControl+0x45a>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800cbda:	7bbb      	ldrb	r3, [r7, #14]
 800cbdc:	2b04      	cmp	r3, #4
 800cbde:	d003      	beq.n	800cbe8 <USBH_HandleControl+0xe8>
 800cbe0:	7bbb      	ldrb	r3, [r7, #14]
 800cbe2:	2b02      	cmp	r3, #2
 800cbe4:	f040 81b9 	bne.w	800cf5a <USBH_HandleControl+0x45a>
        phost->Control.state = CTRL_ERROR;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	220b      	movs	r2, #11
 800cbec:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2203      	movs	r2, #3
 800cbf2:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cc02:	2200      	movs	r2, #0
 800cc04:	4619      	mov	r1, r3
 800cc06:	f003 fc89 	bl	801051c <osMessagePut>
    break;
 800cc0a:	e1a6      	b.n	800cf5a <USBH_HandleControl+0x45a>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800cc12:	b29a      	uxth	r2, r3
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	6899      	ldr	r1, [r3, #8]
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	899a      	ldrh	r2, [r3, #12]
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	791b      	ldrb	r3, [r3, #4]
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f000 f9e6 	bl	800cff6 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	2204      	movs	r2, #4
 800cc2e:	761a      	strb	r2, [r3, #24]
    break;
 800cc30:	e19c      	b.n	800cf6c <USBH_HandleControl+0x46c>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	791b      	ldrb	r3, [r3, #4]
 800cc36:	4619      	mov	r1, r3
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f009 fc49 	bl	80164d0 <USBH_LL_GetURBState>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800cc42:	7bbb      	ldrb	r3, [r7, #14]
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	d110      	bne.n	800cc6a <USBH_HandleControl+0x16a>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2209      	movs	r2, #9
 800cc4c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2203      	movs	r2, #3
 800cc52:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cc62:	2200      	movs	r2, #0
 800cc64:	4619      	mov	r1, r3
 800cc66:	f003 fc59 	bl	801051c <osMessagePut>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800cc6a:	7bbb      	ldrb	r3, [r7, #14]
 800cc6c:	2b05      	cmp	r3, #5
 800cc6e:	d110      	bne.n	800cc92 <USBH_HandleControl+0x192>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 800cc70:	2303      	movs	r3, #3
 800cc72:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2203      	movs	r2, #3
 800cc78:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cc88:	2200      	movs	r2, #0
 800cc8a:	4619      	mov	r1, r3
 800cc8c:	f003 fc46 	bl	801051c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800cc90:	e165      	b.n	800cf5e <USBH_HandleControl+0x45e>
      if (URB_Status == USBH_URB_ERROR)
 800cc92:	7bbb      	ldrb	r3, [r7, #14]
 800cc94:	2b04      	cmp	r3, #4
 800cc96:	f040 8162 	bne.w	800cf5e <USBH_HandleControl+0x45e>
        phost->Control.state = CTRL_ERROR;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	220b      	movs	r2, #11
 800cc9e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2203      	movs	r2, #3
 800cca4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	4619      	mov	r1, r3
 800ccb8:	f003 fc30 	bl	801051c <osMessagePut>
    break;
 800ccbc:	e14f      	b.n	800cf5e <USBH_HandleControl+0x45e>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6899      	ldr	r1, [r3, #8]
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	899a      	ldrh	r2, [r3, #12]
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	795b      	ldrb	r3, [r3, #5]
 800ccca:	2001      	movs	r0, #1
 800cccc:	9000      	str	r0, [sp, #0]
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f000 f96c 	bl	800cfac <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800ccda:	b29a      	uxth	r2, r3
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2206      	movs	r2, #6
 800cce4:	761a      	strb	r2, [r3, #24]
    break;
 800cce6:	e141      	b.n	800cf6c <USBH_HandleControl+0x46c>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	795b      	ldrb	r3, [r3, #5]
 800ccec:	4619      	mov	r1, r3
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f009 fbee 	bl	80164d0 <USBH_LL_GetURBState>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 800ccf8:	7bbb      	ldrb	r3, [r7, #14]
 800ccfa:	2b01      	cmp	r3, #1
 800ccfc:	d111      	bne.n	800cd22 <USBH_HandleControl+0x222>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2207      	movs	r2, #7
 800cd02:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2203      	movs	r2, #3
 800cd08:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cd18:	2200      	movs	r2, #0
 800cd1a:	4619      	mov	r1, r3
 800cd1c:	f003 fbfe 	bl	801051c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800cd20:	e11f      	b.n	800cf62 <USBH_HandleControl+0x462>
    else if  (URB_Status == USBH_URB_STALL)
 800cd22:	7bbb      	ldrb	r3, [r7, #14]
 800cd24:	2b05      	cmp	r3, #5
 800cd26:	d113      	bne.n	800cd50 <USBH_HandleControl+0x250>
      phost->Control.state = CTRL_STALLED;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	220c      	movs	r2, #12
 800cd2c:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800cd2e:	2303      	movs	r3, #3
 800cd30:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2203      	movs	r2, #3
 800cd36:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cd46:	2200      	movs	r2, #0
 800cd48:	4619      	mov	r1, r3
 800cd4a:	f003 fbe7 	bl	801051c <osMessagePut>
    break;
 800cd4e:	e108      	b.n	800cf62 <USBH_HandleControl+0x462>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800cd50:	7bbb      	ldrb	r3, [r7, #14]
 800cd52:	2b02      	cmp	r3, #2
 800cd54:	d111      	bne.n	800cd7a <USBH_HandleControl+0x27a>
      phost->Control.state = CTRL_DATA_OUT;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2205      	movs	r2, #5
 800cd5a:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	2203      	movs	r2, #3
 800cd60:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cd70:	2200      	movs	r2, #0
 800cd72:	4619      	mov	r1, r3
 800cd74:	f003 fbd2 	bl	801051c <osMessagePut>
    break;
 800cd78:	e0f3      	b.n	800cf62 <USBH_HandleControl+0x462>
      if (URB_Status == USBH_URB_ERROR)
 800cd7a:	7bbb      	ldrb	r3, [r7, #14]
 800cd7c:	2b04      	cmp	r3, #4
 800cd7e:	f040 80f0 	bne.w	800cf62 <USBH_HandleControl+0x462>
        phost->Control.state = CTRL_ERROR;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	220b      	movs	r2, #11
 800cd86:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 800cd88:	2302      	movs	r3, #2
 800cd8a:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2203      	movs	r2, #3
 800cd90:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cda0:	2200      	movs	r2, #0
 800cda2:	4619      	mov	r1, r3
 800cda4:	f003 fbba 	bl	801051c <osMessagePut>
    break;
 800cda8:	e0db      	b.n	800cf62 <USBH_HandleControl+0x462>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	791b      	ldrb	r3, [r3, #4]
 800cdae:	2200      	movs	r2, #0
 800cdb0:	2100      	movs	r1, #0
 800cdb2:	6878      	ldr	r0, [r7, #4]
 800cdb4:	f000 f91f 	bl	800cff6 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800cdbe:	b29a      	uxth	r2, r3
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2208      	movs	r2, #8
 800cdc8:	761a      	strb	r2, [r3, #24]

    break;
 800cdca:	e0cf      	b.n	800cf6c <USBH_HandleControl+0x46c>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	791b      	ldrb	r3, [r3, #4]
 800cdd0:	4619      	mov	r1, r3
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f009 fb7c 	bl	80164d0 <USBH_LL_GetURBState>
 800cdd8:	4603      	mov	r3, r0
 800cdda:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 800cddc:	7bbb      	ldrb	r3, [r7, #14]
 800cdde:	2b01      	cmp	r3, #1
 800cde0:	d113      	bne.n	800ce0a <USBH_HandleControl+0x30a>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	220d      	movs	r2, #13
 800cde6:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800cde8:	2300      	movs	r3, #0
 800cdea:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2203      	movs	r2, #3
 800cdf0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ce00:	2200      	movs	r2, #0
 800ce02:	4619      	mov	r1, r3
 800ce04:	f003 fb8a 	bl	801051c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800ce08:	e0ad      	b.n	800cf66 <USBH_HandleControl+0x466>
    else if (URB_Status == USBH_URB_ERROR)
 800ce0a:	7bbb      	ldrb	r3, [r7, #14]
 800ce0c:	2b04      	cmp	r3, #4
 800ce0e:	d111      	bne.n	800ce34 <USBH_HandleControl+0x334>
      phost->Control.state = CTRL_ERROR;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	220b      	movs	r2, #11
 800ce14:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	2203      	movs	r2, #3
 800ce1a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	4619      	mov	r1, r3
 800ce2e:	f003 fb75 	bl	801051c <osMessagePut>
    break;
 800ce32:	e098      	b.n	800cf66 <USBH_HandleControl+0x466>
      if(URB_Status == USBH_URB_STALL)
 800ce34:	7bbb      	ldrb	r3, [r7, #14]
 800ce36:	2b05      	cmp	r3, #5
 800ce38:	f040 8095 	bne.w	800cf66 <USBH_HandleControl+0x466>
        status = USBH_NOT_SUPPORTED;
 800ce3c:	2303      	movs	r3, #3
 800ce3e:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2203      	movs	r2, #3
 800ce44:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ce54:	2200      	movs	r2, #0
 800ce56:	4619      	mov	r1, r3
 800ce58:	f003 fb60 	bl	801051c <osMessagePut>
    break;
 800ce5c:	e083      	b.n	800cf66 <USBH_HandleControl+0x466>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	795b      	ldrb	r3, [r3, #5]
 800ce62:	2201      	movs	r2, #1
 800ce64:	9200      	str	r2, [sp, #0]
 800ce66:	2200      	movs	r2, #0
 800ce68:	2100      	movs	r1, #0
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f000 f89e 	bl	800cfac <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800ce76:	b29a      	uxth	r2, r3
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	220a      	movs	r2, #10
 800ce80:	761a      	strb	r2, [r3, #24]
    break;
 800ce82:	e073      	b.n	800cf6c <USBH_HandleControl+0x46c>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	795b      	ldrb	r3, [r3, #5]
 800ce88:	4619      	mov	r1, r3
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f009 fb20 	bl	80164d0 <USBH_LL_GetURBState>
 800ce90:	4603      	mov	r3, r0
 800ce92:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800ce94:	7bbb      	ldrb	r3, [r7, #14]
 800ce96:	2b01      	cmp	r3, #1
 800ce98:	d113      	bne.n	800cec2 <USBH_HandleControl+0x3c2>
    {
      status = USBH_OK;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	220d      	movs	r2, #13
 800cea2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2203      	movs	r2, #3
 800cea8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ceb8:	2200      	movs	r2, #0
 800ceba:	4619      	mov	r1, r3
 800cebc:	f003 fb2e 	bl	801051c <osMessagePut>
#endif
#endif
      }

    }
    break;
 800cec0:	e053      	b.n	800cf6a <USBH_HandleControl+0x46a>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800cec2:	7bbb      	ldrb	r3, [r7, #14]
 800cec4:	2b02      	cmp	r3, #2
 800cec6:	d111      	bne.n	800ceec <USBH_HandleControl+0x3ec>
      phost->Control.state = CTRL_STATUS_OUT;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2209      	movs	r2, #9
 800cecc:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2203      	movs	r2, #3
 800ced2:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cee2:	2200      	movs	r2, #0
 800cee4:	4619      	mov	r1, r3
 800cee6:	f003 fb19 	bl	801051c <osMessagePut>
    break;
 800ceea:	e03e      	b.n	800cf6a <USBH_HandleControl+0x46a>
      if (URB_Status == USBH_URB_ERROR)
 800ceec:	7bbb      	ldrb	r3, [r7, #14]
 800ceee:	2b04      	cmp	r3, #4
 800cef0:	d13b      	bne.n	800cf6a <USBH_HandleControl+0x46a>
        phost->Control.state = CTRL_ERROR;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	220b      	movs	r2, #11
 800cef6:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2203      	movs	r2, #3
 800cefc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	4619      	mov	r1, r3
 800cf10:	f003 fb04 	bl	801051c <osMessagePut>
    break;
 800cf14:	e029      	b.n	800cf6a <USBH_HandleControl+0x46a>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	7e5b      	ldrb	r3, [r3, #25]
 800cf1a:	3301      	adds	r3, #1
 800cf1c:	b2da      	uxtb	r2, r3
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	765a      	strb	r2, [r3, #25]
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	7e5b      	ldrb	r3, [r3, #25]
 800cf26:	2b02      	cmp	r3, #2
 800cf28:	d809      	bhi.n	800cf3e <USBH_HandleControl+0x43e>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800cf2a:	6878      	ldr	r0, [r7, #4]
 800cf2c:	f009 f9e1 	bl	80162f2 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2201      	movs	r2, #1
 800cf34:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2201      	movs	r2, #1
 800cf3a:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 800cf3c:	e016      	b.n	800cf6c <USBH_HandleControl+0x46c>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800cf44:	2106      	movs	r1, #6
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 800cf50:	2302      	movs	r3, #2
 800cf52:	73fb      	strb	r3, [r7, #15]
    break;
 800cf54:	e00a      	b.n	800cf6c <USBH_HandleControl+0x46c>

  default:
    break;
 800cf56:	bf00      	nop
 800cf58:	e008      	b.n	800cf6c <USBH_HandleControl+0x46c>
    break;
 800cf5a:	bf00      	nop
 800cf5c:	e006      	b.n	800cf6c <USBH_HandleControl+0x46c>
    break;
 800cf5e:	bf00      	nop
 800cf60:	e004      	b.n	800cf6c <USBH_HandleControl+0x46c>
    break;
 800cf62:	bf00      	nop
 800cf64:	e002      	b.n	800cf6c <USBH_HandleControl+0x46c>
    break;
 800cf66:	bf00      	nop
 800cf68:	e000      	b.n	800cf6c <USBH_HandleControl+0x46c>
    break;
 800cf6a:	bf00      	nop
  }
  return status;
 800cf6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf6e:	4618      	mov	r0, r3
 800cf70:	3710      	adds	r7, #16
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bd80      	pop	{r7, pc}
 800cf76:	bf00      	nop

0800cf78 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b088      	sub	sp, #32
 800cf7c:	af04      	add	r7, sp, #16
 800cf7e:	60f8      	str	r0, [r7, #12]
 800cf80:	60b9      	str	r1, [r7, #8]
 800cf82:	4613      	mov	r3, r2
 800cf84:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800cf86:	79f9      	ldrb	r1, [r7, #7]
 800cf88:	2300      	movs	r3, #0
 800cf8a:	9303      	str	r3, [sp, #12]
 800cf8c:	2308      	movs	r3, #8
 800cf8e:	9302      	str	r3, [sp, #8]
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	9301      	str	r3, [sp, #4]
 800cf94:	2300      	movs	r3, #0
 800cf96:	9300      	str	r3, [sp, #0]
 800cf98:	2300      	movs	r3, #0
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	68f8      	ldr	r0, [r7, #12]
 800cf9e:	f009 fa66 	bl	801646e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800cfa2:	2300      	movs	r3, #0
}
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	3710      	adds	r7, #16
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd80      	pop	{r7, pc}

0800cfac <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b088      	sub	sp, #32
 800cfb0:	af04      	add	r7, sp, #16
 800cfb2:	60f8      	str	r0, [r7, #12]
 800cfb4:	60b9      	str	r1, [r7, #8]
 800cfb6:	4611      	mov	r1, r2
 800cfb8:	461a      	mov	r2, r3
 800cfba:	460b      	mov	r3, r1
 800cfbc:	80fb      	strh	r3, [r7, #6]
 800cfbe:	4613      	mov	r3, r2
 800cfc0:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d001      	beq.n	800cfd0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800cfcc:	2300      	movs	r3, #0
 800cfce:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800cfd0:	7979      	ldrb	r1, [r7, #5]
 800cfd2:	7e3b      	ldrb	r3, [r7, #24]
 800cfd4:	9303      	str	r3, [sp, #12]
 800cfd6:	88fb      	ldrh	r3, [r7, #6]
 800cfd8:	9302      	str	r3, [sp, #8]
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	9301      	str	r3, [sp, #4]
 800cfde:	2301      	movs	r3, #1
 800cfe0:	9300      	str	r3, [sp, #0]
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	68f8      	ldr	r0, [r7, #12]
 800cfe8:	f009 fa41 	bl	801646e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800cfec:	2300      	movs	r3, #0
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	3710      	adds	r7, #16
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}

0800cff6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800cff6:	b580      	push	{r7, lr}
 800cff8:	b088      	sub	sp, #32
 800cffa:	af04      	add	r7, sp, #16
 800cffc:	60f8      	str	r0, [r7, #12]
 800cffe:	60b9      	str	r1, [r7, #8]
 800d000:	4611      	mov	r1, r2
 800d002:	461a      	mov	r2, r3
 800d004:	460b      	mov	r3, r1
 800d006:	80fb      	strh	r3, [r7, #6]
 800d008:	4613      	mov	r3, r2
 800d00a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800d00c:	7979      	ldrb	r1, [r7, #5]
 800d00e:	2300      	movs	r3, #0
 800d010:	9303      	str	r3, [sp, #12]
 800d012:	88fb      	ldrh	r3, [r7, #6]
 800d014:	9302      	str	r3, [sp, #8]
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	9301      	str	r3, [sp, #4]
 800d01a:	2301      	movs	r3, #1
 800d01c:	9300      	str	r3, [sp, #0]
 800d01e:	2300      	movs	r3, #0
 800d020:	2201      	movs	r2, #1
 800d022:	68f8      	ldr	r0, [r7, #12]
 800d024:	f009 fa23 	bl	801646e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d028:	2300      	movs	r3, #0

}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3710      	adds	r7, #16
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}

0800d032 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 800d032:	b580      	push	{r7, lr}
 800d034:	b088      	sub	sp, #32
 800d036:	af04      	add	r7, sp, #16
 800d038:	60f8      	str	r0, [r7, #12]
 800d03a:	60b9      	str	r1, [r7, #8]
 800d03c:	4611      	mov	r1, r2
 800d03e:	461a      	mov	r2, r3
 800d040:	460b      	mov	r3, r1
 800d042:	80fb      	strh	r3, [r7, #6]
 800d044:	4613      	mov	r3, r2
 800d046:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d001      	beq.n	800d056 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d052:	2300      	movs	r3, #0
 800d054:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800d056:	7979      	ldrb	r1, [r7, #5]
 800d058:	7e3b      	ldrb	r3, [r7, #24]
 800d05a:	9303      	str	r3, [sp, #12]
 800d05c:	88fb      	ldrh	r3, [r7, #6]
 800d05e:	9302      	str	r3, [sp, #8]
 800d060:	68bb      	ldr	r3, [r7, #8]
 800d062:	9301      	str	r3, [sp, #4]
 800d064:	2301      	movs	r3, #1
 800d066:	9300      	str	r3, [sp, #0]
 800d068:	2302      	movs	r3, #2
 800d06a:	2200      	movs	r2, #0
 800d06c:	68f8      	ldr	r0, [r7, #12]
 800d06e:	f009 f9fe 	bl	801646e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d072:	2300      	movs	r3, #0
}
 800d074:	4618      	mov	r0, r3
 800d076:	3710      	adds	r7, #16
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd80      	pop	{r7, pc}

0800d07c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b088      	sub	sp, #32
 800d080:	af04      	add	r7, sp, #16
 800d082:	60f8      	str	r0, [r7, #12]
 800d084:	60b9      	str	r1, [r7, #8]
 800d086:	4611      	mov	r1, r2
 800d088:	461a      	mov	r2, r3
 800d08a:	460b      	mov	r3, r1
 800d08c:	80fb      	strh	r3, [r7, #6]
 800d08e:	4613      	mov	r3, r2
 800d090:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800d092:	7979      	ldrb	r1, [r7, #5]
 800d094:	2300      	movs	r3, #0
 800d096:	9303      	str	r3, [sp, #12]
 800d098:	88fb      	ldrh	r3, [r7, #6]
 800d09a:	9302      	str	r3, [sp, #8]
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	9301      	str	r3, [sp, #4]
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	9300      	str	r3, [sp, #0]
 800d0a4:	2302      	movs	r3, #2
 800d0a6:	2201      	movs	r2, #1
 800d0a8:	68f8      	ldr	r0, [r7, #12]
 800d0aa:	f009 f9e0 	bl	801646e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d0ae:	2300      	movs	r3, #0
}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	3710      	adds	r7, #16
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}

0800d0b8 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b086      	sub	sp, #24
 800d0bc:	af04      	add	r7, sp, #16
 800d0be:	6078      	str	r0, [r7, #4]
 800d0c0:	4608      	mov	r0, r1
 800d0c2:	4611      	mov	r1, r2
 800d0c4:	461a      	mov	r2, r3
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	70fb      	strb	r3, [r7, #3]
 800d0ca:	460b      	mov	r3, r1
 800d0cc:	70bb      	strb	r3, [r7, #2]
 800d0ce:	4613      	mov	r3, r2
 800d0d0:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800d0d2:	7878      	ldrb	r0, [r7, #1]
 800d0d4:	78ba      	ldrb	r2, [r7, #2]
 800d0d6:	78f9      	ldrb	r1, [r7, #3]
 800d0d8:	8b3b      	ldrh	r3, [r7, #24]
 800d0da:	9302      	str	r3, [sp, #8]
 800d0dc:	7d3b      	ldrb	r3, [r7, #20]
 800d0de:	9301      	str	r3, [sp, #4]
 800d0e0:	7c3b      	ldrb	r3, [r7, #16]
 800d0e2:	9300      	str	r3, [sp, #0]
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	6878      	ldr	r0, [r7, #4]
 800d0e8:	f009 f973 	bl	80163d2 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 800d0ec:	2300      	movs	r3, #0

}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	3708      	adds	r7, #8
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}

0800d0f6 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800d0f6:	b580      	push	{r7, lr}
 800d0f8:	b082      	sub	sp, #8
 800d0fa:	af00      	add	r7, sp, #0
 800d0fc:	6078      	str	r0, [r7, #4]
 800d0fe:	460b      	mov	r3, r1
 800d100:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 800d102:	78fb      	ldrb	r3, [r7, #3]
 800d104:	4619      	mov	r1, r3
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f009 f992 	bl	8016430 <USBH_LL_ClosePipe>

  return USBH_OK;
 800d10c:	2300      	movs	r3, #0

}
 800d10e:	4618      	mov	r0, r3
 800d110:	3708      	adds	r7, #8
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}

0800d116 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d116:	b580      	push	{r7, lr}
 800d118:	b084      	sub	sp, #16
 800d11a:	af00      	add	r7, sp, #0
 800d11c:	6078      	str	r0, [r7, #4]
 800d11e:	460b      	mov	r3, r1
 800d120:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f000 f831 	bl	800d18a <USBH_GetFreePipe>
 800d128:	4603      	mov	r3, r0
 800d12a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d12c:	89fb      	ldrh	r3, [r7, #14]
 800d12e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d132:	4293      	cmp	r3, r2
 800d134:	d007      	beq.n	800d146 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800d136:	78fb      	ldrb	r3, [r7, #3]
 800d138:	89fa      	ldrh	r2, [r7, #14]
 800d13a:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	32e0      	adds	r2, #224	; 0xe0
 800d142:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 800d146:	89fb      	ldrh	r3, [r7, #14]
 800d148:	b2db      	uxtb	r3, r3
}
 800d14a:	4618      	mov	r0, r3
 800d14c:	3710      	adds	r7, #16
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd80      	pop	{r7, pc}

0800d152 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d152:	b480      	push	{r7}
 800d154:	b083      	sub	sp, #12
 800d156:	af00      	add	r7, sp, #0
 800d158:	6078      	str	r0, [r7, #4]
 800d15a:	460b      	mov	r3, r1
 800d15c:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 800d15e:	78fb      	ldrb	r3, [r7, #3]
 800d160:	2b0a      	cmp	r3, #10
 800d162:	d80b      	bhi.n	800d17c <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 800d164:	78fa      	ldrb	r2, [r7, #3]
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	32e0      	adds	r2, #224	; 0xe0
 800d16a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d16e:	78fa      	ldrb	r2, [r7, #3]
 800d170:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	32e0      	adds	r2, #224	; 0xe0
 800d178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 800d17c:	2300      	movs	r3, #0
}
 800d17e:	4618      	mov	r0, r3
 800d180:	370c      	adds	r7, #12
 800d182:	46bd      	mov	sp, r7
 800d184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d188:	4770      	bx	lr

0800d18a <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 800d18a:	b480      	push	{r7}
 800d18c:	b085      	sub	sp, #20
 800d18e:	af00      	add	r7, sp, #0
 800d190:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d192:	2300      	movs	r3, #0
 800d194:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800d196:	2300      	movs	r3, #0
 800d198:	73fb      	strb	r3, [r7, #15]
 800d19a:	e00e      	b.n	800d1ba <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d19c:	7bfa      	ldrb	r2, [r7, #15]
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	32e0      	adds	r2, #224	; 0xe0
 800d1a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d102      	bne.n	800d1b4 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 800d1ae:	7bfb      	ldrb	r3, [r7, #15]
 800d1b0:	b29b      	uxth	r3, r3
 800d1b2:	e007      	b.n	800d1c4 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800d1b4:	7bfb      	ldrb	r3, [r7, #15]
 800d1b6:	3301      	adds	r3, #1
 800d1b8:	73fb      	strb	r3, [r7, #15]
 800d1ba:	7bfb      	ldrb	r3, [r7, #15]
 800d1bc:	2b0a      	cmp	r3, #10
 800d1be:	d9ed      	bls.n	800d19c <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 800d1c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	3714      	adds	r7, #20
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ce:	4770      	bx	lr

0800d1d0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b084      	sub	sp, #16
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d1da:	79fb      	ldrb	r3, [r7, #7]
 800d1dc:	4a08      	ldr	r2, [pc, #32]	; (800d200 <disk_status+0x30>)
 800d1de:	009b      	lsls	r3, r3, #2
 800d1e0:	4413      	add	r3, r2
 800d1e2:	685b      	ldr	r3, [r3, #4]
 800d1e4:	685b      	ldr	r3, [r3, #4]
 800d1e6:	79fa      	ldrb	r2, [r7, #7]
 800d1e8:	4905      	ldr	r1, [pc, #20]	; (800d200 <disk_status+0x30>)
 800d1ea:	440a      	add	r2, r1
 800d1ec:	7a12      	ldrb	r2, [r2, #8]
 800d1ee:	4610      	mov	r0, r2
 800d1f0:	4798      	blx	r3
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d1f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	3710      	adds	r7, #16
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}
 800d200:	200000dc 	.word	0x200000dc

0800d204 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b084      	sub	sp, #16
 800d208:	af00      	add	r7, sp, #0
 800d20a:	4603      	mov	r3, r0
 800d20c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d20e:	2300      	movs	r3, #0
 800d210:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d212:	79fb      	ldrb	r3, [r7, #7]
 800d214:	4a0d      	ldr	r2, [pc, #52]	; (800d24c <disk_initialize+0x48>)
 800d216:	5cd3      	ldrb	r3, [r2, r3]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d111      	bne.n	800d240 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d21c:	79fb      	ldrb	r3, [r7, #7]
 800d21e:	4a0b      	ldr	r2, [pc, #44]	; (800d24c <disk_initialize+0x48>)
 800d220:	2101      	movs	r1, #1
 800d222:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d224:	79fb      	ldrb	r3, [r7, #7]
 800d226:	4a09      	ldr	r2, [pc, #36]	; (800d24c <disk_initialize+0x48>)
 800d228:	009b      	lsls	r3, r3, #2
 800d22a:	4413      	add	r3, r2
 800d22c:	685b      	ldr	r3, [r3, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	79fa      	ldrb	r2, [r7, #7]
 800d232:	4906      	ldr	r1, [pc, #24]	; (800d24c <disk_initialize+0x48>)
 800d234:	440a      	add	r2, r1
 800d236:	7a12      	ldrb	r2, [r2, #8]
 800d238:	4610      	mov	r0, r2
 800d23a:	4798      	blx	r3
 800d23c:	4603      	mov	r3, r0
 800d23e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d240:	7bfb      	ldrb	r3, [r7, #15]
}
 800d242:	4618      	mov	r0, r3
 800d244:	3710      	adds	r7, #16
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}
 800d24a:	bf00      	nop
 800d24c:	200000dc 	.word	0x200000dc

0800d250 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d250:	b590      	push	{r4, r7, lr}
 800d252:	b087      	sub	sp, #28
 800d254:	af00      	add	r7, sp, #0
 800d256:	60b9      	str	r1, [r7, #8]
 800d258:	607a      	str	r2, [r7, #4]
 800d25a:	603b      	str	r3, [r7, #0]
 800d25c:	4603      	mov	r3, r0
 800d25e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d260:	7bfb      	ldrb	r3, [r7, #15]
 800d262:	4a0a      	ldr	r2, [pc, #40]	; (800d28c <disk_read+0x3c>)
 800d264:	009b      	lsls	r3, r3, #2
 800d266:	4413      	add	r3, r2
 800d268:	685b      	ldr	r3, [r3, #4]
 800d26a:	689c      	ldr	r4, [r3, #8]
 800d26c:	7bfb      	ldrb	r3, [r7, #15]
 800d26e:	4a07      	ldr	r2, [pc, #28]	; (800d28c <disk_read+0x3c>)
 800d270:	4413      	add	r3, r2
 800d272:	7a18      	ldrb	r0, [r3, #8]
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	687a      	ldr	r2, [r7, #4]
 800d278:	68b9      	ldr	r1, [r7, #8]
 800d27a:	47a0      	blx	r4
 800d27c:	4603      	mov	r3, r0
 800d27e:	75fb      	strb	r3, [r7, #23]
  return res;
 800d280:	7dfb      	ldrb	r3, [r7, #23]
}
 800d282:	4618      	mov	r0, r3
 800d284:	371c      	adds	r7, #28
 800d286:	46bd      	mov	sp, r7
 800d288:	bd90      	pop	{r4, r7, pc}
 800d28a:	bf00      	nop
 800d28c:	200000dc 	.word	0x200000dc

0800d290 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d290:	b590      	push	{r4, r7, lr}
 800d292:	b087      	sub	sp, #28
 800d294:	af00      	add	r7, sp, #0
 800d296:	60b9      	str	r1, [r7, #8]
 800d298:	607a      	str	r2, [r7, #4]
 800d29a:	603b      	str	r3, [r7, #0]
 800d29c:	4603      	mov	r3, r0
 800d29e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d2a0:	7bfb      	ldrb	r3, [r7, #15]
 800d2a2:	4a0a      	ldr	r2, [pc, #40]	; (800d2cc <disk_write+0x3c>)
 800d2a4:	009b      	lsls	r3, r3, #2
 800d2a6:	4413      	add	r3, r2
 800d2a8:	685b      	ldr	r3, [r3, #4]
 800d2aa:	68dc      	ldr	r4, [r3, #12]
 800d2ac:	7bfb      	ldrb	r3, [r7, #15]
 800d2ae:	4a07      	ldr	r2, [pc, #28]	; (800d2cc <disk_write+0x3c>)
 800d2b0:	4413      	add	r3, r2
 800d2b2:	7a18      	ldrb	r0, [r3, #8]
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	687a      	ldr	r2, [r7, #4]
 800d2b8:	68b9      	ldr	r1, [r7, #8]
 800d2ba:	47a0      	blx	r4
 800d2bc:	4603      	mov	r3, r0
 800d2be:	75fb      	strb	r3, [r7, #23]
  return res;
 800d2c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	371c      	adds	r7, #28
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd90      	pop	{r4, r7, pc}
 800d2ca:	bf00      	nop
 800d2cc:	200000dc 	.word	0x200000dc

0800d2d0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b084      	sub	sp, #16
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	603a      	str	r2, [r7, #0]
 800d2da:	71fb      	strb	r3, [r7, #7]
 800d2dc:	460b      	mov	r3, r1
 800d2de:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d2e0:	79fb      	ldrb	r3, [r7, #7]
 800d2e2:	4a09      	ldr	r2, [pc, #36]	; (800d308 <disk_ioctl+0x38>)
 800d2e4:	009b      	lsls	r3, r3, #2
 800d2e6:	4413      	add	r3, r2
 800d2e8:	685b      	ldr	r3, [r3, #4]
 800d2ea:	691b      	ldr	r3, [r3, #16]
 800d2ec:	79fa      	ldrb	r2, [r7, #7]
 800d2ee:	4906      	ldr	r1, [pc, #24]	; (800d308 <disk_ioctl+0x38>)
 800d2f0:	440a      	add	r2, r1
 800d2f2:	7a10      	ldrb	r0, [r2, #8]
 800d2f4:	79b9      	ldrb	r1, [r7, #6]
 800d2f6:	683a      	ldr	r2, [r7, #0]
 800d2f8:	4798      	blx	r3
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	73fb      	strb	r3, [r7, #15]
  return res;
 800d2fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800d300:	4618      	mov	r0, r3
 800d302:	3710      	adds	r7, #16
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}
 800d308:	200000dc 	.word	0x200000dc

0800d30c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d30c:	b480      	push	{r7}
 800d30e:	b085      	sub	sp, #20
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	3301      	adds	r3, #1
 800d318:	781b      	ldrb	r3, [r3, #0]
 800d31a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d31c:	89fb      	ldrh	r3, [r7, #14]
 800d31e:	021b      	lsls	r3, r3, #8
 800d320:	b21a      	sxth	r2, r3
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	781b      	ldrb	r3, [r3, #0]
 800d326:	b21b      	sxth	r3, r3
 800d328:	4313      	orrs	r3, r2
 800d32a:	b21b      	sxth	r3, r3
 800d32c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d32e:	89fb      	ldrh	r3, [r7, #14]
}
 800d330:	4618      	mov	r0, r3
 800d332:	3714      	adds	r7, #20
 800d334:	46bd      	mov	sp, r7
 800d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33a:	4770      	bx	lr

0800d33c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d33c:	b480      	push	{r7}
 800d33e:	b085      	sub	sp, #20
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	3303      	adds	r3, #3
 800d348:	781b      	ldrb	r3, [r3, #0]
 800d34a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	021b      	lsls	r3, r3, #8
 800d350:	687a      	ldr	r2, [r7, #4]
 800d352:	3202      	adds	r2, #2
 800d354:	7812      	ldrb	r2, [r2, #0]
 800d356:	4313      	orrs	r3, r2
 800d358:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	021b      	lsls	r3, r3, #8
 800d35e:	687a      	ldr	r2, [r7, #4]
 800d360:	3201      	adds	r2, #1
 800d362:	7812      	ldrb	r2, [r2, #0]
 800d364:	4313      	orrs	r3, r2
 800d366:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	021b      	lsls	r3, r3, #8
 800d36c:	687a      	ldr	r2, [r7, #4]
 800d36e:	7812      	ldrb	r2, [r2, #0]
 800d370:	4313      	orrs	r3, r2
 800d372:	60fb      	str	r3, [r7, #12]
	return rv;
 800d374:	68fb      	ldr	r3, [r7, #12]
}
 800d376:	4618      	mov	r0, r3
 800d378:	3714      	adds	r7, #20
 800d37a:	46bd      	mov	sp, r7
 800d37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d380:	4770      	bx	lr

0800d382 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d382:	b480      	push	{r7}
 800d384:	b083      	sub	sp, #12
 800d386:	af00      	add	r7, sp, #0
 800d388:	6078      	str	r0, [r7, #4]
 800d38a:	460b      	mov	r3, r1
 800d38c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	1c5a      	adds	r2, r3, #1
 800d392:	607a      	str	r2, [r7, #4]
 800d394:	887a      	ldrh	r2, [r7, #2]
 800d396:	b2d2      	uxtb	r2, r2
 800d398:	701a      	strb	r2, [r3, #0]
 800d39a:	887b      	ldrh	r3, [r7, #2]
 800d39c:	0a1b      	lsrs	r3, r3, #8
 800d39e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	1c5a      	adds	r2, r3, #1
 800d3a4:	607a      	str	r2, [r7, #4]
 800d3a6:	887a      	ldrh	r2, [r7, #2]
 800d3a8:	b2d2      	uxtb	r2, r2
 800d3aa:	701a      	strb	r2, [r3, #0]
}
 800d3ac:	bf00      	nop
 800d3ae:	370c      	adds	r7, #12
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b6:	4770      	bx	lr

0800d3b8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	b083      	sub	sp, #12
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
 800d3c0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	1c5a      	adds	r2, r3, #1
 800d3c6:	607a      	str	r2, [r7, #4]
 800d3c8:	683a      	ldr	r2, [r7, #0]
 800d3ca:	b2d2      	uxtb	r2, r2
 800d3cc:	701a      	strb	r2, [r3, #0]
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	0a1b      	lsrs	r3, r3, #8
 800d3d2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	1c5a      	adds	r2, r3, #1
 800d3d8:	607a      	str	r2, [r7, #4]
 800d3da:	683a      	ldr	r2, [r7, #0]
 800d3dc:	b2d2      	uxtb	r2, r2
 800d3de:	701a      	strb	r2, [r3, #0]
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	0a1b      	lsrs	r3, r3, #8
 800d3e4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	1c5a      	adds	r2, r3, #1
 800d3ea:	607a      	str	r2, [r7, #4]
 800d3ec:	683a      	ldr	r2, [r7, #0]
 800d3ee:	b2d2      	uxtb	r2, r2
 800d3f0:	701a      	strb	r2, [r3, #0]
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	0a1b      	lsrs	r3, r3, #8
 800d3f6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	1c5a      	adds	r2, r3, #1
 800d3fc:	607a      	str	r2, [r7, #4]
 800d3fe:	683a      	ldr	r2, [r7, #0]
 800d400:	b2d2      	uxtb	r2, r2
 800d402:	701a      	strb	r2, [r3, #0]
}
 800d404:	bf00      	nop
 800d406:	370c      	adds	r7, #12
 800d408:	46bd      	mov	sp, r7
 800d40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40e:	4770      	bx	lr

0800d410 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d410:	b480      	push	{r7}
 800d412:	b087      	sub	sp, #28
 800d414:	af00      	add	r7, sp, #0
 800d416:	60f8      	str	r0, [r7, #12]
 800d418:	60b9      	str	r1, [r7, #8]
 800d41a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d00d      	beq.n	800d446 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d42a:	693a      	ldr	r2, [r7, #16]
 800d42c:	1c53      	adds	r3, r2, #1
 800d42e:	613b      	str	r3, [r7, #16]
 800d430:	697b      	ldr	r3, [r7, #20]
 800d432:	1c59      	adds	r1, r3, #1
 800d434:	6179      	str	r1, [r7, #20]
 800d436:	7812      	ldrb	r2, [r2, #0]
 800d438:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	3b01      	subs	r3, #1
 800d43e:	607b      	str	r3, [r7, #4]
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d1f1      	bne.n	800d42a <mem_cpy+0x1a>
	}
}
 800d446:	bf00      	nop
 800d448:	371c      	adds	r7, #28
 800d44a:	46bd      	mov	sp, r7
 800d44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d450:	4770      	bx	lr

0800d452 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d452:	b480      	push	{r7}
 800d454:	b087      	sub	sp, #28
 800d456:	af00      	add	r7, sp, #0
 800d458:	60f8      	str	r0, [r7, #12]
 800d45a:	60b9      	str	r1, [r7, #8]
 800d45c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	1c5a      	adds	r2, r3, #1
 800d466:	617a      	str	r2, [r7, #20]
 800d468:	68ba      	ldr	r2, [r7, #8]
 800d46a:	b2d2      	uxtb	r2, r2
 800d46c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	3b01      	subs	r3, #1
 800d472:	607b      	str	r3, [r7, #4]
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d1f3      	bne.n	800d462 <mem_set+0x10>
}
 800d47a:	bf00      	nop
 800d47c:	bf00      	nop
 800d47e:	371c      	adds	r7, #28
 800d480:	46bd      	mov	sp, r7
 800d482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d486:	4770      	bx	lr

0800d488 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d488:	b480      	push	{r7}
 800d48a:	b089      	sub	sp, #36	; 0x24
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	60f8      	str	r0, [r7, #12]
 800d490:	60b9      	str	r1, [r7, #8]
 800d492:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	61fb      	str	r3, [r7, #28]
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d49c:	2300      	movs	r3, #0
 800d49e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d4a0:	69fb      	ldr	r3, [r7, #28]
 800d4a2:	1c5a      	adds	r2, r3, #1
 800d4a4:	61fa      	str	r2, [r7, #28]
 800d4a6:	781b      	ldrb	r3, [r3, #0]
 800d4a8:	4619      	mov	r1, r3
 800d4aa:	69bb      	ldr	r3, [r7, #24]
 800d4ac:	1c5a      	adds	r2, r3, #1
 800d4ae:	61ba      	str	r2, [r7, #24]
 800d4b0:	781b      	ldrb	r3, [r3, #0]
 800d4b2:	1acb      	subs	r3, r1, r3
 800d4b4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	3b01      	subs	r3, #1
 800d4ba:	607b      	str	r3, [r7, #4]
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d002      	beq.n	800d4c8 <mem_cmp+0x40>
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d0eb      	beq.n	800d4a0 <mem_cmp+0x18>

	return r;
 800d4c8:	697b      	ldr	r3, [r7, #20]
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3724      	adds	r7, #36	; 0x24
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d4:	4770      	bx	lr

0800d4d6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d4d6:	b480      	push	{r7}
 800d4d8:	b083      	sub	sp, #12
 800d4da:	af00      	add	r7, sp, #0
 800d4dc:	6078      	str	r0, [r7, #4]
 800d4de:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d4e0:	e002      	b.n	800d4e8 <chk_chr+0x12>
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	3301      	adds	r3, #1
 800d4e6:	607b      	str	r3, [r7, #4]
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	781b      	ldrb	r3, [r3, #0]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d005      	beq.n	800d4fc <chk_chr+0x26>
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	781b      	ldrb	r3, [r3, #0]
 800d4f4:	461a      	mov	r2, r3
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	4293      	cmp	r3, r2
 800d4fa:	d1f2      	bne.n	800d4e2 <chk_chr+0xc>
	return *str;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	781b      	ldrb	r3, [r3, #0]
}
 800d500:	4618      	mov	r0, r3
 800d502:	370c      	adds	r7, #12
 800d504:	46bd      	mov	sp, r7
 800d506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50a:	4770      	bx	lr

0800d50c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b082      	sub	sp, #8
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d009      	beq.n	800d52e <lock_fs+0x22>
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	68db      	ldr	r3, [r3, #12]
 800d51e:	4618      	mov	r0, r3
 800d520:	f002 fe85 	bl	801022e <ff_req_grant>
 800d524:	4603      	mov	r3, r0
 800d526:	2b00      	cmp	r3, #0
 800d528:	d001      	beq.n	800d52e <lock_fs+0x22>
 800d52a:	2301      	movs	r3, #1
 800d52c:	e000      	b.n	800d530 <lock_fs+0x24>
 800d52e:	2300      	movs	r3, #0
}
 800d530:	4618      	mov	r0, r3
 800d532:	3708      	adds	r7, #8
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}

0800d538 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b082      	sub	sp, #8
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
 800d540:	460b      	mov	r3, r1
 800d542:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d00d      	beq.n	800d566 <unlock_fs+0x2e>
 800d54a:	78fb      	ldrb	r3, [r7, #3]
 800d54c:	2b0c      	cmp	r3, #12
 800d54e:	d00a      	beq.n	800d566 <unlock_fs+0x2e>
 800d550:	78fb      	ldrb	r3, [r7, #3]
 800d552:	2b0b      	cmp	r3, #11
 800d554:	d007      	beq.n	800d566 <unlock_fs+0x2e>
 800d556:	78fb      	ldrb	r3, [r7, #3]
 800d558:	2b0f      	cmp	r3, #15
 800d55a:	d004      	beq.n	800d566 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	68db      	ldr	r3, [r3, #12]
 800d560:	4618      	mov	r0, r3
 800d562:	f002 fe79 	bl	8010258 <ff_rel_grant>
	}
}
 800d566:	bf00      	nop
 800d568:	3708      	adds	r7, #8
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}
	...

0800d570 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d570:	b480      	push	{r7}
 800d572:	b085      	sub	sp, #20
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
 800d578:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d57a:	2300      	movs	r3, #0
 800d57c:	60bb      	str	r3, [r7, #8]
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	60fb      	str	r3, [r7, #12]
 800d582:	e029      	b.n	800d5d8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d584:	4a27      	ldr	r2, [pc, #156]	; (800d624 <chk_lock+0xb4>)
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	011b      	lsls	r3, r3, #4
 800d58a:	4413      	add	r3, r2
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d01d      	beq.n	800d5ce <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d592:	4a24      	ldr	r2, [pc, #144]	; (800d624 <chk_lock+0xb4>)
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	011b      	lsls	r3, r3, #4
 800d598:	4413      	add	r3, r2
 800d59a:	681a      	ldr	r2, [r3, #0]
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	429a      	cmp	r2, r3
 800d5a2:	d116      	bne.n	800d5d2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d5a4:	4a1f      	ldr	r2, [pc, #124]	; (800d624 <chk_lock+0xb4>)
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	011b      	lsls	r3, r3, #4
 800d5aa:	4413      	add	r3, r2
 800d5ac:	3304      	adds	r3, #4
 800d5ae:	681a      	ldr	r2, [r3, #0]
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d10c      	bne.n	800d5d2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d5b8:	4a1a      	ldr	r2, [pc, #104]	; (800d624 <chk_lock+0xb4>)
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	011b      	lsls	r3, r3, #4
 800d5be:	4413      	add	r3, r2
 800d5c0:	3308      	adds	r3, #8
 800d5c2:	681a      	ldr	r2, [r3, #0]
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d5c8:	429a      	cmp	r2, r3
 800d5ca:	d102      	bne.n	800d5d2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d5cc:	e007      	b.n	800d5de <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	3301      	adds	r3, #1
 800d5d6:	60fb      	str	r3, [r7, #12]
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	2b01      	cmp	r3, #1
 800d5dc:	d9d2      	bls.n	800d584 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	2b02      	cmp	r3, #2
 800d5e2:	d109      	bne.n	800d5f8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d102      	bne.n	800d5f0 <chk_lock+0x80>
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	2b02      	cmp	r3, #2
 800d5ee:	d101      	bne.n	800d5f4 <chk_lock+0x84>
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	e010      	b.n	800d616 <chk_lock+0xa6>
 800d5f4:	2312      	movs	r3, #18
 800d5f6:	e00e      	b.n	800d616 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d108      	bne.n	800d610 <chk_lock+0xa0>
 800d5fe:	4a09      	ldr	r2, [pc, #36]	; (800d624 <chk_lock+0xb4>)
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	011b      	lsls	r3, r3, #4
 800d604:	4413      	add	r3, r2
 800d606:	330c      	adds	r3, #12
 800d608:	881b      	ldrh	r3, [r3, #0]
 800d60a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d60e:	d101      	bne.n	800d614 <chk_lock+0xa4>
 800d610:	2310      	movs	r3, #16
 800d612:	e000      	b.n	800d616 <chk_lock+0xa6>
 800d614:	2300      	movs	r3, #0
}
 800d616:	4618      	mov	r0, r3
 800d618:	3714      	adds	r7, #20
 800d61a:	46bd      	mov	sp, r7
 800d61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d620:	4770      	bx	lr
 800d622:	bf00      	nop
 800d624:	200000bc 	.word	0x200000bc

0800d628 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d628:	b480      	push	{r7}
 800d62a:	b083      	sub	sp, #12
 800d62c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d62e:	2300      	movs	r3, #0
 800d630:	607b      	str	r3, [r7, #4]
 800d632:	e002      	b.n	800d63a <enq_lock+0x12>
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	3301      	adds	r3, #1
 800d638:	607b      	str	r3, [r7, #4]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2b01      	cmp	r3, #1
 800d63e:	d806      	bhi.n	800d64e <enq_lock+0x26>
 800d640:	4a09      	ldr	r2, [pc, #36]	; (800d668 <enq_lock+0x40>)
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	011b      	lsls	r3, r3, #4
 800d646:	4413      	add	r3, r2
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d1f2      	bne.n	800d634 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2b02      	cmp	r3, #2
 800d652:	bf14      	ite	ne
 800d654:	2301      	movne	r3, #1
 800d656:	2300      	moveq	r3, #0
 800d658:	b2db      	uxtb	r3, r3
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	370c      	adds	r7, #12
 800d65e:	46bd      	mov	sp, r7
 800d660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d664:	4770      	bx	lr
 800d666:	bf00      	nop
 800d668:	200000bc 	.word	0x200000bc

0800d66c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d66c:	b480      	push	{r7}
 800d66e:	b085      	sub	sp, #20
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
 800d674:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d676:	2300      	movs	r3, #0
 800d678:	60fb      	str	r3, [r7, #12]
 800d67a:	e01f      	b.n	800d6bc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d67c:	4a41      	ldr	r2, [pc, #260]	; (800d784 <inc_lock+0x118>)
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	011b      	lsls	r3, r3, #4
 800d682:	4413      	add	r3, r2
 800d684:	681a      	ldr	r2, [r3, #0]
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	429a      	cmp	r2, r3
 800d68c:	d113      	bne.n	800d6b6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d68e:	4a3d      	ldr	r2, [pc, #244]	; (800d784 <inc_lock+0x118>)
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	011b      	lsls	r3, r3, #4
 800d694:	4413      	add	r3, r2
 800d696:	3304      	adds	r3, #4
 800d698:	681a      	ldr	r2, [r3, #0]
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	d109      	bne.n	800d6b6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d6a2:	4a38      	ldr	r2, [pc, #224]	; (800d784 <inc_lock+0x118>)
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	011b      	lsls	r3, r3, #4
 800d6a8:	4413      	add	r3, r2
 800d6aa:	3308      	adds	r3, #8
 800d6ac:	681a      	ldr	r2, [r3, #0]
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d6b2:	429a      	cmp	r2, r3
 800d6b4:	d006      	beq.n	800d6c4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	3301      	adds	r3, #1
 800d6ba:	60fb      	str	r3, [r7, #12]
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	2b01      	cmp	r3, #1
 800d6c0:	d9dc      	bls.n	800d67c <inc_lock+0x10>
 800d6c2:	e000      	b.n	800d6c6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d6c4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	2b02      	cmp	r3, #2
 800d6ca:	d132      	bne.n	800d732 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	60fb      	str	r3, [r7, #12]
 800d6d0:	e002      	b.n	800d6d8 <inc_lock+0x6c>
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	3301      	adds	r3, #1
 800d6d6:	60fb      	str	r3, [r7, #12]
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	2b01      	cmp	r3, #1
 800d6dc:	d806      	bhi.n	800d6ec <inc_lock+0x80>
 800d6de:	4a29      	ldr	r2, [pc, #164]	; (800d784 <inc_lock+0x118>)
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	011b      	lsls	r3, r3, #4
 800d6e4:	4413      	add	r3, r2
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d1f2      	bne.n	800d6d2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	2b02      	cmp	r3, #2
 800d6f0:	d101      	bne.n	800d6f6 <inc_lock+0x8a>
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	e040      	b.n	800d778 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681a      	ldr	r2, [r3, #0]
 800d6fa:	4922      	ldr	r1, [pc, #136]	; (800d784 <inc_lock+0x118>)
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	011b      	lsls	r3, r3, #4
 800d700:	440b      	add	r3, r1
 800d702:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	689a      	ldr	r2, [r3, #8]
 800d708:	491e      	ldr	r1, [pc, #120]	; (800d784 <inc_lock+0x118>)
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	011b      	lsls	r3, r3, #4
 800d70e:	440b      	add	r3, r1
 800d710:	3304      	adds	r3, #4
 800d712:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	695a      	ldr	r2, [r3, #20]
 800d718:	491a      	ldr	r1, [pc, #104]	; (800d784 <inc_lock+0x118>)
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	011b      	lsls	r3, r3, #4
 800d71e:	440b      	add	r3, r1
 800d720:	3308      	adds	r3, #8
 800d722:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d724:	4a17      	ldr	r2, [pc, #92]	; (800d784 <inc_lock+0x118>)
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	011b      	lsls	r3, r3, #4
 800d72a:	4413      	add	r3, r2
 800d72c:	330c      	adds	r3, #12
 800d72e:	2200      	movs	r2, #0
 800d730:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d009      	beq.n	800d74c <inc_lock+0xe0>
 800d738:	4a12      	ldr	r2, [pc, #72]	; (800d784 <inc_lock+0x118>)
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	011b      	lsls	r3, r3, #4
 800d73e:	4413      	add	r3, r2
 800d740:	330c      	adds	r3, #12
 800d742:	881b      	ldrh	r3, [r3, #0]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d001      	beq.n	800d74c <inc_lock+0xe0>
 800d748:	2300      	movs	r3, #0
 800d74a:	e015      	b.n	800d778 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d108      	bne.n	800d764 <inc_lock+0xf8>
 800d752:	4a0c      	ldr	r2, [pc, #48]	; (800d784 <inc_lock+0x118>)
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	011b      	lsls	r3, r3, #4
 800d758:	4413      	add	r3, r2
 800d75a:	330c      	adds	r3, #12
 800d75c:	881b      	ldrh	r3, [r3, #0]
 800d75e:	3301      	adds	r3, #1
 800d760:	b29a      	uxth	r2, r3
 800d762:	e001      	b.n	800d768 <inc_lock+0xfc>
 800d764:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d768:	4906      	ldr	r1, [pc, #24]	; (800d784 <inc_lock+0x118>)
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	011b      	lsls	r3, r3, #4
 800d76e:	440b      	add	r3, r1
 800d770:	330c      	adds	r3, #12
 800d772:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	3301      	adds	r3, #1
}
 800d778:	4618      	mov	r0, r3
 800d77a:	3714      	adds	r7, #20
 800d77c:	46bd      	mov	sp, r7
 800d77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d782:	4770      	bx	lr
 800d784:	200000bc 	.word	0x200000bc

0800d788 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d788:	b480      	push	{r7}
 800d78a:	b085      	sub	sp, #20
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	3b01      	subs	r3, #1
 800d794:	607b      	str	r3, [r7, #4]
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2b01      	cmp	r3, #1
 800d79a:	d825      	bhi.n	800d7e8 <dec_lock+0x60>
		n = Files[i].ctr;
 800d79c:	4a17      	ldr	r2, [pc, #92]	; (800d7fc <dec_lock+0x74>)
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	011b      	lsls	r3, r3, #4
 800d7a2:	4413      	add	r3, r2
 800d7a4:	330c      	adds	r3, #12
 800d7a6:	881b      	ldrh	r3, [r3, #0]
 800d7a8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d7aa:	89fb      	ldrh	r3, [r7, #14]
 800d7ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7b0:	d101      	bne.n	800d7b6 <dec_lock+0x2e>
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d7b6:	89fb      	ldrh	r3, [r7, #14]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d002      	beq.n	800d7c2 <dec_lock+0x3a>
 800d7bc:	89fb      	ldrh	r3, [r7, #14]
 800d7be:	3b01      	subs	r3, #1
 800d7c0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d7c2:	4a0e      	ldr	r2, [pc, #56]	; (800d7fc <dec_lock+0x74>)
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	011b      	lsls	r3, r3, #4
 800d7c8:	4413      	add	r3, r2
 800d7ca:	330c      	adds	r3, #12
 800d7cc:	89fa      	ldrh	r2, [r7, #14]
 800d7ce:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d7d0:	89fb      	ldrh	r3, [r7, #14]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d105      	bne.n	800d7e2 <dec_lock+0x5a>
 800d7d6:	4a09      	ldr	r2, [pc, #36]	; (800d7fc <dec_lock+0x74>)
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	011b      	lsls	r3, r3, #4
 800d7dc:	4413      	add	r3, r2
 800d7de:	2200      	movs	r2, #0
 800d7e0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	737b      	strb	r3, [r7, #13]
 800d7e6:	e001      	b.n	800d7ec <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d7e8:	2302      	movs	r3, #2
 800d7ea:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d7ec:	7b7b      	ldrb	r3, [r7, #13]
}
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	3714      	adds	r7, #20
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f8:	4770      	bx	lr
 800d7fa:	bf00      	nop
 800d7fc:	200000bc 	.word	0x200000bc

0800d800 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d800:	b480      	push	{r7}
 800d802:	b085      	sub	sp, #20
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d808:	2300      	movs	r3, #0
 800d80a:	60fb      	str	r3, [r7, #12]
 800d80c:	e010      	b.n	800d830 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d80e:	4a0d      	ldr	r2, [pc, #52]	; (800d844 <clear_lock+0x44>)
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	011b      	lsls	r3, r3, #4
 800d814:	4413      	add	r3, r2
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	687a      	ldr	r2, [r7, #4]
 800d81a:	429a      	cmp	r2, r3
 800d81c:	d105      	bne.n	800d82a <clear_lock+0x2a>
 800d81e:	4a09      	ldr	r2, [pc, #36]	; (800d844 <clear_lock+0x44>)
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	011b      	lsls	r3, r3, #4
 800d824:	4413      	add	r3, r2
 800d826:	2200      	movs	r2, #0
 800d828:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	3301      	adds	r3, #1
 800d82e:	60fb      	str	r3, [r7, #12]
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	2b01      	cmp	r3, #1
 800d834:	d9eb      	bls.n	800d80e <clear_lock+0xe>
	}
}
 800d836:	bf00      	nop
 800d838:	bf00      	nop
 800d83a:	3714      	adds	r7, #20
 800d83c:	46bd      	mov	sp, r7
 800d83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d842:	4770      	bx	lr
 800d844:	200000bc 	.word	0x200000bc

0800d848 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b086      	sub	sp, #24
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d850:	2300      	movs	r3, #0
 800d852:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	78db      	ldrb	r3, [r3, #3]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d034      	beq.n	800d8c6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d860:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	7858      	ldrb	r0, [r3, #1]
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d86c:	2301      	movs	r3, #1
 800d86e:	697a      	ldr	r2, [r7, #20]
 800d870:	f7ff fd0e 	bl	800d290 <disk_write>
 800d874:	4603      	mov	r3, r0
 800d876:	2b00      	cmp	r3, #0
 800d878:	d002      	beq.n	800d880 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d87a:	2301      	movs	r3, #1
 800d87c:	73fb      	strb	r3, [r7, #15]
 800d87e:	e022      	b.n	800d8c6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2200      	movs	r2, #0
 800d884:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d88a:	697a      	ldr	r2, [r7, #20]
 800d88c:	1ad2      	subs	r2, r2, r3
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	69db      	ldr	r3, [r3, #28]
 800d892:	429a      	cmp	r2, r3
 800d894:	d217      	bcs.n	800d8c6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	789b      	ldrb	r3, [r3, #2]
 800d89a:	613b      	str	r3, [r7, #16]
 800d89c:	e010      	b.n	800d8c0 <sync_window+0x78>
					wsect += fs->fsize;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	69db      	ldr	r3, [r3, #28]
 800d8a2:	697a      	ldr	r2, [r7, #20]
 800d8a4:	4413      	add	r3, r2
 800d8a6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	7858      	ldrb	r0, [r3, #1]
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	697a      	ldr	r2, [r7, #20]
 800d8b6:	f7ff fceb 	bl	800d290 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d8ba:	693b      	ldr	r3, [r7, #16]
 800d8bc:	3b01      	subs	r3, #1
 800d8be:	613b      	str	r3, [r7, #16]
 800d8c0:	693b      	ldr	r3, [r7, #16]
 800d8c2:	2b01      	cmp	r3, #1
 800d8c4:	d8eb      	bhi.n	800d89e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d8c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3718      	adds	r7, #24
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}

0800d8d0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b084      	sub	sp, #16
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
 800d8d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8e2:	683a      	ldr	r2, [r7, #0]
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d01b      	beq.n	800d920 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d8e8:	6878      	ldr	r0, [r7, #4]
 800d8ea:	f7ff ffad 	bl	800d848 <sync_window>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d8f2:	7bfb      	ldrb	r3, [r7, #15]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d113      	bne.n	800d920 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	7858      	ldrb	r0, [r3, #1]
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d902:	2301      	movs	r3, #1
 800d904:	683a      	ldr	r2, [r7, #0]
 800d906:	f7ff fca3 	bl	800d250 <disk_read>
 800d90a:	4603      	mov	r3, r0
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d004      	beq.n	800d91a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d910:	f04f 33ff 	mov.w	r3, #4294967295
 800d914:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d916:	2301      	movs	r3, #1
 800d918:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	683a      	ldr	r2, [r7, #0]
 800d91e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800d920:	7bfb      	ldrb	r3, [r7, #15]
}
 800d922:	4618      	mov	r0, r3
 800d924:	3710      	adds	r7, #16
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}
	...

0800d92c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b084      	sub	sp, #16
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f7ff ff87 	bl	800d848 <sync_window>
 800d93a:	4603      	mov	r3, r0
 800d93c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d93e:	7bfb      	ldrb	r3, [r7, #15]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d158      	bne.n	800d9f6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	781b      	ldrb	r3, [r3, #0]
 800d948:	2b03      	cmp	r3, #3
 800d94a:	d148      	bne.n	800d9de <sync_fs+0xb2>
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	791b      	ldrb	r3, [r3, #4]
 800d950:	2b01      	cmp	r3, #1
 800d952:	d144      	bne.n	800d9de <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	3334      	adds	r3, #52	; 0x34
 800d958:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d95c:	2100      	movs	r1, #0
 800d95e:	4618      	mov	r0, r3
 800d960:	f7ff fd77 	bl	800d452 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	3334      	adds	r3, #52	; 0x34
 800d968:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d96c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d970:	4618      	mov	r0, r3
 800d972:	f7ff fd06 	bl	800d382 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	3334      	adds	r3, #52	; 0x34
 800d97a:	4921      	ldr	r1, [pc, #132]	; (800da00 <sync_fs+0xd4>)
 800d97c:	4618      	mov	r0, r3
 800d97e:	f7ff fd1b 	bl	800d3b8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	3334      	adds	r3, #52	; 0x34
 800d986:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d98a:	491e      	ldr	r1, [pc, #120]	; (800da04 <sync_fs+0xd8>)
 800d98c:	4618      	mov	r0, r3
 800d98e:	f7ff fd13 	bl	800d3b8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	3334      	adds	r3, #52	; 0x34
 800d996:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	695b      	ldr	r3, [r3, #20]
 800d99e:	4619      	mov	r1, r3
 800d9a0:	4610      	mov	r0, r2
 800d9a2:	f7ff fd09 	bl	800d3b8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	3334      	adds	r3, #52	; 0x34
 800d9aa:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	691b      	ldr	r3, [r3, #16]
 800d9b2:	4619      	mov	r1, r3
 800d9b4:	4610      	mov	r0, r2
 800d9b6:	f7ff fcff 	bl	800d3b8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6a1b      	ldr	r3, [r3, #32]
 800d9be:	1c5a      	adds	r2, r3, #1
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	7858      	ldrb	r0, [r3, #1]
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	f7ff fc5c 	bl	800d290 <disk_write>
			fs->fsi_flag = 0;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2200      	movs	r2, #0
 800d9dc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	785b      	ldrb	r3, [r3, #1]
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	2100      	movs	r1, #0
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f7ff fc72 	bl	800d2d0 <disk_ioctl>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d001      	beq.n	800d9f6 <sync_fs+0xca>
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d9f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	3710      	adds	r7, #16
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}
 800da00:	41615252 	.word	0x41615252
 800da04:	61417272 	.word	0x61417272

0800da08 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800da08:	b480      	push	{r7}
 800da0a:	b083      	sub	sp, #12
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
 800da10:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	3b02      	subs	r3, #2
 800da16:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	699b      	ldr	r3, [r3, #24]
 800da1c:	3b02      	subs	r3, #2
 800da1e:	683a      	ldr	r2, [r7, #0]
 800da20:	429a      	cmp	r2, r3
 800da22:	d301      	bcc.n	800da28 <clust2sect+0x20>
 800da24:	2300      	movs	r3, #0
 800da26:	e008      	b.n	800da3a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	895b      	ldrh	r3, [r3, #10]
 800da2c:	461a      	mov	r2, r3
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	fb03 f202 	mul.w	r2, r3, r2
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da38:	4413      	add	r3, r2
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	370c      	adds	r7, #12
 800da3e:	46bd      	mov	sp, r7
 800da40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da44:	4770      	bx	lr

0800da46 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800da46:	b580      	push	{r7, lr}
 800da48:	b086      	sub	sp, #24
 800da4a:	af00      	add	r7, sp, #0
 800da4c:	6078      	str	r0, [r7, #4]
 800da4e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	2b01      	cmp	r3, #1
 800da5a:	d904      	bls.n	800da66 <get_fat+0x20>
 800da5c:	693b      	ldr	r3, [r7, #16]
 800da5e:	699b      	ldr	r3, [r3, #24]
 800da60:	683a      	ldr	r2, [r7, #0]
 800da62:	429a      	cmp	r2, r3
 800da64:	d302      	bcc.n	800da6c <get_fat+0x26>
		val = 1;	/* Internal error */
 800da66:	2301      	movs	r3, #1
 800da68:	617b      	str	r3, [r7, #20]
 800da6a:	e08f      	b.n	800db8c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800da6c:	f04f 33ff 	mov.w	r3, #4294967295
 800da70:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800da72:	693b      	ldr	r3, [r7, #16]
 800da74:	781b      	ldrb	r3, [r3, #0]
 800da76:	2b03      	cmp	r3, #3
 800da78:	d062      	beq.n	800db40 <get_fat+0xfa>
 800da7a:	2b03      	cmp	r3, #3
 800da7c:	dc7c      	bgt.n	800db78 <get_fat+0x132>
 800da7e:	2b01      	cmp	r3, #1
 800da80:	d002      	beq.n	800da88 <get_fat+0x42>
 800da82:	2b02      	cmp	r3, #2
 800da84:	d042      	beq.n	800db0c <get_fat+0xc6>
 800da86:	e077      	b.n	800db78 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	60fb      	str	r3, [r7, #12]
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	085b      	lsrs	r3, r3, #1
 800da90:	68fa      	ldr	r2, [r7, #12]
 800da92:	4413      	add	r3, r2
 800da94:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800da96:	693b      	ldr	r3, [r7, #16]
 800da98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	0a5b      	lsrs	r3, r3, #9
 800da9e:	4413      	add	r3, r2
 800daa0:	4619      	mov	r1, r3
 800daa2:	6938      	ldr	r0, [r7, #16]
 800daa4:	f7ff ff14 	bl	800d8d0 <move_window>
 800daa8:	4603      	mov	r3, r0
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d167      	bne.n	800db7e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	1c5a      	adds	r2, r3, #1
 800dab2:	60fa      	str	r2, [r7, #12]
 800dab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dab8:	693a      	ldr	r2, [r7, #16]
 800daba:	4413      	add	r3, r2
 800dabc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dac0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dac2:	693b      	ldr	r3, [r7, #16]
 800dac4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	0a5b      	lsrs	r3, r3, #9
 800daca:	4413      	add	r3, r2
 800dacc:	4619      	mov	r1, r3
 800dace:	6938      	ldr	r0, [r7, #16]
 800dad0:	f7ff fefe 	bl	800d8d0 <move_window>
 800dad4:	4603      	mov	r3, r0
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d153      	bne.n	800db82 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dae0:	693a      	ldr	r2, [r7, #16]
 800dae2:	4413      	add	r3, r2
 800dae4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dae8:	021b      	lsls	r3, r3, #8
 800daea:	461a      	mov	r2, r3
 800daec:	68bb      	ldr	r3, [r7, #8]
 800daee:	4313      	orrs	r3, r2
 800daf0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	f003 0301 	and.w	r3, r3, #1
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d002      	beq.n	800db02 <get_fat+0xbc>
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	091b      	lsrs	r3, r3, #4
 800db00:	e002      	b.n	800db08 <get_fat+0xc2>
 800db02:	68bb      	ldr	r3, [r7, #8]
 800db04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800db08:	617b      	str	r3, [r7, #20]
			break;
 800db0a:	e03f      	b.n	800db8c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800db0c:	693b      	ldr	r3, [r7, #16]
 800db0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	0a1b      	lsrs	r3, r3, #8
 800db14:	4413      	add	r3, r2
 800db16:	4619      	mov	r1, r3
 800db18:	6938      	ldr	r0, [r7, #16]
 800db1a:	f7ff fed9 	bl	800d8d0 <move_window>
 800db1e:	4603      	mov	r3, r0
 800db20:	2b00      	cmp	r3, #0
 800db22:	d130      	bne.n	800db86 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	005b      	lsls	r3, r3, #1
 800db2e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800db32:	4413      	add	r3, r2
 800db34:	4618      	mov	r0, r3
 800db36:	f7ff fbe9 	bl	800d30c <ld_word>
 800db3a:	4603      	mov	r3, r0
 800db3c:	617b      	str	r3, [r7, #20]
			break;
 800db3e:	e025      	b.n	800db8c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800db40:	693b      	ldr	r3, [r7, #16]
 800db42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	09db      	lsrs	r3, r3, #7
 800db48:	4413      	add	r3, r2
 800db4a:	4619      	mov	r1, r3
 800db4c:	6938      	ldr	r0, [r7, #16]
 800db4e:	f7ff febf 	bl	800d8d0 <move_window>
 800db52:	4603      	mov	r3, r0
 800db54:	2b00      	cmp	r3, #0
 800db56:	d118      	bne.n	800db8a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800db58:	693b      	ldr	r3, [r7, #16]
 800db5a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	009b      	lsls	r3, r3, #2
 800db62:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800db66:	4413      	add	r3, r2
 800db68:	4618      	mov	r0, r3
 800db6a:	f7ff fbe7 	bl	800d33c <ld_dword>
 800db6e:	4603      	mov	r3, r0
 800db70:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800db74:	617b      	str	r3, [r7, #20]
			break;
 800db76:	e009      	b.n	800db8c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800db78:	2301      	movs	r3, #1
 800db7a:	617b      	str	r3, [r7, #20]
 800db7c:	e006      	b.n	800db8c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800db7e:	bf00      	nop
 800db80:	e004      	b.n	800db8c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800db82:	bf00      	nop
 800db84:	e002      	b.n	800db8c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800db86:	bf00      	nop
 800db88:	e000      	b.n	800db8c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800db8a:	bf00      	nop
		}
	}

	return val;
 800db8c:	697b      	ldr	r3, [r7, #20]
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3718      	adds	r7, #24
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}

0800db96 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800db96:	b590      	push	{r4, r7, lr}
 800db98:	b089      	sub	sp, #36	; 0x24
 800db9a:	af00      	add	r7, sp, #0
 800db9c:	60f8      	str	r0, [r7, #12]
 800db9e:	60b9      	str	r1, [r7, #8]
 800dba0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800dba2:	2302      	movs	r3, #2
 800dba4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	2b01      	cmp	r3, #1
 800dbaa:	f240 80d2 	bls.w	800dd52 <put_fat+0x1bc>
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	699b      	ldr	r3, [r3, #24]
 800dbb2:	68ba      	ldr	r2, [r7, #8]
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	f080 80cc 	bcs.w	800dd52 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	781b      	ldrb	r3, [r3, #0]
 800dbbe:	2b03      	cmp	r3, #3
 800dbc0:	f000 8096 	beq.w	800dcf0 <put_fat+0x15a>
 800dbc4:	2b03      	cmp	r3, #3
 800dbc6:	f300 80cd 	bgt.w	800dd64 <put_fat+0x1ce>
 800dbca:	2b01      	cmp	r3, #1
 800dbcc:	d002      	beq.n	800dbd4 <put_fat+0x3e>
 800dbce:	2b02      	cmp	r3, #2
 800dbd0:	d06e      	beq.n	800dcb0 <put_fat+0x11a>
 800dbd2:	e0c7      	b.n	800dd64 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	61bb      	str	r3, [r7, #24]
 800dbd8:	69bb      	ldr	r3, [r7, #24]
 800dbda:	085b      	lsrs	r3, r3, #1
 800dbdc:	69ba      	ldr	r2, [r7, #24]
 800dbde:	4413      	add	r3, r2
 800dbe0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dbe6:	69bb      	ldr	r3, [r7, #24]
 800dbe8:	0a5b      	lsrs	r3, r3, #9
 800dbea:	4413      	add	r3, r2
 800dbec:	4619      	mov	r1, r3
 800dbee:	68f8      	ldr	r0, [r7, #12]
 800dbf0:	f7ff fe6e 	bl	800d8d0 <move_window>
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dbf8:	7ffb      	ldrb	r3, [r7, #31]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	f040 80ab 	bne.w	800dd56 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dc06:	69bb      	ldr	r3, [r7, #24]
 800dc08:	1c59      	adds	r1, r3, #1
 800dc0a:	61b9      	str	r1, [r7, #24]
 800dc0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc10:	4413      	add	r3, r2
 800dc12:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	f003 0301 	and.w	r3, r3, #1
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d00d      	beq.n	800dc3a <put_fat+0xa4>
 800dc1e:	697b      	ldr	r3, [r7, #20]
 800dc20:	781b      	ldrb	r3, [r3, #0]
 800dc22:	b25b      	sxtb	r3, r3
 800dc24:	f003 030f 	and.w	r3, r3, #15
 800dc28:	b25a      	sxtb	r2, r3
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	b2db      	uxtb	r3, r3
 800dc2e:	011b      	lsls	r3, r3, #4
 800dc30:	b25b      	sxtb	r3, r3
 800dc32:	4313      	orrs	r3, r2
 800dc34:	b25b      	sxtb	r3, r3
 800dc36:	b2db      	uxtb	r3, r3
 800dc38:	e001      	b.n	800dc3e <put_fat+0xa8>
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	b2db      	uxtb	r3, r3
 800dc3e:	697a      	ldr	r2, [r7, #20]
 800dc40:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	2201      	movs	r2, #1
 800dc46:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc4c:	69bb      	ldr	r3, [r7, #24]
 800dc4e:	0a5b      	lsrs	r3, r3, #9
 800dc50:	4413      	add	r3, r2
 800dc52:	4619      	mov	r1, r3
 800dc54:	68f8      	ldr	r0, [r7, #12]
 800dc56:	f7ff fe3b 	bl	800d8d0 <move_window>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dc5e:	7ffb      	ldrb	r3, [r7, #31]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d17a      	bne.n	800dd5a <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dc6a:	69bb      	ldr	r3, [r7, #24]
 800dc6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc70:	4413      	add	r3, r2
 800dc72:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800dc74:	68bb      	ldr	r3, [r7, #8]
 800dc76:	f003 0301 	and.w	r3, r3, #1
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d003      	beq.n	800dc86 <put_fat+0xf0>
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	091b      	lsrs	r3, r3, #4
 800dc82:	b2db      	uxtb	r3, r3
 800dc84:	e00e      	b.n	800dca4 <put_fat+0x10e>
 800dc86:	697b      	ldr	r3, [r7, #20]
 800dc88:	781b      	ldrb	r3, [r3, #0]
 800dc8a:	b25b      	sxtb	r3, r3
 800dc8c:	f023 030f 	bic.w	r3, r3, #15
 800dc90:	b25a      	sxtb	r2, r3
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	0a1b      	lsrs	r3, r3, #8
 800dc96:	b25b      	sxtb	r3, r3
 800dc98:	f003 030f 	and.w	r3, r3, #15
 800dc9c:	b25b      	sxtb	r3, r3
 800dc9e:	4313      	orrs	r3, r2
 800dca0:	b25b      	sxtb	r3, r3
 800dca2:	b2db      	uxtb	r3, r3
 800dca4:	697a      	ldr	r2, [r7, #20]
 800dca6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	2201      	movs	r2, #1
 800dcac:	70da      	strb	r2, [r3, #3]
			break;
 800dcae:	e059      	b.n	800dd64 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	0a1b      	lsrs	r3, r3, #8
 800dcb8:	4413      	add	r3, r2
 800dcba:	4619      	mov	r1, r3
 800dcbc:	68f8      	ldr	r0, [r7, #12]
 800dcbe:	f7ff fe07 	bl	800d8d0 <move_window>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dcc6:	7ffb      	ldrb	r3, [r7, #31]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d148      	bne.n	800dd5e <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dcd2:	68bb      	ldr	r3, [r7, #8]
 800dcd4:	005b      	lsls	r3, r3, #1
 800dcd6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800dcda:	4413      	add	r3, r2
 800dcdc:	687a      	ldr	r2, [r7, #4]
 800dcde:	b292      	uxth	r2, r2
 800dce0:	4611      	mov	r1, r2
 800dce2:	4618      	mov	r0, r3
 800dce4:	f7ff fb4d 	bl	800d382 <st_word>
			fs->wflag = 1;
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	2201      	movs	r2, #1
 800dcec:	70da      	strb	r2, [r3, #3]
			break;
 800dcee:	e039      	b.n	800dd64 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	09db      	lsrs	r3, r3, #7
 800dcf8:	4413      	add	r3, r2
 800dcfa:	4619      	mov	r1, r3
 800dcfc:	68f8      	ldr	r0, [r7, #12]
 800dcfe:	f7ff fde7 	bl	800d8d0 <move_window>
 800dd02:	4603      	mov	r3, r0
 800dd04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dd06:	7ffb      	ldrb	r3, [r7, #31]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d12a      	bne.n	800dd62 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	009b      	lsls	r3, r3, #2
 800dd1c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800dd20:	4413      	add	r3, r2
 800dd22:	4618      	mov	r0, r3
 800dd24:	f7ff fb0a 	bl	800d33c <ld_dword>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800dd2e:	4323      	orrs	r3, r4
 800dd30:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	009b      	lsls	r3, r3, #2
 800dd3c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800dd40:	4413      	add	r3, r2
 800dd42:	6879      	ldr	r1, [r7, #4]
 800dd44:	4618      	mov	r0, r3
 800dd46:	f7ff fb37 	bl	800d3b8 <st_dword>
			fs->wflag = 1;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	2201      	movs	r2, #1
 800dd4e:	70da      	strb	r2, [r3, #3]
			break;
 800dd50:	e008      	b.n	800dd64 <put_fat+0x1ce>
		}
	}
 800dd52:	bf00      	nop
 800dd54:	e006      	b.n	800dd64 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800dd56:	bf00      	nop
 800dd58:	e004      	b.n	800dd64 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800dd5a:	bf00      	nop
 800dd5c:	e002      	b.n	800dd64 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800dd5e:	bf00      	nop
 800dd60:	e000      	b.n	800dd64 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800dd62:	bf00      	nop
	return res;
 800dd64:	7ffb      	ldrb	r3, [r7, #31]
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	3724      	adds	r7, #36	; 0x24
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd90      	pop	{r4, r7, pc}

0800dd6e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800dd6e:	b580      	push	{r7, lr}
 800dd70:	b088      	sub	sp, #32
 800dd72:	af00      	add	r7, sp, #0
 800dd74:	60f8      	str	r0, [r7, #12]
 800dd76:	60b9      	str	r1, [r7, #8]
 800dd78:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800dd84:	68bb      	ldr	r3, [r7, #8]
 800dd86:	2b01      	cmp	r3, #1
 800dd88:	d904      	bls.n	800dd94 <remove_chain+0x26>
 800dd8a:	69bb      	ldr	r3, [r7, #24]
 800dd8c:	699b      	ldr	r3, [r3, #24]
 800dd8e:	68ba      	ldr	r2, [r7, #8]
 800dd90:	429a      	cmp	r2, r3
 800dd92:	d301      	bcc.n	800dd98 <remove_chain+0x2a>
 800dd94:	2302      	movs	r3, #2
 800dd96:	e04b      	b.n	800de30 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d00c      	beq.n	800ddb8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800dd9e:	f04f 32ff 	mov.w	r2, #4294967295
 800dda2:	6879      	ldr	r1, [r7, #4]
 800dda4:	69b8      	ldr	r0, [r7, #24]
 800dda6:	f7ff fef6 	bl	800db96 <put_fat>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ddae:	7ffb      	ldrb	r3, [r7, #31]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d001      	beq.n	800ddb8 <remove_chain+0x4a>
 800ddb4:	7ffb      	ldrb	r3, [r7, #31]
 800ddb6:	e03b      	b.n	800de30 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ddb8:	68b9      	ldr	r1, [r7, #8]
 800ddba:	68f8      	ldr	r0, [r7, #12]
 800ddbc:	f7ff fe43 	bl	800da46 <get_fat>
 800ddc0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ddc2:	697b      	ldr	r3, [r7, #20]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d031      	beq.n	800de2c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	2b01      	cmp	r3, #1
 800ddcc:	d101      	bne.n	800ddd2 <remove_chain+0x64>
 800ddce:	2302      	movs	r3, #2
 800ddd0:	e02e      	b.n	800de30 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddd8:	d101      	bne.n	800ddde <remove_chain+0x70>
 800ddda:	2301      	movs	r3, #1
 800dddc:	e028      	b.n	800de30 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ddde:	2200      	movs	r2, #0
 800dde0:	68b9      	ldr	r1, [r7, #8]
 800dde2:	69b8      	ldr	r0, [r7, #24]
 800dde4:	f7ff fed7 	bl	800db96 <put_fat>
 800dde8:	4603      	mov	r3, r0
 800ddea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ddec:	7ffb      	ldrb	r3, [r7, #31]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d001      	beq.n	800ddf6 <remove_chain+0x88>
 800ddf2:	7ffb      	ldrb	r3, [r7, #31]
 800ddf4:	e01c      	b.n	800de30 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ddf6:	69bb      	ldr	r3, [r7, #24]
 800ddf8:	695a      	ldr	r2, [r3, #20]
 800ddfa:	69bb      	ldr	r3, [r7, #24]
 800ddfc:	699b      	ldr	r3, [r3, #24]
 800ddfe:	3b02      	subs	r3, #2
 800de00:	429a      	cmp	r2, r3
 800de02:	d20b      	bcs.n	800de1c <remove_chain+0xae>
			fs->free_clst++;
 800de04:	69bb      	ldr	r3, [r7, #24]
 800de06:	695b      	ldr	r3, [r3, #20]
 800de08:	1c5a      	adds	r2, r3, #1
 800de0a:	69bb      	ldr	r3, [r7, #24]
 800de0c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800de0e:	69bb      	ldr	r3, [r7, #24]
 800de10:	791b      	ldrb	r3, [r3, #4]
 800de12:	f043 0301 	orr.w	r3, r3, #1
 800de16:	b2da      	uxtb	r2, r3
 800de18:	69bb      	ldr	r3, [r7, #24]
 800de1a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800de1c:	697b      	ldr	r3, [r7, #20]
 800de1e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800de20:	69bb      	ldr	r3, [r7, #24]
 800de22:	699b      	ldr	r3, [r3, #24]
 800de24:	68ba      	ldr	r2, [r7, #8]
 800de26:	429a      	cmp	r2, r3
 800de28:	d3c6      	bcc.n	800ddb8 <remove_chain+0x4a>
 800de2a:	e000      	b.n	800de2e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800de2c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800de2e:	2300      	movs	r3, #0
}
 800de30:	4618      	mov	r0, r3
 800de32:	3720      	adds	r7, #32
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}

0800de38 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b088      	sub	sp, #32
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
 800de40:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800de48:	683b      	ldr	r3, [r7, #0]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d10d      	bne.n	800de6a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	691b      	ldr	r3, [r3, #16]
 800de52:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800de54:	69bb      	ldr	r3, [r7, #24]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d004      	beq.n	800de64 <create_chain+0x2c>
 800de5a:	693b      	ldr	r3, [r7, #16]
 800de5c:	699b      	ldr	r3, [r3, #24]
 800de5e:	69ba      	ldr	r2, [r7, #24]
 800de60:	429a      	cmp	r2, r3
 800de62:	d31b      	bcc.n	800de9c <create_chain+0x64>
 800de64:	2301      	movs	r3, #1
 800de66:	61bb      	str	r3, [r7, #24]
 800de68:	e018      	b.n	800de9c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800de6a:	6839      	ldr	r1, [r7, #0]
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f7ff fdea 	bl	800da46 <get_fat>
 800de72:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	2b01      	cmp	r3, #1
 800de78:	d801      	bhi.n	800de7e <create_chain+0x46>
 800de7a:	2301      	movs	r3, #1
 800de7c:	e070      	b.n	800df60 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de84:	d101      	bne.n	800de8a <create_chain+0x52>
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	e06a      	b.n	800df60 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	699b      	ldr	r3, [r3, #24]
 800de8e:	68fa      	ldr	r2, [r7, #12]
 800de90:	429a      	cmp	r2, r3
 800de92:	d201      	bcs.n	800de98 <create_chain+0x60>
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	e063      	b.n	800df60 <create_chain+0x128>
		scl = clst;
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800de9c:	69bb      	ldr	r3, [r7, #24]
 800de9e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800dea0:	69fb      	ldr	r3, [r7, #28]
 800dea2:	3301      	adds	r3, #1
 800dea4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800dea6:	693b      	ldr	r3, [r7, #16]
 800dea8:	699b      	ldr	r3, [r3, #24]
 800deaa:	69fa      	ldr	r2, [r7, #28]
 800deac:	429a      	cmp	r2, r3
 800deae:	d307      	bcc.n	800dec0 <create_chain+0x88>
				ncl = 2;
 800deb0:	2302      	movs	r3, #2
 800deb2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800deb4:	69fa      	ldr	r2, [r7, #28]
 800deb6:	69bb      	ldr	r3, [r7, #24]
 800deb8:	429a      	cmp	r2, r3
 800deba:	d901      	bls.n	800dec0 <create_chain+0x88>
 800debc:	2300      	movs	r3, #0
 800debe:	e04f      	b.n	800df60 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800dec0:	69f9      	ldr	r1, [r7, #28]
 800dec2:	6878      	ldr	r0, [r7, #4]
 800dec4:	f7ff fdbf 	bl	800da46 <get_fat>
 800dec8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d00e      	beq.n	800deee <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	2b01      	cmp	r3, #1
 800ded4:	d003      	beq.n	800dede <create_chain+0xa6>
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dedc:	d101      	bne.n	800dee2 <create_chain+0xaa>
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	e03e      	b.n	800df60 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800dee2:	69fa      	ldr	r2, [r7, #28]
 800dee4:	69bb      	ldr	r3, [r7, #24]
 800dee6:	429a      	cmp	r2, r3
 800dee8:	d1da      	bne.n	800dea0 <create_chain+0x68>
 800deea:	2300      	movs	r3, #0
 800deec:	e038      	b.n	800df60 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800deee:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800def0:	f04f 32ff 	mov.w	r2, #4294967295
 800def4:	69f9      	ldr	r1, [r7, #28]
 800def6:	6938      	ldr	r0, [r7, #16]
 800def8:	f7ff fe4d 	bl	800db96 <put_fat>
 800defc:	4603      	mov	r3, r0
 800defe:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800df00:	7dfb      	ldrb	r3, [r7, #23]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d109      	bne.n	800df1a <create_chain+0xe2>
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d006      	beq.n	800df1a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800df0c:	69fa      	ldr	r2, [r7, #28]
 800df0e:	6839      	ldr	r1, [r7, #0]
 800df10:	6938      	ldr	r0, [r7, #16]
 800df12:	f7ff fe40 	bl	800db96 <put_fat>
 800df16:	4603      	mov	r3, r0
 800df18:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800df1a:	7dfb      	ldrb	r3, [r7, #23]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d116      	bne.n	800df4e <create_chain+0x116>
		fs->last_clst = ncl;
 800df20:	693b      	ldr	r3, [r7, #16]
 800df22:	69fa      	ldr	r2, [r7, #28]
 800df24:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800df26:	693b      	ldr	r3, [r7, #16]
 800df28:	695a      	ldr	r2, [r3, #20]
 800df2a:	693b      	ldr	r3, [r7, #16]
 800df2c:	699b      	ldr	r3, [r3, #24]
 800df2e:	3b02      	subs	r3, #2
 800df30:	429a      	cmp	r2, r3
 800df32:	d804      	bhi.n	800df3e <create_chain+0x106>
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	695b      	ldr	r3, [r3, #20]
 800df38:	1e5a      	subs	r2, r3, #1
 800df3a:	693b      	ldr	r3, [r7, #16]
 800df3c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800df3e:	693b      	ldr	r3, [r7, #16]
 800df40:	791b      	ldrb	r3, [r3, #4]
 800df42:	f043 0301 	orr.w	r3, r3, #1
 800df46:	b2da      	uxtb	r2, r3
 800df48:	693b      	ldr	r3, [r7, #16]
 800df4a:	711a      	strb	r2, [r3, #4]
 800df4c:	e007      	b.n	800df5e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800df4e:	7dfb      	ldrb	r3, [r7, #23]
 800df50:	2b01      	cmp	r3, #1
 800df52:	d102      	bne.n	800df5a <create_chain+0x122>
 800df54:	f04f 33ff 	mov.w	r3, #4294967295
 800df58:	e000      	b.n	800df5c <create_chain+0x124>
 800df5a:	2301      	movs	r3, #1
 800df5c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800df5e:	69fb      	ldr	r3, [r7, #28]
}
 800df60:	4618      	mov	r0, r3
 800df62:	3720      	adds	r7, #32
 800df64:	46bd      	mov	sp, r7
 800df66:	bd80      	pop	{r7, pc}

0800df68 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800df68:	b480      	push	{r7}
 800df6a:	b087      	sub	sp, #28
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df7c:	3304      	adds	r3, #4
 800df7e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	0a5b      	lsrs	r3, r3, #9
 800df84:	68fa      	ldr	r2, [r7, #12]
 800df86:	8952      	ldrh	r2, [r2, #10]
 800df88:	fbb3 f3f2 	udiv	r3, r3, r2
 800df8c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800df8e:	693b      	ldr	r3, [r7, #16]
 800df90:	1d1a      	adds	r2, r3, #4
 800df92:	613a      	str	r2, [r7, #16]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800df98:	68bb      	ldr	r3, [r7, #8]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d101      	bne.n	800dfa2 <clmt_clust+0x3a>
 800df9e:	2300      	movs	r3, #0
 800dfa0:	e010      	b.n	800dfc4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800dfa2:	697a      	ldr	r2, [r7, #20]
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	429a      	cmp	r2, r3
 800dfa8:	d307      	bcc.n	800dfba <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800dfaa:	697a      	ldr	r2, [r7, #20]
 800dfac:	68bb      	ldr	r3, [r7, #8]
 800dfae:	1ad3      	subs	r3, r2, r3
 800dfb0:	617b      	str	r3, [r7, #20]
 800dfb2:	693b      	ldr	r3, [r7, #16]
 800dfb4:	3304      	adds	r3, #4
 800dfb6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dfb8:	e7e9      	b.n	800df8e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800dfba:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800dfbc:	693b      	ldr	r3, [r7, #16]
 800dfbe:	681a      	ldr	r2, [r3, #0]
 800dfc0:	697b      	ldr	r3, [r7, #20]
 800dfc2:	4413      	add	r3, r2
}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	371c      	adds	r7, #28
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfce:	4770      	bx	lr

0800dfd0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b086      	sub	sp, #24
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	6078      	str	r0, [r7, #4]
 800dfd8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dfe6:	d204      	bcs.n	800dff2 <dir_sdi+0x22>
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	f003 031f 	and.w	r3, r3, #31
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d001      	beq.n	800dff6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800dff2:	2302      	movs	r3, #2
 800dff4:	e063      	b.n	800e0be <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	683a      	ldr	r2, [r7, #0]
 800dffa:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	689b      	ldr	r3, [r3, #8]
 800e000:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e002:	697b      	ldr	r3, [r7, #20]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d106      	bne.n	800e016 <dir_sdi+0x46>
 800e008:	693b      	ldr	r3, [r7, #16]
 800e00a:	781b      	ldrb	r3, [r3, #0]
 800e00c:	2b02      	cmp	r3, #2
 800e00e:	d902      	bls.n	800e016 <dir_sdi+0x46>
		clst = fs->dirbase;
 800e010:	693b      	ldr	r3, [r7, #16]
 800e012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e014:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e016:	697b      	ldr	r3, [r7, #20]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d10c      	bne.n	800e036 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e01c:	683b      	ldr	r3, [r7, #0]
 800e01e:	095b      	lsrs	r3, r3, #5
 800e020:	693a      	ldr	r2, [r7, #16]
 800e022:	8912      	ldrh	r2, [r2, #8]
 800e024:	4293      	cmp	r3, r2
 800e026:	d301      	bcc.n	800e02c <dir_sdi+0x5c>
 800e028:	2302      	movs	r3, #2
 800e02a:	e048      	b.n	800e0be <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800e02c:	693b      	ldr	r3, [r7, #16]
 800e02e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	61da      	str	r2, [r3, #28]
 800e034:	e029      	b.n	800e08a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e036:	693b      	ldr	r3, [r7, #16]
 800e038:	895b      	ldrh	r3, [r3, #10]
 800e03a:	025b      	lsls	r3, r3, #9
 800e03c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e03e:	e019      	b.n	800e074 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6979      	ldr	r1, [r7, #20]
 800e044:	4618      	mov	r0, r3
 800e046:	f7ff fcfe 	bl	800da46 <get_fat>
 800e04a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e04c:	697b      	ldr	r3, [r7, #20]
 800e04e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e052:	d101      	bne.n	800e058 <dir_sdi+0x88>
 800e054:	2301      	movs	r3, #1
 800e056:	e032      	b.n	800e0be <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e058:	697b      	ldr	r3, [r7, #20]
 800e05a:	2b01      	cmp	r3, #1
 800e05c:	d904      	bls.n	800e068 <dir_sdi+0x98>
 800e05e:	693b      	ldr	r3, [r7, #16]
 800e060:	699b      	ldr	r3, [r3, #24]
 800e062:	697a      	ldr	r2, [r7, #20]
 800e064:	429a      	cmp	r2, r3
 800e066:	d301      	bcc.n	800e06c <dir_sdi+0x9c>
 800e068:	2302      	movs	r3, #2
 800e06a:	e028      	b.n	800e0be <dir_sdi+0xee>
			ofs -= csz;
 800e06c:	683a      	ldr	r2, [r7, #0]
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	1ad3      	subs	r3, r2, r3
 800e072:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e074:	683a      	ldr	r2, [r7, #0]
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	429a      	cmp	r2, r3
 800e07a:	d2e1      	bcs.n	800e040 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800e07c:	6979      	ldr	r1, [r7, #20]
 800e07e:	6938      	ldr	r0, [r7, #16]
 800e080:	f7ff fcc2 	bl	800da08 <clust2sect>
 800e084:	4602      	mov	r2, r0
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	697a      	ldr	r2, [r7, #20]
 800e08e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	69db      	ldr	r3, [r3, #28]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d101      	bne.n	800e09c <dir_sdi+0xcc>
 800e098:	2302      	movs	r3, #2
 800e09a:	e010      	b.n	800e0be <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	69da      	ldr	r2, [r3, #28]
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	0a5b      	lsrs	r3, r3, #9
 800e0a4:	441a      	add	r2, r3
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e0aa:	693b      	ldr	r3, [r7, #16]
 800e0ac:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0b6:	441a      	add	r2, r3
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e0bc:	2300      	movs	r3, #0
}
 800e0be:	4618      	mov	r0, r3
 800e0c0:	3718      	adds	r7, #24
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bd80      	pop	{r7, pc}

0800e0c6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e0c6:	b580      	push	{r7, lr}
 800e0c8:	b086      	sub	sp, #24
 800e0ca:	af00      	add	r7, sp, #0
 800e0cc:	6078      	str	r0, [r7, #4]
 800e0ce:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	695b      	ldr	r3, [r3, #20]
 800e0da:	3320      	adds	r3, #32
 800e0dc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	69db      	ldr	r3, [r3, #28]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d003      	beq.n	800e0ee <dir_next+0x28>
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e0ec:	d301      	bcc.n	800e0f2 <dir_next+0x2c>
 800e0ee:	2304      	movs	r3, #4
 800e0f0:	e0aa      	b.n	800e248 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e0f2:	68bb      	ldr	r3, [r7, #8]
 800e0f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	f040 8098 	bne.w	800e22e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	69db      	ldr	r3, [r3, #28]
 800e102:	1c5a      	adds	r2, r3, #1
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	699b      	ldr	r3, [r3, #24]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d10b      	bne.n	800e128 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e110:	68bb      	ldr	r3, [r7, #8]
 800e112:	095b      	lsrs	r3, r3, #5
 800e114:	68fa      	ldr	r2, [r7, #12]
 800e116:	8912      	ldrh	r2, [r2, #8]
 800e118:	4293      	cmp	r3, r2
 800e11a:	f0c0 8088 	bcc.w	800e22e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	2200      	movs	r2, #0
 800e122:	61da      	str	r2, [r3, #28]
 800e124:	2304      	movs	r3, #4
 800e126:	e08f      	b.n	800e248 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	0a5b      	lsrs	r3, r3, #9
 800e12c:	68fa      	ldr	r2, [r7, #12]
 800e12e:	8952      	ldrh	r2, [r2, #10]
 800e130:	3a01      	subs	r2, #1
 800e132:	4013      	ands	r3, r2
 800e134:	2b00      	cmp	r3, #0
 800e136:	d17a      	bne.n	800e22e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e138:	687a      	ldr	r2, [r7, #4]
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	699b      	ldr	r3, [r3, #24]
 800e13e:	4619      	mov	r1, r3
 800e140:	4610      	mov	r0, r2
 800e142:	f7ff fc80 	bl	800da46 <get_fat>
 800e146:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e148:	697b      	ldr	r3, [r7, #20]
 800e14a:	2b01      	cmp	r3, #1
 800e14c:	d801      	bhi.n	800e152 <dir_next+0x8c>
 800e14e:	2302      	movs	r3, #2
 800e150:	e07a      	b.n	800e248 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e152:	697b      	ldr	r3, [r7, #20]
 800e154:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e158:	d101      	bne.n	800e15e <dir_next+0x98>
 800e15a:	2301      	movs	r3, #1
 800e15c:	e074      	b.n	800e248 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	699b      	ldr	r3, [r3, #24]
 800e162:	697a      	ldr	r2, [r7, #20]
 800e164:	429a      	cmp	r2, r3
 800e166:	d358      	bcc.n	800e21a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e168:	683b      	ldr	r3, [r7, #0]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d104      	bne.n	800e178 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	2200      	movs	r2, #0
 800e172:	61da      	str	r2, [r3, #28]
 800e174:	2304      	movs	r3, #4
 800e176:	e067      	b.n	800e248 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e178:	687a      	ldr	r2, [r7, #4]
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	699b      	ldr	r3, [r3, #24]
 800e17e:	4619      	mov	r1, r3
 800e180:	4610      	mov	r0, r2
 800e182:	f7ff fe59 	bl	800de38 <create_chain>
 800e186:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e188:	697b      	ldr	r3, [r7, #20]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d101      	bne.n	800e192 <dir_next+0xcc>
 800e18e:	2307      	movs	r3, #7
 800e190:	e05a      	b.n	800e248 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e192:	697b      	ldr	r3, [r7, #20]
 800e194:	2b01      	cmp	r3, #1
 800e196:	d101      	bne.n	800e19c <dir_next+0xd6>
 800e198:	2302      	movs	r3, #2
 800e19a:	e055      	b.n	800e248 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e19c:	697b      	ldr	r3, [r7, #20]
 800e19e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1a2:	d101      	bne.n	800e1a8 <dir_next+0xe2>
 800e1a4:	2301      	movs	r3, #1
 800e1a6:	e04f      	b.n	800e248 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e1a8:	68f8      	ldr	r0, [r7, #12]
 800e1aa:	f7ff fb4d 	bl	800d848 <sync_window>
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d001      	beq.n	800e1b8 <dir_next+0xf2>
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	e047      	b.n	800e248 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	3334      	adds	r3, #52	; 0x34
 800e1bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e1c0:	2100      	movs	r1, #0
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f7ff f945 	bl	800d452 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	613b      	str	r3, [r7, #16]
 800e1cc:	6979      	ldr	r1, [r7, #20]
 800e1ce:	68f8      	ldr	r0, [r7, #12]
 800e1d0:	f7ff fc1a 	bl	800da08 <clust2sect>
 800e1d4:	4602      	mov	r2, r0
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	631a      	str	r2, [r3, #48]	; 0x30
 800e1da:	e012      	b.n	800e202 <dir_next+0x13c>
						fs->wflag = 1;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	2201      	movs	r2, #1
 800e1e0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e1e2:	68f8      	ldr	r0, [r7, #12]
 800e1e4:	f7ff fb30 	bl	800d848 <sync_window>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d001      	beq.n	800e1f2 <dir_next+0x12c>
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	e02a      	b.n	800e248 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e1f2:	693b      	ldr	r3, [r7, #16]
 800e1f4:	3301      	adds	r3, #1
 800e1f6:	613b      	str	r3, [r7, #16]
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1fc:	1c5a      	adds	r2, r3, #1
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	631a      	str	r2, [r3, #48]	; 0x30
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	895b      	ldrh	r3, [r3, #10]
 800e206:	461a      	mov	r2, r3
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	4293      	cmp	r3, r2
 800e20c:	d3e6      	bcc.n	800e1dc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e212:	693b      	ldr	r3, [r7, #16]
 800e214:	1ad2      	subs	r2, r2, r3
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	697a      	ldr	r2, [r7, #20]
 800e21e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e220:	6979      	ldr	r1, [r7, #20]
 800e222:	68f8      	ldr	r0, [r7, #12]
 800e224:	f7ff fbf0 	bl	800da08 <clust2sect>
 800e228:	4602      	mov	r2, r0
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	68ba      	ldr	r2, [r7, #8]
 800e232:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e23a:	68bb      	ldr	r3, [r7, #8]
 800e23c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e240:	441a      	add	r2, r3
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e246:	2300      	movs	r3, #0
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3718      	adds	r7, #24
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}

0800e250 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b086      	sub	sp, #24
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
 800e258:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e260:	2100      	movs	r1, #0
 800e262:	6878      	ldr	r0, [r7, #4]
 800e264:	f7ff feb4 	bl	800dfd0 <dir_sdi>
 800e268:	4603      	mov	r3, r0
 800e26a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e26c:	7dfb      	ldrb	r3, [r7, #23]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d12b      	bne.n	800e2ca <dir_alloc+0x7a>
		n = 0;
 800e272:	2300      	movs	r3, #0
 800e274:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	69db      	ldr	r3, [r3, #28]
 800e27a:	4619      	mov	r1, r3
 800e27c:	68f8      	ldr	r0, [r7, #12]
 800e27e:	f7ff fb27 	bl	800d8d0 <move_window>
 800e282:	4603      	mov	r3, r0
 800e284:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e286:	7dfb      	ldrb	r3, [r7, #23]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d11d      	bne.n	800e2c8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	6a1b      	ldr	r3, [r3, #32]
 800e290:	781b      	ldrb	r3, [r3, #0]
 800e292:	2be5      	cmp	r3, #229	; 0xe5
 800e294:	d004      	beq.n	800e2a0 <dir_alloc+0x50>
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6a1b      	ldr	r3, [r3, #32]
 800e29a:	781b      	ldrb	r3, [r3, #0]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d107      	bne.n	800e2b0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e2a0:	693b      	ldr	r3, [r7, #16]
 800e2a2:	3301      	adds	r3, #1
 800e2a4:	613b      	str	r3, [r7, #16]
 800e2a6:	693a      	ldr	r2, [r7, #16]
 800e2a8:	683b      	ldr	r3, [r7, #0]
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	d102      	bne.n	800e2b4 <dir_alloc+0x64>
 800e2ae:	e00c      	b.n	800e2ca <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e2b4:	2101      	movs	r1, #1
 800e2b6:	6878      	ldr	r0, [r7, #4]
 800e2b8:	f7ff ff05 	bl	800e0c6 <dir_next>
 800e2bc:	4603      	mov	r3, r0
 800e2be:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e2c0:	7dfb      	ldrb	r3, [r7, #23]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d0d7      	beq.n	800e276 <dir_alloc+0x26>
 800e2c6:	e000      	b.n	800e2ca <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e2c8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e2ca:	7dfb      	ldrb	r3, [r7, #23]
 800e2cc:	2b04      	cmp	r3, #4
 800e2ce:	d101      	bne.n	800e2d4 <dir_alloc+0x84>
 800e2d0:	2307      	movs	r3, #7
 800e2d2:	75fb      	strb	r3, [r7, #23]
	return res;
 800e2d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	3718      	adds	r7, #24
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	bd80      	pop	{r7, pc}

0800e2de <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e2de:	b580      	push	{r7, lr}
 800e2e0:	b084      	sub	sp, #16
 800e2e2:	af00      	add	r7, sp, #0
 800e2e4:	6078      	str	r0, [r7, #4]
 800e2e6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	331a      	adds	r3, #26
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	f7ff f80d 	bl	800d30c <ld_word>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	781b      	ldrb	r3, [r3, #0]
 800e2fa:	2b03      	cmp	r3, #3
 800e2fc:	d109      	bne.n	800e312 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	3314      	adds	r3, #20
 800e302:	4618      	mov	r0, r3
 800e304:	f7ff f802 	bl	800d30c <ld_word>
 800e308:	4603      	mov	r3, r0
 800e30a:	041b      	lsls	r3, r3, #16
 800e30c:	68fa      	ldr	r2, [r7, #12]
 800e30e:	4313      	orrs	r3, r2
 800e310:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e312:	68fb      	ldr	r3, [r7, #12]
}
 800e314:	4618      	mov	r0, r3
 800e316:	3710      	adds	r7, #16
 800e318:	46bd      	mov	sp, r7
 800e31a:	bd80      	pop	{r7, pc}

0800e31c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b084      	sub	sp, #16
 800e320:	af00      	add	r7, sp, #0
 800e322:	60f8      	str	r0, [r7, #12]
 800e324:	60b9      	str	r1, [r7, #8]
 800e326:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e328:	68bb      	ldr	r3, [r7, #8]
 800e32a:	331a      	adds	r3, #26
 800e32c:	687a      	ldr	r2, [r7, #4]
 800e32e:	b292      	uxth	r2, r2
 800e330:	4611      	mov	r1, r2
 800e332:	4618      	mov	r0, r3
 800e334:	f7ff f825 	bl	800d382 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	781b      	ldrb	r3, [r3, #0]
 800e33c:	2b03      	cmp	r3, #3
 800e33e:	d109      	bne.n	800e354 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	f103 0214 	add.w	r2, r3, #20
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	0c1b      	lsrs	r3, r3, #16
 800e34a:	b29b      	uxth	r3, r3
 800e34c:	4619      	mov	r1, r3
 800e34e:	4610      	mov	r0, r2
 800e350:	f7ff f817 	bl	800d382 <st_word>
	}
}
 800e354:	bf00      	nop
 800e356:	3710      	adds	r7, #16
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}

0800e35c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b086      	sub	sp, #24
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e36a:	2100      	movs	r1, #0
 800e36c:	6878      	ldr	r0, [r7, #4]
 800e36e:	f7ff fe2f 	bl	800dfd0 <dir_sdi>
 800e372:	4603      	mov	r3, r0
 800e374:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e376:	7dfb      	ldrb	r3, [r7, #23]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d001      	beq.n	800e380 <dir_find+0x24>
 800e37c:	7dfb      	ldrb	r3, [r7, #23]
 800e37e:	e03e      	b.n	800e3fe <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	69db      	ldr	r3, [r3, #28]
 800e384:	4619      	mov	r1, r3
 800e386:	6938      	ldr	r0, [r7, #16]
 800e388:	f7ff faa2 	bl	800d8d0 <move_window>
 800e38c:	4603      	mov	r3, r0
 800e38e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e390:	7dfb      	ldrb	r3, [r7, #23]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d12f      	bne.n	800e3f6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	6a1b      	ldr	r3, [r3, #32]
 800e39a:	781b      	ldrb	r3, [r3, #0]
 800e39c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e39e:	7bfb      	ldrb	r3, [r7, #15]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d102      	bne.n	800e3aa <dir_find+0x4e>
 800e3a4:	2304      	movs	r3, #4
 800e3a6:	75fb      	strb	r3, [r7, #23]
 800e3a8:	e028      	b.n	800e3fc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6a1b      	ldr	r3, [r3, #32]
 800e3ae:	330b      	adds	r3, #11
 800e3b0:	781b      	ldrb	r3, [r3, #0]
 800e3b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e3b6:	b2da      	uxtb	r2, r3
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	6a1b      	ldr	r3, [r3, #32]
 800e3c0:	330b      	adds	r3, #11
 800e3c2:	781b      	ldrb	r3, [r3, #0]
 800e3c4:	f003 0308 	and.w	r3, r3, #8
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d10a      	bne.n	800e3e2 <dir_find+0x86>
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	6a18      	ldr	r0, [r3, #32]
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	3324      	adds	r3, #36	; 0x24
 800e3d4:	220b      	movs	r2, #11
 800e3d6:	4619      	mov	r1, r3
 800e3d8:	f7ff f856 	bl	800d488 <mem_cmp>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d00b      	beq.n	800e3fa <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e3e2:	2100      	movs	r1, #0
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f7ff fe6e 	bl	800e0c6 <dir_next>
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e3ee:	7dfb      	ldrb	r3, [r7, #23]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d0c5      	beq.n	800e380 <dir_find+0x24>
 800e3f4:	e002      	b.n	800e3fc <dir_find+0xa0>
		if (res != FR_OK) break;
 800e3f6:	bf00      	nop
 800e3f8:	e000      	b.n	800e3fc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e3fa:	bf00      	nop

	return res;
 800e3fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3fe:	4618      	mov	r0, r3
 800e400:	3718      	adds	r7, #24
 800e402:	46bd      	mov	sp, r7
 800e404:	bd80      	pop	{r7, pc}

0800e406 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e406:	b580      	push	{r7, lr}
 800e408:	b084      	sub	sp, #16
 800e40a:	af00      	add	r7, sp, #0
 800e40c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800e414:	2101      	movs	r1, #1
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f7ff ff1a 	bl	800e250 <dir_alloc>
 800e41c:	4603      	mov	r3, r0
 800e41e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e420:	7bfb      	ldrb	r3, [r7, #15]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d11c      	bne.n	800e460 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	69db      	ldr	r3, [r3, #28]
 800e42a:	4619      	mov	r1, r3
 800e42c:	68b8      	ldr	r0, [r7, #8]
 800e42e:	f7ff fa4f 	bl	800d8d0 <move_window>
 800e432:	4603      	mov	r3, r0
 800e434:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e436:	7bfb      	ldrb	r3, [r7, #15]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d111      	bne.n	800e460 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	6a1b      	ldr	r3, [r3, #32]
 800e440:	2220      	movs	r2, #32
 800e442:	2100      	movs	r1, #0
 800e444:	4618      	mov	r0, r3
 800e446:	f7ff f804 	bl	800d452 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	6a18      	ldr	r0, [r3, #32]
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	3324      	adds	r3, #36	; 0x24
 800e452:	220b      	movs	r2, #11
 800e454:	4619      	mov	r1, r3
 800e456:	f7fe ffdb 	bl	800d410 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800e45a:	68bb      	ldr	r3, [r7, #8]
 800e45c:	2201      	movs	r2, #1
 800e45e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e460:	7bfb      	ldrb	r3, [r7, #15]
}
 800e462:	4618      	mov	r0, r3
 800e464:	3710      	adds	r7, #16
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}
	...

0800e46c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b088      	sub	sp, #32
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
 800e474:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	60fb      	str	r3, [r7, #12]
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	3324      	adds	r3, #36	; 0x24
 800e480:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800e482:	220b      	movs	r2, #11
 800e484:	2120      	movs	r1, #32
 800e486:	68b8      	ldr	r0, [r7, #8]
 800e488:	f7fe ffe3 	bl	800d452 <mem_set>
	si = i = 0; ni = 8;
 800e48c:	2300      	movs	r3, #0
 800e48e:	613b      	str	r3, [r7, #16]
 800e490:	693b      	ldr	r3, [r7, #16]
 800e492:	61fb      	str	r3, [r7, #28]
 800e494:	2308      	movs	r3, #8
 800e496:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800e498:	69fb      	ldr	r3, [r7, #28]
 800e49a:	1c5a      	adds	r2, r3, #1
 800e49c:	61fa      	str	r2, [r7, #28]
 800e49e:	68fa      	ldr	r2, [r7, #12]
 800e4a0:	4413      	add	r3, r2
 800e4a2:	781b      	ldrb	r3, [r3, #0]
 800e4a4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e4a6:	7efb      	ldrb	r3, [r7, #27]
 800e4a8:	2b20      	cmp	r3, #32
 800e4aa:	d94e      	bls.n	800e54a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800e4ac:	7efb      	ldrb	r3, [r7, #27]
 800e4ae:	2b2f      	cmp	r3, #47	; 0x2f
 800e4b0:	d006      	beq.n	800e4c0 <create_name+0x54>
 800e4b2:	7efb      	ldrb	r3, [r7, #27]
 800e4b4:	2b5c      	cmp	r3, #92	; 0x5c
 800e4b6:	d110      	bne.n	800e4da <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e4b8:	e002      	b.n	800e4c0 <create_name+0x54>
 800e4ba:	69fb      	ldr	r3, [r7, #28]
 800e4bc:	3301      	adds	r3, #1
 800e4be:	61fb      	str	r3, [r7, #28]
 800e4c0:	68fa      	ldr	r2, [r7, #12]
 800e4c2:	69fb      	ldr	r3, [r7, #28]
 800e4c4:	4413      	add	r3, r2
 800e4c6:	781b      	ldrb	r3, [r3, #0]
 800e4c8:	2b2f      	cmp	r3, #47	; 0x2f
 800e4ca:	d0f6      	beq.n	800e4ba <create_name+0x4e>
 800e4cc:	68fa      	ldr	r2, [r7, #12]
 800e4ce:	69fb      	ldr	r3, [r7, #28]
 800e4d0:	4413      	add	r3, r2
 800e4d2:	781b      	ldrb	r3, [r3, #0]
 800e4d4:	2b5c      	cmp	r3, #92	; 0x5c
 800e4d6:	d0f0      	beq.n	800e4ba <create_name+0x4e>
			break;
 800e4d8:	e038      	b.n	800e54c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800e4da:	7efb      	ldrb	r3, [r7, #27]
 800e4dc:	2b2e      	cmp	r3, #46	; 0x2e
 800e4de:	d003      	beq.n	800e4e8 <create_name+0x7c>
 800e4e0:	693a      	ldr	r2, [r7, #16]
 800e4e2:	697b      	ldr	r3, [r7, #20]
 800e4e4:	429a      	cmp	r2, r3
 800e4e6:	d30c      	bcc.n	800e502 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800e4e8:	697b      	ldr	r3, [r7, #20]
 800e4ea:	2b0b      	cmp	r3, #11
 800e4ec:	d002      	beq.n	800e4f4 <create_name+0x88>
 800e4ee:	7efb      	ldrb	r3, [r7, #27]
 800e4f0:	2b2e      	cmp	r3, #46	; 0x2e
 800e4f2:	d001      	beq.n	800e4f8 <create_name+0x8c>
 800e4f4:	2306      	movs	r3, #6
 800e4f6:	e044      	b.n	800e582 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800e4f8:	2308      	movs	r3, #8
 800e4fa:	613b      	str	r3, [r7, #16]
 800e4fc:	230b      	movs	r3, #11
 800e4fe:	617b      	str	r3, [r7, #20]
			continue;
 800e500:	e022      	b.n	800e548 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800e502:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e506:	2b00      	cmp	r3, #0
 800e508:	da04      	bge.n	800e514 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800e50a:	7efb      	ldrb	r3, [r7, #27]
 800e50c:	3b80      	subs	r3, #128	; 0x80
 800e50e:	4a1f      	ldr	r2, [pc, #124]	; (800e58c <create_name+0x120>)
 800e510:	5cd3      	ldrb	r3, [r2, r3]
 800e512:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800e514:	7efb      	ldrb	r3, [r7, #27]
 800e516:	4619      	mov	r1, r3
 800e518:	481d      	ldr	r0, [pc, #116]	; (800e590 <create_name+0x124>)
 800e51a:	f7fe ffdc 	bl	800d4d6 <chk_chr>
 800e51e:	4603      	mov	r3, r0
 800e520:	2b00      	cmp	r3, #0
 800e522:	d001      	beq.n	800e528 <create_name+0xbc>
 800e524:	2306      	movs	r3, #6
 800e526:	e02c      	b.n	800e582 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800e528:	7efb      	ldrb	r3, [r7, #27]
 800e52a:	2b60      	cmp	r3, #96	; 0x60
 800e52c:	d905      	bls.n	800e53a <create_name+0xce>
 800e52e:	7efb      	ldrb	r3, [r7, #27]
 800e530:	2b7a      	cmp	r3, #122	; 0x7a
 800e532:	d802      	bhi.n	800e53a <create_name+0xce>
 800e534:	7efb      	ldrb	r3, [r7, #27]
 800e536:	3b20      	subs	r3, #32
 800e538:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800e53a:	693b      	ldr	r3, [r7, #16]
 800e53c:	1c5a      	adds	r2, r3, #1
 800e53e:	613a      	str	r2, [r7, #16]
 800e540:	68ba      	ldr	r2, [r7, #8]
 800e542:	4413      	add	r3, r2
 800e544:	7efa      	ldrb	r2, [r7, #27]
 800e546:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800e548:	e7a6      	b.n	800e498 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e54a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800e54c:	68fa      	ldr	r2, [r7, #12]
 800e54e:	69fb      	ldr	r3, [r7, #28]
 800e550:	441a      	add	r2, r3
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800e556:	693b      	ldr	r3, [r7, #16]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d101      	bne.n	800e560 <create_name+0xf4>
 800e55c:	2306      	movs	r3, #6
 800e55e:	e010      	b.n	800e582 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e560:	68bb      	ldr	r3, [r7, #8]
 800e562:	781b      	ldrb	r3, [r3, #0]
 800e564:	2be5      	cmp	r3, #229	; 0xe5
 800e566:	d102      	bne.n	800e56e <create_name+0x102>
 800e568:	68bb      	ldr	r3, [r7, #8]
 800e56a:	2205      	movs	r2, #5
 800e56c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e56e:	7efb      	ldrb	r3, [r7, #27]
 800e570:	2b20      	cmp	r3, #32
 800e572:	d801      	bhi.n	800e578 <create_name+0x10c>
 800e574:	2204      	movs	r2, #4
 800e576:	e000      	b.n	800e57a <create_name+0x10e>
 800e578:	2200      	movs	r2, #0
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	330b      	adds	r3, #11
 800e57e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800e580:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800e582:	4618      	mov	r0, r3
 800e584:	3720      	adds	r7, #32
 800e586:	46bd      	mov	sp, r7
 800e588:	bd80      	pop	{r7, pc}
 800e58a:	bf00      	nop
 800e58c:	08016a5c 	.word	0x08016a5c
 800e590:	0801695c 	.word	0x0801695c

0800e594 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b086      	sub	sp, #24
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
 800e59c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e5a2:	693b      	ldr	r3, [r7, #16]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e5a8:	e002      	b.n	800e5b0 <follow_path+0x1c>
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	3301      	adds	r3, #1
 800e5ae:	603b      	str	r3, [r7, #0]
 800e5b0:	683b      	ldr	r3, [r7, #0]
 800e5b2:	781b      	ldrb	r3, [r3, #0]
 800e5b4:	2b2f      	cmp	r3, #47	; 0x2f
 800e5b6:	d0f8      	beq.n	800e5aa <follow_path+0x16>
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	781b      	ldrb	r3, [r3, #0]
 800e5bc:	2b5c      	cmp	r3, #92	; 0x5c
 800e5be:	d0f4      	beq.n	800e5aa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e5c0:	693b      	ldr	r3, [r7, #16]
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e5c6:	683b      	ldr	r3, [r7, #0]
 800e5c8:	781b      	ldrb	r3, [r3, #0]
 800e5ca:	2b1f      	cmp	r3, #31
 800e5cc:	d80a      	bhi.n	800e5e4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	2280      	movs	r2, #128	; 0x80
 800e5d2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e5d6:	2100      	movs	r1, #0
 800e5d8:	6878      	ldr	r0, [r7, #4]
 800e5da:	f7ff fcf9 	bl	800dfd0 <dir_sdi>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	75fb      	strb	r3, [r7, #23]
 800e5e2:	e043      	b.n	800e66c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e5e4:	463b      	mov	r3, r7
 800e5e6:	4619      	mov	r1, r3
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f7ff ff3f 	bl	800e46c <create_name>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e5f2:	7dfb      	ldrb	r3, [r7, #23]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d134      	bne.n	800e662 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e5f8:	6878      	ldr	r0, [r7, #4]
 800e5fa:	f7ff feaf 	bl	800e35c <dir_find>
 800e5fe:	4603      	mov	r3, r0
 800e600:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e608:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e60a:	7dfb      	ldrb	r3, [r7, #23]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d00a      	beq.n	800e626 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e610:	7dfb      	ldrb	r3, [r7, #23]
 800e612:	2b04      	cmp	r3, #4
 800e614:	d127      	bne.n	800e666 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e616:	7afb      	ldrb	r3, [r7, #11]
 800e618:	f003 0304 	and.w	r3, r3, #4
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d122      	bne.n	800e666 <follow_path+0xd2>
 800e620:	2305      	movs	r3, #5
 800e622:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e624:	e01f      	b.n	800e666 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e626:	7afb      	ldrb	r3, [r7, #11]
 800e628:	f003 0304 	and.w	r3, r3, #4
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d11c      	bne.n	800e66a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e630:	693b      	ldr	r3, [r7, #16]
 800e632:	799b      	ldrb	r3, [r3, #6]
 800e634:	f003 0310 	and.w	r3, r3, #16
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d102      	bne.n	800e642 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e63c:	2305      	movs	r3, #5
 800e63e:	75fb      	strb	r3, [r7, #23]
 800e640:	e014      	b.n	800e66c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	695b      	ldr	r3, [r3, #20]
 800e64c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e650:	4413      	add	r3, r2
 800e652:	4619      	mov	r1, r3
 800e654:	68f8      	ldr	r0, [r7, #12]
 800e656:	f7ff fe42 	bl	800e2de <ld_clust>
 800e65a:	4602      	mov	r2, r0
 800e65c:	693b      	ldr	r3, [r7, #16]
 800e65e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e660:	e7c0      	b.n	800e5e4 <follow_path+0x50>
			if (res != FR_OK) break;
 800e662:	bf00      	nop
 800e664:	e002      	b.n	800e66c <follow_path+0xd8>
				break;
 800e666:	bf00      	nop
 800e668:	e000      	b.n	800e66c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e66a:	bf00      	nop
			}
		}
	}

	return res;
 800e66c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e66e:	4618      	mov	r0, r3
 800e670:	3718      	adds	r7, #24
 800e672:	46bd      	mov	sp, r7
 800e674:	bd80      	pop	{r7, pc}

0800e676 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e676:	b480      	push	{r7}
 800e678:	b087      	sub	sp, #28
 800e67a:	af00      	add	r7, sp, #0
 800e67c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e67e:	f04f 33ff 	mov.w	r3, #4294967295
 800e682:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d031      	beq.n	800e6f0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	617b      	str	r3, [r7, #20]
 800e692:	e002      	b.n	800e69a <get_ldnumber+0x24>
 800e694:	697b      	ldr	r3, [r7, #20]
 800e696:	3301      	adds	r3, #1
 800e698:	617b      	str	r3, [r7, #20]
 800e69a:	697b      	ldr	r3, [r7, #20]
 800e69c:	781b      	ldrb	r3, [r3, #0]
 800e69e:	2b20      	cmp	r3, #32
 800e6a0:	d903      	bls.n	800e6aa <get_ldnumber+0x34>
 800e6a2:	697b      	ldr	r3, [r7, #20]
 800e6a4:	781b      	ldrb	r3, [r3, #0]
 800e6a6:	2b3a      	cmp	r3, #58	; 0x3a
 800e6a8:	d1f4      	bne.n	800e694 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e6aa:	697b      	ldr	r3, [r7, #20]
 800e6ac:	781b      	ldrb	r3, [r3, #0]
 800e6ae:	2b3a      	cmp	r3, #58	; 0x3a
 800e6b0:	d11c      	bne.n	800e6ec <get_ldnumber+0x76>
			tp = *path;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	1c5a      	adds	r2, r3, #1
 800e6bc:	60fa      	str	r2, [r7, #12]
 800e6be:	781b      	ldrb	r3, [r3, #0]
 800e6c0:	3b30      	subs	r3, #48	; 0x30
 800e6c2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e6c4:	68bb      	ldr	r3, [r7, #8]
 800e6c6:	2b09      	cmp	r3, #9
 800e6c8:	d80e      	bhi.n	800e6e8 <get_ldnumber+0x72>
 800e6ca:	68fa      	ldr	r2, [r7, #12]
 800e6cc:	697b      	ldr	r3, [r7, #20]
 800e6ce:	429a      	cmp	r2, r3
 800e6d0:	d10a      	bne.n	800e6e8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d107      	bne.n	800e6e8 <get_ldnumber+0x72>
					vol = (int)i;
 800e6d8:	68bb      	ldr	r3, [r7, #8]
 800e6da:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e6dc:	697b      	ldr	r3, [r7, #20]
 800e6de:	3301      	adds	r3, #1
 800e6e0:	617b      	str	r3, [r7, #20]
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	697a      	ldr	r2, [r7, #20]
 800e6e6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e6e8:	693b      	ldr	r3, [r7, #16]
 800e6ea:	e002      	b.n	800e6f2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e6f0:	693b      	ldr	r3, [r7, #16]
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	371c      	adds	r7, #28
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fc:	4770      	bx	lr
	...

0800e700 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b082      	sub	sp, #8
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
 800e708:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2200      	movs	r2, #0
 800e70e:	70da      	strb	r2, [r3, #3]
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	f04f 32ff 	mov.w	r2, #4294967295
 800e716:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e718:	6839      	ldr	r1, [r7, #0]
 800e71a:	6878      	ldr	r0, [r7, #4]
 800e71c:	f7ff f8d8 	bl	800d8d0 <move_window>
 800e720:	4603      	mov	r3, r0
 800e722:	2b00      	cmp	r3, #0
 800e724:	d001      	beq.n	800e72a <check_fs+0x2a>
 800e726:	2304      	movs	r3, #4
 800e728:	e038      	b.n	800e79c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	3334      	adds	r3, #52	; 0x34
 800e72e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e732:	4618      	mov	r0, r3
 800e734:	f7fe fdea 	bl	800d30c <ld_word>
 800e738:	4603      	mov	r3, r0
 800e73a:	461a      	mov	r2, r3
 800e73c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e740:	429a      	cmp	r2, r3
 800e742:	d001      	beq.n	800e748 <check_fs+0x48>
 800e744:	2303      	movs	r3, #3
 800e746:	e029      	b.n	800e79c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e74e:	2be9      	cmp	r3, #233	; 0xe9
 800e750:	d009      	beq.n	800e766 <check_fs+0x66>
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e758:	2beb      	cmp	r3, #235	; 0xeb
 800e75a:	d11e      	bne.n	800e79a <check_fs+0x9a>
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800e762:	2b90      	cmp	r3, #144	; 0x90
 800e764:	d119      	bne.n	800e79a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	3334      	adds	r3, #52	; 0x34
 800e76a:	3336      	adds	r3, #54	; 0x36
 800e76c:	4618      	mov	r0, r3
 800e76e:	f7fe fde5 	bl	800d33c <ld_dword>
 800e772:	4603      	mov	r3, r0
 800e774:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e778:	4a0a      	ldr	r2, [pc, #40]	; (800e7a4 <check_fs+0xa4>)
 800e77a:	4293      	cmp	r3, r2
 800e77c:	d101      	bne.n	800e782 <check_fs+0x82>
 800e77e:	2300      	movs	r3, #0
 800e780:	e00c      	b.n	800e79c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	3334      	adds	r3, #52	; 0x34
 800e786:	3352      	adds	r3, #82	; 0x52
 800e788:	4618      	mov	r0, r3
 800e78a:	f7fe fdd7 	bl	800d33c <ld_dword>
 800e78e:	4603      	mov	r3, r0
 800e790:	4a05      	ldr	r2, [pc, #20]	; (800e7a8 <check_fs+0xa8>)
 800e792:	4293      	cmp	r3, r2
 800e794:	d101      	bne.n	800e79a <check_fs+0x9a>
 800e796:	2300      	movs	r3, #0
 800e798:	e000      	b.n	800e79c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e79a:	2302      	movs	r3, #2
}
 800e79c:	4618      	mov	r0, r3
 800e79e:	3708      	adds	r7, #8
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}
 800e7a4:	00544146 	.word	0x00544146
 800e7a8:	33544146 	.word	0x33544146

0800e7ac <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b096      	sub	sp, #88	; 0x58
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	60f8      	str	r0, [r7, #12]
 800e7b4:	60b9      	str	r1, [r7, #8]
 800e7b6:	4613      	mov	r3, r2
 800e7b8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e7ba:	68bb      	ldr	r3, [r7, #8]
 800e7bc:	2200      	movs	r2, #0
 800e7be:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e7c0:	68f8      	ldr	r0, [r7, #12]
 800e7c2:	f7ff ff58 	bl	800e676 <get_ldnumber>
 800e7c6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e7c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	da01      	bge.n	800e7d2 <find_volume+0x26>
 800e7ce:	230b      	movs	r3, #11
 800e7d0:	e236      	b.n	800ec40 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e7d2:	4aac      	ldr	r2, [pc, #688]	; (800ea84 <find_volume+0x2d8>)
 800e7d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e7da:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d101      	bne.n	800e7e6 <find_volume+0x3a>
 800e7e2:	230c      	movs	r3, #12
 800e7e4:	e22c      	b.n	800ec40 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800e7e6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e7e8:	f7fe fe90 	bl	800d50c <lock_fs>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d101      	bne.n	800e7f6 <find_volume+0x4a>
 800e7f2:	230f      	movs	r3, #15
 800e7f4:	e224      	b.n	800ec40 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800e7f6:	68bb      	ldr	r3, [r7, #8]
 800e7f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e7fa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e7fc:	79fb      	ldrb	r3, [r7, #7]
 800e7fe:	f023 0301 	bic.w	r3, r3, #1
 800e802:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e806:	781b      	ldrb	r3, [r3, #0]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d01a      	beq.n	800e842 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800e80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e80e:	785b      	ldrb	r3, [r3, #1]
 800e810:	4618      	mov	r0, r3
 800e812:	f7fe fcdd 	bl	800d1d0 <disk_status>
 800e816:	4603      	mov	r3, r0
 800e818:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e81c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e820:	f003 0301 	and.w	r3, r3, #1
 800e824:	2b00      	cmp	r3, #0
 800e826:	d10c      	bne.n	800e842 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e828:	79fb      	ldrb	r3, [r7, #7]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d007      	beq.n	800e83e <find_volume+0x92>
 800e82e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e832:	f003 0304 	and.w	r3, r3, #4
 800e836:	2b00      	cmp	r3, #0
 800e838:	d001      	beq.n	800e83e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800e83a:	230a      	movs	r3, #10
 800e83c:	e200      	b.n	800ec40 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800e83e:	2300      	movs	r3, #0
 800e840:	e1fe      	b.n	800ec40 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e844:	2200      	movs	r2, #0
 800e846:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e84a:	b2da      	uxtb	r2, r3
 800e84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e84e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e852:	785b      	ldrb	r3, [r3, #1]
 800e854:	4618      	mov	r0, r3
 800e856:	f7fe fcd5 	bl	800d204 <disk_initialize>
 800e85a:	4603      	mov	r3, r0
 800e85c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e860:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e864:	f003 0301 	and.w	r3, r3, #1
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d001      	beq.n	800e870 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e86c:	2303      	movs	r3, #3
 800e86e:	e1e7      	b.n	800ec40 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e870:	79fb      	ldrb	r3, [r7, #7]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d007      	beq.n	800e886 <find_volume+0xda>
 800e876:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e87a:	f003 0304 	and.w	r3, r3, #4
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d001      	beq.n	800e886 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800e882:	230a      	movs	r3, #10
 800e884:	e1dc      	b.n	800ec40 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e886:	2300      	movs	r3, #0
 800e888:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e88a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e88c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e88e:	f7ff ff37 	bl	800e700 <check_fs>
 800e892:	4603      	mov	r3, r0
 800e894:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e898:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e89c:	2b02      	cmp	r3, #2
 800e89e:	d14b      	bne.n	800e938 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	643b      	str	r3, [r7, #64]	; 0x40
 800e8a4:	e01f      	b.n	800e8e6 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e8a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8a8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e8ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8ae:	011b      	lsls	r3, r3, #4
 800e8b0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e8b4:	4413      	add	r3, r2
 800e8b6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ba:	3304      	adds	r3, #4
 800e8bc:	781b      	ldrb	r3, [r3, #0]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d006      	beq.n	800e8d0 <find_volume+0x124>
 800e8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8c4:	3308      	adds	r3, #8
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	f7fe fd38 	bl	800d33c <ld_dword>
 800e8cc:	4602      	mov	r2, r0
 800e8ce:	e000      	b.n	800e8d2 <find_volume+0x126>
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8d4:	009b      	lsls	r3, r3, #2
 800e8d6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800e8da:	440b      	add	r3, r1
 800e8dc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e8e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8e2:	3301      	adds	r3, #1
 800e8e4:	643b      	str	r3, [r7, #64]	; 0x40
 800e8e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8e8:	2b03      	cmp	r3, #3
 800e8ea:	d9dc      	bls.n	800e8a6 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e8f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d002      	beq.n	800e8fc <find_volume+0x150>
 800e8f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8f8:	3b01      	subs	r3, #1
 800e8fa:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e8fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8fe:	009b      	lsls	r3, r3, #2
 800e900:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800e904:	4413      	add	r3, r2
 800e906:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e90a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e90c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d005      	beq.n	800e91e <find_volume+0x172>
 800e912:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e914:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e916:	f7ff fef3 	bl	800e700 <check_fs>
 800e91a:	4603      	mov	r3, r0
 800e91c:	e000      	b.n	800e920 <find_volume+0x174>
 800e91e:	2303      	movs	r3, #3
 800e920:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e924:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e928:	2b01      	cmp	r3, #1
 800e92a:	d905      	bls.n	800e938 <find_volume+0x18c>
 800e92c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e92e:	3301      	adds	r3, #1
 800e930:	643b      	str	r3, [r7, #64]	; 0x40
 800e932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e934:	2b03      	cmp	r3, #3
 800e936:	d9e1      	bls.n	800e8fc <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e938:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e93c:	2b04      	cmp	r3, #4
 800e93e:	d101      	bne.n	800e944 <find_volume+0x198>
 800e940:	2301      	movs	r3, #1
 800e942:	e17d      	b.n	800ec40 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e944:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e948:	2b01      	cmp	r3, #1
 800e94a:	d901      	bls.n	800e950 <find_volume+0x1a4>
 800e94c:	230d      	movs	r3, #13
 800e94e:	e177      	b.n	800ec40 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e952:	3334      	adds	r3, #52	; 0x34
 800e954:	330b      	adds	r3, #11
 800e956:	4618      	mov	r0, r3
 800e958:	f7fe fcd8 	bl	800d30c <ld_word>
 800e95c:	4603      	mov	r3, r0
 800e95e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e962:	d001      	beq.n	800e968 <find_volume+0x1bc>
 800e964:	230d      	movs	r3, #13
 800e966:	e16b      	b.n	800ec40 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e96a:	3334      	adds	r3, #52	; 0x34
 800e96c:	3316      	adds	r3, #22
 800e96e:	4618      	mov	r0, r3
 800e970:	f7fe fccc 	bl	800d30c <ld_word>
 800e974:	4603      	mov	r3, r0
 800e976:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d106      	bne.n	800e98c <find_volume+0x1e0>
 800e97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e980:	3334      	adds	r3, #52	; 0x34
 800e982:	3324      	adds	r3, #36	; 0x24
 800e984:	4618      	mov	r0, r3
 800e986:	f7fe fcd9 	bl	800d33c <ld_dword>
 800e98a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e98e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e990:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e994:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e99a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e99e:	789b      	ldrb	r3, [r3, #2]
 800e9a0:	2b01      	cmp	r3, #1
 800e9a2:	d005      	beq.n	800e9b0 <find_volume+0x204>
 800e9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9a6:	789b      	ldrb	r3, [r3, #2]
 800e9a8:	2b02      	cmp	r3, #2
 800e9aa:	d001      	beq.n	800e9b0 <find_volume+0x204>
 800e9ac:	230d      	movs	r3, #13
 800e9ae:	e147      	b.n	800ec40 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9b2:	789b      	ldrb	r3, [r3, #2]
 800e9b4:	461a      	mov	r2, r3
 800e9b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9b8:	fb02 f303 	mul.w	r3, r2, r3
 800e9bc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e9c4:	b29a      	uxth	r2, r3
 800e9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9c8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9cc:	895b      	ldrh	r3, [r3, #10]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d008      	beq.n	800e9e4 <find_volume+0x238>
 800e9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9d4:	895b      	ldrh	r3, [r3, #10]
 800e9d6:	461a      	mov	r2, r3
 800e9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9da:	895b      	ldrh	r3, [r3, #10]
 800e9dc:	3b01      	subs	r3, #1
 800e9de:	4013      	ands	r3, r2
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d001      	beq.n	800e9e8 <find_volume+0x23c>
 800e9e4:	230d      	movs	r3, #13
 800e9e6:	e12b      	b.n	800ec40 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ea:	3334      	adds	r3, #52	; 0x34
 800e9ec:	3311      	adds	r3, #17
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f7fe fc8c 	bl	800d30c <ld_word>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	461a      	mov	r2, r3
 800e9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9fa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9fe:	891b      	ldrh	r3, [r3, #8]
 800ea00:	f003 030f 	and.w	r3, r3, #15
 800ea04:	b29b      	uxth	r3, r3
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d001      	beq.n	800ea0e <find_volume+0x262>
 800ea0a:	230d      	movs	r3, #13
 800ea0c:	e118      	b.n	800ec40 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ea0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea10:	3334      	adds	r3, #52	; 0x34
 800ea12:	3313      	adds	r3, #19
 800ea14:	4618      	mov	r0, r3
 800ea16:	f7fe fc79 	bl	800d30c <ld_word>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ea1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d106      	bne.n	800ea32 <find_volume+0x286>
 800ea24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea26:	3334      	adds	r3, #52	; 0x34
 800ea28:	3320      	adds	r3, #32
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f7fe fc86 	bl	800d33c <ld_dword>
 800ea30:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ea32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea34:	3334      	adds	r3, #52	; 0x34
 800ea36:	330e      	adds	r3, #14
 800ea38:	4618      	mov	r0, r3
 800ea3a:	f7fe fc67 	bl	800d30c <ld_word>
 800ea3e:	4603      	mov	r3, r0
 800ea40:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ea42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d101      	bne.n	800ea4c <find_volume+0x2a0>
 800ea48:	230d      	movs	r3, #13
 800ea4a:	e0f9      	b.n	800ec40 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ea4c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ea4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea50:	4413      	add	r3, r2
 800ea52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea54:	8912      	ldrh	r2, [r2, #8]
 800ea56:	0912      	lsrs	r2, r2, #4
 800ea58:	b292      	uxth	r2, r2
 800ea5a:	4413      	add	r3, r2
 800ea5c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ea5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea62:	429a      	cmp	r2, r3
 800ea64:	d201      	bcs.n	800ea6a <find_volume+0x2be>
 800ea66:	230d      	movs	r3, #13
 800ea68:	e0ea      	b.n	800ec40 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ea6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea6e:	1ad3      	subs	r3, r2, r3
 800ea70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea72:	8952      	ldrh	r2, [r2, #10]
 800ea74:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea78:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ea7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d103      	bne.n	800ea88 <find_volume+0x2dc>
 800ea80:	230d      	movs	r3, #13
 800ea82:	e0dd      	b.n	800ec40 <find_volume+0x494>
 800ea84:	200000b4 	.word	0x200000b4
		fmt = FS_FAT32;
 800ea88:	2303      	movs	r3, #3
 800ea8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ea8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea90:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ea94:	4293      	cmp	r3, r2
 800ea96:	d802      	bhi.n	800ea9e <find_volume+0x2f2>
 800ea98:	2302      	movs	r3, #2
 800ea9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ea9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800eaa4:	4293      	cmp	r3, r2
 800eaa6:	d802      	bhi.n	800eaae <find_volume+0x302>
 800eaa8:	2301      	movs	r3, #1
 800eaaa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800eaae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eab0:	1c9a      	adds	r2, r3, #2
 800eab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eab4:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800eab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eab8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eaba:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800eabc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800eabe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eac0:	441a      	add	r2, r3
 800eac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eac4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800eac6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaca:	441a      	add	r2, r3
 800eacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eace:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800ead0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ead4:	2b03      	cmp	r3, #3
 800ead6:	d11e      	bne.n	800eb16 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ead8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eada:	3334      	adds	r3, #52	; 0x34
 800eadc:	332a      	adds	r3, #42	; 0x2a
 800eade:	4618      	mov	r0, r3
 800eae0:	f7fe fc14 	bl	800d30c <ld_word>
 800eae4:	4603      	mov	r3, r0
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d001      	beq.n	800eaee <find_volume+0x342>
 800eaea:	230d      	movs	r3, #13
 800eaec:	e0a8      	b.n	800ec40 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800eaee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaf0:	891b      	ldrh	r3, [r3, #8]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d001      	beq.n	800eafa <find_volume+0x34e>
 800eaf6:	230d      	movs	r3, #13
 800eaf8:	e0a2      	b.n	800ec40 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800eafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eafc:	3334      	adds	r3, #52	; 0x34
 800eafe:	332c      	adds	r3, #44	; 0x2c
 800eb00:	4618      	mov	r0, r3
 800eb02:	f7fe fc1b 	bl	800d33c <ld_dword>
 800eb06:	4602      	mov	r2, r0
 800eb08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb0a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800eb0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb0e:	699b      	ldr	r3, [r3, #24]
 800eb10:	009b      	lsls	r3, r3, #2
 800eb12:	647b      	str	r3, [r7, #68]	; 0x44
 800eb14:	e01f      	b.n	800eb56 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800eb16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb18:	891b      	ldrh	r3, [r3, #8]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d101      	bne.n	800eb22 <find_volume+0x376>
 800eb1e:	230d      	movs	r3, #13
 800eb20:	e08e      	b.n	800ec40 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800eb22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eb26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb28:	441a      	add	r2, r3
 800eb2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb2c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800eb2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eb32:	2b02      	cmp	r3, #2
 800eb34:	d103      	bne.n	800eb3e <find_volume+0x392>
 800eb36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb38:	699b      	ldr	r3, [r3, #24]
 800eb3a:	005b      	lsls	r3, r3, #1
 800eb3c:	e00a      	b.n	800eb54 <find_volume+0x3a8>
 800eb3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb40:	699a      	ldr	r2, [r3, #24]
 800eb42:	4613      	mov	r3, r2
 800eb44:	005b      	lsls	r3, r3, #1
 800eb46:	4413      	add	r3, r2
 800eb48:	085a      	lsrs	r2, r3, #1
 800eb4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb4c:	699b      	ldr	r3, [r3, #24]
 800eb4e:	f003 0301 	and.w	r3, r3, #1
 800eb52:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800eb54:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800eb56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb58:	69da      	ldr	r2, [r3, #28]
 800eb5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb5c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800eb60:	0a5b      	lsrs	r3, r3, #9
 800eb62:	429a      	cmp	r2, r3
 800eb64:	d201      	bcs.n	800eb6a <find_volume+0x3be>
 800eb66:	230d      	movs	r3, #13
 800eb68:	e06a      	b.n	800ec40 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800eb6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb6c:	f04f 32ff 	mov.w	r2, #4294967295
 800eb70:	615a      	str	r2, [r3, #20]
 800eb72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb74:	695a      	ldr	r2, [r3, #20]
 800eb76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb78:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800eb7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb7c:	2280      	movs	r2, #128	; 0x80
 800eb7e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800eb80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eb84:	2b03      	cmp	r3, #3
 800eb86:	d149      	bne.n	800ec1c <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800eb88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb8a:	3334      	adds	r3, #52	; 0x34
 800eb8c:	3330      	adds	r3, #48	; 0x30
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f7fe fbbc 	bl	800d30c <ld_word>
 800eb94:	4603      	mov	r3, r0
 800eb96:	2b01      	cmp	r3, #1
 800eb98:	d140      	bne.n	800ec1c <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800eb9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb9c:	3301      	adds	r3, #1
 800eb9e:	4619      	mov	r1, r3
 800eba0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800eba2:	f7fe fe95 	bl	800d8d0 <move_window>
 800eba6:	4603      	mov	r3, r0
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d137      	bne.n	800ec1c <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800ebac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebae:	2200      	movs	r2, #0
 800ebb0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ebb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebb4:	3334      	adds	r3, #52	; 0x34
 800ebb6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f7fe fba6 	bl	800d30c <ld_word>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	461a      	mov	r2, r3
 800ebc4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ebc8:	429a      	cmp	r2, r3
 800ebca:	d127      	bne.n	800ec1c <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ebcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebce:	3334      	adds	r3, #52	; 0x34
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	f7fe fbb3 	bl	800d33c <ld_dword>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	4a1b      	ldr	r2, [pc, #108]	; (800ec48 <find_volume+0x49c>)
 800ebda:	4293      	cmp	r3, r2
 800ebdc:	d11e      	bne.n	800ec1c <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ebde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebe0:	3334      	adds	r3, #52	; 0x34
 800ebe2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f7fe fba8 	bl	800d33c <ld_dword>
 800ebec:	4603      	mov	r3, r0
 800ebee:	4a17      	ldr	r2, [pc, #92]	; (800ec4c <find_volume+0x4a0>)
 800ebf0:	4293      	cmp	r3, r2
 800ebf2:	d113      	bne.n	800ec1c <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ebf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebf6:	3334      	adds	r3, #52	; 0x34
 800ebf8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	f7fe fb9d 	bl	800d33c <ld_dword>
 800ec02:	4602      	mov	r2, r0
 800ec04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec06:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ec08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec0a:	3334      	adds	r3, #52	; 0x34
 800ec0c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ec10:	4618      	mov	r0, r3
 800ec12:	f7fe fb93 	bl	800d33c <ld_dword>
 800ec16:	4602      	mov	r2, r0
 800ec18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec1a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ec1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec1e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ec22:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ec24:	4b0a      	ldr	r3, [pc, #40]	; (800ec50 <find_volume+0x4a4>)
 800ec26:	881b      	ldrh	r3, [r3, #0]
 800ec28:	3301      	adds	r3, #1
 800ec2a:	b29a      	uxth	r2, r3
 800ec2c:	4b08      	ldr	r3, [pc, #32]	; (800ec50 <find_volume+0x4a4>)
 800ec2e:	801a      	strh	r2, [r3, #0]
 800ec30:	4b07      	ldr	r3, [pc, #28]	; (800ec50 <find_volume+0x4a4>)
 800ec32:	881a      	ldrh	r2, [r3, #0]
 800ec34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec36:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ec38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ec3a:	f7fe fde1 	bl	800d800 <clear_lock>
#endif
	return FR_OK;
 800ec3e:	2300      	movs	r3, #0
}
 800ec40:	4618      	mov	r0, r3
 800ec42:	3758      	adds	r7, #88	; 0x58
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bd80      	pop	{r7, pc}
 800ec48:	41615252 	.word	0x41615252
 800ec4c:	61417272 	.word	0x61417272
 800ec50:	200000b8 	.word	0x200000b8

0800ec54 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b084      	sub	sp, #16
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
 800ec5c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ec5e:	2309      	movs	r3, #9
 800ec60:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d02e      	beq.n	800ecc6 <validate+0x72>
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d02a      	beq.n	800ecc6 <validate+0x72>
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	781b      	ldrb	r3, [r3, #0]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d025      	beq.n	800ecc6 <validate+0x72>
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	889a      	ldrh	r2, [r3, #4]
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	88db      	ldrh	r3, [r3, #6]
 800ec84:	429a      	cmp	r2, r3
 800ec86:	d11e      	bne.n	800ecc6 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f7fe fc3d 	bl	800d50c <lock_fs>
 800ec92:	4603      	mov	r3, r0
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d014      	beq.n	800ecc2 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	785b      	ldrb	r3, [r3, #1]
 800ec9e:	4618      	mov	r0, r3
 800eca0:	f7fe fa96 	bl	800d1d0 <disk_status>
 800eca4:	4603      	mov	r3, r0
 800eca6:	f003 0301 	and.w	r3, r3, #1
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d102      	bne.n	800ecb4 <validate+0x60>
				res = FR_OK;
 800ecae:	2300      	movs	r3, #0
 800ecb0:	73fb      	strb	r3, [r7, #15]
 800ecb2:	e008      	b.n	800ecc6 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	2100      	movs	r1, #0
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f7fe fc3c 	bl	800d538 <unlock_fs>
 800ecc0:	e001      	b.n	800ecc6 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800ecc2:	230f      	movs	r3, #15
 800ecc4:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ecc6:	7bfb      	ldrb	r3, [r7, #15]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d102      	bne.n	800ecd2 <validate+0x7e>
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	e000      	b.n	800ecd4 <validate+0x80>
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	683a      	ldr	r2, [r7, #0]
 800ecd6:	6013      	str	r3, [r2, #0]
	return res;
 800ecd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecda:	4618      	mov	r0, r3
 800ecdc:	3710      	adds	r7, #16
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bd80      	pop	{r7, pc}
	...

0800ece4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b088      	sub	sp, #32
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	60f8      	str	r0, [r7, #12]
 800ecec:	60b9      	str	r1, [r7, #8]
 800ecee:	4613      	mov	r3, r2
 800ecf0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ecf2:	68bb      	ldr	r3, [r7, #8]
 800ecf4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ecf6:	f107 0310 	add.w	r3, r7, #16
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f7ff fcbb 	bl	800e676 <get_ldnumber>
 800ed00:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ed02:	69fb      	ldr	r3, [r7, #28]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	da01      	bge.n	800ed0c <f_mount+0x28>
 800ed08:	230b      	movs	r3, #11
 800ed0a:	e048      	b.n	800ed9e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ed0c:	4a26      	ldr	r2, [pc, #152]	; (800eda8 <f_mount+0xc4>)
 800ed0e:	69fb      	ldr	r3, [r7, #28]
 800ed10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed14:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ed16:	69bb      	ldr	r3, [r7, #24]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d00f      	beq.n	800ed3c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ed1c:	69b8      	ldr	r0, [r7, #24]
 800ed1e:	f7fe fd6f 	bl	800d800 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800ed22:	69bb      	ldr	r3, [r7, #24]
 800ed24:	68db      	ldr	r3, [r3, #12]
 800ed26:	4618      	mov	r0, r3
 800ed28:	f001 fa75 	bl	8010216 <ff_del_syncobj>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d101      	bne.n	800ed36 <f_mount+0x52>
 800ed32:	2302      	movs	r3, #2
 800ed34:	e033      	b.n	800ed9e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ed36:	69bb      	ldr	r3, [r7, #24]
 800ed38:	2200      	movs	r2, #0
 800ed3a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d00f      	beq.n	800ed62 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	2200      	movs	r2, #0
 800ed46:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800ed48:	69fb      	ldr	r3, [r7, #28]
 800ed4a:	b2da      	uxtb	r2, r3
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	330c      	adds	r3, #12
 800ed50:	4619      	mov	r1, r3
 800ed52:	4610      	mov	r0, r2
 800ed54:	f001 fa41 	bl	80101da <ff_cre_syncobj>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d101      	bne.n	800ed62 <f_mount+0x7e>
 800ed5e:	2302      	movs	r3, #2
 800ed60:	e01d      	b.n	800ed9e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ed62:	68fa      	ldr	r2, [r7, #12]
 800ed64:	4910      	ldr	r1, [pc, #64]	; (800eda8 <f_mount+0xc4>)
 800ed66:	69fb      	ldr	r3, [r7, #28]
 800ed68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d002      	beq.n	800ed78 <f_mount+0x94>
 800ed72:	79fb      	ldrb	r3, [r7, #7]
 800ed74:	2b01      	cmp	r3, #1
 800ed76:	d001      	beq.n	800ed7c <f_mount+0x98>
 800ed78:	2300      	movs	r3, #0
 800ed7a:	e010      	b.n	800ed9e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ed7c:	f107 010c 	add.w	r1, r7, #12
 800ed80:	f107 0308 	add.w	r3, r7, #8
 800ed84:	2200      	movs	r2, #0
 800ed86:	4618      	mov	r0, r3
 800ed88:	f7ff fd10 	bl	800e7ac <find_volume>
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	7dfa      	ldrb	r2, [r7, #23]
 800ed94:	4611      	mov	r1, r2
 800ed96:	4618      	mov	r0, r3
 800ed98:	f7fe fbce 	bl	800d538 <unlock_fs>
 800ed9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed9e:	4618      	mov	r0, r3
 800eda0:	3720      	adds	r7, #32
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}
 800eda6:	bf00      	nop
 800eda8:	200000b4 	.word	0x200000b4

0800edac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b098      	sub	sp, #96	; 0x60
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	60f8      	str	r0, [r7, #12]
 800edb4:	60b9      	str	r1, [r7, #8]
 800edb6:	4613      	mov	r3, r2
 800edb8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d101      	bne.n	800edc4 <f_open+0x18>
 800edc0:	2309      	movs	r3, #9
 800edc2:	e1b4      	b.n	800f12e <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800edc4:	79fb      	ldrb	r3, [r7, #7]
 800edc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800edca:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800edcc:	79fa      	ldrb	r2, [r7, #7]
 800edce:	f107 0110 	add.w	r1, r7, #16
 800edd2:	f107 0308 	add.w	r3, r7, #8
 800edd6:	4618      	mov	r0, r3
 800edd8:	f7ff fce8 	bl	800e7ac <find_volume>
 800eddc:	4603      	mov	r3, r0
 800edde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800ede2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	f040 8191 	bne.w	800f10e <f_open+0x362>
		dj.obj.fs = fs;
 800edec:	693b      	ldr	r3, [r7, #16]
 800edee:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800edf0:	68ba      	ldr	r2, [r7, #8]
 800edf2:	f107 0314 	add.w	r3, r7, #20
 800edf6:	4611      	mov	r1, r2
 800edf8:	4618      	mov	r0, r3
 800edfa:	f7ff fbcb 	bl	800e594 <follow_path>
 800edfe:	4603      	mov	r3, r0
 800ee00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ee04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d11a      	bne.n	800ee42 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ee0c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ee10:	b25b      	sxtb	r3, r3
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	da03      	bge.n	800ee1e <f_open+0x72>
				res = FR_INVALID_NAME;
 800ee16:	2306      	movs	r3, #6
 800ee18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ee1c:	e011      	b.n	800ee42 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ee1e:	79fb      	ldrb	r3, [r7, #7]
 800ee20:	f023 0301 	bic.w	r3, r3, #1
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	bf14      	ite	ne
 800ee28:	2301      	movne	r3, #1
 800ee2a:	2300      	moveq	r3, #0
 800ee2c:	b2db      	uxtb	r3, r3
 800ee2e:	461a      	mov	r2, r3
 800ee30:	f107 0314 	add.w	r3, r7, #20
 800ee34:	4611      	mov	r1, r2
 800ee36:	4618      	mov	r0, r3
 800ee38:	f7fe fb9a 	bl	800d570 <chk_lock>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ee42:	79fb      	ldrb	r3, [r7, #7]
 800ee44:	f003 031c 	and.w	r3, r3, #28
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d07f      	beq.n	800ef4c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ee4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d017      	beq.n	800ee84 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ee54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ee58:	2b04      	cmp	r3, #4
 800ee5a:	d10e      	bne.n	800ee7a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ee5c:	f7fe fbe4 	bl	800d628 <enq_lock>
 800ee60:	4603      	mov	r3, r0
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d006      	beq.n	800ee74 <f_open+0xc8>
 800ee66:	f107 0314 	add.w	r3, r7, #20
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f7ff facb 	bl	800e406 <dir_register>
 800ee70:	4603      	mov	r3, r0
 800ee72:	e000      	b.n	800ee76 <f_open+0xca>
 800ee74:	2312      	movs	r3, #18
 800ee76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ee7a:	79fb      	ldrb	r3, [r7, #7]
 800ee7c:	f043 0308 	orr.w	r3, r3, #8
 800ee80:	71fb      	strb	r3, [r7, #7]
 800ee82:	e010      	b.n	800eea6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ee84:	7ebb      	ldrb	r3, [r7, #26]
 800ee86:	f003 0311 	and.w	r3, r3, #17
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d003      	beq.n	800ee96 <f_open+0xea>
					res = FR_DENIED;
 800ee8e:	2307      	movs	r3, #7
 800ee90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ee94:	e007      	b.n	800eea6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ee96:	79fb      	ldrb	r3, [r7, #7]
 800ee98:	f003 0304 	and.w	r3, r3, #4
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d002      	beq.n	800eea6 <f_open+0xfa>
 800eea0:	2308      	movs	r3, #8
 800eea2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800eea6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d168      	bne.n	800ef80 <f_open+0x1d4>
 800eeae:	79fb      	ldrb	r3, [r7, #7]
 800eeb0:	f003 0308 	and.w	r3, r3, #8
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d063      	beq.n	800ef80 <f_open+0x1d4>
				dw = GET_FATTIME();
 800eeb8:	f004 f890 	bl	8012fdc <get_fattime>
 800eebc:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800eebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eec0:	330e      	adds	r3, #14
 800eec2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800eec4:	4618      	mov	r0, r3
 800eec6:	f7fe fa77 	bl	800d3b8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800eeca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eecc:	3316      	adds	r3, #22
 800eece:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800eed0:	4618      	mov	r0, r3
 800eed2:	f7fe fa71 	bl	800d3b8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800eed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eed8:	330b      	adds	r3, #11
 800eeda:	2220      	movs	r2, #32
 800eedc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800eede:	693b      	ldr	r3, [r7, #16]
 800eee0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eee2:	4611      	mov	r1, r2
 800eee4:	4618      	mov	r0, r3
 800eee6:	f7ff f9fa 	bl	800e2de <ld_clust>
 800eeea:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800eeec:	693b      	ldr	r3, [r7, #16]
 800eeee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800eef0:	2200      	movs	r2, #0
 800eef2:	4618      	mov	r0, r3
 800eef4:	f7ff fa12 	bl	800e31c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800eef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eefa:	331c      	adds	r3, #28
 800eefc:	2100      	movs	r1, #0
 800eefe:	4618      	mov	r0, r3
 800ef00:	f7fe fa5a 	bl	800d3b8 <st_dword>
					fs->wflag = 1;
 800ef04:	693b      	ldr	r3, [r7, #16]
 800ef06:	2201      	movs	r2, #1
 800ef08:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ef0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d037      	beq.n	800ef80 <f_open+0x1d4>
						dw = fs->winsect;
 800ef10:	693b      	ldr	r3, [r7, #16]
 800ef12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef14:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ef16:	f107 0314 	add.w	r3, r7, #20
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ef1e:	4618      	mov	r0, r3
 800ef20:	f7fe ff25 	bl	800dd6e <remove_chain>
 800ef24:	4603      	mov	r3, r0
 800ef26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800ef2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d126      	bne.n	800ef80 <f_open+0x1d4>
							res = move_window(fs, dw);
 800ef32:	693b      	ldr	r3, [r7, #16]
 800ef34:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ef36:	4618      	mov	r0, r3
 800ef38:	f7fe fcca 	bl	800d8d0 <move_window>
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ef42:	693b      	ldr	r3, [r7, #16]
 800ef44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ef46:	3a01      	subs	r2, #1
 800ef48:	611a      	str	r2, [r3, #16]
 800ef4a:	e019      	b.n	800ef80 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ef4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d115      	bne.n	800ef80 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ef54:	7ebb      	ldrb	r3, [r7, #26]
 800ef56:	f003 0310 	and.w	r3, r3, #16
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d003      	beq.n	800ef66 <f_open+0x1ba>
					res = FR_NO_FILE;
 800ef5e:	2304      	movs	r3, #4
 800ef60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ef64:	e00c      	b.n	800ef80 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ef66:	79fb      	ldrb	r3, [r7, #7]
 800ef68:	f003 0302 	and.w	r3, r3, #2
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d007      	beq.n	800ef80 <f_open+0x1d4>
 800ef70:	7ebb      	ldrb	r3, [r7, #26]
 800ef72:	f003 0301 	and.w	r3, r3, #1
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d002      	beq.n	800ef80 <f_open+0x1d4>
						res = FR_DENIED;
 800ef7a:	2307      	movs	r3, #7
 800ef7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800ef80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d128      	bne.n	800efda <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ef88:	79fb      	ldrb	r3, [r7, #7]
 800ef8a:	f003 0308 	and.w	r3, r3, #8
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d003      	beq.n	800ef9a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ef92:	79fb      	ldrb	r3, [r7, #7]
 800ef94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef98:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ef9a:	693b      	ldr	r3, [r7, #16]
 800ef9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800efa2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800efa8:	79fb      	ldrb	r3, [r7, #7]
 800efaa:	f023 0301 	bic.w	r3, r3, #1
 800efae:	2b00      	cmp	r3, #0
 800efb0:	bf14      	ite	ne
 800efb2:	2301      	movne	r3, #1
 800efb4:	2300      	moveq	r3, #0
 800efb6:	b2db      	uxtb	r3, r3
 800efb8:	461a      	mov	r2, r3
 800efba:	f107 0314 	add.w	r3, r7, #20
 800efbe:	4611      	mov	r1, r2
 800efc0:	4618      	mov	r0, r3
 800efc2:	f7fe fb53 	bl	800d66c <inc_lock>
 800efc6:	4602      	mov	r2, r0
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	691b      	ldr	r3, [r3, #16]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d102      	bne.n	800efda <f_open+0x22e>
 800efd4:	2302      	movs	r3, #2
 800efd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800efda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800efde:	2b00      	cmp	r3, #0
 800efe0:	f040 8095 	bne.w	800f10e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800efe4:	693b      	ldr	r3, [r7, #16]
 800efe6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800efe8:	4611      	mov	r1, r2
 800efea:	4618      	mov	r0, r3
 800efec:	f7ff f977 	bl	800e2de <ld_clust>
 800eff0:	4602      	mov	r2, r0
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800eff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eff8:	331c      	adds	r3, #28
 800effa:	4618      	mov	r0, r3
 800effc:	f7fe f99e 	bl	800d33c <ld_dword>
 800f000:	4602      	mov	r2, r0
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	2200      	movs	r2, #0
 800f00a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f00c:	693a      	ldr	r2, [r7, #16]
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f012:	693b      	ldr	r3, [r7, #16]
 800f014:	88da      	ldrh	r2, [r3, #6]
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	79fa      	ldrb	r2, [r7, #7]
 800f01e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	2200      	movs	r2, #0
 800f024:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	2200      	movs	r2, #0
 800f02a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	2200      	movs	r2, #0
 800f030:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	3330      	adds	r3, #48	; 0x30
 800f036:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f03a:	2100      	movs	r1, #0
 800f03c:	4618      	mov	r0, r3
 800f03e:	f7fe fa08 	bl	800d452 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f042:	79fb      	ldrb	r3, [r7, #7]
 800f044:	f003 0320 	and.w	r3, r3, #32
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d060      	beq.n	800f10e <f_open+0x362>
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	68db      	ldr	r3, [r3, #12]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d05c      	beq.n	800f10e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	68da      	ldr	r2, [r3, #12]
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f05c:	693b      	ldr	r3, [r7, #16]
 800f05e:	895b      	ldrh	r3, [r3, #10]
 800f060:	025b      	lsls	r3, r3, #9
 800f062:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	689b      	ldr	r3, [r3, #8]
 800f068:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	68db      	ldr	r3, [r3, #12]
 800f06e:	657b      	str	r3, [r7, #84]	; 0x54
 800f070:	e016      	b.n	800f0a0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f076:	4618      	mov	r0, r3
 800f078:	f7fe fce5 	bl	800da46 <get_fat>
 800f07c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800f07e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f080:	2b01      	cmp	r3, #1
 800f082:	d802      	bhi.n	800f08a <f_open+0x2de>
 800f084:	2302      	movs	r3, #2
 800f086:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f08a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f08c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f090:	d102      	bne.n	800f098 <f_open+0x2ec>
 800f092:	2301      	movs	r3, #1
 800f094:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f098:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f09a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f09c:	1ad3      	subs	r3, r2, r3
 800f09e:	657b      	str	r3, [r7, #84]	; 0x54
 800f0a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d103      	bne.n	800f0b0 <f_open+0x304>
 800f0a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f0aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f0ac:	429a      	cmp	r2, r3
 800f0ae:	d8e0      	bhi.n	800f072 <f_open+0x2c6>
				}
				fp->clust = clst;
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f0b4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f0b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d127      	bne.n	800f10e <f_open+0x362>
 800f0be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f0c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d022      	beq.n	800f10e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f0c8:	693b      	ldr	r3, [r7, #16]
 800f0ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f7fe fc9b 	bl	800da08 <clust2sect>
 800f0d2:	6478      	str	r0, [r7, #68]	; 0x44
 800f0d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d103      	bne.n	800f0e2 <f_open+0x336>
						res = FR_INT_ERR;
 800f0da:	2302      	movs	r3, #2
 800f0dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f0e0:	e015      	b.n	800f10e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f0e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f0e4:	0a5a      	lsrs	r2, r3, #9
 800f0e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0e8:	441a      	add	r2, r3
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f0ee:	693b      	ldr	r3, [r7, #16]
 800f0f0:	7858      	ldrb	r0, [r3, #1]
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	6a1a      	ldr	r2, [r3, #32]
 800f0fc:	2301      	movs	r3, #1
 800f0fe:	f7fe f8a7 	bl	800d250 <disk_read>
 800f102:	4603      	mov	r3, r0
 800f104:	2b00      	cmp	r3, #0
 800f106:	d002      	beq.n	800f10e <f_open+0x362>
 800f108:	2301      	movs	r3, #1
 800f10a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f10e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f112:	2b00      	cmp	r3, #0
 800f114:	d002      	beq.n	800f11c <f_open+0x370>
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	2200      	movs	r2, #0
 800f11a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f11c:	693b      	ldr	r3, [r7, #16]
 800f11e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800f122:	4611      	mov	r1, r2
 800f124:	4618      	mov	r0, r3
 800f126:	f7fe fa07 	bl	800d538 <unlock_fs>
 800f12a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800f12e:	4618      	mov	r0, r3
 800f130:	3760      	adds	r7, #96	; 0x60
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}

0800f136 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800f136:	b580      	push	{r7, lr}
 800f138:	b08e      	sub	sp, #56	; 0x38
 800f13a:	af00      	add	r7, sp, #0
 800f13c:	60f8      	str	r0, [r7, #12]
 800f13e:	60b9      	str	r1, [r7, #8]
 800f140:	607a      	str	r2, [r7, #4]
 800f142:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	2200      	movs	r2, #0
 800f14c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	f107 0214 	add.w	r2, r7, #20
 800f154:	4611      	mov	r1, r2
 800f156:	4618      	mov	r0, r3
 800f158:	f7ff fd7c 	bl	800ec54 <validate>
 800f15c:	4603      	mov	r3, r0
 800f15e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f162:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f166:	2b00      	cmp	r3, #0
 800f168:	d107      	bne.n	800f17a <f_read+0x44>
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	7d5b      	ldrb	r3, [r3, #21]
 800f16e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f172:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f176:	2b00      	cmp	r3, #0
 800f178:	d009      	beq.n	800f18e <f_read+0x58>
 800f17a:	697b      	ldr	r3, [r7, #20]
 800f17c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800f180:	4611      	mov	r1, r2
 800f182:	4618      	mov	r0, r3
 800f184:	f7fe f9d8 	bl	800d538 <unlock_fs>
 800f188:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f18c:	e13d      	b.n	800f40a <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	7d1b      	ldrb	r3, [r3, #20]
 800f192:	f003 0301 	and.w	r3, r3, #1
 800f196:	2b00      	cmp	r3, #0
 800f198:	d106      	bne.n	800f1a8 <f_read+0x72>
 800f19a:	697b      	ldr	r3, [r7, #20]
 800f19c:	2107      	movs	r1, #7
 800f19e:	4618      	mov	r0, r3
 800f1a0:	f7fe f9ca 	bl	800d538 <unlock_fs>
 800f1a4:	2307      	movs	r3, #7
 800f1a6:	e130      	b.n	800f40a <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	68da      	ldr	r2, [r3, #12]
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	699b      	ldr	r3, [r3, #24]
 800f1b0:	1ad3      	subs	r3, r2, r3
 800f1b2:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800f1b4:	687a      	ldr	r2, [r7, #4]
 800f1b6:	6a3b      	ldr	r3, [r7, #32]
 800f1b8:	429a      	cmp	r2, r3
 800f1ba:	f240 811c 	bls.w	800f3f6 <f_read+0x2c0>
 800f1be:	6a3b      	ldr	r3, [r7, #32]
 800f1c0:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800f1c2:	e118      	b.n	800f3f6 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	699b      	ldr	r3, [r3, #24]
 800f1c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	f040 80e4 	bne.w	800f39a <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	699b      	ldr	r3, [r3, #24]
 800f1d6:	0a5b      	lsrs	r3, r3, #9
 800f1d8:	697a      	ldr	r2, [r7, #20]
 800f1da:	8952      	ldrh	r2, [r2, #10]
 800f1dc:	3a01      	subs	r2, #1
 800f1de:	4013      	ands	r3, r2
 800f1e0:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800f1e2:	69fb      	ldr	r3, [r7, #28]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d139      	bne.n	800f25c <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	699b      	ldr	r3, [r3, #24]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d103      	bne.n	800f1f8 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	689b      	ldr	r3, [r3, #8]
 800f1f4:	633b      	str	r3, [r7, #48]	; 0x30
 800f1f6:	e013      	b.n	800f220 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d007      	beq.n	800f210 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	699b      	ldr	r3, [r3, #24]
 800f204:	4619      	mov	r1, r3
 800f206:	68f8      	ldr	r0, [r7, #12]
 800f208:	f7fe feae 	bl	800df68 <clmt_clust>
 800f20c:	6338      	str	r0, [r7, #48]	; 0x30
 800f20e:	e007      	b.n	800f220 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800f210:	68fa      	ldr	r2, [r7, #12]
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	69db      	ldr	r3, [r3, #28]
 800f216:	4619      	mov	r1, r3
 800f218:	4610      	mov	r0, r2
 800f21a:	f7fe fc14 	bl	800da46 <get_fat>
 800f21e:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800f220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f222:	2b01      	cmp	r3, #1
 800f224:	d809      	bhi.n	800f23a <f_read+0x104>
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	2202      	movs	r2, #2
 800f22a:	755a      	strb	r2, [r3, #21]
 800f22c:	697b      	ldr	r3, [r7, #20]
 800f22e:	2102      	movs	r1, #2
 800f230:	4618      	mov	r0, r3
 800f232:	f7fe f981 	bl	800d538 <unlock_fs>
 800f236:	2302      	movs	r3, #2
 800f238:	e0e7      	b.n	800f40a <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f23c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f240:	d109      	bne.n	800f256 <f_read+0x120>
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	2201      	movs	r2, #1
 800f246:	755a      	strb	r2, [r3, #21]
 800f248:	697b      	ldr	r3, [r7, #20]
 800f24a:	2101      	movs	r1, #1
 800f24c:	4618      	mov	r0, r3
 800f24e:	f7fe f973 	bl	800d538 <unlock_fs>
 800f252:	2301      	movs	r3, #1
 800f254:	e0d9      	b.n	800f40a <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f25a:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f25c:	697a      	ldr	r2, [r7, #20]
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	69db      	ldr	r3, [r3, #28]
 800f262:	4619      	mov	r1, r3
 800f264:	4610      	mov	r0, r2
 800f266:	f7fe fbcf 	bl	800da08 <clust2sect>
 800f26a:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f26c:	69bb      	ldr	r3, [r7, #24]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d109      	bne.n	800f286 <f_read+0x150>
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	2202      	movs	r2, #2
 800f276:	755a      	strb	r2, [r3, #21]
 800f278:	697b      	ldr	r3, [r7, #20]
 800f27a:	2102      	movs	r1, #2
 800f27c:	4618      	mov	r0, r3
 800f27e:	f7fe f95b 	bl	800d538 <unlock_fs>
 800f282:	2302      	movs	r3, #2
 800f284:	e0c1      	b.n	800f40a <f_read+0x2d4>
			sect += csect;
 800f286:	69ba      	ldr	r2, [r7, #24]
 800f288:	69fb      	ldr	r3, [r7, #28]
 800f28a:	4413      	add	r3, r2
 800f28c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	0a5b      	lsrs	r3, r3, #9
 800f292:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800f294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f296:	2b00      	cmp	r3, #0
 800f298:	d03e      	beq.n	800f318 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f29a:	69fa      	ldr	r2, [r7, #28]
 800f29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f29e:	4413      	add	r3, r2
 800f2a0:	697a      	ldr	r2, [r7, #20]
 800f2a2:	8952      	ldrh	r2, [r2, #10]
 800f2a4:	4293      	cmp	r3, r2
 800f2a6:	d905      	bls.n	800f2b4 <f_read+0x17e>
					cc = fs->csize - csect;
 800f2a8:	697b      	ldr	r3, [r7, #20]
 800f2aa:	895b      	ldrh	r3, [r3, #10]
 800f2ac:	461a      	mov	r2, r3
 800f2ae:	69fb      	ldr	r3, [r7, #28]
 800f2b0:	1ad3      	subs	r3, r2, r3
 800f2b2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	7858      	ldrb	r0, [r3, #1]
 800f2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ba:	69ba      	ldr	r2, [r7, #24]
 800f2bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f2be:	f7fd ffc7 	bl	800d250 <disk_read>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d009      	beq.n	800f2dc <f_read+0x1a6>
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	2201      	movs	r2, #1
 800f2cc:	755a      	strb	r2, [r3, #21]
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	2101      	movs	r1, #1
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f7fe f930 	bl	800d538 <unlock_fs>
 800f2d8:	2301      	movs	r3, #1
 800f2da:	e096      	b.n	800f40a <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	7d1b      	ldrb	r3, [r3, #20]
 800f2e0:	b25b      	sxtb	r3, r3
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	da14      	bge.n	800f310 <f_read+0x1da>
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	6a1a      	ldr	r2, [r3, #32]
 800f2ea:	69bb      	ldr	r3, [r7, #24]
 800f2ec:	1ad3      	subs	r3, r2, r3
 800f2ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f2f0:	429a      	cmp	r2, r3
 800f2f2:	d90d      	bls.n	800f310 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	6a1a      	ldr	r2, [r3, #32]
 800f2f8:	69bb      	ldr	r3, [r7, #24]
 800f2fa:	1ad3      	subs	r3, r2, r3
 800f2fc:	025b      	lsls	r3, r3, #9
 800f2fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f300:	18d0      	adds	r0, r2, r3
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	3330      	adds	r3, #48	; 0x30
 800f306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f30a:	4619      	mov	r1, r3
 800f30c:	f7fe f880 	bl	800d410 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800f310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f312:	025b      	lsls	r3, r3, #9
 800f314:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800f316:	e05a      	b.n	800f3ce <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	6a1b      	ldr	r3, [r3, #32]
 800f31c:	69ba      	ldr	r2, [r7, #24]
 800f31e:	429a      	cmp	r2, r3
 800f320:	d038      	beq.n	800f394 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	7d1b      	ldrb	r3, [r3, #20]
 800f326:	b25b      	sxtb	r3, r3
 800f328:	2b00      	cmp	r3, #0
 800f32a:	da1d      	bge.n	800f368 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f32c:	697b      	ldr	r3, [r7, #20]
 800f32e:	7858      	ldrb	r0, [r3, #1]
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	6a1a      	ldr	r2, [r3, #32]
 800f33a:	2301      	movs	r3, #1
 800f33c:	f7fd ffa8 	bl	800d290 <disk_write>
 800f340:	4603      	mov	r3, r0
 800f342:	2b00      	cmp	r3, #0
 800f344:	d009      	beq.n	800f35a <f_read+0x224>
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	2201      	movs	r2, #1
 800f34a:	755a      	strb	r2, [r3, #21]
 800f34c:	697b      	ldr	r3, [r7, #20]
 800f34e:	2101      	movs	r1, #1
 800f350:	4618      	mov	r0, r3
 800f352:	f7fe f8f1 	bl	800d538 <unlock_fs>
 800f356:	2301      	movs	r3, #1
 800f358:	e057      	b.n	800f40a <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	7d1b      	ldrb	r3, [r3, #20]
 800f35e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f362:	b2da      	uxtb	r2, r3
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f368:	697b      	ldr	r3, [r7, #20]
 800f36a:	7858      	ldrb	r0, [r3, #1]
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f372:	2301      	movs	r3, #1
 800f374:	69ba      	ldr	r2, [r7, #24]
 800f376:	f7fd ff6b 	bl	800d250 <disk_read>
 800f37a:	4603      	mov	r3, r0
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d009      	beq.n	800f394 <f_read+0x25e>
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	2201      	movs	r2, #1
 800f384:	755a      	strb	r2, [r3, #21]
 800f386:	697b      	ldr	r3, [r7, #20]
 800f388:	2101      	movs	r1, #1
 800f38a:	4618      	mov	r0, r3
 800f38c:	f7fe f8d4 	bl	800d538 <unlock_fs>
 800f390:	2301      	movs	r3, #1
 800f392:	e03a      	b.n	800f40a <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	69ba      	ldr	r2, [r7, #24]
 800f398:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	699b      	ldr	r3, [r3, #24]
 800f39e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f3a2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f3a6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800f3a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	429a      	cmp	r2, r3
 800f3ae:	d901      	bls.n	800f3b4 <f_read+0x27e>
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	699b      	ldr	r3, [r3, #24]
 800f3be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f3c2:	4413      	add	r3, r2
 800f3c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3c6:	4619      	mov	r1, r3
 800f3c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f3ca:	f7fe f821 	bl	800d410 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800f3ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3d2:	4413      	add	r3, r2
 800f3d4:	627b      	str	r3, [r7, #36]	; 0x24
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	699a      	ldr	r2, [r3, #24]
 800f3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3dc:	441a      	add	r2, r3
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	619a      	str	r2, [r3, #24]
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	681a      	ldr	r2, [r3, #0]
 800f3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3e8:	441a      	add	r2, r3
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	601a      	str	r2, [r3, #0]
 800f3ee:	687a      	ldr	r2, [r7, #4]
 800f3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3f2:	1ad3      	subs	r3, r2, r3
 800f3f4:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	f47f aee3 	bne.w	800f1c4 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800f3fe:	697b      	ldr	r3, [r7, #20]
 800f400:	2100      	movs	r1, #0
 800f402:	4618      	mov	r0, r3
 800f404:	f7fe f898 	bl	800d538 <unlock_fs>
 800f408:	2300      	movs	r3, #0
}
 800f40a:	4618      	mov	r0, r3
 800f40c:	3738      	adds	r7, #56	; 0x38
 800f40e:	46bd      	mov	sp, r7
 800f410:	bd80      	pop	{r7, pc}

0800f412 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f412:	b580      	push	{r7, lr}
 800f414:	b08c      	sub	sp, #48	; 0x30
 800f416:	af00      	add	r7, sp, #0
 800f418:	60f8      	str	r0, [r7, #12]
 800f41a:	60b9      	str	r1, [r7, #8]
 800f41c:	607a      	str	r2, [r7, #4]
 800f41e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f420:	68bb      	ldr	r3, [r7, #8]
 800f422:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f424:	683b      	ldr	r3, [r7, #0]
 800f426:	2200      	movs	r2, #0
 800f428:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	f107 0210 	add.w	r2, r7, #16
 800f430:	4611      	mov	r1, r2
 800f432:	4618      	mov	r0, r3
 800f434:	f7ff fc0e 	bl	800ec54 <validate>
 800f438:	4603      	mov	r3, r0
 800f43a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f43e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f442:	2b00      	cmp	r3, #0
 800f444:	d107      	bne.n	800f456 <f_write+0x44>
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	7d5b      	ldrb	r3, [r3, #21]
 800f44a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f44e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f452:	2b00      	cmp	r3, #0
 800f454:	d009      	beq.n	800f46a <f_write+0x58>
 800f456:	693b      	ldr	r3, [r7, #16]
 800f458:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f45c:	4611      	mov	r1, r2
 800f45e:	4618      	mov	r0, r3
 800f460:	f7fe f86a 	bl	800d538 <unlock_fs>
 800f464:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f468:	e173      	b.n	800f752 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	7d1b      	ldrb	r3, [r3, #20]
 800f46e:	f003 0302 	and.w	r3, r3, #2
 800f472:	2b00      	cmp	r3, #0
 800f474:	d106      	bne.n	800f484 <f_write+0x72>
 800f476:	693b      	ldr	r3, [r7, #16]
 800f478:	2107      	movs	r1, #7
 800f47a:	4618      	mov	r0, r3
 800f47c:	f7fe f85c 	bl	800d538 <unlock_fs>
 800f480:	2307      	movs	r3, #7
 800f482:	e166      	b.n	800f752 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	699a      	ldr	r2, [r3, #24]
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	441a      	add	r2, r3
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	699b      	ldr	r3, [r3, #24]
 800f490:	429a      	cmp	r2, r3
 800f492:	f080 814b 	bcs.w	800f72c <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	699b      	ldr	r3, [r3, #24]
 800f49a:	43db      	mvns	r3, r3
 800f49c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f49e:	e145      	b.n	800f72c <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	699b      	ldr	r3, [r3, #24]
 800f4a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	f040 8101 	bne.w	800f6b0 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	699b      	ldr	r3, [r3, #24]
 800f4b2:	0a5b      	lsrs	r3, r3, #9
 800f4b4:	693a      	ldr	r2, [r7, #16]
 800f4b6:	8952      	ldrh	r2, [r2, #10]
 800f4b8:	3a01      	subs	r2, #1
 800f4ba:	4013      	ands	r3, r2
 800f4bc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f4be:	69bb      	ldr	r3, [r7, #24]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d14d      	bne.n	800f560 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	699b      	ldr	r3, [r3, #24]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d10c      	bne.n	800f4e6 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	689b      	ldr	r3, [r3, #8]
 800f4d0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d11a      	bne.n	800f50e <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	2100      	movs	r1, #0
 800f4dc:	4618      	mov	r0, r3
 800f4de:	f7fe fcab 	bl	800de38 <create_chain>
 800f4e2:	62b8      	str	r0, [r7, #40]	; 0x28
 800f4e4:	e013      	b.n	800f50e <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d007      	beq.n	800f4fe <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	699b      	ldr	r3, [r3, #24]
 800f4f2:	4619      	mov	r1, r3
 800f4f4:	68f8      	ldr	r0, [r7, #12]
 800f4f6:	f7fe fd37 	bl	800df68 <clmt_clust>
 800f4fa:	62b8      	str	r0, [r7, #40]	; 0x28
 800f4fc:	e007      	b.n	800f50e <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f4fe:	68fa      	ldr	r2, [r7, #12]
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	69db      	ldr	r3, [r3, #28]
 800f504:	4619      	mov	r1, r3
 800f506:	4610      	mov	r0, r2
 800f508:	f7fe fc96 	bl	800de38 <create_chain>
 800f50c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f510:	2b00      	cmp	r3, #0
 800f512:	f000 8110 	beq.w	800f736 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f518:	2b01      	cmp	r3, #1
 800f51a:	d109      	bne.n	800f530 <f_write+0x11e>
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	2202      	movs	r2, #2
 800f520:	755a      	strb	r2, [r3, #21]
 800f522:	693b      	ldr	r3, [r7, #16]
 800f524:	2102      	movs	r1, #2
 800f526:	4618      	mov	r0, r3
 800f528:	f7fe f806 	bl	800d538 <unlock_fs>
 800f52c:	2302      	movs	r3, #2
 800f52e:	e110      	b.n	800f752 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f532:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f536:	d109      	bne.n	800f54c <f_write+0x13a>
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	2201      	movs	r2, #1
 800f53c:	755a      	strb	r2, [r3, #21]
 800f53e:	693b      	ldr	r3, [r7, #16]
 800f540:	2101      	movs	r1, #1
 800f542:	4618      	mov	r0, r3
 800f544:	f7fd fff8 	bl	800d538 <unlock_fs>
 800f548:	2301      	movs	r3, #1
 800f54a:	e102      	b.n	800f752 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f550:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	689b      	ldr	r3, [r3, #8]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d102      	bne.n	800f560 <f_write+0x14e>
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f55e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	7d1b      	ldrb	r3, [r3, #20]
 800f564:	b25b      	sxtb	r3, r3
 800f566:	2b00      	cmp	r3, #0
 800f568:	da1d      	bge.n	800f5a6 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f56a:	693b      	ldr	r3, [r7, #16]
 800f56c:	7858      	ldrb	r0, [r3, #1]
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	6a1a      	ldr	r2, [r3, #32]
 800f578:	2301      	movs	r3, #1
 800f57a:	f7fd fe89 	bl	800d290 <disk_write>
 800f57e:	4603      	mov	r3, r0
 800f580:	2b00      	cmp	r3, #0
 800f582:	d009      	beq.n	800f598 <f_write+0x186>
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	2201      	movs	r2, #1
 800f588:	755a      	strb	r2, [r3, #21]
 800f58a:	693b      	ldr	r3, [r7, #16]
 800f58c:	2101      	movs	r1, #1
 800f58e:	4618      	mov	r0, r3
 800f590:	f7fd ffd2 	bl	800d538 <unlock_fs>
 800f594:	2301      	movs	r3, #1
 800f596:	e0dc      	b.n	800f752 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	7d1b      	ldrb	r3, [r3, #20]
 800f59c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f5a0:	b2da      	uxtb	r2, r3
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f5a6:	693a      	ldr	r2, [r7, #16]
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	69db      	ldr	r3, [r3, #28]
 800f5ac:	4619      	mov	r1, r3
 800f5ae:	4610      	mov	r0, r2
 800f5b0:	f7fe fa2a 	bl	800da08 <clust2sect>
 800f5b4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f5b6:	697b      	ldr	r3, [r7, #20]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d109      	bne.n	800f5d0 <f_write+0x1be>
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	2202      	movs	r2, #2
 800f5c0:	755a      	strb	r2, [r3, #21]
 800f5c2:	693b      	ldr	r3, [r7, #16]
 800f5c4:	2102      	movs	r1, #2
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	f7fd ffb6 	bl	800d538 <unlock_fs>
 800f5cc:	2302      	movs	r3, #2
 800f5ce:	e0c0      	b.n	800f752 <f_write+0x340>
			sect += csect;
 800f5d0:	697a      	ldr	r2, [r7, #20]
 800f5d2:	69bb      	ldr	r3, [r7, #24]
 800f5d4:	4413      	add	r3, r2
 800f5d6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	0a5b      	lsrs	r3, r3, #9
 800f5dc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f5de:	6a3b      	ldr	r3, [r7, #32]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d041      	beq.n	800f668 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f5e4:	69ba      	ldr	r2, [r7, #24]
 800f5e6:	6a3b      	ldr	r3, [r7, #32]
 800f5e8:	4413      	add	r3, r2
 800f5ea:	693a      	ldr	r2, [r7, #16]
 800f5ec:	8952      	ldrh	r2, [r2, #10]
 800f5ee:	4293      	cmp	r3, r2
 800f5f0:	d905      	bls.n	800f5fe <f_write+0x1ec>
					cc = fs->csize - csect;
 800f5f2:	693b      	ldr	r3, [r7, #16]
 800f5f4:	895b      	ldrh	r3, [r3, #10]
 800f5f6:	461a      	mov	r2, r3
 800f5f8:	69bb      	ldr	r3, [r7, #24]
 800f5fa:	1ad3      	subs	r3, r2, r3
 800f5fc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f5fe:	693b      	ldr	r3, [r7, #16]
 800f600:	7858      	ldrb	r0, [r3, #1]
 800f602:	6a3b      	ldr	r3, [r7, #32]
 800f604:	697a      	ldr	r2, [r7, #20]
 800f606:	69f9      	ldr	r1, [r7, #28]
 800f608:	f7fd fe42 	bl	800d290 <disk_write>
 800f60c:	4603      	mov	r3, r0
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d009      	beq.n	800f626 <f_write+0x214>
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	2201      	movs	r2, #1
 800f616:	755a      	strb	r2, [r3, #21]
 800f618:	693b      	ldr	r3, [r7, #16]
 800f61a:	2101      	movs	r1, #1
 800f61c:	4618      	mov	r0, r3
 800f61e:	f7fd ff8b 	bl	800d538 <unlock_fs>
 800f622:	2301      	movs	r3, #1
 800f624:	e095      	b.n	800f752 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	6a1a      	ldr	r2, [r3, #32]
 800f62a:	697b      	ldr	r3, [r7, #20]
 800f62c:	1ad3      	subs	r3, r2, r3
 800f62e:	6a3a      	ldr	r2, [r7, #32]
 800f630:	429a      	cmp	r2, r3
 800f632:	d915      	bls.n	800f660 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	6a1a      	ldr	r2, [r3, #32]
 800f63e:	697b      	ldr	r3, [r7, #20]
 800f640:	1ad3      	subs	r3, r2, r3
 800f642:	025b      	lsls	r3, r3, #9
 800f644:	69fa      	ldr	r2, [r7, #28]
 800f646:	4413      	add	r3, r2
 800f648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f64c:	4619      	mov	r1, r3
 800f64e:	f7fd fedf 	bl	800d410 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	7d1b      	ldrb	r3, [r3, #20]
 800f656:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f65a:	b2da      	uxtb	r2, r3
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f660:	6a3b      	ldr	r3, [r7, #32]
 800f662:	025b      	lsls	r3, r3, #9
 800f664:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800f666:	e044      	b.n	800f6f2 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	6a1b      	ldr	r3, [r3, #32]
 800f66c:	697a      	ldr	r2, [r7, #20]
 800f66e:	429a      	cmp	r2, r3
 800f670:	d01b      	beq.n	800f6aa <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	699a      	ldr	r2, [r3, #24]
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f67a:	429a      	cmp	r2, r3
 800f67c:	d215      	bcs.n	800f6aa <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f67e:	693b      	ldr	r3, [r7, #16]
 800f680:	7858      	ldrb	r0, [r3, #1]
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f688:	2301      	movs	r3, #1
 800f68a:	697a      	ldr	r2, [r7, #20]
 800f68c:	f7fd fde0 	bl	800d250 <disk_read>
 800f690:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f692:	2b00      	cmp	r3, #0
 800f694:	d009      	beq.n	800f6aa <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	2201      	movs	r2, #1
 800f69a:	755a      	strb	r2, [r3, #21]
 800f69c:	693b      	ldr	r3, [r7, #16]
 800f69e:	2101      	movs	r1, #1
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	f7fd ff49 	bl	800d538 <unlock_fs>
 800f6a6:	2301      	movs	r3, #1
 800f6a8:	e053      	b.n	800f752 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	697a      	ldr	r2, [r7, #20]
 800f6ae:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	699b      	ldr	r3, [r3, #24]
 800f6b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f6b8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f6bc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f6be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	429a      	cmp	r2, r3
 800f6c4:	d901      	bls.n	800f6ca <f_write+0x2b8>
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	699b      	ldr	r3, [r3, #24]
 800f6d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f6d8:	4413      	add	r3, r2
 800f6da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6dc:	69f9      	ldr	r1, [r7, #28]
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f7fd fe96 	bl	800d410 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	7d1b      	ldrb	r3, [r3, #20]
 800f6e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f6ec:	b2da      	uxtb	r2, r3
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f6f2:	69fa      	ldr	r2, [r7, #28]
 800f6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6f6:	4413      	add	r3, r2
 800f6f8:	61fb      	str	r3, [r7, #28]
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	699a      	ldr	r2, [r3, #24]
 800f6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f700:	441a      	add	r2, r3
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	619a      	str	r2, [r3, #24]
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	68da      	ldr	r2, [r3, #12]
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	699b      	ldr	r3, [r3, #24]
 800f70e:	429a      	cmp	r2, r3
 800f710:	bf38      	it	cc
 800f712:	461a      	movcc	r2, r3
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	60da      	str	r2, [r3, #12]
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	681a      	ldr	r2, [r3, #0]
 800f71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f71e:	441a      	add	r2, r3
 800f720:	683b      	ldr	r3, [r7, #0]
 800f722:	601a      	str	r2, [r3, #0]
 800f724:	687a      	ldr	r2, [r7, #4]
 800f726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f728:	1ad3      	subs	r3, r2, r3
 800f72a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	f47f aeb6 	bne.w	800f4a0 <f_write+0x8e>
 800f734:	e000      	b.n	800f738 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f736:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	7d1b      	ldrb	r3, [r3, #20]
 800f73c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f740:	b2da      	uxtb	r2, r3
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800f746:	693b      	ldr	r3, [r7, #16]
 800f748:	2100      	movs	r1, #0
 800f74a:	4618      	mov	r0, r3
 800f74c:	f7fd fef4 	bl	800d538 <unlock_fs>
 800f750:	2300      	movs	r3, #0
}
 800f752:	4618      	mov	r0, r3
 800f754:	3730      	adds	r7, #48	; 0x30
 800f756:	46bd      	mov	sp, r7
 800f758:	bd80      	pop	{r7, pc}

0800f75a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800f75a:	b580      	push	{r7, lr}
 800f75c:	b086      	sub	sp, #24
 800f75e:	af00      	add	r7, sp, #0
 800f760:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	f107 0208 	add.w	r2, r7, #8
 800f768:	4611      	mov	r1, r2
 800f76a:	4618      	mov	r0, r3
 800f76c:	f7ff fa72 	bl	800ec54 <validate>
 800f770:	4603      	mov	r3, r0
 800f772:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f774:	7dfb      	ldrb	r3, [r7, #23]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d16d      	bne.n	800f856 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	7d1b      	ldrb	r3, [r3, #20]
 800f77e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f782:	2b00      	cmp	r3, #0
 800f784:	d067      	beq.n	800f856 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	7d1b      	ldrb	r3, [r3, #20]
 800f78a:	b25b      	sxtb	r3, r3
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	da1a      	bge.n	800f7c6 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800f790:	68bb      	ldr	r3, [r7, #8]
 800f792:	7858      	ldrb	r0, [r3, #1]
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	6a1a      	ldr	r2, [r3, #32]
 800f79e:	2301      	movs	r3, #1
 800f7a0:	f7fd fd76 	bl	800d290 <disk_write>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d006      	beq.n	800f7b8 <f_sync+0x5e>
 800f7aa:	68bb      	ldr	r3, [r7, #8]
 800f7ac:	2101      	movs	r1, #1
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f7fd fec2 	bl	800d538 <unlock_fs>
 800f7b4:	2301      	movs	r3, #1
 800f7b6:	e055      	b.n	800f864 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	7d1b      	ldrb	r3, [r3, #20]
 800f7bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f7c0:	b2da      	uxtb	r2, r3
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800f7c6:	f003 fc09 	bl	8012fdc <get_fattime>
 800f7ca:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f7cc:	68ba      	ldr	r2, [r7, #8]
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7d2:	4619      	mov	r1, r3
 800f7d4:	4610      	mov	r0, r2
 800f7d6:	f7fe f87b 	bl	800d8d0 <move_window>
 800f7da:	4603      	mov	r3, r0
 800f7dc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800f7de:	7dfb      	ldrb	r3, [r7, #23]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d138      	bne.n	800f856 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7e8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	330b      	adds	r3, #11
 800f7ee:	781a      	ldrb	r2, [r3, #0]
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	330b      	adds	r3, #11
 800f7f4:	f042 0220 	orr.w	r2, r2, #32
 800f7f8:	b2d2      	uxtb	r2, r2
 800f7fa:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	6818      	ldr	r0, [r3, #0]
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	689b      	ldr	r3, [r3, #8]
 800f804:	461a      	mov	r2, r3
 800f806:	68f9      	ldr	r1, [r7, #12]
 800f808:	f7fe fd88 	bl	800e31c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	f103 021c 	add.w	r2, r3, #28
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	68db      	ldr	r3, [r3, #12]
 800f816:	4619      	mov	r1, r3
 800f818:	4610      	mov	r0, r2
 800f81a:	f7fd fdcd 	bl	800d3b8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	3316      	adds	r3, #22
 800f822:	6939      	ldr	r1, [r7, #16]
 800f824:	4618      	mov	r0, r3
 800f826:	f7fd fdc7 	bl	800d3b8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	3312      	adds	r3, #18
 800f82e:	2100      	movs	r1, #0
 800f830:	4618      	mov	r0, r3
 800f832:	f7fd fda6 	bl	800d382 <st_word>
					fs->wflag = 1;
 800f836:	68bb      	ldr	r3, [r7, #8]
 800f838:	2201      	movs	r2, #1
 800f83a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f83c:	68bb      	ldr	r3, [r7, #8]
 800f83e:	4618      	mov	r0, r3
 800f840:	f7fe f874 	bl	800d92c <sync_fs>
 800f844:	4603      	mov	r3, r0
 800f846:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	7d1b      	ldrb	r3, [r3, #20]
 800f84c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f850:	b2da      	uxtb	r2, r3
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f856:	68bb      	ldr	r3, [r7, #8]
 800f858:	7dfa      	ldrb	r2, [r7, #23]
 800f85a:	4611      	mov	r1, r2
 800f85c:	4618      	mov	r0, r3
 800f85e:	f7fd fe6b 	bl	800d538 <unlock_fs>
 800f862:	7dfb      	ldrb	r3, [r7, #23]
}
 800f864:	4618      	mov	r0, r3
 800f866:	3718      	adds	r7, #24
 800f868:	46bd      	mov	sp, r7
 800f86a:	bd80      	pop	{r7, pc}

0800f86c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b084      	sub	sp, #16
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f874:	6878      	ldr	r0, [r7, #4]
 800f876:	f7ff ff70 	bl	800f75a <f_sync>
 800f87a:	4603      	mov	r3, r0
 800f87c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f87e:	7bfb      	ldrb	r3, [r7, #15]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d11d      	bne.n	800f8c0 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	f107 0208 	add.w	r2, r7, #8
 800f88a:	4611      	mov	r1, r2
 800f88c:	4618      	mov	r0, r3
 800f88e:	f7ff f9e1 	bl	800ec54 <validate>
 800f892:	4603      	mov	r3, r0
 800f894:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f896:	7bfb      	ldrb	r3, [r7, #15]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d111      	bne.n	800f8c0 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	691b      	ldr	r3, [r3, #16]
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	f7fd ff71 	bl	800d788 <dec_lock>
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f8aa:	7bfb      	ldrb	r3, [r7, #15]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d102      	bne.n	800f8b6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800f8b6:	68bb      	ldr	r3, [r7, #8]
 800f8b8:	2100      	movs	r1, #0
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f7fd fe3c 	bl	800d538 <unlock_fs>
#endif
		}
	}
	return res;
 800f8c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	3710      	adds	r7, #16
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	bd80      	pop	{r7, pc}
	...

0800f8cc <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800f8cc:	b590      	push	{r4, r7, lr}
 800f8ce:	b09d      	sub	sp, #116	; 0x74
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	60f8      	str	r0, [r7, #12]
 800f8d4:	607a      	str	r2, [r7, #4]
 800f8d6:	603b      	str	r3, [r7, #0]
 800f8d8:	460b      	mov	r3, r1
 800f8da:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800f8dc:	2301      	movs	r3, #1
 800f8de:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800f8e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f8e4:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800f8e6:	f107 030c 	add.w	r3, r7, #12
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f7fe fec3 	bl	800e676 <get_ldnumber>
 800f8f0:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f8f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	da02      	bge.n	800f8fe <f_mkfs+0x32>
 800f8f8:	230b      	movs	r3, #11
 800f8fa:	f000 bc0d 	b.w	8010118 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800f8fe:	4a94      	ldr	r2, [pc, #592]	; (800fb50 <f_mkfs+0x284>)
 800f900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d005      	beq.n	800f916 <f_mkfs+0x4a>
 800f90a:	4a91      	ldr	r2, [pc, #580]	; (800fb50 <f_mkfs+0x284>)
 800f90c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f90e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f912:	2200      	movs	r2, #0
 800f914:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800f916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f918:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800f91c:	2300      	movs	r3, #0
 800f91e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800f922:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f926:	4618      	mov	r0, r3
 800f928:	f7fd fc6c 	bl	800d204 <disk_initialize>
 800f92c:	4603      	mov	r3, r0
 800f92e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800f932:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800f936:	f003 0301 	and.w	r3, r3, #1
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d001      	beq.n	800f942 <f_mkfs+0x76>
 800f93e:	2303      	movs	r3, #3
 800f940:	e3ea      	b.n	8010118 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800f942:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800f946:	f003 0304 	and.w	r3, r3, #4
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d001      	beq.n	800f952 <f_mkfs+0x86>
 800f94e:	230a      	movs	r3, #10
 800f950:	e3e2      	b.n	8010118 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800f952:	f107 0214 	add.w	r2, r7, #20
 800f956:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f95a:	2103      	movs	r1, #3
 800f95c:	4618      	mov	r0, r3
 800f95e:	f7fd fcb7 	bl	800d2d0 <disk_ioctl>
 800f962:	4603      	mov	r3, r0
 800f964:	2b00      	cmp	r3, #0
 800f966:	d10c      	bne.n	800f982 <f_mkfs+0xb6>
 800f968:	697b      	ldr	r3, [r7, #20]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d009      	beq.n	800f982 <f_mkfs+0xb6>
 800f96e:	697b      	ldr	r3, [r7, #20]
 800f970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f974:	d805      	bhi.n	800f982 <f_mkfs+0xb6>
 800f976:	697b      	ldr	r3, [r7, #20]
 800f978:	1e5a      	subs	r2, r3, #1
 800f97a:	697b      	ldr	r3, [r7, #20]
 800f97c:	4013      	ands	r3, r2
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d001      	beq.n	800f986 <f_mkfs+0xba>
 800f982:	2301      	movs	r3, #1
 800f984:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800f986:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f98a:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d003      	beq.n	800f99a <f_mkfs+0xce>
 800f992:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f994:	687a      	ldr	r2, [r7, #4]
 800f996:	429a      	cmp	r2, r3
 800f998:	d309      	bcc.n	800f9ae <f_mkfs+0xe2>
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f9a0:	d805      	bhi.n	800f9ae <f_mkfs+0xe2>
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	1e5a      	subs	r2, r3, #1
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	4013      	ands	r3, r2
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d001      	beq.n	800f9b2 <f_mkfs+0xe6>
 800f9ae:	2313      	movs	r3, #19
 800f9b0:	e3b2      	b.n	8010118 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800f9b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f9b4:	687a      	ldr	r2, [r7, #4]
 800f9b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800f9ba:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800f9bc:	683b      	ldr	r3, [r7, #0]
 800f9be:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800f9c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f9c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f9c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800f9ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800f9cc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9d0:	fb02 f303 	mul.w	r3, r2, r3
 800f9d4:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800f9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d101      	bne.n	800f9e0 <f_mkfs+0x114>
 800f9dc:	230e      	movs	r3, #14
 800f9de:	e39b      	b.n	8010118 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800f9e0:	f107 0210 	add.w	r2, r7, #16
 800f9e4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f9e8:	2101      	movs	r1, #1
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	f7fd fc70 	bl	800d2d0 <disk_ioctl>
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d001      	beq.n	800f9fa <f_mkfs+0x12e>
 800f9f6:	2301      	movs	r3, #1
 800f9f8:	e38e      	b.n	8010118 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800f9fa:	7afb      	ldrb	r3, [r7, #11]
 800f9fc:	f003 0308 	and.w	r3, r3, #8
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d001      	beq.n	800fa08 <f_mkfs+0x13c>
 800fa04:	2300      	movs	r3, #0
 800fa06:	e000      	b.n	800fa0a <f_mkfs+0x13e>
 800fa08:	233f      	movs	r3, #63	; 0x3f
 800fa0a:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800fa0c:	693b      	ldr	r3, [r7, #16]
 800fa0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa10:	429a      	cmp	r2, r3
 800fa12:	d901      	bls.n	800fa18 <f_mkfs+0x14c>
 800fa14:	230e      	movs	r3, #14
 800fa16:	e37f      	b.n	8010118 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800fa18:	693a      	ldr	r2, [r7, #16]
 800fa1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa1c:	1ad3      	subs	r3, r2, r3
 800fa1e:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800fa20:	693b      	ldr	r3, [r7, #16]
 800fa22:	2b7f      	cmp	r3, #127	; 0x7f
 800fa24:	d801      	bhi.n	800fa2a <f_mkfs+0x15e>
 800fa26:	230e      	movs	r3, #14
 800fa28:	e376      	b.n	8010118 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2b80      	cmp	r3, #128	; 0x80
 800fa2e:	d901      	bls.n	800fa34 <f_mkfs+0x168>
 800fa30:	2313      	movs	r3, #19
 800fa32:	e371      	b.n	8010118 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800fa34:	7afb      	ldrb	r3, [r7, #11]
 800fa36:	f003 0302 	and.w	r3, r3, #2
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d00d      	beq.n	800fa5a <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800fa3e:	7afb      	ldrb	r3, [r7, #11]
 800fa40:	f003 0307 	and.w	r3, r3, #7
 800fa44:	2b02      	cmp	r3, #2
 800fa46:	d004      	beq.n	800fa52 <f_mkfs+0x186>
 800fa48:	7afb      	ldrb	r3, [r7, #11]
 800fa4a:	f003 0301 	and.w	r3, r3, #1
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d103      	bne.n	800fa5a <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800fa52:	2303      	movs	r3, #3
 800fa54:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800fa58:	e009      	b.n	800fa6e <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800fa5a:	7afb      	ldrb	r3, [r7, #11]
 800fa5c:	f003 0301 	and.w	r3, r3, #1
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d101      	bne.n	800fa68 <f_mkfs+0x19c>
 800fa64:	2313      	movs	r3, #19
 800fa66:	e357      	b.n	8010118 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800fa68:	2302      	movs	r3, #2
 800fa6a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800fa72:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fa76:	2b03      	cmp	r3, #3
 800fa78:	d13c      	bne.n	800faf4 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800fa7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d11b      	bne.n	800fab8 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800fa80:	693b      	ldr	r3, [r7, #16]
 800fa82:	0c5b      	lsrs	r3, r3, #17
 800fa84:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800fa86:	2300      	movs	r3, #0
 800fa88:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa8a:	2301      	movs	r3, #1
 800fa8c:	653b      	str	r3, [r7, #80]	; 0x50
 800fa8e:	e005      	b.n	800fa9c <f_mkfs+0x1d0>
 800fa90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa92:	3301      	adds	r3, #1
 800fa94:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa98:	005b      	lsls	r3, r3, #1
 800fa9a:	653b      	str	r3, [r7, #80]	; 0x50
 800fa9c:	4a2d      	ldr	r2, [pc, #180]	; (800fb54 <f_mkfs+0x288>)
 800fa9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800faa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d007      	beq.n	800fab8 <f_mkfs+0x1ec>
 800faa8:	4a2a      	ldr	r2, [pc, #168]	; (800fb54 <f_mkfs+0x288>)
 800faaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800faac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fab0:	461a      	mov	r2, r3
 800fab2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fab4:	4293      	cmp	r3, r2
 800fab6:	d2eb      	bcs.n	800fa90 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800fab8:	693a      	ldr	r2, [r7, #16]
 800faba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fabc:	fbb2 f3f3 	udiv	r3, r2, r3
 800fac0:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800fac2:	6a3b      	ldr	r3, [r7, #32]
 800fac4:	3302      	adds	r3, #2
 800fac6:	009a      	lsls	r2, r3, #2
 800fac8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800faca:	4413      	add	r3, r2
 800facc:	1e5a      	subs	r2, r3, #1
 800face:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fad0:	fbb2 f3f3 	udiv	r3, r2, r3
 800fad4:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800fad6:	2320      	movs	r3, #32
 800fad8:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800fada:	2300      	movs	r3, #0
 800fadc:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800fade:	6a3b      	ldr	r3, [r7, #32]
 800fae0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fae4:	4293      	cmp	r3, r2
 800fae6:	d903      	bls.n	800faf0 <f_mkfs+0x224>
 800fae8:	6a3b      	ldr	r3, [r7, #32]
 800faea:	4a1b      	ldr	r2, [pc, #108]	; (800fb58 <f_mkfs+0x28c>)
 800faec:	4293      	cmp	r3, r2
 800faee:	d952      	bls.n	800fb96 <f_mkfs+0x2ca>
 800faf0:	230e      	movs	r3, #14
 800faf2:	e311      	b.n	8010118 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800faf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d11b      	bne.n	800fb32 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800fafa:	693b      	ldr	r3, [r7, #16]
 800fafc:	0b1b      	lsrs	r3, r3, #12
 800fafe:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800fb00:	2300      	movs	r3, #0
 800fb02:	64bb      	str	r3, [r7, #72]	; 0x48
 800fb04:	2301      	movs	r3, #1
 800fb06:	653b      	str	r3, [r7, #80]	; 0x50
 800fb08:	e005      	b.n	800fb16 <f_mkfs+0x24a>
 800fb0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb0c:	3301      	adds	r3, #1
 800fb0e:	64bb      	str	r3, [r7, #72]	; 0x48
 800fb10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb12:	005b      	lsls	r3, r3, #1
 800fb14:	653b      	str	r3, [r7, #80]	; 0x50
 800fb16:	4a11      	ldr	r2, [pc, #68]	; (800fb5c <f_mkfs+0x290>)
 800fb18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d007      	beq.n	800fb32 <f_mkfs+0x266>
 800fb22:	4a0e      	ldr	r2, [pc, #56]	; (800fb5c <f_mkfs+0x290>)
 800fb24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fb2a:	461a      	mov	r2, r3
 800fb2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb2e:	4293      	cmp	r3, r2
 800fb30:	d2eb      	bcs.n	800fb0a <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800fb32:	693a      	ldr	r2, [r7, #16]
 800fb34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb36:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb3a:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800fb3c:	6a3b      	ldr	r3, [r7, #32]
 800fb3e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fb42:	4293      	cmp	r3, r2
 800fb44:	d90c      	bls.n	800fb60 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800fb46:	6a3b      	ldr	r3, [r7, #32]
 800fb48:	3302      	adds	r3, #2
 800fb4a:	005b      	lsls	r3, r3, #1
 800fb4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fb4e:	e012      	b.n	800fb76 <f_mkfs+0x2aa>
 800fb50:	200000b4 	.word	0x200000b4
 800fb54:	08016adc 	.word	0x08016adc
 800fb58:	0ffffff5 	.word	0x0ffffff5
 800fb5c:	08016aec 	.word	0x08016aec
				} else {
					fmt = FS_FAT12;
 800fb60:	2301      	movs	r3, #1
 800fb62:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800fb66:	6a3a      	ldr	r2, [r7, #32]
 800fb68:	4613      	mov	r3, r2
 800fb6a:	005b      	lsls	r3, r3, #1
 800fb6c:	4413      	add	r3, r2
 800fb6e:	3301      	adds	r3, #1
 800fb70:	085b      	lsrs	r3, r3, #1
 800fb72:	3303      	adds	r3, #3
 800fb74:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800fb76:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fb78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb7a:	4413      	add	r3, r2
 800fb7c:	1e5a      	subs	r2, r3, #1
 800fb7e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fb80:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb84:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800fb86:	2301      	movs	r3, #1
 800fb88:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800fb8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb8c:	015a      	lsls	r2, r3, #5
 800fb8e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fb90:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb94:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800fb96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb9a:	4413      	add	r3, r2
 800fb9c:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800fb9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fba0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fba2:	fb02 f203 	mul.w	r2, r2, r3
 800fba6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fba8:	4413      	add	r3, r2
 800fbaa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fbac:	4413      	add	r3, r2
 800fbae:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800fbb0:	697a      	ldr	r2, [r7, #20]
 800fbb2:	69fb      	ldr	r3, [r7, #28]
 800fbb4:	4413      	add	r3, r2
 800fbb6:	1e5a      	subs	r2, r3, #1
 800fbb8:	697b      	ldr	r3, [r7, #20]
 800fbba:	425b      	negs	r3, r3
 800fbbc:	401a      	ands	r2, r3
 800fbbe:	69fb      	ldr	r3, [r7, #28]
 800fbc0:	1ad3      	subs	r3, r2, r3
 800fbc2:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800fbc4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fbc8:	2b03      	cmp	r3, #3
 800fbca:	d108      	bne.n	800fbde <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800fbcc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fbce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fbd0:	4413      	add	r3, r2
 800fbd2:	657b      	str	r3, [r7, #84]	; 0x54
 800fbd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fbd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fbd8:	4413      	add	r3, r2
 800fbda:	65bb      	str	r3, [r7, #88]	; 0x58
 800fbdc:	e006      	b.n	800fbec <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800fbde:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fbe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbe2:	fbb2 f3f3 	udiv	r3, r2, r3
 800fbe6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fbe8:	4413      	add	r3, r2
 800fbea:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800fbec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbee:	011a      	lsls	r2, r3, #4
 800fbf0:	69fb      	ldr	r3, [r7, #28]
 800fbf2:	441a      	add	r2, r3
 800fbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbf6:	1ad2      	subs	r2, r2, r3
 800fbf8:	693b      	ldr	r3, [r7, #16]
 800fbfa:	429a      	cmp	r2, r3
 800fbfc:	d901      	bls.n	800fc02 <f_mkfs+0x336>
 800fbfe:	230e      	movs	r3, #14
 800fc00:	e28a      	b.n	8010118 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800fc02:	693a      	ldr	r2, [r7, #16]
 800fc04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fc06:	1ad2      	subs	r2, r2, r3
 800fc08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fc0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fc0c:	fb01 f303 	mul.w	r3, r1, r3
 800fc10:	1ad2      	subs	r2, r2, r3
 800fc12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc14:	1ad2      	subs	r2, r2, r3
 800fc16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc18:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc1c:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800fc1e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fc22:	2b03      	cmp	r3, #3
 800fc24:	d10f      	bne.n	800fc46 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800fc26:	6a3b      	ldr	r3, [r7, #32]
 800fc28:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fc2c:	4293      	cmp	r3, r2
 800fc2e:	d80a      	bhi.n	800fc46 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d105      	bne.n	800fc42 <f_mkfs+0x376>
 800fc36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc38:	085b      	lsrs	r3, r3, #1
 800fc3a:	607b      	str	r3, [r7, #4]
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d144      	bne.n	800fccc <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800fc42:	230e      	movs	r3, #14
 800fc44:	e268      	b.n	8010118 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800fc46:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fc4a:	2b02      	cmp	r3, #2
 800fc4c:	d133      	bne.n	800fcb6 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800fc4e:	6a3b      	ldr	r3, [r7, #32]
 800fc50:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fc54:	4293      	cmp	r3, r2
 800fc56:	d91e      	bls.n	800fc96 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d107      	bne.n	800fc6e <f_mkfs+0x3a2>
 800fc5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc60:	005b      	lsls	r3, r3, #1
 800fc62:	2b40      	cmp	r3, #64	; 0x40
 800fc64:	d803      	bhi.n	800fc6e <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800fc66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc68:	005b      	lsls	r3, r3, #1
 800fc6a:	607b      	str	r3, [r7, #4]
 800fc6c:	e033      	b.n	800fcd6 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800fc6e:	7afb      	ldrb	r3, [r7, #11]
 800fc70:	f003 0302 	and.w	r3, r3, #2
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d003      	beq.n	800fc80 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800fc78:	2303      	movs	r3, #3
 800fc7a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800fc7e:	e02a      	b.n	800fcd6 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d105      	bne.n	800fc92 <f_mkfs+0x3c6>
 800fc86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc88:	005b      	lsls	r3, r3, #1
 800fc8a:	607b      	str	r3, [r7, #4]
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	2b80      	cmp	r3, #128	; 0x80
 800fc90:	d91e      	bls.n	800fcd0 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800fc92:	230e      	movs	r3, #14
 800fc94:	e240      	b.n	8010118 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800fc96:	6a3b      	ldr	r3, [r7, #32]
 800fc98:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fc9c:	4293      	cmp	r3, r2
 800fc9e:	d80a      	bhi.n	800fcb6 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d105      	bne.n	800fcb2 <f_mkfs+0x3e6>
 800fca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fca8:	005b      	lsls	r3, r3, #1
 800fcaa:	607b      	str	r3, [r7, #4]
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	2b80      	cmp	r3, #128	; 0x80
 800fcb0:	d910      	bls.n	800fcd4 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800fcb2:	230e      	movs	r3, #14
 800fcb4:	e230      	b.n	8010118 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800fcb6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fcba:	2b01      	cmp	r3, #1
 800fcbc:	d10c      	bne.n	800fcd8 <f_mkfs+0x40c>
 800fcbe:	6a3b      	ldr	r3, [r7, #32]
 800fcc0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fcc4:	4293      	cmp	r3, r2
 800fcc6:	d907      	bls.n	800fcd8 <f_mkfs+0x40c>
 800fcc8:	230e      	movs	r3, #14
 800fcca:	e225      	b.n	8010118 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800fccc:	bf00      	nop
 800fcce:	e6ce      	b.n	800fa6e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800fcd0:	bf00      	nop
 800fcd2:	e6cc      	b.n	800fa6e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800fcd4:	bf00      	nop
			pau = au;
 800fcd6:	e6ca      	b.n	800fa6e <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800fcd8:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800fcda:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fcdc:	461a      	mov	r2, r3
 800fcde:	2100      	movs	r1, #0
 800fce0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fce2:	f7fd fbb6 	bl	800d452 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800fce6:	220b      	movs	r2, #11
 800fce8:	49bc      	ldr	r1, [pc, #752]	; (800ffdc <f_mkfs+0x710>)
 800fcea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fcec:	f7fd fb90 	bl	800d410 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800fcf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcf2:	330b      	adds	r3, #11
 800fcf4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fcf6:	4611      	mov	r1, r2
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	f7fd fb42 	bl	800d382 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800fcfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd00:	330d      	adds	r3, #13
 800fd02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fd04:	b2d2      	uxtb	r2, r2
 800fd06:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800fd08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd0a:	330e      	adds	r3, #14
 800fd0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fd0e:	b292      	uxth	r2, r2
 800fd10:	4611      	mov	r1, r2
 800fd12:	4618      	mov	r0, r3
 800fd14:	f7fd fb35 	bl	800d382 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800fd18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd1a:	3310      	adds	r3, #16
 800fd1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fd1e:	b2d2      	uxtb	r2, r2
 800fd20:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800fd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd24:	f103 0211 	add.w	r2, r3, #17
 800fd28:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fd2c:	2b03      	cmp	r3, #3
 800fd2e:	d002      	beq.n	800fd36 <f_mkfs+0x46a>
 800fd30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd32:	b29b      	uxth	r3, r3
 800fd34:	e000      	b.n	800fd38 <f_mkfs+0x46c>
 800fd36:	2300      	movs	r3, #0
 800fd38:	4619      	mov	r1, r3
 800fd3a:	4610      	mov	r0, r2
 800fd3c:	f7fd fb21 	bl	800d382 <st_word>
		if (sz_vol < 0x10000) {
 800fd40:	693b      	ldr	r3, [r7, #16]
 800fd42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fd46:	d208      	bcs.n	800fd5a <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800fd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd4a:	3313      	adds	r3, #19
 800fd4c:	693a      	ldr	r2, [r7, #16]
 800fd4e:	b292      	uxth	r2, r2
 800fd50:	4611      	mov	r1, r2
 800fd52:	4618      	mov	r0, r3
 800fd54:	f7fd fb15 	bl	800d382 <st_word>
 800fd58:	e006      	b.n	800fd68 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800fd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd5c:	3320      	adds	r3, #32
 800fd5e:	693a      	ldr	r2, [r7, #16]
 800fd60:	4611      	mov	r1, r2
 800fd62:	4618      	mov	r0, r3
 800fd64:	f7fd fb28 	bl	800d3b8 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800fd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd6a:	3315      	adds	r3, #21
 800fd6c:	22f8      	movs	r2, #248	; 0xf8
 800fd6e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800fd70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd72:	3318      	adds	r3, #24
 800fd74:	213f      	movs	r1, #63	; 0x3f
 800fd76:	4618      	mov	r0, r3
 800fd78:	f7fd fb03 	bl	800d382 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800fd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd7e:	331a      	adds	r3, #26
 800fd80:	21ff      	movs	r1, #255	; 0xff
 800fd82:	4618      	mov	r0, r3
 800fd84:	f7fd fafd 	bl	800d382 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800fd88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd8a:	331c      	adds	r3, #28
 800fd8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fd8e:	4618      	mov	r0, r3
 800fd90:	f7fd fb12 	bl	800d3b8 <st_dword>
		if (fmt == FS_FAT32) {
 800fd94:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fd98:	2b03      	cmp	r3, #3
 800fd9a:	d131      	bne.n	800fe00 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800fd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd9e:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800fda2:	f003 f91b 	bl	8012fdc <get_fattime>
 800fda6:	4603      	mov	r3, r0
 800fda8:	4619      	mov	r1, r3
 800fdaa:	4620      	mov	r0, r4
 800fdac:	f7fd fb04 	bl	800d3b8 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800fdb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdb2:	3324      	adds	r3, #36	; 0x24
 800fdb4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f7fd fafe 	bl	800d3b8 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800fdbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdbe:	332c      	adds	r3, #44	; 0x2c
 800fdc0:	2102      	movs	r1, #2
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	f7fd faf8 	bl	800d3b8 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800fdc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdca:	3330      	adds	r3, #48	; 0x30
 800fdcc:	2101      	movs	r1, #1
 800fdce:	4618      	mov	r0, r3
 800fdd0:	f7fd fad7 	bl	800d382 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800fdd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdd6:	3332      	adds	r3, #50	; 0x32
 800fdd8:	2106      	movs	r1, #6
 800fdda:	4618      	mov	r0, r3
 800fddc:	f7fd fad1 	bl	800d382 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800fde0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fde2:	3340      	adds	r3, #64	; 0x40
 800fde4:	2280      	movs	r2, #128	; 0x80
 800fde6:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800fde8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdea:	3342      	adds	r3, #66	; 0x42
 800fdec:	2229      	movs	r2, #41	; 0x29
 800fdee:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800fdf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdf2:	3347      	adds	r3, #71	; 0x47
 800fdf4:	2213      	movs	r2, #19
 800fdf6:	497a      	ldr	r1, [pc, #488]	; (800ffe0 <f_mkfs+0x714>)
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	f7fd fb09 	bl	800d410 <mem_cpy>
 800fdfe:	e020      	b.n	800fe42 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800fe00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe02:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800fe06:	f003 f8e9 	bl	8012fdc <get_fattime>
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	4619      	mov	r1, r3
 800fe0e:	4620      	mov	r0, r4
 800fe10:	f7fd fad2 	bl	800d3b8 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800fe14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe16:	3316      	adds	r3, #22
 800fe18:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fe1a:	b292      	uxth	r2, r2
 800fe1c:	4611      	mov	r1, r2
 800fe1e:	4618      	mov	r0, r3
 800fe20:	f7fd faaf 	bl	800d382 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800fe24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe26:	3324      	adds	r3, #36	; 0x24
 800fe28:	2280      	movs	r2, #128	; 0x80
 800fe2a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800fe2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe2e:	3326      	adds	r3, #38	; 0x26
 800fe30:	2229      	movs	r2, #41	; 0x29
 800fe32:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800fe34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe36:	332b      	adds	r3, #43	; 0x2b
 800fe38:	2213      	movs	r2, #19
 800fe3a:	496a      	ldr	r1, [pc, #424]	; (800ffe4 <f_mkfs+0x718>)
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	f7fd fae7 	bl	800d410 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800fe42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe44:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fe48:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	f7fd fa98 	bl	800d382 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800fe52:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800fe56:	2301      	movs	r3, #1
 800fe58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fe5c:	f7fd fa18 	bl	800d290 <disk_write>
 800fe60:	4603      	mov	r3, r0
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d001      	beq.n	800fe6a <f_mkfs+0x59e>
 800fe66:	2301      	movs	r3, #1
 800fe68:	e156      	b.n	8010118 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800fe6a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fe6e:	2b03      	cmp	r3, #3
 800fe70:	d140      	bne.n	800fef4 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800fe72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe74:	1d9a      	adds	r2, r3, #6
 800fe76:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800fe7a:	2301      	movs	r3, #1
 800fe7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fe7e:	f7fd fa07 	bl	800d290 <disk_write>
			mem_set(buf, 0, ss);
 800fe82:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fe84:	461a      	mov	r2, r3
 800fe86:	2100      	movs	r1, #0
 800fe88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe8a:	f7fd fae2 	bl	800d452 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800fe8e:	4956      	ldr	r1, [pc, #344]	; (800ffe8 <f_mkfs+0x71c>)
 800fe90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe92:	f7fd fa91 	bl	800d3b8 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800fe96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe98:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800fe9c:	4953      	ldr	r1, [pc, #332]	; (800ffec <f_mkfs+0x720>)
 800fe9e:	4618      	mov	r0, r3
 800fea0:	f7fd fa8a 	bl	800d3b8 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800fea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fea6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800feaa:	6a3b      	ldr	r3, [r7, #32]
 800feac:	3b01      	subs	r3, #1
 800feae:	4619      	mov	r1, r3
 800feb0:	4610      	mov	r0, r2
 800feb2:	f7fd fa81 	bl	800d3b8 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800feb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feb8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800febc:	2102      	movs	r1, #2
 800febe:	4618      	mov	r0, r3
 800fec0:	f7fd fa7a 	bl	800d3b8 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800fec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fec6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800feca:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800fece:	4618      	mov	r0, r3
 800fed0:	f7fd fa57 	bl	800d382 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800fed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fed6:	1dda      	adds	r2, r3, #7
 800fed8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800fedc:	2301      	movs	r3, #1
 800fede:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fee0:	f7fd f9d6 	bl	800d290 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800fee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fee6:	1c5a      	adds	r2, r3, #1
 800fee8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800feec:	2301      	movs	r3, #1
 800feee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fef0:	f7fd f9ce 	bl	800d290 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800fef4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fef6:	2100      	movs	r1, #0
 800fef8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fefa:	f7fd faaa 	bl	800d452 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800fefe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ff00:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800ff02:	2300      	movs	r3, #0
 800ff04:	64bb      	str	r3, [r7, #72]	; 0x48
 800ff06:	e04b      	b.n	800ffa0 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800ff08:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ff0c:	2b03      	cmp	r3, #3
 800ff0e:	d113      	bne.n	800ff38 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800ff10:	f06f 0107 	mvn.w	r1, #7
 800ff14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff16:	f7fd fa4f 	bl	800d3b8 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800ff1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff1c:	3304      	adds	r3, #4
 800ff1e:	f04f 31ff 	mov.w	r1, #4294967295
 800ff22:	4618      	mov	r0, r3
 800ff24:	f7fd fa48 	bl	800d3b8 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800ff28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff2a:	3308      	adds	r3, #8
 800ff2c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800ff30:	4618      	mov	r0, r3
 800ff32:	f7fd fa41 	bl	800d3b8 <st_dword>
 800ff36:	e00b      	b.n	800ff50 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800ff38:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ff3c:	2b01      	cmp	r3, #1
 800ff3e:	d101      	bne.n	800ff44 <f_mkfs+0x678>
 800ff40:	4b2b      	ldr	r3, [pc, #172]	; (800fff0 <f_mkfs+0x724>)
 800ff42:	e001      	b.n	800ff48 <f_mkfs+0x67c>
 800ff44:	f06f 0307 	mvn.w	r3, #7
 800ff48:	4619      	mov	r1, r3
 800ff4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff4c:	f7fd fa34 	bl	800d3b8 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800ff50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ff52:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800ff54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ff56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff58:	4293      	cmp	r3, r2
 800ff5a:	bf28      	it	cs
 800ff5c:	4613      	movcs	r3, r2
 800ff5e:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800ff60:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800ff64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff66:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ff68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ff6a:	f7fd f991 	bl	800d290 <disk_write>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d001      	beq.n	800ff78 <f_mkfs+0x6ac>
 800ff74:	2301      	movs	r3, #1
 800ff76:	e0cf      	b.n	8010118 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800ff78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ff7a:	461a      	mov	r2, r3
 800ff7c:	2100      	movs	r1, #0
 800ff7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff80:	f7fd fa67 	bl	800d452 <mem_set>
				sect += n; nsect -= n;
 800ff84:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ff86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff88:	4413      	add	r3, r2
 800ff8a:	667b      	str	r3, [r7, #100]	; 0x64
 800ff8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ff8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff90:	1ad3      	subs	r3, r2, r3
 800ff92:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800ff94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d1dc      	bne.n	800ff54 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800ff9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff9c:	3301      	adds	r3, #1
 800ff9e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ffa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ffa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ffa4:	429a      	cmp	r2, r3
 800ffa6:	d3af      	bcc.n	800ff08 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800ffa8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ffac:	2b03      	cmp	r3, #3
 800ffae:	d101      	bne.n	800ffb4 <f_mkfs+0x6e8>
 800ffb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffb2:	e000      	b.n	800ffb6 <f_mkfs+0x6ea>
 800ffb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ffb6:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800ffb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ffba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffbc:	4293      	cmp	r3, r2
 800ffbe:	bf28      	it	cs
 800ffc0:	4613      	movcs	r3, r2
 800ffc2:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800ffc4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800ffc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ffca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ffcc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ffce:	f7fd f95f 	bl	800d290 <disk_write>
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d00d      	beq.n	800fff4 <f_mkfs+0x728>
 800ffd8:	2301      	movs	r3, #1
 800ffda:	e09d      	b.n	8010118 <f_mkfs+0x84c>
 800ffdc:	0801696c 	.word	0x0801696c
 800ffe0:	08016978 	.word	0x08016978
 800ffe4:	0801698c 	.word	0x0801698c
 800ffe8:	41615252 	.word	0x41615252
 800ffec:	61417272 	.word	0x61417272
 800fff0:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 800fff4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fff6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fff8:	4413      	add	r3, r2
 800fffa:	667b      	str	r3, [r7, #100]	; 0x64
 800fffc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fffe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010000:	1ad3      	subs	r3, r2, r3
 8010002:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 8010004:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010006:	2b00      	cmp	r3, #0
 8010008:	d1d6      	bne.n	800ffb8 <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 801000a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801000e:	2b03      	cmp	r3, #3
 8010010:	d103      	bne.n	801001a <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8010012:	230c      	movs	r3, #12
 8010014:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8010018:	e010      	b.n	801003c <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 801001a:	693b      	ldr	r3, [r7, #16]
 801001c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010020:	d303      	bcc.n	801002a <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8010022:	2306      	movs	r3, #6
 8010024:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8010028:	e008      	b.n	801003c <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 801002a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801002e:	2b02      	cmp	r3, #2
 8010030:	d101      	bne.n	8010036 <f_mkfs+0x76a>
 8010032:	2304      	movs	r3, #4
 8010034:	e000      	b.n	8010038 <f_mkfs+0x76c>
 8010036:	2301      	movs	r3, #1
 8010038:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 801003c:	7afb      	ldrb	r3, [r7, #11]
 801003e:	f003 0308 	and.w	r3, r3, #8
 8010042:	2b00      	cmp	r3, #0
 8010044:	d15b      	bne.n	80100fe <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8010046:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010048:	461a      	mov	r2, r3
 801004a:	2100      	movs	r1, #0
 801004c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801004e:	f7fd fa00 	bl	800d452 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8010052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010054:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010058:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801005c:	4618      	mov	r0, r3
 801005e:	f7fd f990 	bl	800d382 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8010062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010064:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010068:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 801006a:	69bb      	ldr	r3, [r7, #24]
 801006c:	2200      	movs	r2, #0
 801006e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8010070:	69bb      	ldr	r3, [r7, #24]
 8010072:	3301      	adds	r3, #1
 8010074:	2201      	movs	r2, #1
 8010076:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8010078:	69bb      	ldr	r3, [r7, #24]
 801007a:	3302      	adds	r3, #2
 801007c:	2201      	movs	r2, #1
 801007e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8010080:	69bb      	ldr	r3, [r7, #24]
 8010082:	3303      	adds	r3, #3
 8010084:	2200      	movs	r2, #0
 8010086:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8010088:	69bb      	ldr	r3, [r7, #24]
 801008a:	3304      	adds	r3, #4
 801008c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8010090:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8010092:	693a      	ldr	r2, [r7, #16]
 8010094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010096:	441a      	add	r2, r3
 8010098:	4b21      	ldr	r3, [pc, #132]	; (8010120 <f_mkfs+0x854>)
 801009a:	fba3 1302 	umull	r1, r3, r3, r2
 801009e:	1ad2      	subs	r2, r2, r3
 80100a0:	0852      	lsrs	r2, r2, #1
 80100a2:	4413      	add	r3, r2
 80100a4:	0b5b      	lsrs	r3, r3, #13
 80100a6:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 80100a8:	69bb      	ldr	r3, [r7, #24]
 80100aa:	3305      	adds	r3, #5
 80100ac:	22fe      	movs	r2, #254	; 0xfe
 80100ae:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 80100b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80100b2:	089b      	lsrs	r3, r3, #2
 80100b4:	b2da      	uxtb	r2, r3
 80100b6:	69bb      	ldr	r3, [r7, #24]
 80100b8:	3306      	adds	r3, #6
 80100ba:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 80100be:	b2d2      	uxtb	r2, r2
 80100c0:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 80100c2:	69bb      	ldr	r3, [r7, #24]
 80100c4:	3307      	adds	r3, #7
 80100c6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80100c8:	b2d2      	uxtb	r2, r2
 80100ca:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 80100cc:	69bb      	ldr	r3, [r7, #24]
 80100ce:	3308      	adds	r3, #8
 80100d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80100d2:	4618      	mov	r0, r3
 80100d4:	f7fd f970 	bl	800d3b8 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 80100d8:	69bb      	ldr	r3, [r7, #24]
 80100da:	330c      	adds	r3, #12
 80100dc:	693a      	ldr	r2, [r7, #16]
 80100de:	4611      	mov	r1, r2
 80100e0:	4618      	mov	r0, r3
 80100e2:	f7fd f969 	bl	800d3b8 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 80100e6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80100ea:	2301      	movs	r3, #1
 80100ec:	2200      	movs	r2, #0
 80100ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80100f0:	f7fd f8ce 	bl	800d290 <disk_write>
 80100f4:	4603      	mov	r3, r0
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d001      	beq.n	80100fe <f_mkfs+0x832>
 80100fa:	2301      	movs	r3, #1
 80100fc:	e00c      	b.n	8010118 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 80100fe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010102:	2200      	movs	r2, #0
 8010104:	2100      	movs	r1, #0
 8010106:	4618      	mov	r0, r3
 8010108:	f7fd f8e2 	bl	800d2d0 <disk_ioctl>
 801010c:	4603      	mov	r3, r0
 801010e:	2b00      	cmp	r3, #0
 8010110:	d001      	beq.n	8010116 <f_mkfs+0x84a>
 8010112:	2301      	movs	r3, #1
 8010114:	e000      	b.n	8010118 <f_mkfs+0x84c>

	return FR_OK;
 8010116:	2300      	movs	r3, #0
}
 8010118:	4618      	mov	r0, r3
 801011a:	3774      	adds	r7, #116	; 0x74
 801011c:	46bd      	mov	sp, r7
 801011e:	bd90      	pop	{r4, r7, pc}
 8010120:	0515565b 	.word	0x0515565b

08010124 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010124:	b480      	push	{r7}
 8010126:	b087      	sub	sp, #28
 8010128:	af00      	add	r7, sp, #0
 801012a:	60f8      	str	r0, [r7, #12]
 801012c:	60b9      	str	r1, [r7, #8]
 801012e:	4613      	mov	r3, r2
 8010130:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010132:	2301      	movs	r3, #1
 8010134:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010136:	2300      	movs	r3, #0
 8010138:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801013a:	4b1f      	ldr	r3, [pc, #124]	; (80101b8 <FATFS_LinkDriverEx+0x94>)
 801013c:	7a5b      	ldrb	r3, [r3, #9]
 801013e:	b2db      	uxtb	r3, r3
 8010140:	2b00      	cmp	r3, #0
 8010142:	d131      	bne.n	80101a8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010144:	4b1c      	ldr	r3, [pc, #112]	; (80101b8 <FATFS_LinkDriverEx+0x94>)
 8010146:	7a5b      	ldrb	r3, [r3, #9]
 8010148:	b2db      	uxtb	r3, r3
 801014a:	461a      	mov	r2, r3
 801014c:	4b1a      	ldr	r3, [pc, #104]	; (80101b8 <FATFS_LinkDriverEx+0x94>)
 801014e:	2100      	movs	r1, #0
 8010150:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010152:	4b19      	ldr	r3, [pc, #100]	; (80101b8 <FATFS_LinkDriverEx+0x94>)
 8010154:	7a5b      	ldrb	r3, [r3, #9]
 8010156:	b2db      	uxtb	r3, r3
 8010158:	4a17      	ldr	r2, [pc, #92]	; (80101b8 <FATFS_LinkDriverEx+0x94>)
 801015a:	009b      	lsls	r3, r3, #2
 801015c:	4413      	add	r3, r2
 801015e:	68fa      	ldr	r2, [r7, #12]
 8010160:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010162:	4b15      	ldr	r3, [pc, #84]	; (80101b8 <FATFS_LinkDriverEx+0x94>)
 8010164:	7a5b      	ldrb	r3, [r3, #9]
 8010166:	b2db      	uxtb	r3, r3
 8010168:	461a      	mov	r2, r3
 801016a:	4b13      	ldr	r3, [pc, #76]	; (80101b8 <FATFS_LinkDriverEx+0x94>)
 801016c:	4413      	add	r3, r2
 801016e:	79fa      	ldrb	r2, [r7, #7]
 8010170:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010172:	4b11      	ldr	r3, [pc, #68]	; (80101b8 <FATFS_LinkDriverEx+0x94>)
 8010174:	7a5b      	ldrb	r3, [r3, #9]
 8010176:	b2db      	uxtb	r3, r3
 8010178:	1c5a      	adds	r2, r3, #1
 801017a:	b2d1      	uxtb	r1, r2
 801017c:	4a0e      	ldr	r2, [pc, #56]	; (80101b8 <FATFS_LinkDriverEx+0x94>)
 801017e:	7251      	strb	r1, [r2, #9]
 8010180:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010182:	7dbb      	ldrb	r3, [r7, #22]
 8010184:	3330      	adds	r3, #48	; 0x30
 8010186:	b2da      	uxtb	r2, r3
 8010188:	68bb      	ldr	r3, [r7, #8]
 801018a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801018c:	68bb      	ldr	r3, [r7, #8]
 801018e:	3301      	adds	r3, #1
 8010190:	223a      	movs	r2, #58	; 0x3a
 8010192:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010194:	68bb      	ldr	r3, [r7, #8]
 8010196:	3302      	adds	r3, #2
 8010198:	222f      	movs	r2, #47	; 0x2f
 801019a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801019c:	68bb      	ldr	r3, [r7, #8]
 801019e:	3303      	adds	r3, #3
 80101a0:	2200      	movs	r2, #0
 80101a2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80101a4:	2300      	movs	r3, #0
 80101a6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80101a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80101aa:	4618      	mov	r0, r3
 80101ac:	371c      	adds	r7, #28
 80101ae:	46bd      	mov	sp, r7
 80101b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b4:	4770      	bx	lr
 80101b6:	bf00      	nop
 80101b8:	200000dc 	.word	0x200000dc

080101bc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80101bc:	b580      	push	{r7, lr}
 80101be:	b082      	sub	sp, #8
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
 80101c4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80101c6:	2200      	movs	r2, #0
 80101c8:	6839      	ldr	r1, [r7, #0]
 80101ca:	6878      	ldr	r0, [r7, #4]
 80101cc:	f7ff ffaa 	bl	8010124 <FATFS_LinkDriverEx>
 80101d0:	4603      	mov	r3, r0
}
 80101d2:	4618      	mov	r0, r3
 80101d4:	3708      	adds	r7, #8
 80101d6:	46bd      	mov	sp, r7
 80101d8:	bd80      	pop	{r7, pc}

080101da <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80101da:	b580      	push	{r7, lr}
 80101dc:	b084      	sub	sp, #16
 80101de:	af00      	add	r7, sp, #0
 80101e0:	4603      	mov	r3, r0
 80101e2:	6039      	str	r1, [r7, #0]
 80101e4:	71fb      	strb	r3, [r7, #7]

    int ret;

    osSemaphoreDef(SEM);
 80101e6:	2300      	movs	r3, #0
 80101e8:	60bb      	str	r3, [r7, #8]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 80101ea:	f107 0308 	add.w	r3, r7, #8
 80101ee:	2101      	movs	r1, #1
 80101f0:	4618      	mov	r0, r3
 80101f2:	f000 f8c4 	bl	801037e <osSemaphoreCreate>
 80101f6:	4602      	mov	r2, r0
 80101f8:	683b      	ldr	r3, [r7, #0]
 80101fa:	601a      	str	r2, [r3, #0]
    ret = (*sobj != NULL);
 80101fc:	683b      	ldr	r3, [r7, #0]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	2b00      	cmp	r3, #0
 8010202:	bf14      	ite	ne
 8010204:	2301      	movne	r3, #1
 8010206:	2300      	moveq	r3, #0
 8010208:	b2db      	uxtb	r3, r3
 801020a:	60fb      	str	r3, [r7, #12]

    return ret;
 801020c:	68fb      	ldr	r3, [r7, #12]
}
 801020e:	4618      	mov	r0, r3
 8010210:	3710      	adds	r7, #16
 8010212:	46bd      	mov	sp, r7
 8010214:	bd80      	pop	{r7, pc}

08010216 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8010216:	b580      	push	{r7, lr}
 8010218:	b082      	sub	sp, #8
 801021a:	af00      	add	r7, sp, #0
 801021c:	6078      	str	r0, [r7, #4]
    osSemaphoreDelete (sobj);
 801021e:	6878      	ldr	r0, [r7, #4]
 8010220:	f000 f956 	bl	80104d0 <osSemaphoreDelete>
    return 1;
 8010224:	2301      	movs	r3, #1
}
 8010226:	4618      	mov	r0, r3
 8010228:	3708      	adds	r7, #8
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}

0801022e <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801022e:	b580      	push	{r7, lr}
 8010230:	b084      	sub	sp, #16
 8010232:	af00      	add	r7, sp, #0
 8010234:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8010236:	2300      	movs	r3, #0
 8010238:	60fb      	str	r3, [r7, #12]

  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 801023a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801023e:	6878      	ldr	r0, [r7, #4]
 8010240:	f000 f8c2 	bl	80103c8 <osSemaphoreWait>
 8010244:	4603      	mov	r3, r0
 8010246:	2b00      	cmp	r3, #0
 8010248:	d101      	bne.n	801024e <ff_req_grant+0x20>
  {
    ret = 1;
 801024a:	2301      	movs	r3, #1
 801024c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801024e:	68fb      	ldr	r3, [r7, #12]
}
 8010250:	4618      	mov	r0, r3
 8010252:	3710      	adds	r7, #16
 8010254:	46bd      	mov	sp, r7
 8010256:	bd80      	pop	{r7, pc}

08010258 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b082      	sub	sp, #8
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(sobj);
 8010260:	6878      	ldr	r0, [r7, #4]
 8010262:	f000 f8ff 	bl	8010464 <osSemaphoreRelease>
}
 8010266:	bf00      	nop
 8010268:	3708      	adds	r7, #8
 801026a:	46bd      	mov	sp, r7
 801026c:	bd80      	pop	{r7, pc}

0801026e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801026e:	b480      	push	{r7}
 8010270:	b085      	sub	sp, #20
 8010272:	af00      	add	r7, sp, #0
 8010274:	4603      	mov	r3, r0
 8010276:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8010278:	2300      	movs	r3, #0
 801027a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801027c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010280:	2b84      	cmp	r3, #132	; 0x84
 8010282:	d005      	beq.n	8010290 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8010284:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	4413      	add	r3, r2
 801028c:	3303      	adds	r3, #3
 801028e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8010290:	68fb      	ldr	r3, [r7, #12]
}
 8010292:	4618      	mov	r0, r3
 8010294:	3714      	adds	r7, #20
 8010296:	46bd      	mov	sp, r7
 8010298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029c:	4770      	bx	lr

0801029e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801029e:	b480      	push	{r7}
 80102a0:	b083      	sub	sp, #12
 80102a2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80102a4:	f3ef 8305 	mrs	r3, IPSR
 80102a8:	607b      	str	r3, [r7, #4]
  return(result);
 80102aa:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	bf14      	ite	ne
 80102b0:	2301      	movne	r3, #1
 80102b2:	2300      	moveq	r3, #0
 80102b4:	b2db      	uxtb	r3, r3
}
 80102b6:	4618      	mov	r0, r3
 80102b8:	370c      	adds	r7, #12
 80102ba:	46bd      	mov	sp, r7
 80102bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c0:	4770      	bx	lr

080102c2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80102c2:	b580      	push	{r7, lr}
 80102c4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80102c6:	f001 fb29 	bl	801191c <vTaskStartScheduler>
  
  return osOK;
 80102ca:	2300      	movs	r3, #0
}
 80102cc:	4618      	mov	r0, r3
 80102ce:	bd80      	pop	{r7, pc}

080102d0 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 80102d0:	b580      	push	{r7, lr}
 80102d2:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 80102d4:	f001 ff4e 	bl	8012174 <xTaskGetSchedulerState>
 80102d8:	4603      	mov	r3, r0
 80102da:	2b01      	cmp	r3, #1
 80102dc:	d101      	bne.n	80102e2 <osKernelRunning+0x12>
    return 0;
 80102de:	2300      	movs	r3, #0
 80102e0:	e000      	b.n	80102e4 <osKernelRunning+0x14>
  else
    return 1;
 80102e2:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 80102e4:	4618      	mov	r0, r3
 80102e6:	bd80      	pop	{r7, pc}

080102e8 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80102ec:	f7ff ffd7 	bl	801029e <inHandlerMode>
 80102f0:	4603      	mov	r3, r0
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d003      	beq.n	80102fe <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80102f6:	f001 fc19 	bl	8011b2c <xTaskGetTickCountFromISR>
 80102fa:	4603      	mov	r3, r0
 80102fc:	e002      	b.n	8010304 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80102fe:	f001 fc05 	bl	8011b0c <xTaskGetTickCount>
 8010302:	4603      	mov	r3, r0
  }
}
 8010304:	4618      	mov	r0, r3
 8010306:	bd80      	pop	{r7, pc}

08010308 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8010308:	b5f0      	push	{r4, r5, r6, r7, lr}
 801030a:	b087      	sub	sp, #28
 801030c:	af02      	add	r7, sp, #8
 801030e:	6078      	str	r0, [r7, #4]
 8010310:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	685c      	ldr	r4, [r3, #4]
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801031e:	b29e      	uxth	r6, r3
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010326:	4618      	mov	r0, r3
 8010328:	f7ff ffa1 	bl	801026e <makeFreeRtosPriority>
 801032c:	4602      	mov	r2, r0
 801032e:	f107 030c 	add.w	r3, r7, #12
 8010332:	9301      	str	r3, [sp, #4]
 8010334:	9200      	str	r2, [sp, #0]
 8010336:	683b      	ldr	r3, [r7, #0]
 8010338:	4632      	mov	r2, r6
 801033a:	4629      	mov	r1, r5
 801033c:	4620      	mov	r0, r4
 801033e:	f001 f97f 	bl	8011640 <xTaskCreate>
 8010342:	4603      	mov	r3, r0
 8010344:	2b01      	cmp	r3, #1
 8010346:	d001      	beq.n	801034c <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8010348:	2300      	movs	r3, #0
 801034a:	e000      	b.n	801034e <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 801034c:	68fb      	ldr	r3, [r7, #12]
}
 801034e:	4618      	mov	r0, r3
 8010350:	3714      	adds	r7, #20
 8010352:	46bd      	mov	sp, r7
 8010354:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010356 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8010356:	b580      	push	{r7, lr}
 8010358:	b084      	sub	sp, #16
 801035a:	af00      	add	r7, sp, #0
 801035c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d001      	beq.n	801036c <osDelay+0x16>
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	e000      	b.n	801036e <osDelay+0x18>
 801036c:	2301      	movs	r3, #1
 801036e:	4618      	mov	r0, r3
 8010370:	f001 fa9e 	bl	80118b0 <vTaskDelay>
  
  return osOK;
 8010374:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8010376:	4618      	mov	r0, r3
 8010378:	3710      	adds	r7, #16
 801037a:	46bd      	mov	sp, r7
 801037c:	bd80      	pop	{r7, pc}

0801037e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 801037e:	b580      	push	{r7, lr}
 8010380:	b084      	sub	sp, #16
 8010382:	af00      	add	r7, sp, #0
 8010384:	6078      	str	r0, [r7, #4]
 8010386:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8010388:	683b      	ldr	r3, [r7, #0]
 801038a:	2b01      	cmp	r3, #1
 801038c:	d110      	bne.n	80103b0 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 801038e:	2203      	movs	r2, #3
 8010390:	2100      	movs	r1, #0
 8010392:	2001      	movs	r0, #1
 8010394:	f000 fa94 	bl	80108c0 <xQueueGenericCreate>
 8010398:	60f8      	str	r0, [r7, #12]
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d005      	beq.n	80103ac <osSemaphoreCreate+0x2e>
 80103a0:	2300      	movs	r3, #0
 80103a2:	2200      	movs	r2, #0
 80103a4:	2100      	movs	r1, #0
 80103a6:	68f8      	ldr	r0, [r7, #12]
 80103a8:	f000 fb1c 	bl	80109e4 <xQueueGenericSend>
    return sema;
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	e006      	b.n	80103be <osSemaphoreCreate+0x40>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
 80103b0:	683b      	ldr	r3, [r7, #0]
 80103b2:	683a      	ldr	r2, [r7, #0]
 80103b4:	4611      	mov	r1, r2
 80103b6:	4618      	mov	r0, r3
 80103b8:	f000 fadd 	bl	8010976 <xQueueCreateCountingSemaphore>
 80103bc:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 80103be:	4618      	mov	r0, r3
 80103c0:	3710      	adds	r7, #16
 80103c2:	46bd      	mov	sp, r7
 80103c4:	bd80      	pop	{r7, pc}
	...

080103c8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b084      	sub	sp, #16
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
 80103d0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80103d2:	2300      	movs	r3, #0
 80103d4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d101      	bne.n	80103e0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80103dc:	2380      	movs	r3, #128	; 0x80
 80103de:	e03a      	b.n	8010456 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80103e0:	2300      	movs	r3, #0
 80103e2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80103e4:	683b      	ldr	r3, [r7, #0]
 80103e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103ea:	d103      	bne.n	80103f4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80103ec:	f04f 33ff 	mov.w	r3, #4294967295
 80103f0:	60fb      	str	r3, [r7, #12]
 80103f2:	e009      	b.n	8010408 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80103f4:	683b      	ldr	r3, [r7, #0]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d006      	beq.n	8010408 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80103fa:	683b      	ldr	r3, [r7, #0]
 80103fc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d101      	bne.n	8010408 <osSemaphoreWait+0x40>
      ticks = 1;
 8010404:	2301      	movs	r3, #1
 8010406:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8010408:	f7ff ff49 	bl	801029e <inHandlerMode>
 801040c:	4603      	mov	r3, r0
 801040e:	2b00      	cmp	r3, #0
 8010410:	d017      	beq.n	8010442 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8010412:	f107 0308 	add.w	r3, r7, #8
 8010416:	461a      	mov	r2, r3
 8010418:	2100      	movs	r1, #0
 801041a:	6878      	ldr	r0, [r7, #4]
 801041c:	f000 ff18 	bl	8011250 <xQueueReceiveFromISR>
 8010420:	4603      	mov	r3, r0
 8010422:	2b01      	cmp	r3, #1
 8010424:	d001      	beq.n	801042a <osSemaphoreWait+0x62>
      return osErrorOS;
 8010426:	23ff      	movs	r3, #255	; 0xff
 8010428:	e015      	b.n	8010456 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801042a:	68bb      	ldr	r3, [r7, #8]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d011      	beq.n	8010454 <osSemaphoreWait+0x8c>
 8010430:	4b0b      	ldr	r3, [pc, #44]	; (8010460 <osSemaphoreWait+0x98>)
 8010432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010436:	601a      	str	r2, [r3, #0]
 8010438:	f3bf 8f4f 	dsb	sy
 801043c:	f3bf 8f6f 	isb	sy
 8010440:	e008      	b.n	8010454 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8010442:	68f9      	ldr	r1, [r7, #12]
 8010444:	6878      	ldr	r0, [r7, #4]
 8010446:	f000 fdef 	bl	8011028 <xQueueSemaphoreTake>
 801044a:	4603      	mov	r3, r0
 801044c:	2b01      	cmp	r3, #1
 801044e:	d001      	beq.n	8010454 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8010450:	23ff      	movs	r3, #255	; 0xff
 8010452:	e000      	b.n	8010456 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8010454:	2300      	movs	r3, #0
}
 8010456:	4618      	mov	r0, r3
 8010458:	3710      	adds	r7, #16
 801045a:	46bd      	mov	sp, r7
 801045c:	bd80      	pop	{r7, pc}
 801045e:	bf00      	nop
 8010460:	e000ed04 	.word	0xe000ed04

08010464 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b084      	sub	sp, #16
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 801046c:	2300      	movs	r3, #0
 801046e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8010470:	2300      	movs	r3, #0
 8010472:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8010474:	f7ff ff13 	bl	801029e <inHandlerMode>
 8010478:	4603      	mov	r3, r0
 801047a:	2b00      	cmp	r3, #0
 801047c:	d016      	beq.n	80104ac <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801047e:	f107 0308 	add.w	r3, r7, #8
 8010482:	4619      	mov	r1, r3
 8010484:	6878      	ldr	r0, [r7, #4]
 8010486:	f000 fc53 	bl	8010d30 <xQueueGiveFromISR>
 801048a:	4603      	mov	r3, r0
 801048c:	2b01      	cmp	r3, #1
 801048e:	d001      	beq.n	8010494 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8010490:	23ff      	movs	r3, #255	; 0xff
 8010492:	e017      	b.n	80104c4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010494:	68bb      	ldr	r3, [r7, #8]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d013      	beq.n	80104c2 <osSemaphoreRelease+0x5e>
 801049a:	4b0c      	ldr	r3, [pc, #48]	; (80104cc <osSemaphoreRelease+0x68>)
 801049c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104a0:	601a      	str	r2, [r3, #0]
 80104a2:	f3bf 8f4f 	dsb	sy
 80104a6:	f3bf 8f6f 	isb	sy
 80104aa:	e00a      	b.n	80104c2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80104ac:	2300      	movs	r3, #0
 80104ae:	2200      	movs	r2, #0
 80104b0:	2100      	movs	r1, #0
 80104b2:	6878      	ldr	r0, [r7, #4]
 80104b4:	f000 fa96 	bl	80109e4 <xQueueGenericSend>
 80104b8:	4603      	mov	r3, r0
 80104ba:	2b01      	cmp	r3, #1
 80104bc:	d001      	beq.n	80104c2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80104be:	23ff      	movs	r3, #255	; 0xff
 80104c0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80104c2:	68fb      	ldr	r3, [r7, #12]
}
 80104c4:	4618      	mov	r0, r3
 80104c6:	3710      	adds	r7, #16
 80104c8:	46bd      	mov	sp, r7
 80104ca:	bd80      	pop	{r7, pc}
 80104cc:	e000ed04 	.word	0xe000ed04

080104d0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b082      	sub	sp, #8
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80104d8:	f7ff fee1 	bl	801029e <inHandlerMode>
 80104dc:	4603      	mov	r3, r0
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d001      	beq.n	80104e6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 80104e2:	2382      	movs	r3, #130	; 0x82
 80104e4:	e003      	b.n	80104ee <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80104e6:	6878      	ldr	r0, [r7, #4]
 80104e8:	f000 ff38 	bl	801135c <vQueueDelete>

  return osOK; 
 80104ec:	2300      	movs	r3, #0
}
 80104ee:	4618      	mov	r0, r3
 80104f0:	3708      	adds	r7, #8
 80104f2:	46bd      	mov	sp, r7
 80104f4:	bd80      	pop	{r7, pc}

080104f6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80104f6:	b580      	push	{r7, lr}
 80104f8:	b082      	sub	sp, #8
 80104fa:	af00      	add	r7, sp, #0
 80104fc:	6078      	str	r0, [r7, #4]
 80104fe:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	6818      	ldr	r0, [r3, #0]
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	685b      	ldr	r3, [r3, #4]
 8010508:	2200      	movs	r2, #0
 801050a:	4619      	mov	r1, r3
 801050c:	f000 f9d8 	bl	80108c0 <xQueueGenericCreate>
 8010510:	4603      	mov	r3, r0
#endif
}
 8010512:	4618      	mov	r0, r3
 8010514:	3708      	adds	r7, #8
 8010516:	46bd      	mov	sp, r7
 8010518:	bd80      	pop	{r7, pc}
	...

0801051c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b086      	sub	sp, #24
 8010520:	af00      	add	r7, sp, #0
 8010522:	60f8      	str	r0, [r7, #12]
 8010524:	60b9      	str	r1, [r7, #8]
 8010526:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8010528:	2300      	movs	r3, #0
 801052a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8010530:	697b      	ldr	r3, [r7, #20]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d101      	bne.n	801053a <osMessagePut+0x1e>
    ticks = 1;
 8010536:	2301      	movs	r3, #1
 8010538:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 801053a:	f7ff feb0 	bl	801029e <inHandlerMode>
 801053e:	4603      	mov	r3, r0
 8010540:	2b00      	cmp	r3, #0
 8010542:	d018      	beq.n	8010576 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8010544:	f107 0210 	add.w	r2, r7, #16
 8010548:	f107 0108 	add.w	r1, r7, #8
 801054c:	2300      	movs	r3, #0
 801054e:	68f8      	ldr	r0, [r7, #12]
 8010550:	f000 fb4e 	bl	8010bf0 <xQueueGenericSendFromISR>
 8010554:	4603      	mov	r3, r0
 8010556:	2b01      	cmp	r3, #1
 8010558:	d001      	beq.n	801055e <osMessagePut+0x42>
      return osErrorOS;
 801055a:	23ff      	movs	r3, #255	; 0xff
 801055c:	e018      	b.n	8010590 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801055e:	693b      	ldr	r3, [r7, #16]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d014      	beq.n	801058e <osMessagePut+0x72>
 8010564:	4b0c      	ldr	r3, [pc, #48]	; (8010598 <osMessagePut+0x7c>)
 8010566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801056a:	601a      	str	r2, [r3, #0]
 801056c:	f3bf 8f4f 	dsb	sy
 8010570:	f3bf 8f6f 	isb	sy
 8010574:	e00b      	b.n	801058e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8010576:	f107 0108 	add.w	r1, r7, #8
 801057a:	2300      	movs	r3, #0
 801057c:	697a      	ldr	r2, [r7, #20]
 801057e:	68f8      	ldr	r0, [r7, #12]
 8010580:	f000 fa30 	bl	80109e4 <xQueueGenericSend>
 8010584:	4603      	mov	r3, r0
 8010586:	2b01      	cmp	r3, #1
 8010588:	d001      	beq.n	801058e <osMessagePut+0x72>
      return osErrorOS;
 801058a:	23ff      	movs	r3, #255	; 0xff
 801058c:	e000      	b.n	8010590 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 801058e:	2300      	movs	r3, #0
}
 8010590:	4618      	mov	r0, r3
 8010592:	3718      	adds	r7, #24
 8010594:	46bd      	mov	sp, r7
 8010596:	bd80      	pop	{r7, pc}
 8010598:	e000ed04 	.word	0xe000ed04

0801059c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 801059c:	b590      	push	{r4, r7, lr}
 801059e:	b08b      	sub	sp, #44	; 0x2c
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	60f8      	str	r0, [r7, #12]
 80105a4:	60b9      	str	r1, [r7, #8]
 80105a6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80105a8:	68bb      	ldr	r3, [r7, #8]
 80105aa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80105ac:	2300      	movs	r3, #0
 80105ae:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80105b0:	68bb      	ldr	r3, [r7, #8]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d10a      	bne.n	80105cc <osMessageGet+0x30>
    event.status = osErrorParameter;
 80105b6:	2380      	movs	r3, #128	; 0x80
 80105b8:	617b      	str	r3, [r7, #20]
    return event;
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	461c      	mov	r4, r3
 80105be:	f107 0314 	add.w	r3, r7, #20
 80105c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80105c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80105ca:	e054      	b.n	8010676 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80105cc:	2300      	movs	r3, #0
 80105ce:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80105d0:	2300      	movs	r3, #0
 80105d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105da:	d103      	bne.n	80105e4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80105dc:	f04f 33ff 	mov.w	r3, #4294967295
 80105e0:	627b      	str	r3, [r7, #36]	; 0x24
 80105e2:	e009      	b.n	80105f8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d006      	beq.n	80105f8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80105ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d101      	bne.n	80105f8 <osMessageGet+0x5c>
      ticks = 1;
 80105f4:	2301      	movs	r3, #1
 80105f6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80105f8:	f7ff fe51 	bl	801029e <inHandlerMode>
 80105fc:	4603      	mov	r3, r0
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d01c      	beq.n	801063c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8010602:	f107 0220 	add.w	r2, r7, #32
 8010606:	f107 0314 	add.w	r3, r7, #20
 801060a:	3304      	adds	r3, #4
 801060c:	4619      	mov	r1, r3
 801060e:	68b8      	ldr	r0, [r7, #8]
 8010610:	f000 fe1e 	bl	8011250 <xQueueReceiveFromISR>
 8010614:	4603      	mov	r3, r0
 8010616:	2b01      	cmp	r3, #1
 8010618:	d102      	bne.n	8010620 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 801061a:	2310      	movs	r3, #16
 801061c:	617b      	str	r3, [r7, #20]
 801061e:	e001      	b.n	8010624 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8010620:	2300      	movs	r3, #0
 8010622:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010624:	6a3b      	ldr	r3, [r7, #32]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d01d      	beq.n	8010666 <osMessageGet+0xca>
 801062a:	4b15      	ldr	r3, [pc, #84]	; (8010680 <osMessageGet+0xe4>)
 801062c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010630:	601a      	str	r2, [r3, #0]
 8010632:	f3bf 8f4f 	dsb	sy
 8010636:	f3bf 8f6f 	isb	sy
 801063a:	e014      	b.n	8010666 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 801063c:	f107 0314 	add.w	r3, r7, #20
 8010640:	3304      	adds	r3, #4
 8010642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010644:	4619      	mov	r1, r3
 8010646:	68b8      	ldr	r0, [r7, #8]
 8010648:	f000 fc08 	bl	8010e5c <xQueueReceive>
 801064c:	4603      	mov	r3, r0
 801064e:	2b01      	cmp	r3, #1
 8010650:	d102      	bne.n	8010658 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8010652:	2310      	movs	r3, #16
 8010654:	617b      	str	r3, [r7, #20]
 8010656:	e006      	b.n	8010666 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8010658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801065a:	2b00      	cmp	r3, #0
 801065c:	d101      	bne.n	8010662 <osMessageGet+0xc6>
 801065e:	2300      	movs	r3, #0
 8010660:	e000      	b.n	8010664 <osMessageGet+0xc8>
 8010662:	2340      	movs	r3, #64	; 0x40
 8010664:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	461c      	mov	r4, r3
 801066a:	f107 0314 	add.w	r3, r7, #20
 801066e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010672:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8010676:	68f8      	ldr	r0, [r7, #12]
 8010678:	372c      	adds	r7, #44	; 0x2c
 801067a:	46bd      	mov	sp, r7
 801067c:	bd90      	pop	{r4, r7, pc}
 801067e:	bf00      	nop
 8010680:	e000ed04 	.word	0xe000ed04

08010684 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010684:	b480      	push	{r7}
 8010686:	b083      	sub	sp, #12
 8010688:	af00      	add	r7, sp, #0
 801068a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	f103 0208 	add.w	r2, r3, #8
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	f04f 32ff 	mov.w	r2, #4294967295
 801069c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	f103 0208 	add.w	r2, r3, #8
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	f103 0208 	add.w	r2, r3, #8
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	2200      	movs	r2, #0
 80106b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80106b8:	bf00      	nop
 80106ba:	370c      	adds	r7, #12
 80106bc:	46bd      	mov	sp, r7
 80106be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c2:	4770      	bx	lr

080106c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80106c4:	b480      	push	{r7}
 80106c6:	b083      	sub	sp, #12
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2200      	movs	r2, #0
 80106d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80106d2:	bf00      	nop
 80106d4:	370c      	adds	r7, #12
 80106d6:	46bd      	mov	sp, r7
 80106d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106dc:	4770      	bx	lr

080106de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80106de:	b480      	push	{r7}
 80106e0:	b085      	sub	sp, #20
 80106e2:	af00      	add	r7, sp, #0
 80106e4:	6078      	str	r0, [r7, #4]
 80106e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	685b      	ldr	r3, [r3, #4]
 80106ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80106ee:	683b      	ldr	r3, [r7, #0]
 80106f0:	68fa      	ldr	r2, [r7, #12]
 80106f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	689a      	ldr	r2, [r3, #8]
 80106f8:	683b      	ldr	r3, [r7, #0]
 80106fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	689b      	ldr	r3, [r3, #8]
 8010700:	683a      	ldr	r2, [r7, #0]
 8010702:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	683a      	ldr	r2, [r7, #0]
 8010708:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 801070a:	683b      	ldr	r3, [r7, #0]
 801070c:	687a      	ldr	r2, [r7, #4]
 801070e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	1c5a      	adds	r2, r3, #1
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	601a      	str	r2, [r3, #0]
}
 801071a:	bf00      	nop
 801071c:	3714      	adds	r7, #20
 801071e:	46bd      	mov	sp, r7
 8010720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010724:	4770      	bx	lr

08010726 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010726:	b480      	push	{r7}
 8010728:	b085      	sub	sp, #20
 801072a:	af00      	add	r7, sp, #0
 801072c:	6078      	str	r0, [r7, #4]
 801072e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010730:	683b      	ldr	r3, [r7, #0]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010736:	68bb      	ldr	r3, [r7, #8]
 8010738:	f1b3 3fff 	cmp.w	r3, #4294967295
 801073c:	d103      	bne.n	8010746 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	691b      	ldr	r3, [r3, #16]
 8010742:	60fb      	str	r3, [r7, #12]
 8010744:	e00c      	b.n	8010760 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	3308      	adds	r3, #8
 801074a:	60fb      	str	r3, [r7, #12]
 801074c:	e002      	b.n	8010754 <vListInsert+0x2e>
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	685b      	ldr	r3, [r3, #4]
 8010752:	60fb      	str	r3, [r7, #12]
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	685b      	ldr	r3, [r3, #4]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	68ba      	ldr	r2, [r7, #8]
 801075c:	429a      	cmp	r2, r3
 801075e:	d2f6      	bcs.n	801074e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	685a      	ldr	r2, [r3, #4]
 8010764:	683b      	ldr	r3, [r7, #0]
 8010766:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010768:	683b      	ldr	r3, [r7, #0]
 801076a:	685b      	ldr	r3, [r3, #4]
 801076c:	683a      	ldr	r2, [r7, #0]
 801076e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010770:	683b      	ldr	r3, [r7, #0]
 8010772:	68fa      	ldr	r2, [r7, #12]
 8010774:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	683a      	ldr	r2, [r7, #0]
 801077a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 801077c:	683b      	ldr	r3, [r7, #0]
 801077e:	687a      	ldr	r2, [r7, #4]
 8010780:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	1c5a      	adds	r2, r3, #1
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	601a      	str	r2, [r3, #0]
}
 801078c:	bf00      	nop
 801078e:	3714      	adds	r7, #20
 8010790:	46bd      	mov	sp, r7
 8010792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010796:	4770      	bx	lr

08010798 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010798:	b480      	push	{r7}
 801079a:	b085      	sub	sp, #20
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	691b      	ldr	r3, [r3, #16]
 80107a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	685b      	ldr	r3, [r3, #4]
 80107aa:	687a      	ldr	r2, [r7, #4]
 80107ac:	6892      	ldr	r2, [r2, #8]
 80107ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	689b      	ldr	r3, [r3, #8]
 80107b4:	687a      	ldr	r2, [r7, #4]
 80107b6:	6852      	ldr	r2, [r2, #4]
 80107b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	685b      	ldr	r3, [r3, #4]
 80107be:	687a      	ldr	r2, [r7, #4]
 80107c0:	429a      	cmp	r2, r3
 80107c2:	d103      	bne.n	80107cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	689a      	ldr	r2, [r3, #8]
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	2200      	movs	r2, #0
 80107d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	1e5a      	subs	r2, r3, #1
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	681b      	ldr	r3, [r3, #0]
}
 80107e0:	4618      	mov	r0, r3
 80107e2:	3714      	adds	r7, #20
 80107e4:	46bd      	mov	sp, r7
 80107e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ea:	4770      	bx	lr

080107ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b084      	sub	sp, #16
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
 80107f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d10c      	bne.n	801081a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010804:	b672      	cpsid	i
 8010806:	f383 8811 	msr	BASEPRI, r3
 801080a:	f3bf 8f6f 	isb	sy
 801080e:	f3bf 8f4f 	dsb	sy
 8010812:	b662      	cpsie	i
 8010814:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010816:	bf00      	nop
 8010818:	e7fe      	b.n	8010818 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 801081a:	f002 f807 	bl	801282c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	681a      	ldr	r2, [r3, #0]
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010826:	68f9      	ldr	r1, [r7, #12]
 8010828:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801082a:	fb01 f303 	mul.w	r3, r1, r3
 801082e:	441a      	add	r2, r3
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	2200      	movs	r2, #0
 8010838:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	681a      	ldr	r2, [r3, #0]
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	681a      	ldr	r2, [r3, #0]
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801084a:	3b01      	subs	r3, #1
 801084c:	68f9      	ldr	r1, [r7, #12]
 801084e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010850:	fb01 f303 	mul.w	r3, r1, r3
 8010854:	441a      	add	r2, r3
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	22ff      	movs	r2, #255	; 0xff
 801085e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	22ff      	movs	r2, #255	; 0xff
 8010866:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801086a:	683b      	ldr	r3, [r7, #0]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d114      	bne.n	801089a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	691b      	ldr	r3, [r3, #16]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d01a      	beq.n	80108ae <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	3310      	adds	r3, #16
 801087c:	4618      	mov	r0, r3
 801087e:	f001 facf 	bl	8011e20 <xTaskRemoveFromEventList>
 8010882:	4603      	mov	r3, r0
 8010884:	2b00      	cmp	r3, #0
 8010886:	d012      	beq.n	80108ae <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010888:	4b0c      	ldr	r3, [pc, #48]	; (80108bc <xQueueGenericReset+0xd0>)
 801088a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801088e:	601a      	str	r2, [r3, #0]
 8010890:	f3bf 8f4f 	dsb	sy
 8010894:	f3bf 8f6f 	isb	sy
 8010898:	e009      	b.n	80108ae <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	3310      	adds	r3, #16
 801089e:	4618      	mov	r0, r3
 80108a0:	f7ff fef0 	bl	8010684 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	3324      	adds	r3, #36	; 0x24
 80108a8:	4618      	mov	r0, r3
 80108aa:	f7ff feeb 	bl	8010684 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80108ae:	f001 fff1 	bl	8012894 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80108b2:	2301      	movs	r3, #1
}
 80108b4:	4618      	mov	r0, r3
 80108b6:	3710      	adds	r7, #16
 80108b8:	46bd      	mov	sp, r7
 80108ba:	bd80      	pop	{r7, pc}
 80108bc:	e000ed04 	.word	0xe000ed04

080108c0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b08a      	sub	sp, #40	; 0x28
 80108c4:	af02      	add	r7, sp, #8
 80108c6:	60f8      	str	r0, [r7, #12]
 80108c8:	60b9      	str	r1, [r7, #8]
 80108ca:	4613      	mov	r3, r2
 80108cc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d10c      	bne.n	80108ee <xQueueGenericCreate+0x2e>
	__asm volatile
 80108d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108d8:	b672      	cpsid	i
 80108da:	f383 8811 	msr	BASEPRI, r3
 80108de:	f3bf 8f6f 	isb	sy
 80108e2:	f3bf 8f4f 	dsb	sy
 80108e6:	b662      	cpsie	i
 80108e8:	613b      	str	r3, [r7, #16]
}
 80108ea:	bf00      	nop
 80108ec:	e7fe      	b.n	80108ec <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80108ee:	68bb      	ldr	r3, [r7, #8]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d102      	bne.n	80108fa <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80108f4:	2300      	movs	r3, #0
 80108f6:	61fb      	str	r3, [r7, #28]
 80108f8:	e004      	b.n	8010904 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	68ba      	ldr	r2, [r7, #8]
 80108fe:	fb02 f303 	mul.w	r3, r2, r3
 8010902:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8010904:	69fb      	ldr	r3, [r7, #28]
 8010906:	3348      	adds	r3, #72	; 0x48
 8010908:	4618      	mov	r0, r3
 801090a:	f002 f8bb 	bl	8012a84 <pvPortMalloc>
 801090e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010910:	69bb      	ldr	r3, [r7, #24]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d00b      	beq.n	801092e <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8010916:	69bb      	ldr	r3, [r7, #24]
 8010918:	3348      	adds	r3, #72	; 0x48
 801091a:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801091c:	79fa      	ldrb	r2, [r7, #7]
 801091e:	69bb      	ldr	r3, [r7, #24]
 8010920:	9300      	str	r3, [sp, #0]
 8010922:	4613      	mov	r3, r2
 8010924:	697a      	ldr	r2, [r7, #20]
 8010926:	68b9      	ldr	r1, [r7, #8]
 8010928:	68f8      	ldr	r0, [r7, #12]
 801092a:	f000 f805 	bl	8010938 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 801092e:	69bb      	ldr	r3, [r7, #24]
	}
 8010930:	4618      	mov	r0, r3
 8010932:	3720      	adds	r7, #32
 8010934:	46bd      	mov	sp, r7
 8010936:	bd80      	pop	{r7, pc}

08010938 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010938:	b580      	push	{r7, lr}
 801093a:	b084      	sub	sp, #16
 801093c:	af00      	add	r7, sp, #0
 801093e:	60f8      	str	r0, [r7, #12]
 8010940:	60b9      	str	r1, [r7, #8]
 8010942:	607a      	str	r2, [r7, #4]
 8010944:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010946:	68bb      	ldr	r3, [r7, #8]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d103      	bne.n	8010954 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801094c:	69bb      	ldr	r3, [r7, #24]
 801094e:	69ba      	ldr	r2, [r7, #24]
 8010950:	601a      	str	r2, [r3, #0]
 8010952:	e002      	b.n	801095a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010954:	69bb      	ldr	r3, [r7, #24]
 8010956:	687a      	ldr	r2, [r7, #4]
 8010958:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801095a:	69bb      	ldr	r3, [r7, #24]
 801095c:	68fa      	ldr	r2, [r7, #12]
 801095e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010960:	69bb      	ldr	r3, [r7, #24]
 8010962:	68ba      	ldr	r2, [r7, #8]
 8010964:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010966:	2101      	movs	r1, #1
 8010968:	69b8      	ldr	r0, [r7, #24]
 801096a:	f7ff ff3f 	bl	80107ec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801096e:	bf00      	nop
 8010970:	3710      	adds	r7, #16
 8010972:	46bd      	mov	sp, r7
 8010974:	bd80      	pop	{r7, pc}

08010976 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8010976:	b580      	push	{r7, lr}
 8010978:	b086      	sub	sp, #24
 801097a:	af00      	add	r7, sp, #0
 801097c:	6078      	str	r0, [r7, #4]
 801097e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d10c      	bne.n	80109a0 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8010986:	f04f 0350 	mov.w	r3, #80	; 0x50
 801098a:	b672      	cpsid	i
 801098c:	f383 8811 	msr	BASEPRI, r3
 8010990:	f3bf 8f6f 	isb	sy
 8010994:	f3bf 8f4f 	dsb	sy
 8010998:	b662      	cpsie	i
 801099a:	613b      	str	r3, [r7, #16]
}
 801099c:	bf00      	nop
 801099e:	e7fe      	b.n	801099e <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80109a0:	683a      	ldr	r2, [r7, #0]
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	429a      	cmp	r2, r3
 80109a6:	d90c      	bls.n	80109c2 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 80109a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109ac:	b672      	cpsid	i
 80109ae:	f383 8811 	msr	BASEPRI, r3
 80109b2:	f3bf 8f6f 	isb	sy
 80109b6:	f3bf 8f4f 	dsb	sy
 80109ba:	b662      	cpsie	i
 80109bc:	60fb      	str	r3, [r7, #12]
}
 80109be:	bf00      	nop
 80109c0:	e7fe      	b.n	80109c0 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80109c2:	2202      	movs	r2, #2
 80109c4:	2100      	movs	r1, #0
 80109c6:	6878      	ldr	r0, [r7, #4]
 80109c8:	f7ff ff7a 	bl	80108c0 <xQueueGenericCreate>
 80109cc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80109ce:	697b      	ldr	r3, [r7, #20]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d002      	beq.n	80109da <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80109d4:	697b      	ldr	r3, [r7, #20]
 80109d6:	683a      	ldr	r2, [r7, #0]
 80109d8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80109da:	697b      	ldr	r3, [r7, #20]
	}
 80109dc:	4618      	mov	r0, r3
 80109de:	3718      	adds	r7, #24
 80109e0:	46bd      	mov	sp, r7
 80109e2:	bd80      	pop	{r7, pc}

080109e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b08e      	sub	sp, #56	; 0x38
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	60f8      	str	r0, [r7, #12]
 80109ec:	60b9      	str	r1, [r7, #8]
 80109ee:	607a      	str	r2, [r7, #4]
 80109f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80109f2:	2300      	movs	r3, #0
 80109f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80109fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d10c      	bne.n	8010a1a <xQueueGenericSend+0x36>
	__asm volatile
 8010a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a04:	b672      	cpsid	i
 8010a06:	f383 8811 	msr	BASEPRI, r3
 8010a0a:	f3bf 8f6f 	isb	sy
 8010a0e:	f3bf 8f4f 	dsb	sy
 8010a12:	b662      	cpsie	i
 8010a14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010a16:	bf00      	nop
 8010a18:	e7fe      	b.n	8010a18 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010a1a:	68bb      	ldr	r3, [r7, #8]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d103      	bne.n	8010a28 <xQueueGenericSend+0x44>
 8010a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d101      	bne.n	8010a2c <xQueueGenericSend+0x48>
 8010a28:	2301      	movs	r3, #1
 8010a2a:	e000      	b.n	8010a2e <xQueueGenericSend+0x4a>
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d10c      	bne.n	8010a4c <xQueueGenericSend+0x68>
	__asm volatile
 8010a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a36:	b672      	cpsid	i
 8010a38:	f383 8811 	msr	BASEPRI, r3
 8010a3c:	f3bf 8f6f 	isb	sy
 8010a40:	f3bf 8f4f 	dsb	sy
 8010a44:	b662      	cpsie	i
 8010a46:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010a48:	bf00      	nop
 8010a4a:	e7fe      	b.n	8010a4a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010a4c:	683b      	ldr	r3, [r7, #0]
 8010a4e:	2b02      	cmp	r3, #2
 8010a50:	d103      	bne.n	8010a5a <xQueueGenericSend+0x76>
 8010a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a56:	2b01      	cmp	r3, #1
 8010a58:	d101      	bne.n	8010a5e <xQueueGenericSend+0x7a>
 8010a5a:	2301      	movs	r3, #1
 8010a5c:	e000      	b.n	8010a60 <xQueueGenericSend+0x7c>
 8010a5e:	2300      	movs	r3, #0
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d10c      	bne.n	8010a7e <xQueueGenericSend+0x9a>
	__asm volatile
 8010a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a68:	b672      	cpsid	i
 8010a6a:	f383 8811 	msr	BASEPRI, r3
 8010a6e:	f3bf 8f6f 	isb	sy
 8010a72:	f3bf 8f4f 	dsb	sy
 8010a76:	b662      	cpsie	i
 8010a78:	623b      	str	r3, [r7, #32]
}
 8010a7a:	bf00      	nop
 8010a7c:	e7fe      	b.n	8010a7c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010a7e:	f001 fb79 	bl	8012174 <xTaskGetSchedulerState>
 8010a82:	4603      	mov	r3, r0
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d102      	bne.n	8010a8e <xQueueGenericSend+0xaa>
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d101      	bne.n	8010a92 <xQueueGenericSend+0xae>
 8010a8e:	2301      	movs	r3, #1
 8010a90:	e000      	b.n	8010a94 <xQueueGenericSend+0xb0>
 8010a92:	2300      	movs	r3, #0
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d10c      	bne.n	8010ab2 <xQueueGenericSend+0xce>
	__asm volatile
 8010a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a9c:	b672      	cpsid	i
 8010a9e:	f383 8811 	msr	BASEPRI, r3
 8010aa2:	f3bf 8f6f 	isb	sy
 8010aa6:	f3bf 8f4f 	dsb	sy
 8010aaa:	b662      	cpsie	i
 8010aac:	61fb      	str	r3, [r7, #28]
}
 8010aae:	bf00      	nop
 8010ab0:	e7fe      	b.n	8010ab0 <xQueueGenericSend+0xcc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010ab2:	f001 febb 	bl	801282c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ab8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010abe:	429a      	cmp	r2, r3
 8010ac0:	d302      	bcc.n	8010ac8 <xQueueGenericSend+0xe4>
 8010ac2:	683b      	ldr	r3, [r7, #0]
 8010ac4:	2b02      	cmp	r3, #2
 8010ac6:	d129      	bne.n	8010b1c <xQueueGenericSend+0x138>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010ac8:	683a      	ldr	r2, [r7, #0]
 8010aca:	68b9      	ldr	r1, [r7, #8]
 8010acc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ace:	f000 fc7d 	bl	80113cc <prvCopyDataToQueue>
 8010ad2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d010      	beq.n	8010afe <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ade:	3324      	adds	r3, #36	; 0x24
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	f001 f99d 	bl	8011e20 <xTaskRemoveFromEventList>
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d013      	beq.n	8010b14 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010aec:	4b3f      	ldr	r3, [pc, #252]	; (8010bec <xQueueGenericSend+0x208>)
 8010aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010af2:	601a      	str	r2, [r3, #0]
 8010af4:	f3bf 8f4f 	dsb	sy
 8010af8:	f3bf 8f6f 	isb	sy
 8010afc:	e00a      	b.n	8010b14 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d007      	beq.n	8010b14 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010b04:	4b39      	ldr	r3, [pc, #228]	; (8010bec <xQueueGenericSend+0x208>)
 8010b06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b0a:	601a      	str	r2, [r3, #0]
 8010b0c:	f3bf 8f4f 	dsb	sy
 8010b10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010b14:	f001 febe 	bl	8012894 <vPortExitCritical>
				return pdPASS;
 8010b18:	2301      	movs	r3, #1
 8010b1a:	e063      	b.n	8010be4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d103      	bne.n	8010b2a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010b22:	f001 feb7 	bl	8012894 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010b26:	2300      	movs	r3, #0
 8010b28:	e05c      	b.n	8010be4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d106      	bne.n	8010b3e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010b30:	f107 0314 	add.w	r3, r7, #20
 8010b34:	4618      	mov	r0, r3
 8010b36:	f001 f9d7 	bl	8011ee8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010b3a:	2301      	movs	r3, #1
 8010b3c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010b3e:	f001 fea9 	bl	8012894 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010b42:	f000 ff37 	bl	80119b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010b46:	f001 fe71 	bl	801282c <vPortEnterCritical>
 8010b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010b50:	b25b      	sxtb	r3, r3
 8010b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b56:	d103      	bne.n	8010b60 <xQueueGenericSend+0x17c>
 8010b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010b66:	b25b      	sxtb	r3, r3
 8010b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b6c:	d103      	bne.n	8010b76 <xQueueGenericSend+0x192>
 8010b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b70:	2200      	movs	r2, #0
 8010b72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010b76:	f001 fe8d 	bl	8012894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010b7a:	1d3a      	adds	r2, r7, #4
 8010b7c:	f107 0314 	add.w	r3, r7, #20
 8010b80:	4611      	mov	r1, r2
 8010b82:	4618      	mov	r0, r3
 8010b84:	f001 f9c6 	bl	8011f14 <xTaskCheckForTimeOut>
 8010b88:	4603      	mov	r3, r0
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d124      	bne.n	8010bd8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010b8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b90:	f000 fd14 	bl	80115bc <prvIsQueueFull>
 8010b94:	4603      	mov	r3, r0
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d018      	beq.n	8010bcc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b9c:	3310      	adds	r3, #16
 8010b9e:	687a      	ldr	r2, [r7, #4]
 8010ba0:	4611      	mov	r1, r2
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	f001 f916 	bl	8011dd4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010ba8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010baa:	f000 fc9f 	bl	80114ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010bae:	f000 ff0f 	bl	80119d0 <xTaskResumeAll>
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	f47f af7c 	bne.w	8010ab2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8010bba:	4b0c      	ldr	r3, [pc, #48]	; (8010bec <xQueueGenericSend+0x208>)
 8010bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bc0:	601a      	str	r2, [r3, #0]
 8010bc2:	f3bf 8f4f 	dsb	sy
 8010bc6:	f3bf 8f6f 	isb	sy
 8010bca:	e772      	b.n	8010ab2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010bcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010bce:	f000 fc8d 	bl	80114ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010bd2:	f000 fefd 	bl	80119d0 <xTaskResumeAll>
 8010bd6:	e76c      	b.n	8010ab2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010bd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010bda:	f000 fc87 	bl	80114ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010bde:	f000 fef7 	bl	80119d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010be2:	2300      	movs	r3, #0
		}
	}
}
 8010be4:	4618      	mov	r0, r3
 8010be6:	3738      	adds	r7, #56	; 0x38
 8010be8:	46bd      	mov	sp, r7
 8010bea:	bd80      	pop	{r7, pc}
 8010bec:	e000ed04 	.word	0xe000ed04

08010bf0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b08e      	sub	sp, #56	; 0x38
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	60f8      	str	r0, [r7, #12]
 8010bf8:	60b9      	str	r1, [r7, #8]
 8010bfa:	607a      	str	r2, [r7, #4]
 8010bfc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d10c      	bne.n	8010c22 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8010c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c0c:	b672      	cpsid	i
 8010c0e:	f383 8811 	msr	BASEPRI, r3
 8010c12:	f3bf 8f6f 	isb	sy
 8010c16:	f3bf 8f4f 	dsb	sy
 8010c1a:	b662      	cpsie	i
 8010c1c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010c1e:	bf00      	nop
 8010c20:	e7fe      	b.n	8010c20 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010c22:	68bb      	ldr	r3, [r7, #8]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d103      	bne.n	8010c30 <xQueueGenericSendFromISR+0x40>
 8010c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d101      	bne.n	8010c34 <xQueueGenericSendFromISR+0x44>
 8010c30:	2301      	movs	r3, #1
 8010c32:	e000      	b.n	8010c36 <xQueueGenericSendFromISR+0x46>
 8010c34:	2300      	movs	r3, #0
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d10c      	bne.n	8010c54 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8010c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c3e:	b672      	cpsid	i
 8010c40:	f383 8811 	msr	BASEPRI, r3
 8010c44:	f3bf 8f6f 	isb	sy
 8010c48:	f3bf 8f4f 	dsb	sy
 8010c4c:	b662      	cpsie	i
 8010c4e:	623b      	str	r3, [r7, #32]
}
 8010c50:	bf00      	nop
 8010c52:	e7fe      	b.n	8010c52 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	2b02      	cmp	r3, #2
 8010c58:	d103      	bne.n	8010c62 <xQueueGenericSendFromISR+0x72>
 8010c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c5e:	2b01      	cmp	r3, #1
 8010c60:	d101      	bne.n	8010c66 <xQueueGenericSendFromISR+0x76>
 8010c62:	2301      	movs	r3, #1
 8010c64:	e000      	b.n	8010c68 <xQueueGenericSendFromISR+0x78>
 8010c66:	2300      	movs	r3, #0
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d10c      	bne.n	8010c86 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8010c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c70:	b672      	cpsid	i
 8010c72:	f383 8811 	msr	BASEPRI, r3
 8010c76:	f3bf 8f6f 	isb	sy
 8010c7a:	f3bf 8f4f 	dsb	sy
 8010c7e:	b662      	cpsie	i
 8010c80:	61fb      	str	r3, [r7, #28]
}
 8010c82:	bf00      	nop
 8010c84:	e7fe      	b.n	8010c84 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010c86:	f001 feb9 	bl	80129fc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010c8a:	f3ef 8211 	mrs	r2, BASEPRI
 8010c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c92:	b672      	cpsid	i
 8010c94:	f383 8811 	msr	BASEPRI, r3
 8010c98:	f3bf 8f6f 	isb	sy
 8010c9c:	f3bf 8f4f 	dsb	sy
 8010ca0:	b662      	cpsie	i
 8010ca2:	61ba      	str	r2, [r7, #24]
 8010ca4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010ca6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010cb2:	429a      	cmp	r2, r3
 8010cb4:	d302      	bcc.n	8010cbc <xQueueGenericSendFromISR+0xcc>
 8010cb6:	683b      	ldr	r3, [r7, #0]
 8010cb8:	2b02      	cmp	r3, #2
 8010cba:	d12c      	bne.n	8010d16 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010cc6:	683a      	ldr	r2, [r7, #0]
 8010cc8:	68b9      	ldr	r1, [r7, #8]
 8010cca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ccc:	f000 fb7e 	bl	80113cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010cd0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8010cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cd8:	d112      	bne.n	8010d00 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d016      	beq.n	8010d10 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ce4:	3324      	adds	r3, #36	; 0x24
 8010ce6:	4618      	mov	r0, r3
 8010ce8:	f001 f89a 	bl	8011e20 <xTaskRemoveFromEventList>
 8010cec:	4603      	mov	r3, r0
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d00e      	beq.n	8010d10 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d00b      	beq.n	8010d10 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	2201      	movs	r2, #1
 8010cfc:	601a      	str	r2, [r3, #0]
 8010cfe:	e007      	b.n	8010d10 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010d00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010d04:	3301      	adds	r3, #1
 8010d06:	b2db      	uxtb	r3, r3
 8010d08:	b25a      	sxtb	r2, r3
 8010d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010d10:	2301      	movs	r3, #1
 8010d12:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8010d14:	e001      	b.n	8010d1a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010d16:	2300      	movs	r3, #0
 8010d18:	637b      	str	r3, [r7, #52]	; 0x34
 8010d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d1c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010d1e:	693b      	ldr	r3, [r7, #16]
 8010d20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010d24:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010d28:	4618      	mov	r0, r3
 8010d2a:	3738      	adds	r7, #56	; 0x38
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	bd80      	pop	{r7, pc}

08010d30 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010d30:	b580      	push	{r7, lr}
 8010d32:	b08e      	sub	sp, #56	; 0x38
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
 8010d38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d10c      	bne.n	8010d5e <xQueueGiveFromISR+0x2e>
	__asm volatile
 8010d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d48:	b672      	cpsid	i
 8010d4a:	f383 8811 	msr	BASEPRI, r3
 8010d4e:	f3bf 8f6f 	isb	sy
 8010d52:	f3bf 8f4f 	dsb	sy
 8010d56:	b662      	cpsie	i
 8010d58:	623b      	str	r3, [r7, #32]
}
 8010d5a:	bf00      	nop
 8010d5c:	e7fe      	b.n	8010d5c <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d00c      	beq.n	8010d80 <xQueueGiveFromISR+0x50>
	__asm volatile
 8010d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d6a:	b672      	cpsid	i
 8010d6c:	f383 8811 	msr	BASEPRI, r3
 8010d70:	f3bf 8f6f 	isb	sy
 8010d74:	f3bf 8f4f 	dsb	sy
 8010d78:	b662      	cpsie	i
 8010d7a:	61fb      	str	r3, [r7, #28]
}
 8010d7c:	bf00      	nop
 8010d7e:	e7fe      	b.n	8010d7e <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8010d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d103      	bne.n	8010d90 <xQueueGiveFromISR+0x60>
 8010d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d8a:	685b      	ldr	r3, [r3, #4]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d101      	bne.n	8010d94 <xQueueGiveFromISR+0x64>
 8010d90:	2301      	movs	r3, #1
 8010d92:	e000      	b.n	8010d96 <xQueueGiveFromISR+0x66>
 8010d94:	2300      	movs	r3, #0
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d10c      	bne.n	8010db4 <xQueueGiveFromISR+0x84>
	__asm volatile
 8010d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d9e:	b672      	cpsid	i
 8010da0:	f383 8811 	msr	BASEPRI, r3
 8010da4:	f3bf 8f6f 	isb	sy
 8010da8:	f3bf 8f4f 	dsb	sy
 8010dac:	b662      	cpsie	i
 8010dae:	61bb      	str	r3, [r7, #24]
}
 8010db0:	bf00      	nop
 8010db2:	e7fe      	b.n	8010db2 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010db4:	f001 fe22 	bl	80129fc <vPortValidateInterruptPriority>
	__asm volatile
 8010db8:	f3ef 8211 	mrs	r2, BASEPRI
 8010dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dc0:	b672      	cpsid	i
 8010dc2:	f383 8811 	msr	BASEPRI, r3
 8010dc6:	f3bf 8f6f 	isb	sy
 8010dca:	f3bf 8f4f 	dsb	sy
 8010dce:	b662      	cpsie	i
 8010dd0:	617a      	str	r2, [r7, #20]
 8010dd2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010dd4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ddc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010de2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010de4:	429a      	cmp	r2, r3
 8010de6:	d22b      	bcs.n	8010e40 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010dee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010df4:	1c5a      	adds	r2, r3, #1
 8010df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010df8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010dfa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e02:	d112      	bne.n	8010e2a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d016      	beq.n	8010e3a <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e0e:	3324      	adds	r3, #36	; 0x24
 8010e10:	4618      	mov	r0, r3
 8010e12:	f001 f805 	bl	8011e20 <xTaskRemoveFromEventList>
 8010e16:	4603      	mov	r3, r0
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d00e      	beq.n	8010e3a <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010e1c:	683b      	ldr	r3, [r7, #0]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d00b      	beq.n	8010e3a <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010e22:	683b      	ldr	r3, [r7, #0]
 8010e24:	2201      	movs	r2, #1
 8010e26:	601a      	str	r2, [r3, #0]
 8010e28:	e007      	b.n	8010e3a <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010e2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e2e:	3301      	adds	r3, #1
 8010e30:	b2db      	uxtb	r3, r3
 8010e32:	b25a      	sxtb	r2, r3
 8010e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010e3a:	2301      	movs	r3, #1
 8010e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8010e3e:	e001      	b.n	8010e44 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010e40:	2300      	movs	r3, #0
 8010e42:	637b      	str	r3, [r7, #52]	; 0x34
 8010e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e46:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	f383 8811 	msr	BASEPRI, r3
}
 8010e4e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010e52:	4618      	mov	r0, r3
 8010e54:	3738      	adds	r7, #56	; 0x38
 8010e56:	46bd      	mov	sp, r7
 8010e58:	bd80      	pop	{r7, pc}
	...

08010e5c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b08c      	sub	sp, #48	; 0x30
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	60f8      	str	r0, [r7, #12]
 8010e64:	60b9      	str	r1, [r7, #8]
 8010e66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010e68:	2300      	movs	r3, #0
 8010e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d10c      	bne.n	8010e90 <xQueueReceive+0x34>
	__asm volatile
 8010e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e7a:	b672      	cpsid	i
 8010e7c:	f383 8811 	msr	BASEPRI, r3
 8010e80:	f3bf 8f6f 	isb	sy
 8010e84:	f3bf 8f4f 	dsb	sy
 8010e88:	b662      	cpsie	i
 8010e8a:	623b      	str	r3, [r7, #32]
}
 8010e8c:	bf00      	nop
 8010e8e:	e7fe      	b.n	8010e8e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010e90:	68bb      	ldr	r3, [r7, #8]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d103      	bne.n	8010e9e <xQueueReceive+0x42>
 8010e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d101      	bne.n	8010ea2 <xQueueReceive+0x46>
 8010e9e:	2301      	movs	r3, #1
 8010ea0:	e000      	b.n	8010ea4 <xQueueReceive+0x48>
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d10c      	bne.n	8010ec2 <xQueueReceive+0x66>
	__asm volatile
 8010ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eac:	b672      	cpsid	i
 8010eae:	f383 8811 	msr	BASEPRI, r3
 8010eb2:	f3bf 8f6f 	isb	sy
 8010eb6:	f3bf 8f4f 	dsb	sy
 8010eba:	b662      	cpsie	i
 8010ebc:	61fb      	str	r3, [r7, #28]
}
 8010ebe:	bf00      	nop
 8010ec0:	e7fe      	b.n	8010ec0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010ec2:	f001 f957 	bl	8012174 <xTaskGetSchedulerState>
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d102      	bne.n	8010ed2 <xQueueReceive+0x76>
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d101      	bne.n	8010ed6 <xQueueReceive+0x7a>
 8010ed2:	2301      	movs	r3, #1
 8010ed4:	e000      	b.n	8010ed8 <xQueueReceive+0x7c>
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d10c      	bne.n	8010ef6 <xQueueReceive+0x9a>
	__asm volatile
 8010edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ee0:	b672      	cpsid	i
 8010ee2:	f383 8811 	msr	BASEPRI, r3
 8010ee6:	f3bf 8f6f 	isb	sy
 8010eea:	f3bf 8f4f 	dsb	sy
 8010eee:	b662      	cpsie	i
 8010ef0:	61bb      	str	r3, [r7, #24]
}
 8010ef2:	bf00      	nop
 8010ef4:	e7fe      	b.n	8010ef4 <xQueueReceive+0x98>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8010ef6:	f001 fc99 	bl	801282c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010efe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d01f      	beq.n	8010f46 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010f06:	68b9      	ldr	r1, [r7, #8]
 8010f08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f0a:	f000 fac9 	bl	80114a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f10:	1e5a      	subs	r2, r3, #1
 8010f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f14:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f18:	691b      	ldr	r3, [r3, #16]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d00f      	beq.n	8010f3e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f20:	3310      	adds	r3, #16
 8010f22:	4618      	mov	r0, r3
 8010f24:	f000 ff7c 	bl	8011e20 <xTaskRemoveFromEventList>
 8010f28:	4603      	mov	r3, r0
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d007      	beq.n	8010f3e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010f2e:	4b3d      	ldr	r3, [pc, #244]	; (8011024 <xQueueReceive+0x1c8>)
 8010f30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f34:	601a      	str	r2, [r3, #0]
 8010f36:	f3bf 8f4f 	dsb	sy
 8010f3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010f3e:	f001 fca9 	bl	8012894 <vPortExitCritical>
				return pdPASS;
 8010f42:	2301      	movs	r3, #1
 8010f44:	e069      	b.n	801101a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d103      	bne.n	8010f54 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010f4c:	f001 fca2 	bl	8012894 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010f50:	2300      	movs	r3, #0
 8010f52:	e062      	b.n	801101a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d106      	bne.n	8010f68 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010f5a:	f107 0310 	add.w	r3, r7, #16
 8010f5e:	4618      	mov	r0, r3
 8010f60:	f000 ffc2 	bl	8011ee8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010f64:	2301      	movs	r3, #1
 8010f66:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010f68:	f001 fc94 	bl	8012894 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010f6c:	f000 fd22 	bl	80119b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010f70:	f001 fc5c 	bl	801282c <vPortEnterCritical>
 8010f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010f7a:	b25b      	sxtb	r3, r3
 8010f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f80:	d103      	bne.n	8010f8a <xQueueReceive+0x12e>
 8010f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f84:	2200      	movs	r2, #0
 8010f86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010f90:	b25b      	sxtb	r3, r3
 8010f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f96:	d103      	bne.n	8010fa0 <xQueueReceive+0x144>
 8010f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f9a:	2200      	movs	r2, #0
 8010f9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010fa0:	f001 fc78 	bl	8012894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010fa4:	1d3a      	adds	r2, r7, #4
 8010fa6:	f107 0310 	add.w	r3, r7, #16
 8010faa:	4611      	mov	r1, r2
 8010fac:	4618      	mov	r0, r3
 8010fae:	f000 ffb1 	bl	8011f14 <xTaskCheckForTimeOut>
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d123      	bne.n	8011000 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010fb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010fba:	f000 fae9 	bl	8011590 <prvIsQueueEmpty>
 8010fbe:	4603      	mov	r3, r0
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d017      	beq.n	8010ff4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fc6:	3324      	adds	r3, #36	; 0x24
 8010fc8:	687a      	ldr	r2, [r7, #4]
 8010fca:	4611      	mov	r1, r2
 8010fcc:	4618      	mov	r0, r3
 8010fce:	f000 ff01 	bl	8011dd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010fd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010fd4:	f000 fa8a 	bl	80114ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010fd8:	f000 fcfa 	bl	80119d0 <xTaskResumeAll>
 8010fdc:	4603      	mov	r3, r0
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d189      	bne.n	8010ef6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8010fe2:	4b10      	ldr	r3, [pc, #64]	; (8011024 <xQueueReceive+0x1c8>)
 8010fe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010fe8:	601a      	str	r2, [r3, #0]
 8010fea:	f3bf 8f4f 	dsb	sy
 8010fee:	f3bf 8f6f 	isb	sy
 8010ff2:	e780      	b.n	8010ef6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010ff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ff6:	f000 fa79 	bl	80114ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010ffa:	f000 fce9 	bl	80119d0 <xTaskResumeAll>
 8010ffe:	e77a      	b.n	8010ef6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011000:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011002:	f000 fa73 	bl	80114ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011006:	f000 fce3 	bl	80119d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801100a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801100c:	f000 fac0 	bl	8011590 <prvIsQueueEmpty>
 8011010:	4603      	mov	r3, r0
 8011012:	2b00      	cmp	r3, #0
 8011014:	f43f af6f 	beq.w	8010ef6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011018:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 801101a:	4618      	mov	r0, r3
 801101c:	3730      	adds	r7, #48	; 0x30
 801101e:	46bd      	mov	sp, r7
 8011020:	bd80      	pop	{r7, pc}
 8011022:	bf00      	nop
 8011024:	e000ed04 	.word	0xe000ed04

08011028 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011028:	b580      	push	{r7, lr}
 801102a:	b08e      	sub	sp, #56	; 0x38
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]
 8011030:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011032:	2300      	movs	r3, #0
 8011034:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801103a:	2300      	movs	r3, #0
 801103c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801103e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011040:	2b00      	cmp	r3, #0
 8011042:	d10c      	bne.n	801105e <xQueueSemaphoreTake+0x36>
	__asm volatile
 8011044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011048:	b672      	cpsid	i
 801104a:	f383 8811 	msr	BASEPRI, r3
 801104e:	f3bf 8f6f 	isb	sy
 8011052:	f3bf 8f4f 	dsb	sy
 8011056:	b662      	cpsie	i
 8011058:	623b      	str	r3, [r7, #32]
}
 801105a:	bf00      	nop
 801105c:	e7fe      	b.n	801105c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801105e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011062:	2b00      	cmp	r3, #0
 8011064:	d00c      	beq.n	8011080 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8011066:	f04f 0350 	mov.w	r3, #80	; 0x50
 801106a:	b672      	cpsid	i
 801106c:	f383 8811 	msr	BASEPRI, r3
 8011070:	f3bf 8f6f 	isb	sy
 8011074:	f3bf 8f4f 	dsb	sy
 8011078:	b662      	cpsie	i
 801107a:	61fb      	str	r3, [r7, #28]
}
 801107c:	bf00      	nop
 801107e:	e7fe      	b.n	801107e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011080:	f001 f878 	bl	8012174 <xTaskGetSchedulerState>
 8011084:	4603      	mov	r3, r0
 8011086:	2b00      	cmp	r3, #0
 8011088:	d102      	bne.n	8011090 <xQueueSemaphoreTake+0x68>
 801108a:	683b      	ldr	r3, [r7, #0]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d101      	bne.n	8011094 <xQueueSemaphoreTake+0x6c>
 8011090:	2301      	movs	r3, #1
 8011092:	e000      	b.n	8011096 <xQueueSemaphoreTake+0x6e>
 8011094:	2300      	movs	r3, #0
 8011096:	2b00      	cmp	r3, #0
 8011098:	d10c      	bne.n	80110b4 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 801109a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801109e:	b672      	cpsid	i
 80110a0:	f383 8811 	msr	BASEPRI, r3
 80110a4:	f3bf 8f6f 	isb	sy
 80110a8:	f3bf 8f4f 	dsb	sy
 80110ac:	b662      	cpsie	i
 80110ae:	61bb      	str	r3, [r7, #24]
}
 80110b0:	bf00      	nop
 80110b2:	e7fe      	b.n	80110b2 <xQueueSemaphoreTake+0x8a>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80110b4:	f001 fbba 	bl	801282c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80110b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110bc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80110be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d024      	beq.n	801110e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80110c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110c6:	1e5a      	subs	r2, r3, #1
 80110c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ca:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80110cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d104      	bne.n	80110de <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80110d4:	f001 fa20 	bl	8012518 <pvTaskIncrementMutexHeldCount>
 80110d8:	4602      	mov	r2, r0
 80110da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110dc:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80110de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110e0:	691b      	ldr	r3, [r3, #16]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d00f      	beq.n	8011106 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80110e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110e8:	3310      	adds	r3, #16
 80110ea:	4618      	mov	r0, r3
 80110ec:	f000 fe98 	bl	8011e20 <xTaskRemoveFromEventList>
 80110f0:	4603      	mov	r3, r0
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d007      	beq.n	8011106 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80110f6:	4b55      	ldr	r3, [pc, #340]	; (801124c <xQueueSemaphoreTake+0x224>)
 80110f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110fc:	601a      	str	r2, [r3, #0]
 80110fe:	f3bf 8f4f 	dsb	sy
 8011102:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011106:	f001 fbc5 	bl	8012894 <vPortExitCritical>
				return pdPASS;
 801110a:	2301      	movs	r3, #1
 801110c:	e099      	b.n	8011242 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801110e:	683b      	ldr	r3, [r7, #0]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d113      	bne.n	801113c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011116:	2b00      	cmp	r3, #0
 8011118:	d00c      	beq.n	8011134 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 801111a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801111e:	b672      	cpsid	i
 8011120:	f383 8811 	msr	BASEPRI, r3
 8011124:	f3bf 8f6f 	isb	sy
 8011128:	f3bf 8f4f 	dsb	sy
 801112c:	b662      	cpsie	i
 801112e:	617b      	str	r3, [r7, #20]
}
 8011130:	bf00      	nop
 8011132:	e7fe      	b.n	8011132 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011134:	f001 fbae 	bl	8012894 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011138:	2300      	movs	r3, #0
 801113a:	e082      	b.n	8011242 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 801113c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801113e:	2b00      	cmp	r3, #0
 8011140:	d106      	bne.n	8011150 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011142:	f107 030c 	add.w	r3, r7, #12
 8011146:	4618      	mov	r0, r3
 8011148:	f000 fece 	bl	8011ee8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801114c:	2301      	movs	r3, #1
 801114e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011150:	f001 fba0 	bl	8012894 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011154:	f000 fc2e 	bl	80119b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011158:	f001 fb68 	bl	801282c <vPortEnterCritical>
 801115c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801115e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011162:	b25b      	sxtb	r3, r3
 8011164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011168:	d103      	bne.n	8011172 <xQueueSemaphoreTake+0x14a>
 801116a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801116c:	2200      	movs	r2, #0
 801116e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011174:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011178:	b25b      	sxtb	r3, r3
 801117a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801117e:	d103      	bne.n	8011188 <xQueueSemaphoreTake+0x160>
 8011180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011182:	2200      	movs	r2, #0
 8011184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011188:	f001 fb84 	bl	8012894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801118c:	463a      	mov	r2, r7
 801118e:	f107 030c 	add.w	r3, r7, #12
 8011192:	4611      	mov	r1, r2
 8011194:	4618      	mov	r0, r3
 8011196:	f000 febd 	bl	8011f14 <xTaskCheckForTimeOut>
 801119a:	4603      	mov	r3, r0
 801119c:	2b00      	cmp	r3, #0
 801119e:	d132      	bne.n	8011206 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80111a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80111a2:	f000 f9f5 	bl	8011590 <prvIsQueueEmpty>
 80111a6:	4603      	mov	r3, r0
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d026      	beq.n	80111fa <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80111ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d109      	bne.n	80111c8 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80111b4:	f001 fb3a 	bl	801282c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80111b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ba:	685b      	ldr	r3, [r3, #4]
 80111bc:	4618      	mov	r0, r3
 80111be:	f000 fff7 	bl	80121b0 <xTaskPriorityInherit>
 80111c2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80111c4:	f001 fb66 	bl	8012894 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80111c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ca:	3324      	adds	r3, #36	; 0x24
 80111cc:	683a      	ldr	r2, [r7, #0]
 80111ce:	4611      	mov	r1, r2
 80111d0:	4618      	mov	r0, r3
 80111d2:	f000 fdff 	bl	8011dd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80111d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80111d8:	f000 f988 	bl	80114ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80111dc:	f000 fbf8 	bl	80119d0 <xTaskResumeAll>
 80111e0:	4603      	mov	r3, r0
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	f47f af66 	bne.w	80110b4 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80111e8:	4b18      	ldr	r3, [pc, #96]	; (801124c <xQueueSemaphoreTake+0x224>)
 80111ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111ee:	601a      	str	r2, [r3, #0]
 80111f0:	f3bf 8f4f 	dsb	sy
 80111f4:	f3bf 8f6f 	isb	sy
 80111f8:	e75c      	b.n	80110b4 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80111fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80111fc:	f000 f976 	bl	80114ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011200:	f000 fbe6 	bl	80119d0 <xTaskResumeAll>
 8011204:	e756      	b.n	80110b4 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011206:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011208:	f000 f970 	bl	80114ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801120c:	f000 fbe0 	bl	80119d0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011210:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011212:	f000 f9bd 	bl	8011590 <prvIsQueueEmpty>
 8011216:	4603      	mov	r3, r0
 8011218:	2b00      	cmp	r3, #0
 801121a:	f43f af4b 	beq.w	80110b4 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801121e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011220:	2b00      	cmp	r3, #0
 8011222:	d00d      	beq.n	8011240 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8011224:	f001 fb02 	bl	801282c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011228:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801122a:	f000 f8b7 	bl	801139c <prvGetDisinheritPriorityAfterTimeout>
 801122e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8011230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011232:	685b      	ldr	r3, [r3, #4]
 8011234:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011236:	4618      	mov	r0, r3
 8011238:	f001 f8ca 	bl	80123d0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801123c:	f001 fb2a 	bl	8012894 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011240:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8011242:	4618      	mov	r0, r3
 8011244:	3738      	adds	r7, #56	; 0x38
 8011246:	46bd      	mov	sp, r7
 8011248:	bd80      	pop	{r7, pc}
 801124a:	bf00      	nop
 801124c:	e000ed04 	.word	0xe000ed04

08011250 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011250:	b580      	push	{r7, lr}
 8011252:	b08e      	sub	sp, #56	; 0x38
 8011254:	af00      	add	r7, sp, #0
 8011256:	60f8      	str	r0, [r7, #12]
 8011258:	60b9      	str	r1, [r7, #8]
 801125a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011262:	2b00      	cmp	r3, #0
 8011264:	d10c      	bne.n	8011280 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8011266:	f04f 0350 	mov.w	r3, #80	; 0x50
 801126a:	b672      	cpsid	i
 801126c:	f383 8811 	msr	BASEPRI, r3
 8011270:	f3bf 8f6f 	isb	sy
 8011274:	f3bf 8f4f 	dsb	sy
 8011278:	b662      	cpsie	i
 801127a:	623b      	str	r3, [r7, #32]
}
 801127c:	bf00      	nop
 801127e:	e7fe      	b.n	801127e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011280:	68bb      	ldr	r3, [r7, #8]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d103      	bne.n	801128e <xQueueReceiveFromISR+0x3e>
 8011286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801128a:	2b00      	cmp	r3, #0
 801128c:	d101      	bne.n	8011292 <xQueueReceiveFromISR+0x42>
 801128e:	2301      	movs	r3, #1
 8011290:	e000      	b.n	8011294 <xQueueReceiveFromISR+0x44>
 8011292:	2300      	movs	r3, #0
 8011294:	2b00      	cmp	r3, #0
 8011296:	d10c      	bne.n	80112b2 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8011298:	f04f 0350 	mov.w	r3, #80	; 0x50
 801129c:	b672      	cpsid	i
 801129e:	f383 8811 	msr	BASEPRI, r3
 80112a2:	f3bf 8f6f 	isb	sy
 80112a6:	f3bf 8f4f 	dsb	sy
 80112aa:	b662      	cpsie	i
 80112ac:	61fb      	str	r3, [r7, #28]
}
 80112ae:	bf00      	nop
 80112b0:	e7fe      	b.n	80112b0 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80112b2:	f001 fba3 	bl	80129fc <vPortValidateInterruptPriority>
	__asm volatile
 80112b6:	f3ef 8211 	mrs	r2, BASEPRI
 80112ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112be:	b672      	cpsid	i
 80112c0:	f383 8811 	msr	BASEPRI, r3
 80112c4:	f3bf 8f6f 	isb	sy
 80112c8:	f3bf 8f4f 	dsb	sy
 80112cc:	b662      	cpsie	i
 80112ce:	61ba      	str	r2, [r7, #24]
 80112d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80112d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80112d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80112d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80112dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d02f      	beq.n	8011342 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80112e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80112e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80112ec:	68b9      	ldr	r1, [r7, #8]
 80112ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80112f0:	f000 f8d6 	bl	80114a0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80112f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112f6:	1e5a      	subs	r2, r3, #1
 80112f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80112fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011304:	d112      	bne.n	801132c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011308:	691b      	ldr	r3, [r3, #16]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d016      	beq.n	801133c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801130e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011310:	3310      	adds	r3, #16
 8011312:	4618      	mov	r0, r3
 8011314:	f000 fd84 	bl	8011e20 <xTaskRemoveFromEventList>
 8011318:	4603      	mov	r3, r0
 801131a:	2b00      	cmp	r3, #0
 801131c:	d00e      	beq.n	801133c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d00b      	beq.n	801133c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	2201      	movs	r2, #1
 8011328:	601a      	str	r2, [r3, #0]
 801132a:	e007      	b.n	801133c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801132c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011330:	3301      	adds	r3, #1
 8011332:	b2db      	uxtb	r3, r3
 8011334:	b25a      	sxtb	r2, r3
 8011336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801133c:	2301      	movs	r3, #1
 801133e:	637b      	str	r3, [r7, #52]	; 0x34
 8011340:	e001      	b.n	8011346 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8011342:	2300      	movs	r3, #0
 8011344:	637b      	str	r3, [r7, #52]	; 0x34
 8011346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011348:	613b      	str	r3, [r7, #16]
	__asm volatile
 801134a:	693b      	ldr	r3, [r7, #16]
 801134c:	f383 8811 	msr	BASEPRI, r3
}
 8011350:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011354:	4618      	mov	r0, r3
 8011356:	3738      	adds	r7, #56	; 0x38
 8011358:	46bd      	mov	sp, r7
 801135a:	bd80      	pop	{r7, pc}

0801135c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801135c:	b580      	push	{r7, lr}
 801135e:	b084      	sub	sp, #16
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d10c      	bne.n	8011388 <vQueueDelete+0x2c>
	__asm volatile
 801136e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011372:	b672      	cpsid	i
 8011374:	f383 8811 	msr	BASEPRI, r3
 8011378:	f3bf 8f6f 	isb	sy
 801137c:	f3bf 8f4f 	dsb	sy
 8011380:	b662      	cpsie	i
 8011382:	60bb      	str	r3, [r7, #8]
}
 8011384:	bf00      	nop
 8011386:	e7fe      	b.n	8011386 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8011388:	68f8      	ldr	r0, [r7, #12]
 801138a:	f000 f92f 	bl	80115ec <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 801138e:	68f8      	ldr	r0, [r7, #12]
 8011390:	f001 fc48 	bl	8012c24 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8011394:	bf00      	nop
 8011396:	3710      	adds	r7, #16
 8011398:	46bd      	mov	sp, r7
 801139a:	bd80      	pop	{r7, pc}

0801139c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801139c:	b480      	push	{r7}
 801139e:	b085      	sub	sp, #20
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d006      	beq.n	80113ba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	f1c3 0307 	rsb	r3, r3, #7
 80113b6:	60fb      	str	r3, [r7, #12]
 80113b8:	e001      	b.n	80113be <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80113ba:	2300      	movs	r3, #0
 80113bc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80113be:	68fb      	ldr	r3, [r7, #12]
	}
 80113c0:	4618      	mov	r0, r3
 80113c2:	3714      	adds	r7, #20
 80113c4:	46bd      	mov	sp, r7
 80113c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ca:	4770      	bx	lr

080113cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b086      	sub	sp, #24
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	60f8      	str	r0, [r7, #12]
 80113d4:	60b9      	str	r1, [r7, #8]
 80113d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80113d8:	2300      	movs	r3, #0
 80113da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d10d      	bne.n	8011406 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d14d      	bne.n	801148e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	685b      	ldr	r3, [r3, #4]
 80113f6:	4618      	mov	r0, r3
 80113f8:	f000 ff60 	bl	80122bc <xTaskPriorityDisinherit>
 80113fc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	2200      	movs	r2, #0
 8011402:	605a      	str	r2, [r3, #4]
 8011404:	e043      	b.n	801148e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d119      	bne.n	8011440 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	6898      	ldr	r0, [r3, #8]
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011414:	461a      	mov	r2, r3
 8011416:	68b9      	ldr	r1, [r7, #8]
 8011418:	f005 f96e 	bl	80166f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	689a      	ldr	r2, [r3, #8]
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011424:	441a      	add	r2, r3
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	689a      	ldr	r2, [r3, #8]
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	685b      	ldr	r3, [r3, #4]
 8011432:	429a      	cmp	r2, r3
 8011434:	d32b      	bcc.n	801148e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	681a      	ldr	r2, [r3, #0]
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	609a      	str	r2, [r3, #8]
 801143e:	e026      	b.n	801148e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	68d8      	ldr	r0, [r3, #12]
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011448:	461a      	mov	r2, r3
 801144a:	68b9      	ldr	r1, [r7, #8]
 801144c:	f005 f954 	bl	80166f8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	68da      	ldr	r2, [r3, #12]
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011458:	425b      	negs	r3, r3
 801145a:	441a      	add	r2, r3
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	68da      	ldr	r2, [r3, #12]
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	429a      	cmp	r2, r3
 801146a:	d207      	bcs.n	801147c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	685a      	ldr	r2, [r3, #4]
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011474:	425b      	negs	r3, r3
 8011476:	441a      	add	r2, r3
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	2b02      	cmp	r3, #2
 8011480:	d105      	bne.n	801148e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011482:	693b      	ldr	r3, [r7, #16]
 8011484:	2b00      	cmp	r3, #0
 8011486:	d002      	beq.n	801148e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011488:	693b      	ldr	r3, [r7, #16]
 801148a:	3b01      	subs	r3, #1
 801148c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801148e:	693b      	ldr	r3, [r7, #16]
 8011490:	1c5a      	adds	r2, r3, #1
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011496:	697b      	ldr	r3, [r7, #20]
}
 8011498:	4618      	mov	r0, r3
 801149a:	3718      	adds	r7, #24
 801149c:	46bd      	mov	sp, r7
 801149e:	bd80      	pop	{r7, pc}

080114a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80114a0:	b580      	push	{r7, lr}
 80114a2:	b082      	sub	sp, #8
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	6078      	str	r0, [r7, #4]
 80114a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d018      	beq.n	80114e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	68da      	ldr	r2, [r3, #12]
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114ba:	441a      	add	r2, r3
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	68da      	ldr	r2, [r3, #12]
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	685b      	ldr	r3, [r3, #4]
 80114c8:	429a      	cmp	r2, r3
 80114ca:	d303      	bcc.n	80114d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	681a      	ldr	r2, [r3, #0]
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	68d9      	ldr	r1, [r3, #12]
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114dc:	461a      	mov	r2, r3
 80114de:	6838      	ldr	r0, [r7, #0]
 80114e0:	f005 f90a 	bl	80166f8 <memcpy>
	}
}
 80114e4:	bf00      	nop
 80114e6:	3708      	adds	r7, #8
 80114e8:	46bd      	mov	sp, r7
 80114ea:	bd80      	pop	{r7, pc}

080114ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80114ec:	b580      	push	{r7, lr}
 80114ee:	b084      	sub	sp, #16
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80114f4:	f001 f99a 	bl	801282c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80114fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011500:	e011      	b.n	8011526 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011506:	2b00      	cmp	r3, #0
 8011508:	d012      	beq.n	8011530 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	3324      	adds	r3, #36	; 0x24
 801150e:	4618      	mov	r0, r3
 8011510:	f000 fc86 	bl	8011e20 <xTaskRemoveFromEventList>
 8011514:	4603      	mov	r3, r0
 8011516:	2b00      	cmp	r3, #0
 8011518:	d001      	beq.n	801151e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801151a:	f000 fd61 	bl	8011fe0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801151e:	7bfb      	ldrb	r3, [r7, #15]
 8011520:	3b01      	subs	r3, #1
 8011522:	b2db      	uxtb	r3, r3
 8011524:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801152a:	2b00      	cmp	r3, #0
 801152c:	dce9      	bgt.n	8011502 <prvUnlockQueue+0x16>
 801152e:	e000      	b.n	8011532 <prvUnlockQueue+0x46>
					break;
 8011530:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	22ff      	movs	r2, #255	; 0xff
 8011536:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801153a:	f001 f9ab 	bl	8012894 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801153e:	f001 f975 	bl	801282c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011548:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801154a:	e011      	b.n	8011570 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	691b      	ldr	r3, [r3, #16]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d012      	beq.n	801157a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	3310      	adds	r3, #16
 8011558:	4618      	mov	r0, r3
 801155a:	f000 fc61 	bl	8011e20 <xTaskRemoveFromEventList>
 801155e:	4603      	mov	r3, r0
 8011560:	2b00      	cmp	r3, #0
 8011562:	d001      	beq.n	8011568 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011564:	f000 fd3c 	bl	8011fe0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011568:	7bbb      	ldrb	r3, [r7, #14]
 801156a:	3b01      	subs	r3, #1
 801156c:	b2db      	uxtb	r3, r3
 801156e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011570:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011574:	2b00      	cmp	r3, #0
 8011576:	dce9      	bgt.n	801154c <prvUnlockQueue+0x60>
 8011578:	e000      	b.n	801157c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801157a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	22ff      	movs	r2, #255	; 0xff
 8011580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011584:	f001 f986 	bl	8012894 <vPortExitCritical>
}
 8011588:	bf00      	nop
 801158a:	3710      	adds	r7, #16
 801158c:	46bd      	mov	sp, r7
 801158e:	bd80      	pop	{r7, pc}

08011590 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b084      	sub	sp, #16
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011598:	f001 f948 	bl	801282c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d102      	bne.n	80115aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80115a4:	2301      	movs	r3, #1
 80115a6:	60fb      	str	r3, [r7, #12]
 80115a8:	e001      	b.n	80115ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80115aa:	2300      	movs	r3, #0
 80115ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80115ae:	f001 f971 	bl	8012894 <vPortExitCritical>

	return xReturn;
 80115b2:	68fb      	ldr	r3, [r7, #12]
}
 80115b4:	4618      	mov	r0, r3
 80115b6:	3710      	adds	r7, #16
 80115b8:	46bd      	mov	sp, r7
 80115ba:	bd80      	pop	{r7, pc}

080115bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80115bc:	b580      	push	{r7, lr}
 80115be:	b084      	sub	sp, #16
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80115c4:	f001 f932 	bl	801282c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115d0:	429a      	cmp	r2, r3
 80115d2:	d102      	bne.n	80115da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80115d4:	2301      	movs	r3, #1
 80115d6:	60fb      	str	r3, [r7, #12]
 80115d8:	e001      	b.n	80115de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80115da:	2300      	movs	r3, #0
 80115dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80115de:	f001 f959 	bl	8012894 <vPortExitCritical>

	return xReturn;
 80115e2:	68fb      	ldr	r3, [r7, #12]
}
 80115e4:	4618      	mov	r0, r3
 80115e6:	3710      	adds	r7, #16
 80115e8:	46bd      	mov	sp, r7
 80115ea:	bd80      	pop	{r7, pc}

080115ec <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80115ec:	b480      	push	{r7}
 80115ee:	b085      	sub	sp, #20
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80115f4:	2300      	movs	r3, #0
 80115f6:	60fb      	str	r3, [r7, #12]
 80115f8:	e016      	b.n	8011628 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80115fa:	4a10      	ldr	r2, [pc, #64]	; (801163c <vQueueUnregisterQueue+0x50>)
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	00db      	lsls	r3, r3, #3
 8011600:	4413      	add	r3, r2
 8011602:	685b      	ldr	r3, [r3, #4]
 8011604:	687a      	ldr	r2, [r7, #4]
 8011606:	429a      	cmp	r2, r3
 8011608:	d10b      	bne.n	8011622 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801160a:	4a0c      	ldr	r2, [pc, #48]	; (801163c <vQueueUnregisterQueue+0x50>)
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	2100      	movs	r1, #0
 8011610:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011614:	4a09      	ldr	r2, [pc, #36]	; (801163c <vQueueUnregisterQueue+0x50>)
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	00db      	lsls	r3, r3, #3
 801161a:	4413      	add	r3, r2
 801161c:	2200      	movs	r2, #0
 801161e:	605a      	str	r2, [r3, #4]
				break;
 8011620:	e006      	b.n	8011630 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	3301      	adds	r3, #1
 8011626:	60fb      	str	r3, [r7, #12]
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	2b07      	cmp	r3, #7
 801162c:	d9e5      	bls.n	80115fa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801162e:	bf00      	nop
 8011630:	bf00      	nop
 8011632:	3714      	adds	r7, #20
 8011634:	46bd      	mov	sp, r7
 8011636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801163a:	4770      	bx	lr
 801163c:	20010454 	.word	0x20010454

08011640 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011640:	b580      	push	{r7, lr}
 8011642:	b08c      	sub	sp, #48	; 0x30
 8011644:	af04      	add	r7, sp, #16
 8011646:	60f8      	str	r0, [r7, #12]
 8011648:	60b9      	str	r1, [r7, #8]
 801164a:	603b      	str	r3, [r7, #0]
 801164c:	4613      	mov	r3, r2
 801164e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011650:	88fb      	ldrh	r3, [r7, #6]
 8011652:	009b      	lsls	r3, r3, #2
 8011654:	4618      	mov	r0, r3
 8011656:	f001 fa15 	bl	8012a84 <pvPortMalloc>
 801165a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801165c:	697b      	ldr	r3, [r7, #20]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d00e      	beq.n	8011680 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8011662:	2058      	movs	r0, #88	; 0x58
 8011664:	f001 fa0e 	bl	8012a84 <pvPortMalloc>
 8011668:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801166a:	69fb      	ldr	r3, [r7, #28]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d003      	beq.n	8011678 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011670:	69fb      	ldr	r3, [r7, #28]
 8011672:	697a      	ldr	r2, [r7, #20]
 8011674:	631a      	str	r2, [r3, #48]	; 0x30
 8011676:	e005      	b.n	8011684 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011678:	6978      	ldr	r0, [r7, #20]
 801167a:	f001 fad3 	bl	8012c24 <vPortFree>
 801167e:	e001      	b.n	8011684 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011680:	2300      	movs	r3, #0
 8011682:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011684:	69fb      	ldr	r3, [r7, #28]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d013      	beq.n	80116b2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801168a:	88fa      	ldrh	r2, [r7, #6]
 801168c:	2300      	movs	r3, #0
 801168e:	9303      	str	r3, [sp, #12]
 8011690:	69fb      	ldr	r3, [r7, #28]
 8011692:	9302      	str	r3, [sp, #8]
 8011694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011696:	9301      	str	r3, [sp, #4]
 8011698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801169a:	9300      	str	r3, [sp, #0]
 801169c:	683b      	ldr	r3, [r7, #0]
 801169e:	68b9      	ldr	r1, [r7, #8]
 80116a0:	68f8      	ldr	r0, [r7, #12]
 80116a2:	f000 f80e 	bl	80116c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80116a6:	69f8      	ldr	r0, [r7, #28]
 80116a8:	f000 f898 	bl	80117dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80116ac:	2301      	movs	r3, #1
 80116ae:	61bb      	str	r3, [r7, #24]
 80116b0:	e002      	b.n	80116b8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80116b2:	f04f 33ff 	mov.w	r3, #4294967295
 80116b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80116b8:	69bb      	ldr	r3, [r7, #24]
	}
 80116ba:	4618      	mov	r0, r3
 80116bc:	3720      	adds	r7, #32
 80116be:	46bd      	mov	sp, r7
 80116c0:	bd80      	pop	{r7, pc}

080116c2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80116c2:	b580      	push	{r7, lr}
 80116c4:	b088      	sub	sp, #32
 80116c6:	af00      	add	r7, sp, #0
 80116c8:	60f8      	str	r0, [r7, #12]
 80116ca:	60b9      	str	r1, [r7, #8]
 80116cc:	607a      	str	r2, [r7, #4]
 80116ce:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80116d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116d2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	009b      	lsls	r3, r3, #2
 80116d8:	461a      	mov	r2, r3
 80116da:	21a5      	movs	r1, #165	; 0xa5
 80116dc:	f005 f81a 	bl	8016714 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80116e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80116e4:	6879      	ldr	r1, [r7, #4]
 80116e6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80116ea:	440b      	add	r3, r1
 80116ec:	009b      	lsls	r3, r3, #2
 80116ee:	4413      	add	r3, r2
 80116f0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80116f2:	69bb      	ldr	r3, [r7, #24]
 80116f4:	f023 0307 	bic.w	r3, r3, #7
 80116f8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80116fa:	69bb      	ldr	r3, [r7, #24]
 80116fc:	f003 0307 	and.w	r3, r3, #7
 8011700:	2b00      	cmp	r3, #0
 8011702:	d00c      	beq.n	801171e <prvInitialiseNewTask+0x5c>
	__asm volatile
 8011704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011708:	b672      	cpsid	i
 801170a:	f383 8811 	msr	BASEPRI, r3
 801170e:	f3bf 8f6f 	isb	sy
 8011712:	f3bf 8f4f 	dsb	sy
 8011716:	b662      	cpsie	i
 8011718:	617b      	str	r3, [r7, #20]
}
 801171a:	bf00      	nop
 801171c:	e7fe      	b.n	801171c <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801171e:	2300      	movs	r3, #0
 8011720:	61fb      	str	r3, [r7, #28]
 8011722:	e012      	b.n	801174a <prvInitialiseNewTask+0x88>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011724:	68ba      	ldr	r2, [r7, #8]
 8011726:	69fb      	ldr	r3, [r7, #28]
 8011728:	4413      	add	r3, r2
 801172a:	7819      	ldrb	r1, [r3, #0]
 801172c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801172e:	69fb      	ldr	r3, [r7, #28]
 8011730:	4413      	add	r3, r2
 8011732:	3334      	adds	r3, #52	; 0x34
 8011734:	460a      	mov	r2, r1
 8011736:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8011738:	68ba      	ldr	r2, [r7, #8]
 801173a:	69fb      	ldr	r3, [r7, #28]
 801173c:	4413      	add	r3, r2
 801173e:	781b      	ldrb	r3, [r3, #0]
 8011740:	2b00      	cmp	r3, #0
 8011742:	d006      	beq.n	8011752 <prvInitialiseNewTask+0x90>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011744:	69fb      	ldr	r3, [r7, #28]
 8011746:	3301      	adds	r3, #1
 8011748:	61fb      	str	r3, [r7, #28]
 801174a:	69fb      	ldr	r3, [r7, #28]
 801174c:	2b0f      	cmp	r3, #15
 801174e:	d9e9      	bls.n	8011724 <prvInitialiseNewTask+0x62>
 8011750:	e000      	b.n	8011754 <prvInitialiseNewTask+0x92>
		{
			break;
 8011752:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011756:	2200      	movs	r2, #0
 8011758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801175c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801175e:	2b06      	cmp	r3, #6
 8011760:	d901      	bls.n	8011766 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011762:	2306      	movs	r3, #6
 8011764:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011768:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801176a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801176c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801176e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011770:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8011772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011774:	2200      	movs	r2, #0
 8011776:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801177a:	3304      	adds	r3, #4
 801177c:	4618      	mov	r0, r3
 801177e:	f7fe ffa1 	bl	80106c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011784:	3318      	adds	r3, #24
 8011786:	4618      	mov	r0, r3
 8011788:	f7fe ff9c 	bl	80106c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801178c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801178e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011790:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011794:	f1c3 0207 	rsb	r2, r3, #7
 8011798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801179a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801179c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801179e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80117a0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80117a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117a4:	2200      	movs	r2, #0
 80117a6:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80117a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117aa:	2200      	movs	r2, #0
 80117ac:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80117ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117b0:	2200      	movs	r2, #0
 80117b2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80117b6:	683a      	ldr	r2, [r7, #0]
 80117b8:	68f9      	ldr	r1, [r7, #12]
 80117ba:	69b8      	ldr	r0, [r7, #24]
 80117bc:	f000 ff26 	bl	801260c <pxPortInitialiseStack>
 80117c0:	4602      	mov	r2, r0
 80117c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117c4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80117c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d002      	beq.n	80117d2 <prvInitialiseNewTask+0x110>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80117cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80117d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80117d2:	bf00      	nop
 80117d4:	3720      	adds	r7, #32
 80117d6:	46bd      	mov	sp, r7
 80117d8:	bd80      	pop	{r7, pc}
	...

080117dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b082      	sub	sp, #8
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80117e4:	f001 f822 	bl	801282c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80117e8:	4b2a      	ldr	r3, [pc, #168]	; (8011894 <prvAddNewTaskToReadyList+0xb8>)
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	3301      	adds	r3, #1
 80117ee:	4a29      	ldr	r2, [pc, #164]	; (8011894 <prvAddNewTaskToReadyList+0xb8>)
 80117f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80117f2:	4b29      	ldr	r3, [pc, #164]	; (8011898 <prvAddNewTaskToReadyList+0xbc>)
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d109      	bne.n	801180e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80117fa:	4a27      	ldr	r2, [pc, #156]	; (8011898 <prvAddNewTaskToReadyList+0xbc>)
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011800:	4b24      	ldr	r3, [pc, #144]	; (8011894 <prvAddNewTaskToReadyList+0xb8>)
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	2b01      	cmp	r3, #1
 8011806:	d110      	bne.n	801182a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011808:	f000 fc10 	bl	801202c <prvInitialiseTaskLists>
 801180c:	e00d      	b.n	801182a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801180e:	4b23      	ldr	r3, [pc, #140]	; (801189c <prvAddNewTaskToReadyList+0xc0>)
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	2b00      	cmp	r3, #0
 8011814:	d109      	bne.n	801182a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011816:	4b20      	ldr	r3, [pc, #128]	; (8011898 <prvAddNewTaskToReadyList+0xbc>)
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011820:	429a      	cmp	r2, r3
 8011822:	d802      	bhi.n	801182a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011824:	4a1c      	ldr	r2, [pc, #112]	; (8011898 <prvAddNewTaskToReadyList+0xbc>)
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801182a:	4b1d      	ldr	r3, [pc, #116]	; (80118a0 <prvAddNewTaskToReadyList+0xc4>)
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	3301      	adds	r3, #1
 8011830:	4a1b      	ldr	r2, [pc, #108]	; (80118a0 <prvAddNewTaskToReadyList+0xc4>)
 8011832:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011838:	2201      	movs	r2, #1
 801183a:	409a      	lsls	r2, r3
 801183c:	4b19      	ldr	r3, [pc, #100]	; (80118a4 <prvAddNewTaskToReadyList+0xc8>)
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	4313      	orrs	r3, r2
 8011842:	4a18      	ldr	r2, [pc, #96]	; (80118a4 <prvAddNewTaskToReadyList+0xc8>)
 8011844:	6013      	str	r3, [r2, #0]
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801184a:	4613      	mov	r3, r2
 801184c:	009b      	lsls	r3, r3, #2
 801184e:	4413      	add	r3, r2
 8011850:	009b      	lsls	r3, r3, #2
 8011852:	4a15      	ldr	r2, [pc, #84]	; (80118a8 <prvAddNewTaskToReadyList+0xcc>)
 8011854:	441a      	add	r2, r3
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	3304      	adds	r3, #4
 801185a:	4619      	mov	r1, r3
 801185c:	4610      	mov	r0, r2
 801185e:	f7fe ff3e 	bl	80106de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011862:	f001 f817 	bl	8012894 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011866:	4b0d      	ldr	r3, [pc, #52]	; (801189c <prvAddNewTaskToReadyList+0xc0>)
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d00e      	beq.n	801188c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801186e:	4b0a      	ldr	r3, [pc, #40]	; (8011898 <prvAddNewTaskToReadyList+0xbc>)
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011878:	429a      	cmp	r2, r3
 801187a:	d207      	bcs.n	801188c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801187c:	4b0b      	ldr	r3, [pc, #44]	; (80118ac <prvAddNewTaskToReadyList+0xd0>)
 801187e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011882:	601a      	str	r2, [r3, #0]
 8011884:	f3bf 8f4f 	dsb	sy
 8011888:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801188c:	bf00      	nop
 801188e:	3708      	adds	r7, #8
 8011890:	46bd      	mov	sp, r7
 8011892:	bd80      	pop	{r7, pc}
 8011894:	200001e8 	.word	0x200001e8
 8011898:	200000e8 	.word	0x200000e8
 801189c:	200001f4 	.word	0x200001f4
 80118a0:	20000204 	.word	0x20000204
 80118a4:	200001f0 	.word	0x200001f0
 80118a8:	200000ec 	.word	0x200000ec
 80118ac:	e000ed04 	.word	0xe000ed04

080118b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80118b0:	b580      	push	{r7, lr}
 80118b2:	b084      	sub	sp, #16
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80118b8:	2300      	movs	r3, #0
 80118ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d019      	beq.n	80118f6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80118c2:	4b14      	ldr	r3, [pc, #80]	; (8011914 <vTaskDelay+0x64>)
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d00c      	beq.n	80118e4 <vTaskDelay+0x34>
	__asm volatile
 80118ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118ce:	b672      	cpsid	i
 80118d0:	f383 8811 	msr	BASEPRI, r3
 80118d4:	f3bf 8f6f 	isb	sy
 80118d8:	f3bf 8f4f 	dsb	sy
 80118dc:	b662      	cpsie	i
 80118de:	60bb      	str	r3, [r7, #8]
}
 80118e0:	bf00      	nop
 80118e2:	e7fe      	b.n	80118e2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80118e4:	f000 f866 	bl	80119b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80118e8:	2100      	movs	r1, #0
 80118ea:	6878      	ldr	r0, [r7, #4]
 80118ec:	f000 fe28 	bl	8012540 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80118f0:	f000 f86e 	bl	80119d0 <xTaskResumeAll>
 80118f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d107      	bne.n	801190c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80118fc:	4b06      	ldr	r3, [pc, #24]	; (8011918 <vTaskDelay+0x68>)
 80118fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011902:	601a      	str	r2, [r3, #0]
 8011904:	f3bf 8f4f 	dsb	sy
 8011908:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801190c:	bf00      	nop
 801190e:	3710      	adds	r7, #16
 8011910:	46bd      	mov	sp, r7
 8011912:	bd80      	pop	{r7, pc}
 8011914:	20000210 	.word	0x20000210
 8011918:	e000ed04 	.word	0xe000ed04

0801191c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801191c:	b580      	push	{r7, lr}
 801191e:	b086      	sub	sp, #24
 8011920:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8011922:	4b1e      	ldr	r3, [pc, #120]	; (801199c <vTaskStartScheduler+0x80>)
 8011924:	9301      	str	r3, [sp, #4]
 8011926:	2300      	movs	r3, #0
 8011928:	9300      	str	r3, [sp, #0]
 801192a:	2300      	movs	r3, #0
 801192c:	2280      	movs	r2, #128	; 0x80
 801192e:	491c      	ldr	r1, [pc, #112]	; (80119a0 <vTaskStartScheduler+0x84>)
 8011930:	481c      	ldr	r0, [pc, #112]	; (80119a4 <vTaskStartScheduler+0x88>)
 8011932:	f7ff fe85 	bl	8011640 <xTaskCreate>
 8011936:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	2b01      	cmp	r3, #1
 801193c:	d118      	bne.n	8011970 <vTaskStartScheduler+0x54>
	__asm volatile
 801193e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011942:	b672      	cpsid	i
 8011944:	f383 8811 	msr	BASEPRI, r3
 8011948:	f3bf 8f6f 	isb	sy
 801194c:	f3bf 8f4f 	dsb	sy
 8011950:	b662      	cpsie	i
 8011952:	60bb      	str	r3, [r7, #8]
}
 8011954:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011956:	4b14      	ldr	r3, [pc, #80]	; (80119a8 <vTaskStartScheduler+0x8c>)
 8011958:	f04f 32ff 	mov.w	r2, #4294967295
 801195c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801195e:	4b13      	ldr	r3, [pc, #76]	; (80119ac <vTaskStartScheduler+0x90>)
 8011960:	2201      	movs	r2, #1
 8011962:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8011964:	4b12      	ldr	r3, [pc, #72]	; (80119b0 <vTaskStartScheduler+0x94>)
 8011966:	2200      	movs	r2, #0
 8011968:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801196a:	f000 fee1 	bl	8012730 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801196e:	e010      	b.n	8011992 <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011976:	d10c      	bne.n	8011992 <vTaskStartScheduler+0x76>
	__asm volatile
 8011978:	f04f 0350 	mov.w	r3, #80	; 0x50
 801197c:	b672      	cpsid	i
 801197e:	f383 8811 	msr	BASEPRI, r3
 8011982:	f3bf 8f6f 	isb	sy
 8011986:	f3bf 8f4f 	dsb	sy
 801198a:	b662      	cpsie	i
 801198c:	607b      	str	r3, [r7, #4]
}
 801198e:	bf00      	nop
 8011990:	e7fe      	b.n	8011990 <vTaskStartScheduler+0x74>
}
 8011992:	bf00      	nop
 8011994:	3710      	adds	r7, #16
 8011996:	46bd      	mov	sp, r7
 8011998:	bd80      	pop	{r7, pc}
 801199a:	bf00      	nop
 801199c:	2000020c 	.word	0x2000020c
 80119a0:	080169a0 	.word	0x080169a0
 80119a4:	08011ff9 	.word	0x08011ff9
 80119a8:	20000208 	.word	0x20000208
 80119ac:	200001f4 	.word	0x200001f4
 80119b0:	200001ec 	.word	0x200001ec

080119b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80119b4:	b480      	push	{r7}
 80119b6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80119b8:	4b04      	ldr	r3, [pc, #16]	; (80119cc <vTaskSuspendAll+0x18>)
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	3301      	adds	r3, #1
 80119be:	4a03      	ldr	r2, [pc, #12]	; (80119cc <vTaskSuspendAll+0x18>)
 80119c0:	6013      	str	r3, [r2, #0]
}
 80119c2:	bf00      	nop
 80119c4:	46bd      	mov	sp, r7
 80119c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ca:	4770      	bx	lr
 80119cc:	20000210 	.word	0x20000210

080119d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b084      	sub	sp, #16
 80119d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80119d6:	2300      	movs	r3, #0
 80119d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80119da:	2300      	movs	r3, #0
 80119dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80119de:	4b42      	ldr	r3, [pc, #264]	; (8011ae8 <xTaskResumeAll+0x118>)
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d10c      	bne.n	8011a00 <xTaskResumeAll+0x30>
	__asm volatile
 80119e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119ea:	b672      	cpsid	i
 80119ec:	f383 8811 	msr	BASEPRI, r3
 80119f0:	f3bf 8f6f 	isb	sy
 80119f4:	f3bf 8f4f 	dsb	sy
 80119f8:	b662      	cpsie	i
 80119fa:	603b      	str	r3, [r7, #0]
}
 80119fc:	bf00      	nop
 80119fe:	e7fe      	b.n	80119fe <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011a00:	f000 ff14 	bl	801282c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011a04:	4b38      	ldr	r3, [pc, #224]	; (8011ae8 <xTaskResumeAll+0x118>)
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	3b01      	subs	r3, #1
 8011a0a:	4a37      	ldr	r2, [pc, #220]	; (8011ae8 <xTaskResumeAll+0x118>)
 8011a0c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011a0e:	4b36      	ldr	r3, [pc, #216]	; (8011ae8 <xTaskResumeAll+0x118>)
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d161      	bne.n	8011ada <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011a16:	4b35      	ldr	r3, [pc, #212]	; (8011aec <xTaskResumeAll+0x11c>)
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d05d      	beq.n	8011ada <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011a1e:	e02e      	b.n	8011a7e <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8011a20:	4b33      	ldr	r3, [pc, #204]	; (8011af0 <xTaskResumeAll+0x120>)
 8011a22:	68db      	ldr	r3, [r3, #12]
 8011a24:	68db      	ldr	r3, [r3, #12]
 8011a26:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	3318      	adds	r3, #24
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	f7fe feb3 	bl	8010798 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	3304      	adds	r3, #4
 8011a36:	4618      	mov	r0, r3
 8011a38:	f7fe feae 	bl	8010798 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a40:	2201      	movs	r2, #1
 8011a42:	409a      	lsls	r2, r3
 8011a44:	4b2b      	ldr	r3, [pc, #172]	; (8011af4 <xTaskResumeAll+0x124>)
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	4313      	orrs	r3, r2
 8011a4a:	4a2a      	ldr	r2, [pc, #168]	; (8011af4 <xTaskResumeAll+0x124>)
 8011a4c:	6013      	str	r3, [r2, #0]
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a52:	4613      	mov	r3, r2
 8011a54:	009b      	lsls	r3, r3, #2
 8011a56:	4413      	add	r3, r2
 8011a58:	009b      	lsls	r3, r3, #2
 8011a5a:	4a27      	ldr	r2, [pc, #156]	; (8011af8 <xTaskResumeAll+0x128>)
 8011a5c:	441a      	add	r2, r3
 8011a5e:	68fb      	ldr	r3, [r7, #12]
 8011a60:	3304      	adds	r3, #4
 8011a62:	4619      	mov	r1, r3
 8011a64:	4610      	mov	r0, r2
 8011a66:	f7fe fe3a 	bl	80106de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a6e:	4b23      	ldr	r3, [pc, #140]	; (8011afc <xTaskResumeAll+0x12c>)
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a74:	429a      	cmp	r2, r3
 8011a76:	d302      	bcc.n	8011a7e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8011a78:	4b21      	ldr	r3, [pc, #132]	; (8011b00 <xTaskResumeAll+0x130>)
 8011a7a:	2201      	movs	r2, #1
 8011a7c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011a7e:	4b1c      	ldr	r3, [pc, #112]	; (8011af0 <xTaskResumeAll+0x120>)
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d1cc      	bne.n	8011a20 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d001      	beq.n	8011a90 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011a8c:	f000 fb4c 	bl	8012128 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8011a90:	4b1c      	ldr	r3, [pc, #112]	; (8011b04 <xTaskResumeAll+0x134>)
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d010      	beq.n	8011abe <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011a9c:	f000 f858 	bl	8011b50 <xTaskIncrementTick>
 8011aa0:	4603      	mov	r3, r0
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d002      	beq.n	8011aac <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8011aa6:	4b16      	ldr	r3, [pc, #88]	; (8011b00 <xTaskResumeAll+0x130>)
 8011aa8:	2201      	movs	r2, #1
 8011aaa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	3b01      	subs	r3, #1
 8011ab0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d1f1      	bne.n	8011a9c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8011ab8:	4b12      	ldr	r3, [pc, #72]	; (8011b04 <xTaskResumeAll+0x134>)
 8011aba:	2200      	movs	r2, #0
 8011abc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011abe:	4b10      	ldr	r3, [pc, #64]	; (8011b00 <xTaskResumeAll+0x130>)
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d009      	beq.n	8011ada <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011ac6:	2301      	movs	r3, #1
 8011ac8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011aca:	4b0f      	ldr	r3, [pc, #60]	; (8011b08 <xTaskResumeAll+0x138>)
 8011acc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ad0:	601a      	str	r2, [r3, #0]
 8011ad2:	f3bf 8f4f 	dsb	sy
 8011ad6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011ada:	f000 fedb 	bl	8012894 <vPortExitCritical>

	return xAlreadyYielded;
 8011ade:	68bb      	ldr	r3, [r7, #8]
}
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	3710      	adds	r7, #16
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	bd80      	pop	{r7, pc}
 8011ae8:	20000210 	.word	0x20000210
 8011aec:	200001e8 	.word	0x200001e8
 8011af0:	200001a8 	.word	0x200001a8
 8011af4:	200001f0 	.word	0x200001f0
 8011af8:	200000ec 	.word	0x200000ec
 8011afc:	200000e8 	.word	0x200000e8
 8011b00:	200001fc 	.word	0x200001fc
 8011b04:	200001f8 	.word	0x200001f8
 8011b08:	e000ed04 	.word	0xe000ed04

08011b0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011b0c:	b480      	push	{r7}
 8011b0e:	b083      	sub	sp, #12
 8011b10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011b12:	4b05      	ldr	r3, [pc, #20]	; (8011b28 <xTaskGetTickCount+0x1c>)
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011b18:	687b      	ldr	r3, [r7, #4]
}
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	370c      	adds	r7, #12
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b24:	4770      	bx	lr
 8011b26:	bf00      	nop
 8011b28:	200001ec 	.word	0x200001ec

08011b2c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	b082      	sub	sp, #8
 8011b30:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011b32:	f000 ff63 	bl	80129fc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8011b36:	2300      	movs	r3, #0
 8011b38:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8011b3a:	4b04      	ldr	r3, [pc, #16]	; (8011b4c <xTaskGetTickCountFromISR+0x20>)
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011b40:	683b      	ldr	r3, [r7, #0]
}
 8011b42:	4618      	mov	r0, r3
 8011b44:	3708      	adds	r7, #8
 8011b46:	46bd      	mov	sp, r7
 8011b48:	bd80      	pop	{r7, pc}
 8011b4a:	bf00      	nop
 8011b4c:	200001ec 	.word	0x200001ec

08011b50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b086      	sub	sp, #24
 8011b54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011b56:	2300      	movs	r3, #0
 8011b58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011b5a:	4b52      	ldr	r3, [pc, #328]	; (8011ca4 <xTaskIncrementTick+0x154>)
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	f040 808f 	bne.w	8011c82 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011b64:	4b50      	ldr	r3, [pc, #320]	; (8011ca8 <xTaskIncrementTick+0x158>)
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	3301      	adds	r3, #1
 8011b6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011b6c:	4a4e      	ldr	r2, [pc, #312]	; (8011ca8 <xTaskIncrementTick+0x158>)
 8011b6e:	693b      	ldr	r3, [r7, #16]
 8011b70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011b72:	693b      	ldr	r3, [r7, #16]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d122      	bne.n	8011bbe <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8011b78:	4b4c      	ldr	r3, [pc, #304]	; (8011cac <xTaskIncrementTick+0x15c>)
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d00c      	beq.n	8011b9c <xTaskIncrementTick+0x4c>
	__asm volatile
 8011b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b86:	b672      	cpsid	i
 8011b88:	f383 8811 	msr	BASEPRI, r3
 8011b8c:	f3bf 8f6f 	isb	sy
 8011b90:	f3bf 8f4f 	dsb	sy
 8011b94:	b662      	cpsie	i
 8011b96:	603b      	str	r3, [r7, #0]
}
 8011b98:	bf00      	nop
 8011b9a:	e7fe      	b.n	8011b9a <xTaskIncrementTick+0x4a>
 8011b9c:	4b43      	ldr	r3, [pc, #268]	; (8011cac <xTaskIncrementTick+0x15c>)
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	60fb      	str	r3, [r7, #12]
 8011ba2:	4b43      	ldr	r3, [pc, #268]	; (8011cb0 <xTaskIncrementTick+0x160>)
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	4a41      	ldr	r2, [pc, #260]	; (8011cac <xTaskIncrementTick+0x15c>)
 8011ba8:	6013      	str	r3, [r2, #0]
 8011baa:	4a41      	ldr	r2, [pc, #260]	; (8011cb0 <xTaskIncrementTick+0x160>)
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	6013      	str	r3, [r2, #0]
 8011bb0:	4b40      	ldr	r3, [pc, #256]	; (8011cb4 <xTaskIncrementTick+0x164>)
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	3301      	adds	r3, #1
 8011bb6:	4a3f      	ldr	r2, [pc, #252]	; (8011cb4 <xTaskIncrementTick+0x164>)
 8011bb8:	6013      	str	r3, [r2, #0]
 8011bba:	f000 fab5 	bl	8012128 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011bbe:	4b3e      	ldr	r3, [pc, #248]	; (8011cb8 <xTaskIncrementTick+0x168>)
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	693a      	ldr	r2, [r7, #16]
 8011bc4:	429a      	cmp	r2, r3
 8011bc6:	d34d      	bcc.n	8011c64 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011bc8:	4b38      	ldr	r3, [pc, #224]	; (8011cac <xTaskIncrementTick+0x15c>)
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d101      	bne.n	8011bd6 <xTaskIncrementTick+0x86>
 8011bd2:	2301      	movs	r3, #1
 8011bd4:	e000      	b.n	8011bd8 <xTaskIncrementTick+0x88>
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d004      	beq.n	8011be6 <xTaskIncrementTick+0x96>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011bdc:	4b36      	ldr	r3, [pc, #216]	; (8011cb8 <xTaskIncrementTick+0x168>)
 8011bde:	f04f 32ff 	mov.w	r2, #4294967295
 8011be2:	601a      	str	r2, [r3, #0]
					break;
 8011be4:	e03e      	b.n	8011c64 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8011be6:	4b31      	ldr	r3, [pc, #196]	; (8011cac <xTaskIncrementTick+0x15c>)
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	68db      	ldr	r3, [r3, #12]
 8011bec:	68db      	ldr	r3, [r3, #12]
 8011bee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011bf0:	68bb      	ldr	r3, [r7, #8]
 8011bf2:	685b      	ldr	r3, [r3, #4]
 8011bf4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011bf6:	693a      	ldr	r2, [r7, #16]
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	429a      	cmp	r2, r3
 8011bfc:	d203      	bcs.n	8011c06 <xTaskIncrementTick+0xb6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011bfe:	4a2e      	ldr	r2, [pc, #184]	; (8011cb8 <xTaskIncrementTick+0x168>)
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	6013      	str	r3, [r2, #0]
						break;
 8011c04:	e02e      	b.n	8011c64 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011c06:	68bb      	ldr	r3, [r7, #8]
 8011c08:	3304      	adds	r3, #4
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	f7fe fdc4 	bl	8010798 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011c10:	68bb      	ldr	r3, [r7, #8]
 8011c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d004      	beq.n	8011c22 <xTaskIncrementTick+0xd2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011c18:	68bb      	ldr	r3, [r7, #8]
 8011c1a:	3318      	adds	r3, #24
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	f7fe fdbb 	bl	8010798 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011c22:	68bb      	ldr	r3, [r7, #8]
 8011c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c26:	2201      	movs	r2, #1
 8011c28:	409a      	lsls	r2, r3
 8011c2a:	4b24      	ldr	r3, [pc, #144]	; (8011cbc <xTaskIncrementTick+0x16c>)
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	4313      	orrs	r3, r2
 8011c30:	4a22      	ldr	r2, [pc, #136]	; (8011cbc <xTaskIncrementTick+0x16c>)
 8011c32:	6013      	str	r3, [r2, #0]
 8011c34:	68bb      	ldr	r3, [r7, #8]
 8011c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c38:	4613      	mov	r3, r2
 8011c3a:	009b      	lsls	r3, r3, #2
 8011c3c:	4413      	add	r3, r2
 8011c3e:	009b      	lsls	r3, r3, #2
 8011c40:	4a1f      	ldr	r2, [pc, #124]	; (8011cc0 <xTaskIncrementTick+0x170>)
 8011c42:	441a      	add	r2, r3
 8011c44:	68bb      	ldr	r3, [r7, #8]
 8011c46:	3304      	adds	r3, #4
 8011c48:	4619      	mov	r1, r3
 8011c4a:	4610      	mov	r0, r2
 8011c4c:	f7fe fd47 	bl	80106de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011c50:	68bb      	ldr	r3, [r7, #8]
 8011c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c54:	4b1b      	ldr	r3, [pc, #108]	; (8011cc4 <xTaskIncrementTick+0x174>)
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c5a:	429a      	cmp	r2, r3
 8011c5c:	d3b4      	bcc.n	8011bc8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8011c5e:	2301      	movs	r3, #1
 8011c60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011c62:	e7b1      	b.n	8011bc8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011c64:	4b17      	ldr	r3, [pc, #92]	; (8011cc4 <xTaskIncrementTick+0x174>)
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c6a:	4915      	ldr	r1, [pc, #84]	; (8011cc0 <xTaskIncrementTick+0x170>)
 8011c6c:	4613      	mov	r3, r2
 8011c6e:	009b      	lsls	r3, r3, #2
 8011c70:	4413      	add	r3, r2
 8011c72:	009b      	lsls	r3, r3, #2
 8011c74:	440b      	add	r3, r1
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	2b01      	cmp	r3, #1
 8011c7a:	d907      	bls.n	8011c8c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8011c7c:	2301      	movs	r3, #1
 8011c7e:	617b      	str	r3, [r7, #20]
 8011c80:	e004      	b.n	8011c8c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8011c82:	4b11      	ldr	r3, [pc, #68]	; (8011cc8 <xTaskIncrementTick+0x178>)
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	3301      	adds	r3, #1
 8011c88:	4a0f      	ldr	r2, [pc, #60]	; (8011cc8 <xTaskIncrementTick+0x178>)
 8011c8a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011c8c:	4b0f      	ldr	r3, [pc, #60]	; (8011ccc <xTaskIncrementTick+0x17c>)
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d001      	beq.n	8011c98 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8011c94:	2301      	movs	r3, #1
 8011c96:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011c98:	697b      	ldr	r3, [r7, #20]
}
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	3718      	adds	r7, #24
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	bd80      	pop	{r7, pc}
 8011ca2:	bf00      	nop
 8011ca4:	20000210 	.word	0x20000210
 8011ca8:	200001ec 	.word	0x200001ec
 8011cac:	200001a0 	.word	0x200001a0
 8011cb0:	200001a4 	.word	0x200001a4
 8011cb4:	20000200 	.word	0x20000200
 8011cb8:	20000208 	.word	0x20000208
 8011cbc:	200001f0 	.word	0x200001f0
 8011cc0:	200000ec 	.word	0x200000ec
 8011cc4:	200000e8 	.word	0x200000e8
 8011cc8:	200001f8 	.word	0x200001f8
 8011ccc:	200001fc 	.word	0x200001fc

08011cd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b088      	sub	sp, #32
 8011cd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011cd6:	4b3a      	ldr	r3, [pc, #232]	; (8011dc0 <vTaskSwitchContext+0xf0>)
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d003      	beq.n	8011ce6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011cde:	4b39      	ldr	r3, [pc, #228]	; (8011dc4 <vTaskSwitchContext+0xf4>)
 8011ce0:	2201      	movs	r2, #1
 8011ce2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011ce4:	e068      	b.n	8011db8 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 8011ce6:	4b37      	ldr	r3, [pc, #220]	; (8011dc4 <vTaskSwitchContext+0xf4>)
 8011ce8:	2200      	movs	r2, #0
 8011cea:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8011cec:	4b36      	ldr	r3, [pc, #216]	; (8011dc8 <vTaskSwitchContext+0xf8>)
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011cf2:	61fb      	str	r3, [r7, #28]
 8011cf4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8011cf8:	61bb      	str	r3, [r7, #24]
 8011cfa:	69fb      	ldr	r3, [r7, #28]
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	69ba      	ldr	r2, [r7, #24]
 8011d00:	429a      	cmp	r2, r3
 8011d02:	d111      	bne.n	8011d28 <vTaskSwitchContext+0x58>
 8011d04:	69fb      	ldr	r3, [r7, #28]
 8011d06:	3304      	adds	r3, #4
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	69ba      	ldr	r2, [r7, #24]
 8011d0c:	429a      	cmp	r2, r3
 8011d0e:	d10b      	bne.n	8011d28 <vTaskSwitchContext+0x58>
 8011d10:	69fb      	ldr	r3, [r7, #28]
 8011d12:	3308      	adds	r3, #8
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	69ba      	ldr	r2, [r7, #24]
 8011d18:	429a      	cmp	r2, r3
 8011d1a:	d105      	bne.n	8011d28 <vTaskSwitchContext+0x58>
 8011d1c:	69fb      	ldr	r3, [r7, #28]
 8011d1e:	330c      	adds	r3, #12
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	69ba      	ldr	r2, [r7, #24]
 8011d24:	429a      	cmp	r2, r3
 8011d26:	d008      	beq.n	8011d3a <vTaskSwitchContext+0x6a>
 8011d28:	4b27      	ldr	r3, [pc, #156]	; (8011dc8 <vTaskSwitchContext+0xf8>)
 8011d2a:	681a      	ldr	r2, [r3, #0]
 8011d2c:	4b26      	ldr	r3, [pc, #152]	; (8011dc8 <vTaskSwitchContext+0xf8>)
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	3334      	adds	r3, #52	; 0x34
 8011d32:	4619      	mov	r1, r3
 8011d34:	4610      	mov	r0, r2
 8011d36:	f001 f976 	bl	8013026 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8011d3a:	4b24      	ldr	r3, [pc, #144]	; (8011dcc <vTaskSwitchContext+0xfc>)
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	fab3 f383 	clz	r3, r3
 8011d46:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011d48:	7afb      	ldrb	r3, [r7, #11]
 8011d4a:	f1c3 031f 	rsb	r3, r3, #31
 8011d4e:	617b      	str	r3, [r7, #20]
 8011d50:	491f      	ldr	r1, [pc, #124]	; (8011dd0 <vTaskSwitchContext+0x100>)
 8011d52:	697a      	ldr	r2, [r7, #20]
 8011d54:	4613      	mov	r3, r2
 8011d56:	009b      	lsls	r3, r3, #2
 8011d58:	4413      	add	r3, r2
 8011d5a:	009b      	lsls	r3, r3, #2
 8011d5c:	440b      	add	r3, r1
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d10c      	bne.n	8011d7e <vTaskSwitchContext+0xae>
	__asm volatile
 8011d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d68:	b672      	cpsid	i
 8011d6a:	f383 8811 	msr	BASEPRI, r3
 8011d6e:	f3bf 8f6f 	isb	sy
 8011d72:	f3bf 8f4f 	dsb	sy
 8011d76:	b662      	cpsie	i
 8011d78:	607b      	str	r3, [r7, #4]
}
 8011d7a:	bf00      	nop
 8011d7c:	e7fe      	b.n	8011d7c <vTaskSwitchContext+0xac>
 8011d7e:	697a      	ldr	r2, [r7, #20]
 8011d80:	4613      	mov	r3, r2
 8011d82:	009b      	lsls	r3, r3, #2
 8011d84:	4413      	add	r3, r2
 8011d86:	009b      	lsls	r3, r3, #2
 8011d88:	4a11      	ldr	r2, [pc, #68]	; (8011dd0 <vTaskSwitchContext+0x100>)
 8011d8a:	4413      	add	r3, r2
 8011d8c:	613b      	str	r3, [r7, #16]
 8011d8e:	693b      	ldr	r3, [r7, #16]
 8011d90:	685b      	ldr	r3, [r3, #4]
 8011d92:	685a      	ldr	r2, [r3, #4]
 8011d94:	693b      	ldr	r3, [r7, #16]
 8011d96:	605a      	str	r2, [r3, #4]
 8011d98:	693b      	ldr	r3, [r7, #16]
 8011d9a:	685a      	ldr	r2, [r3, #4]
 8011d9c:	693b      	ldr	r3, [r7, #16]
 8011d9e:	3308      	adds	r3, #8
 8011da0:	429a      	cmp	r2, r3
 8011da2:	d104      	bne.n	8011dae <vTaskSwitchContext+0xde>
 8011da4:	693b      	ldr	r3, [r7, #16]
 8011da6:	685b      	ldr	r3, [r3, #4]
 8011da8:	685a      	ldr	r2, [r3, #4]
 8011daa:	693b      	ldr	r3, [r7, #16]
 8011dac:	605a      	str	r2, [r3, #4]
 8011dae:	693b      	ldr	r3, [r7, #16]
 8011db0:	685b      	ldr	r3, [r3, #4]
 8011db2:	68db      	ldr	r3, [r3, #12]
 8011db4:	4a04      	ldr	r2, [pc, #16]	; (8011dc8 <vTaskSwitchContext+0xf8>)
 8011db6:	6013      	str	r3, [r2, #0]
}
 8011db8:	bf00      	nop
 8011dba:	3720      	adds	r7, #32
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	bd80      	pop	{r7, pc}
 8011dc0:	20000210 	.word	0x20000210
 8011dc4:	200001fc 	.word	0x200001fc
 8011dc8:	200000e8 	.word	0x200000e8
 8011dcc:	200001f0 	.word	0x200001f0
 8011dd0:	200000ec 	.word	0x200000ec

08011dd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	b084      	sub	sp, #16
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	6078      	str	r0, [r7, #4]
 8011ddc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d10c      	bne.n	8011dfe <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8011de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011de8:	b672      	cpsid	i
 8011dea:	f383 8811 	msr	BASEPRI, r3
 8011dee:	f3bf 8f6f 	isb	sy
 8011df2:	f3bf 8f4f 	dsb	sy
 8011df6:	b662      	cpsie	i
 8011df8:	60fb      	str	r3, [r7, #12]
}
 8011dfa:	bf00      	nop
 8011dfc:	e7fe      	b.n	8011dfc <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011dfe:	4b07      	ldr	r3, [pc, #28]	; (8011e1c <vTaskPlaceOnEventList+0x48>)
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	3318      	adds	r3, #24
 8011e04:	4619      	mov	r1, r3
 8011e06:	6878      	ldr	r0, [r7, #4]
 8011e08:	f7fe fc8d 	bl	8010726 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011e0c:	2101      	movs	r1, #1
 8011e0e:	6838      	ldr	r0, [r7, #0]
 8011e10:	f000 fb96 	bl	8012540 <prvAddCurrentTaskToDelayedList>
}
 8011e14:	bf00      	nop
 8011e16:	3710      	adds	r7, #16
 8011e18:	46bd      	mov	sp, r7
 8011e1a:	bd80      	pop	{r7, pc}
 8011e1c:	200000e8 	.word	0x200000e8

08011e20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b086      	sub	sp, #24
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	68db      	ldr	r3, [r3, #12]
 8011e2c:	68db      	ldr	r3, [r3, #12]
 8011e2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011e30:	693b      	ldr	r3, [r7, #16]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d10c      	bne.n	8011e50 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8011e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e3a:	b672      	cpsid	i
 8011e3c:	f383 8811 	msr	BASEPRI, r3
 8011e40:	f3bf 8f6f 	isb	sy
 8011e44:	f3bf 8f4f 	dsb	sy
 8011e48:	b662      	cpsie	i
 8011e4a:	60fb      	str	r3, [r7, #12]
}
 8011e4c:	bf00      	nop
 8011e4e:	e7fe      	b.n	8011e4e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011e50:	693b      	ldr	r3, [r7, #16]
 8011e52:	3318      	adds	r3, #24
 8011e54:	4618      	mov	r0, r3
 8011e56:	f7fe fc9f 	bl	8010798 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011e5a:	4b1d      	ldr	r3, [pc, #116]	; (8011ed0 <xTaskRemoveFromEventList+0xb0>)
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d11c      	bne.n	8011e9c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011e62:	693b      	ldr	r3, [r7, #16]
 8011e64:	3304      	adds	r3, #4
 8011e66:	4618      	mov	r0, r3
 8011e68:	f7fe fc96 	bl	8010798 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011e6c:	693b      	ldr	r3, [r7, #16]
 8011e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e70:	2201      	movs	r2, #1
 8011e72:	409a      	lsls	r2, r3
 8011e74:	4b17      	ldr	r3, [pc, #92]	; (8011ed4 <xTaskRemoveFromEventList+0xb4>)
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	4313      	orrs	r3, r2
 8011e7a:	4a16      	ldr	r2, [pc, #88]	; (8011ed4 <xTaskRemoveFromEventList+0xb4>)
 8011e7c:	6013      	str	r3, [r2, #0]
 8011e7e:	693b      	ldr	r3, [r7, #16]
 8011e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e82:	4613      	mov	r3, r2
 8011e84:	009b      	lsls	r3, r3, #2
 8011e86:	4413      	add	r3, r2
 8011e88:	009b      	lsls	r3, r3, #2
 8011e8a:	4a13      	ldr	r2, [pc, #76]	; (8011ed8 <xTaskRemoveFromEventList+0xb8>)
 8011e8c:	441a      	add	r2, r3
 8011e8e:	693b      	ldr	r3, [r7, #16]
 8011e90:	3304      	adds	r3, #4
 8011e92:	4619      	mov	r1, r3
 8011e94:	4610      	mov	r0, r2
 8011e96:	f7fe fc22 	bl	80106de <vListInsertEnd>
 8011e9a:	e005      	b.n	8011ea8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011e9c:	693b      	ldr	r3, [r7, #16]
 8011e9e:	3318      	adds	r3, #24
 8011ea0:	4619      	mov	r1, r3
 8011ea2:	480e      	ldr	r0, [pc, #56]	; (8011edc <xTaskRemoveFromEventList+0xbc>)
 8011ea4:	f7fe fc1b 	bl	80106de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011ea8:	693b      	ldr	r3, [r7, #16]
 8011eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011eac:	4b0c      	ldr	r3, [pc, #48]	; (8011ee0 <xTaskRemoveFromEventList+0xc0>)
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011eb2:	429a      	cmp	r2, r3
 8011eb4:	d905      	bls.n	8011ec2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011eb6:	2301      	movs	r3, #1
 8011eb8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011eba:	4b0a      	ldr	r3, [pc, #40]	; (8011ee4 <xTaskRemoveFromEventList+0xc4>)
 8011ebc:	2201      	movs	r2, #1
 8011ebe:	601a      	str	r2, [r3, #0]
 8011ec0:	e001      	b.n	8011ec6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8011ec6:	697b      	ldr	r3, [r7, #20]
}
 8011ec8:	4618      	mov	r0, r3
 8011eca:	3718      	adds	r7, #24
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	bd80      	pop	{r7, pc}
 8011ed0:	20000210 	.word	0x20000210
 8011ed4:	200001f0 	.word	0x200001f0
 8011ed8:	200000ec 	.word	0x200000ec
 8011edc:	200001a8 	.word	0x200001a8
 8011ee0:	200000e8 	.word	0x200000e8
 8011ee4:	200001fc 	.word	0x200001fc

08011ee8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011ee8:	b480      	push	{r7}
 8011eea:	b083      	sub	sp, #12
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011ef0:	4b06      	ldr	r3, [pc, #24]	; (8011f0c <vTaskInternalSetTimeOutState+0x24>)
 8011ef2:	681a      	ldr	r2, [r3, #0]
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011ef8:	4b05      	ldr	r3, [pc, #20]	; (8011f10 <vTaskInternalSetTimeOutState+0x28>)
 8011efa:	681a      	ldr	r2, [r3, #0]
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	605a      	str	r2, [r3, #4]
}
 8011f00:	bf00      	nop
 8011f02:	370c      	adds	r7, #12
 8011f04:	46bd      	mov	sp, r7
 8011f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f0a:	4770      	bx	lr
 8011f0c:	20000200 	.word	0x20000200
 8011f10:	200001ec 	.word	0x200001ec

08011f14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b088      	sub	sp, #32
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]
 8011f1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d10c      	bne.n	8011f3e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8011f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f28:	b672      	cpsid	i
 8011f2a:	f383 8811 	msr	BASEPRI, r3
 8011f2e:	f3bf 8f6f 	isb	sy
 8011f32:	f3bf 8f4f 	dsb	sy
 8011f36:	b662      	cpsie	i
 8011f38:	613b      	str	r3, [r7, #16]
}
 8011f3a:	bf00      	nop
 8011f3c:	e7fe      	b.n	8011f3c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8011f3e:	683b      	ldr	r3, [r7, #0]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d10c      	bne.n	8011f5e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8011f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f48:	b672      	cpsid	i
 8011f4a:	f383 8811 	msr	BASEPRI, r3
 8011f4e:	f3bf 8f6f 	isb	sy
 8011f52:	f3bf 8f4f 	dsb	sy
 8011f56:	b662      	cpsie	i
 8011f58:	60fb      	str	r3, [r7, #12]
}
 8011f5a:	bf00      	nop
 8011f5c:	e7fe      	b.n	8011f5c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8011f5e:	f000 fc65 	bl	801282c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011f62:	4b1d      	ldr	r3, [pc, #116]	; (8011fd8 <xTaskCheckForTimeOut+0xc4>)
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	685b      	ldr	r3, [r3, #4]
 8011f6c:	69ba      	ldr	r2, [r7, #24]
 8011f6e:	1ad3      	subs	r3, r2, r3
 8011f70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011f72:	683b      	ldr	r3, [r7, #0]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f7a:	d102      	bne.n	8011f82 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	61fb      	str	r3, [r7, #28]
 8011f80:	e023      	b.n	8011fca <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	681a      	ldr	r2, [r3, #0]
 8011f86:	4b15      	ldr	r3, [pc, #84]	; (8011fdc <xTaskCheckForTimeOut+0xc8>)
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	429a      	cmp	r2, r3
 8011f8c:	d007      	beq.n	8011f9e <xTaskCheckForTimeOut+0x8a>
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	685b      	ldr	r3, [r3, #4]
 8011f92:	69ba      	ldr	r2, [r7, #24]
 8011f94:	429a      	cmp	r2, r3
 8011f96:	d302      	bcc.n	8011f9e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011f98:	2301      	movs	r3, #1
 8011f9a:	61fb      	str	r3, [r7, #28]
 8011f9c:	e015      	b.n	8011fca <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011f9e:	683b      	ldr	r3, [r7, #0]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	697a      	ldr	r2, [r7, #20]
 8011fa4:	429a      	cmp	r2, r3
 8011fa6:	d20b      	bcs.n	8011fc0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011fa8:	683b      	ldr	r3, [r7, #0]
 8011faa:	681a      	ldr	r2, [r3, #0]
 8011fac:	697b      	ldr	r3, [r7, #20]
 8011fae:	1ad2      	subs	r2, r2, r3
 8011fb0:	683b      	ldr	r3, [r7, #0]
 8011fb2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011fb4:	6878      	ldr	r0, [r7, #4]
 8011fb6:	f7ff ff97 	bl	8011ee8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011fba:	2300      	movs	r3, #0
 8011fbc:	61fb      	str	r3, [r7, #28]
 8011fbe:	e004      	b.n	8011fca <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8011fc0:	683b      	ldr	r3, [r7, #0]
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011fc6:	2301      	movs	r3, #1
 8011fc8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011fca:	f000 fc63 	bl	8012894 <vPortExitCritical>

	return xReturn;
 8011fce:	69fb      	ldr	r3, [r7, #28]
}
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	3720      	adds	r7, #32
 8011fd4:	46bd      	mov	sp, r7
 8011fd6:	bd80      	pop	{r7, pc}
 8011fd8:	200001ec 	.word	0x200001ec
 8011fdc:	20000200 	.word	0x20000200

08011fe0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011fe0:	b480      	push	{r7}
 8011fe2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011fe4:	4b03      	ldr	r3, [pc, #12]	; (8011ff4 <vTaskMissedYield+0x14>)
 8011fe6:	2201      	movs	r2, #1
 8011fe8:	601a      	str	r2, [r3, #0]
}
 8011fea:	bf00      	nop
 8011fec:	46bd      	mov	sp, r7
 8011fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff2:	4770      	bx	lr
 8011ff4:	200001fc 	.word	0x200001fc

08011ff8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011ff8:	b580      	push	{r7, lr}
 8011ffa:	b082      	sub	sp, #8
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012000:	f000 f854 	bl	80120ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012004:	4b07      	ldr	r3, [pc, #28]	; (8012024 <prvIdleTask+0x2c>)
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	2b01      	cmp	r3, #1
 801200a:	d907      	bls.n	801201c <prvIdleTask+0x24>
			{
				taskYIELD();
 801200c:	4b06      	ldr	r3, [pc, #24]	; (8012028 <prvIdleTask+0x30>)
 801200e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012012:	601a      	str	r2, [r3, #0]
 8012014:	f3bf 8f4f 	dsb	sy
 8012018:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 801201c:	f000 fffc 	bl	8013018 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8012020:	e7ee      	b.n	8012000 <prvIdleTask+0x8>
 8012022:	bf00      	nop
 8012024:	200000ec 	.word	0x200000ec
 8012028:	e000ed04 	.word	0xe000ed04

0801202c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801202c:	b580      	push	{r7, lr}
 801202e:	b082      	sub	sp, #8
 8012030:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012032:	2300      	movs	r3, #0
 8012034:	607b      	str	r3, [r7, #4]
 8012036:	e00c      	b.n	8012052 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012038:	687a      	ldr	r2, [r7, #4]
 801203a:	4613      	mov	r3, r2
 801203c:	009b      	lsls	r3, r3, #2
 801203e:	4413      	add	r3, r2
 8012040:	009b      	lsls	r3, r3, #2
 8012042:	4a12      	ldr	r2, [pc, #72]	; (801208c <prvInitialiseTaskLists+0x60>)
 8012044:	4413      	add	r3, r2
 8012046:	4618      	mov	r0, r3
 8012048:	f7fe fb1c 	bl	8010684 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	3301      	adds	r3, #1
 8012050:	607b      	str	r3, [r7, #4]
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	2b06      	cmp	r3, #6
 8012056:	d9ef      	bls.n	8012038 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012058:	480d      	ldr	r0, [pc, #52]	; (8012090 <prvInitialiseTaskLists+0x64>)
 801205a:	f7fe fb13 	bl	8010684 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801205e:	480d      	ldr	r0, [pc, #52]	; (8012094 <prvInitialiseTaskLists+0x68>)
 8012060:	f7fe fb10 	bl	8010684 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012064:	480c      	ldr	r0, [pc, #48]	; (8012098 <prvInitialiseTaskLists+0x6c>)
 8012066:	f7fe fb0d 	bl	8010684 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801206a:	480c      	ldr	r0, [pc, #48]	; (801209c <prvInitialiseTaskLists+0x70>)
 801206c:	f7fe fb0a 	bl	8010684 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012070:	480b      	ldr	r0, [pc, #44]	; (80120a0 <prvInitialiseTaskLists+0x74>)
 8012072:	f7fe fb07 	bl	8010684 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012076:	4b0b      	ldr	r3, [pc, #44]	; (80120a4 <prvInitialiseTaskLists+0x78>)
 8012078:	4a05      	ldr	r2, [pc, #20]	; (8012090 <prvInitialiseTaskLists+0x64>)
 801207a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801207c:	4b0a      	ldr	r3, [pc, #40]	; (80120a8 <prvInitialiseTaskLists+0x7c>)
 801207e:	4a05      	ldr	r2, [pc, #20]	; (8012094 <prvInitialiseTaskLists+0x68>)
 8012080:	601a      	str	r2, [r3, #0]
}
 8012082:	bf00      	nop
 8012084:	3708      	adds	r7, #8
 8012086:	46bd      	mov	sp, r7
 8012088:	bd80      	pop	{r7, pc}
 801208a:	bf00      	nop
 801208c:	200000ec 	.word	0x200000ec
 8012090:	20000178 	.word	0x20000178
 8012094:	2000018c 	.word	0x2000018c
 8012098:	200001a8 	.word	0x200001a8
 801209c:	200001bc 	.word	0x200001bc
 80120a0:	200001d4 	.word	0x200001d4
 80120a4:	200001a0 	.word	0x200001a0
 80120a8:	200001a4 	.word	0x200001a4

080120ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80120ac:	b580      	push	{r7, lr}
 80120ae:	b082      	sub	sp, #8
 80120b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80120b2:	e019      	b.n	80120e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80120b4:	f000 fbba 	bl	801282c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80120b8:	4b10      	ldr	r3, [pc, #64]	; (80120fc <prvCheckTasksWaitingTermination+0x50>)
 80120ba:	68db      	ldr	r3, [r3, #12]
 80120bc:	68db      	ldr	r3, [r3, #12]
 80120be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	3304      	adds	r3, #4
 80120c4:	4618      	mov	r0, r3
 80120c6:	f7fe fb67 	bl	8010798 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80120ca:	4b0d      	ldr	r3, [pc, #52]	; (8012100 <prvCheckTasksWaitingTermination+0x54>)
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	3b01      	subs	r3, #1
 80120d0:	4a0b      	ldr	r2, [pc, #44]	; (8012100 <prvCheckTasksWaitingTermination+0x54>)
 80120d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80120d4:	4b0b      	ldr	r3, [pc, #44]	; (8012104 <prvCheckTasksWaitingTermination+0x58>)
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	3b01      	subs	r3, #1
 80120da:	4a0a      	ldr	r2, [pc, #40]	; (8012104 <prvCheckTasksWaitingTermination+0x58>)
 80120dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80120de:	f000 fbd9 	bl	8012894 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80120e2:	6878      	ldr	r0, [r7, #4]
 80120e4:	f000 f810 	bl	8012108 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80120e8:	4b06      	ldr	r3, [pc, #24]	; (8012104 <prvCheckTasksWaitingTermination+0x58>)
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d1e1      	bne.n	80120b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80120f0:	bf00      	nop
 80120f2:	bf00      	nop
 80120f4:	3708      	adds	r7, #8
 80120f6:	46bd      	mov	sp, r7
 80120f8:	bd80      	pop	{r7, pc}
 80120fa:	bf00      	nop
 80120fc:	200001bc 	.word	0x200001bc
 8012100:	200001e8 	.word	0x200001e8
 8012104:	200001d0 	.word	0x200001d0

08012108 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012108:	b580      	push	{r7, lr}
 801210a:	b082      	sub	sp, #8
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012114:	4618      	mov	r0, r3
 8012116:	f000 fd85 	bl	8012c24 <vPortFree>
			vPortFree( pxTCB );
 801211a:	6878      	ldr	r0, [r7, #4]
 801211c:	f000 fd82 	bl	8012c24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012120:	bf00      	nop
 8012122:	3708      	adds	r7, #8
 8012124:	46bd      	mov	sp, r7
 8012126:	bd80      	pop	{r7, pc}

08012128 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012128:	b480      	push	{r7}
 801212a:	b083      	sub	sp, #12
 801212c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801212e:	4b0f      	ldr	r3, [pc, #60]	; (801216c <prvResetNextTaskUnblockTime+0x44>)
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d101      	bne.n	801213c <prvResetNextTaskUnblockTime+0x14>
 8012138:	2301      	movs	r3, #1
 801213a:	e000      	b.n	801213e <prvResetNextTaskUnblockTime+0x16>
 801213c:	2300      	movs	r3, #0
 801213e:	2b00      	cmp	r3, #0
 8012140:	d004      	beq.n	801214c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012142:	4b0b      	ldr	r3, [pc, #44]	; (8012170 <prvResetNextTaskUnblockTime+0x48>)
 8012144:	f04f 32ff 	mov.w	r2, #4294967295
 8012148:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801214a:	e008      	b.n	801215e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 801214c:	4b07      	ldr	r3, [pc, #28]	; (801216c <prvResetNextTaskUnblockTime+0x44>)
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	68db      	ldr	r3, [r3, #12]
 8012152:	68db      	ldr	r3, [r3, #12]
 8012154:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	685b      	ldr	r3, [r3, #4]
 801215a:	4a05      	ldr	r2, [pc, #20]	; (8012170 <prvResetNextTaskUnblockTime+0x48>)
 801215c:	6013      	str	r3, [r2, #0]
}
 801215e:	bf00      	nop
 8012160:	370c      	adds	r7, #12
 8012162:	46bd      	mov	sp, r7
 8012164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012168:	4770      	bx	lr
 801216a:	bf00      	nop
 801216c:	200001a0 	.word	0x200001a0
 8012170:	20000208 	.word	0x20000208

08012174 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012174:	b480      	push	{r7}
 8012176:	b083      	sub	sp, #12
 8012178:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801217a:	4b0b      	ldr	r3, [pc, #44]	; (80121a8 <xTaskGetSchedulerState+0x34>)
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d102      	bne.n	8012188 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012182:	2301      	movs	r3, #1
 8012184:	607b      	str	r3, [r7, #4]
 8012186:	e008      	b.n	801219a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012188:	4b08      	ldr	r3, [pc, #32]	; (80121ac <xTaskGetSchedulerState+0x38>)
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d102      	bne.n	8012196 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012190:	2302      	movs	r3, #2
 8012192:	607b      	str	r3, [r7, #4]
 8012194:	e001      	b.n	801219a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012196:	2300      	movs	r3, #0
 8012198:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801219a:	687b      	ldr	r3, [r7, #4]
	}
 801219c:	4618      	mov	r0, r3
 801219e:	370c      	adds	r7, #12
 80121a0:	46bd      	mov	sp, r7
 80121a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a6:	4770      	bx	lr
 80121a8:	200001f4 	.word	0x200001f4
 80121ac:	20000210 	.word	0x20000210

080121b0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b084      	sub	sp, #16
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80121bc:	2300      	movs	r3, #0
 80121be:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d06e      	beq.n	80122a4 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80121c6:	68bb      	ldr	r3, [r7, #8]
 80121c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121ca:	4b39      	ldr	r3, [pc, #228]	; (80122b0 <xTaskPriorityInherit+0x100>)
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121d0:	429a      	cmp	r2, r3
 80121d2:	d25e      	bcs.n	8012292 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80121d4:	68bb      	ldr	r3, [r7, #8]
 80121d6:	699b      	ldr	r3, [r3, #24]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	db06      	blt.n	80121ea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80121dc:	4b34      	ldr	r3, [pc, #208]	; (80122b0 <xTaskPriorityInherit+0x100>)
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121e2:	f1c3 0207 	rsb	r2, r3, #7
 80121e6:	68bb      	ldr	r3, [r7, #8]
 80121e8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80121ea:	68bb      	ldr	r3, [r7, #8]
 80121ec:	6959      	ldr	r1, [r3, #20]
 80121ee:	68bb      	ldr	r3, [r7, #8]
 80121f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121f2:	4613      	mov	r3, r2
 80121f4:	009b      	lsls	r3, r3, #2
 80121f6:	4413      	add	r3, r2
 80121f8:	009b      	lsls	r3, r3, #2
 80121fa:	4a2e      	ldr	r2, [pc, #184]	; (80122b4 <xTaskPriorityInherit+0x104>)
 80121fc:	4413      	add	r3, r2
 80121fe:	4299      	cmp	r1, r3
 8012200:	d101      	bne.n	8012206 <xTaskPriorityInherit+0x56>
 8012202:	2301      	movs	r3, #1
 8012204:	e000      	b.n	8012208 <xTaskPriorityInherit+0x58>
 8012206:	2300      	movs	r3, #0
 8012208:	2b00      	cmp	r3, #0
 801220a:	d03a      	beq.n	8012282 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801220c:	68bb      	ldr	r3, [r7, #8]
 801220e:	3304      	adds	r3, #4
 8012210:	4618      	mov	r0, r3
 8012212:	f7fe fac1 	bl	8010798 <uxListRemove>
 8012216:	4603      	mov	r3, r0
 8012218:	2b00      	cmp	r3, #0
 801221a:	d115      	bne.n	8012248 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801221c:	68bb      	ldr	r3, [r7, #8]
 801221e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012220:	4924      	ldr	r1, [pc, #144]	; (80122b4 <xTaskPriorityInherit+0x104>)
 8012222:	4613      	mov	r3, r2
 8012224:	009b      	lsls	r3, r3, #2
 8012226:	4413      	add	r3, r2
 8012228:	009b      	lsls	r3, r3, #2
 801222a:	440b      	add	r3, r1
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d10a      	bne.n	8012248 <xTaskPriorityInherit+0x98>
 8012232:	68bb      	ldr	r3, [r7, #8]
 8012234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012236:	2201      	movs	r2, #1
 8012238:	fa02 f303 	lsl.w	r3, r2, r3
 801223c:	43da      	mvns	r2, r3
 801223e:	4b1e      	ldr	r3, [pc, #120]	; (80122b8 <xTaskPriorityInherit+0x108>)
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	4013      	ands	r3, r2
 8012244:	4a1c      	ldr	r2, [pc, #112]	; (80122b8 <xTaskPriorityInherit+0x108>)
 8012246:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012248:	4b19      	ldr	r3, [pc, #100]	; (80122b0 <xTaskPriorityInherit+0x100>)
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801224e:	68bb      	ldr	r3, [r7, #8]
 8012250:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012252:	68bb      	ldr	r3, [r7, #8]
 8012254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012256:	2201      	movs	r2, #1
 8012258:	409a      	lsls	r2, r3
 801225a:	4b17      	ldr	r3, [pc, #92]	; (80122b8 <xTaskPriorityInherit+0x108>)
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	4313      	orrs	r3, r2
 8012260:	4a15      	ldr	r2, [pc, #84]	; (80122b8 <xTaskPriorityInherit+0x108>)
 8012262:	6013      	str	r3, [r2, #0]
 8012264:	68bb      	ldr	r3, [r7, #8]
 8012266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012268:	4613      	mov	r3, r2
 801226a:	009b      	lsls	r3, r3, #2
 801226c:	4413      	add	r3, r2
 801226e:	009b      	lsls	r3, r3, #2
 8012270:	4a10      	ldr	r2, [pc, #64]	; (80122b4 <xTaskPriorityInherit+0x104>)
 8012272:	441a      	add	r2, r3
 8012274:	68bb      	ldr	r3, [r7, #8]
 8012276:	3304      	adds	r3, #4
 8012278:	4619      	mov	r1, r3
 801227a:	4610      	mov	r0, r2
 801227c:	f7fe fa2f 	bl	80106de <vListInsertEnd>
 8012280:	e004      	b.n	801228c <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012282:	4b0b      	ldr	r3, [pc, #44]	; (80122b0 <xTaskPriorityInherit+0x100>)
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012288:	68bb      	ldr	r3, [r7, #8]
 801228a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801228c:	2301      	movs	r3, #1
 801228e:	60fb      	str	r3, [r7, #12]
 8012290:	e008      	b.n	80122a4 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012292:	68bb      	ldr	r3, [r7, #8]
 8012294:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012296:	4b06      	ldr	r3, [pc, #24]	; (80122b0 <xTaskPriorityInherit+0x100>)
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801229c:	429a      	cmp	r2, r3
 801229e:	d201      	bcs.n	80122a4 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80122a0:	2301      	movs	r3, #1
 80122a2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80122a4:	68fb      	ldr	r3, [r7, #12]
	}
 80122a6:	4618      	mov	r0, r3
 80122a8:	3710      	adds	r7, #16
 80122aa:	46bd      	mov	sp, r7
 80122ac:	bd80      	pop	{r7, pc}
 80122ae:	bf00      	nop
 80122b0:	200000e8 	.word	0x200000e8
 80122b4:	200000ec 	.word	0x200000ec
 80122b8:	200001f0 	.word	0x200001f0

080122bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80122bc:	b580      	push	{r7, lr}
 80122be:	b086      	sub	sp, #24
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80122c8:	2300      	movs	r3, #0
 80122ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d072      	beq.n	80123b8 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80122d2:	4b3c      	ldr	r3, [pc, #240]	; (80123c4 <xTaskPriorityDisinherit+0x108>)
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	693a      	ldr	r2, [r7, #16]
 80122d8:	429a      	cmp	r2, r3
 80122da:	d00c      	beq.n	80122f6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80122dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122e0:	b672      	cpsid	i
 80122e2:	f383 8811 	msr	BASEPRI, r3
 80122e6:	f3bf 8f6f 	isb	sy
 80122ea:	f3bf 8f4f 	dsb	sy
 80122ee:	b662      	cpsie	i
 80122f0:	60fb      	str	r3, [r7, #12]
}
 80122f2:	bf00      	nop
 80122f4:	e7fe      	b.n	80122f4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80122f6:	693b      	ldr	r3, [r7, #16]
 80122f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d10c      	bne.n	8012318 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80122fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012302:	b672      	cpsid	i
 8012304:	f383 8811 	msr	BASEPRI, r3
 8012308:	f3bf 8f6f 	isb	sy
 801230c:	f3bf 8f4f 	dsb	sy
 8012310:	b662      	cpsie	i
 8012312:	60bb      	str	r3, [r7, #8]
}
 8012314:	bf00      	nop
 8012316:	e7fe      	b.n	8012316 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8012318:	693b      	ldr	r3, [r7, #16]
 801231a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801231c:	1e5a      	subs	r2, r3, #1
 801231e:	693b      	ldr	r3, [r7, #16]
 8012320:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012322:	693b      	ldr	r3, [r7, #16]
 8012324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012326:	693b      	ldr	r3, [r7, #16]
 8012328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801232a:	429a      	cmp	r2, r3
 801232c:	d044      	beq.n	80123b8 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801232e:	693b      	ldr	r3, [r7, #16]
 8012330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012332:	2b00      	cmp	r3, #0
 8012334:	d140      	bne.n	80123b8 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012336:	693b      	ldr	r3, [r7, #16]
 8012338:	3304      	adds	r3, #4
 801233a:	4618      	mov	r0, r3
 801233c:	f7fe fa2c 	bl	8010798 <uxListRemove>
 8012340:	4603      	mov	r3, r0
 8012342:	2b00      	cmp	r3, #0
 8012344:	d115      	bne.n	8012372 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012346:	693b      	ldr	r3, [r7, #16]
 8012348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801234a:	491f      	ldr	r1, [pc, #124]	; (80123c8 <xTaskPriorityDisinherit+0x10c>)
 801234c:	4613      	mov	r3, r2
 801234e:	009b      	lsls	r3, r3, #2
 8012350:	4413      	add	r3, r2
 8012352:	009b      	lsls	r3, r3, #2
 8012354:	440b      	add	r3, r1
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	2b00      	cmp	r3, #0
 801235a:	d10a      	bne.n	8012372 <xTaskPriorityDisinherit+0xb6>
 801235c:	693b      	ldr	r3, [r7, #16]
 801235e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012360:	2201      	movs	r2, #1
 8012362:	fa02 f303 	lsl.w	r3, r2, r3
 8012366:	43da      	mvns	r2, r3
 8012368:	4b18      	ldr	r3, [pc, #96]	; (80123cc <xTaskPriorityDisinherit+0x110>)
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	4013      	ands	r3, r2
 801236e:	4a17      	ldr	r2, [pc, #92]	; (80123cc <xTaskPriorityDisinherit+0x110>)
 8012370:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012372:	693b      	ldr	r3, [r7, #16]
 8012374:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012376:	693b      	ldr	r3, [r7, #16]
 8012378:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801237a:	693b      	ldr	r3, [r7, #16]
 801237c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801237e:	f1c3 0207 	rsb	r2, r3, #7
 8012382:	693b      	ldr	r3, [r7, #16]
 8012384:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012386:	693b      	ldr	r3, [r7, #16]
 8012388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801238a:	2201      	movs	r2, #1
 801238c:	409a      	lsls	r2, r3
 801238e:	4b0f      	ldr	r3, [pc, #60]	; (80123cc <xTaskPriorityDisinherit+0x110>)
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	4313      	orrs	r3, r2
 8012394:	4a0d      	ldr	r2, [pc, #52]	; (80123cc <xTaskPriorityDisinherit+0x110>)
 8012396:	6013      	str	r3, [r2, #0]
 8012398:	693b      	ldr	r3, [r7, #16]
 801239a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801239c:	4613      	mov	r3, r2
 801239e:	009b      	lsls	r3, r3, #2
 80123a0:	4413      	add	r3, r2
 80123a2:	009b      	lsls	r3, r3, #2
 80123a4:	4a08      	ldr	r2, [pc, #32]	; (80123c8 <xTaskPriorityDisinherit+0x10c>)
 80123a6:	441a      	add	r2, r3
 80123a8:	693b      	ldr	r3, [r7, #16]
 80123aa:	3304      	adds	r3, #4
 80123ac:	4619      	mov	r1, r3
 80123ae:	4610      	mov	r0, r2
 80123b0:	f7fe f995 	bl	80106de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80123b4:	2301      	movs	r3, #1
 80123b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80123b8:	697b      	ldr	r3, [r7, #20]
	}
 80123ba:	4618      	mov	r0, r3
 80123bc:	3718      	adds	r7, #24
 80123be:	46bd      	mov	sp, r7
 80123c0:	bd80      	pop	{r7, pc}
 80123c2:	bf00      	nop
 80123c4:	200000e8 	.word	0x200000e8
 80123c8:	200000ec 	.word	0x200000ec
 80123cc:	200001f0 	.word	0x200001f0

080123d0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b088      	sub	sp, #32
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	6078      	str	r0, [r7, #4]
 80123d8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80123de:	2301      	movs	r3, #1
 80123e0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	f000 808c 	beq.w	8012502 <vTaskPriorityDisinheritAfterTimeout+0x132>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80123ea:	69bb      	ldr	r3, [r7, #24]
 80123ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d10c      	bne.n	801240c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 80123f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123f6:	b672      	cpsid	i
 80123f8:	f383 8811 	msr	BASEPRI, r3
 80123fc:	f3bf 8f6f 	isb	sy
 8012400:	f3bf 8f4f 	dsb	sy
 8012404:	b662      	cpsie	i
 8012406:	60fb      	str	r3, [r7, #12]
}
 8012408:	bf00      	nop
 801240a:	e7fe      	b.n	801240a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801240c:	69bb      	ldr	r3, [r7, #24]
 801240e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012410:	683a      	ldr	r2, [r7, #0]
 8012412:	429a      	cmp	r2, r3
 8012414:	d902      	bls.n	801241c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012416:	683b      	ldr	r3, [r7, #0]
 8012418:	61fb      	str	r3, [r7, #28]
 801241a:	e002      	b.n	8012422 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801241c:	69bb      	ldr	r3, [r7, #24]
 801241e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012420:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012422:	69bb      	ldr	r3, [r7, #24]
 8012424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012426:	69fa      	ldr	r2, [r7, #28]
 8012428:	429a      	cmp	r2, r3
 801242a:	d06a      	beq.n	8012502 <vTaskPriorityDisinheritAfterTimeout+0x132>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801242c:	69bb      	ldr	r3, [r7, #24]
 801242e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012430:	697a      	ldr	r2, [r7, #20]
 8012432:	429a      	cmp	r2, r3
 8012434:	d165      	bne.n	8012502 <vTaskPriorityDisinheritAfterTimeout+0x132>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012436:	4b35      	ldr	r3, [pc, #212]	; (801250c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	69ba      	ldr	r2, [r7, #24]
 801243c:	429a      	cmp	r2, r3
 801243e:	d10c      	bne.n	801245a <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8012440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012444:	b672      	cpsid	i
 8012446:	f383 8811 	msr	BASEPRI, r3
 801244a:	f3bf 8f6f 	isb	sy
 801244e:	f3bf 8f4f 	dsb	sy
 8012452:	b662      	cpsie	i
 8012454:	60bb      	str	r3, [r7, #8]
}
 8012456:	bf00      	nop
 8012458:	e7fe      	b.n	8012458 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801245a:	69bb      	ldr	r3, [r7, #24]
 801245c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801245e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012460:	69bb      	ldr	r3, [r7, #24]
 8012462:	69fa      	ldr	r2, [r7, #28]
 8012464:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012466:	69bb      	ldr	r3, [r7, #24]
 8012468:	699b      	ldr	r3, [r3, #24]
 801246a:	2b00      	cmp	r3, #0
 801246c:	db04      	blt.n	8012478 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801246e:	69fb      	ldr	r3, [r7, #28]
 8012470:	f1c3 0207 	rsb	r2, r3, #7
 8012474:	69bb      	ldr	r3, [r7, #24]
 8012476:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012478:	69bb      	ldr	r3, [r7, #24]
 801247a:	6959      	ldr	r1, [r3, #20]
 801247c:	693a      	ldr	r2, [r7, #16]
 801247e:	4613      	mov	r3, r2
 8012480:	009b      	lsls	r3, r3, #2
 8012482:	4413      	add	r3, r2
 8012484:	009b      	lsls	r3, r3, #2
 8012486:	4a22      	ldr	r2, [pc, #136]	; (8012510 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8012488:	4413      	add	r3, r2
 801248a:	4299      	cmp	r1, r3
 801248c:	d101      	bne.n	8012492 <vTaskPriorityDisinheritAfterTimeout+0xc2>
 801248e:	2301      	movs	r3, #1
 8012490:	e000      	b.n	8012494 <vTaskPriorityDisinheritAfterTimeout+0xc4>
 8012492:	2300      	movs	r3, #0
 8012494:	2b00      	cmp	r3, #0
 8012496:	d034      	beq.n	8012502 <vTaskPriorityDisinheritAfterTimeout+0x132>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012498:	69bb      	ldr	r3, [r7, #24]
 801249a:	3304      	adds	r3, #4
 801249c:	4618      	mov	r0, r3
 801249e:	f7fe f97b 	bl	8010798 <uxListRemove>
 80124a2:	4603      	mov	r3, r0
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d115      	bne.n	80124d4 <vTaskPriorityDisinheritAfterTimeout+0x104>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80124a8:	69bb      	ldr	r3, [r7, #24]
 80124aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124ac:	4918      	ldr	r1, [pc, #96]	; (8012510 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80124ae:	4613      	mov	r3, r2
 80124b0:	009b      	lsls	r3, r3, #2
 80124b2:	4413      	add	r3, r2
 80124b4:	009b      	lsls	r3, r3, #2
 80124b6:	440b      	add	r3, r1
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d10a      	bne.n	80124d4 <vTaskPriorityDisinheritAfterTimeout+0x104>
 80124be:	69bb      	ldr	r3, [r7, #24]
 80124c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124c2:	2201      	movs	r2, #1
 80124c4:	fa02 f303 	lsl.w	r3, r2, r3
 80124c8:	43da      	mvns	r2, r3
 80124ca:	4b12      	ldr	r3, [pc, #72]	; (8012514 <vTaskPriorityDisinheritAfterTimeout+0x144>)
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	4013      	ands	r3, r2
 80124d0:	4a10      	ldr	r2, [pc, #64]	; (8012514 <vTaskPriorityDisinheritAfterTimeout+0x144>)
 80124d2:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80124d4:	69bb      	ldr	r3, [r7, #24]
 80124d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124d8:	2201      	movs	r2, #1
 80124da:	409a      	lsls	r2, r3
 80124dc:	4b0d      	ldr	r3, [pc, #52]	; (8012514 <vTaskPriorityDisinheritAfterTimeout+0x144>)
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	4313      	orrs	r3, r2
 80124e2:	4a0c      	ldr	r2, [pc, #48]	; (8012514 <vTaskPriorityDisinheritAfterTimeout+0x144>)
 80124e4:	6013      	str	r3, [r2, #0]
 80124e6:	69bb      	ldr	r3, [r7, #24]
 80124e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124ea:	4613      	mov	r3, r2
 80124ec:	009b      	lsls	r3, r3, #2
 80124ee:	4413      	add	r3, r2
 80124f0:	009b      	lsls	r3, r3, #2
 80124f2:	4a07      	ldr	r2, [pc, #28]	; (8012510 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80124f4:	441a      	add	r2, r3
 80124f6:	69bb      	ldr	r3, [r7, #24]
 80124f8:	3304      	adds	r3, #4
 80124fa:	4619      	mov	r1, r3
 80124fc:	4610      	mov	r0, r2
 80124fe:	f7fe f8ee 	bl	80106de <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012502:	bf00      	nop
 8012504:	3720      	adds	r7, #32
 8012506:	46bd      	mov	sp, r7
 8012508:	bd80      	pop	{r7, pc}
 801250a:	bf00      	nop
 801250c:	200000e8 	.word	0x200000e8
 8012510:	200000ec 	.word	0x200000ec
 8012514:	200001f0 	.word	0x200001f0

08012518 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8012518:	b480      	push	{r7}
 801251a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801251c:	4b07      	ldr	r3, [pc, #28]	; (801253c <pvTaskIncrementMutexHeldCount+0x24>)
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	2b00      	cmp	r3, #0
 8012522:	d004      	beq.n	801252e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012524:	4b05      	ldr	r3, [pc, #20]	; (801253c <pvTaskIncrementMutexHeldCount+0x24>)
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801252a:	3201      	adds	r2, #1
 801252c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 801252e:	4b03      	ldr	r3, [pc, #12]	; (801253c <pvTaskIncrementMutexHeldCount+0x24>)
 8012530:	681b      	ldr	r3, [r3, #0]
	}
 8012532:	4618      	mov	r0, r3
 8012534:	46bd      	mov	sp, r7
 8012536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801253a:	4770      	bx	lr
 801253c:	200000e8 	.word	0x200000e8

08012540 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012540:	b580      	push	{r7, lr}
 8012542:	b084      	sub	sp, #16
 8012544:	af00      	add	r7, sp, #0
 8012546:	6078      	str	r0, [r7, #4]
 8012548:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801254a:	4b29      	ldr	r3, [pc, #164]	; (80125f0 <prvAddCurrentTaskToDelayedList+0xb0>)
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012550:	4b28      	ldr	r3, [pc, #160]	; (80125f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	3304      	adds	r3, #4
 8012556:	4618      	mov	r0, r3
 8012558:	f7fe f91e 	bl	8010798 <uxListRemove>
 801255c:	4603      	mov	r3, r0
 801255e:	2b00      	cmp	r3, #0
 8012560:	d10b      	bne.n	801257a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8012562:	4b24      	ldr	r3, [pc, #144]	; (80125f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012568:	2201      	movs	r2, #1
 801256a:	fa02 f303 	lsl.w	r3, r2, r3
 801256e:	43da      	mvns	r2, r3
 8012570:	4b21      	ldr	r3, [pc, #132]	; (80125f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	4013      	ands	r3, r2
 8012576:	4a20      	ldr	r2, [pc, #128]	; (80125f8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012578:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012580:	d10a      	bne.n	8012598 <prvAddCurrentTaskToDelayedList+0x58>
 8012582:	683b      	ldr	r3, [r7, #0]
 8012584:	2b00      	cmp	r3, #0
 8012586:	d007      	beq.n	8012598 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012588:	4b1a      	ldr	r3, [pc, #104]	; (80125f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	3304      	adds	r3, #4
 801258e:	4619      	mov	r1, r3
 8012590:	481a      	ldr	r0, [pc, #104]	; (80125fc <prvAddCurrentTaskToDelayedList+0xbc>)
 8012592:	f7fe f8a4 	bl	80106de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012596:	e026      	b.n	80125e6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012598:	68fa      	ldr	r2, [r7, #12]
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	4413      	add	r3, r2
 801259e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80125a0:	4b14      	ldr	r3, [pc, #80]	; (80125f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	68ba      	ldr	r2, [r7, #8]
 80125a6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80125a8:	68ba      	ldr	r2, [r7, #8]
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	429a      	cmp	r2, r3
 80125ae:	d209      	bcs.n	80125c4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80125b0:	4b13      	ldr	r3, [pc, #76]	; (8012600 <prvAddCurrentTaskToDelayedList+0xc0>)
 80125b2:	681a      	ldr	r2, [r3, #0]
 80125b4:	4b0f      	ldr	r3, [pc, #60]	; (80125f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	3304      	adds	r3, #4
 80125ba:	4619      	mov	r1, r3
 80125bc:	4610      	mov	r0, r2
 80125be:	f7fe f8b2 	bl	8010726 <vListInsert>
}
 80125c2:	e010      	b.n	80125e6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80125c4:	4b0f      	ldr	r3, [pc, #60]	; (8012604 <prvAddCurrentTaskToDelayedList+0xc4>)
 80125c6:	681a      	ldr	r2, [r3, #0]
 80125c8:	4b0a      	ldr	r3, [pc, #40]	; (80125f4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	3304      	adds	r3, #4
 80125ce:	4619      	mov	r1, r3
 80125d0:	4610      	mov	r0, r2
 80125d2:	f7fe f8a8 	bl	8010726 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80125d6:	4b0c      	ldr	r3, [pc, #48]	; (8012608 <prvAddCurrentTaskToDelayedList+0xc8>)
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	68ba      	ldr	r2, [r7, #8]
 80125dc:	429a      	cmp	r2, r3
 80125de:	d202      	bcs.n	80125e6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80125e0:	4a09      	ldr	r2, [pc, #36]	; (8012608 <prvAddCurrentTaskToDelayedList+0xc8>)
 80125e2:	68bb      	ldr	r3, [r7, #8]
 80125e4:	6013      	str	r3, [r2, #0]
}
 80125e6:	bf00      	nop
 80125e8:	3710      	adds	r7, #16
 80125ea:	46bd      	mov	sp, r7
 80125ec:	bd80      	pop	{r7, pc}
 80125ee:	bf00      	nop
 80125f0:	200001ec 	.word	0x200001ec
 80125f4:	200000e8 	.word	0x200000e8
 80125f8:	200001f0 	.word	0x200001f0
 80125fc:	200001d4 	.word	0x200001d4
 8012600:	200001a4 	.word	0x200001a4
 8012604:	200001a0 	.word	0x200001a0
 8012608:	20000208 	.word	0x20000208

0801260c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801260c:	b480      	push	{r7}
 801260e:	b085      	sub	sp, #20
 8012610:	af00      	add	r7, sp, #0
 8012612:	60f8      	str	r0, [r7, #12]
 8012614:	60b9      	str	r1, [r7, #8]
 8012616:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	3b04      	subs	r3, #4
 801261c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012624:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	3b04      	subs	r3, #4
 801262a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801262c:	68bb      	ldr	r3, [r7, #8]
 801262e:	f023 0201 	bic.w	r2, r3, #1
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	3b04      	subs	r3, #4
 801263a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801263c:	4a0c      	ldr	r2, [pc, #48]	; (8012670 <pxPortInitialiseStack+0x64>)
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	3b14      	subs	r3, #20
 8012646:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012648:	687a      	ldr	r2, [r7, #4]
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	3b04      	subs	r3, #4
 8012652:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	f06f 0202 	mvn.w	r2, #2
 801265a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	3b20      	subs	r3, #32
 8012660:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012662:	68fb      	ldr	r3, [r7, #12]
}
 8012664:	4618      	mov	r0, r3
 8012666:	3714      	adds	r7, #20
 8012668:	46bd      	mov	sp, r7
 801266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801266e:	4770      	bx	lr
 8012670:	08012675 	.word	0x08012675

08012674 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012674:	b480      	push	{r7}
 8012676:	b085      	sub	sp, #20
 8012678:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801267a:	2300      	movs	r3, #0
 801267c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801267e:	4b14      	ldr	r3, [pc, #80]	; (80126d0 <prvTaskExitError+0x5c>)
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012686:	d00c      	beq.n	80126a2 <prvTaskExitError+0x2e>
	__asm volatile
 8012688:	f04f 0350 	mov.w	r3, #80	; 0x50
 801268c:	b672      	cpsid	i
 801268e:	f383 8811 	msr	BASEPRI, r3
 8012692:	f3bf 8f6f 	isb	sy
 8012696:	f3bf 8f4f 	dsb	sy
 801269a:	b662      	cpsie	i
 801269c:	60fb      	str	r3, [r7, #12]
}
 801269e:	bf00      	nop
 80126a0:	e7fe      	b.n	80126a0 <prvTaskExitError+0x2c>
	__asm volatile
 80126a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126a6:	b672      	cpsid	i
 80126a8:	f383 8811 	msr	BASEPRI, r3
 80126ac:	f3bf 8f6f 	isb	sy
 80126b0:	f3bf 8f4f 	dsb	sy
 80126b4:	b662      	cpsie	i
 80126b6:	60bb      	str	r3, [r7, #8]
}
 80126b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80126ba:	bf00      	nop
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d0fc      	beq.n	80126bc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80126c2:	bf00      	nop
 80126c4:	bf00      	nop
 80126c6:	3714      	adds	r7, #20
 80126c8:	46bd      	mov	sp, r7
 80126ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ce:	4770      	bx	lr
 80126d0:	20000024 	.word	0x20000024
	...

080126e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80126e0:	4b07      	ldr	r3, [pc, #28]	; (8012700 <pxCurrentTCBConst2>)
 80126e2:	6819      	ldr	r1, [r3, #0]
 80126e4:	6808      	ldr	r0, [r1, #0]
 80126e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126ea:	f380 8809 	msr	PSP, r0
 80126ee:	f3bf 8f6f 	isb	sy
 80126f2:	f04f 0000 	mov.w	r0, #0
 80126f6:	f380 8811 	msr	BASEPRI, r0
 80126fa:	4770      	bx	lr
 80126fc:	f3af 8000 	nop.w

08012700 <pxCurrentTCBConst2>:
 8012700:	200000e8 	.word	0x200000e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012704:	bf00      	nop
 8012706:	bf00      	nop

08012708 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012708:	4808      	ldr	r0, [pc, #32]	; (801272c <prvPortStartFirstTask+0x24>)
 801270a:	6800      	ldr	r0, [r0, #0]
 801270c:	6800      	ldr	r0, [r0, #0]
 801270e:	f380 8808 	msr	MSP, r0
 8012712:	f04f 0000 	mov.w	r0, #0
 8012716:	f380 8814 	msr	CONTROL, r0
 801271a:	b662      	cpsie	i
 801271c:	b661      	cpsie	f
 801271e:	f3bf 8f4f 	dsb	sy
 8012722:	f3bf 8f6f 	isb	sy
 8012726:	df00      	svc	0
 8012728:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801272a:	bf00      	nop
 801272c:	e000ed08 	.word	0xe000ed08

08012730 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012730:	b580      	push	{r7, lr}
 8012732:	b084      	sub	sp, #16
 8012734:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012736:	4b37      	ldr	r3, [pc, #220]	; (8012814 <xPortStartScheduler+0xe4>)
 8012738:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	781b      	ldrb	r3, [r3, #0]
 801273e:	b2db      	uxtb	r3, r3
 8012740:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	22ff      	movs	r2, #255	; 0xff
 8012746:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	781b      	ldrb	r3, [r3, #0]
 801274c:	b2db      	uxtb	r3, r3
 801274e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012750:	78fb      	ldrb	r3, [r7, #3]
 8012752:	b2db      	uxtb	r3, r3
 8012754:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012758:	b2da      	uxtb	r2, r3
 801275a:	4b2f      	ldr	r3, [pc, #188]	; (8012818 <xPortStartScheduler+0xe8>)
 801275c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801275e:	4b2f      	ldr	r3, [pc, #188]	; (801281c <xPortStartScheduler+0xec>)
 8012760:	2207      	movs	r2, #7
 8012762:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012764:	e009      	b.n	801277a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8012766:	4b2d      	ldr	r3, [pc, #180]	; (801281c <xPortStartScheduler+0xec>)
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	3b01      	subs	r3, #1
 801276c:	4a2b      	ldr	r2, [pc, #172]	; (801281c <xPortStartScheduler+0xec>)
 801276e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012770:	78fb      	ldrb	r3, [r7, #3]
 8012772:	b2db      	uxtb	r3, r3
 8012774:	005b      	lsls	r3, r3, #1
 8012776:	b2db      	uxtb	r3, r3
 8012778:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801277a:	78fb      	ldrb	r3, [r7, #3]
 801277c:	b2db      	uxtb	r3, r3
 801277e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012782:	2b80      	cmp	r3, #128	; 0x80
 8012784:	d0ef      	beq.n	8012766 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012786:	4b25      	ldr	r3, [pc, #148]	; (801281c <xPortStartScheduler+0xec>)
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	f1c3 0307 	rsb	r3, r3, #7
 801278e:	2b04      	cmp	r3, #4
 8012790:	d00c      	beq.n	80127ac <xPortStartScheduler+0x7c>
	__asm volatile
 8012792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012796:	b672      	cpsid	i
 8012798:	f383 8811 	msr	BASEPRI, r3
 801279c:	f3bf 8f6f 	isb	sy
 80127a0:	f3bf 8f4f 	dsb	sy
 80127a4:	b662      	cpsie	i
 80127a6:	60bb      	str	r3, [r7, #8]
}
 80127a8:	bf00      	nop
 80127aa:	e7fe      	b.n	80127aa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80127ac:	4b1b      	ldr	r3, [pc, #108]	; (801281c <xPortStartScheduler+0xec>)
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	021b      	lsls	r3, r3, #8
 80127b2:	4a1a      	ldr	r2, [pc, #104]	; (801281c <xPortStartScheduler+0xec>)
 80127b4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80127b6:	4b19      	ldr	r3, [pc, #100]	; (801281c <xPortStartScheduler+0xec>)
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80127be:	4a17      	ldr	r2, [pc, #92]	; (801281c <xPortStartScheduler+0xec>)
 80127c0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	b2da      	uxtb	r2, r3
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80127ca:	4b15      	ldr	r3, [pc, #84]	; (8012820 <xPortStartScheduler+0xf0>)
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	4a14      	ldr	r2, [pc, #80]	; (8012820 <xPortStartScheduler+0xf0>)
 80127d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80127d4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80127d6:	4b12      	ldr	r3, [pc, #72]	; (8012820 <xPortStartScheduler+0xf0>)
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	4a11      	ldr	r2, [pc, #68]	; (8012820 <xPortStartScheduler+0xf0>)
 80127dc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80127e0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80127e2:	f000 f8dd 	bl	80129a0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80127e6:	4b0f      	ldr	r3, [pc, #60]	; (8012824 <xPortStartScheduler+0xf4>)
 80127e8:	2200      	movs	r2, #0
 80127ea:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80127ec:	f000 f8fc 	bl	80129e8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80127f0:	4b0d      	ldr	r3, [pc, #52]	; (8012828 <xPortStartScheduler+0xf8>)
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	4a0c      	ldr	r2, [pc, #48]	; (8012828 <xPortStartScheduler+0xf8>)
 80127f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80127fa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80127fc:	f7ff ff84 	bl	8012708 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012800:	f7ff fa66 	bl	8011cd0 <vTaskSwitchContext>
	prvTaskExitError();
 8012804:	f7ff ff36 	bl	8012674 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012808:	2300      	movs	r3, #0
}
 801280a:	4618      	mov	r0, r3
 801280c:	3710      	adds	r7, #16
 801280e:	46bd      	mov	sp, r7
 8012810:	bd80      	pop	{r7, pc}
 8012812:	bf00      	nop
 8012814:	e000e400 	.word	0xe000e400
 8012818:	20000214 	.word	0x20000214
 801281c:	20000218 	.word	0x20000218
 8012820:	e000ed20 	.word	0xe000ed20
 8012824:	20000024 	.word	0x20000024
 8012828:	e000ef34 	.word	0xe000ef34

0801282c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801282c:	b480      	push	{r7}
 801282e:	b083      	sub	sp, #12
 8012830:	af00      	add	r7, sp, #0
	__asm volatile
 8012832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012836:	b672      	cpsid	i
 8012838:	f383 8811 	msr	BASEPRI, r3
 801283c:	f3bf 8f6f 	isb	sy
 8012840:	f3bf 8f4f 	dsb	sy
 8012844:	b662      	cpsie	i
 8012846:	607b      	str	r3, [r7, #4]
}
 8012848:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801284a:	4b10      	ldr	r3, [pc, #64]	; (801288c <vPortEnterCritical+0x60>)
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	3301      	adds	r3, #1
 8012850:	4a0e      	ldr	r2, [pc, #56]	; (801288c <vPortEnterCritical+0x60>)
 8012852:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012854:	4b0d      	ldr	r3, [pc, #52]	; (801288c <vPortEnterCritical+0x60>)
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	2b01      	cmp	r3, #1
 801285a:	d111      	bne.n	8012880 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801285c:	4b0c      	ldr	r3, [pc, #48]	; (8012890 <vPortEnterCritical+0x64>)
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	b2db      	uxtb	r3, r3
 8012862:	2b00      	cmp	r3, #0
 8012864:	d00c      	beq.n	8012880 <vPortEnterCritical+0x54>
	__asm volatile
 8012866:	f04f 0350 	mov.w	r3, #80	; 0x50
 801286a:	b672      	cpsid	i
 801286c:	f383 8811 	msr	BASEPRI, r3
 8012870:	f3bf 8f6f 	isb	sy
 8012874:	f3bf 8f4f 	dsb	sy
 8012878:	b662      	cpsie	i
 801287a:	603b      	str	r3, [r7, #0]
}
 801287c:	bf00      	nop
 801287e:	e7fe      	b.n	801287e <vPortEnterCritical+0x52>
	}
}
 8012880:	bf00      	nop
 8012882:	370c      	adds	r7, #12
 8012884:	46bd      	mov	sp, r7
 8012886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801288a:	4770      	bx	lr
 801288c:	20000024 	.word	0x20000024
 8012890:	e000ed04 	.word	0xe000ed04

08012894 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012894:	b480      	push	{r7}
 8012896:	b083      	sub	sp, #12
 8012898:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801289a:	4b13      	ldr	r3, [pc, #76]	; (80128e8 <vPortExitCritical+0x54>)
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d10c      	bne.n	80128bc <vPortExitCritical+0x28>
	__asm volatile
 80128a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128a6:	b672      	cpsid	i
 80128a8:	f383 8811 	msr	BASEPRI, r3
 80128ac:	f3bf 8f6f 	isb	sy
 80128b0:	f3bf 8f4f 	dsb	sy
 80128b4:	b662      	cpsie	i
 80128b6:	607b      	str	r3, [r7, #4]
}
 80128b8:	bf00      	nop
 80128ba:	e7fe      	b.n	80128ba <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80128bc:	4b0a      	ldr	r3, [pc, #40]	; (80128e8 <vPortExitCritical+0x54>)
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	3b01      	subs	r3, #1
 80128c2:	4a09      	ldr	r2, [pc, #36]	; (80128e8 <vPortExitCritical+0x54>)
 80128c4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80128c6:	4b08      	ldr	r3, [pc, #32]	; (80128e8 <vPortExitCritical+0x54>)
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d105      	bne.n	80128da <vPortExitCritical+0x46>
 80128ce:	2300      	movs	r3, #0
 80128d0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80128d2:	683b      	ldr	r3, [r7, #0]
 80128d4:	f383 8811 	msr	BASEPRI, r3
}
 80128d8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80128da:	bf00      	nop
 80128dc:	370c      	adds	r7, #12
 80128de:	46bd      	mov	sp, r7
 80128e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e4:	4770      	bx	lr
 80128e6:	bf00      	nop
 80128e8:	20000024 	.word	0x20000024
 80128ec:	00000000 	.word	0x00000000

080128f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80128f0:	f3ef 8009 	mrs	r0, PSP
 80128f4:	f3bf 8f6f 	isb	sy
 80128f8:	4b15      	ldr	r3, [pc, #84]	; (8012950 <pxCurrentTCBConst>)
 80128fa:	681a      	ldr	r2, [r3, #0]
 80128fc:	f01e 0f10 	tst.w	lr, #16
 8012900:	bf08      	it	eq
 8012902:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012906:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801290a:	6010      	str	r0, [r2, #0]
 801290c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012910:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012914:	b672      	cpsid	i
 8012916:	f380 8811 	msr	BASEPRI, r0
 801291a:	f3bf 8f4f 	dsb	sy
 801291e:	f3bf 8f6f 	isb	sy
 8012922:	b662      	cpsie	i
 8012924:	f7ff f9d4 	bl	8011cd0 <vTaskSwitchContext>
 8012928:	f04f 0000 	mov.w	r0, #0
 801292c:	f380 8811 	msr	BASEPRI, r0
 8012930:	bc09      	pop	{r0, r3}
 8012932:	6819      	ldr	r1, [r3, #0]
 8012934:	6808      	ldr	r0, [r1, #0]
 8012936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801293a:	f01e 0f10 	tst.w	lr, #16
 801293e:	bf08      	it	eq
 8012940:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012944:	f380 8809 	msr	PSP, r0
 8012948:	f3bf 8f6f 	isb	sy
 801294c:	4770      	bx	lr
 801294e:	bf00      	nop

08012950 <pxCurrentTCBConst>:
 8012950:	200000e8 	.word	0x200000e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012954:	bf00      	nop
 8012956:	bf00      	nop

08012958 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b082      	sub	sp, #8
 801295c:	af00      	add	r7, sp, #0
	__asm volatile
 801295e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012962:	b672      	cpsid	i
 8012964:	f383 8811 	msr	BASEPRI, r3
 8012968:	f3bf 8f6f 	isb	sy
 801296c:	f3bf 8f4f 	dsb	sy
 8012970:	b662      	cpsie	i
 8012972:	607b      	str	r3, [r7, #4]
}
 8012974:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012976:	f7ff f8eb 	bl	8011b50 <xTaskIncrementTick>
 801297a:	4603      	mov	r3, r0
 801297c:	2b00      	cmp	r3, #0
 801297e:	d003      	beq.n	8012988 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012980:	4b06      	ldr	r3, [pc, #24]	; (801299c <SysTick_Handler+0x44>)
 8012982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012986:	601a      	str	r2, [r3, #0]
 8012988:	2300      	movs	r3, #0
 801298a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801298c:	683b      	ldr	r3, [r7, #0]
 801298e:	f383 8811 	msr	BASEPRI, r3
}
 8012992:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012994:	bf00      	nop
 8012996:	3708      	adds	r7, #8
 8012998:	46bd      	mov	sp, r7
 801299a:	bd80      	pop	{r7, pc}
 801299c:	e000ed04 	.word	0xe000ed04

080129a0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80129a0:	b480      	push	{r7}
 80129a2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80129a4:	4b0b      	ldr	r3, [pc, #44]	; (80129d4 <vPortSetupTimerInterrupt+0x34>)
 80129a6:	2200      	movs	r2, #0
 80129a8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80129aa:	4b0b      	ldr	r3, [pc, #44]	; (80129d8 <vPortSetupTimerInterrupt+0x38>)
 80129ac:	2200      	movs	r2, #0
 80129ae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80129b0:	4b0a      	ldr	r3, [pc, #40]	; (80129dc <vPortSetupTimerInterrupt+0x3c>)
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	4a0a      	ldr	r2, [pc, #40]	; (80129e0 <vPortSetupTimerInterrupt+0x40>)
 80129b6:	fba2 2303 	umull	r2, r3, r2, r3
 80129ba:	099b      	lsrs	r3, r3, #6
 80129bc:	4a09      	ldr	r2, [pc, #36]	; (80129e4 <vPortSetupTimerInterrupt+0x44>)
 80129be:	3b01      	subs	r3, #1
 80129c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80129c2:	4b04      	ldr	r3, [pc, #16]	; (80129d4 <vPortSetupTimerInterrupt+0x34>)
 80129c4:	2207      	movs	r2, #7
 80129c6:	601a      	str	r2, [r3, #0]
}
 80129c8:	bf00      	nop
 80129ca:	46bd      	mov	sp, r7
 80129cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d0:	4770      	bx	lr
 80129d2:	bf00      	nop
 80129d4:	e000e010 	.word	0xe000e010
 80129d8:	e000e018 	.word	0xe000e018
 80129dc:	2000002c 	.word	0x2000002c
 80129e0:	10624dd3 	.word	0x10624dd3
 80129e4:	e000e014 	.word	0xe000e014

080129e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80129e8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80129f8 <vPortEnableVFP+0x10>
 80129ec:	6801      	ldr	r1, [r0, #0]
 80129ee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80129f2:	6001      	str	r1, [r0, #0]
 80129f4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80129f6:	bf00      	nop
 80129f8:	e000ed88 	.word	0xe000ed88

080129fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80129fc:	b480      	push	{r7}
 80129fe:	b085      	sub	sp, #20
 8012a00:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012a02:	f3ef 8305 	mrs	r3, IPSR
 8012a06:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	2b0f      	cmp	r3, #15
 8012a0c:	d916      	bls.n	8012a3c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012a0e:	4a19      	ldr	r2, [pc, #100]	; (8012a74 <vPortValidateInterruptPriority+0x78>)
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	4413      	add	r3, r2
 8012a14:	781b      	ldrb	r3, [r3, #0]
 8012a16:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012a18:	4b17      	ldr	r3, [pc, #92]	; (8012a78 <vPortValidateInterruptPriority+0x7c>)
 8012a1a:	781b      	ldrb	r3, [r3, #0]
 8012a1c:	7afa      	ldrb	r2, [r7, #11]
 8012a1e:	429a      	cmp	r2, r3
 8012a20:	d20c      	bcs.n	8012a3c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8012a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a26:	b672      	cpsid	i
 8012a28:	f383 8811 	msr	BASEPRI, r3
 8012a2c:	f3bf 8f6f 	isb	sy
 8012a30:	f3bf 8f4f 	dsb	sy
 8012a34:	b662      	cpsie	i
 8012a36:	607b      	str	r3, [r7, #4]
}
 8012a38:	bf00      	nop
 8012a3a:	e7fe      	b.n	8012a3a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012a3c:	4b0f      	ldr	r3, [pc, #60]	; (8012a7c <vPortValidateInterruptPriority+0x80>)
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012a44:	4b0e      	ldr	r3, [pc, #56]	; (8012a80 <vPortValidateInterruptPriority+0x84>)
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	429a      	cmp	r2, r3
 8012a4a:	d90c      	bls.n	8012a66 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8012a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a50:	b672      	cpsid	i
 8012a52:	f383 8811 	msr	BASEPRI, r3
 8012a56:	f3bf 8f6f 	isb	sy
 8012a5a:	f3bf 8f4f 	dsb	sy
 8012a5e:	b662      	cpsie	i
 8012a60:	603b      	str	r3, [r7, #0]
}
 8012a62:	bf00      	nop
 8012a64:	e7fe      	b.n	8012a64 <vPortValidateInterruptPriority+0x68>
	}
 8012a66:	bf00      	nop
 8012a68:	3714      	adds	r7, #20
 8012a6a:	46bd      	mov	sp, r7
 8012a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a70:	4770      	bx	lr
 8012a72:	bf00      	nop
 8012a74:	e000e3f0 	.word	0xe000e3f0
 8012a78:	20000214 	.word	0x20000214
 8012a7c:	e000ed0c 	.word	0xe000ed0c
 8012a80:	20000218 	.word	0x20000218

08012a84 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012a84:	b580      	push	{r7, lr}
 8012a86:	b08a      	sub	sp, #40	; 0x28
 8012a88:	af00      	add	r7, sp, #0
 8012a8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012a8c:	2300      	movs	r3, #0
 8012a8e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012a90:	f7fe ff90 	bl	80119b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012a94:	4b5e      	ldr	r3, [pc, #376]	; (8012c10 <pvPortMalloc+0x18c>)
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d101      	bne.n	8012aa0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012a9c:	f000 f920 	bl	8012ce0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012aa0:	4b5c      	ldr	r3, [pc, #368]	; (8012c14 <pvPortMalloc+0x190>)
 8012aa2:	681a      	ldr	r2, [r3, #0]
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	4013      	ands	r3, r2
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	f040 8092 	bne.w	8012bd2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d01f      	beq.n	8012af4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8012ab4:	2208      	movs	r2, #8
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	4413      	add	r3, r2
 8012aba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	f003 0307 	and.w	r3, r3, #7
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d016      	beq.n	8012af4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	f023 0307 	bic.w	r3, r3, #7
 8012acc:	3308      	adds	r3, #8
 8012ace:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	f003 0307 	and.w	r3, r3, #7
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d00c      	beq.n	8012af4 <pvPortMalloc+0x70>
	__asm volatile
 8012ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ade:	b672      	cpsid	i
 8012ae0:	f383 8811 	msr	BASEPRI, r3
 8012ae4:	f3bf 8f6f 	isb	sy
 8012ae8:	f3bf 8f4f 	dsb	sy
 8012aec:	b662      	cpsie	i
 8012aee:	617b      	str	r3, [r7, #20]
}
 8012af0:	bf00      	nop
 8012af2:	e7fe      	b.n	8012af2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d06b      	beq.n	8012bd2 <pvPortMalloc+0x14e>
 8012afa:	4b47      	ldr	r3, [pc, #284]	; (8012c18 <pvPortMalloc+0x194>)
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	687a      	ldr	r2, [r7, #4]
 8012b00:	429a      	cmp	r2, r3
 8012b02:	d866      	bhi.n	8012bd2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012b04:	4b45      	ldr	r3, [pc, #276]	; (8012c1c <pvPortMalloc+0x198>)
 8012b06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012b08:	4b44      	ldr	r3, [pc, #272]	; (8012c1c <pvPortMalloc+0x198>)
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012b0e:	e004      	b.n	8012b1a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8012b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b1c:	685b      	ldr	r3, [r3, #4]
 8012b1e:	687a      	ldr	r2, [r7, #4]
 8012b20:	429a      	cmp	r2, r3
 8012b22:	d903      	bls.n	8012b2c <pvPortMalloc+0xa8>
 8012b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d1f1      	bne.n	8012b10 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012b2c:	4b38      	ldr	r3, [pc, #224]	; (8012c10 <pvPortMalloc+0x18c>)
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b32:	429a      	cmp	r2, r3
 8012b34:	d04d      	beq.n	8012bd2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012b36:	6a3b      	ldr	r3, [r7, #32]
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	2208      	movs	r2, #8
 8012b3c:	4413      	add	r3, r2
 8012b3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b42:	681a      	ldr	r2, [r3, #0]
 8012b44:	6a3b      	ldr	r3, [r7, #32]
 8012b46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b4a:	685a      	ldr	r2, [r3, #4]
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	1ad2      	subs	r2, r2, r3
 8012b50:	2308      	movs	r3, #8
 8012b52:	005b      	lsls	r3, r3, #1
 8012b54:	429a      	cmp	r2, r3
 8012b56:	d921      	bls.n	8012b9c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	4413      	add	r3, r2
 8012b5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012b60:	69bb      	ldr	r3, [r7, #24]
 8012b62:	f003 0307 	and.w	r3, r3, #7
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d00c      	beq.n	8012b84 <pvPortMalloc+0x100>
	__asm volatile
 8012b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b6e:	b672      	cpsid	i
 8012b70:	f383 8811 	msr	BASEPRI, r3
 8012b74:	f3bf 8f6f 	isb	sy
 8012b78:	f3bf 8f4f 	dsb	sy
 8012b7c:	b662      	cpsie	i
 8012b7e:	613b      	str	r3, [r7, #16]
}
 8012b80:	bf00      	nop
 8012b82:	e7fe      	b.n	8012b82 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b86:	685a      	ldr	r2, [r3, #4]
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	1ad2      	subs	r2, r2, r3
 8012b8c:	69bb      	ldr	r3, [r7, #24]
 8012b8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b92:	687a      	ldr	r2, [r7, #4]
 8012b94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012b96:	69b8      	ldr	r0, [r7, #24]
 8012b98:	f000 f904 	bl	8012da4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012b9c:	4b1e      	ldr	r3, [pc, #120]	; (8012c18 <pvPortMalloc+0x194>)
 8012b9e:	681a      	ldr	r2, [r3, #0]
 8012ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ba2:	685b      	ldr	r3, [r3, #4]
 8012ba4:	1ad3      	subs	r3, r2, r3
 8012ba6:	4a1c      	ldr	r2, [pc, #112]	; (8012c18 <pvPortMalloc+0x194>)
 8012ba8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012baa:	4b1b      	ldr	r3, [pc, #108]	; (8012c18 <pvPortMalloc+0x194>)
 8012bac:	681a      	ldr	r2, [r3, #0]
 8012bae:	4b1c      	ldr	r3, [pc, #112]	; (8012c20 <pvPortMalloc+0x19c>)
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	429a      	cmp	r2, r3
 8012bb4:	d203      	bcs.n	8012bbe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012bb6:	4b18      	ldr	r3, [pc, #96]	; (8012c18 <pvPortMalloc+0x194>)
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	4a19      	ldr	r2, [pc, #100]	; (8012c20 <pvPortMalloc+0x19c>)
 8012bbc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bc0:	685a      	ldr	r2, [r3, #4]
 8012bc2:	4b14      	ldr	r3, [pc, #80]	; (8012c14 <pvPortMalloc+0x190>)
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	431a      	orrs	r2, r3
 8012bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bce:	2200      	movs	r2, #0
 8012bd0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012bd2:	f7fe fefd 	bl	80119d0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8012bd6:	69fb      	ldr	r3, [r7, #28]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d101      	bne.n	8012be0 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8012bdc:	f000 fa2e 	bl	801303c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012be0:	69fb      	ldr	r3, [r7, #28]
 8012be2:	f003 0307 	and.w	r3, r3, #7
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d00c      	beq.n	8012c04 <pvPortMalloc+0x180>
	__asm volatile
 8012bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bee:	b672      	cpsid	i
 8012bf0:	f383 8811 	msr	BASEPRI, r3
 8012bf4:	f3bf 8f6f 	isb	sy
 8012bf8:	f3bf 8f4f 	dsb	sy
 8012bfc:	b662      	cpsie	i
 8012bfe:	60fb      	str	r3, [r7, #12]
}
 8012c00:	bf00      	nop
 8012c02:	e7fe      	b.n	8012c02 <pvPortMalloc+0x17e>
	return pvReturn;
 8012c04:	69fb      	ldr	r3, [r7, #28]
}
 8012c06:	4618      	mov	r0, r3
 8012c08:	3728      	adds	r7, #40	; 0x28
 8012c0a:	46bd      	mov	sp, r7
 8012c0c:	bd80      	pop	{r7, pc}
 8012c0e:	bf00      	nop
 8012c10:	20010224 	.word	0x20010224
 8012c14:	20010230 	.word	0x20010230
 8012c18:	20010228 	.word	0x20010228
 8012c1c:	2001021c 	.word	0x2001021c
 8012c20:	2001022c 	.word	0x2001022c

08012c24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012c24:	b580      	push	{r7, lr}
 8012c26:	b086      	sub	sp, #24
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d04c      	beq.n	8012cd0 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012c36:	2308      	movs	r3, #8
 8012c38:	425b      	negs	r3, r3
 8012c3a:	697a      	ldr	r2, [r7, #20]
 8012c3c:	4413      	add	r3, r2
 8012c3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012c40:	697b      	ldr	r3, [r7, #20]
 8012c42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012c44:	693b      	ldr	r3, [r7, #16]
 8012c46:	685a      	ldr	r2, [r3, #4]
 8012c48:	4b23      	ldr	r3, [pc, #140]	; (8012cd8 <vPortFree+0xb4>)
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	4013      	ands	r3, r2
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d10c      	bne.n	8012c6c <vPortFree+0x48>
	__asm volatile
 8012c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c56:	b672      	cpsid	i
 8012c58:	f383 8811 	msr	BASEPRI, r3
 8012c5c:	f3bf 8f6f 	isb	sy
 8012c60:	f3bf 8f4f 	dsb	sy
 8012c64:	b662      	cpsie	i
 8012c66:	60fb      	str	r3, [r7, #12]
}
 8012c68:	bf00      	nop
 8012c6a:	e7fe      	b.n	8012c6a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012c6c:	693b      	ldr	r3, [r7, #16]
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d00c      	beq.n	8012c8e <vPortFree+0x6a>
	__asm volatile
 8012c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c78:	b672      	cpsid	i
 8012c7a:	f383 8811 	msr	BASEPRI, r3
 8012c7e:	f3bf 8f6f 	isb	sy
 8012c82:	f3bf 8f4f 	dsb	sy
 8012c86:	b662      	cpsie	i
 8012c88:	60bb      	str	r3, [r7, #8]
}
 8012c8a:	bf00      	nop
 8012c8c:	e7fe      	b.n	8012c8c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012c8e:	693b      	ldr	r3, [r7, #16]
 8012c90:	685a      	ldr	r2, [r3, #4]
 8012c92:	4b11      	ldr	r3, [pc, #68]	; (8012cd8 <vPortFree+0xb4>)
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	4013      	ands	r3, r2
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d019      	beq.n	8012cd0 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012c9c:	693b      	ldr	r3, [r7, #16]
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d115      	bne.n	8012cd0 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012ca4:	693b      	ldr	r3, [r7, #16]
 8012ca6:	685a      	ldr	r2, [r3, #4]
 8012ca8:	4b0b      	ldr	r3, [pc, #44]	; (8012cd8 <vPortFree+0xb4>)
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	43db      	mvns	r3, r3
 8012cae:	401a      	ands	r2, r3
 8012cb0:	693b      	ldr	r3, [r7, #16]
 8012cb2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012cb4:	f7fe fe7e 	bl	80119b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012cb8:	693b      	ldr	r3, [r7, #16]
 8012cba:	685a      	ldr	r2, [r3, #4]
 8012cbc:	4b07      	ldr	r3, [pc, #28]	; (8012cdc <vPortFree+0xb8>)
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	4413      	add	r3, r2
 8012cc2:	4a06      	ldr	r2, [pc, #24]	; (8012cdc <vPortFree+0xb8>)
 8012cc4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012cc6:	6938      	ldr	r0, [r7, #16]
 8012cc8:	f000 f86c 	bl	8012da4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8012ccc:	f7fe fe80 	bl	80119d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012cd0:	bf00      	nop
 8012cd2:	3718      	adds	r7, #24
 8012cd4:	46bd      	mov	sp, r7
 8012cd6:	bd80      	pop	{r7, pc}
 8012cd8:	20010230 	.word	0x20010230
 8012cdc:	20010228 	.word	0x20010228

08012ce0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012ce0:	b480      	push	{r7}
 8012ce2:	b085      	sub	sp, #20
 8012ce4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012ce6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8012cea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012cec:	4b27      	ldr	r3, [pc, #156]	; (8012d8c <prvHeapInit+0xac>)
 8012cee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	f003 0307 	and.w	r3, r3, #7
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d00c      	beq.n	8012d14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	3307      	adds	r3, #7
 8012cfe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	f023 0307 	bic.w	r3, r3, #7
 8012d06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012d08:	68ba      	ldr	r2, [r7, #8]
 8012d0a:	68fb      	ldr	r3, [r7, #12]
 8012d0c:	1ad3      	subs	r3, r2, r3
 8012d0e:	4a1f      	ldr	r2, [pc, #124]	; (8012d8c <prvHeapInit+0xac>)
 8012d10:	4413      	add	r3, r2
 8012d12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012d18:	4a1d      	ldr	r2, [pc, #116]	; (8012d90 <prvHeapInit+0xb0>)
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012d1e:	4b1c      	ldr	r3, [pc, #112]	; (8012d90 <prvHeapInit+0xb0>)
 8012d20:	2200      	movs	r2, #0
 8012d22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	68ba      	ldr	r2, [r7, #8]
 8012d28:	4413      	add	r3, r2
 8012d2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012d2c:	2208      	movs	r2, #8
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	1a9b      	subs	r3, r3, r2
 8012d32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	f023 0307 	bic.w	r3, r3, #7
 8012d3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	4a15      	ldr	r2, [pc, #84]	; (8012d94 <prvHeapInit+0xb4>)
 8012d40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012d42:	4b14      	ldr	r3, [pc, #80]	; (8012d94 <prvHeapInit+0xb4>)
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	2200      	movs	r2, #0
 8012d48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012d4a:	4b12      	ldr	r3, [pc, #72]	; (8012d94 <prvHeapInit+0xb4>)
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	2200      	movs	r2, #0
 8012d50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012d56:	683b      	ldr	r3, [r7, #0]
 8012d58:	68fa      	ldr	r2, [r7, #12]
 8012d5a:	1ad2      	subs	r2, r2, r3
 8012d5c:	683b      	ldr	r3, [r7, #0]
 8012d5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012d60:	4b0c      	ldr	r3, [pc, #48]	; (8012d94 <prvHeapInit+0xb4>)
 8012d62:	681a      	ldr	r2, [r3, #0]
 8012d64:	683b      	ldr	r3, [r7, #0]
 8012d66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012d68:	683b      	ldr	r3, [r7, #0]
 8012d6a:	685b      	ldr	r3, [r3, #4]
 8012d6c:	4a0a      	ldr	r2, [pc, #40]	; (8012d98 <prvHeapInit+0xb8>)
 8012d6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012d70:	683b      	ldr	r3, [r7, #0]
 8012d72:	685b      	ldr	r3, [r3, #4]
 8012d74:	4a09      	ldr	r2, [pc, #36]	; (8012d9c <prvHeapInit+0xbc>)
 8012d76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012d78:	4b09      	ldr	r3, [pc, #36]	; (8012da0 <prvHeapInit+0xc0>)
 8012d7a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012d7e:	601a      	str	r2, [r3, #0]
}
 8012d80:	bf00      	nop
 8012d82:	3714      	adds	r7, #20
 8012d84:	46bd      	mov	sp, r7
 8012d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d8a:	4770      	bx	lr
 8012d8c:	2000021c 	.word	0x2000021c
 8012d90:	2001021c 	.word	0x2001021c
 8012d94:	20010224 	.word	0x20010224
 8012d98:	2001022c 	.word	0x2001022c
 8012d9c:	20010228 	.word	0x20010228
 8012da0:	20010230 	.word	0x20010230

08012da4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012da4:	b480      	push	{r7}
 8012da6:	b085      	sub	sp, #20
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012dac:	4b28      	ldr	r3, [pc, #160]	; (8012e50 <prvInsertBlockIntoFreeList+0xac>)
 8012dae:	60fb      	str	r3, [r7, #12]
 8012db0:	e002      	b.n	8012db8 <prvInsertBlockIntoFreeList+0x14>
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	60fb      	str	r3, [r7, #12]
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	687a      	ldr	r2, [r7, #4]
 8012dbe:	429a      	cmp	r2, r3
 8012dc0:	d8f7      	bhi.n	8012db2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	685b      	ldr	r3, [r3, #4]
 8012dca:	68ba      	ldr	r2, [r7, #8]
 8012dcc:	4413      	add	r3, r2
 8012dce:	687a      	ldr	r2, [r7, #4]
 8012dd0:	429a      	cmp	r2, r3
 8012dd2:	d108      	bne.n	8012de6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	685a      	ldr	r2, [r3, #4]
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	685b      	ldr	r3, [r3, #4]
 8012ddc:	441a      	add	r2, r3
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	685b      	ldr	r3, [r3, #4]
 8012dee:	68ba      	ldr	r2, [r7, #8]
 8012df0:	441a      	add	r2, r3
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	429a      	cmp	r2, r3
 8012df8:	d118      	bne.n	8012e2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	681a      	ldr	r2, [r3, #0]
 8012dfe:	4b15      	ldr	r3, [pc, #84]	; (8012e54 <prvInsertBlockIntoFreeList+0xb0>)
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	429a      	cmp	r2, r3
 8012e04:	d00d      	beq.n	8012e22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	685a      	ldr	r2, [r3, #4]
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	685b      	ldr	r3, [r3, #4]
 8012e10:	441a      	add	r2, r3
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	681a      	ldr	r2, [r3, #0]
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	601a      	str	r2, [r3, #0]
 8012e20:	e008      	b.n	8012e34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012e22:	4b0c      	ldr	r3, [pc, #48]	; (8012e54 <prvInsertBlockIntoFreeList+0xb0>)
 8012e24:	681a      	ldr	r2, [r3, #0]
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	601a      	str	r2, [r3, #0]
 8012e2a:	e003      	b.n	8012e34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	681a      	ldr	r2, [r3, #0]
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012e34:	68fa      	ldr	r2, [r7, #12]
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	429a      	cmp	r2, r3
 8012e3a:	d002      	beq.n	8012e42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	687a      	ldr	r2, [r7, #4]
 8012e40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012e42:	bf00      	nop
 8012e44:	3714      	adds	r7, #20
 8012e46:	46bd      	mov	sp, r7
 8012e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e4c:	4770      	bx	lr
 8012e4e:	bf00      	nop
 8012e50:	2001021c 	.word	0x2001021c
 8012e54:	20010224 	.word	0x20010224

08012e58 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8012e58:	b580      	push	{r7, lr}
 8012e5a:	b082      	sub	sp, #8
 8012e5c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8012e5e:	2300      	movs	r3, #0
 8012e60:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8012e62:	f000 f896 	bl	8012f92 <BSP_SD_IsDetected>
 8012e66:	4603      	mov	r3, r0
 8012e68:	2b01      	cmp	r3, #1
 8012e6a:	d001      	beq.n	8012e70 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8012e6c:	2302      	movs	r3, #2
 8012e6e:	e012      	b.n	8012e96 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8012e70:	480b      	ldr	r0, [pc, #44]	; (8012ea0 <BSP_SD_Init+0x48>)
 8012e72:	f7f3 f907 	bl	8006084 <HAL_SD_Init>
 8012e76:	4603      	mov	r3, r0
 8012e78:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8012e7a:	79fb      	ldrb	r3, [r7, #7]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d109      	bne.n	8012e94 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8012e80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8012e84:	4806      	ldr	r0, [pc, #24]	; (8012ea0 <BSP_SD_Init+0x48>)
 8012e86:	f7f3 fedb 	bl	8006c40 <HAL_SD_ConfigWideBusOperation>
 8012e8a:	4603      	mov	r3, r0
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d001      	beq.n	8012e94 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8012e90:	2301      	movs	r3, #1
 8012e92:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8012e94:	79fb      	ldrb	r3, [r7, #7]
}
 8012e96:	4618      	mov	r0, r3
 8012e98:	3708      	adds	r7, #8
 8012e9a:	46bd      	mov	sp, r7
 8012e9c:	bd80      	pop	{r7, pc}
 8012e9e:	bf00      	nop
 8012ea0:	20010b68 	.word	0x20010b68

08012ea4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8012ea4:	b580      	push	{r7, lr}
 8012ea6:	b086      	sub	sp, #24
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	60f8      	str	r0, [r7, #12]
 8012eac:	60b9      	str	r1, [r7, #8]
 8012eae:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012eb0:	2300      	movs	r3, #0
 8012eb2:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	68ba      	ldr	r2, [r7, #8]
 8012eb8:	68f9      	ldr	r1, [r7, #12]
 8012eba:	4806      	ldr	r0, [pc, #24]	; (8012ed4 <BSP_SD_ReadBlocks_DMA+0x30>)
 8012ebc:	f7f3 f972 	bl	80061a4 <HAL_SD_ReadBlocks_DMA>
 8012ec0:	4603      	mov	r3, r0
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d001      	beq.n	8012eca <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012ec6:	2301      	movs	r3, #1
 8012ec8:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8012eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ecc:	4618      	mov	r0, r3
 8012ece:	3718      	adds	r7, #24
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	bd80      	pop	{r7, pc}
 8012ed4:	20010b68 	.word	0x20010b68

08012ed8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8012ed8:	b580      	push	{r7, lr}
 8012eda:	b086      	sub	sp, #24
 8012edc:	af00      	add	r7, sp, #0
 8012ede:	60f8      	str	r0, [r7, #12]
 8012ee0:	60b9      	str	r1, [r7, #8]
 8012ee2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012ee4:	2300      	movs	r3, #0
 8012ee6:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	68ba      	ldr	r2, [r7, #8]
 8012eec:	68f9      	ldr	r1, [r7, #12]
 8012eee:	4806      	ldr	r0, [pc, #24]	; (8012f08 <BSP_SD_WriteBlocks_DMA+0x30>)
 8012ef0:	f7f3 fa26 	bl	8006340 <HAL_SD_WriteBlocks_DMA>
 8012ef4:	4603      	mov	r3, r0
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d001      	beq.n	8012efe <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012efa:	2301      	movs	r3, #1
 8012efc:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8012efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f00:	4618      	mov	r0, r3
 8012f02:	3718      	adds	r7, #24
 8012f04:	46bd      	mov	sp, r7
 8012f06:	bd80      	pop	{r7, pc}
 8012f08:	20010b68 	.word	0x20010b68

08012f0c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8012f0c:	b580      	push	{r7, lr}
 8012f0e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8012f10:	4805      	ldr	r0, [pc, #20]	; (8012f28 <BSP_SD_GetCardState+0x1c>)
 8012f12:	f7f3 ff11 	bl	8006d38 <HAL_SD_GetCardState>
 8012f16:	4603      	mov	r3, r0
 8012f18:	2b04      	cmp	r3, #4
 8012f1a:	bf14      	ite	ne
 8012f1c:	2301      	movne	r3, #1
 8012f1e:	2300      	moveq	r3, #0
 8012f20:	b2db      	uxtb	r3, r3
}
 8012f22:	4618      	mov	r0, r3
 8012f24:	bd80      	pop	{r7, pc}
 8012f26:	bf00      	nop
 8012f28:	20010b68 	.word	0x20010b68

08012f2c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8012f2c:	b580      	push	{r7, lr}
 8012f2e:	b082      	sub	sp, #8
 8012f30:	af00      	add	r7, sp, #0
 8012f32:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8012f34:	6879      	ldr	r1, [r7, #4]
 8012f36:	4803      	ldr	r0, [pc, #12]	; (8012f44 <BSP_SD_GetCardInfo+0x18>)
 8012f38:	f7f3 fe56 	bl	8006be8 <HAL_SD_GetCardInfo>
}
 8012f3c:	bf00      	nop
 8012f3e:	3708      	adds	r7, #8
 8012f40:	46bd      	mov	sp, r7
 8012f42:	bd80      	pop	{r7, pc}
 8012f44:	20010b68 	.word	0x20010b68

08012f48 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b082      	sub	sp, #8
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8012f50:	f000 f818 	bl	8012f84 <BSP_SD_AbortCallback>
}
 8012f54:	bf00      	nop
 8012f56:	3708      	adds	r7, #8
 8012f58:	46bd      	mov	sp, r7
 8012f5a:	bd80      	pop	{r7, pc}

08012f5c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b082      	sub	sp, #8
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8012f64:	f001 ff8c 	bl	8014e80 <BSP_SD_WriteCpltCallback>
}
 8012f68:	bf00      	nop
 8012f6a:	3708      	adds	r7, #8
 8012f6c:	46bd      	mov	sp, r7
 8012f6e:	bd80      	pop	{r7, pc}

08012f70 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012f70:	b580      	push	{r7, lr}
 8012f72:	b082      	sub	sp, #8
 8012f74:	af00      	add	r7, sp, #0
 8012f76:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8012f78:	f001 ff90 	bl	8014e9c <BSP_SD_ReadCpltCallback>
}
 8012f7c:	bf00      	nop
 8012f7e:	3708      	adds	r7, #8
 8012f80:	46bd      	mov	sp, r7
 8012f82:	bd80      	pop	{r7, pc}

08012f84 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 8012f84:	b480      	push	{r7}
 8012f86:	af00      	add	r7, sp, #0

}
 8012f88:	bf00      	nop
 8012f8a:	46bd      	mov	sp, r7
 8012f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f90:	4770      	bx	lr

08012f92 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8012f92:	b580      	push	{r7, lr}
 8012f94:	b082      	sub	sp, #8
 8012f96:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8012f98:	2301      	movs	r3, #1
 8012f9a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8012f9c:	f000 f826 	bl	8012fec <BSP_PlatformIsDetected>
 8012fa0:	4603      	mov	r3, r0
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d101      	bne.n	8012faa <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8012fa6:	2300      	movs	r3, #0
 8012fa8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8012faa:	79fb      	ldrb	r3, [r7, #7]
 8012fac:	b2db      	uxtb	r3, r3
}
 8012fae:	4618      	mov	r0, r3
 8012fb0:	3708      	adds	r7, #8
 8012fb2:	46bd      	mov	sp, r7
 8012fb4:	bd80      	pop	{r7, pc}
	...

08012fb8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8012fbc:	4904      	ldr	r1, [pc, #16]	; (8012fd0 <MX_FATFS_Init+0x18>)
 8012fbe:	4805      	ldr	r0, [pc, #20]	; (8012fd4 <MX_FATFS_Init+0x1c>)
 8012fc0:	f7fd f8fc 	bl	80101bc <FATFS_LinkDriver>
 8012fc4:	4603      	mov	r3, r0
 8012fc6:	461a      	mov	r2, r3
 8012fc8:	4b03      	ldr	r3, [pc, #12]	; (8012fd8 <MX_FATFS_Init+0x20>)
 8012fca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8012fcc:	bf00      	nop
 8012fce:	bd80      	pop	{r7, pc}
 8012fd0:	20010498 	.word	0x20010498
 8012fd4:	08016afc 	.word	0x08016afc
 8012fd8:	20010494 	.word	0x20010494

08012fdc <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8012fdc:	b480      	push	{r7}
 8012fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8012fe0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	46bd      	mov	sp, r7
 8012fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fea:	4770      	bx	lr

08012fec <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8012fec:	b580      	push	{r7, lr}
 8012fee:	b082      	sub	sp, #8
 8012ff0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8012ff2:	2301      	movs	r3, #1
 8012ff4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8012ff6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8012ffa:	4806      	ldr	r0, [pc, #24]	; (8013014 <BSP_PlatformIsDetected+0x28>)
 8012ffc:	f7ee fec4 	bl	8001d88 <HAL_GPIO_ReadPin>
 8013000:	4603      	mov	r3, r0
 8013002:	2b00      	cmp	r3, #0
 8013004:	d001      	beq.n	801300a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8013006:	2300      	movs	r3, #0
 8013008:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 801300a:	79fb      	ldrb	r3, [r7, #7]
}  
 801300c:	4618      	mov	r0, r3
 801300e:	3708      	adds	r7, #8
 8013010:	46bd      	mov	sp, r7
 8013012:	bd80      	pop	{r7, pc}
 8013014:	40020800 	.word	0x40020800

08013018 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8013018:	b480      	push	{r7}
 801301a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 801301c:	bf00      	nop
 801301e:	46bd      	mov	sp, r7
 8013020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013024:	4770      	bx	lr

08013026 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8013026:	b480      	push	{r7}
 8013028:	b083      	sub	sp, #12
 801302a:	af00      	add	r7, sp, #0
 801302c:	6078      	str	r0, [r7, #4]
 801302e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8013030:	bf00      	nop
 8013032:	370c      	adds	r7, #12
 8013034:	46bd      	mov	sp, r7
 8013036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801303a:	4770      	bx	lr

0801303c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 801303c:	b480      	push	{r7}
 801303e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8013040:	bf00      	nop
 8013042:	46bd      	mov	sp, r7
 8013044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013048:	4770      	bx	lr
	...

0801304c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 801304c:	b5b0      	push	{r4, r5, r7, lr}
 801304e:	b098      	sub	sp, #96	; 0x60
 8013050:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8013052:	f7ed fa59 	bl	8000508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8013056:	f000 f8b5 	bl	80131c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 801305a:	f001 f895 	bl	8014188 <MX_GPIO_Init>
  MX_DMA_Init();
 801305e:	f001 f81d 	bl	801409c <MX_DMA_Init>
  MX_ADC3_Init();
 8013062:	f000 f96f 	bl	8013344 <MX_ADC3_Init>
  MX_CRC_Init();
 8013066:	f000 f9bf 	bl	80133e8 <MX_CRC_Init>
  MX_DCMI_Init();
 801306a:	f000 f9df 	bl	801342c <MX_DCMI_Init>
  MX_DMA2D_Init();
 801306e:	f000 fa11 	bl	8013494 <MX_DMA2D_Init>
  MX_FMC_Init();
 8013072:	f001 f839 	bl	80140e8 <MX_FMC_Init>
  MX_I2C1_Init();
 8013076:	f000 fa3f 	bl	80134f8 <MX_I2C1_Init>
  MX_I2C3_Init();
 801307a:	f000 fa7d 	bl	8013578 <MX_I2C3_Init>
  MX_LTDC_Init();
 801307e:	f000 fabb 	bl	80135f8 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8013082:	f000 fb3b 	bl	80136fc <MX_QUADSPI_Init>
  MX_RTC_Init();
 8013086:	f000 fb65 	bl	8013754 <MX_RTC_Init>
  MX_SAI2_Init();
 801308a:	f000 fc0b 	bl	80138a4 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 801308e:	f000 fcb1 	bl	80139f4 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8013092:	f000 fccf 	bl	8013a34 <MX_SPDIFRX_Init>
  MX_TIM1_Init();
 8013096:	f000 fcfd 	bl	8013a94 <MX_TIM1_Init>
  MX_TIM2_Init();
 801309a:	f000 fda7 	bl	8013bec <MX_TIM2_Init>
  MX_TIM3_Init();
 801309e:	f000 fe1b 	bl	8013cd8 <MX_TIM3_Init>
  MX_TIM5_Init();
 80130a2:	f000 fe8f 	bl	8013dc4 <MX_TIM5_Init>
  MX_TIM8_Init();
 80130a6:	f000 ff03 	bl	8013eb0 <MX_TIM8_Init>
  MX_TIM12_Init();
 80130aa:	f000 ff53 	bl	8013f54 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 80130ae:	f000 ff95 	bl	8013fdc <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80130b2:	f000 ffc3 	bl	801403c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  b1PushCounter = 0;
 80130b6:	4b36      	ldr	r3, [pc, #216]	; (8013190 <main+0x144>)
 80130b8:	2200      	movs	r2, #0
 80130ba:	801a      	strh	r2, [r3, #0]
//  buffSel = 0;
  dataIdx = 0;
 80130bc:	4b35      	ldr	r3, [pc, #212]	; (8013194 <main+0x148>)
 80130be:	2200      	movs	r2, #0
 80130c0:	801a      	strh	r2, [r3, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of sdReadBinarySem */
  osSemaphoreDef(sdReadBinarySem);
 80130c2:	2300      	movs	r3, #0
 80130c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  sdReadBinarySemHandle = osSemaphoreCreate(osSemaphore(sdReadBinarySem), 1);
 80130c6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80130ca:	2101      	movs	r1, #1
 80130cc:	4618      	mov	r0, r3
 80130ce:	f7fd f956 	bl	801037e <osSemaphoreCreate>
 80130d2:	4603      	mov	r3, r0
 80130d4:	4a30      	ldr	r2, [pc, #192]	; (8013198 <main+0x14c>)
 80130d6:	6013      	str	r3, [r2, #0]

  /* definition and creation of sdWriteBinarySem */
  osSemaphoreDef(sdWriteBinarySem);
 80130d8:	2300      	movs	r3, #0
 80130da:	65bb      	str	r3, [r7, #88]	; 0x58
  sdWriteBinarySemHandle = osSemaphoreCreate(osSemaphore(sdWriteBinarySem), 1);
 80130dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80130e0:	2101      	movs	r1, #1
 80130e2:	4618      	mov	r0, r3
 80130e4:	f7fd f94b 	bl	801037e <osSemaphoreCreate>
 80130e8:	4603      	mov	r3, r0
 80130ea:	4a2c      	ldr	r2, [pc, #176]	; (801319c <main+0x150>)
 80130ec:	6013      	str	r3, [r2, #0]

  /* definition and creation of sdFormatBinarySem */
  osSemaphoreDef(sdFormatBinarySem);
 80130ee:	2300      	movs	r3, #0
 80130f0:	657b      	str	r3, [r7, #84]	; 0x54
  sdFormatBinarySemHandle = osSemaphoreCreate(osSemaphore(sdFormatBinarySem), 1);
 80130f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80130f6:	2101      	movs	r1, #1
 80130f8:	4618      	mov	r0, r3
 80130fa:	f7fd f940 	bl	801037e <osSemaphoreCreate>
 80130fe:	4603      	mov	r3, r0
 8013100:	4a27      	ldr	r2, [pc, #156]	; (80131a0 <main+0x154>)
 8013102:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8013104:	4b27      	ldr	r3, [pc, #156]	; (80131a4 <main+0x158>)
 8013106:	f107 0440 	add.w	r4, r7, #64	; 0x40
 801310a:	461d      	mov	r5, r3
 801310c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801310e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013110:	682b      	ldr	r3, [r5, #0]
 8013112:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8013114:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013118:	2100      	movs	r1, #0
 801311a:	4618      	mov	r0, r3
 801311c:	f7fd f8f4 	bl	8010308 <osThreadCreate>
 8013120:	4603      	mov	r3, r0
 8013122:	4a21      	ldr	r2, [pc, #132]	; (80131a8 <main+0x15c>)
 8013124:	6013      	str	r3, [r2, #0]

  /* definition and creation of sdReadTask */
  osThreadDef(sdReadTask, StartSdReadTask, osPriorityNormal, 0, 1024);
 8013126:	4b21      	ldr	r3, [pc, #132]	; (80131ac <main+0x160>)
 8013128:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 801312c:	461d      	mov	r5, r3
 801312e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013130:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013132:	682b      	ldr	r3, [r5, #0]
 8013134:	6023      	str	r3, [r4, #0]
  sdReadTaskHandle = osThreadCreate(osThread(sdReadTask), NULL);
 8013136:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801313a:	2100      	movs	r1, #0
 801313c:	4618      	mov	r0, r3
 801313e:	f7fd f8e3 	bl	8010308 <osThreadCreate>
 8013142:	4603      	mov	r3, r0
 8013144:	4a1a      	ldr	r2, [pc, #104]	; (80131b0 <main+0x164>)
 8013146:	6013      	str	r3, [r2, #0]

  /* definition and creation of sdWriteTask */
  osThreadDef(sdWriteTask, StartSdWriteTask, osPriorityNormal, 0, 1024);
 8013148:	4b1a      	ldr	r3, [pc, #104]	; (80131b4 <main+0x168>)
 801314a:	f107 0418 	add.w	r4, r7, #24
 801314e:	461d      	mov	r5, r3
 8013150:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013152:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013154:	682b      	ldr	r3, [r5, #0]
 8013156:	6023      	str	r3, [r4, #0]
  sdWriteTaskHandle = osThreadCreate(osThread(sdWriteTask), NULL);
 8013158:	f107 0318 	add.w	r3, r7, #24
 801315c:	2100      	movs	r1, #0
 801315e:	4618      	mov	r0, r3
 8013160:	f7fd f8d2 	bl	8010308 <osThreadCreate>
 8013164:	4603      	mov	r3, r0
 8013166:	4a14      	ldr	r2, [pc, #80]	; (80131b8 <main+0x16c>)
 8013168:	6013      	str	r3, [r2, #0]

  /* definition and creation of sdFormatTask */
  osThreadDef(sdFormatTask, StartSdFormatTask, osPriorityNormal, 0, 1024);
 801316a:	4b14      	ldr	r3, [pc, #80]	; (80131bc <main+0x170>)
 801316c:	1d3c      	adds	r4, r7, #4
 801316e:	461d      	mov	r5, r3
 8013170:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013174:	682b      	ldr	r3, [r5, #0]
 8013176:	6023      	str	r3, [r4, #0]
  sdFormatTaskHandle = osThreadCreate(osThread(sdFormatTask), NULL);
 8013178:	1d3b      	adds	r3, r7, #4
 801317a:	2100      	movs	r1, #0
 801317c:	4618      	mov	r0, r3
 801317e:	f7fd f8c3 	bl	8010308 <osThreadCreate>
 8013182:	4603      	mov	r3, r0
 8013184:	4a0e      	ldr	r2, [pc, #56]	; (80131c0 <main+0x174>)
 8013186:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8013188:	f7fd f89b 	bl	80102c2 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 801318c:	e7fe      	b.n	801318c <main+0x140>
 801318e:	bf00      	nop
 8013190:	20011900 	.word	0x20011900
 8013194:	2001196c 	.word	0x2001196c
 8013198:	20011808 	.word	0x20011808
 801319c:	20011804 	.word	0x20011804
 80131a0:	20011968 	.word	0x20011968
 80131a4:	080169dc 	.word	0x080169dc
 80131a8:	20010988 	.word	0x20010988
 80131ac:	080169f0 	.word	0x080169f0
 80131b0:	20010d14 	.word	0x20010d14
 80131b4:	08016a04 	.word	0x08016a04
 80131b8:	20010b64 	.word	0x20010b64
 80131bc:	08016a18 	.word	0x08016a18
 80131c0:	20011484 	.word	0x20011484

080131c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80131c4:	b580      	push	{r7, lr}
 80131c6:	b0b4      	sub	sp, #208	; 0xd0
 80131c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80131ca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80131ce:	2230      	movs	r2, #48	; 0x30
 80131d0:	2100      	movs	r1, #0
 80131d2:	4618      	mov	r0, r3
 80131d4:	f003 fa9e 	bl	8016714 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80131d8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80131dc:	2200      	movs	r2, #0
 80131de:	601a      	str	r2, [r3, #0]
 80131e0:	605a      	str	r2, [r3, #4]
 80131e2:	609a      	str	r2, [r3, #8]
 80131e4:	60da      	str	r2, [r3, #12]
 80131e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80131e8:	f107 0308 	add.w	r3, r7, #8
 80131ec:	2284      	movs	r2, #132	; 0x84
 80131ee:	2100      	movs	r1, #0
 80131f0:	4618      	mov	r0, r3
 80131f2:	f003 fa8f 	bl	8016714 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80131f6:	f7f0 ff01 	bl	8003ffc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80131fa:	4b4f      	ldr	r3, [pc, #316]	; (8013338 <SystemClock_Config+0x174>)
 80131fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131fe:	4a4e      	ldr	r2, [pc, #312]	; (8013338 <SystemClock_Config+0x174>)
 8013200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013204:	6413      	str	r3, [r2, #64]	; 0x40
 8013206:	4b4c      	ldr	r3, [pc, #304]	; (8013338 <SystemClock_Config+0x174>)
 8013208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801320a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801320e:	607b      	str	r3, [r7, #4]
 8013210:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8013212:	4b4a      	ldr	r3, [pc, #296]	; (801333c <SystemClock_Config+0x178>)
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	4a49      	ldr	r2, [pc, #292]	; (801333c <SystemClock_Config+0x178>)
 8013218:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801321c:	6013      	str	r3, [r2, #0]
 801321e:	4b47      	ldr	r3, [pc, #284]	; (801333c <SystemClock_Config+0x178>)
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8013226:	603b      	str	r3, [r7, #0]
 8013228:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 801322a:	2309      	movs	r3, #9
 801322c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8013230:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8013234:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8013238:	2301      	movs	r3, #1
 801323a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801323e:	2302      	movs	r3, #2
 8013240:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8013244:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013248:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 801324c:	2319      	movs	r3, #25
 801324e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8013252:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8013256:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 801325a:	2302      	movs	r3, #2
 801325c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8013260:	2309      	movs	r3, #9
 8013262:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8013266:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801326a:	4618      	mov	r0, r3
 801326c:	f7f0 fff6 	bl	800425c <HAL_RCC_OscConfig>
 8013270:	4603      	mov	r3, r0
 8013272:	2b00      	cmp	r3, #0
 8013274:	d001      	beq.n	801327a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8013276:	f001 fbf7 	bl	8014a68 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 801327a:	f7f0 fecf 	bl	800401c <HAL_PWREx_EnableOverDrive>
 801327e:	4603      	mov	r3, r0
 8013280:	2b00      	cmp	r3, #0
 8013282:	d001      	beq.n	8013288 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8013284:	f001 fbf0 	bl	8014a68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8013288:	230f      	movs	r3, #15
 801328a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801328e:	2302      	movs	r3, #2
 8013290:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8013294:	2300      	movs	r3, #0
 8013296:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 801329a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 801329e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80132a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80132a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80132aa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80132ae:	2106      	movs	r1, #6
 80132b0:	4618      	mov	r0, r3
 80132b2:	f7f1 fa43 	bl	800473c <HAL_RCC_ClockConfig>
 80132b6:	4603      	mov	r3, r0
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d001      	beq.n	80132c0 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80132bc:	f001 fbd4 	bl	8014a68 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 80132c0:	4b1f      	ldr	r3, [pc, #124]	; (8013340 <SystemClock_Config+0x17c>)
 80132c2:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80132c4:	2364      	movs	r3, #100	; 0x64
 80132c6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80132c8:	2302      	movs	r3, #2
 80132ca:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80132cc:	2302      	movs	r3, #2
 80132ce:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80132d0:	2302      	movs	r3, #2
 80132d2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80132d4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80132d8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80132da:	2305      	movs	r3, #5
 80132dc:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80132de:	2302      	movs	r3, #2
 80132e0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80132e2:	2303      	movs	r3, #3
 80132e4:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 80132e6:	2301      	movs	r3, #1
 80132e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80132ea:	2301      	movs	r3, #1
 80132ec:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80132ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80132f2:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80132f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80132f8:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80132fa:	2300      	movs	r3, #0
 80132fc:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80132fe:	2300      	movs	r3, #0
 8013300:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8013302:	2300      	movs	r3, #0
 8013304:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8013306:	2300      	movs	r3, #0
 8013308:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 801330a:	2300      	movs	r3, #0
 801330c:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 801330e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013312:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8013316:	2300      	movs	r3, #0
 8013318:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801331c:	f107 0308 	add.w	r3, r7, #8
 8013320:	4618      	mov	r0, r3
 8013322:	f7f1 fc0f 	bl	8004b44 <HAL_RCCEx_PeriphCLKConfig>
 8013326:	4603      	mov	r3, r0
 8013328:	2b00      	cmp	r3, #0
 801332a:	d001      	beq.n	8013330 <SystemClock_Config+0x16c>
  {
    Error_Handler();
 801332c:	f001 fb9c 	bl	8014a68 <Error_Handler>
  }
}
 8013330:	bf00      	nop
 8013332:	37d0      	adds	r7, #208	; 0xd0
 8013334:	46bd      	mov	sp, r7
 8013336:	bd80      	pop	{r7, pc}
 8013338:	40023800 	.word	0x40023800
 801333c:	40007000 	.word	0x40007000
 8013340:	01b14868 	.word	0x01b14868

08013344 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8013344:	b580      	push	{r7, lr}
 8013346:	b084      	sub	sp, #16
 8013348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 801334a:	463b      	mov	r3, r7
 801334c:	2200      	movs	r2, #0
 801334e:	601a      	str	r2, [r3, #0]
 8013350:	605a      	str	r2, [r3, #4]
 8013352:	609a      	str	r2, [r3, #8]
 8013354:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8013356:	4b21      	ldr	r3, [pc, #132]	; (80133dc <MX_ADC3_Init+0x98>)
 8013358:	4a21      	ldr	r2, [pc, #132]	; (80133e0 <MX_ADC3_Init+0x9c>)
 801335a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 801335c:	4b1f      	ldr	r3, [pc, #124]	; (80133dc <MX_ADC3_Init+0x98>)
 801335e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8013362:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8013364:	4b1d      	ldr	r3, [pc, #116]	; (80133dc <MX_ADC3_Init+0x98>)
 8013366:	2200      	movs	r2, #0
 8013368:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 801336a:	4b1c      	ldr	r3, [pc, #112]	; (80133dc <MX_ADC3_Init+0x98>)
 801336c:	2200      	movs	r2, #0
 801336e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8013370:	4b1a      	ldr	r3, [pc, #104]	; (80133dc <MX_ADC3_Init+0x98>)
 8013372:	2200      	movs	r2, #0
 8013374:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8013376:	4b19      	ldr	r3, [pc, #100]	; (80133dc <MX_ADC3_Init+0x98>)
 8013378:	2200      	movs	r2, #0
 801337a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 801337e:	4b17      	ldr	r3, [pc, #92]	; (80133dc <MX_ADC3_Init+0x98>)
 8013380:	2200      	movs	r2, #0
 8013382:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8013384:	4b15      	ldr	r3, [pc, #84]	; (80133dc <MX_ADC3_Init+0x98>)
 8013386:	4a17      	ldr	r2, [pc, #92]	; (80133e4 <MX_ADC3_Init+0xa0>)
 8013388:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 801338a:	4b14      	ldr	r3, [pc, #80]	; (80133dc <MX_ADC3_Init+0x98>)
 801338c:	2200      	movs	r2, #0
 801338e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8013390:	4b12      	ldr	r3, [pc, #72]	; (80133dc <MX_ADC3_Init+0x98>)
 8013392:	2201      	movs	r2, #1
 8013394:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8013396:	4b11      	ldr	r3, [pc, #68]	; (80133dc <MX_ADC3_Init+0x98>)
 8013398:	2200      	movs	r2, #0
 801339a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 801339e:	4b0f      	ldr	r3, [pc, #60]	; (80133dc <MX_ADC3_Init+0x98>)
 80133a0:	2201      	movs	r2, #1
 80133a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80133a4:	480d      	ldr	r0, [pc, #52]	; (80133dc <MX_ADC3_Init+0x98>)
 80133a6:	f7ed f901 	bl	80005ac <HAL_ADC_Init>
 80133aa:	4603      	mov	r3, r0
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d001      	beq.n	80133b4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80133b0:	f001 fb5a 	bl	8014a68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80133b4:	2304      	movs	r3, #4
 80133b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80133b8:	2301      	movs	r3, #1
 80133ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80133bc:	2300      	movs	r3, #0
 80133be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80133c0:	463b      	mov	r3, r7
 80133c2:	4619      	mov	r1, r3
 80133c4:	4805      	ldr	r0, [pc, #20]	; (80133dc <MX_ADC3_Init+0x98>)
 80133c6:	f7ed f935 	bl	8000634 <HAL_ADC_ConfigChannel>
 80133ca:	4603      	mov	r3, r0
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d001      	beq.n	80133d4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80133d0:	f001 fb4a 	bl	8014a68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80133d4:	bf00      	nop
 80133d6:	3710      	adds	r7, #16
 80133d8:	46bd      	mov	sp, r7
 80133da:	bd80      	pop	{r7, pc}
 80133dc:	20011118 	.word	0x20011118
 80133e0:	40012200 	.word	0x40012200
 80133e4:	0f000001 	.word	0x0f000001

080133e8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80133e8:	b580      	push	{r7, lr}
 80133ea:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80133ec:	4b0d      	ldr	r3, [pc, #52]	; (8013424 <MX_CRC_Init+0x3c>)
 80133ee:	4a0e      	ldr	r2, [pc, #56]	; (8013428 <MX_CRC_Init+0x40>)
 80133f0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80133f2:	4b0c      	ldr	r3, [pc, #48]	; (8013424 <MX_CRC_Init+0x3c>)
 80133f4:	2200      	movs	r2, #0
 80133f6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80133f8:	4b0a      	ldr	r3, [pc, #40]	; (8013424 <MX_CRC_Init+0x3c>)
 80133fa:	2200      	movs	r2, #0
 80133fc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80133fe:	4b09      	ldr	r3, [pc, #36]	; (8013424 <MX_CRC_Init+0x3c>)
 8013400:	2200      	movs	r2, #0
 8013402:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8013404:	4b07      	ldr	r3, [pc, #28]	; (8013424 <MX_CRC_Init+0x3c>)
 8013406:	2200      	movs	r2, #0
 8013408:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 801340a:	4b06      	ldr	r3, [pc, #24]	; (8013424 <MX_CRC_Init+0x3c>)
 801340c:	2201      	movs	r2, #1
 801340e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8013410:	4804      	ldr	r0, [pc, #16]	; (8013424 <MX_CRC_Init+0x3c>)
 8013412:	f7ed fc1f 	bl	8000c54 <HAL_CRC_Init>
 8013416:	4603      	mov	r3, r0
 8013418:	2b00      	cmp	r3, #0
 801341a:	d001      	beq.n	8013420 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 801341c:	f001 fb24 	bl	8014a68 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8013420:	bf00      	nop
 8013422:	bd80      	pop	{r7, pc}
 8013424:	20010b34 	.word	0x20010b34
 8013428:	40023000 	.word	0x40023000

0801342c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 801342c:	b580      	push	{r7, lr}
 801342e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8013430:	4b16      	ldr	r3, [pc, #88]	; (801348c <MX_DCMI_Init+0x60>)
 8013432:	4a17      	ldr	r2, [pc, #92]	; (8013490 <MX_DCMI_Init+0x64>)
 8013434:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8013436:	4b15      	ldr	r3, [pc, #84]	; (801348c <MX_DCMI_Init+0x60>)
 8013438:	2200      	movs	r2, #0
 801343a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 801343c:	4b13      	ldr	r3, [pc, #76]	; (801348c <MX_DCMI_Init+0x60>)
 801343e:	2200      	movs	r2, #0
 8013440:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8013442:	4b12      	ldr	r3, [pc, #72]	; (801348c <MX_DCMI_Init+0x60>)
 8013444:	2200      	movs	r2, #0
 8013446:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8013448:	4b10      	ldr	r3, [pc, #64]	; (801348c <MX_DCMI_Init+0x60>)
 801344a:	2200      	movs	r2, #0
 801344c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 801344e:	4b0f      	ldr	r3, [pc, #60]	; (801348c <MX_DCMI_Init+0x60>)
 8013450:	2200      	movs	r2, #0
 8013452:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8013454:	4b0d      	ldr	r3, [pc, #52]	; (801348c <MX_DCMI_Init+0x60>)
 8013456:	2200      	movs	r2, #0
 8013458:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 801345a:	4b0c      	ldr	r3, [pc, #48]	; (801348c <MX_DCMI_Init+0x60>)
 801345c:	2200      	movs	r2, #0
 801345e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8013460:	4b0a      	ldr	r3, [pc, #40]	; (801348c <MX_DCMI_Init+0x60>)
 8013462:	2200      	movs	r2, #0
 8013464:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8013466:	4b09      	ldr	r3, [pc, #36]	; (801348c <MX_DCMI_Init+0x60>)
 8013468:	2200      	movs	r2, #0
 801346a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 801346c:	4b07      	ldr	r3, [pc, #28]	; (801348c <MX_DCMI_Init+0x60>)
 801346e:	2200      	movs	r2, #0
 8013470:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8013472:	4b06      	ldr	r3, [pc, #24]	; (801348c <MX_DCMI_Init+0x60>)
 8013474:	2200      	movs	r2, #0
 8013476:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8013478:	4804      	ldr	r0, [pc, #16]	; (801348c <MX_DCMI_Init+0x60>)
 801347a:	f7ed fcd5 	bl	8000e28 <HAL_DCMI_Init>
 801347e:	4603      	mov	r3, r0
 8013480:	2b00      	cmp	r3, #0
 8013482:	d001      	beq.n	8013488 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8013484:	f001 faf0 	bl	8014a68 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8013488:	bf00      	nop
 801348a:	bd80      	pop	{r7, pc}
 801348c:	20011160 	.word	0x20011160
 8013490:	50050000 	.word	0x50050000

08013494 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8013494:	b580      	push	{r7, lr}
 8013496:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8013498:	4b15      	ldr	r3, [pc, #84]	; (80134f0 <MX_DMA2D_Init+0x5c>)
 801349a:	4a16      	ldr	r2, [pc, #88]	; (80134f4 <MX_DMA2D_Init+0x60>)
 801349c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 801349e:	4b14      	ldr	r3, [pc, #80]	; (80134f0 <MX_DMA2D_Init+0x5c>)
 80134a0:	2200      	movs	r2, #0
 80134a2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80134a4:	4b12      	ldr	r3, [pc, #72]	; (80134f0 <MX_DMA2D_Init+0x5c>)
 80134a6:	2200      	movs	r2, #0
 80134a8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80134aa:	4b11      	ldr	r3, [pc, #68]	; (80134f0 <MX_DMA2D_Init+0x5c>)
 80134ac:	2200      	movs	r2, #0
 80134ae:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80134b0:	4b0f      	ldr	r3, [pc, #60]	; (80134f0 <MX_DMA2D_Init+0x5c>)
 80134b2:	2200      	movs	r2, #0
 80134b4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80134b6:	4b0e      	ldr	r3, [pc, #56]	; (80134f0 <MX_DMA2D_Init+0x5c>)
 80134b8:	2200      	movs	r2, #0
 80134ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80134bc:	4b0c      	ldr	r3, [pc, #48]	; (80134f0 <MX_DMA2D_Init+0x5c>)
 80134be:	2200      	movs	r2, #0
 80134c0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80134c2:	4b0b      	ldr	r3, [pc, #44]	; (80134f0 <MX_DMA2D_Init+0x5c>)
 80134c4:	2200      	movs	r2, #0
 80134c6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80134c8:	4809      	ldr	r0, [pc, #36]	; (80134f0 <MX_DMA2D_Init+0x5c>)
 80134ca:	f7ee f8c5 	bl	8001658 <HAL_DMA2D_Init>
 80134ce:	4603      	mov	r3, r0
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d001      	beq.n	80134d8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80134d4:	f001 fac8 	bl	8014a68 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80134d8:	2101      	movs	r1, #1
 80134da:	4805      	ldr	r0, [pc, #20]	; (80134f0 <MX_DMA2D_Init+0x5c>)
 80134dc:	f7ee fa16 	bl	800190c <HAL_DMA2D_ConfigLayer>
 80134e0:	4603      	mov	r3, r0
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d001      	beq.n	80134ea <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80134e6:	f001 fabf 	bl	8014a68 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80134ea:	bf00      	nop
 80134ec:	bd80      	pop	{r7, pc}
 80134ee:	bf00      	nop
 80134f0:	2001180c 	.word	0x2001180c
 80134f4:	4002b000 	.word	0x4002b000

080134f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80134f8:	b580      	push	{r7, lr}
 80134fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80134fc:	4b1b      	ldr	r3, [pc, #108]	; (801356c <MX_I2C1_Init+0x74>)
 80134fe:	4a1c      	ldr	r2, [pc, #112]	; (8013570 <MX_I2C1_Init+0x78>)
 8013500:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8013502:	4b1a      	ldr	r3, [pc, #104]	; (801356c <MX_I2C1_Init+0x74>)
 8013504:	4a1b      	ldr	r2, [pc, #108]	; (8013574 <MX_I2C1_Init+0x7c>)
 8013506:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8013508:	4b18      	ldr	r3, [pc, #96]	; (801356c <MX_I2C1_Init+0x74>)
 801350a:	2200      	movs	r2, #0
 801350c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801350e:	4b17      	ldr	r3, [pc, #92]	; (801356c <MX_I2C1_Init+0x74>)
 8013510:	2201      	movs	r2, #1
 8013512:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8013514:	4b15      	ldr	r3, [pc, #84]	; (801356c <MX_I2C1_Init+0x74>)
 8013516:	2200      	movs	r2, #0
 8013518:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 801351a:	4b14      	ldr	r3, [pc, #80]	; (801356c <MX_I2C1_Init+0x74>)
 801351c:	2200      	movs	r2, #0
 801351e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8013520:	4b12      	ldr	r3, [pc, #72]	; (801356c <MX_I2C1_Init+0x74>)
 8013522:	2200      	movs	r2, #0
 8013524:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8013526:	4b11      	ldr	r3, [pc, #68]	; (801356c <MX_I2C1_Init+0x74>)
 8013528:	2200      	movs	r2, #0
 801352a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801352c:	4b0f      	ldr	r3, [pc, #60]	; (801356c <MX_I2C1_Init+0x74>)
 801352e:	2200      	movs	r2, #0
 8013530:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8013532:	480e      	ldr	r0, [pc, #56]	; (801356c <MX_I2C1_Init+0x74>)
 8013534:	f7f0 f8d0 	bl	80036d8 <HAL_I2C_Init>
 8013538:	4603      	mov	r3, r0
 801353a:	2b00      	cmp	r3, #0
 801353c:	d001      	beq.n	8013542 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 801353e:	f001 fa93 	bl	8014a68 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8013542:	2100      	movs	r1, #0
 8013544:	4809      	ldr	r0, [pc, #36]	; (801356c <MX_I2C1_Init+0x74>)
 8013546:	f7f0 f957 	bl	80037f8 <HAL_I2CEx_ConfigAnalogFilter>
 801354a:	4603      	mov	r3, r0
 801354c:	2b00      	cmp	r3, #0
 801354e:	d001      	beq.n	8013554 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8013550:	f001 fa8a 	bl	8014a68 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8013554:	2100      	movs	r1, #0
 8013556:	4805      	ldr	r0, [pc, #20]	; (801356c <MX_I2C1_Init+0x74>)
 8013558:	f7f0 f999 	bl	800388e <HAL_I2CEx_ConfigDigitalFilter>
 801355c:	4603      	mov	r3, r0
 801355e:	2b00      	cmp	r3, #0
 8013560:	d001      	beq.n	8013566 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8013562:	f001 fa81 	bl	8014a68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8013566:	bf00      	nop
 8013568:	bd80      	pop	{r7, pc}
 801356a:	bf00      	nop
 801356c:	20010ae8 	.word	0x20010ae8
 8013570:	40005400 	.word	0x40005400
 8013574:	00c0eaff 	.word	0x00c0eaff

08013578 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8013578:	b580      	push	{r7, lr}
 801357a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 801357c:	4b1b      	ldr	r3, [pc, #108]	; (80135ec <MX_I2C3_Init+0x74>)
 801357e:	4a1c      	ldr	r2, [pc, #112]	; (80135f0 <MX_I2C3_Init+0x78>)
 8013580:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8013582:	4b1a      	ldr	r3, [pc, #104]	; (80135ec <MX_I2C3_Init+0x74>)
 8013584:	4a1b      	ldr	r2, [pc, #108]	; (80135f4 <MX_I2C3_Init+0x7c>)
 8013586:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8013588:	4b18      	ldr	r3, [pc, #96]	; (80135ec <MX_I2C3_Init+0x74>)
 801358a:	2200      	movs	r2, #0
 801358c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801358e:	4b17      	ldr	r3, [pc, #92]	; (80135ec <MX_I2C3_Init+0x74>)
 8013590:	2201      	movs	r2, #1
 8013592:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8013594:	4b15      	ldr	r3, [pc, #84]	; (80135ec <MX_I2C3_Init+0x74>)
 8013596:	2200      	movs	r2, #0
 8013598:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 801359a:	4b14      	ldr	r3, [pc, #80]	; (80135ec <MX_I2C3_Init+0x74>)
 801359c:	2200      	movs	r2, #0
 801359e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80135a0:	4b12      	ldr	r3, [pc, #72]	; (80135ec <MX_I2C3_Init+0x74>)
 80135a2:	2200      	movs	r2, #0
 80135a4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80135a6:	4b11      	ldr	r3, [pc, #68]	; (80135ec <MX_I2C3_Init+0x74>)
 80135a8:	2200      	movs	r2, #0
 80135aa:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80135ac:	4b0f      	ldr	r3, [pc, #60]	; (80135ec <MX_I2C3_Init+0x74>)
 80135ae:	2200      	movs	r2, #0
 80135b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80135b2:	480e      	ldr	r0, [pc, #56]	; (80135ec <MX_I2C3_Init+0x74>)
 80135b4:	f7f0 f890 	bl	80036d8 <HAL_I2C_Init>
 80135b8:	4603      	mov	r3, r0
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d001      	beq.n	80135c2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80135be:	f001 fa53 	bl	8014a68 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80135c2:	2100      	movs	r1, #0
 80135c4:	4809      	ldr	r0, [pc, #36]	; (80135ec <MX_I2C3_Init+0x74>)
 80135c6:	f7f0 f917 	bl	80037f8 <HAL_I2CEx_ConfigAnalogFilter>
 80135ca:	4603      	mov	r3, r0
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d001      	beq.n	80135d4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80135d0:	f001 fa4a 	bl	8014a68 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80135d4:	2100      	movs	r1, #0
 80135d6:	4805      	ldr	r0, [pc, #20]	; (80135ec <MX_I2C3_Init+0x74>)
 80135d8:	f7f0 f959 	bl	800388e <HAL_I2CEx_ConfigDigitalFilter>
 80135dc:	4603      	mov	r3, r0
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d001      	beq.n	80135e6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80135e2:	f001 fa41 	bl	8014a68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80135e6:	bf00      	nop
 80135e8:	bd80      	pop	{r7, pc}
 80135ea:	bf00      	nop
 80135ec:	2001098c 	.word	0x2001098c
 80135f0:	40005c00 	.word	0x40005c00
 80135f4:	00c0eaff 	.word	0x00c0eaff

080135f8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80135f8:	b580      	push	{r7, lr}
 80135fa:	b08e      	sub	sp, #56	; 0x38
 80135fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80135fe:	1d3b      	adds	r3, r7, #4
 8013600:	2234      	movs	r2, #52	; 0x34
 8013602:	2100      	movs	r1, #0
 8013604:	4618      	mov	r0, r3
 8013606:	f003 f885 	bl	8016714 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 801360a:	4b3a      	ldr	r3, [pc, #232]	; (80136f4 <MX_LTDC_Init+0xfc>)
 801360c:	4a3a      	ldr	r2, [pc, #232]	; (80136f8 <MX_LTDC_Init+0x100>)
 801360e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8013610:	4b38      	ldr	r3, [pc, #224]	; (80136f4 <MX_LTDC_Init+0xfc>)
 8013612:	2200      	movs	r2, #0
 8013614:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8013616:	4b37      	ldr	r3, [pc, #220]	; (80136f4 <MX_LTDC_Init+0xfc>)
 8013618:	2200      	movs	r2, #0
 801361a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 801361c:	4b35      	ldr	r3, [pc, #212]	; (80136f4 <MX_LTDC_Init+0xfc>)
 801361e:	2200      	movs	r2, #0
 8013620:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8013622:	4b34      	ldr	r3, [pc, #208]	; (80136f4 <MX_LTDC_Init+0xfc>)
 8013624:	2200      	movs	r2, #0
 8013626:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8013628:	4b32      	ldr	r3, [pc, #200]	; (80136f4 <MX_LTDC_Init+0xfc>)
 801362a:	2228      	movs	r2, #40	; 0x28
 801362c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 801362e:	4b31      	ldr	r3, [pc, #196]	; (80136f4 <MX_LTDC_Init+0xfc>)
 8013630:	2209      	movs	r2, #9
 8013632:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8013634:	4b2f      	ldr	r3, [pc, #188]	; (80136f4 <MX_LTDC_Init+0xfc>)
 8013636:	2235      	movs	r2, #53	; 0x35
 8013638:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 801363a:	4b2e      	ldr	r3, [pc, #184]	; (80136f4 <MX_LTDC_Init+0xfc>)
 801363c:	220b      	movs	r2, #11
 801363e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8013640:	4b2c      	ldr	r3, [pc, #176]	; (80136f4 <MX_LTDC_Init+0xfc>)
 8013642:	f240 2215 	movw	r2, #533	; 0x215
 8013646:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8013648:	4b2a      	ldr	r3, [pc, #168]	; (80136f4 <MX_LTDC_Init+0xfc>)
 801364a:	f240 121b 	movw	r2, #283	; 0x11b
 801364e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8013650:	4b28      	ldr	r3, [pc, #160]	; (80136f4 <MX_LTDC_Init+0xfc>)
 8013652:	f240 2235 	movw	r2, #565	; 0x235
 8013656:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8013658:	4b26      	ldr	r3, [pc, #152]	; (80136f4 <MX_LTDC_Init+0xfc>)
 801365a:	f240 121d 	movw	r2, #285	; 0x11d
 801365e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8013660:	4b24      	ldr	r3, [pc, #144]	; (80136f4 <MX_LTDC_Init+0xfc>)
 8013662:	2200      	movs	r2, #0
 8013664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8013668:	4b22      	ldr	r3, [pc, #136]	; (80136f4 <MX_LTDC_Init+0xfc>)
 801366a:	2200      	movs	r2, #0
 801366c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8013670:	4b20      	ldr	r3, [pc, #128]	; (80136f4 <MX_LTDC_Init+0xfc>)
 8013672:	2200      	movs	r2, #0
 8013674:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8013678:	481e      	ldr	r0, [pc, #120]	; (80136f4 <MX_LTDC_Init+0xfc>)
 801367a:	f7f0 f955 	bl	8003928 <HAL_LTDC_Init>
 801367e:	4603      	mov	r3, r0
 8013680:	2b00      	cmp	r3, #0
 8013682:	d001      	beq.n	8013688 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8013684:	f001 f9f0 	bl	8014a68 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8013688:	2300      	movs	r3, #0
 801368a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 801368c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8013690:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8013692:	2300      	movs	r3, #0
 8013694:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8013696:	f44f 7388 	mov.w	r3, #272	; 0x110
 801369a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 801369c:	2302      	movs	r3, #2
 801369e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80136a0:	23ff      	movs	r3, #255	; 0xff
 80136a2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80136a4:	2300      	movs	r3, #0
 80136a6:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80136a8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80136ac:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80136ae:	2307      	movs	r3, #7
 80136b0:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80136b2:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80136b6:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80136b8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80136bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80136be:	f44f 7388 	mov.w	r3, #272	; 0x110
 80136c2:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80136c4:	2300      	movs	r3, #0
 80136c6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80136ca:	2300      	movs	r3, #0
 80136cc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80136d0:	2300      	movs	r3, #0
 80136d2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80136d6:	1d3b      	adds	r3, r7, #4
 80136d8:	2200      	movs	r2, #0
 80136da:	4619      	mov	r1, r3
 80136dc:	4805      	ldr	r0, [pc, #20]	; (80136f4 <MX_LTDC_Init+0xfc>)
 80136de:	f7f0 fab5 	bl	8003c4c <HAL_LTDC_ConfigLayer>
 80136e2:	4603      	mov	r3, r0
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d001      	beq.n	80136ec <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80136e8:	f001 f9be 	bl	8014a68 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80136ec:	bf00      	nop
 80136ee:	3738      	adds	r7, #56	; 0x38
 80136f0:	46bd      	mov	sp, r7
 80136f2:	bd80      	pop	{r7, pc}
 80136f4:	20010c6c 	.word	0x20010c6c
 80136f8:	40016800 	.word	0x40016800

080136fc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80136fc:	b580      	push	{r7, lr}
 80136fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8013700:	4b12      	ldr	r3, [pc, #72]	; (801374c <MX_QUADSPI_Init+0x50>)
 8013702:	4a13      	ldr	r2, [pc, #76]	; (8013750 <MX_QUADSPI_Init+0x54>)
 8013704:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8013706:	4b11      	ldr	r3, [pc, #68]	; (801374c <MX_QUADSPI_Init+0x50>)
 8013708:	22ff      	movs	r2, #255	; 0xff
 801370a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 801370c:	4b0f      	ldr	r3, [pc, #60]	; (801374c <MX_QUADSPI_Init+0x50>)
 801370e:	2201      	movs	r2, #1
 8013710:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8013712:	4b0e      	ldr	r3, [pc, #56]	; (801374c <MX_QUADSPI_Init+0x50>)
 8013714:	2200      	movs	r2, #0
 8013716:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8013718:	4b0c      	ldr	r3, [pc, #48]	; (801374c <MX_QUADSPI_Init+0x50>)
 801371a:	2201      	movs	r2, #1
 801371c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 801371e:	4b0b      	ldr	r3, [pc, #44]	; (801374c <MX_QUADSPI_Init+0x50>)
 8013720:	2200      	movs	r2, #0
 8013722:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8013724:	4b09      	ldr	r3, [pc, #36]	; (801374c <MX_QUADSPI_Init+0x50>)
 8013726:	2200      	movs	r2, #0
 8013728:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 801372a:	4b08      	ldr	r3, [pc, #32]	; (801374c <MX_QUADSPI_Init+0x50>)
 801372c:	2200      	movs	r2, #0
 801372e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8013730:	4b06      	ldr	r3, [pc, #24]	; (801374c <MX_QUADSPI_Init+0x50>)
 8013732:	2200      	movs	r2, #0
 8013734:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8013736:	4805      	ldr	r0, [pc, #20]	; (801374c <MX_QUADSPI_Init+0x50>)
 8013738:	f7f0 fcc0 	bl	80040bc <HAL_QSPI_Init>
 801373c:	4603      	mov	r3, r0
 801373e:	2b00      	cmp	r3, #0
 8013740:	d001      	beq.n	8013746 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8013742:	f001 f991 	bl	8014a68 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8013746:	bf00      	nop
 8013748:	bd80      	pop	{r7, pc}
 801374a:	bf00      	nop
 801374c:	20011970 	.word	0x20011970
 8013750:	a0001000 	.word	0xa0001000

08013754 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8013754:	b580      	push	{r7, lr}
 8013756:	b092      	sub	sp, #72	; 0x48
 8013758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 801375a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801375e:	2200      	movs	r2, #0
 8013760:	601a      	str	r2, [r3, #0]
 8013762:	605a      	str	r2, [r3, #4]
 8013764:	609a      	str	r2, [r3, #8]
 8013766:	60da      	str	r2, [r3, #12]
 8013768:	611a      	str	r2, [r3, #16]
 801376a:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 801376c:	2300      	movs	r3, #0
 801376e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8013770:	463b      	mov	r3, r7
 8013772:	222c      	movs	r2, #44	; 0x2c
 8013774:	2100      	movs	r1, #0
 8013776:	4618      	mov	r0, r3
 8013778:	f002 ffcc 	bl	8016714 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 801377c:	4b47      	ldr	r3, [pc, #284]	; (801389c <MX_RTC_Init+0x148>)
 801377e:	4a48      	ldr	r2, [pc, #288]	; (80138a0 <MX_RTC_Init+0x14c>)
 8013780:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8013782:	4b46      	ldr	r3, [pc, #280]	; (801389c <MX_RTC_Init+0x148>)
 8013784:	2200      	movs	r2, #0
 8013786:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8013788:	4b44      	ldr	r3, [pc, #272]	; (801389c <MX_RTC_Init+0x148>)
 801378a:	227f      	movs	r2, #127	; 0x7f
 801378c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 801378e:	4b43      	ldr	r3, [pc, #268]	; (801389c <MX_RTC_Init+0x148>)
 8013790:	22ff      	movs	r2, #255	; 0xff
 8013792:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8013794:	4b41      	ldr	r3, [pc, #260]	; (801389c <MX_RTC_Init+0x148>)
 8013796:	2200      	movs	r2, #0
 8013798:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 801379a:	4b40      	ldr	r3, [pc, #256]	; (801389c <MX_RTC_Init+0x148>)
 801379c:	2200      	movs	r2, #0
 801379e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80137a0:	4b3e      	ldr	r3, [pc, #248]	; (801389c <MX_RTC_Init+0x148>)
 80137a2:	2200      	movs	r2, #0
 80137a4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80137a6:	483d      	ldr	r0, [pc, #244]	; (801389c <MX_RTC_Init+0x148>)
 80137a8:	f7f1 fefe 	bl	80055a8 <HAL_RTC_Init>
 80137ac:	4603      	mov	r3, r0
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d001      	beq.n	80137b6 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80137b2:	f001 f959 	bl	8014a68 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 80137b6:	2300      	movs	r3, #0
 80137b8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 80137bc:	2300      	movs	r3, #0
 80137be:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 80137c2:	2300      	movs	r3, #0
 80137c4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80137c8:	2300      	movs	r3, #0
 80137ca:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80137cc:	2300      	movs	r3, #0
 80137ce:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80137d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80137d4:	2201      	movs	r2, #1
 80137d6:	4619      	mov	r1, r3
 80137d8:	4830      	ldr	r0, [pc, #192]	; (801389c <MX_RTC_Init+0x148>)
 80137da:	f7f1 ff61 	bl	80056a0 <HAL_RTC_SetTime>
 80137de:	4603      	mov	r3, r0
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d001      	beq.n	80137e8 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80137e4:	f001 f940 	bl	8014a68 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80137e8:	2301      	movs	r3, #1
 80137ea:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80137ee:	2301      	movs	r3, #1
 80137f0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 80137f4:	2301      	movs	r3, #1
 80137f6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 80137fa:	2300      	movs	r3, #0
 80137fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8013800:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013804:	2201      	movs	r2, #1
 8013806:	4619      	mov	r1, r3
 8013808:	4824      	ldr	r0, [pc, #144]	; (801389c <MX_RTC_Init+0x148>)
 801380a:	f7f2 f807 	bl	800581c <HAL_RTC_SetDate>
 801380e:	4603      	mov	r3, r0
 8013810:	2b00      	cmp	r3, #0
 8013812:	d001      	beq.n	8013818 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8013814:	f001 f928 	bl	8014a68 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8013818:	2300      	movs	r3, #0
 801381a:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 801381c:	2300      	movs	r3, #0
 801381e:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8013820:	2300      	movs	r3, #0
 8013822:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8013824:	2300      	movs	r3, #0
 8013826:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8013828:	2300      	movs	r3, #0
 801382a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801382c:	2300      	movs	r3, #0
 801382e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8013830:	2300      	movs	r3, #0
 8013832:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8013834:	2300      	movs	r3, #0
 8013836:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8013838:	2300      	movs	r3, #0
 801383a:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 801383c:	2301      	movs	r3, #1
 801383e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8013842:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013846:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8013848:	463b      	mov	r3, r7
 801384a:	2201      	movs	r2, #1
 801384c:	4619      	mov	r1, r3
 801384e:	4813      	ldr	r0, [pc, #76]	; (801389c <MX_RTC_Init+0x148>)
 8013850:	f7f2 f88c 	bl	800596c <HAL_RTC_SetAlarm>
 8013854:	4603      	mov	r3, r0
 8013856:	2b00      	cmp	r3, #0
 8013858:	d001      	beq.n	801385e <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 801385a:	f001 f905 	bl	8014a68 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 801385e:	2301      	movs	r3, #1
 8013860:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8013864:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013868:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 801386a:	463b      	mov	r3, r7
 801386c:	2201      	movs	r2, #1
 801386e:	4619      	mov	r1, r3
 8013870:	480a      	ldr	r0, [pc, #40]	; (801389c <MX_RTC_Init+0x148>)
 8013872:	f7f2 f87b 	bl	800596c <HAL_RTC_SetAlarm>
 8013876:	4603      	mov	r3, r0
 8013878:	2b00      	cmp	r3, #0
 801387a:	d001      	beq.n	8013880 <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 801387c:	f001 f8f4 	bl	8014a68 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8013880:	2202      	movs	r2, #2
 8013882:	2100      	movs	r1, #0
 8013884:	4805      	ldr	r0, [pc, #20]	; (801389c <MX_RTC_Init+0x148>)
 8013886:	f7f2 f9fb 	bl	8005c80 <HAL_RTCEx_SetTimeStamp>
 801388a:	4603      	mov	r3, r0
 801388c:	2b00      	cmp	r3, #0
 801388e:	d001      	beq.n	8013894 <MX_RTC_Init+0x140>
  {
    Error_Handler();
 8013890:	f001 f8ea 	bl	8014a68 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8013894:	bf00      	nop
 8013896:	3748      	adds	r7, #72	; 0x48
 8013898:	46bd      	mov	sp, r7
 801389a:	bd80      	pop	{r7, pc}
 801389c:	20011230 	.word	0x20011230
 80138a0:	40002800 	.word	0x40002800

080138a4 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80138a4:	b580      	push	{r7, lr}
 80138a6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80138a8:	4b4d      	ldr	r3, [pc, #308]	; (80139e0 <MX_SAI2_Init+0x13c>)
 80138aa:	4a4e      	ldr	r2, [pc, #312]	; (80139e4 <MX_SAI2_Init+0x140>)
 80138ac:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80138ae:	4b4c      	ldr	r3, [pc, #304]	; (80139e0 <MX_SAI2_Init+0x13c>)
 80138b0:	2200      	movs	r2, #0
 80138b2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80138b4:	4b4a      	ldr	r3, [pc, #296]	; (80139e0 <MX_SAI2_Init+0x13c>)
 80138b6:	2200      	movs	r2, #0
 80138b8:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80138ba:	4b49      	ldr	r3, [pc, #292]	; (80139e0 <MX_SAI2_Init+0x13c>)
 80138bc:	2240      	movs	r2, #64	; 0x40
 80138be:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80138c0:	4b47      	ldr	r3, [pc, #284]	; (80139e0 <MX_SAI2_Init+0x13c>)
 80138c2:	2200      	movs	r2, #0
 80138c4:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80138c6:	4b46      	ldr	r3, [pc, #280]	; (80139e0 <MX_SAI2_Init+0x13c>)
 80138c8:	2200      	movs	r2, #0
 80138ca:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80138cc:	4b44      	ldr	r3, [pc, #272]	; (80139e0 <MX_SAI2_Init+0x13c>)
 80138ce:	2200      	movs	r2, #0
 80138d0:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80138d2:	4b43      	ldr	r3, [pc, #268]	; (80139e0 <MX_SAI2_Init+0x13c>)
 80138d4:	2200      	movs	r2, #0
 80138d6:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80138d8:	4b41      	ldr	r3, [pc, #260]	; (80139e0 <MX_SAI2_Init+0x13c>)
 80138da:	2200      	movs	r2, #0
 80138dc:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80138de:	4b40      	ldr	r3, [pc, #256]	; (80139e0 <MX_SAI2_Init+0x13c>)
 80138e0:	2200      	movs	r2, #0
 80138e2:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80138e4:	4b3e      	ldr	r3, [pc, #248]	; (80139e0 <MX_SAI2_Init+0x13c>)
 80138e6:	4a40      	ldr	r2, [pc, #256]	; (80139e8 <MX_SAI2_Init+0x144>)
 80138e8:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80138ea:	4b3d      	ldr	r3, [pc, #244]	; (80139e0 <MX_SAI2_Init+0x13c>)
 80138ec:	2200      	movs	r2, #0
 80138ee:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80138f0:	4b3b      	ldr	r3, [pc, #236]	; (80139e0 <MX_SAI2_Init+0x13c>)
 80138f2:	2200      	movs	r2, #0
 80138f4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80138f6:	4b3a      	ldr	r3, [pc, #232]	; (80139e0 <MX_SAI2_Init+0x13c>)
 80138f8:	2200      	movs	r2, #0
 80138fa:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80138fc:	4b38      	ldr	r3, [pc, #224]	; (80139e0 <MX_SAI2_Init+0x13c>)
 80138fe:	2200      	movs	r2, #0
 8013900:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8013902:	4b37      	ldr	r3, [pc, #220]	; (80139e0 <MX_SAI2_Init+0x13c>)
 8013904:	2208      	movs	r2, #8
 8013906:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8013908:	4b35      	ldr	r3, [pc, #212]	; (80139e0 <MX_SAI2_Init+0x13c>)
 801390a:	2201      	movs	r2, #1
 801390c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 801390e:	4b34      	ldr	r3, [pc, #208]	; (80139e0 <MX_SAI2_Init+0x13c>)
 8013910:	2200      	movs	r2, #0
 8013912:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8013914:	4b32      	ldr	r3, [pc, #200]	; (80139e0 <MX_SAI2_Init+0x13c>)
 8013916:	2200      	movs	r2, #0
 8013918:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 801391a:	4b31      	ldr	r3, [pc, #196]	; (80139e0 <MX_SAI2_Init+0x13c>)
 801391c:	2200      	movs	r2, #0
 801391e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8013920:	4b2f      	ldr	r3, [pc, #188]	; (80139e0 <MX_SAI2_Init+0x13c>)
 8013922:	2200      	movs	r2, #0
 8013924:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8013926:	4b2e      	ldr	r3, [pc, #184]	; (80139e0 <MX_SAI2_Init+0x13c>)
 8013928:	2200      	movs	r2, #0
 801392a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 801392c:	4b2c      	ldr	r3, [pc, #176]	; (80139e0 <MX_SAI2_Init+0x13c>)
 801392e:	2201      	movs	r2, #1
 8013930:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8013932:	4b2b      	ldr	r3, [pc, #172]	; (80139e0 <MX_SAI2_Init+0x13c>)
 8013934:	2200      	movs	r2, #0
 8013936:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8013938:	4829      	ldr	r0, [pc, #164]	; (80139e0 <MX_SAI2_Init+0x13c>)
 801393a:	f7f2 f9f7 	bl	8005d2c <HAL_SAI_Init>
 801393e:	4603      	mov	r3, r0
 8013940:	2b00      	cmp	r3, #0
 8013942:	d001      	beq.n	8013948 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8013944:	f001 f890 	bl	8014a68 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8013948:	4b28      	ldr	r3, [pc, #160]	; (80139ec <MX_SAI2_Init+0x148>)
 801394a:	4a29      	ldr	r2, [pc, #164]	; (80139f0 <MX_SAI2_Init+0x14c>)
 801394c:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 801394e:	4b27      	ldr	r3, [pc, #156]	; (80139ec <MX_SAI2_Init+0x148>)
 8013950:	2200      	movs	r2, #0
 8013952:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8013954:	4b25      	ldr	r3, [pc, #148]	; (80139ec <MX_SAI2_Init+0x148>)
 8013956:	2203      	movs	r2, #3
 8013958:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 801395a:	4b24      	ldr	r3, [pc, #144]	; (80139ec <MX_SAI2_Init+0x148>)
 801395c:	2240      	movs	r2, #64	; 0x40
 801395e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8013960:	4b22      	ldr	r3, [pc, #136]	; (80139ec <MX_SAI2_Init+0x148>)
 8013962:	2200      	movs	r2, #0
 8013964:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8013966:	4b21      	ldr	r3, [pc, #132]	; (80139ec <MX_SAI2_Init+0x148>)
 8013968:	2200      	movs	r2, #0
 801396a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 801396c:	4b1f      	ldr	r3, [pc, #124]	; (80139ec <MX_SAI2_Init+0x148>)
 801396e:	2201      	movs	r2, #1
 8013970:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8013972:	4b1e      	ldr	r3, [pc, #120]	; (80139ec <MX_SAI2_Init+0x148>)
 8013974:	2200      	movs	r2, #0
 8013976:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8013978:	4b1c      	ldr	r3, [pc, #112]	; (80139ec <MX_SAI2_Init+0x148>)
 801397a:	2200      	movs	r2, #0
 801397c:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 801397e:	4b1b      	ldr	r3, [pc, #108]	; (80139ec <MX_SAI2_Init+0x148>)
 8013980:	2200      	movs	r2, #0
 8013982:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8013984:	4b19      	ldr	r3, [pc, #100]	; (80139ec <MX_SAI2_Init+0x148>)
 8013986:	2200      	movs	r2, #0
 8013988:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 801398a:	4b18      	ldr	r3, [pc, #96]	; (80139ec <MX_SAI2_Init+0x148>)
 801398c:	2200      	movs	r2, #0
 801398e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8013990:	4b16      	ldr	r3, [pc, #88]	; (80139ec <MX_SAI2_Init+0x148>)
 8013992:	2200      	movs	r2, #0
 8013994:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 24;
 8013996:	4b15      	ldr	r3, [pc, #84]	; (80139ec <MX_SAI2_Init+0x148>)
 8013998:	2218      	movs	r2, #24
 801399a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 801399c:	4b13      	ldr	r3, [pc, #76]	; (80139ec <MX_SAI2_Init+0x148>)
 801399e:	2201      	movs	r2, #1
 80139a0:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80139a2:	4b12      	ldr	r3, [pc, #72]	; (80139ec <MX_SAI2_Init+0x148>)
 80139a4:	2200      	movs	r2, #0
 80139a6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80139a8:	4b10      	ldr	r3, [pc, #64]	; (80139ec <MX_SAI2_Init+0x148>)
 80139aa:	2200      	movs	r2, #0
 80139ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80139ae:	4b0f      	ldr	r3, [pc, #60]	; (80139ec <MX_SAI2_Init+0x148>)
 80139b0:	2200      	movs	r2, #0
 80139b2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80139b4:	4b0d      	ldr	r3, [pc, #52]	; (80139ec <MX_SAI2_Init+0x148>)
 80139b6:	2200      	movs	r2, #0
 80139b8:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80139ba:	4b0c      	ldr	r3, [pc, #48]	; (80139ec <MX_SAI2_Init+0x148>)
 80139bc:	2200      	movs	r2, #0
 80139be:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80139c0:	4b0a      	ldr	r3, [pc, #40]	; (80139ec <MX_SAI2_Init+0x148>)
 80139c2:	2201      	movs	r2, #1
 80139c4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80139c6:	4b09      	ldr	r3, [pc, #36]	; (80139ec <MX_SAI2_Init+0x148>)
 80139c8:	2200      	movs	r2, #0
 80139ca:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80139cc:	4807      	ldr	r0, [pc, #28]	; (80139ec <MX_SAI2_Init+0x148>)
 80139ce:	f7f2 f9ad 	bl	8005d2c <HAL_SAI_Init>
 80139d2:	4603      	mov	r3, r0
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d001      	beq.n	80139dc <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 80139d8:	f001 f846 	bl	8014a68 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80139dc:	bf00      	nop
 80139de:	bd80      	pop	{r7, pc}
 80139e0:	20010a64 	.word	0x20010a64
 80139e4:	40015c04 	.word	0x40015c04
 80139e8:	0002ee00 	.word	0x0002ee00
 80139ec:	20010900 	.word	0x20010900
 80139f0:	40015c24 	.word	0x40015c24

080139f4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80139f4:	b480      	push	{r7}
 80139f6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80139f8:	4b0c      	ldr	r3, [pc, #48]	; (8013a2c <MX_SDMMC1_SD_Init+0x38>)
 80139fa:	4a0d      	ldr	r2, [pc, #52]	; (8013a30 <MX_SDMMC1_SD_Init+0x3c>)
 80139fc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80139fe:	4b0b      	ldr	r3, [pc, #44]	; (8013a2c <MX_SDMMC1_SD_Init+0x38>)
 8013a00:	2200      	movs	r2, #0
 8013a02:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8013a04:	4b09      	ldr	r3, [pc, #36]	; (8013a2c <MX_SDMMC1_SD_Init+0x38>)
 8013a06:	2200      	movs	r2, #0
 8013a08:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8013a0a:	4b08      	ldr	r3, [pc, #32]	; (8013a2c <MX_SDMMC1_SD_Init+0x38>)
 8013a0c:	2200      	movs	r2, #0
 8013a0e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8013a10:	4b06      	ldr	r3, [pc, #24]	; (8013a2c <MX_SDMMC1_SD_Init+0x38>)
 8013a12:	2200      	movs	r2, #0
 8013a14:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8013a16:	4b05      	ldr	r3, [pc, #20]	; (8013a2c <MX_SDMMC1_SD_Init+0x38>)
 8013a18:	2200      	movs	r2, #0
 8013a1a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8013a1c:	4b03      	ldr	r3, [pc, #12]	; (8013a2c <MX_SDMMC1_SD_Init+0x38>)
 8013a1e:	2200      	movs	r2, #0
 8013a20:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8013a22:	bf00      	nop
 8013a24:	46bd      	mov	sp, r7
 8013a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a2a:	4770      	bx	lr
 8013a2c:	20010b68 	.word	0x20010b68
 8013a30:	40012c00 	.word	0x40012c00

08013a34 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8013a34:	b580      	push	{r7, lr}
 8013a36:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8013a38:	4b15      	ldr	r3, [pc, #84]	; (8013a90 <MX_SPDIFRX_Init+0x5c>)
 8013a3a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8013a3e:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8013a40:	4b13      	ldr	r3, [pc, #76]	; (8013a90 <MX_SPDIFRX_Init+0x5c>)
 8013a42:	2200      	movs	r2, #0
 8013a44:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8013a46:	4b12      	ldr	r3, [pc, #72]	; (8013a90 <MX_SPDIFRX_Init+0x5c>)
 8013a48:	2200      	movs	r2, #0
 8013a4a:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8013a4c:	4b10      	ldr	r3, [pc, #64]	; (8013a90 <MX_SPDIFRX_Init+0x5c>)
 8013a4e:	2200      	movs	r2, #0
 8013a50:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8013a52:	4b0f      	ldr	r3, [pc, #60]	; (8013a90 <MX_SPDIFRX_Init+0x5c>)
 8013a54:	2200      	movs	r2, #0
 8013a56:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8013a58:	4b0d      	ldr	r3, [pc, #52]	; (8013a90 <MX_SPDIFRX_Init+0x5c>)
 8013a5a:	2200      	movs	r2, #0
 8013a5c:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8013a5e:	4b0c      	ldr	r3, [pc, #48]	; (8013a90 <MX_SPDIFRX_Init+0x5c>)
 8013a60:	2200      	movs	r2, #0
 8013a62:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8013a64:	4b0a      	ldr	r3, [pc, #40]	; (8013a90 <MX_SPDIFRX_Init+0x5c>)
 8013a66:	2200      	movs	r2, #0
 8013a68:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8013a6a:	4b09      	ldr	r3, [pc, #36]	; (8013a90 <MX_SPDIFRX_Init+0x5c>)
 8013a6c:	2200      	movs	r2, #0
 8013a6e:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8013a70:	4b07      	ldr	r3, [pc, #28]	; (8013a90 <MX_SPDIFRX_Init+0x5c>)
 8013a72:	2200      	movs	r2, #0
 8013a74:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8013a76:	4b06      	ldr	r3, [pc, #24]	; (8013a90 <MX_SPDIFRX_Init+0x5c>)
 8013a78:	2200      	movs	r2, #0
 8013a7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8013a7c:	4804      	ldr	r0, [pc, #16]	; (8013a90 <MX_SPDIFRX_Init+0x5c>)
 8013a7e:	f7f3 fe13 	bl	80076a8 <HAL_SPDIFRX_Init>
 8013a82:	4603      	mov	r3, r0
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d001      	beq.n	8013a8c <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8013a88:	f000 ffee 	bl	8014a68 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8013a8c:	bf00      	nop
 8013a8e:	bd80      	pop	{r7, pc}
 8013a90:	20010a18 	.word	0x20010a18

08013a94 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8013a94:	b580      	push	{r7, lr}
 8013a96:	b09a      	sub	sp, #104	; 0x68
 8013a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8013a9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013a9e:	2200      	movs	r2, #0
 8013aa0:	601a      	str	r2, [r3, #0]
 8013aa2:	605a      	str	r2, [r3, #4]
 8013aa4:	609a      	str	r2, [r3, #8]
 8013aa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013aa8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013aac:	2200      	movs	r2, #0
 8013aae:	601a      	str	r2, [r3, #0]
 8013ab0:	605a      	str	r2, [r3, #4]
 8013ab2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8013ab4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013ab8:	2200      	movs	r2, #0
 8013aba:	601a      	str	r2, [r3, #0]
 8013abc:	605a      	str	r2, [r3, #4]
 8013abe:	609a      	str	r2, [r3, #8]
 8013ac0:	60da      	str	r2, [r3, #12]
 8013ac2:	611a      	str	r2, [r3, #16]
 8013ac4:	615a      	str	r2, [r3, #20]
 8013ac6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8013ac8:	1d3b      	adds	r3, r7, #4
 8013aca:	222c      	movs	r2, #44	; 0x2c
 8013acc:	2100      	movs	r1, #0
 8013ace:	4618      	mov	r0, r3
 8013ad0:	f002 fe20 	bl	8016714 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8013ad4:	4b43      	ldr	r3, [pc, #268]	; (8013be4 <MX_TIM1_Init+0x150>)
 8013ad6:	4a44      	ldr	r2, [pc, #272]	; (8013be8 <MX_TIM1_Init+0x154>)
 8013ad8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8013ada:	4b42      	ldr	r3, [pc, #264]	; (8013be4 <MX_TIM1_Init+0x150>)
 8013adc:	2200      	movs	r2, #0
 8013ade:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013ae0:	4b40      	ldr	r3, [pc, #256]	; (8013be4 <MX_TIM1_Init+0x150>)
 8013ae2:	2200      	movs	r2, #0
 8013ae4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8013ae6:	4b3f      	ldr	r3, [pc, #252]	; (8013be4 <MX_TIM1_Init+0x150>)
 8013ae8:	2200      	movs	r2, #0
 8013aea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8013aec:	4b3d      	ldr	r3, [pc, #244]	; (8013be4 <MX_TIM1_Init+0x150>)
 8013aee:	2200      	movs	r2, #0
 8013af0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8013af2:	4b3c      	ldr	r3, [pc, #240]	; (8013be4 <MX_TIM1_Init+0x150>)
 8013af4:	2200      	movs	r2, #0
 8013af6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013af8:	4b3a      	ldr	r3, [pc, #232]	; (8013be4 <MX_TIM1_Init+0x150>)
 8013afa:	2200      	movs	r2, #0
 8013afc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8013afe:	4839      	ldr	r0, [pc, #228]	; (8013be4 <MX_TIM1_Init+0x150>)
 8013b00:	f7f3 fe2e 	bl	8007760 <HAL_TIM_Base_Init>
 8013b04:	4603      	mov	r3, r0
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d001      	beq.n	8013b0e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8013b0a:	f000 ffad 	bl	8014a68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8013b0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013b12:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8013b14:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013b18:	4619      	mov	r1, r3
 8013b1a:	4832      	ldr	r0, [pc, #200]	; (8013be4 <MX_TIM1_Init+0x150>)
 8013b1c:	f7f4 f8d8 	bl	8007cd0 <HAL_TIM_ConfigClockSource>
 8013b20:	4603      	mov	r3, r0
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d001      	beq.n	8013b2a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8013b26:	f000 ff9f 	bl	8014a68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8013b2a:	482e      	ldr	r0, [pc, #184]	; (8013be4 <MX_TIM1_Init+0x150>)
 8013b2c:	f7f3 fe6e 	bl	800780c <HAL_TIM_PWM_Init>
 8013b30:	4603      	mov	r3, r0
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d001      	beq.n	8013b3a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8013b36:	f000 ff97 	bl	8014a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8013b3a:	2300      	movs	r3, #0
 8013b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8013b3e:	2300      	movs	r3, #0
 8013b40:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8013b42:	2300      	movs	r3, #0
 8013b44:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8013b46:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013b4a:	4619      	mov	r1, r3
 8013b4c:	4825      	ldr	r0, [pc, #148]	; (8013be4 <MX_TIM1_Init+0x150>)
 8013b4e:	f7f4 fd45 	bl	80085dc <HAL_TIMEx_MasterConfigSynchronization>
 8013b52:	4603      	mov	r3, r0
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d001      	beq.n	8013b5c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8013b58:	f000 ff86 	bl	8014a68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8013b5c:	2360      	movs	r3, #96	; 0x60
 8013b5e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8013b60:	2300      	movs	r3, #0
 8013b62:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8013b64:	2300      	movs	r3, #0
 8013b66:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8013b68:	2300      	movs	r3, #0
 8013b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8013b70:	2300      	movs	r3, #0
 8013b72:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8013b74:	2300      	movs	r3, #0
 8013b76:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8013b78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013b7c:	2200      	movs	r2, #0
 8013b7e:	4619      	mov	r1, r3
 8013b80:	4818      	ldr	r0, [pc, #96]	; (8013be4 <MX_TIM1_Init+0x150>)
 8013b82:	f7f3 ff8d 	bl	8007aa0 <HAL_TIM_PWM_ConfigChannel>
 8013b86:	4603      	mov	r3, r0
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d001      	beq.n	8013b90 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8013b8c:	f000 ff6c 	bl	8014a68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8013b90:	2300      	movs	r3, #0
 8013b92:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8013b94:	2300      	movs	r3, #0
 8013b96:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8013b98:	2300      	movs	r3, #0
 8013b9a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8013b9c:	2300      	movs	r3, #0
 8013b9e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8013ba0:	2300      	movs	r3, #0
 8013ba2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8013ba4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013ba8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8013baa:	2300      	movs	r3, #0
 8013bac:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8013bae:	2300      	movs	r3, #0
 8013bb0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8013bb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8013bb6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8013bb8:	2300      	movs	r3, #0
 8013bba:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8013bbc:	2300      	movs	r3, #0
 8013bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8013bc0:	1d3b      	adds	r3, r7, #4
 8013bc2:	4619      	mov	r1, r3
 8013bc4:	4807      	ldr	r0, [pc, #28]	; (8013be4 <MX_TIM1_Init+0x150>)
 8013bc6:	f7f4 fd65 	bl	8008694 <HAL_TIMEx_ConfigBreakDeadTime>
 8013bca:	4603      	mov	r3, r0
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d001      	beq.n	8013bd4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8013bd0:	f000 ff4a 	bl	8014a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8013bd4:	4803      	ldr	r0, [pc, #12]	; (8013be4 <MX_TIM1_Init+0x150>)
 8013bd6:	f001 fe99 	bl	801590c <HAL_TIM_MspPostInit>

}
 8013bda:	bf00      	nop
 8013bdc:	3768      	adds	r7, #104	; 0x68
 8013bde:	46bd      	mov	sp, r7
 8013be0:	bd80      	pop	{r7, pc}
 8013be2:	bf00      	nop
 8013be4:	20011488 	.word	0x20011488
 8013be8:	40010000 	.word	0x40010000

08013bec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8013bec:	b580      	push	{r7, lr}
 8013bee:	b08e      	sub	sp, #56	; 0x38
 8013bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8013bf2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013bf6:	2200      	movs	r2, #0
 8013bf8:	601a      	str	r2, [r3, #0]
 8013bfa:	605a      	str	r2, [r3, #4]
 8013bfc:	609a      	str	r2, [r3, #8]
 8013bfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013c00:	f107 031c 	add.w	r3, r7, #28
 8013c04:	2200      	movs	r2, #0
 8013c06:	601a      	str	r2, [r3, #0]
 8013c08:	605a      	str	r2, [r3, #4]
 8013c0a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8013c0c:	463b      	mov	r3, r7
 8013c0e:	2200      	movs	r2, #0
 8013c10:	601a      	str	r2, [r3, #0]
 8013c12:	605a      	str	r2, [r3, #4]
 8013c14:	609a      	str	r2, [r3, #8]
 8013c16:	60da      	str	r2, [r3, #12]
 8013c18:	611a      	str	r2, [r3, #16]
 8013c1a:	615a      	str	r2, [r3, #20]
 8013c1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8013c1e:	4b2d      	ldr	r3, [pc, #180]	; (8013cd4 <MX_TIM2_Init+0xe8>)
 8013c20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8013c24:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8013c26:	4b2b      	ldr	r3, [pc, #172]	; (8013cd4 <MX_TIM2_Init+0xe8>)
 8013c28:	2200      	movs	r2, #0
 8013c2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013c2c:	4b29      	ldr	r3, [pc, #164]	; (8013cd4 <MX_TIM2_Init+0xe8>)
 8013c2e:	2200      	movs	r2, #0
 8013c30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8013c32:	4b28      	ldr	r3, [pc, #160]	; (8013cd4 <MX_TIM2_Init+0xe8>)
 8013c34:	2200      	movs	r2, #0
 8013c36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8013c38:	4b26      	ldr	r3, [pc, #152]	; (8013cd4 <MX_TIM2_Init+0xe8>)
 8013c3a:	2200      	movs	r2, #0
 8013c3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013c3e:	4b25      	ldr	r3, [pc, #148]	; (8013cd4 <MX_TIM2_Init+0xe8>)
 8013c40:	2200      	movs	r2, #0
 8013c42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8013c44:	4823      	ldr	r0, [pc, #140]	; (8013cd4 <MX_TIM2_Init+0xe8>)
 8013c46:	f7f3 fd8b 	bl	8007760 <HAL_TIM_Base_Init>
 8013c4a:	4603      	mov	r3, r0
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d001      	beq.n	8013c54 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8013c50:	f000 ff0a 	bl	8014a68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8013c54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013c58:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8013c5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013c5e:	4619      	mov	r1, r3
 8013c60:	481c      	ldr	r0, [pc, #112]	; (8013cd4 <MX_TIM2_Init+0xe8>)
 8013c62:	f7f4 f835 	bl	8007cd0 <HAL_TIM_ConfigClockSource>
 8013c66:	4603      	mov	r3, r0
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d001      	beq.n	8013c70 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8013c6c:	f000 fefc 	bl	8014a68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8013c70:	4818      	ldr	r0, [pc, #96]	; (8013cd4 <MX_TIM2_Init+0xe8>)
 8013c72:	f7f3 fdcb 	bl	800780c <HAL_TIM_PWM_Init>
 8013c76:	4603      	mov	r3, r0
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d001      	beq.n	8013c80 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8013c7c:	f000 fef4 	bl	8014a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8013c80:	2300      	movs	r3, #0
 8013c82:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8013c84:	2300      	movs	r3, #0
 8013c86:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8013c88:	f107 031c 	add.w	r3, r7, #28
 8013c8c:	4619      	mov	r1, r3
 8013c8e:	4811      	ldr	r0, [pc, #68]	; (8013cd4 <MX_TIM2_Init+0xe8>)
 8013c90:	f7f4 fca4 	bl	80085dc <HAL_TIMEx_MasterConfigSynchronization>
 8013c94:	4603      	mov	r3, r0
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d001      	beq.n	8013c9e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8013c9a:	f000 fee5 	bl	8014a68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8013c9e:	2360      	movs	r3, #96	; 0x60
 8013ca0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8013ca6:	2300      	movs	r3, #0
 8013ca8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8013caa:	2300      	movs	r3, #0
 8013cac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8013cae:	463b      	mov	r3, r7
 8013cb0:	2200      	movs	r2, #0
 8013cb2:	4619      	mov	r1, r3
 8013cb4:	4807      	ldr	r0, [pc, #28]	; (8013cd4 <MX_TIM2_Init+0xe8>)
 8013cb6:	f7f3 fef3 	bl	8007aa0 <HAL_TIM_PWM_ConfigChannel>
 8013cba:	4603      	mov	r3, r0
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d001      	beq.n	8013cc4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8013cc0:	f000 fed2 	bl	8014a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8013cc4:	4803      	ldr	r0, [pc, #12]	; (8013cd4 <MX_TIM2_Init+0xe8>)
 8013cc6:	f001 fe21 	bl	801590c <HAL_TIM_MspPostInit>

}
 8013cca:	bf00      	nop
 8013ccc:	3738      	adds	r7, #56	; 0x38
 8013cce:	46bd      	mov	sp, r7
 8013cd0:	bd80      	pop	{r7, pc}
 8013cd2:	bf00      	nop
 8013cd4:	2001184c 	.word	0x2001184c

08013cd8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8013cd8:	b580      	push	{r7, lr}
 8013cda:	b08e      	sub	sp, #56	; 0x38
 8013cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8013cde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013ce2:	2200      	movs	r2, #0
 8013ce4:	601a      	str	r2, [r3, #0]
 8013ce6:	605a      	str	r2, [r3, #4]
 8013ce8:	609a      	str	r2, [r3, #8]
 8013cea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013cec:	f107 031c 	add.w	r3, r7, #28
 8013cf0:	2200      	movs	r2, #0
 8013cf2:	601a      	str	r2, [r3, #0]
 8013cf4:	605a      	str	r2, [r3, #4]
 8013cf6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8013cf8:	463b      	mov	r3, r7
 8013cfa:	2200      	movs	r2, #0
 8013cfc:	601a      	str	r2, [r3, #0]
 8013cfe:	605a      	str	r2, [r3, #4]
 8013d00:	609a      	str	r2, [r3, #8]
 8013d02:	60da      	str	r2, [r3, #12]
 8013d04:	611a      	str	r2, [r3, #16]
 8013d06:	615a      	str	r2, [r3, #20]
 8013d08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8013d0a:	4b2c      	ldr	r3, [pc, #176]	; (8013dbc <MX_TIM3_Init+0xe4>)
 8013d0c:	4a2c      	ldr	r2, [pc, #176]	; (8013dc0 <MX_TIM3_Init+0xe8>)
 8013d0e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8013d10:	4b2a      	ldr	r3, [pc, #168]	; (8013dbc <MX_TIM3_Init+0xe4>)
 8013d12:	2200      	movs	r2, #0
 8013d14:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013d16:	4b29      	ldr	r3, [pc, #164]	; (8013dbc <MX_TIM3_Init+0xe4>)
 8013d18:	2200      	movs	r2, #0
 8013d1a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8013d1c:	4b27      	ldr	r3, [pc, #156]	; (8013dbc <MX_TIM3_Init+0xe4>)
 8013d1e:	2200      	movs	r2, #0
 8013d20:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8013d22:	4b26      	ldr	r3, [pc, #152]	; (8013dbc <MX_TIM3_Init+0xe4>)
 8013d24:	2200      	movs	r2, #0
 8013d26:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013d28:	4b24      	ldr	r3, [pc, #144]	; (8013dbc <MX_TIM3_Init+0xe4>)
 8013d2a:	2200      	movs	r2, #0
 8013d2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8013d2e:	4823      	ldr	r0, [pc, #140]	; (8013dbc <MX_TIM3_Init+0xe4>)
 8013d30:	f7f3 fd16 	bl	8007760 <HAL_TIM_Base_Init>
 8013d34:	4603      	mov	r3, r0
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d001      	beq.n	8013d3e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8013d3a:	f000 fe95 	bl	8014a68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8013d3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013d42:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8013d44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013d48:	4619      	mov	r1, r3
 8013d4a:	481c      	ldr	r0, [pc, #112]	; (8013dbc <MX_TIM3_Init+0xe4>)
 8013d4c:	f7f3 ffc0 	bl	8007cd0 <HAL_TIM_ConfigClockSource>
 8013d50:	4603      	mov	r3, r0
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d001      	beq.n	8013d5a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8013d56:	f000 fe87 	bl	8014a68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8013d5a:	4818      	ldr	r0, [pc, #96]	; (8013dbc <MX_TIM3_Init+0xe4>)
 8013d5c:	f7f3 fd56 	bl	800780c <HAL_TIM_PWM_Init>
 8013d60:	4603      	mov	r3, r0
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d001      	beq.n	8013d6a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8013d66:	f000 fe7f 	bl	8014a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8013d6e:	2300      	movs	r3, #0
 8013d70:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8013d72:	f107 031c 	add.w	r3, r7, #28
 8013d76:	4619      	mov	r1, r3
 8013d78:	4810      	ldr	r0, [pc, #64]	; (8013dbc <MX_TIM3_Init+0xe4>)
 8013d7a:	f7f4 fc2f 	bl	80085dc <HAL_TIMEx_MasterConfigSynchronization>
 8013d7e:	4603      	mov	r3, r0
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d001      	beq.n	8013d88 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8013d84:	f000 fe70 	bl	8014a68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8013d88:	2360      	movs	r3, #96	; 0x60
 8013d8a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8013d90:	2300      	movs	r3, #0
 8013d92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8013d94:	2300      	movs	r3, #0
 8013d96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8013d98:	463b      	mov	r3, r7
 8013d9a:	2200      	movs	r2, #0
 8013d9c:	4619      	mov	r1, r3
 8013d9e:	4807      	ldr	r0, [pc, #28]	; (8013dbc <MX_TIM3_Init+0xe4>)
 8013da0:	f7f3 fe7e 	bl	8007aa0 <HAL_TIM_PWM_ConfigChannel>
 8013da4:	4603      	mov	r3, r0
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d001      	beq.n	8013dae <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8013daa:	f000 fe5d 	bl	8014a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8013dae:	4803      	ldr	r0, [pc, #12]	; (8013dbc <MX_TIM3_Init+0xe4>)
 8013db0:	f001 fdac 	bl	801590c <HAL_TIM_MspPostInit>

}
 8013db4:	bf00      	nop
 8013db6:	3738      	adds	r7, #56	; 0x38
 8013db8:	46bd      	mov	sp, r7
 8013dba:	bd80      	pop	{r7, pc}
 8013dbc:	20010c2c 	.word	0x20010c2c
 8013dc0:	40000400 	.word	0x40000400

08013dc4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8013dc4:	b580      	push	{r7, lr}
 8013dc6:	b08e      	sub	sp, #56	; 0x38
 8013dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8013dca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013dce:	2200      	movs	r2, #0
 8013dd0:	601a      	str	r2, [r3, #0]
 8013dd2:	605a      	str	r2, [r3, #4]
 8013dd4:	609a      	str	r2, [r3, #8]
 8013dd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013dd8:	f107 031c 	add.w	r3, r7, #28
 8013ddc:	2200      	movs	r2, #0
 8013dde:	601a      	str	r2, [r3, #0]
 8013de0:	605a      	str	r2, [r3, #4]
 8013de2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8013de4:	463b      	mov	r3, r7
 8013de6:	2200      	movs	r2, #0
 8013de8:	601a      	str	r2, [r3, #0]
 8013dea:	605a      	str	r2, [r3, #4]
 8013dec:	609a      	str	r2, [r3, #8]
 8013dee:	60da      	str	r2, [r3, #12]
 8013df0:	611a      	str	r2, [r3, #16]
 8013df2:	615a      	str	r2, [r3, #20]
 8013df4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8013df6:	4b2c      	ldr	r3, [pc, #176]	; (8013ea8 <MX_TIM5_Init+0xe4>)
 8013df8:	4a2c      	ldr	r2, [pc, #176]	; (8013eac <MX_TIM5_Init+0xe8>)
 8013dfa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8013dfc:	4b2a      	ldr	r3, [pc, #168]	; (8013ea8 <MX_TIM5_Init+0xe4>)
 8013dfe:	2200      	movs	r2, #0
 8013e00:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013e02:	4b29      	ldr	r3, [pc, #164]	; (8013ea8 <MX_TIM5_Init+0xe4>)
 8013e04:	2200      	movs	r2, #0
 8013e06:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8013e08:	4b27      	ldr	r3, [pc, #156]	; (8013ea8 <MX_TIM5_Init+0xe4>)
 8013e0a:	2200      	movs	r2, #0
 8013e0c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8013e0e:	4b26      	ldr	r3, [pc, #152]	; (8013ea8 <MX_TIM5_Init+0xe4>)
 8013e10:	2200      	movs	r2, #0
 8013e12:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013e14:	4b24      	ldr	r3, [pc, #144]	; (8013ea8 <MX_TIM5_Init+0xe4>)
 8013e16:	2200      	movs	r2, #0
 8013e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8013e1a:	4823      	ldr	r0, [pc, #140]	; (8013ea8 <MX_TIM5_Init+0xe4>)
 8013e1c:	f7f3 fca0 	bl	8007760 <HAL_TIM_Base_Init>
 8013e20:	4603      	mov	r3, r0
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d001      	beq.n	8013e2a <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8013e26:	f000 fe1f 	bl	8014a68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8013e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8013e30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013e34:	4619      	mov	r1, r3
 8013e36:	481c      	ldr	r0, [pc, #112]	; (8013ea8 <MX_TIM5_Init+0xe4>)
 8013e38:	f7f3 ff4a 	bl	8007cd0 <HAL_TIM_ConfigClockSource>
 8013e3c:	4603      	mov	r3, r0
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d001      	beq.n	8013e46 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8013e42:	f000 fe11 	bl	8014a68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8013e46:	4818      	ldr	r0, [pc, #96]	; (8013ea8 <MX_TIM5_Init+0xe4>)
 8013e48:	f7f3 fce0 	bl	800780c <HAL_TIM_PWM_Init>
 8013e4c:	4603      	mov	r3, r0
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d001      	beq.n	8013e56 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8013e52:	f000 fe09 	bl	8014a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8013e56:	2300      	movs	r3, #0
 8013e58:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8013e5a:	2300      	movs	r3, #0
 8013e5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8013e5e:	f107 031c 	add.w	r3, r7, #28
 8013e62:	4619      	mov	r1, r3
 8013e64:	4810      	ldr	r0, [pc, #64]	; (8013ea8 <MX_TIM5_Init+0xe4>)
 8013e66:	f7f4 fbb9 	bl	80085dc <HAL_TIMEx_MasterConfigSynchronization>
 8013e6a:	4603      	mov	r3, r0
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d001      	beq.n	8013e74 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8013e70:	f000 fdfa 	bl	8014a68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8013e74:	2360      	movs	r3, #96	; 0x60
 8013e76:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8013e78:	2300      	movs	r3, #0
 8013e7a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8013e80:	2300      	movs	r3, #0
 8013e82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8013e84:	463b      	mov	r3, r7
 8013e86:	220c      	movs	r2, #12
 8013e88:	4619      	mov	r1, r3
 8013e8a:	4807      	ldr	r0, [pc, #28]	; (8013ea8 <MX_TIM5_Init+0xe4>)
 8013e8c:	f7f3 fe08 	bl	8007aa0 <HAL_TIM_PWM_ConfigChannel>
 8013e90:	4603      	mov	r3, r0
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d001      	beq.n	8013e9a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8013e96:	f000 fde7 	bl	8014a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8013e9a:	4803      	ldr	r0, [pc, #12]	; (8013ea8 <MX_TIM5_Init+0xe4>)
 8013e9c:	f001 fd36 	bl	801590c <HAL_TIM_MspPostInit>

}
 8013ea0:	bf00      	nop
 8013ea2:	3738      	adds	r7, #56	; 0x38
 8013ea4:	46bd      	mov	sp, r7
 8013ea6:	bd80      	pop	{r7, pc}
 8013ea8:	20010bec 	.word	0x20010bec
 8013eac:	40000c00 	.word	0x40000c00

08013eb0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8013eb0:	b580      	push	{r7, lr}
 8013eb2:	b088      	sub	sp, #32
 8013eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8013eb6:	f107 0310 	add.w	r3, r7, #16
 8013eba:	2200      	movs	r2, #0
 8013ebc:	601a      	str	r2, [r3, #0]
 8013ebe:	605a      	str	r2, [r3, #4]
 8013ec0:	609a      	str	r2, [r3, #8]
 8013ec2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8013ec4:	1d3b      	adds	r3, r7, #4
 8013ec6:	2200      	movs	r2, #0
 8013ec8:	601a      	str	r2, [r3, #0]
 8013eca:	605a      	str	r2, [r3, #4]
 8013ecc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8013ece:	4b1f      	ldr	r3, [pc, #124]	; (8013f4c <MX_TIM8_Init+0x9c>)
 8013ed0:	4a1f      	ldr	r2, [pc, #124]	; (8013f50 <MX_TIM8_Init+0xa0>)
 8013ed2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8013ed4:	4b1d      	ldr	r3, [pc, #116]	; (8013f4c <MX_TIM8_Init+0x9c>)
 8013ed6:	2200      	movs	r2, #0
 8013ed8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013eda:	4b1c      	ldr	r3, [pc, #112]	; (8013f4c <MX_TIM8_Init+0x9c>)
 8013edc:	2200      	movs	r2, #0
 8013ede:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 8013ee0:	4b1a      	ldr	r3, [pc, #104]	; (8013f4c <MX_TIM8_Init+0x9c>)
 8013ee2:	2200      	movs	r2, #0
 8013ee4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8013ee6:	4b19      	ldr	r3, [pc, #100]	; (8013f4c <MX_TIM8_Init+0x9c>)
 8013ee8:	2200      	movs	r2, #0
 8013eea:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8013eec:	4b17      	ldr	r3, [pc, #92]	; (8013f4c <MX_TIM8_Init+0x9c>)
 8013eee:	2200      	movs	r2, #0
 8013ef0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013ef2:	4b16      	ldr	r3, [pc, #88]	; (8013f4c <MX_TIM8_Init+0x9c>)
 8013ef4:	2200      	movs	r2, #0
 8013ef6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8013ef8:	4814      	ldr	r0, [pc, #80]	; (8013f4c <MX_TIM8_Init+0x9c>)
 8013efa:	f7f3 fc31 	bl	8007760 <HAL_TIM_Base_Init>
 8013efe:	4603      	mov	r3, r0
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d001      	beq.n	8013f08 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8013f04:	f000 fdb0 	bl	8014a68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8013f08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013f0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8013f0e:	f107 0310 	add.w	r3, r7, #16
 8013f12:	4619      	mov	r1, r3
 8013f14:	480d      	ldr	r0, [pc, #52]	; (8013f4c <MX_TIM8_Init+0x9c>)
 8013f16:	f7f3 fedb 	bl	8007cd0 <HAL_TIM_ConfigClockSource>
 8013f1a:	4603      	mov	r3, r0
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d001      	beq.n	8013f24 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8013f20:	f000 fda2 	bl	8014a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8013f24:	2300      	movs	r3, #0
 8013f26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8013f28:	2300      	movs	r3, #0
 8013f2a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8013f2c:	2300      	movs	r3, #0
 8013f2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8013f30:	1d3b      	adds	r3, r7, #4
 8013f32:	4619      	mov	r1, r3
 8013f34:	4805      	ldr	r0, [pc, #20]	; (8013f4c <MX_TIM8_Init+0x9c>)
 8013f36:	f7f4 fb51 	bl	80085dc <HAL_TIMEx_MasterConfigSynchronization>
 8013f3a:	4603      	mov	r3, r0
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d001      	beq.n	8013f44 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8013f40:	f000 fd92 	bl	8014a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8013f44:	bf00      	nop
 8013f46:	3720      	adds	r7, #32
 8013f48:	46bd      	mov	sp, r7
 8013f4a:	bd80      	pop	{r7, pc}
 8013f4c:	200109d8 	.word	0x200109d8
 8013f50:	40010400 	.word	0x40010400

08013f54 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8013f54:	b580      	push	{r7, lr}
 8013f56:	b088      	sub	sp, #32
 8013f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8013f5a:	1d3b      	adds	r3, r7, #4
 8013f5c:	2200      	movs	r2, #0
 8013f5e:	601a      	str	r2, [r3, #0]
 8013f60:	605a      	str	r2, [r3, #4]
 8013f62:	609a      	str	r2, [r3, #8]
 8013f64:	60da      	str	r2, [r3, #12]
 8013f66:	611a      	str	r2, [r3, #16]
 8013f68:	615a      	str	r2, [r3, #20]
 8013f6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8013f6c:	4b19      	ldr	r3, [pc, #100]	; (8013fd4 <MX_TIM12_Init+0x80>)
 8013f6e:	4a1a      	ldr	r2, [pc, #104]	; (8013fd8 <MX_TIM12_Init+0x84>)
 8013f70:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8013f72:	4b18      	ldr	r3, [pc, #96]	; (8013fd4 <MX_TIM12_Init+0x80>)
 8013f74:	2200      	movs	r2, #0
 8013f76:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8013f78:	4b16      	ldr	r3, [pc, #88]	; (8013fd4 <MX_TIM12_Init+0x80>)
 8013f7a:	2200      	movs	r2, #0
 8013f7c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 8013f7e:	4b15      	ldr	r3, [pc, #84]	; (8013fd4 <MX_TIM12_Init+0x80>)
 8013f80:	2200      	movs	r2, #0
 8013f82:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8013f84:	4b13      	ldr	r3, [pc, #76]	; (8013fd4 <MX_TIM12_Init+0x80>)
 8013f86:	2200      	movs	r2, #0
 8013f88:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8013f8a:	4b12      	ldr	r3, [pc, #72]	; (8013fd4 <MX_TIM12_Init+0x80>)
 8013f8c:	2200      	movs	r2, #0
 8013f8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8013f90:	4810      	ldr	r0, [pc, #64]	; (8013fd4 <MX_TIM12_Init+0x80>)
 8013f92:	f7f3 fc3b 	bl	800780c <HAL_TIM_PWM_Init>
 8013f96:	4603      	mov	r3, r0
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d001      	beq.n	8013fa0 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8013f9c:	f000 fd64 	bl	8014a68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8013fa0:	2360      	movs	r3, #96	; 0x60
 8013fa2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8013fa4:	2300      	movs	r3, #0
 8013fa6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8013fa8:	2300      	movs	r3, #0
 8013faa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8013fac:	2300      	movs	r3, #0
 8013fae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8013fb0:	1d3b      	adds	r3, r7, #4
 8013fb2:	2200      	movs	r2, #0
 8013fb4:	4619      	mov	r1, r3
 8013fb6:	4807      	ldr	r0, [pc, #28]	; (8013fd4 <MX_TIM12_Init+0x80>)
 8013fb8:	f7f3 fd72 	bl	8007aa0 <HAL_TIM_PWM_ConfigChannel>
 8013fbc:	4603      	mov	r3, r0
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d001      	beq.n	8013fc6 <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8013fc2:	f000 fd51 	bl	8014a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8013fc6:	4803      	ldr	r0, [pc, #12]	; (8013fd4 <MX_TIM12_Init+0x80>)
 8013fc8:	f001 fca0 	bl	801590c <HAL_TIM_MspPostInit>

}
 8013fcc:	bf00      	nop
 8013fce:	3720      	adds	r7, #32
 8013fd0:	46bd      	mov	sp, r7
 8013fd2:	bd80      	pop	{r7, pc}
 8013fd4:	2001188c 	.word	0x2001188c
 8013fd8:	40001800 	.word	0x40001800

08013fdc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8013fdc:	b580      	push	{r7, lr}
 8013fde:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8013fe0:	4b14      	ldr	r3, [pc, #80]	; (8014034 <MX_USART1_UART_Init+0x58>)
 8013fe2:	4a15      	ldr	r2, [pc, #84]	; (8014038 <MX_USART1_UART_Init+0x5c>)
 8013fe4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8013fe6:	4b13      	ldr	r3, [pc, #76]	; (8014034 <MX_USART1_UART_Init+0x58>)
 8013fe8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8013fec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8013fee:	4b11      	ldr	r3, [pc, #68]	; (8014034 <MX_USART1_UART_Init+0x58>)
 8013ff0:	2200      	movs	r2, #0
 8013ff2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8013ff4:	4b0f      	ldr	r3, [pc, #60]	; (8014034 <MX_USART1_UART_Init+0x58>)
 8013ff6:	2200      	movs	r2, #0
 8013ff8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8013ffa:	4b0e      	ldr	r3, [pc, #56]	; (8014034 <MX_USART1_UART_Init+0x58>)
 8013ffc:	2200      	movs	r2, #0
 8013ffe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8014000:	4b0c      	ldr	r3, [pc, #48]	; (8014034 <MX_USART1_UART_Init+0x58>)
 8014002:	220c      	movs	r2, #12
 8014004:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8014006:	4b0b      	ldr	r3, [pc, #44]	; (8014034 <MX_USART1_UART_Init+0x58>)
 8014008:	2200      	movs	r2, #0
 801400a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 801400c:	4b09      	ldr	r3, [pc, #36]	; (8014034 <MX_USART1_UART_Init+0x58>)
 801400e:	2200      	movs	r2, #0
 8014010:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8014012:	4b08      	ldr	r3, [pc, #32]	; (8014034 <MX_USART1_UART_Init+0x58>)
 8014014:	2200      	movs	r2, #0
 8014016:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8014018:	4b06      	ldr	r3, [pc, #24]	; (8014034 <MX_USART1_UART_Init+0x58>)
 801401a:	2200      	movs	r2, #0
 801401c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801401e:	4805      	ldr	r0, [pc, #20]	; (8014034 <MX_USART1_UART_Init+0x58>)
 8014020:	f7f4 fbd4 	bl	80087cc <HAL_UART_Init>
 8014024:	4603      	mov	r3, r0
 8014026:	2b00      	cmp	r3, #0
 8014028:	d001      	beq.n	801402e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 801402a:	f000 fd1d 	bl	8014a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 801402e:	bf00      	nop
 8014030:	bd80      	pop	{r7, pc}
 8014032:	bf00      	nop
 8014034:	200111b0 	.word	0x200111b0
 8014038:	40011000 	.word	0x40011000

0801403c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 801403c:	b580      	push	{r7, lr}
 801403e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8014040:	4b14      	ldr	r3, [pc, #80]	; (8014094 <MX_USART6_UART_Init+0x58>)
 8014042:	4a15      	ldr	r2, [pc, #84]	; (8014098 <MX_USART6_UART_Init+0x5c>)
 8014044:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8014046:	4b13      	ldr	r3, [pc, #76]	; (8014094 <MX_USART6_UART_Init+0x58>)
 8014048:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 801404c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 801404e:	4b11      	ldr	r3, [pc, #68]	; (8014094 <MX_USART6_UART_Init+0x58>)
 8014050:	2200      	movs	r2, #0
 8014052:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8014054:	4b0f      	ldr	r3, [pc, #60]	; (8014094 <MX_USART6_UART_Init+0x58>)
 8014056:	2200      	movs	r2, #0
 8014058:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 801405a:	4b0e      	ldr	r3, [pc, #56]	; (8014094 <MX_USART6_UART_Init+0x58>)
 801405c:	2200      	movs	r2, #0
 801405e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8014060:	4b0c      	ldr	r3, [pc, #48]	; (8014094 <MX_USART6_UART_Init+0x58>)
 8014062:	220c      	movs	r2, #12
 8014064:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8014066:	4b0b      	ldr	r3, [pc, #44]	; (8014094 <MX_USART6_UART_Init+0x58>)
 8014068:	2200      	movs	r2, #0
 801406a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 801406c:	4b09      	ldr	r3, [pc, #36]	; (8014094 <MX_USART6_UART_Init+0x58>)
 801406e:	2200      	movs	r2, #0
 8014070:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8014072:	4b08      	ldr	r3, [pc, #32]	; (8014094 <MX_USART6_UART_Init+0x58>)
 8014074:	2200      	movs	r2, #0
 8014076:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8014078:	4b06      	ldr	r3, [pc, #24]	; (8014094 <MX_USART6_UART_Init+0x58>)
 801407a:	2200      	movs	r2, #0
 801407c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 801407e:	4805      	ldr	r0, [pc, #20]	; (8014094 <MX_USART6_UART_Init+0x58>)
 8014080:	f7f4 fba4 	bl	80087cc <HAL_UART_Init>
 8014084:	4603      	mov	r3, r0
 8014086:	2b00      	cmp	r3, #0
 8014088:	d001      	beq.n	801408e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 801408a:	f000 fced 	bl	8014a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 801408e:	bf00      	nop
 8014090:	bd80      	pop	{r7, pc}
 8014092:	bf00      	nop
 8014094:	20011784 	.word	0x20011784
 8014098:	40011400 	.word	0x40011400

0801409c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 801409c:	b580      	push	{r7, lr}
 801409e:	b082      	sub	sp, #8
 80140a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80140a2:	4b10      	ldr	r3, [pc, #64]	; (80140e4 <MX_DMA_Init+0x48>)
 80140a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80140a6:	4a0f      	ldr	r2, [pc, #60]	; (80140e4 <MX_DMA_Init+0x48>)
 80140a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80140ac:	6313      	str	r3, [r2, #48]	; 0x30
 80140ae:	4b0d      	ldr	r3, [pc, #52]	; (80140e4 <MX_DMA_Init+0x48>)
 80140b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80140b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80140b6:	607b      	str	r3, [r7, #4]
 80140b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80140ba:	2200      	movs	r2, #0
 80140bc:	2105      	movs	r1, #5
 80140be:	203b      	movs	r0, #59	; 0x3b
 80140c0:	f7ec fd9e 	bl	8000c00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80140c4:	203b      	movs	r0, #59	; 0x3b
 80140c6:	f7ec fdb7 	bl	8000c38 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80140ca:	2200      	movs	r2, #0
 80140cc:	2105      	movs	r1, #5
 80140ce:	2045      	movs	r0, #69	; 0x45
 80140d0:	f7ec fd96 	bl	8000c00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80140d4:	2045      	movs	r0, #69	; 0x45
 80140d6:	f7ec fdaf 	bl	8000c38 <HAL_NVIC_EnableIRQ>

}
 80140da:	bf00      	nop
 80140dc:	3708      	adds	r7, #8
 80140de:	46bd      	mov	sp, r7
 80140e0:	bd80      	pop	{r7, pc}
 80140e2:	bf00      	nop
 80140e4:	40023800 	.word	0x40023800

080140e8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80140e8:	b580      	push	{r7, lr}
 80140ea:	b088      	sub	sp, #32
 80140ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80140ee:	1d3b      	adds	r3, r7, #4
 80140f0:	2200      	movs	r2, #0
 80140f2:	601a      	str	r2, [r3, #0]
 80140f4:	605a      	str	r2, [r3, #4]
 80140f6:	609a      	str	r2, [r3, #8]
 80140f8:	60da      	str	r2, [r3, #12]
 80140fa:	611a      	str	r2, [r3, #16]
 80140fc:	615a      	str	r2, [r3, #20]
 80140fe:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8014100:	4b1f      	ldr	r3, [pc, #124]	; (8014180 <MX_FMC_Init+0x98>)
 8014102:	4a20      	ldr	r2, [pc, #128]	; (8014184 <MX_FMC_Init+0x9c>)
 8014104:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8014106:	4b1e      	ldr	r3, [pc, #120]	; (8014180 <MX_FMC_Init+0x98>)
 8014108:	2200      	movs	r2, #0
 801410a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 801410c:	4b1c      	ldr	r3, [pc, #112]	; (8014180 <MX_FMC_Init+0x98>)
 801410e:	2200      	movs	r2, #0
 8014110:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8014112:	4b1b      	ldr	r3, [pc, #108]	; (8014180 <MX_FMC_Init+0x98>)
 8014114:	2204      	movs	r2, #4
 8014116:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8014118:	4b19      	ldr	r3, [pc, #100]	; (8014180 <MX_FMC_Init+0x98>)
 801411a:	2210      	movs	r2, #16
 801411c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 801411e:	4b18      	ldr	r3, [pc, #96]	; (8014180 <MX_FMC_Init+0x98>)
 8014120:	2240      	movs	r2, #64	; 0x40
 8014122:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8014124:	4b16      	ldr	r3, [pc, #88]	; (8014180 <MX_FMC_Init+0x98>)
 8014126:	f44f 72c0 	mov.w	r2, #384	; 0x180
 801412a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 801412c:	4b14      	ldr	r3, [pc, #80]	; (8014180 <MX_FMC_Init+0x98>)
 801412e:	2200      	movs	r2, #0
 8014130:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8014132:	4b13      	ldr	r3, [pc, #76]	; (8014180 <MX_FMC_Init+0x98>)
 8014134:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014138:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 801413a:	4b11      	ldr	r3, [pc, #68]	; (8014180 <MX_FMC_Init+0x98>)
 801413c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014140:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8014142:	4b0f      	ldr	r3, [pc, #60]	; (8014180 <MX_FMC_Init+0x98>)
 8014144:	2200      	movs	r2, #0
 8014146:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8014148:	2302      	movs	r3, #2
 801414a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 801414c:	2307      	movs	r3, #7
 801414e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8014150:	2304      	movs	r3, #4
 8014152:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8014154:	2307      	movs	r3, #7
 8014156:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8014158:	2303      	movs	r3, #3
 801415a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 801415c:	2302      	movs	r3, #2
 801415e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8014160:	2302      	movs	r3, #2
 8014162:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8014164:	1d3b      	adds	r3, r7, #4
 8014166:	4619      	mov	r1, r3
 8014168:	4805      	ldr	r0, [pc, #20]	; (8014180 <MX_FMC_Init+0x98>)
 801416a:	f7f3 fa68 	bl	800763e <HAL_SDRAM_Init>
 801416e:	4603      	mov	r3, r0
 8014170:	2b00      	cmp	r3, #0
 8014172:	d001      	beq.n	8014178 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8014174:	f000 fc78 	bl	8014a68 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8014178:	bf00      	nop
 801417a:	3720      	adds	r7, #32
 801417c:	46bd      	mov	sp, r7
 801417e:	bd80      	pop	{r7, pc}
 8014180:	200118cc 	.word	0x200118cc
 8014184:	a0000140 	.word	0xa0000140

08014188 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8014188:	b580      	push	{r7, lr}
 801418a:	b090      	sub	sp, #64	; 0x40
 801418c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801418e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014192:	2200      	movs	r2, #0
 8014194:	601a      	str	r2, [r3, #0]
 8014196:	605a      	str	r2, [r3, #4]
 8014198:	609a      	str	r2, [r3, #8]
 801419a:	60da      	str	r2, [r3, #12]
 801419c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 801419e:	4baf      	ldr	r3, [pc, #700]	; (801445c <MX_GPIO_Init+0x2d4>)
 80141a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80141a2:	4aae      	ldr	r2, [pc, #696]	; (801445c <MX_GPIO_Init+0x2d4>)
 80141a4:	f043 0310 	orr.w	r3, r3, #16
 80141a8:	6313      	str	r3, [r2, #48]	; 0x30
 80141aa:	4bac      	ldr	r3, [pc, #688]	; (801445c <MX_GPIO_Init+0x2d4>)
 80141ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80141ae:	f003 0310 	and.w	r3, r3, #16
 80141b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80141b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80141b6:	4ba9      	ldr	r3, [pc, #676]	; (801445c <MX_GPIO_Init+0x2d4>)
 80141b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80141ba:	4aa8      	ldr	r2, [pc, #672]	; (801445c <MX_GPIO_Init+0x2d4>)
 80141bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80141c0:	6313      	str	r3, [r2, #48]	; 0x30
 80141c2:	4ba6      	ldr	r3, [pc, #664]	; (801445c <MX_GPIO_Init+0x2d4>)
 80141c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80141c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80141ca:	627b      	str	r3, [r7, #36]	; 0x24
 80141cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80141ce:	4ba3      	ldr	r3, [pc, #652]	; (801445c <MX_GPIO_Init+0x2d4>)
 80141d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80141d2:	4aa2      	ldr	r2, [pc, #648]	; (801445c <MX_GPIO_Init+0x2d4>)
 80141d4:	f043 0302 	orr.w	r3, r3, #2
 80141d8:	6313      	str	r3, [r2, #48]	; 0x30
 80141da:	4ba0      	ldr	r3, [pc, #640]	; (801445c <MX_GPIO_Init+0x2d4>)
 80141dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80141de:	f003 0302 	and.w	r3, r3, #2
 80141e2:	623b      	str	r3, [r7, #32]
 80141e4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80141e6:	4b9d      	ldr	r3, [pc, #628]	; (801445c <MX_GPIO_Init+0x2d4>)
 80141e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80141ea:	4a9c      	ldr	r2, [pc, #624]	; (801445c <MX_GPIO_Init+0x2d4>)
 80141ec:	f043 0308 	orr.w	r3, r3, #8
 80141f0:	6313      	str	r3, [r2, #48]	; 0x30
 80141f2:	4b9a      	ldr	r3, [pc, #616]	; (801445c <MX_GPIO_Init+0x2d4>)
 80141f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80141f6:	f003 0308 	and.w	r3, r3, #8
 80141fa:	61fb      	str	r3, [r7, #28]
 80141fc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80141fe:	4b97      	ldr	r3, [pc, #604]	; (801445c <MX_GPIO_Init+0x2d4>)
 8014200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014202:	4a96      	ldr	r2, [pc, #600]	; (801445c <MX_GPIO_Init+0x2d4>)
 8014204:	f043 0304 	orr.w	r3, r3, #4
 8014208:	6313      	str	r3, [r2, #48]	; 0x30
 801420a:	4b94      	ldr	r3, [pc, #592]	; (801445c <MX_GPIO_Init+0x2d4>)
 801420c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801420e:	f003 0304 	and.w	r3, r3, #4
 8014212:	61bb      	str	r3, [r7, #24]
 8014214:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8014216:	4b91      	ldr	r3, [pc, #580]	; (801445c <MX_GPIO_Init+0x2d4>)
 8014218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801421a:	4a90      	ldr	r2, [pc, #576]	; (801445c <MX_GPIO_Init+0x2d4>)
 801421c:	f043 0301 	orr.w	r3, r3, #1
 8014220:	6313      	str	r3, [r2, #48]	; 0x30
 8014222:	4b8e      	ldr	r3, [pc, #568]	; (801445c <MX_GPIO_Init+0x2d4>)
 8014224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014226:	f003 0301 	and.w	r3, r3, #1
 801422a:	617b      	str	r3, [r7, #20]
 801422c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 801422e:	4b8b      	ldr	r3, [pc, #556]	; (801445c <MX_GPIO_Init+0x2d4>)
 8014230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014232:	4a8a      	ldr	r2, [pc, #552]	; (801445c <MX_GPIO_Init+0x2d4>)
 8014234:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8014238:	6313      	str	r3, [r2, #48]	; 0x30
 801423a:	4b88      	ldr	r3, [pc, #544]	; (801445c <MX_GPIO_Init+0x2d4>)
 801423c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801423e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014242:	613b      	str	r3, [r7, #16]
 8014244:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8014246:	4b85      	ldr	r3, [pc, #532]	; (801445c <MX_GPIO_Init+0x2d4>)
 8014248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801424a:	4a84      	ldr	r2, [pc, #528]	; (801445c <MX_GPIO_Init+0x2d4>)
 801424c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014250:	6313      	str	r3, [r2, #48]	; 0x30
 8014252:	4b82      	ldr	r3, [pc, #520]	; (801445c <MX_GPIO_Init+0x2d4>)
 8014254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801425a:	60fb      	str	r3, [r7, #12]
 801425c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 801425e:	4b7f      	ldr	r3, [pc, #508]	; (801445c <MX_GPIO_Init+0x2d4>)
 8014260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014262:	4a7e      	ldr	r2, [pc, #504]	; (801445c <MX_GPIO_Init+0x2d4>)
 8014264:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8014268:	6313      	str	r3, [r2, #48]	; 0x30
 801426a:	4b7c      	ldr	r3, [pc, #496]	; (801445c <MX_GPIO_Init+0x2d4>)
 801426c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801426e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014272:	60bb      	str	r3, [r7, #8]
 8014274:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8014276:	4b79      	ldr	r3, [pc, #484]	; (801445c <MX_GPIO_Init+0x2d4>)
 8014278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801427a:	4a78      	ldr	r2, [pc, #480]	; (801445c <MX_GPIO_Init+0x2d4>)
 801427c:	f043 0320 	orr.w	r3, r3, #32
 8014280:	6313      	str	r3, [r2, #48]	; 0x30
 8014282:	4b76      	ldr	r3, [pc, #472]	; (801445c <MX_GPIO_Init+0x2d4>)
 8014284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014286:	f003 0320 	and.w	r3, r3, #32
 801428a:	607b      	str	r3, [r7, #4]
 801428c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801428e:	4b73      	ldr	r3, [pc, #460]	; (801445c <MX_GPIO_Init+0x2d4>)
 8014290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014292:	4a72      	ldr	r2, [pc, #456]	; (801445c <MX_GPIO_Init+0x2d4>)
 8014294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014298:	6313      	str	r3, [r2, #48]	; 0x30
 801429a:	4b70      	ldr	r3, [pc, #448]	; (801445c <MX_GPIO_Init+0x2d4>)
 801429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801429e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80142a2:	603b      	str	r3, [r7, #0]
 80142a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80142a6:	2201      	movs	r2, #1
 80142a8:	2120      	movs	r1, #32
 80142aa:	486d      	ldr	r0, [pc, #436]	; (8014460 <MX_GPIO_Init+0x2d8>)
 80142ac:	f7ed fd84 	bl	8001db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1, GPIO_PIN_RESET);
 80142b0:	2200      	movs	r2, #0
 80142b2:	210e      	movs	r1, #14
 80142b4:	486b      	ldr	r0, [pc, #428]	; (8014464 <MX_GPIO_Init+0x2dc>)
 80142b6:	f7ed fd7f 	bl	8001db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80142ba:	2201      	movs	r2, #1
 80142bc:	2108      	movs	r1, #8
 80142be:	486a      	ldr	r0, [pc, #424]	; (8014468 <MX_GPIO_Init+0x2e0>)
 80142c0:	f7ed fd7a 	bl	8001db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80142c4:	2201      	movs	r2, #1
 80142c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80142ca:	4866      	ldr	r0, [pc, #408]	; (8014464 <MX_GPIO_Init+0x2dc>)
 80142cc:	f7ed fd74 	bl	8001db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80142d0:	2200      	movs	r2, #0
 80142d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80142d6:	4865      	ldr	r0, [pc, #404]	; (801446c <MX_GPIO_Init+0x2e4>)
 80142d8:	f7ed fd6e 	bl	8001db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80142dc:	2200      	movs	r2, #0
 80142de:	21c8      	movs	r1, #200	; 0xc8
 80142e0:	4863      	ldr	r0, [pc, #396]	; (8014470 <MX_GPIO_Init+0x2e8>)
 80142e2:	f7ed fd69 	bl	8001db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80142e6:	2308      	movs	r3, #8
 80142e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80142ea:	2300      	movs	r3, #0
 80142ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80142ee:	2300      	movs	r3, #0
 80142f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80142f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80142f6:	4619      	mov	r1, r3
 80142f8:	485e      	ldr	r0, [pc, #376]	; (8014474 <MX_GPIO_Init+0x2ec>)
 80142fa:	f7ed fb99 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80142fe:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8014302:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014304:	2302      	movs	r3, #2
 8014306:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014308:	2300      	movs	r3, #0
 801430a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801430c:	2303      	movs	r3, #3
 801430e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8014310:	230b      	movs	r3, #11
 8014312:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8014314:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014318:	4619      	mov	r1, r3
 801431a:	4855      	ldr	r0, [pc, #340]	; (8014470 <MX_GPIO_Init+0x2e8>)
 801431c:	f7ed fb88 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8014320:	f643 4323 	movw	r3, #15395	; 0x3c23
 8014324:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014326:	2302      	movs	r3, #2
 8014328:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801432a:	2300      	movs	r3, #0
 801432c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801432e:	2303      	movs	r3, #3
 8014330:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8014332:	230a      	movs	r3, #10
 8014334:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014336:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801433a:	4619      	mov	r1, r3
 801433c:	484e      	ldr	r0, [pc, #312]	; (8014478 <MX_GPIO_Init+0x2f0>)
 801433e:	f7ed fb77 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8014342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014346:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8014348:	2300      	movs	r3, #0
 801434a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801434c:	2300      	movs	r3, #0
 801434e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8014350:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014354:	4619      	mov	r1, r3
 8014356:	4849      	ldr	r0, [pc, #292]	; (801447c <MX_GPIO_Init+0x2f4>)
 8014358:	f7ed fb6a 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 801435c:	2340      	movs	r3, #64	; 0x40
 801435e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8014360:	4b47      	ldr	r3, [pc, #284]	; (8014480 <MX_GPIO_Init+0x2f8>)
 8014362:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014364:	2300      	movs	r3, #0
 8014366:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8014368:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801436c:	4619      	mov	r1, r3
 801436e:	483c      	ldr	r0, [pc, #240]	; (8014460 <MX_GPIO_Init+0x2d8>)
 8014370:	f7ed fb5e 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8014374:	2320      	movs	r3, #32
 8014376:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014378:	2301      	movs	r3, #1
 801437a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801437c:	2300      	movs	r3, #0
 801437e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014380:	2300      	movs	r3, #0
 8014382:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8014384:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014388:	4619      	mov	r1, r3
 801438a:	4835      	ldr	r0, [pc, #212]	; (8014460 <MX_GPIO_Init+0x2d8>)
 801438c:	f7ed fb50 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 8014390:	f241 030e 	movw	r3, #4110	; 0x100e
 8014394:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014396:	2301      	movs	r3, #1
 8014398:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801439a:	2300      	movs	r3, #0
 801439c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801439e:	2300      	movs	r3, #0
 80143a0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80143a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80143a6:	4619      	mov	r1, r3
 80143a8:	482e      	ldr	r0, [pc, #184]	; (8014464 <MX_GPIO_Init+0x2dc>)
 80143aa:	f7ed fb41 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80143ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80143b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80143b4:	2300      	movs	r3, #0
 80143b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80143b8:	2300      	movs	r3, #0
 80143ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80143bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80143c0:	4619      	mov	r1, r3
 80143c2:	4830      	ldr	r0, [pc, #192]	; (8014484 <MX_GPIO_Init+0x2fc>)
 80143c4:	f7ed fb34 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80143c8:	2308      	movs	r3, #8
 80143ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80143cc:	2301      	movs	r3, #1
 80143ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80143d0:	2300      	movs	r3, #0
 80143d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80143d4:	2300      	movs	r3, #0
 80143d6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80143d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80143dc:	4619      	mov	r1, r3
 80143de:	4822      	ldr	r0, [pc, #136]	; (8014468 <MX_GPIO_Init+0x2e0>)
 80143e0:	f7ed fb26 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80143e4:	2310      	movs	r3, #16
 80143e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80143e8:	2300      	movs	r3, #0
 80143ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80143ec:	2300      	movs	r3, #0
 80143ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80143f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80143f4:	4619      	mov	r1, r3
 80143f6:	481a      	ldr	r0, [pc, #104]	; (8014460 <MX_GPIO_Init+0x2d8>)
 80143f8:	f7ed fb1a 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80143fc:	f248 0304 	movw	r3, #32772	; 0x8004
 8014400:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8014402:	2300      	movs	r3, #0
 8014404:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014406:	2300      	movs	r3, #0
 8014408:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801440a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801440e:	4619      	mov	r1, r3
 8014410:	4816      	ldr	r0, [pc, #88]	; (801446c <MX_GPIO_Init+0x2e4>)
 8014412:	f7ed fb0d 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8014416:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801441a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801441c:	2301      	movs	r3, #1
 801441e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014420:	2300      	movs	r3, #0
 8014422:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014424:	2300      	movs	r3, #0
 8014426:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8014428:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801442c:	4619      	mov	r1, r3
 801442e:	480f      	ldr	r0, [pc, #60]	; (801446c <MX_GPIO_Init+0x2e4>)
 8014430:	f7ed fafe 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8014434:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014438:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801443a:	4b13      	ldr	r3, [pc, #76]	; (8014488 <MX_GPIO_Init+0x300>)
 801443c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801443e:	2300      	movs	r3, #0
 8014440:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8014442:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014446:	4619      	mov	r1, r3
 8014448:	4806      	ldr	r0, [pc, #24]	; (8014464 <MX_GPIO_Init+0x2dc>)
 801444a:	f7ed faf1 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 801444e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014452:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8014454:	4b0a      	ldr	r3, [pc, #40]	; (8014480 <MX_GPIO_Init+0x2f8>)
 8014456:	633b      	str	r3, [r7, #48]	; 0x30
 8014458:	e018      	b.n	801448c <MX_GPIO_Init+0x304>
 801445a:	bf00      	nop
 801445c:	40023800 	.word	0x40023800
 8014460:	40020c00 	.word	0x40020c00
 8014464:	40022000 	.word	0x40022000
 8014468:	40022800 	.word	0x40022800
 801446c:	40021c00 	.word	0x40021c00
 8014470:	40021800 	.word	0x40021800
 8014474:	40021000 	.word	0x40021000
 8014478:	40020400 	.word	0x40020400
 801447c:	40022400 	.word	0x40022400
 8014480:	10120000 	.word	0x10120000
 8014484:	40020800 	.word	0x40020800
 8014488:	10110000 	.word	0x10110000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801448c:	2300      	movs	r3, #0
 801448e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8014490:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014494:	4619      	mov	r1, r3
 8014496:	4845      	ldr	r0, [pc, #276]	; (80145ac <MX_GPIO_Init+0x424>)
 8014498:	f7ed faca 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 801449c:	2310      	movs	r3, #16
 801449e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80144a0:	2302      	movs	r3, #2
 80144a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80144a4:	2300      	movs	r3, #0
 80144a6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80144a8:	2303      	movs	r3, #3
 80144aa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80144ac:	230a      	movs	r3, #10
 80144ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80144b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80144b4:	4619      	mov	r1, r3
 80144b6:	483e      	ldr	r0, [pc, #248]	; (80145b0 <MX_GPIO_Init+0x428>)
 80144b8:	f7ed faba 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80144bc:	23c8      	movs	r3, #200	; 0xc8
 80144be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80144c0:	2301      	movs	r3, #1
 80144c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80144c4:	2300      	movs	r3, #0
 80144c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80144c8:	2300      	movs	r3, #0
 80144ca:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80144cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80144d0:	4619      	mov	r1, r3
 80144d2:	4838      	ldr	r0, [pc, #224]	; (80145b4 <MX_GPIO_Init+0x42c>)
 80144d4:	f7ed faac 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80144d8:	2305      	movs	r3, #5
 80144da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80144dc:	2302      	movs	r3, #2
 80144de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80144e0:	2300      	movs	r3, #0
 80144e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80144e4:	2303      	movs	r3, #3
 80144e6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80144e8:	230a      	movs	r3, #10
 80144ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80144ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80144f0:	4619      	mov	r1, r3
 80144f2:	4831      	ldr	r0, [pc, #196]	; (80145b8 <MX_GPIO_Init+0x430>)
 80144f4:	f7ed fa9c 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80144f8:	2332      	movs	r3, #50	; 0x32
 80144fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80144fc:	2302      	movs	r3, #2
 80144fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014500:	2300      	movs	r3, #0
 8014502:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014504:	2303      	movs	r3, #3
 8014506:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8014508:	230b      	movs	r3, #11
 801450a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801450c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014510:	4619      	mov	r1, r3
 8014512:	4829      	ldr	r0, [pc, #164]	; (80145b8 <MX_GPIO_Init+0x430>)
 8014514:	f7ed fa8c 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8014518:	2304      	movs	r3, #4
 801451a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801451c:	2300      	movs	r3, #0
 801451e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014520:	2300      	movs	r3, #0
 8014522:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8014524:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014528:	4619      	mov	r1, r3
 801452a:	4822      	ldr	r0, [pc, #136]	; (80145b4 <MX_GPIO_Init+0x42c>)
 801452c:	f7ed fa80 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8014530:	2386      	movs	r3, #134	; 0x86
 8014532:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014534:	2302      	movs	r3, #2
 8014536:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014538:	2300      	movs	r3, #0
 801453a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801453c:	2303      	movs	r3, #3
 801453e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8014540:	230b      	movs	r3, #11
 8014542:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014544:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014548:	4619      	mov	r1, r3
 801454a:	481c      	ldr	r0, [pc, #112]	; (80145bc <MX_GPIO_Init+0x434>)
 801454c:	f7ed fa70 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8014550:	2328      	movs	r3, #40	; 0x28
 8014552:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014554:	2302      	movs	r3, #2
 8014556:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014558:	2300      	movs	r3, #0
 801455a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801455c:	2303      	movs	r3, #3
 801455e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8014560:	230a      	movs	r3, #10
 8014562:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014564:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014568:	4619      	mov	r1, r3
 801456a:	4814      	ldr	r0, [pc, #80]	; (80145bc <MX_GPIO_Init+0x434>)
 801456c:	f7ed fa60 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8014570:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8014574:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014576:	2302      	movs	r3, #2
 8014578:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801457a:	2300      	movs	r3, #0
 801457c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801457e:	2300      	movs	r3, #0
 8014580:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8014582:	2305      	movs	r3, #5
 8014584:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014586:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801458a:	4619      	mov	r1, r3
 801458c:	480c      	ldr	r0, [pc, #48]	; (80145c0 <MX_GPIO_Init+0x438>)
 801458e:	f7ed fa4f 	bl	8001a30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8014592:	2200      	movs	r2, #0
 8014594:	2105      	movs	r1, #5
 8014596:	2028      	movs	r0, #40	; 0x28
 8014598:	f7ec fb32 	bl	8000c00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 801459c:	2028      	movs	r0, #40	; 0x28
 801459e:	f7ec fb4b 	bl	8000c38 <HAL_NVIC_EnableIRQ>

}
 80145a2:	bf00      	nop
 80145a4:	3740      	adds	r7, #64	; 0x40
 80145a6:	46bd      	mov	sp, r7
 80145a8:	bd80      	pop	{r7, pc}
 80145aa:	bf00      	nop
 80145ac:	40022000 	.word	0x40022000
 80145b0:	40021c00 	.word	0x40021c00
 80145b4:	40021800 	.word	0x40021800
 80145b8:	40020800 	.word	0x40020800
 80145bc:	40020000 	.word	0x40020000
 80145c0:	40020400 	.word	0x40020400

080145c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80145c4:	b580      	push	{r7, lr}
 80145c6:	b082      	sub	sp, #8
 80145c8:	af00      	add	r7, sp, #0
 80145ca:	4603      	mov	r3, r0
 80145cc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_11){
 80145ce:	88fb      	ldrh	r3, [r7, #6]
 80145d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80145d4:	d108      	bne.n	80145e8 <HAL_GPIO_EXTI_Callback+0x24>
		b1PushCounter = B1SWITCH_SLICE_PUSH_TIME;
 80145d6:	4b06      	ldr	r3, [pc, #24]	; (80145f0 <HAL_GPIO_EXTI_Callback+0x2c>)
 80145d8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80145dc:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 80145de:	2200      	movs	r2, #0
 80145e0:	2102      	movs	r1, #2
 80145e2:	4804      	ldr	r0, [pc, #16]	; (80145f4 <HAL_GPIO_EXTI_Callback+0x30>)
 80145e4:	f7ed fbe8 	bl	8001db8 <HAL_GPIO_WritePin>
	}
}
 80145e8:	bf00      	nop
 80145ea:	3708      	adds	r7, #8
 80145ec:	46bd      	mov	sp, r7
 80145ee:	bd80      	pop	{r7, pc}
 80145f0:	20011900 	.word	0x20011900
 80145f4:	40022000 	.word	0x40022000

080145f8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80145f8:	b580      	push	{r7, lr}
 80145fa:	b084      	sub	sp, #16
 80145fc:	af00      	add	r7, sp, #0
 80145fe:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef retStatus;
	uint8_t buffSelChange;

	if(huart == &huart6)
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	4a2f      	ldr	r2, [pc, #188]	; (80146c0 <HAL_UART_RxCpltCallback+0xc8>)
 8014604:	4293      	cmp	r3, r2
 8014606:	d156      	bne.n	80146b6 <HAL_UART_RxCpltCallback+0xbe>
	{
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 8014608:	2200      	movs	r2, #0
 801460a:	2102      	movs	r1, #2
 801460c:	482d      	ldr	r0, [pc, #180]	; (80146c4 <HAL_UART_RxCpltCallback+0xcc>)
 801460e:	f7ed fbd3 	bl	8001db8 <HAL_GPIO_WritePin>

		buffSelChange = 0;
 8014612:	2300      	movs	r3, #0
 8014614:	73fb      	strb	r3, [r7, #15]
		workBuffer[dataIdx] = *(huart6.pRxBuffPtr - 1);
 8014616:	4b2a      	ldr	r3, [pc, #168]	; (80146c0 <HAL_UART_RxCpltCallback+0xc8>)
 8014618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801461a:	4a2b      	ldr	r2, [pc, #172]	; (80146c8 <HAL_UART_RxCpltCallback+0xd0>)
 801461c:	8812      	ldrh	r2, [r2, #0]
 801461e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8014622:	4b2a      	ldr	r3, [pc, #168]	; (80146cc <HAL_UART_RxCpltCallback+0xd4>)
 8014624:	5499      	strb	r1, [r3, r2]
		if(workBuffer[dataIdx++] != ';')
 8014626:	4b28      	ldr	r3, [pc, #160]	; (80146c8 <HAL_UART_RxCpltCallback+0xd0>)
 8014628:	881b      	ldrh	r3, [r3, #0]
 801462a:	1c5a      	adds	r2, r3, #1
 801462c:	b291      	uxth	r1, r2
 801462e:	4a26      	ldr	r2, [pc, #152]	; (80146c8 <HAL_UART_RxCpltCallback+0xd0>)
 8014630:	8011      	strh	r1, [r2, #0]
 8014632:	461a      	mov	r2, r3
 8014634:	4b25      	ldr	r3, [pc, #148]	; (80146cc <HAL_UART_RxCpltCallback+0xd4>)
 8014636:	5c9b      	ldrb	r3, [r3, r2]
 8014638:	2b3b      	cmp	r3, #59	; 0x3b
 801463a:	d009      	beq.n	8014650 <HAL_UART_RxCpltCallback+0x58>
		{
			if((dataIdx % _MAX_SS) == 0)
 801463c:	4b22      	ldr	r3, [pc, #136]	; (80146c8 <HAL_UART_RxCpltCallback+0xd0>)
 801463e:	881b      	ldrh	r3, [r3, #0]
 8014640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014644:	b29b      	uxth	r3, r3
 8014646:	2b00      	cmp	r3, #0
 8014648:	d104      	bne.n	8014654 <HAL_UART_RxCpltCallback+0x5c>
			{
				buffSelChange = 1;
 801464a:	2301      	movs	r3, #1
 801464c:	73fb      	strb	r3, [r7, #15]
 801464e:	e001      	b.n	8014654 <HAL_UART_RxCpltCallback+0x5c>
			}
		}
		else
		{
			buffSelChange = 1;
 8014650:	2301      	movs	r3, #1
 8014652:	73fb      	strb	r3, [r7, #15]
		}
		if(buffSelChange)
 8014654:	7bfb      	ldrb	r3, [r7, #15]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d023      	beq.n	80146a2 <HAL_UART_RxCpltCallback+0xaa>
		{
			if(dataIdx > _MAX_SS)
 801465a:	4b1b      	ldr	r3, [pc, #108]	; (80146c8 <HAL_UART_RxCpltCallback+0xd0>)
 801465c:	881b      	ldrh	r3, [r3, #0]
 801465e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014662:	d90e      	bls.n	8014682 <HAL_UART_RxCpltCallback+0x8a>
			{
				writeSize = dataIdx - _MAX_SS;
 8014664:	4b18      	ldr	r3, [pc, #96]	; (80146c8 <HAL_UART_RxCpltCallback+0xd0>)
 8014666:	881b      	ldrh	r3, [r3, #0]
 8014668:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 801466c:	b29a      	uxth	r2, r3
 801466e:	4b18      	ldr	r3, [pc, #96]	; (80146d0 <HAL_UART_RxCpltCallback+0xd8>)
 8014670:	801a      	strh	r2, [r3, #0]
				writedataIdx = _MAX_SS;
 8014672:	4b18      	ldr	r3, [pc, #96]	; (80146d4 <HAL_UART_RxCpltCallback+0xdc>)
 8014674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014678:	801a      	strh	r2, [r3, #0]
				dataIdx = 0;
 801467a:	4b13      	ldr	r3, [pc, #76]	; (80146c8 <HAL_UART_RxCpltCallback+0xd0>)
 801467c:	2200      	movs	r2, #0
 801467e:	801a      	strh	r2, [r3, #0]
 8014680:	e00a      	b.n	8014698 <HAL_UART_RxCpltCallback+0xa0>
			}
			else
			{
				writeSize = dataIdx;
 8014682:	4b11      	ldr	r3, [pc, #68]	; (80146c8 <HAL_UART_RxCpltCallback+0xd0>)
 8014684:	881a      	ldrh	r2, [r3, #0]
 8014686:	4b12      	ldr	r3, [pc, #72]	; (80146d0 <HAL_UART_RxCpltCallback+0xd8>)
 8014688:	801a      	strh	r2, [r3, #0]
				writedataIdx = 0;
 801468a:	4b12      	ldr	r3, [pc, #72]	; (80146d4 <HAL_UART_RxCpltCallback+0xdc>)
 801468c:	2200      	movs	r2, #0
 801468e:	801a      	strh	r2, [r3, #0]
				dataIdx = _MAX_SS;
 8014690:	4b0d      	ldr	r3, [pc, #52]	; (80146c8 <HAL_UART_RxCpltCallback+0xd0>)
 8014692:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014696:	801a      	strh	r2, [r3, #0]
			}
			osSemaphoreRelease(sdWriteBinarySemHandle);
 8014698:	4b0f      	ldr	r3, [pc, #60]	; (80146d8 <HAL_UART_RxCpltCallback+0xe0>)
 801469a:	681b      	ldr	r3, [r3, #0]
 801469c:	4618      	mov	r0, r3
 801469e:	f7fb fee1 	bl	8010464 <osSemaphoreRelease>
		}

		do
		{
			retStatus = HAL_UART_Receive_IT(&huart6, &recvData, 1);
 80146a2:	2201      	movs	r2, #1
 80146a4:	490d      	ldr	r1, [pc, #52]	; (80146dc <HAL_UART_RxCpltCallback+0xe4>)
 80146a6:	4806      	ldr	r0, [pc, #24]	; (80146c0 <HAL_UART_RxCpltCallback+0xc8>)
 80146a8:	f7f4 f93a 	bl	8008920 <HAL_UART_Receive_IT>
 80146ac:	4603      	mov	r3, r0
 80146ae:	73bb      	strb	r3, [r7, #14]
		} while(retStatus == HAL_BUSY);
 80146b0:	7bbb      	ldrb	r3, [r7, #14]
 80146b2:	2b02      	cmp	r3, #2
 80146b4:	d0f5      	beq.n	80146a2 <HAL_UART_RxCpltCallback+0xaa>
	}
}
 80146b6:	bf00      	nop
 80146b8:	3710      	adds	r7, #16
 80146ba:	46bd      	mov	sp, r7
 80146bc:	bd80      	pop	{r7, pc}
 80146be:	bf00      	nop
 80146c0:	20011784 	.word	0x20011784
 80146c4:	40022000 	.word	0x40022000
 80146c8:	2001196c 	.word	0x2001196c
 80146cc:	20010d18 	.word	0x20010d18
 80146d0:	20011964 	.word	0x20011964
 80146d4:	20010984 	.word	0x20010984
 80146d8:	20011804 	.word	0x20011804
 80146dc:	200114c8 	.word	0x200114c8

080146e0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80146e0:	b580      	push	{r7, lr}
 80146e2:	b082      	sub	sp, #8
 80146e4:	af00      	add	r7, sp, #0
 80146e6:	6078      	str	r0, [r7, #4]
    
    
                 
  /* init code for FATFS */
  MX_FATFS_Init();
 80146e8:	f7fe fc66 	bl	8012fb8 <MX_FATFS_Init>

  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80146ec:	f001 fca8 	bl	8016040 <MX_USB_HOST_Init>

  /* USER CODE BEGIN 5 */

  /*## Register the file system object to the FatFs module ##############*/
	if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 80146f0:	2200      	movs	r2, #0
 80146f2:	4921      	ldr	r1, [pc, #132]	; (8014778 <StartDefaultTask+0x98>)
 80146f4:	4821      	ldr	r0, [pc, #132]	; (801477c <StartDefaultTask+0x9c>)
 80146f6:	f7fa faf5 	bl	800ece4 <f_mount>
 80146fa:	4603      	mov	r3, r0
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d002      	beq.n	8014706 <StartDefaultTask+0x26>
	{
	  /* FatFs Initialization Error */
	  Error_Handler();
 8014700:	f000 f9b2 	bl	8014a68 <Error_Handler>
 8014704:	e004      	b.n	8014710 <StartDefaultTask+0x30>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_SET);
 8014706:	2201      	movs	r2, #1
 8014708:	2102      	movs	r1, #2
 801470a:	481d      	ldr	r0, [pc, #116]	; (8014780 <StartDefaultTask+0xa0>)
 801470c:	f7ed fb54 	bl	8001db8 <HAL_GPIO_WritePin>
	}

	HAL_UART_Receive_IT(&huart6, &recvData, 1);
 8014710:	2201      	movs	r2, #1
 8014712:	491c      	ldr	r1, [pc, #112]	; (8014784 <StartDefaultTask+0xa4>)
 8014714:	481c      	ldr	r0, [pc, #112]	; (8014788 <StartDefaultTask+0xa8>)
 8014716:	f7f4 f903 	bl	8008920 <HAL_UART_Receive_IT>

  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 801471a:	2001      	movs	r0, #1
 801471c:	f7fb fe1b 	bl	8010356 <osDelay>
	  if(b1PushCounter > 0){
 8014720:	4b1a      	ldr	r3, [pc, #104]	; (801478c <StartDefaultTask+0xac>)
 8014722:	881b      	ldrh	r3, [r3, #0]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d0f8      	beq.n	801471a <StartDefaultTask+0x3a>
		  if(--b1PushCounter < (B1SWITCH_SLICE_PUSH_TIME - CHATTERING_REMOVE_TIME))
 8014728:	4b18      	ldr	r3, [pc, #96]	; (801478c <StartDefaultTask+0xac>)
 801472a:	881b      	ldrh	r3, [r3, #0]
 801472c:	3b01      	subs	r3, #1
 801472e:	b29a      	uxth	r2, r3
 8014730:	4b16      	ldr	r3, [pc, #88]	; (801478c <StartDefaultTask+0xac>)
 8014732:	801a      	strh	r2, [r3, #0]
 8014734:	4b15      	ldr	r3, [pc, #84]	; (801478c <StartDefaultTask+0xac>)
 8014736:	881b      	ldrh	r3, [r3, #0]
 8014738:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801473c:	4293      	cmp	r3, r2
 801473e:	d8ec      	bhi.n	801471a <StartDefaultTask+0x3a>
		  {
			  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET){
 8014740:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8014744:	480e      	ldr	r0, [pc, #56]	; (8014780 <StartDefaultTask+0xa0>)
 8014746:	f7ed fb1f 	bl	8001d88 <HAL_GPIO_ReadPin>
 801474a:	4603      	mov	r3, r0
 801474c:	2b00      	cmp	r3, #0
 801474e:	d108      	bne.n	8014762 <StartDefaultTask+0x82>
//				  if(b1PushCounter < 2000){
//					  osSemaphoreRelease(sdWriteBinarySemHandle);
//				  }
//				  else{
				  osSemaphoreRelease(sdReadBinarySemHandle);
 8014750:	4b0f      	ldr	r3, [pc, #60]	; (8014790 <StartDefaultTask+0xb0>)
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	4618      	mov	r0, r3
 8014756:	f7fb fe85 	bl	8010464 <osSemaphoreRelease>
//				  }
				  b1PushCounter = 0;
 801475a:	4b0c      	ldr	r3, [pc, #48]	; (801478c <StartDefaultTask+0xac>)
 801475c:	2200      	movs	r2, #0
 801475e:	801a      	strh	r2, [r3, #0]
 8014760:	e7db      	b.n	801471a <StartDefaultTask+0x3a>
			  }
			  else{
				  if(b1PushCounter == 0){
 8014762:	4b0a      	ldr	r3, [pc, #40]	; (801478c <StartDefaultTask+0xac>)
 8014764:	881b      	ldrh	r3, [r3, #0]
 8014766:	2b00      	cmp	r3, #0
 8014768:	d1d7      	bne.n	801471a <StartDefaultTask+0x3a>
					  osSemaphoreRelease(sdFormatBinarySemHandle);
 801476a:	4b0a      	ldr	r3, [pc, #40]	; (8014794 <StartDefaultTask+0xb4>)
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	4618      	mov	r0, r3
 8014770:	f7fb fe78 	bl	8010464 <osSemaphoreRelease>
	  osDelay(1);
 8014774:	e7d1      	b.n	801471a <StartDefaultTask+0x3a>
 8014776:	bf00      	nop
 8014778:	20010498 	.word	0x20010498
 801477c:	20011250 	.word	0x20011250
 8014780:	40022000 	.word	0x40022000
 8014784:	200114c8 	.word	0x200114c8
 8014788:	20011784 	.word	0x20011784
 801478c:	20011900 	.word	0x20011900
 8014790:	20011808 	.word	0x20011808
 8014794:	20011968 	.word	0x20011968

08014798 <StartSdReadTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSdReadTask */
void StartSdReadTask(void const * argument)
{
 8014798:	b580      	push	{r7, lr}
 801479a:	b086      	sub	sp, #24
 801479c:	af00      	add	r7, sp, #0
 801479e:	6078      	str	r0, [r7, #4]
  uint16_t readDataIdx;
  uint16_t buffIdx;
  uint16_t sendBuffIdx;
  HAL_StatusTypeDef status;

  osSemaphoreWait(sdReadBinarySemHandle, 0);
 80147a0:	4b41      	ldr	r3, [pc, #260]	; (80148a8 <StartSdReadTask+0x110>)
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	2100      	movs	r1, #0
 80147a6:	4618      	mov	r0, r3
 80147a8:	f7fb fe0e 	bl	80103c8 <osSemaphoreWait>

  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(sdReadBinarySemHandle, osWaitForever);
 80147ac:	4b3e      	ldr	r3, [pc, #248]	; (80148a8 <StartSdReadTask+0x110>)
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	f04f 31ff 	mov.w	r1, #4294967295
 80147b4:	4618      	mov	r0, r3
 80147b6:	f7fb fe07 	bl	80103c8 <osSemaphoreWait>

	  /*## Open the text file object with read access ###############*/
	  if(f_open(&MyFile, "STM32.TXT", FA_READ) != FR_OK)
 80147ba:	2201      	movs	r2, #1
 80147bc:	493b      	ldr	r1, [pc, #236]	; (80148ac <StartSdReadTask+0x114>)
 80147be:	483c      	ldr	r0, [pc, #240]	; (80148b0 <StartSdReadTask+0x118>)
 80147c0:	f7fa faf4 	bl	800edac <f_open>
 80147c4:	4603      	mov	r3, r0
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d002      	beq.n	80147d0 <StartSdReadTask+0x38>
	  {
		  /* 'STM32.TXT' file Open for read Error */
		  Error_Handler();
 80147ca:	f000 f94d 	bl	8014a68 <Error_Handler>
 80147ce:	e066      	b.n	801489e <StartSdReadTask+0x106>
	  }
	  else
	  {
		  /*## Read data from the text file ###########################*/
		  fileSize = MyFile.obj.objsize;
 80147d0:	4b37      	ldr	r3, [pc, #220]	; (80148b0 <StartSdReadTask+0x118>)
 80147d2:	68db      	ldr	r3, [r3, #12]
 80147d4:	823b      	strh	r3, [r7, #16]
		  readDataIdx = 0;
 80147d6:	2300      	movs	r3, #0
 80147d8:	82fb      	strh	r3, [r7, #22]
		  buffIdx = 0;
 80147da:	2300      	movs	r3, #0
 80147dc:	82bb      	strh	r3, [r7, #20]
		  tickRec[3] = HAL_GetTick();
 80147de:	f7eb feb5 	bl	800054c <HAL_GetTick>
 80147e2:	4603      	mov	r3, r0
 80147e4:	4a33      	ldr	r2, [pc, #204]	; (80148b4 <StartSdReadTask+0x11c>)
 80147e6:	60d3      	str	r3, [r2, #12]
		  do
		  {
			  readSize = ((fileSize - readDataIdx) > _MAX_SS)? _MAX_SS: fileSize - readDataIdx;
 80147e8:	8a3a      	ldrh	r2, [r7, #16]
 80147ea:	8afb      	ldrh	r3, [r7, #22]
 80147ec:	1ad3      	subs	r3, r2, r3
 80147ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80147f2:	bfa8      	it	ge
 80147f4:	f44f 7300 	movge.w	r3, #512	; 0x200
 80147f8:	81fb      	strh	r3, [r7, #14]
			  tickRec[5] = HAL_GetTick();
 80147fa:	f7eb fea7 	bl	800054c <HAL_GetTick>
 80147fe:	4603      	mov	r3, r0
 8014800:	4a2c      	ldr	r2, [pc, #176]	; (80148b4 <StartSdReadTask+0x11c>)
 8014802:	6153      	str	r3, [r2, #20]
			  res = f_read(&MyFile, &workBuffer[buffIdx], readSize, (UINT*)&bytesread);
 8014804:	8abb      	ldrh	r3, [r7, #20]
 8014806:	4a2c      	ldr	r2, [pc, #176]	; (80148b8 <StartSdReadTask+0x120>)
 8014808:	1899      	adds	r1, r3, r2
 801480a:	89fa      	ldrh	r2, [r7, #14]
 801480c:	f107 0308 	add.w	r3, r7, #8
 8014810:	4827      	ldr	r0, [pc, #156]	; (80148b0 <StartSdReadTask+0x118>)
 8014812:	f7fa fc90 	bl	800f136 <f_read>
 8014816:	4603      	mov	r3, r0
 8014818:	737b      	strb	r3, [r7, #13]
			  tickRec[6] = HAL_GetTick();
 801481a:	f7eb fe97 	bl	800054c <HAL_GetTick>
 801481e:	4603      	mov	r3, r0
 8014820:	4a24      	ldr	r2, [pc, #144]	; (80148b4 <StartSdReadTask+0x11c>)
 8014822:	6193      	str	r3, [r2, #24]
			  if((bytesread == 0) || (res != FR_OK))
 8014824:	68bb      	ldr	r3, [r7, #8]
 8014826:	2b00      	cmp	r3, #0
 8014828:	d002      	beq.n	8014830 <StartSdReadTask+0x98>
 801482a:	7b7b      	ldrb	r3, [r7, #13]
 801482c:	2b00      	cmp	r3, #0
 801482e:	d001      	beq.n	8014834 <StartSdReadTask+0x9c>
			  {
				/* 'STM32.TXT' file Read or EOF Error */
				Error_Handler();
 8014830:	f000 f91a 	bl	8014a68 <Error_Handler>
			  }
			  else
			  {

			  }
			  buffIdx += readSize;
 8014834:	8aba      	ldrh	r2, [r7, #20]
 8014836:	89fb      	ldrh	r3, [r7, #14]
 8014838:	4413      	add	r3, r2
 801483a:	82bb      	strh	r3, [r7, #20]
			  if(buffIdx > _MAX_SS)
 801483c:	8abb      	ldrh	r3, [r7, #20]
 801483e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014842:	d905      	bls.n	8014850 <StartSdReadTask+0xb8>
			  {
				  buffIdx = 0;
 8014844:	2300      	movs	r3, #0
 8014846:	82bb      	strh	r3, [r7, #20]
				  sendBuffIdx = _MAX_SS;
 8014848:	f44f 7300 	mov.w	r3, #512	; 0x200
 801484c:	827b      	strh	r3, [r7, #18]
 801484e:	e004      	b.n	801485a <StartSdReadTask+0xc2>
			  }
			  else
			  {
				  buffIdx = _MAX_SS;
 8014850:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014854:	82bb      	strh	r3, [r7, #20]
				  sendBuffIdx = 0;
 8014856:	2300      	movs	r3, #0
 8014858:	827b      	strh	r3, [r7, #18]
			  }
			  do
			  {
			  	  status = HAL_UART_Transmit_IT(&huart6, &workBuffer[sendBuffIdx], readSize);
 801485a:	8a7b      	ldrh	r3, [r7, #18]
 801485c:	4a16      	ldr	r2, [pc, #88]	; (80148b8 <StartSdReadTask+0x120>)
 801485e:	4413      	add	r3, r2
 8014860:	89fa      	ldrh	r2, [r7, #14]
 8014862:	4619      	mov	r1, r3
 8014864:	4815      	ldr	r0, [pc, #84]	; (80148bc <StartSdReadTask+0x124>)
 8014866:	f7f3 ffff 	bl	8008868 <HAL_UART_Transmit_IT>
 801486a:	4603      	mov	r3, r0
 801486c:	733b      	strb	r3, [r7, #12]
			  } while(status == HAL_BUSY);
 801486e:	7b3b      	ldrb	r3, [r7, #12]
 8014870:	2b02      	cmp	r3, #2
 8014872:	d0f2      	beq.n	801485a <StartSdReadTask+0xc2>
			  readDataIdx += readSize;
 8014874:	8afa      	ldrh	r2, [r7, #22]
 8014876:	89fb      	ldrh	r3, [r7, #14]
 8014878:	4413      	add	r3, r2
 801487a:	82fb      	strh	r3, [r7, #22]
		  } while(readDataIdx < fileSize);
 801487c:	8afa      	ldrh	r2, [r7, #22]
 801487e:	8a3b      	ldrh	r3, [r7, #16]
 8014880:	429a      	cmp	r2, r3
 8014882:	d3b1      	bcc.n	80147e8 <StartSdReadTask+0x50>
		  tickRec[4] = HAL_GetTick();
 8014884:	f7eb fe62 	bl	800054c <HAL_GetTick>
 8014888:	4603      	mov	r3, r0
 801488a:	4a0a      	ldr	r2, [pc, #40]	; (80148b4 <StartSdReadTask+0x11c>)
 801488c:	6113      	str	r3, [r2, #16]
		  /*## Close the open text file #############################*/
		  f_close(&MyFile);
 801488e:	4808      	ldr	r0, [pc, #32]	; (80148b0 <StartSdReadTask+0x118>)
 8014890:	f7fa ffec 	bl	800f86c <f_close>
		  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_SET);
 8014894:	2201      	movs	r2, #1
 8014896:	2102      	movs	r1, #2
 8014898:	4809      	ldr	r0, [pc, #36]	; (80148c0 <StartSdReadTask+0x128>)
 801489a:	f7ed fa8d 	bl	8001db8 <HAL_GPIO_WritePin>
	  }
	  osDelay(1);
 801489e:	2001      	movs	r0, #1
 80148a0:	f7fb fd59 	bl	8010356 <osDelay>
	  osSemaphoreWait(sdReadBinarySemHandle, osWaitForever);
 80148a4:	e782      	b.n	80147ac <StartSdReadTask+0x14>
 80148a6:	bf00      	nop
 80148a8:	20011808 	.word	0x20011808
 80148ac:	08016a2c 	.word	0x08016a2c
 80148b0:	200114cc 	.word	0x200114cc
 80148b4:	2001175c 	.word	0x2001175c
 80148b8:	20010d18 	.word	0x20010d18
 80148bc:	20011784 	.word	0x20011784
 80148c0:	40022000 	.word	0x40022000

080148c4 <StartSdWriteTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSdWriteTask */
void StartSdWriteTask(void const * argument)
{
 80148c4:	b580      	push	{r7, lr}
 80148c6:	b088      	sub	sp, #32
 80148c8:	af00      	add	r7, sp, #0
 80148ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSdWriteTask */
  FRESULT res;                                          /* FatFs function common result code */
  uint32_t byteswritten;                     			/* File write/read counts */
  char tmpFileName[]  = "1234567890\0";
 80148cc:	4a3a      	ldr	r2, [pc, #232]	; (80149b8 <StartSdWriteTask+0xf4>)
 80148ce:	f107 030c 	add.w	r3, r7, #12
 80148d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80148d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  osSemaphoreWait(sdWriteBinarySemHandle, 0);
 80148d8:	4b38      	ldr	r3, [pc, #224]	; (80149bc <StartSdWriteTask+0xf8>)
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	2100      	movs	r1, #0
 80148de:	4618      	mov	r0, r3
 80148e0:	f7fb fd72 	bl	80103c8 <osSemaphoreWait>

  /* Infinite loop */
  for(;;)
  {
	osSemaphoreWait(sdWriteBinarySemHandle, osWaitForever);
 80148e4:	4b35      	ldr	r3, [pc, #212]	; (80149bc <StartSdWriteTask+0xf8>)
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	f04f 31ff 	mov.w	r1, #4294967295
 80148ec:	4618      	mov	r0, r3
 80148ee:	f7fb fd6b 	bl	80103c8 <osSemaphoreWait>

	tickRec[0] = HAL_GetTick();
 80148f2:	f7eb fe2b 	bl	800054c <HAL_GetTick>
 80148f6:	4603      	mov	r3, r0
 80148f8:	4a31      	ldr	r2, [pc, #196]	; (80149c0 <StartSdWriteTask+0xfc>)
 80148fa:	6013      	str	r3, [r2, #0]

	strncpy(tmpFileName, (char*)&workBuffer[writedataIdx], 10);
 80148fc:	4b31      	ldr	r3, [pc, #196]	; (80149c4 <StartSdWriteTask+0x100>)
 80148fe:	881b      	ldrh	r3, [r3, #0]
 8014900:	461a      	mov	r2, r3
 8014902:	4b31      	ldr	r3, [pc, #196]	; (80149c8 <StartSdWriteTask+0x104>)
 8014904:	18d1      	adds	r1, r2, r3
 8014906:	f107 030c 	add.w	r3, r7, #12
 801490a:	220a      	movs	r2, #10
 801490c:	4618      	mov	r0, r3
 801490e:	f001 ffcb 	bl	80168a8 <strncpy>
	if(strstr(tmpFileName, ".txt") != NULL)
 8014912:	f107 030c 	add.w	r3, r7, #12
 8014916:	492d      	ldr	r1, [pc, #180]	; (80149cc <StartSdWriteTask+0x108>)
 8014918:	4618      	mov	r0, r3
 801491a:	f001 ffd8 	bl	80168ce <strstr>
 801491e:	4603      	mov	r3, r0
 8014920:	2b00      	cmp	r3, #0
 8014922:	d00d      	beq.n	8014940 <StartSdWriteTask+0x7c>
	{
		/*## Create and Open a new text file object with write access #####*/
		strcpy(fileName, tmpFileName);
 8014924:	f107 030c 	add.w	r3, r7, #12
 8014928:	4619      	mov	r1, r3
 801492a:	4829      	ldr	r0, [pc, #164]	; (80149d0 <StartSdWriteTask+0x10c>)
 801492c:	f001 ffb4 	bl	8016898 <strcpy>
		res = f_open(&MyFile, fileName, FA_CREATE_ALWAYS | FA_WRITE);
 8014930:	220a      	movs	r2, #10
 8014932:	4927      	ldr	r1, [pc, #156]	; (80149d0 <StartSdWriteTask+0x10c>)
 8014934:	4827      	ldr	r0, [pc, #156]	; (80149d4 <StartSdWriteTask+0x110>)
 8014936:	f7fa fa39 	bl	800edac <f_open>
 801493a:	4603      	mov	r3, r0
 801493c:	77fb      	strb	r3, [r7, #31]
 801493e:	e006      	b.n	801494e <StartSdWriteTask+0x8a>
	}
	else
	{
		res = f_open(&MyFile, fileName, FA_OPEN_APPEND | FA_WRITE);
 8014940:	2232      	movs	r2, #50	; 0x32
 8014942:	4923      	ldr	r1, [pc, #140]	; (80149d0 <StartSdWriteTask+0x10c>)
 8014944:	4823      	ldr	r0, [pc, #140]	; (80149d4 <StartSdWriteTask+0x110>)
 8014946:	f7fa fa31 	bl	800edac <f_open>
 801494a:	4603      	mov	r3, r0
 801494c:	77fb      	strb	r3, [r7, #31]
	}
	if(res != FR_OK)
 801494e:	7ffb      	ldrb	r3, [r7, #31]
 8014950:	2b00      	cmp	r3, #0
 8014952:	d002      	beq.n	801495a <StartSdWriteTask+0x96>
	{
	  /* 'STM32.TXT' file Open for write Error */
	  Error_Handler();
 8014954:	f000 f888 	bl	8014a68 <Error_Handler>
 8014958:	e029      	b.n	80149ae <StartSdWriteTask+0xea>
	}
	else
	{
	  /*## Write data to the text file ################################*/
	  tickRec[1] = HAL_GetTick();
 801495a:	f7eb fdf7 	bl	800054c <HAL_GetTick>
 801495e:	4603      	mov	r3, r0
 8014960:	4a17      	ldr	r2, [pc, #92]	; (80149c0 <StartSdWriteTask+0xfc>)
 8014962:	6053      	str	r3, [r2, #4]
	  res = f_write(&MyFile, &workBuffer[writedataIdx], writeSize, (void*)&byteswritten);
 8014964:	4b17      	ldr	r3, [pc, #92]	; (80149c4 <StartSdWriteTask+0x100>)
 8014966:	881b      	ldrh	r3, [r3, #0]
 8014968:	461a      	mov	r2, r3
 801496a:	4b17      	ldr	r3, [pc, #92]	; (80149c8 <StartSdWriteTask+0x104>)
 801496c:	18d1      	adds	r1, r2, r3
 801496e:	4b1a      	ldr	r3, [pc, #104]	; (80149d8 <StartSdWriteTask+0x114>)
 8014970:	881b      	ldrh	r3, [r3, #0]
 8014972:	461a      	mov	r2, r3
 8014974:	f107 0318 	add.w	r3, r7, #24
 8014978:	4816      	ldr	r0, [pc, #88]	; (80149d4 <StartSdWriteTask+0x110>)
 801497a:	f7fa fd4a 	bl	800f412 <f_write>
 801497e:	4603      	mov	r3, r0
 8014980:	77fb      	strb	r3, [r7, #31]
	  tickRec[2] = HAL_GetTick();
 8014982:	f7eb fde3 	bl	800054c <HAL_GetTick>
 8014986:	4603      	mov	r3, r0
 8014988:	4a0d      	ldr	r2, [pc, #52]	; (80149c0 <StartSdWriteTask+0xfc>)
 801498a:	6093      	str	r3, [r2, #8]
	  if((byteswritten == 0) || (res != FR_OK))
 801498c:	69bb      	ldr	r3, [r7, #24]
 801498e:	2b00      	cmp	r3, #0
 8014990:	d002      	beq.n	8014998 <StartSdWriteTask+0xd4>
 8014992:	7ffb      	ldrb	r3, [r7, #31]
 8014994:	2b00      	cmp	r3, #0
 8014996:	d002      	beq.n	801499e <StartSdWriteTask+0xda>
	  {
		/* 'STM32.TXT' file Write or EOF Error */
		Error_Handler();
 8014998:	f000 f866 	bl	8014a68 <Error_Handler>
 801499c:	e007      	b.n	80149ae <StartSdWriteTask+0xea>
	  }
	  else
	  {
		/*## Close the open text file #################################*/
		f_close(&MyFile);
 801499e:	480d      	ldr	r0, [pc, #52]	; (80149d4 <StartSdWriteTask+0x110>)
 80149a0:	f7fa ff64 	bl	800f86c <f_close>
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_SET);
 80149a4:	2201      	movs	r2, #1
 80149a6:	2102      	movs	r1, #2
 80149a8:	480c      	ldr	r0, [pc, #48]	; (80149dc <StartSdWriteTask+0x118>)
 80149aa:	f7ed fa05 	bl	8001db8 <HAL_GPIO_WritePin>
	  }
	}
    osDelay(1);
 80149ae:	2001      	movs	r0, #1
 80149b0:	f7fb fcd1 	bl	8010356 <osDelay>
	osSemaphoreWait(sdWriteBinarySemHandle, osWaitForever);
 80149b4:	e796      	b.n	80148e4 <StartSdWriteTask+0x20>
 80149b6:	bf00      	nop
 80149b8:	08016a40 	.word	0x08016a40
 80149bc:	20011804 	.word	0x20011804
 80149c0:	2001175c 	.word	0x2001175c
 80149c4:	20010984 	.word	0x20010984
 80149c8:	20010d18 	.word	0x20010d18
 80149cc:	08016a38 	.word	0x08016a38
 80149d0:	20010b58 	.word	0x20010b58
 80149d4:	200114cc 	.word	0x200114cc
 80149d8:	20011964 	.word	0x20011964
 80149dc:	40022000 	.word	0x40022000

080149e0 <StartSdFormatTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSdFormatTask */
void StartSdFormatTask(void const * argument)
{
 80149e0:	b580      	push	{r7, lr}
 80149e2:	b084      	sub	sp, #16
 80149e4:	af02      	add	r7, sp, #8
 80149e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSdFormatTask */
  osSemaphoreWait(sdFormatBinarySemHandle, 0);
 80149e8:	4b12      	ldr	r3, [pc, #72]	; (8014a34 <StartSdFormatTask+0x54>)
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	2100      	movs	r1, #0
 80149ee:	4618      	mov	r0, r3
 80149f0:	f7fb fcea 	bl	80103c8 <osSemaphoreWait>

  /* Infinite loop */
  for(;;)
  {
	osSemaphoreWait(sdFormatBinarySemHandle, osWaitForever);
 80149f4:	4b0f      	ldr	r3, [pc, #60]	; (8014a34 <StartSdFormatTask+0x54>)
 80149f6:	681b      	ldr	r3, [r3, #0]
 80149f8:	f04f 31ff 	mov.w	r1, #4294967295
 80149fc:	4618      	mov	r0, r3
 80149fe:	f7fb fce3 	bl	80103c8 <osSemaphoreWait>

	/*## Create a FAT file system (format) on the logical drive #########*/
	/* WARNING: Formatting the uSD card will delete all content on the device */
	if(f_mkfs((TCHAR const*)SDPath, FM_FAT32, 0, workBuffer, sizeof(workBuffer)) != FR_OK)
 8014a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014a06:	9300      	str	r3, [sp, #0]
 8014a08:	4b0b      	ldr	r3, [pc, #44]	; (8014a38 <StartSdFormatTask+0x58>)
 8014a0a:	2200      	movs	r2, #0
 8014a0c:	2102      	movs	r1, #2
 8014a0e:	480b      	ldr	r0, [pc, #44]	; (8014a3c <StartSdFormatTask+0x5c>)
 8014a10:	f7fa ff5c 	bl	800f8cc <f_mkfs>
 8014a14:	4603      	mov	r3, r0
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d002      	beq.n	8014a20 <StartSdFormatTask+0x40>
	{
		/* FatFs Format Error */
		Error_Handler();
 8014a1a:	f000 f825 	bl	8014a68 <Error_Handler>
 8014a1e:	e004      	b.n	8014a2a <StartSdFormatTask+0x4a>
	}
	else{
		HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_SET);
 8014a20:	2201      	movs	r2, #1
 8014a22:	2102      	movs	r1, #2
 8014a24:	4806      	ldr	r0, [pc, #24]	; (8014a40 <StartSdFormatTask+0x60>)
 8014a26:	f7ed f9c7 	bl	8001db8 <HAL_GPIO_WritePin>
	}

    osDelay(1);
 8014a2a:	2001      	movs	r0, #1
 8014a2c:	f7fb fc93 	bl	8010356 <osDelay>
	osSemaphoreWait(sdFormatBinarySemHandle, osWaitForever);
 8014a30:	e7e0      	b.n	80149f4 <StartSdFormatTask+0x14>
 8014a32:	bf00      	nop
 8014a34:	20011968 	.word	0x20011968
 8014a38:	20010d18 	.word	0x20010d18
 8014a3c:	20010498 	.word	0x20010498
 8014a40:	40022000 	.word	0x40022000

08014a44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8014a44:	b580      	push	{r7, lr}
 8014a46:	b082      	sub	sp, #8
 8014a48:	af00      	add	r7, sp, #0
 8014a4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	4a04      	ldr	r2, [pc, #16]	; (8014a64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8014a52:	4293      	cmp	r3, r2
 8014a54:	d101      	bne.n	8014a5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8014a56:	f7eb fd65 	bl	8000524 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8014a5a:	bf00      	nop
 8014a5c:	3708      	adds	r7, #8
 8014a5e:	46bd      	mov	sp, r7
 8014a60:	bd80      	pop	{r7, pc}
 8014a62:	bf00      	nop
 8014a64:	40001000 	.word	0x40001000

08014a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8014a68:	b480      	push	{r7}
 8014a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8014a6c:	bf00      	nop
 8014a6e:	46bd      	mov	sp, r7
 8014a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a74:	4770      	bx	lr

08014a76 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8014a76:	b580      	push	{r7, lr}
 8014a78:	b084      	sub	sp, #16
 8014a7a:	af00      	add	r7, sp, #0
 8014a7c:	6078      	str	r0, [r7, #4]
  uint32_t timer = osKernelSysTick();
 8014a7e:	f7fb fc33 	bl	80102e8 <osKernelSysTick>
 8014a82:	60f8      	str	r0, [r7, #12]
  /* block until SDIO peripherial is ready again or a timeout occur */
  while( osKernelSysTick() - timer < timeout)
 8014a84:	e006      	b.n	8014a94 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014a86:	f7fe fa41 	bl	8012f0c <BSP_SD_GetCardState>
 8014a8a:	4603      	mov	r3, r0
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d101      	bne.n	8014a94 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8014a90:	2300      	movs	r3, #0
 8014a92:	e009      	b.n	8014aa8 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8014a94:	f7fb fc28 	bl	80102e8 <osKernelSysTick>
 8014a98:	4602      	mov	r2, r0
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	1ad3      	subs	r3, r2, r3
 8014a9e:	687a      	ldr	r2, [r7, #4]
 8014aa0:	429a      	cmp	r2, r3
 8014aa2:	d8f0      	bhi.n	8014a86 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8014aa4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014aa8:	4618      	mov	r0, r3
 8014aaa:	3710      	adds	r7, #16
 8014aac:	46bd      	mov	sp, r7
 8014aae:	bd80      	pop	{r7, pc}

08014ab0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8014ab0:	b580      	push	{r7, lr}
 8014ab2:	b082      	sub	sp, #8
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	4603      	mov	r3, r0
 8014ab8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8014aba:	4b0b      	ldr	r3, [pc, #44]	; (8014ae8 <SD_CheckStatus+0x38>)
 8014abc:	2201      	movs	r2, #1
 8014abe:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014ac0:	f7fe fa24 	bl	8012f0c <BSP_SD_GetCardState>
 8014ac4:	4603      	mov	r3, r0
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d107      	bne.n	8014ada <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8014aca:	4b07      	ldr	r3, [pc, #28]	; (8014ae8 <SD_CheckStatus+0x38>)
 8014acc:	781b      	ldrb	r3, [r3, #0]
 8014ace:	b2db      	uxtb	r3, r3
 8014ad0:	f023 0301 	bic.w	r3, r3, #1
 8014ad4:	b2da      	uxtb	r2, r3
 8014ad6:	4b04      	ldr	r3, [pc, #16]	; (8014ae8 <SD_CheckStatus+0x38>)
 8014ad8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8014ada:	4b03      	ldr	r3, [pc, #12]	; (8014ae8 <SD_CheckStatus+0x38>)
 8014adc:	781b      	ldrb	r3, [r3, #0]
 8014ade:	b2db      	uxtb	r3, r3
}
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	3708      	adds	r7, #8
 8014ae4:	46bd      	mov	sp, r7
 8014ae6:	bd80      	pop	{r7, pc}
 8014ae8:	20000028 	.word	0x20000028

08014aec <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8014aec:	b580      	push	{r7, lr}
 8014aee:	b084      	sub	sp, #16
 8014af0:	af00      	add	r7, sp, #0
 8014af2:	4603      	mov	r3, r0
 8014af4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 8014af6:	4b1a      	ldr	r3, [pc, #104]	; (8014b60 <SD_initialize+0x74>)
 8014af8:	2201      	movs	r2, #1
 8014afa:	701a      	strb	r2, [r3, #0]

  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 8014afc:	f7fb fbe8 	bl	80102d0 <osKernelRunning>
 8014b00:	4603      	mov	r3, r0
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d025      	beq.n	8014b52 <SD_initialize+0x66>
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8014b06:	f7fe f9a7 	bl	8012e58 <BSP_SD_Init>
 8014b0a:	4603      	mov	r3, r0
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d107      	bne.n	8014b20 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8014b10:	79fb      	ldrb	r3, [r7, #7]
 8014b12:	4618      	mov	r0, r3
 8014b14:	f7ff ffcc 	bl	8014ab0 <SD_CheckStatus>
 8014b18:	4603      	mov	r3, r0
 8014b1a:	461a      	mov	r2, r3
 8014b1c:	4b10      	ldr	r3, [pc, #64]	; (8014b60 <SD_initialize+0x74>)
 8014b1e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if ((Stat != STA_NOINIT) && (SDQueueID == NULL))
 8014b20:	4b0f      	ldr	r3, [pc, #60]	; (8014b60 <SD_initialize+0x74>)
 8014b22:	781b      	ldrb	r3, [r3, #0]
 8014b24:	b2db      	uxtb	r3, r3
 8014b26:	2b01      	cmp	r3, #1
 8014b28:	d013      	beq.n	8014b52 <SD_initialize+0x66>
 8014b2a:	4b0e      	ldr	r3, [pc, #56]	; (8014b64 <SD_initialize+0x78>)
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d10f      	bne.n	8014b52 <SD_initialize+0x66>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8014b32:	4a0d      	ldr	r2, [pc, #52]	; (8014b68 <SD_initialize+0x7c>)
 8014b34:	f107 0308 	add.w	r3, r7, #8
 8014b38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014b3c:	e883 0003 	stmia.w	r3, {r0, r1}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8014b40:	f107 0308 	add.w	r3, r7, #8
 8014b44:	2100      	movs	r1, #0
 8014b46:	4618      	mov	r0, r3
 8014b48:	f7fb fcd5 	bl	80104f6 <osMessageCreate>
 8014b4c:	4603      	mov	r3, r0
 8014b4e:	4a05      	ldr	r2, [pc, #20]	; (8014b64 <SD_initialize+0x78>)
 8014b50:	6013      	str	r3, [r2, #0]
    }
  }
  return Stat;
 8014b52:	4b03      	ldr	r3, [pc, #12]	; (8014b60 <SD_initialize+0x74>)
 8014b54:	781b      	ldrb	r3, [r3, #0]
 8014b56:	b2db      	uxtb	r3, r3
}
 8014b58:	4618      	mov	r0, r3
 8014b5a:	3710      	adds	r7, #16
 8014b5c:	46bd      	mov	sp, r7
 8014b5e:	bd80      	pop	{r7, pc}
 8014b60:	20000028 	.word	0x20000028
 8014b64:	20010434 	.word	0x20010434
 8014b68:	08016a4c 	.word	0x08016a4c

08014b6c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8014b6c:	b580      	push	{r7, lr}
 8014b6e:	b082      	sub	sp, #8
 8014b70:	af00      	add	r7, sp, #0
 8014b72:	4603      	mov	r3, r0
 8014b74:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8014b76:	79fb      	ldrb	r3, [r7, #7]
 8014b78:	4618      	mov	r0, r3
 8014b7a:	f7ff ff99 	bl	8014ab0 <SD_CheckStatus>
 8014b7e:	4603      	mov	r3, r0
}
 8014b80:	4618      	mov	r0, r3
 8014b82:	3708      	adds	r7, #8
 8014b84:	46bd      	mov	sp, r7
 8014b86:	bd80      	pop	{r7, pc}

08014b88 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8014b88:	b580      	push	{r7, lr}
 8014b8a:	b08e      	sub	sp, #56	; 0x38
 8014b8c:	af00      	add	r7, sp, #0
 8014b8e:	61b9      	str	r1, [r7, #24]
 8014b90:	617a      	str	r2, [r7, #20]
 8014b92:	613b      	str	r3, [r7, #16]
 8014b94:	4603      	mov	r3, r0
 8014b96:	77fb      	strb	r3, [r7, #31]
  DRESULT res = RES_ERROR;
 8014b98:	2301      	movs	r3, #1
 8014b9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014b9e:	f247 5030 	movw	r0, #30000	; 0x7530
 8014ba2:	f7ff ff68 	bl	8014a76 <SD_CheckStatusWithTimeout>
 8014ba6:	4603      	mov	r3, r0
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	da02      	bge.n	8014bb2 <SD_read+0x2a>
  {
    return res;
 8014bac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014bb0:	e06c      	b.n	8014c8c <SD_read+0x104>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8014bb2:	69bb      	ldr	r3, [r7, #24]
 8014bb4:	f003 0303 	and.w	r3, r3, #3
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d11e      	bne.n	8014bfa <SD_read+0x72>
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8014bbc:	693a      	ldr	r2, [r7, #16]
 8014bbe:	6979      	ldr	r1, [r7, #20]
 8014bc0:	69b8      	ldr	r0, [r7, #24]
 8014bc2:	f7fe f96f 	bl	8012ea4 <BSP_SD_ReadBlocks_DMA>
 8014bc6:	4603      	mov	r3, r0
 8014bc8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    if (ret == MSD_OK) {
 8014bcc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d159      	bne.n	8014c88 <SD_read+0x100>
      /* wait for a message from the queue or a timeout */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8014bd4:	4b2f      	ldr	r3, [pc, #188]	; (8014c94 <SD_read+0x10c>)
 8014bd6:	6819      	ldr	r1, [r3, #0]
 8014bd8:	f107 0320 	add.w	r3, r7, #32
 8014bdc:	f247 5230 	movw	r2, #30000	; 0x7530
 8014be0:	4618      	mov	r0, r3
 8014be2:	f7fb fcdb 	bl	801059c <osMessageGet>
      if (event.status == osEventMessage) {
 8014be6:	6a3b      	ldr	r3, [r7, #32]
 8014be8:	2b10      	cmp	r3, #16
 8014bea:	d14d      	bne.n	8014c88 <SD_read+0x100>
        if (event.value.v == READ_CPLT_MSG) {
 8014bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bee:	2b01      	cmp	r3, #1
 8014bf0:	d14a      	bne.n	8014c88 <SD_read+0x100>
          res = RES_OK;
 8014bf2:	2300      	movs	r3, #0
 8014bf4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014bf8:	e046      	b.n	8014c88 <SD_read+0x100>
#if defined(ENABLE_SCRATCH_BUFFER)
  } else {
    /* Slow path, fetch each sector a part and memcpy to destination buffer */
    int i;
    uint8_t ret;
    for (i = 0; i < count; i++) {
 8014bfa:	2300      	movs	r3, #0
 8014bfc:	633b      	str	r3, [r7, #48]	; 0x30
 8014bfe:	e032      	b.n	8014c66 <SD_read+0xde>
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8014c00:	697b      	ldr	r3, [r7, #20]
 8014c02:	1c5a      	adds	r2, r3, #1
 8014c04:	617a      	str	r2, [r7, #20]
 8014c06:	2201      	movs	r2, #1
 8014c08:	4619      	mov	r1, r3
 8014c0a:	4823      	ldr	r0, [pc, #140]	; (8014c98 <SD_read+0x110>)
 8014c0c:	f7fe f94a 	bl	8012ea4 <BSP_SD_ReadBlocks_DMA>
 8014c10:	4603      	mov	r3, r0
 8014c12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (ret == MSD_OK) {
 8014c16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d128      	bne.n	8014c70 <SD_read+0xe8>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8014c1e:	4b1d      	ldr	r3, [pc, #116]	; (8014c94 <SD_read+0x10c>)
 8014c20:	6819      	ldr	r1, [r3, #0]
 8014c22:	463b      	mov	r3, r7
 8014c24:	f247 5230 	movw	r2, #30000	; 0x7530
 8014c28:	4618      	mov	r0, r3
 8014c2a:	f7fb fcb7 	bl	801059c <osMessageGet>
 8014c2e:	f107 0320 	add.w	r3, r7, #32
 8014c32:	463a      	mov	r2, r7
 8014c34:	ca07      	ldmia	r2, {r0, r1, r2}
 8014c36:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 8014c3a:	6a3b      	ldr	r3, [r7, #32]
 8014c3c:	2b10      	cmp	r3, #16
 8014c3e:	d10f      	bne.n	8014c60 <SD_read+0xd8>
          if (event.value.v == READ_CPLT_MSG) {
 8014c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c42:	2b01      	cmp	r3, #1
 8014c44:	d10c      	bne.n	8014c60 <SD_read+0xd8>
            *
            * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
            */
            SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
            memcpy(buff, scratch, BLOCKSIZE);
 8014c46:	69bb      	ldr	r3, [r7, #24]
 8014c48:	4a13      	ldr	r2, [pc, #76]	; (8014c98 <SD_read+0x110>)
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	4611      	mov	r1, r2
 8014c4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014c52:	461a      	mov	r2, r3
 8014c54:	f001 fd50 	bl	80166f8 <memcpy>
            buff += BLOCKSIZE;
 8014c58:	69bb      	ldr	r3, [r7, #24]
 8014c5a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8014c5e:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 8014c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c62:	3301      	adds	r3, #1
 8014c64:	633b      	str	r3, [r7, #48]	; 0x30
 8014c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c68:	693a      	ldr	r2, [r7, #16]
 8014c6a:	429a      	cmp	r2, r3
 8014c6c:	d8c8      	bhi.n	8014c00 <SD_read+0x78>
 8014c6e:	e000      	b.n	8014c72 <SD_read+0xea>
          }
        }
      }
      else
      {
        break;
 8014c70:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 8014c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c74:	693a      	ldr	r2, [r7, #16]
 8014c76:	429a      	cmp	r2, r3
 8014c78:	d106      	bne.n	8014c88 <SD_read+0x100>
 8014c7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d102      	bne.n	8014c88 <SD_read+0x100>
      res = RES_OK;
 8014c82:	2300      	movs	r3, #0
 8014c84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

#endif

  return res;
 8014c88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
} 
 8014c8c:	4618      	mov	r0, r3
 8014c8e:	3738      	adds	r7, #56	; 0x38
 8014c90:	46bd      	mov	sp, r7
 8014c92:	bd80      	pop	{r7, pc}
 8014c94:	20010434 	.word	0x20010434
 8014c98:	20010234 	.word	0x20010234

08014c9c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8014c9c:	b580      	push	{r7, lr}
 8014c9e:	b090      	sub	sp, #64	; 0x40
 8014ca0:	af00      	add	r7, sp, #0
 8014ca2:	61b9      	str	r1, [r7, #24]
 8014ca4:	617a      	str	r2, [r7, #20]
 8014ca6:	613b      	str	r3, [r7, #16]
 8014ca8:	4603      	mov	r3, r0
 8014caa:	77fb      	strb	r3, [r7, #31]
  osEvent event;
  DRESULT res = RES_ERROR;
 8014cac:	2301      	movs	r3, #1
 8014cae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014cb2:	f247 5030 	movw	r0, #30000	; 0x7530
 8014cb6:	f7ff fede 	bl	8014a76 <SD_CheckStatusWithTimeout>
 8014cba:	4603      	mov	r3, r0
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	da02      	bge.n	8014cc6 <SD_write+0x2a>
  {
    return res;
 8014cc0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014cc4:	e07c      	b.n	8014dc0 <SD_write+0x124>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8014cc6:	69bb      	ldr	r3, [r7, #24]
 8014cc8:	f003 0303 	and.w	r3, r3, #3
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d12e      	bne.n	8014d2e <SD_write+0x92>
    * This is not needed if the memory region is configured as W/T.
    */
    alignedAddr = (uint32_t)buff & ~0x1F;
    SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8014cd0:	693a      	ldr	r2, [r7, #16]
 8014cd2:	6979      	ldr	r1, [r7, #20]
 8014cd4:	69b8      	ldr	r0, [r7, #24]
 8014cd6:	f7fe f8ff 	bl	8012ed8 <BSP_SD_WriteBlocks_DMA>
 8014cda:	4603      	mov	r3, r0
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d16d      	bne.n	8014dbc <SD_write+0x120>
                              (uint32_t) (sector),
                              count) == MSD_OK)
    {
      /* Get the message from the queue */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8014ce0:	4b39      	ldr	r3, [pc, #228]	; (8014dc8 <SD_write+0x12c>)
 8014ce2:	6819      	ldr	r1, [r3, #0]
 8014ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014ce8:	f247 5230 	movw	r2, #30000	; 0x7530
 8014cec:	4618      	mov	r0, r3
 8014cee:	f7fb fc55 	bl	801059c <osMessageGet>

      if (event.status == osEventMessage)
 8014cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cf4:	2b10      	cmp	r3, #16
 8014cf6:	d161      	bne.n	8014dbc <SD_write+0x120>
      {
        if (event.value.v == WRITE_CPLT_MSG)
 8014cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cfa:	2b02      	cmp	r3, #2
 8014cfc:	d15e      	bne.n	8014dbc <SD_write+0x120>
        {
          timer = osKernelSysTick() + SD_TIMEOUT;
 8014cfe:	f7fb faf3 	bl	80102e8 <osKernelSysTick>
 8014d02:	4602      	mov	r2, r0
 8014d04:	f247 5330 	movw	r3, #30000	; 0x7530
 8014d08:	4413      	add	r3, r2
 8014d0a:	633b      	str	r3, [r7, #48]	; 0x30
          /* block until SDIO IP is ready or a timeout occur */
          while(timer > osKernelSysTick())
 8014d0c:	e008      	b.n	8014d20 <SD_write+0x84>
          {
            if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014d0e:	f7fe f8fd 	bl	8012f0c <BSP_SD_GetCardState>
 8014d12:	4603      	mov	r3, r0
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d103      	bne.n	8014d20 <SD_write+0x84>
            {
              res = RES_OK;
 8014d18:	2300      	movs	r3, #0
 8014d1a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 8014d1e:	e04d      	b.n	8014dbc <SD_write+0x120>
          while(timer > osKernelSysTick())
 8014d20:	f7fb fae2 	bl	80102e8 <osKernelSysTick>
 8014d24:	4602      	mov	r2, r0
 8014d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d28:	4293      	cmp	r3, r2
 8014d2a:	d8f0      	bhi.n	8014d0e <SD_write+0x72>
 8014d2c:	e046      	b.n	8014dbc <SD_write+0x120>
    * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
    */
    SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

    for (i = 0; i < count; i++) {
 8014d2e:	2300      	movs	r3, #0
 8014d30:	63bb      	str	r3, [r7, #56]	; 0x38
 8014d32:	e032      	b.n	8014d9a <SD_write+0xfe>
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8014d34:	697b      	ldr	r3, [r7, #20]
 8014d36:	1c5a      	adds	r2, r3, #1
 8014d38:	617a      	str	r2, [r7, #20]
 8014d3a:	2201      	movs	r2, #1
 8014d3c:	4619      	mov	r1, r3
 8014d3e:	4823      	ldr	r0, [pc, #140]	; (8014dcc <SD_write+0x130>)
 8014d40:	f7fe f8ca 	bl	8012ed8 <BSP_SD_WriteBlocks_DMA>
 8014d44:	4603      	mov	r3, r0
 8014d46:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (ret == MSD_OK) {
 8014d4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d128      	bne.n	8014da4 <SD_write+0x108>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8014d52:	4b1d      	ldr	r3, [pc, #116]	; (8014dc8 <SD_write+0x12c>)
 8014d54:	6819      	ldr	r1, [r3, #0]
 8014d56:	463b      	mov	r3, r7
 8014d58:	f247 5230 	movw	r2, #30000	; 0x7530
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	f7fb fc1d 	bl	801059c <osMessageGet>
 8014d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014d66:	463a      	mov	r2, r7
 8014d68:	ca07      	ldmia	r2, {r0, r1, r2}
 8014d6a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 8014d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d70:	2b10      	cmp	r3, #16
 8014d72:	d10f      	bne.n	8014d94 <SD_write+0xf8>
          if (event.value.v == WRITE_CPLT_MSG) {
 8014d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d76:	2b02      	cmp	r3, #2
 8014d78:	d10c      	bne.n	8014d94 <SD_write+0xf8>
            memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 8014d7a:	69bb      	ldr	r3, [r7, #24]
 8014d7c:	4a13      	ldr	r2, [pc, #76]	; (8014dcc <SD_write+0x130>)
 8014d7e:	4618      	mov	r0, r3
 8014d80:	4611      	mov	r1, r2
 8014d82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014d86:	461a      	mov	r2, r3
 8014d88:	f001 fcb6 	bl	80166f8 <memcpy>
            buff += BLOCKSIZE;
 8014d8c:	69bb      	ldr	r3, [r7, #24]
 8014d8e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8014d92:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 8014d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d96:	3301      	adds	r3, #1
 8014d98:	63bb      	str	r3, [r7, #56]	; 0x38
 8014d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d9c:	693a      	ldr	r2, [r7, #16]
 8014d9e:	429a      	cmp	r2, r3
 8014da0:	d8c8      	bhi.n	8014d34 <SD_write+0x98>
 8014da2:	e000      	b.n	8014da6 <SD_write+0x10a>
          }
        }
      }
      else
      {
        break;
 8014da4:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 8014da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014da8:	693a      	ldr	r2, [r7, #16]
 8014daa:	429a      	cmp	r2, r3
 8014dac:	d106      	bne.n	8014dbc <SD_write+0x120>
 8014dae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d102      	bne.n	8014dbc <SD_write+0x120>
      res = RES_OK;
 8014db6:	2300      	movs	r3, #0
 8014db8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
#endif
  return res;
 8014dbc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
} 
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	3740      	adds	r7, #64	; 0x40
 8014dc4:	46bd      	mov	sp, r7
 8014dc6:	bd80      	pop	{r7, pc}
 8014dc8:	20010434 	.word	0x20010434
 8014dcc:	20010234 	.word	0x20010234

08014dd0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8014dd0:	b580      	push	{r7, lr}
 8014dd2:	b08c      	sub	sp, #48	; 0x30
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	4603      	mov	r3, r0
 8014dd8:	603a      	str	r2, [r7, #0]
 8014dda:	71fb      	strb	r3, [r7, #7]
 8014ddc:	460b      	mov	r3, r1
 8014dde:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8014de0:	2301      	movs	r3, #1
 8014de2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8014de6:	4b25      	ldr	r3, [pc, #148]	; (8014e7c <SD_ioctl+0xac>)
 8014de8:	781b      	ldrb	r3, [r3, #0]
 8014dea:	b2db      	uxtb	r3, r3
 8014dec:	f003 0301 	and.w	r3, r3, #1
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d001      	beq.n	8014df8 <SD_ioctl+0x28>
 8014df4:	2303      	movs	r3, #3
 8014df6:	e03c      	b.n	8014e72 <SD_ioctl+0xa2>

  switch (cmd)
 8014df8:	79bb      	ldrb	r3, [r7, #6]
 8014dfa:	2b03      	cmp	r3, #3
 8014dfc:	d834      	bhi.n	8014e68 <SD_ioctl+0x98>
 8014dfe:	a201      	add	r2, pc, #4	; (adr r2, 8014e04 <SD_ioctl+0x34>)
 8014e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e04:	08014e15 	.word	0x08014e15
 8014e08:	08014e1d 	.word	0x08014e1d
 8014e0c:	08014e35 	.word	0x08014e35
 8014e10:	08014e4f 	.word	0x08014e4f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8014e14:	2300      	movs	r3, #0
 8014e16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014e1a:	e028      	b.n	8014e6e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8014e1c:	f107 030c 	add.w	r3, r7, #12
 8014e20:	4618      	mov	r0, r3
 8014e22:	f7fe f883 	bl	8012f2c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8014e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014e28:	683b      	ldr	r3, [r7, #0]
 8014e2a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014e2c:	2300      	movs	r3, #0
 8014e2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014e32:	e01c      	b.n	8014e6e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014e34:	f107 030c 	add.w	r3, r7, #12
 8014e38:	4618      	mov	r0, r3
 8014e3a:	f7fe f877 	bl	8012f2c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8014e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e40:	b29a      	uxth	r2, r3
 8014e42:	683b      	ldr	r3, [r7, #0]
 8014e44:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8014e46:	2300      	movs	r3, #0
 8014e48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014e4c:	e00f      	b.n	8014e6e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014e4e:	f107 030c 	add.w	r3, r7, #12
 8014e52:	4618      	mov	r0, r3
 8014e54:	f7fe f86a 	bl	8012f2c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8014e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e5a:	0a5a      	lsrs	r2, r3, #9
 8014e5c:	683b      	ldr	r3, [r7, #0]
 8014e5e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014e60:	2300      	movs	r3, #0
 8014e62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014e66:	e002      	b.n	8014e6e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8014e68:	2304      	movs	r3, #4
 8014e6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8014e6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8014e72:	4618      	mov	r0, r3
 8014e74:	3730      	adds	r7, #48	; 0x30
 8014e76:	46bd      	mov	sp, r7
 8014e78:	bd80      	pop	{r7, pc}
 8014e7a:	bf00      	nop
 8014e7c:	20000028 	.word	0x20000028

08014e80 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8014e80:	b580      	push	{r7, lr}
 8014e82:	af00      	add	r7, sp, #0
  
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, WRITE_CPLT_MSG, osWaitForever);
 8014e84:	4b04      	ldr	r3, [pc, #16]	; (8014e98 <BSP_SD_WriteCpltCallback+0x18>)
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	f04f 32ff 	mov.w	r2, #4294967295
 8014e8c:	2102      	movs	r1, #2
 8014e8e:	4618      	mov	r0, r3
 8014e90:	f7fb fb44 	bl	801051c <osMessagePut>
}
 8014e94:	bf00      	nop
 8014e96:	bd80      	pop	{r7, pc}
 8014e98:	20010434 	.word	0x20010434

08014e9c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8014e9c:	b580      	push	{r7, lr}
 8014e9e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 8014ea0:	4b04      	ldr	r3, [pc, #16]	; (8014eb4 <BSP_SD_ReadCpltCallback+0x18>)
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8014ea8:	2101      	movs	r1, #1
 8014eaa:	4618      	mov	r0, r3
 8014eac:	f7fb fb36 	bl	801051c <osMessagePut>
}
 8014eb0:	bf00      	nop
 8014eb2:	bd80      	pop	{r7, pc}
 8014eb4:	20010434 	.word	0x20010434

08014eb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8014eb8:	b580      	push	{r7, lr}
 8014eba:	b082      	sub	sp, #8
 8014ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8014ebe:	4b11      	ldr	r3, [pc, #68]	; (8014f04 <HAL_MspInit+0x4c>)
 8014ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014ec2:	4a10      	ldr	r2, [pc, #64]	; (8014f04 <HAL_MspInit+0x4c>)
 8014ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8014eca:	4b0e      	ldr	r3, [pc, #56]	; (8014f04 <HAL_MspInit+0x4c>)
 8014ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014ed2:	607b      	str	r3, [r7, #4]
 8014ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8014ed6:	4b0b      	ldr	r3, [pc, #44]	; (8014f04 <HAL_MspInit+0x4c>)
 8014ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014eda:	4a0a      	ldr	r2, [pc, #40]	; (8014f04 <HAL_MspInit+0x4c>)
 8014edc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8014ee2:	4b08      	ldr	r3, [pc, #32]	; (8014f04 <HAL_MspInit+0x4c>)
 8014ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014eea:	603b      	str	r3, [r7, #0]
 8014eec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8014eee:	2200      	movs	r2, #0
 8014ef0:	210f      	movs	r1, #15
 8014ef2:	f06f 0001 	mvn.w	r0, #1
 8014ef6:	f7eb fe83 	bl	8000c00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8014efa:	bf00      	nop
 8014efc:	3708      	adds	r7, #8
 8014efe:	46bd      	mov	sp, r7
 8014f00:	bd80      	pop	{r7, pc}
 8014f02:	bf00      	nop
 8014f04:	40023800 	.word	0x40023800

08014f08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	b08a      	sub	sp, #40	; 0x28
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014f10:	f107 0314 	add.w	r3, r7, #20
 8014f14:	2200      	movs	r2, #0
 8014f16:	601a      	str	r2, [r3, #0]
 8014f18:	605a      	str	r2, [r3, #4]
 8014f1a:	609a      	str	r2, [r3, #8]
 8014f1c:	60da      	str	r2, [r3, #12]
 8014f1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	4a21      	ldr	r2, [pc, #132]	; (8014fac <HAL_ADC_MspInit+0xa4>)
 8014f26:	4293      	cmp	r3, r2
 8014f28:	d13c      	bne.n	8014fa4 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8014f2a:	4b21      	ldr	r3, [pc, #132]	; (8014fb0 <HAL_ADC_MspInit+0xa8>)
 8014f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014f2e:	4a20      	ldr	r2, [pc, #128]	; (8014fb0 <HAL_ADC_MspInit+0xa8>)
 8014f30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8014f34:	6453      	str	r3, [r2, #68]	; 0x44
 8014f36:	4b1e      	ldr	r3, [pc, #120]	; (8014fb0 <HAL_ADC_MspInit+0xa8>)
 8014f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014f3e:	613b      	str	r3, [r7, #16]
 8014f40:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8014f42:	4b1b      	ldr	r3, [pc, #108]	; (8014fb0 <HAL_ADC_MspInit+0xa8>)
 8014f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f46:	4a1a      	ldr	r2, [pc, #104]	; (8014fb0 <HAL_ADC_MspInit+0xa8>)
 8014f48:	f043 0320 	orr.w	r3, r3, #32
 8014f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8014f4e:	4b18      	ldr	r3, [pc, #96]	; (8014fb0 <HAL_ADC_MspInit+0xa8>)
 8014f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f52:	f003 0320 	and.w	r3, r3, #32
 8014f56:	60fb      	str	r3, [r7, #12]
 8014f58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014f5a:	4b15      	ldr	r3, [pc, #84]	; (8014fb0 <HAL_ADC_MspInit+0xa8>)
 8014f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f5e:	4a14      	ldr	r2, [pc, #80]	; (8014fb0 <HAL_ADC_MspInit+0xa8>)
 8014f60:	f043 0301 	orr.w	r3, r3, #1
 8014f64:	6313      	str	r3, [r2, #48]	; 0x30
 8014f66:	4b12      	ldr	r3, [pc, #72]	; (8014fb0 <HAL_ADC_MspInit+0xa8>)
 8014f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f6a:	f003 0301 	and.w	r3, r3, #1
 8014f6e:	60bb      	str	r3, [r7, #8]
 8014f70:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 8014f72:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8014f76:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014f78:	2303      	movs	r3, #3
 8014f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014f7c:	2300      	movs	r3, #0
 8014f7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8014f80:	f107 0314 	add.w	r3, r7, #20
 8014f84:	4619      	mov	r1, r3
 8014f86:	480b      	ldr	r0, [pc, #44]	; (8014fb4 <HAL_ADC_MspInit+0xac>)
 8014f88:	f7ec fd52 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8014f8c:	2301      	movs	r3, #1
 8014f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014f90:	2303      	movs	r3, #3
 8014f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014f94:	2300      	movs	r3, #0
 8014f96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8014f98:	f107 0314 	add.w	r3, r7, #20
 8014f9c:	4619      	mov	r1, r3
 8014f9e:	4806      	ldr	r0, [pc, #24]	; (8014fb8 <HAL_ADC_MspInit+0xb0>)
 8014fa0:	f7ec fd46 	bl	8001a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8014fa4:	bf00      	nop
 8014fa6:	3728      	adds	r7, #40	; 0x28
 8014fa8:	46bd      	mov	sp, r7
 8014faa:	bd80      	pop	{r7, pc}
 8014fac:	40012200 	.word	0x40012200
 8014fb0:	40023800 	.word	0x40023800
 8014fb4:	40021400 	.word	0x40021400
 8014fb8:	40020000 	.word	0x40020000

08014fbc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8014fbc:	b480      	push	{r7}
 8014fbe:	b085      	sub	sp, #20
 8014fc0:	af00      	add	r7, sp, #0
 8014fc2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	681b      	ldr	r3, [r3, #0]
 8014fc8:	4a0a      	ldr	r2, [pc, #40]	; (8014ff4 <HAL_CRC_MspInit+0x38>)
 8014fca:	4293      	cmp	r3, r2
 8014fcc:	d10b      	bne.n	8014fe6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8014fce:	4b0a      	ldr	r3, [pc, #40]	; (8014ff8 <HAL_CRC_MspInit+0x3c>)
 8014fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fd2:	4a09      	ldr	r2, [pc, #36]	; (8014ff8 <HAL_CRC_MspInit+0x3c>)
 8014fd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8014fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8014fda:	4b07      	ldr	r3, [pc, #28]	; (8014ff8 <HAL_CRC_MspInit+0x3c>)
 8014fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8014fe2:	60fb      	str	r3, [r7, #12]
 8014fe4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8014fe6:	bf00      	nop
 8014fe8:	3714      	adds	r7, #20
 8014fea:	46bd      	mov	sp, r7
 8014fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ff0:	4770      	bx	lr
 8014ff2:	bf00      	nop
 8014ff4:	40023000 	.word	0x40023000
 8014ff8:	40023800 	.word	0x40023800

08014ffc <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8014ffc:	b580      	push	{r7, lr}
 8014ffe:	b08e      	sub	sp, #56	; 0x38
 8015000:	af00      	add	r7, sp, #0
 8015002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015008:	2200      	movs	r2, #0
 801500a:	601a      	str	r2, [r3, #0]
 801500c:	605a      	str	r2, [r3, #4]
 801500e:	609a      	str	r2, [r3, #8]
 8015010:	60da      	str	r2, [r3, #12]
 8015012:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	4a50      	ldr	r2, [pc, #320]	; (801515c <HAL_DCMI_MspInit+0x160>)
 801501a:	4293      	cmp	r3, r2
 801501c:	f040 809a 	bne.w	8015154 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8015020:	4b4f      	ldr	r3, [pc, #316]	; (8015160 <HAL_DCMI_MspInit+0x164>)
 8015022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015024:	4a4e      	ldr	r2, [pc, #312]	; (8015160 <HAL_DCMI_MspInit+0x164>)
 8015026:	f043 0301 	orr.w	r3, r3, #1
 801502a:	6353      	str	r3, [r2, #52]	; 0x34
 801502c:	4b4c      	ldr	r3, [pc, #304]	; (8015160 <HAL_DCMI_MspInit+0x164>)
 801502e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015030:	f003 0301 	and.w	r3, r3, #1
 8015034:	623b      	str	r3, [r7, #32]
 8015036:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8015038:	4b49      	ldr	r3, [pc, #292]	; (8015160 <HAL_DCMI_MspInit+0x164>)
 801503a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801503c:	4a48      	ldr	r2, [pc, #288]	; (8015160 <HAL_DCMI_MspInit+0x164>)
 801503e:	f043 0310 	orr.w	r3, r3, #16
 8015042:	6313      	str	r3, [r2, #48]	; 0x30
 8015044:	4b46      	ldr	r3, [pc, #280]	; (8015160 <HAL_DCMI_MspInit+0x164>)
 8015046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015048:	f003 0310 	and.w	r3, r3, #16
 801504c:	61fb      	str	r3, [r7, #28]
 801504e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8015050:	4b43      	ldr	r3, [pc, #268]	; (8015160 <HAL_DCMI_MspInit+0x164>)
 8015052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015054:	4a42      	ldr	r2, [pc, #264]	; (8015160 <HAL_DCMI_MspInit+0x164>)
 8015056:	f043 0308 	orr.w	r3, r3, #8
 801505a:	6313      	str	r3, [r2, #48]	; 0x30
 801505c:	4b40      	ldr	r3, [pc, #256]	; (8015160 <HAL_DCMI_MspInit+0x164>)
 801505e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015060:	f003 0308 	and.w	r3, r3, #8
 8015064:	61bb      	str	r3, [r7, #24]
 8015066:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8015068:	4b3d      	ldr	r3, [pc, #244]	; (8015160 <HAL_DCMI_MspInit+0x164>)
 801506a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801506c:	4a3c      	ldr	r2, [pc, #240]	; (8015160 <HAL_DCMI_MspInit+0x164>)
 801506e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015072:	6313      	str	r3, [r2, #48]	; 0x30
 8015074:	4b3a      	ldr	r3, [pc, #232]	; (8015160 <HAL_DCMI_MspInit+0x164>)
 8015076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801507c:	617b      	str	r3, [r7, #20]
 801507e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8015080:	4b37      	ldr	r3, [pc, #220]	; (8015160 <HAL_DCMI_MspInit+0x164>)
 8015082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015084:	4a36      	ldr	r2, [pc, #216]	; (8015160 <HAL_DCMI_MspInit+0x164>)
 8015086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801508a:	6313      	str	r3, [r2, #48]	; 0x30
 801508c:	4b34      	ldr	r3, [pc, #208]	; (8015160 <HAL_DCMI_MspInit+0x164>)
 801508e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015094:	613b      	str	r3, [r7, #16]
 8015096:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015098:	4b31      	ldr	r3, [pc, #196]	; (8015160 <HAL_DCMI_MspInit+0x164>)
 801509a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801509c:	4a30      	ldr	r2, [pc, #192]	; (8015160 <HAL_DCMI_MspInit+0x164>)
 801509e:	f043 0301 	orr.w	r3, r3, #1
 80150a2:	6313      	str	r3, [r2, #48]	; 0x30
 80150a4:	4b2e      	ldr	r3, [pc, #184]	; (8015160 <HAL_DCMI_MspInit+0x164>)
 80150a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80150a8:	f003 0301 	and.w	r3, r3, #1
 80150ac:	60fb      	str	r3, [r7, #12]
 80150ae:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80150b0:	2360      	movs	r3, #96	; 0x60
 80150b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80150b4:	2302      	movs	r3, #2
 80150b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80150b8:	2300      	movs	r3, #0
 80150ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80150bc:	2300      	movs	r3, #0
 80150be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80150c0:	230d      	movs	r3, #13
 80150c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80150c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80150c8:	4619      	mov	r1, r3
 80150ca:	4826      	ldr	r0, [pc, #152]	; (8015164 <HAL_DCMI_MspInit+0x168>)
 80150cc:	f7ec fcb0 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80150d0:	2308      	movs	r3, #8
 80150d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80150d4:	2302      	movs	r3, #2
 80150d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80150d8:	2300      	movs	r3, #0
 80150da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80150dc:	2300      	movs	r3, #0
 80150de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80150e0:	230d      	movs	r3, #13
 80150e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80150e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80150e8:	4619      	mov	r1, r3
 80150ea:	481f      	ldr	r0, [pc, #124]	; (8015168 <HAL_DCMI_MspInit+0x16c>)
 80150ec:	f7ec fca0 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80150f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80150f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80150f6:	2302      	movs	r3, #2
 80150f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80150fa:	2300      	movs	r3, #0
 80150fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80150fe:	2300      	movs	r3, #0
 8015100:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8015102:	230d      	movs	r3, #13
 8015104:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8015106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801510a:	4619      	mov	r1, r3
 801510c:	4817      	ldr	r0, [pc, #92]	; (801516c <HAL_DCMI_MspInit+0x170>)
 801510e:	f7ec fc8f 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 8015112:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8015116:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015118:	2302      	movs	r3, #2
 801511a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801511c:	2300      	movs	r3, #0
 801511e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015120:	2300      	movs	r3, #0
 8015122:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8015124:	230d      	movs	r3, #13
 8015126:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8015128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801512c:	4619      	mov	r1, r3
 801512e:	4810      	ldr	r0, [pc, #64]	; (8015170 <HAL_DCMI_MspInit+0x174>)
 8015130:	f7ec fc7e 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8015134:	2350      	movs	r3, #80	; 0x50
 8015136:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015138:	2302      	movs	r3, #2
 801513a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801513c:	2300      	movs	r3, #0
 801513e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015140:	2300      	movs	r3, #0
 8015142:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8015144:	230d      	movs	r3, #13
 8015146:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801514c:	4619      	mov	r1, r3
 801514e:	4809      	ldr	r0, [pc, #36]	; (8015174 <HAL_DCMI_MspInit+0x178>)
 8015150:	f7ec fc6e 	bl	8001a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8015154:	bf00      	nop
 8015156:	3738      	adds	r7, #56	; 0x38
 8015158:	46bd      	mov	sp, r7
 801515a:	bd80      	pop	{r7, pc}
 801515c:	50050000 	.word	0x50050000
 8015160:	40023800 	.word	0x40023800
 8015164:	40021000 	.word	0x40021000
 8015168:	40020c00 	.word	0x40020c00
 801516c:	40021800 	.word	0x40021800
 8015170:	40021c00 	.word	0x40021c00
 8015174:	40020000 	.word	0x40020000

08015178 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8015178:	b580      	push	{r7, lr}
 801517a:	b084      	sub	sp, #16
 801517c:	af00      	add	r7, sp, #0
 801517e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	4a0d      	ldr	r2, [pc, #52]	; (80151bc <HAL_DMA2D_MspInit+0x44>)
 8015186:	4293      	cmp	r3, r2
 8015188:	d113      	bne.n	80151b2 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 801518a:	4b0d      	ldr	r3, [pc, #52]	; (80151c0 <HAL_DMA2D_MspInit+0x48>)
 801518c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801518e:	4a0c      	ldr	r2, [pc, #48]	; (80151c0 <HAL_DMA2D_MspInit+0x48>)
 8015190:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015194:	6313      	str	r3, [r2, #48]	; 0x30
 8015196:	4b0a      	ldr	r3, [pc, #40]	; (80151c0 <HAL_DMA2D_MspInit+0x48>)
 8015198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801519a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801519e:	60fb      	str	r3, [r7, #12]
 80151a0:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80151a2:	2200      	movs	r2, #0
 80151a4:	2105      	movs	r1, #5
 80151a6:	205a      	movs	r0, #90	; 0x5a
 80151a8:	f7eb fd2a 	bl	8000c00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80151ac:	205a      	movs	r0, #90	; 0x5a
 80151ae:	f7eb fd43 	bl	8000c38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80151b2:	bf00      	nop
 80151b4:	3710      	adds	r7, #16
 80151b6:	46bd      	mov	sp, r7
 80151b8:	bd80      	pop	{r7, pc}
 80151ba:	bf00      	nop
 80151bc:	4002b000 	.word	0x4002b000
 80151c0:	40023800 	.word	0x40023800

080151c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80151c4:	b580      	push	{r7, lr}
 80151c6:	b08c      	sub	sp, #48	; 0x30
 80151c8:	af00      	add	r7, sp, #0
 80151ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80151cc:	f107 031c 	add.w	r3, r7, #28
 80151d0:	2200      	movs	r2, #0
 80151d2:	601a      	str	r2, [r3, #0]
 80151d4:	605a      	str	r2, [r3, #4]
 80151d6:	609a      	str	r2, [r3, #8]
 80151d8:	60da      	str	r2, [r3, #12]
 80151da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	681b      	ldr	r3, [r3, #0]
 80151e0:	4a2f      	ldr	r2, [pc, #188]	; (80152a0 <HAL_I2C_MspInit+0xdc>)
 80151e2:	4293      	cmp	r3, r2
 80151e4:	d129      	bne.n	801523a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80151e6:	4b2f      	ldr	r3, [pc, #188]	; (80152a4 <HAL_I2C_MspInit+0xe0>)
 80151e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80151ea:	4a2e      	ldr	r2, [pc, #184]	; (80152a4 <HAL_I2C_MspInit+0xe0>)
 80151ec:	f043 0302 	orr.w	r3, r3, #2
 80151f0:	6313      	str	r3, [r2, #48]	; 0x30
 80151f2:	4b2c      	ldr	r3, [pc, #176]	; (80152a4 <HAL_I2C_MspInit+0xe0>)
 80151f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80151f6:	f003 0302 	and.w	r3, r3, #2
 80151fa:	61bb      	str	r3, [r7, #24]
 80151fc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80151fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8015202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8015204:	2312      	movs	r3, #18
 8015206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8015208:	2301      	movs	r3, #1
 801520a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801520c:	2300      	movs	r3, #0
 801520e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8015210:	2304      	movs	r3, #4
 8015212:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8015214:	f107 031c 	add.w	r3, r7, #28
 8015218:	4619      	mov	r1, r3
 801521a:	4823      	ldr	r0, [pc, #140]	; (80152a8 <HAL_I2C_MspInit+0xe4>)
 801521c:	f7ec fc08 	bl	8001a30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8015220:	4b20      	ldr	r3, [pc, #128]	; (80152a4 <HAL_I2C_MspInit+0xe0>)
 8015222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015224:	4a1f      	ldr	r2, [pc, #124]	; (80152a4 <HAL_I2C_MspInit+0xe0>)
 8015226:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801522a:	6413      	str	r3, [r2, #64]	; 0x40
 801522c:	4b1d      	ldr	r3, [pc, #116]	; (80152a4 <HAL_I2C_MspInit+0xe0>)
 801522e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015234:	617b      	str	r3, [r7, #20]
 8015236:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8015238:	e02d      	b.n	8015296 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	4a1b      	ldr	r2, [pc, #108]	; (80152ac <HAL_I2C_MspInit+0xe8>)
 8015240:	4293      	cmp	r3, r2
 8015242:	d128      	bne.n	8015296 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8015244:	4b17      	ldr	r3, [pc, #92]	; (80152a4 <HAL_I2C_MspInit+0xe0>)
 8015246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015248:	4a16      	ldr	r2, [pc, #88]	; (80152a4 <HAL_I2C_MspInit+0xe0>)
 801524a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801524e:	6313      	str	r3, [r2, #48]	; 0x30
 8015250:	4b14      	ldr	r3, [pc, #80]	; (80152a4 <HAL_I2C_MspInit+0xe0>)
 8015252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015258:	613b      	str	r3, [r7, #16]
 801525a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 801525c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8015260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8015262:	2312      	movs	r3, #18
 8015264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8015266:	2301      	movs	r3, #1
 8015268:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801526a:	2303      	movs	r3, #3
 801526c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 801526e:	2304      	movs	r3, #4
 8015270:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8015272:	f107 031c 	add.w	r3, r7, #28
 8015276:	4619      	mov	r1, r3
 8015278:	480d      	ldr	r0, [pc, #52]	; (80152b0 <HAL_I2C_MspInit+0xec>)
 801527a:	f7ec fbd9 	bl	8001a30 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 801527e:	4b09      	ldr	r3, [pc, #36]	; (80152a4 <HAL_I2C_MspInit+0xe0>)
 8015280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015282:	4a08      	ldr	r2, [pc, #32]	; (80152a4 <HAL_I2C_MspInit+0xe0>)
 8015284:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015288:	6413      	str	r3, [r2, #64]	; 0x40
 801528a:	4b06      	ldr	r3, [pc, #24]	; (80152a4 <HAL_I2C_MspInit+0xe0>)
 801528c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801528e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015292:	60fb      	str	r3, [r7, #12]
 8015294:	68fb      	ldr	r3, [r7, #12]
}
 8015296:	bf00      	nop
 8015298:	3730      	adds	r7, #48	; 0x30
 801529a:	46bd      	mov	sp, r7
 801529c:	bd80      	pop	{r7, pc}
 801529e:	bf00      	nop
 80152a0:	40005400 	.word	0x40005400
 80152a4:	40023800 	.word	0x40023800
 80152a8:	40020400 	.word	0x40020400
 80152ac:	40005c00 	.word	0x40005c00
 80152b0:	40021c00 	.word	0x40021c00

080152b4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80152b4:	b580      	push	{r7, lr}
 80152b6:	b08e      	sub	sp, #56	; 0x38
 80152b8:	af00      	add	r7, sp, #0
 80152ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80152bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80152c0:	2200      	movs	r2, #0
 80152c2:	601a      	str	r2, [r3, #0]
 80152c4:	605a      	str	r2, [r3, #4]
 80152c6:	609a      	str	r2, [r3, #8]
 80152c8:	60da      	str	r2, [r3, #12]
 80152ca:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	681b      	ldr	r3, [r3, #0]
 80152d0:	4a55      	ldr	r2, [pc, #340]	; (8015428 <HAL_LTDC_MspInit+0x174>)
 80152d2:	4293      	cmp	r3, r2
 80152d4:	f040 80a3 	bne.w	801541e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80152d8:	4b54      	ldr	r3, [pc, #336]	; (801542c <HAL_LTDC_MspInit+0x178>)
 80152da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80152dc:	4a53      	ldr	r2, [pc, #332]	; (801542c <HAL_LTDC_MspInit+0x178>)
 80152de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80152e2:	6453      	str	r3, [r2, #68]	; 0x44
 80152e4:	4b51      	ldr	r3, [pc, #324]	; (801542c <HAL_LTDC_MspInit+0x178>)
 80152e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80152e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80152ec:	623b      	str	r3, [r7, #32]
 80152ee:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80152f0:	4b4e      	ldr	r3, [pc, #312]	; (801542c <HAL_LTDC_MspInit+0x178>)
 80152f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80152f4:	4a4d      	ldr	r2, [pc, #308]	; (801542c <HAL_LTDC_MspInit+0x178>)
 80152f6:	f043 0310 	orr.w	r3, r3, #16
 80152fa:	6313      	str	r3, [r2, #48]	; 0x30
 80152fc:	4b4b      	ldr	r3, [pc, #300]	; (801542c <HAL_LTDC_MspInit+0x178>)
 80152fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015300:	f003 0310 	and.w	r3, r3, #16
 8015304:	61fb      	str	r3, [r7, #28]
 8015306:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8015308:	4b48      	ldr	r3, [pc, #288]	; (801542c <HAL_LTDC_MspInit+0x178>)
 801530a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801530c:	4a47      	ldr	r2, [pc, #284]	; (801542c <HAL_LTDC_MspInit+0x178>)
 801530e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8015312:	6313      	str	r3, [r2, #48]	; 0x30
 8015314:	4b45      	ldr	r3, [pc, #276]	; (801542c <HAL_LTDC_MspInit+0x178>)
 8015316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015318:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801531c:	61bb      	str	r3, [r7, #24]
 801531e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8015320:	4b42      	ldr	r3, [pc, #264]	; (801542c <HAL_LTDC_MspInit+0x178>)
 8015322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015324:	4a41      	ldr	r2, [pc, #260]	; (801542c <HAL_LTDC_MspInit+0x178>)
 8015326:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801532a:	6313      	str	r3, [r2, #48]	; 0x30
 801532c:	4b3f      	ldr	r3, [pc, #252]	; (801542c <HAL_LTDC_MspInit+0x178>)
 801532e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015334:	617b      	str	r3, [r7, #20]
 8015336:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8015338:	4b3c      	ldr	r3, [pc, #240]	; (801542c <HAL_LTDC_MspInit+0x178>)
 801533a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801533c:	4a3b      	ldr	r2, [pc, #236]	; (801542c <HAL_LTDC_MspInit+0x178>)
 801533e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015342:	6313      	str	r3, [r2, #48]	; 0x30
 8015344:	4b39      	ldr	r3, [pc, #228]	; (801542c <HAL_LTDC_MspInit+0x178>)
 8015346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801534c:	613b      	str	r3, [r7, #16]
 801534e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8015350:	4b36      	ldr	r3, [pc, #216]	; (801542c <HAL_LTDC_MspInit+0x178>)
 8015352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015354:	4a35      	ldr	r2, [pc, #212]	; (801542c <HAL_LTDC_MspInit+0x178>)
 8015356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801535a:	6313      	str	r3, [r2, #48]	; 0x30
 801535c:	4b33      	ldr	r3, [pc, #204]	; (801542c <HAL_LTDC_MspInit+0x178>)
 801535e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015364:	60fb      	str	r3, [r7, #12]
 8015366:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8015368:	2310      	movs	r3, #16
 801536a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801536c:	2302      	movs	r3, #2
 801536e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015370:	2300      	movs	r3, #0
 8015372:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015374:	2300      	movs	r3, #0
 8015376:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8015378:	230e      	movs	r3, #14
 801537a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 801537c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015380:	4619      	mov	r1, r3
 8015382:	482b      	ldr	r0, [pc, #172]	; (8015430 <HAL_LTDC_MspInit+0x17c>)
 8015384:	f7ec fb54 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8015388:	f64e 73ff 	movw	r3, #61439	; 0xefff
 801538c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801538e:	2302      	movs	r3, #2
 8015390:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015392:	2300      	movs	r3, #0
 8015394:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015396:	2300      	movs	r3, #0
 8015398:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 801539a:	230e      	movs	r3, #14
 801539c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 801539e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80153a2:	4619      	mov	r1, r3
 80153a4:	4823      	ldr	r0, [pc, #140]	; (8015434 <HAL_LTDC_MspInit+0x180>)
 80153a6:	f7ec fb43 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 80153aa:	23f7      	movs	r3, #247	; 0xf7
 80153ac:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80153ae:	2302      	movs	r3, #2
 80153b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80153b2:	2300      	movs	r3, #0
 80153b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80153b6:	2300      	movs	r3, #0
 80153b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80153ba:	230e      	movs	r3, #14
 80153bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80153be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80153c2:	4619      	mov	r1, r3
 80153c4:	481c      	ldr	r0, [pc, #112]	; (8015438 <HAL_LTDC_MspInit+0x184>)
 80153c6:	f7ec fb33 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80153ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80153ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80153d0:	2302      	movs	r3, #2
 80153d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80153d4:	2300      	movs	r3, #0
 80153d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80153d8:	2300      	movs	r3, #0
 80153da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80153dc:	2309      	movs	r3, #9
 80153de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80153e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80153e4:	4619      	mov	r1, r3
 80153e6:	4815      	ldr	r0, [pc, #84]	; (801543c <HAL_LTDC_MspInit+0x188>)
 80153e8:	f7ec fb22 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80153ec:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80153f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80153f2:	2302      	movs	r3, #2
 80153f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80153f6:	2300      	movs	r3, #0
 80153f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80153fa:	2300      	movs	r3, #0
 80153fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80153fe:	230e      	movs	r3, #14
 8015400:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8015402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015406:	4619      	mov	r1, r3
 8015408:	480d      	ldr	r0, [pc, #52]	; (8015440 <HAL_LTDC_MspInit+0x18c>)
 801540a:	f7ec fb11 	bl	8001a30 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 801540e:	2200      	movs	r2, #0
 8015410:	2105      	movs	r1, #5
 8015412:	2058      	movs	r0, #88	; 0x58
 8015414:	f7eb fbf4 	bl	8000c00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8015418:	2058      	movs	r0, #88	; 0x58
 801541a:	f7eb fc0d 	bl	8000c38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 801541e:	bf00      	nop
 8015420:	3738      	adds	r7, #56	; 0x38
 8015422:	46bd      	mov	sp, r7
 8015424:	bd80      	pop	{r7, pc}
 8015426:	bf00      	nop
 8015428:	40016800 	.word	0x40016800
 801542c:	40023800 	.word	0x40023800
 8015430:	40021000 	.word	0x40021000
 8015434:	40022400 	.word	0x40022400
 8015438:	40022800 	.word	0x40022800
 801543c:	40021800 	.word	0x40021800
 8015440:	40022000 	.word	0x40022000

08015444 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8015444:	b580      	push	{r7, lr}
 8015446:	b08c      	sub	sp, #48	; 0x30
 8015448:	af00      	add	r7, sp, #0
 801544a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801544c:	f107 031c 	add.w	r3, r7, #28
 8015450:	2200      	movs	r2, #0
 8015452:	601a      	str	r2, [r3, #0]
 8015454:	605a      	str	r2, [r3, #4]
 8015456:	609a      	str	r2, [r3, #8]
 8015458:	60da      	str	r2, [r3, #12]
 801545a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	4a3b      	ldr	r2, [pc, #236]	; (8015550 <HAL_QSPI_MspInit+0x10c>)
 8015462:	4293      	cmp	r3, r2
 8015464:	d170      	bne.n	8015548 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8015466:	4b3b      	ldr	r3, [pc, #236]	; (8015554 <HAL_QSPI_MspInit+0x110>)
 8015468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801546a:	4a3a      	ldr	r2, [pc, #232]	; (8015554 <HAL_QSPI_MspInit+0x110>)
 801546c:	f043 0302 	orr.w	r3, r3, #2
 8015470:	6393      	str	r3, [r2, #56]	; 0x38
 8015472:	4b38      	ldr	r3, [pc, #224]	; (8015554 <HAL_QSPI_MspInit+0x110>)
 8015474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015476:	f003 0302 	and.w	r3, r3, #2
 801547a:	61bb      	str	r3, [r7, #24]
 801547c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 801547e:	4b35      	ldr	r3, [pc, #212]	; (8015554 <HAL_QSPI_MspInit+0x110>)
 8015480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015482:	4a34      	ldr	r2, [pc, #208]	; (8015554 <HAL_QSPI_MspInit+0x110>)
 8015484:	f043 0310 	orr.w	r3, r3, #16
 8015488:	6313      	str	r3, [r2, #48]	; 0x30
 801548a:	4b32      	ldr	r3, [pc, #200]	; (8015554 <HAL_QSPI_MspInit+0x110>)
 801548c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801548e:	f003 0310 	and.w	r3, r3, #16
 8015492:	617b      	str	r3, [r7, #20]
 8015494:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015496:	4b2f      	ldr	r3, [pc, #188]	; (8015554 <HAL_QSPI_MspInit+0x110>)
 8015498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801549a:	4a2e      	ldr	r2, [pc, #184]	; (8015554 <HAL_QSPI_MspInit+0x110>)
 801549c:	f043 0302 	orr.w	r3, r3, #2
 80154a0:	6313      	str	r3, [r2, #48]	; 0x30
 80154a2:	4b2c      	ldr	r3, [pc, #176]	; (8015554 <HAL_QSPI_MspInit+0x110>)
 80154a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154a6:	f003 0302 	and.w	r3, r3, #2
 80154aa:	613b      	str	r3, [r7, #16]
 80154ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80154ae:	4b29      	ldr	r3, [pc, #164]	; (8015554 <HAL_QSPI_MspInit+0x110>)
 80154b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154b2:	4a28      	ldr	r2, [pc, #160]	; (8015554 <HAL_QSPI_MspInit+0x110>)
 80154b4:	f043 0308 	orr.w	r3, r3, #8
 80154b8:	6313      	str	r3, [r2, #48]	; 0x30
 80154ba:	4b26      	ldr	r3, [pc, #152]	; (8015554 <HAL_QSPI_MspInit+0x110>)
 80154bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154be:	f003 0308 	and.w	r3, r3, #8
 80154c2:	60fb      	str	r3, [r7, #12]
 80154c4:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80154c6:	2304      	movs	r3, #4
 80154c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80154ca:	2302      	movs	r3, #2
 80154cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80154ce:	2300      	movs	r3, #0
 80154d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80154d2:	2303      	movs	r3, #3
 80154d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80154d6:	2309      	movs	r3, #9
 80154d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80154da:	f107 031c 	add.w	r3, r7, #28
 80154de:	4619      	mov	r1, r3
 80154e0:	481d      	ldr	r0, [pc, #116]	; (8015558 <HAL_QSPI_MspInit+0x114>)
 80154e2:	f7ec faa5 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80154e6:	2340      	movs	r3, #64	; 0x40
 80154e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80154ea:	2302      	movs	r3, #2
 80154ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80154ee:	2300      	movs	r3, #0
 80154f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80154f2:	2303      	movs	r3, #3
 80154f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80154f6:	230a      	movs	r3, #10
 80154f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80154fa:	f107 031c 	add.w	r3, r7, #28
 80154fe:	4619      	mov	r1, r3
 8015500:	4816      	ldr	r0, [pc, #88]	; (801555c <HAL_QSPI_MspInit+0x118>)
 8015502:	f7ec fa95 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8015506:	2304      	movs	r3, #4
 8015508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801550a:	2302      	movs	r3, #2
 801550c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801550e:	2300      	movs	r3, #0
 8015510:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015512:	2303      	movs	r3, #3
 8015514:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8015516:	2309      	movs	r3, #9
 8015518:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801551a:	f107 031c 	add.w	r3, r7, #28
 801551e:	4619      	mov	r1, r3
 8015520:	480e      	ldr	r0, [pc, #56]	; (801555c <HAL_QSPI_MspInit+0x118>)
 8015522:	f7ec fa85 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8015526:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 801552a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801552c:	2302      	movs	r3, #2
 801552e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015530:	2300      	movs	r3, #0
 8015532:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015534:	2303      	movs	r3, #3
 8015536:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8015538:	2309      	movs	r3, #9
 801553a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801553c:	f107 031c 	add.w	r3, r7, #28
 8015540:	4619      	mov	r1, r3
 8015542:	4807      	ldr	r0, [pc, #28]	; (8015560 <HAL_QSPI_MspInit+0x11c>)
 8015544:	f7ec fa74 	bl	8001a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8015548:	bf00      	nop
 801554a:	3730      	adds	r7, #48	; 0x30
 801554c:	46bd      	mov	sp, r7
 801554e:	bd80      	pop	{r7, pc}
 8015550:	a0001000 	.word	0xa0001000
 8015554:	40023800 	.word	0x40023800
 8015558:	40021000 	.word	0x40021000
 801555c:	40020400 	.word	0x40020400
 8015560:	40020c00 	.word	0x40020c00

08015564 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8015564:	b480      	push	{r7}
 8015566:	b083      	sub	sp, #12
 8015568:	af00      	add	r7, sp, #0
 801556a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	4a07      	ldr	r2, [pc, #28]	; (8015590 <HAL_RTC_MspInit+0x2c>)
 8015572:	4293      	cmp	r3, r2
 8015574:	d105      	bne.n	8015582 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8015576:	4b07      	ldr	r3, [pc, #28]	; (8015594 <HAL_RTC_MspInit+0x30>)
 8015578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801557a:	4a06      	ldr	r2, [pc, #24]	; (8015594 <HAL_RTC_MspInit+0x30>)
 801557c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015580:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8015582:	bf00      	nop
 8015584:	370c      	adds	r7, #12
 8015586:	46bd      	mov	sp, r7
 8015588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801558c:	4770      	bx	lr
 801558e:	bf00      	nop
 8015590:	40002800 	.word	0x40002800
 8015594:	40023800 	.word	0x40023800

08015598 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8015598:	b580      	push	{r7, lr}
 801559a:	b08a      	sub	sp, #40	; 0x28
 801559c:	af00      	add	r7, sp, #0
 801559e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80155a0:	f107 0314 	add.w	r3, r7, #20
 80155a4:	2200      	movs	r2, #0
 80155a6:	601a      	str	r2, [r3, #0]
 80155a8:	605a      	str	r2, [r3, #4]
 80155aa:	609a      	str	r2, [r3, #8]
 80155ac:	60da      	str	r2, [r3, #12]
 80155ae:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	4a65      	ldr	r2, [pc, #404]	; (801574c <HAL_SD_MspInit+0x1b4>)
 80155b6:	4293      	cmp	r3, r2
 80155b8:	f040 80c3 	bne.w	8015742 <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80155bc:	4b64      	ldr	r3, [pc, #400]	; (8015750 <HAL_SD_MspInit+0x1b8>)
 80155be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80155c0:	4a63      	ldr	r2, [pc, #396]	; (8015750 <HAL_SD_MspInit+0x1b8>)
 80155c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80155c6:	6453      	str	r3, [r2, #68]	; 0x44
 80155c8:	4b61      	ldr	r3, [pc, #388]	; (8015750 <HAL_SD_MspInit+0x1b8>)
 80155ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80155cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80155d0:	613b      	str	r3, [r7, #16]
 80155d2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80155d4:	4b5e      	ldr	r3, [pc, #376]	; (8015750 <HAL_SD_MspInit+0x1b8>)
 80155d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80155d8:	4a5d      	ldr	r2, [pc, #372]	; (8015750 <HAL_SD_MspInit+0x1b8>)
 80155da:	f043 0304 	orr.w	r3, r3, #4
 80155de:	6313      	str	r3, [r2, #48]	; 0x30
 80155e0:	4b5b      	ldr	r3, [pc, #364]	; (8015750 <HAL_SD_MspInit+0x1b8>)
 80155e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80155e4:	f003 0304 	and.w	r3, r3, #4
 80155e8:	60fb      	str	r3, [r7, #12]
 80155ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80155ec:	4b58      	ldr	r3, [pc, #352]	; (8015750 <HAL_SD_MspInit+0x1b8>)
 80155ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80155f0:	4a57      	ldr	r2, [pc, #348]	; (8015750 <HAL_SD_MspInit+0x1b8>)
 80155f2:	f043 0308 	orr.w	r3, r3, #8
 80155f6:	6313      	str	r3, [r2, #48]	; 0x30
 80155f8:	4b55      	ldr	r3, [pc, #340]	; (8015750 <HAL_SD_MspInit+0x1b8>)
 80155fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80155fc:	f003 0308 	and.w	r3, r3, #8
 8015600:	60bb      	str	r3, [r7, #8]
 8015602:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8015604:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8015608:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801560a:	2302      	movs	r3, #2
 801560c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801560e:	2300      	movs	r3, #0
 8015610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015612:	2303      	movs	r3, #3
 8015614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8015616:	230c      	movs	r3, #12
 8015618:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801561a:	f107 0314 	add.w	r3, r7, #20
 801561e:	4619      	mov	r1, r3
 8015620:	484c      	ldr	r0, [pc, #304]	; (8015754 <HAL_SD_MspInit+0x1bc>)
 8015622:	f7ec fa05 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8015626:	2304      	movs	r3, #4
 8015628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801562a:	2302      	movs	r3, #2
 801562c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801562e:	2300      	movs	r3, #0
 8015630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015632:	2303      	movs	r3, #3
 8015634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8015636:	230c      	movs	r3, #12
 8015638:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 801563a:	f107 0314 	add.w	r3, r7, #20
 801563e:	4619      	mov	r1, r3
 8015640:	4845      	ldr	r0, [pc, #276]	; (8015758 <HAL_SD_MspInit+0x1c0>)
 8015642:	f7ec f9f5 	bl	8001a30 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream3;
 8015646:	4b45      	ldr	r3, [pc, #276]	; (801575c <HAL_SD_MspInit+0x1c4>)
 8015648:	4a45      	ldr	r2, [pc, #276]	; (8015760 <HAL_SD_MspInit+0x1c8>)
 801564a:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 801564c:	4b43      	ldr	r3, [pc, #268]	; (801575c <HAL_SD_MspInit+0x1c4>)
 801564e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8015652:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8015654:	4b41      	ldr	r3, [pc, #260]	; (801575c <HAL_SD_MspInit+0x1c4>)
 8015656:	2240      	movs	r2, #64	; 0x40
 8015658:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 801565a:	4b40      	ldr	r3, [pc, #256]	; (801575c <HAL_SD_MspInit+0x1c4>)
 801565c:	2200      	movs	r2, #0
 801565e:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8015660:	4b3e      	ldr	r3, [pc, #248]	; (801575c <HAL_SD_MspInit+0x1c4>)
 8015662:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015666:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8015668:	4b3c      	ldr	r3, [pc, #240]	; (801575c <HAL_SD_MspInit+0x1c4>)
 801566a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801566e:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8015670:	4b3a      	ldr	r3, [pc, #232]	; (801575c <HAL_SD_MspInit+0x1c4>)
 8015672:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8015676:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8015678:	4b38      	ldr	r3, [pc, #224]	; (801575c <HAL_SD_MspInit+0x1c4>)
 801567a:	2220      	movs	r2, #32
 801567c:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 801567e:	4b37      	ldr	r3, [pc, #220]	; (801575c <HAL_SD_MspInit+0x1c4>)
 8015680:	2200      	movs	r2, #0
 8015682:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8015684:	4b35      	ldr	r3, [pc, #212]	; (801575c <HAL_SD_MspInit+0x1c4>)
 8015686:	2204      	movs	r2, #4
 8015688:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 801568a:	4b34      	ldr	r3, [pc, #208]	; (801575c <HAL_SD_MspInit+0x1c4>)
 801568c:	2203      	movs	r2, #3
 801568e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8015690:	4b32      	ldr	r3, [pc, #200]	; (801575c <HAL_SD_MspInit+0x1c4>)
 8015692:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8015696:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8015698:	4b30      	ldr	r3, [pc, #192]	; (801575c <HAL_SD_MspInit+0x1c4>)
 801569a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801569e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80156a0:	482e      	ldr	r0, [pc, #184]	; (801575c <HAL_SD_MspInit+0x1c4>)
 80156a2:	f7eb fc33 	bl	8000f0c <HAL_DMA_Init>
 80156a6:	4603      	mov	r3, r0
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d001      	beq.n	80156b0 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 80156ac:	f7ff f9dc 	bl	8014a68 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	4a2a      	ldr	r2, [pc, #168]	; (801575c <HAL_SD_MspInit+0x1c4>)
 80156b4:	641a      	str	r2, [r3, #64]	; 0x40
 80156b6:	4a29      	ldr	r2, [pc, #164]	; (801575c <HAL_SD_MspInit+0x1c4>)
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream6;
 80156bc:	4b29      	ldr	r3, [pc, #164]	; (8015764 <HAL_SD_MspInit+0x1cc>)
 80156be:	4a2a      	ldr	r2, [pc, #168]	; (8015768 <HAL_SD_MspInit+0x1d0>)
 80156c0:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80156c2:	4b28      	ldr	r3, [pc, #160]	; (8015764 <HAL_SD_MspInit+0x1cc>)
 80156c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80156c8:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80156ca:	4b26      	ldr	r3, [pc, #152]	; (8015764 <HAL_SD_MspInit+0x1cc>)
 80156cc:	2200      	movs	r2, #0
 80156ce:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80156d0:	4b24      	ldr	r3, [pc, #144]	; (8015764 <HAL_SD_MspInit+0x1cc>)
 80156d2:	2200      	movs	r2, #0
 80156d4:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80156d6:	4b23      	ldr	r3, [pc, #140]	; (8015764 <HAL_SD_MspInit+0x1cc>)
 80156d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80156dc:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80156de:	4b21      	ldr	r3, [pc, #132]	; (8015764 <HAL_SD_MspInit+0x1cc>)
 80156e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80156e4:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80156e6:	4b1f      	ldr	r3, [pc, #124]	; (8015764 <HAL_SD_MspInit+0x1cc>)
 80156e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80156ec:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80156ee:	4b1d      	ldr	r3, [pc, #116]	; (8015764 <HAL_SD_MspInit+0x1cc>)
 80156f0:	2220      	movs	r2, #32
 80156f2:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80156f4:	4b1b      	ldr	r3, [pc, #108]	; (8015764 <HAL_SD_MspInit+0x1cc>)
 80156f6:	2200      	movs	r2, #0
 80156f8:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80156fa:	4b1a      	ldr	r3, [pc, #104]	; (8015764 <HAL_SD_MspInit+0x1cc>)
 80156fc:	2204      	movs	r2, #4
 80156fe:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8015700:	4b18      	ldr	r3, [pc, #96]	; (8015764 <HAL_SD_MspInit+0x1cc>)
 8015702:	2203      	movs	r2, #3
 8015704:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8015706:	4b17      	ldr	r3, [pc, #92]	; (8015764 <HAL_SD_MspInit+0x1cc>)
 8015708:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801570c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 801570e:	4b15      	ldr	r3, [pc, #84]	; (8015764 <HAL_SD_MspInit+0x1cc>)
 8015710:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8015714:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8015716:	4813      	ldr	r0, [pc, #76]	; (8015764 <HAL_SD_MspInit+0x1cc>)
 8015718:	f7eb fbf8 	bl	8000f0c <HAL_DMA_Init>
 801571c:	4603      	mov	r3, r0
 801571e:	2b00      	cmp	r3, #0
 8015720:	d001      	beq.n	8015726 <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 8015722:	f7ff f9a1 	bl	8014a68 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	4a0e      	ldr	r2, [pc, #56]	; (8015764 <HAL_SD_MspInit+0x1cc>)
 801572a:	63da      	str	r2, [r3, #60]	; 0x3c
 801572c:	4a0d      	ldr	r2, [pc, #52]	; (8015764 <HAL_SD_MspInit+0x1cc>)
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8015732:	2200      	movs	r2, #0
 8015734:	2105      	movs	r1, #5
 8015736:	2031      	movs	r0, #49	; 0x31
 8015738:	f7eb fa62 	bl	8000c00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 801573c:	2031      	movs	r0, #49	; 0x31
 801573e:	f7eb fa7b 	bl	8000c38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8015742:	bf00      	nop
 8015744:	3728      	adds	r7, #40	; 0x28
 8015746:	46bd      	mov	sp, r7
 8015748:	bd80      	pop	{r7, pc}
 801574a:	bf00      	nop
 801574c:	40012c00 	.word	0x40012c00
 8015750:	40023800 	.word	0x40023800
 8015754:	40020800 	.word	0x40020800
 8015758:	40020c00 	.word	0x40020c00
 801575c:	20011904 	.word	0x20011904
 8015760:	40026458 	.word	0x40026458
 8015764:	200116fc 	.word	0x200116fc
 8015768:	400264a0 	.word	0x400264a0

0801576c <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 801576c:	b580      	push	{r7, lr}
 801576e:	b08a      	sub	sp, #40	; 0x28
 8015770:	af00      	add	r7, sp, #0
 8015772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015774:	f107 0314 	add.w	r3, r7, #20
 8015778:	2200      	movs	r2, #0
 801577a:	601a      	str	r2, [r3, #0]
 801577c:	605a      	str	r2, [r3, #4]
 801577e:	609a      	str	r2, [r3, #8]
 8015780:	60da      	str	r2, [r3, #12]
 8015782:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	681b      	ldr	r3, [r3, #0]
 8015788:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 801578c:	d127      	bne.n	80157de <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 801578e:	4b16      	ldr	r3, [pc, #88]	; (80157e8 <HAL_SPDIFRX_MspInit+0x7c>)
 8015790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015792:	4a15      	ldr	r2, [pc, #84]	; (80157e8 <HAL_SPDIFRX_MspInit+0x7c>)
 8015794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015798:	6413      	str	r3, [r2, #64]	; 0x40
 801579a:	4b13      	ldr	r3, [pc, #76]	; (80157e8 <HAL_SPDIFRX_MspInit+0x7c>)
 801579c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801579e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80157a2:	613b      	str	r3, [r7, #16]
 80157a4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80157a6:	4b10      	ldr	r3, [pc, #64]	; (80157e8 <HAL_SPDIFRX_MspInit+0x7c>)
 80157a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157aa:	4a0f      	ldr	r2, [pc, #60]	; (80157e8 <HAL_SPDIFRX_MspInit+0x7c>)
 80157ac:	f043 0308 	orr.w	r3, r3, #8
 80157b0:	6313      	str	r3, [r2, #48]	; 0x30
 80157b2:	4b0d      	ldr	r3, [pc, #52]	; (80157e8 <HAL_SPDIFRX_MspInit+0x7c>)
 80157b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157b6:	f003 0308 	and.w	r3, r3, #8
 80157ba:	60fb      	str	r3, [r7, #12]
 80157bc:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80157be:	2380      	movs	r3, #128	; 0x80
 80157c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80157c2:	2302      	movs	r3, #2
 80157c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80157c6:	2300      	movs	r3, #0
 80157c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80157ca:	2300      	movs	r3, #0
 80157cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80157ce:	2308      	movs	r3, #8
 80157d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80157d2:	f107 0314 	add.w	r3, r7, #20
 80157d6:	4619      	mov	r1, r3
 80157d8:	4804      	ldr	r0, [pc, #16]	; (80157ec <HAL_SPDIFRX_MspInit+0x80>)
 80157da:	f7ec f929 	bl	8001a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 80157de:	bf00      	nop
 80157e0:	3728      	adds	r7, #40	; 0x28
 80157e2:	46bd      	mov	sp, r7
 80157e4:	bd80      	pop	{r7, pc}
 80157e6:	bf00      	nop
 80157e8:	40023800 	.word	0x40023800
 80157ec:	40020c00 	.word	0x40020c00

080157f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80157f0:	b480      	push	{r7}
 80157f2:	b089      	sub	sp, #36	; 0x24
 80157f4:	af00      	add	r7, sp, #0
 80157f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	4a2e      	ldr	r2, [pc, #184]	; (80158b8 <HAL_TIM_Base_MspInit+0xc8>)
 80157fe:	4293      	cmp	r3, r2
 8015800:	d10c      	bne.n	801581c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8015802:	4b2e      	ldr	r3, [pc, #184]	; (80158bc <HAL_TIM_Base_MspInit+0xcc>)
 8015804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015806:	4a2d      	ldr	r2, [pc, #180]	; (80158bc <HAL_TIM_Base_MspInit+0xcc>)
 8015808:	f043 0301 	orr.w	r3, r3, #1
 801580c:	6453      	str	r3, [r2, #68]	; 0x44
 801580e:	4b2b      	ldr	r3, [pc, #172]	; (80158bc <HAL_TIM_Base_MspInit+0xcc>)
 8015810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015812:	f003 0301 	and.w	r3, r3, #1
 8015816:	61fb      	str	r3, [r7, #28]
 8015818:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 801581a:	e046      	b.n	80158aa <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	681b      	ldr	r3, [r3, #0]
 8015820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015824:	d10c      	bne.n	8015840 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8015826:	4b25      	ldr	r3, [pc, #148]	; (80158bc <HAL_TIM_Base_MspInit+0xcc>)
 8015828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801582a:	4a24      	ldr	r2, [pc, #144]	; (80158bc <HAL_TIM_Base_MspInit+0xcc>)
 801582c:	f043 0301 	orr.w	r3, r3, #1
 8015830:	6413      	str	r3, [r2, #64]	; 0x40
 8015832:	4b22      	ldr	r3, [pc, #136]	; (80158bc <HAL_TIM_Base_MspInit+0xcc>)
 8015834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015836:	f003 0301 	and.w	r3, r3, #1
 801583a:	61bb      	str	r3, [r7, #24]
 801583c:	69bb      	ldr	r3, [r7, #24]
}
 801583e:	e034      	b.n	80158aa <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	4a1e      	ldr	r2, [pc, #120]	; (80158c0 <HAL_TIM_Base_MspInit+0xd0>)
 8015846:	4293      	cmp	r3, r2
 8015848:	d10c      	bne.n	8015864 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 801584a:	4b1c      	ldr	r3, [pc, #112]	; (80158bc <HAL_TIM_Base_MspInit+0xcc>)
 801584c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801584e:	4a1b      	ldr	r2, [pc, #108]	; (80158bc <HAL_TIM_Base_MspInit+0xcc>)
 8015850:	f043 0302 	orr.w	r3, r3, #2
 8015854:	6413      	str	r3, [r2, #64]	; 0x40
 8015856:	4b19      	ldr	r3, [pc, #100]	; (80158bc <HAL_TIM_Base_MspInit+0xcc>)
 8015858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801585a:	f003 0302 	and.w	r3, r3, #2
 801585e:	617b      	str	r3, [r7, #20]
 8015860:	697b      	ldr	r3, [r7, #20]
}
 8015862:	e022      	b.n	80158aa <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	681b      	ldr	r3, [r3, #0]
 8015868:	4a16      	ldr	r2, [pc, #88]	; (80158c4 <HAL_TIM_Base_MspInit+0xd4>)
 801586a:	4293      	cmp	r3, r2
 801586c:	d10c      	bne.n	8015888 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 801586e:	4b13      	ldr	r3, [pc, #76]	; (80158bc <HAL_TIM_Base_MspInit+0xcc>)
 8015870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015872:	4a12      	ldr	r2, [pc, #72]	; (80158bc <HAL_TIM_Base_MspInit+0xcc>)
 8015874:	f043 0308 	orr.w	r3, r3, #8
 8015878:	6413      	str	r3, [r2, #64]	; 0x40
 801587a:	4b10      	ldr	r3, [pc, #64]	; (80158bc <HAL_TIM_Base_MspInit+0xcc>)
 801587c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801587e:	f003 0308 	and.w	r3, r3, #8
 8015882:	613b      	str	r3, [r7, #16]
 8015884:	693b      	ldr	r3, [r7, #16]
}
 8015886:	e010      	b.n	80158aa <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	4a0e      	ldr	r2, [pc, #56]	; (80158c8 <HAL_TIM_Base_MspInit+0xd8>)
 801588e:	4293      	cmp	r3, r2
 8015890:	d10b      	bne.n	80158aa <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8015892:	4b0a      	ldr	r3, [pc, #40]	; (80158bc <HAL_TIM_Base_MspInit+0xcc>)
 8015894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015896:	4a09      	ldr	r2, [pc, #36]	; (80158bc <HAL_TIM_Base_MspInit+0xcc>)
 8015898:	f043 0302 	orr.w	r3, r3, #2
 801589c:	6453      	str	r3, [r2, #68]	; 0x44
 801589e:	4b07      	ldr	r3, [pc, #28]	; (80158bc <HAL_TIM_Base_MspInit+0xcc>)
 80158a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80158a2:	f003 0302 	and.w	r3, r3, #2
 80158a6:	60fb      	str	r3, [r7, #12]
 80158a8:	68fb      	ldr	r3, [r7, #12]
}
 80158aa:	bf00      	nop
 80158ac:	3724      	adds	r7, #36	; 0x24
 80158ae:	46bd      	mov	sp, r7
 80158b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158b4:	4770      	bx	lr
 80158b6:	bf00      	nop
 80158b8:	40010000 	.word	0x40010000
 80158bc:	40023800 	.word	0x40023800
 80158c0:	40000400 	.word	0x40000400
 80158c4:	40000c00 	.word	0x40000c00
 80158c8:	40010400 	.word	0x40010400

080158cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80158cc:	b480      	push	{r7}
 80158ce:	b085      	sub	sp, #20
 80158d0:	af00      	add	r7, sp, #0
 80158d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	4a0a      	ldr	r2, [pc, #40]	; (8015904 <HAL_TIM_PWM_MspInit+0x38>)
 80158da:	4293      	cmp	r3, r2
 80158dc:	d10b      	bne.n	80158f6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80158de:	4b0a      	ldr	r3, [pc, #40]	; (8015908 <HAL_TIM_PWM_MspInit+0x3c>)
 80158e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80158e2:	4a09      	ldr	r2, [pc, #36]	; (8015908 <HAL_TIM_PWM_MspInit+0x3c>)
 80158e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80158e8:	6413      	str	r3, [r2, #64]	; 0x40
 80158ea:	4b07      	ldr	r3, [pc, #28]	; (8015908 <HAL_TIM_PWM_MspInit+0x3c>)
 80158ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80158ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80158f2:	60fb      	str	r3, [r7, #12]
 80158f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80158f6:	bf00      	nop
 80158f8:	3714      	adds	r7, #20
 80158fa:	46bd      	mov	sp, r7
 80158fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015900:	4770      	bx	lr
 8015902:	bf00      	nop
 8015904:	40001800 	.word	0x40001800
 8015908:	40023800 	.word	0x40023800

0801590c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 801590c:	b580      	push	{r7, lr}
 801590e:	b08c      	sub	sp, #48	; 0x30
 8015910:	af00      	add	r7, sp, #0
 8015912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015914:	f107 031c 	add.w	r3, r7, #28
 8015918:	2200      	movs	r2, #0
 801591a:	601a      	str	r2, [r3, #0]
 801591c:	605a      	str	r2, [r3, #4]
 801591e:	609a      	str	r2, [r3, #8]
 8015920:	60da      	str	r2, [r3, #12]
 8015922:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	4a56      	ldr	r2, [pc, #344]	; (8015a84 <HAL_TIM_MspPostInit+0x178>)
 801592a:	4293      	cmp	r3, r2
 801592c:	d11d      	bne.n	801596a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801592e:	4b56      	ldr	r3, [pc, #344]	; (8015a88 <HAL_TIM_MspPostInit+0x17c>)
 8015930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015932:	4a55      	ldr	r2, [pc, #340]	; (8015a88 <HAL_TIM_MspPostInit+0x17c>)
 8015934:	f043 0301 	orr.w	r3, r3, #1
 8015938:	6313      	str	r3, [r2, #48]	; 0x30
 801593a:	4b53      	ldr	r3, [pc, #332]	; (8015a88 <HAL_TIM_MspPostInit+0x17c>)
 801593c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801593e:	f003 0301 	and.w	r3, r3, #1
 8015942:	61bb      	str	r3, [r7, #24]
 8015944:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8015946:	f44f 7380 	mov.w	r3, #256	; 0x100
 801594a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801594c:	2302      	movs	r3, #2
 801594e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015950:	2300      	movs	r3, #0
 8015952:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015954:	2300      	movs	r3, #0
 8015956:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8015958:	2301      	movs	r3, #1
 801595a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 801595c:	f107 031c 	add.w	r3, r7, #28
 8015960:	4619      	mov	r1, r3
 8015962:	484a      	ldr	r0, [pc, #296]	; (8015a8c <HAL_TIM_MspPostInit+0x180>)
 8015964:	f7ec f864 	bl	8001a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8015968:	e087      	b.n	8015a7a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015972:	d11d      	bne.n	80159b0 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015974:	4b44      	ldr	r3, [pc, #272]	; (8015a88 <HAL_TIM_MspPostInit+0x17c>)
 8015976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015978:	4a43      	ldr	r2, [pc, #268]	; (8015a88 <HAL_TIM_MspPostInit+0x17c>)
 801597a:	f043 0301 	orr.w	r3, r3, #1
 801597e:	6313      	str	r3, [r2, #48]	; 0x30
 8015980:	4b41      	ldr	r3, [pc, #260]	; (8015a88 <HAL_TIM_MspPostInit+0x17c>)
 8015982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015984:	f003 0301 	and.w	r3, r3, #1
 8015988:	617b      	str	r3, [r7, #20]
 801598a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 801598c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015992:	2302      	movs	r3, #2
 8015994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015996:	2300      	movs	r3, #0
 8015998:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801599a:	2300      	movs	r3, #0
 801599c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 801599e:	2301      	movs	r3, #1
 80159a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80159a2:	f107 031c 	add.w	r3, r7, #28
 80159a6:	4619      	mov	r1, r3
 80159a8:	4838      	ldr	r0, [pc, #224]	; (8015a8c <HAL_TIM_MspPostInit+0x180>)
 80159aa:	f7ec f841 	bl	8001a30 <HAL_GPIO_Init>
}
 80159ae:	e064      	b.n	8015a7a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	681b      	ldr	r3, [r3, #0]
 80159b4:	4a36      	ldr	r2, [pc, #216]	; (8015a90 <HAL_TIM_MspPostInit+0x184>)
 80159b6:	4293      	cmp	r3, r2
 80159b8:	d11c      	bne.n	80159f4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80159ba:	4b33      	ldr	r3, [pc, #204]	; (8015a88 <HAL_TIM_MspPostInit+0x17c>)
 80159bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80159be:	4a32      	ldr	r2, [pc, #200]	; (8015a88 <HAL_TIM_MspPostInit+0x17c>)
 80159c0:	f043 0302 	orr.w	r3, r3, #2
 80159c4:	6313      	str	r3, [r2, #48]	; 0x30
 80159c6:	4b30      	ldr	r3, [pc, #192]	; (8015a88 <HAL_TIM_MspPostInit+0x17c>)
 80159c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80159ca:	f003 0302 	and.w	r3, r3, #2
 80159ce:	613b      	str	r3, [r7, #16]
 80159d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80159d2:	2310      	movs	r3, #16
 80159d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80159d6:	2302      	movs	r3, #2
 80159d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80159da:	2300      	movs	r3, #0
 80159dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80159de:	2300      	movs	r3, #0
 80159e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80159e2:	2302      	movs	r3, #2
 80159e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80159e6:	f107 031c 	add.w	r3, r7, #28
 80159ea:	4619      	mov	r1, r3
 80159ec:	4829      	ldr	r0, [pc, #164]	; (8015a94 <HAL_TIM_MspPostInit+0x188>)
 80159ee:	f7ec f81f 	bl	8001a30 <HAL_GPIO_Init>
}
 80159f2:	e042      	b.n	8015a7a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	681b      	ldr	r3, [r3, #0]
 80159f8:	4a27      	ldr	r2, [pc, #156]	; (8015a98 <HAL_TIM_MspPostInit+0x18c>)
 80159fa:	4293      	cmp	r3, r2
 80159fc:	d11c      	bne.n	8015a38 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80159fe:	4b22      	ldr	r3, [pc, #136]	; (8015a88 <HAL_TIM_MspPostInit+0x17c>)
 8015a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a02:	4a21      	ldr	r2, [pc, #132]	; (8015a88 <HAL_TIM_MspPostInit+0x17c>)
 8015a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015a08:	6313      	str	r3, [r2, #48]	; 0x30
 8015a0a:	4b1f      	ldr	r3, [pc, #124]	; (8015a88 <HAL_TIM_MspPostInit+0x17c>)
 8015a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015a12:	60fb      	str	r3, [r7, #12]
 8015a14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8015a16:	2301      	movs	r3, #1
 8015a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015a1a:	2302      	movs	r3, #2
 8015a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015a1e:	2300      	movs	r3, #0
 8015a20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015a22:	2300      	movs	r3, #0
 8015a24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8015a26:	2302      	movs	r3, #2
 8015a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8015a2a:	f107 031c 	add.w	r3, r7, #28
 8015a2e:	4619      	mov	r1, r3
 8015a30:	481a      	ldr	r0, [pc, #104]	; (8015a9c <HAL_TIM_MspPostInit+0x190>)
 8015a32:	f7eb fffd 	bl	8001a30 <HAL_GPIO_Init>
}
 8015a36:	e020      	b.n	8015a7a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	4a18      	ldr	r2, [pc, #96]	; (8015aa0 <HAL_TIM_MspPostInit+0x194>)
 8015a3e:	4293      	cmp	r3, r2
 8015a40:	d11b      	bne.n	8015a7a <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8015a42:	4b11      	ldr	r3, [pc, #68]	; (8015a88 <HAL_TIM_MspPostInit+0x17c>)
 8015a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a46:	4a10      	ldr	r2, [pc, #64]	; (8015a88 <HAL_TIM_MspPostInit+0x17c>)
 8015a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8015a4e:	4b0e      	ldr	r3, [pc, #56]	; (8015a88 <HAL_TIM_MspPostInit+0x17c>)
 8015a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015a56:	60bb      	str	r3, [r7, #8]
 8015a58:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8015a5a:	2340      	movs	r3, #64	; 0x40
 8015a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015a5e:	2302      	movs	r3, #2
 8015a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015a62:	2300      	movs	r3, #0
 8015a64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015a66:	2300      	movs	r3, #0
 8015a68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8015a6a:	2309      	movs	r3, #9
 8015a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8015a6e:	f107 031c 	add.w	r3, r7, #28
 8015a72:	4619      	mov	r1, r3
 8015a74:	480b      	ldr	r0, [pc, #44]	; (8015aa4 <HAL_TIM_MspPostInit+0x198>)
 8015a76:	f7eb ffdb 	bl	8001a30 <HAL_GPIO_Init>
}
 8015a7a:	bf00      	nop
 8015a7c:	3730      	adds	r7, #48	; 0x30
 8015a7e:	46bd      	mov	sp, r7
 8015a80:	bd80      	pop	{r7, pc}
 8015a82:	bf00      	nop
 8015a84:	40010000 	.word	0x40010000
 8015a88:	40023800 	.word	0x40023800
 8015a8c:	40020000 	.word	0x40020000
 8015a90:	40000400 	.word	0x40000400
 8015a94:	40020400 	.word	0x40020400
 8015a98:	40000c00 	.word	0x40000c00
 8015a9c:	40022000 	.word	0x40022000
 8015aa0:	40001800 	.word	0x40001800
 8015aa4:	40021c00 	.word	0x40021c00

08015aa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8015aa8:	b580      	push	{r7, lr}
 8015aaa:	b08c      	sub	sp, #48	; 0x30
 8015aac:	af00      	add	r7, sp, #0
 8015aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015ab0:	f107 031c 	add.w	r3, r7, #28
 8015ab4:	2200      	movs	r2, #0
 8015ab6:	601a      	str	r2, [r3, #0]
 8015ab8:	605a      	str	r2, [r3, #4]
 8015aba:	609a      	str	r2, [r3, #8]
 8015abc:	60da      	str	r2, [r3, #12]
 8015abe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	681b      	ldr	r3, [r3, #0]
 8015ac4:	4a40      	ldr	r2, [pc, #256]	; (8015bc8 <HAL_UART_MspInit+0x120>)
 8015ac6:	4293      	cmp	r3, r2
 8015ac8:	d145      	bne.n	8015b56 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8015aca:	4b40      	ldr	r3, [pc, #256]	; (8015bcc <HAL_UART_MspInit+0x124>)
 8015acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015ace:	4a3f      	ldr	r2, [pc, #252]	; (8015bcc <HAL_UART_MspInit+0x124>)
 8015ad0:	f043 0310 	orr.w	r3, r3, #16
 8015ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8015ad6:	4b3d      	ldr	r3, [pc, #244]	; (8015bcc <HAL_UART_MspInit+0x124>)
 8015ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015ada:	f003 0310 	and.w	r3, r3, #16
 8015ade:	61bb      	str	r3, [r7, #24]
 8015ae0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015ae2:	4b3a      	ldr	r3, [pc, #232]	; (8015bcc <HAL_UART_MspInit+0x124>)
 8015ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ae6:	4a39      	ldr	r2, [pc, #228]	; (8015bcc <HAL_UART_MspInit+0x124>)
 8015ae8:	f043 0302 	orr.w	r3, r3, #2
 8015aec:	6313      	str	r3, [r2, #48]	; 0x30
 8015aee:	4b37      	ldr	r3, [pc, #220]	; (8015bcc <HAL_UART_MspInit+0x124>)
 8015af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015af2:	f003 0302 	and.w	r3, r3, #2
 8015af6:	617b      	str	r3, [r7, #20]
 8015af8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015afa:	4b34      	ldr	r3, [pc, #208]	; (8015bcc <HAL_UART_MspInit+0x124>)
 8015afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015afe:	4a33      	ldr	r2, [pc, #204]	; (8015bcc <HAL_UART_MspInit+0x124>)
 8015b00:	f043 0301 	orr.w	r3, r3, #1
 8015b04:	6313      	str	r3, [r2, #48]	; 0x30
 8015b06:	4b31      	ldr	r3, [pc, #196]	; (8015bcc <HAL_UART_MspInit+0x124>)
 8015b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b0a:	f003 0301 	and.w	r3, r3, #1
 8015b0e:	613b      	str	r3, [r7, #16]
 8015b10:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8015b12:	2380      	movs	r3, #128	; 0x80
 8015b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015b16:	2302      	movs	r3, #2
 8015b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015b1a:	2300      	movs	r3, #0
 8015b1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015b1e:	2300      	movs	r3, #0
 8015b20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8015b22:	2307      	movs	r3, #7
 8015b24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8015b26:	f107 031c 	add.w	r3, r7, #28
 8015b2a:	4619      	mov	r1, r3
 8015b2c:	4828      	ldr	r0, [pc, #160]	; (8015bd0 <HAL_UART_MspInit+0x128>)
 8015b2e:	f7eb ff7f 	bl	8001a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8015b32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015b38:	2302      	movs	r3, #2
 8015b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015b3c:	2300      	movs	r3, #0
 8015b3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015b40:	2300      	movs	r3, #0
 8015b42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8015b44:	2307      	movs	r3, #7
 8015b46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8015b48:	f107 031c 	add.w	r3, r7, #28
 8015b4c:	4619      	mov	r1, r3
 8015b4e:	4821      	ldr	r0, [pc, #132]	; (8015bd4 <HAL_UART_MspInit+0x12c>)
 8015b50:	f7eb ff6e 	bl	8001a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8015b54:	e034      	b.n	8015bc0 <HAL_UART_MspInit+0x118>
  else if(huart->Instance==USART6)
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	4a1f      	ldr	r2, [pc, #124]	; (8015bd8 <HAL_UART_MspInit+0x130>)
 8015b5c:	4293      	cmp	r3, r2
 8015b5e:	d12f      	bne.n	8015bc0 <HAL_UART_MspInit+0x118>
    __HAL_RCC_USART6_CLK_ENABLE();
 8015b60:	4b1a      	ldr	r3, [pc, #104]	; (8015bcc <HAL_UART_MspInit+0x124>)
 8015b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015b64:	4a19      	ldr	r2, [pc, #100]	; (8015bcc <HAL_UART_MspInit+0x124>)
 8015b66:	f043 0320 	orr.w	r3, r3, #32
 8015b6a:	6453      	str	r3, [r2, #68]	; 0x44
 8015b6c:	4b17      	ldr	r3, [pc, #92]	; (8015bcc <HAL_UART_MspInit+0x124>)
 8015b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015b70:	f003 0320 	and.w	r3, r3, #32
 8015b74:	60fb      	str	r3, [r7, #12]
 8015b76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8015b78:	4b14      	ldr	r3, [pc, #80]	; (8015bcc <HAL_UART_MspInit+0x124>)
 8015b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b7c:	4a13      	ldr	r2, [pc, #76]	; (8015bcc <HAL_UART_MspInit+0x124>)
 8015b7e:	f043 0304 	orr.w	r3, r3, #4
 8015b82:	6313      	str	r3, [r2, #48]	; 0x30
 8015b84:	4b11      	ldr	r3, [pc, #68]	; (8015bcc <HAL_UART_MspInit+0x124>)
 8015b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b88:	f003 0304 	and.w	r3, r3, #4
 8015b8c:	60bb      	str	r3, [r7, #8]
 8015b8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8015b90:	23c0      	movs	r3, #192	; 0xc0
 8015b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015b94:	2302      	movs	r3, #2
 8015b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015b98:	2300      	movs	r3, #0
 8015b9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015b9c:	2303      	movs	r3, #3
 8015b9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8015ba0:	2308      	movs	r3, #8
 8015ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8015ba4:	f107 031c 	add.w	r3, r7, #28
 8015ba8:	4619      	mov	r1, r3
 8015baa:	480c      	ldr	r0, [pc, #48]	; (8015bdc <HAL_UART_MspInit+0x134>)
 8015bac:	f7eb ff40 	bl	8001a30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8015bb0:	2200      	movs	r2, #0
 8015bb2:	2105      	movs	r1, #5
 8015bb4:	2047      	movs	r0, #71	; 0x47
 8015bb6:	f7eb f823 	bl	8000c00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8015bba:	2047      	movs	r0, #71	; 0x47
 8015bbc:	f7eb f83c 	bl	8000c38 <HAL_NVIC_EnableIRQ>
}
 8015bc0:	bf00      	nop
 8015bc2:	3730      	adds	r7, #48	; 0x30
 8015bc4:	46bd      	mov	sp, r7
 8015bc6:	bd80      	pop	{r7, pc}
 8015bc8:	40011000 	.word	0x40011000
 8015bcc:	40023800 	.word	0x40023800
 8015bd0:	40020400 	.word	0x40020400
 8015bd4:	40020000 	.word	0x40020000
 8015bd8:	40011400 	.word	0x40011400
 8015bdc:	40020800 	.word	0x40020800

08015be0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8015be0:	b580      	push	{r7, lr}
 8015be2:	b086      	sub	sp, #24
 8015be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8015be6:	1d3b      	adds	r3, r7, #4
 8015be8:	2200      	movs	r2, #0
 8015bea:	601a      	str	r2, [r3, #0]
 8015bec:	605a      	str	r2, [r3, #4]
 8015bee:	609a      	str	r2, [r3, #8]
 8015bf0:	60da      	str	r2, [r3, #12]
 8015bf2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8015bf4:	4b3a      	ldr	r3, [pc, #232]	; (8015ce0 <HAL_FMC_MspInit+0x100>)
 8015bf6:	681b      	ldr	r3, [r3, #0]
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d16d      	bne.n	8015cd8 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8015bfc:	4b38      	ldr	r3, [pc, #224]	; (8015ce0 <HAL_FMC_MspInit+0x100>)
 8015bfe:	2201      	movs	r2, #1
 8015c00:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8015c02:	4b38      	ldr	r3, [pc, #224]	; (8015ce4 <HAL_FMC_MspInit+0x104>)
 8015c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015c06:	4a37      	ldr	r2, [pc, #220]	; (8015ce4 <HAL_FMC_MspInit+0x104>)
 8015c08:	f043 0301 	orr.w	r3, r3, #1
 8015c0c:	6393      	str	r3, [r2, #56]	; 0x38
 8015c0e:	4b35      	ldr	r3, [pc, #212]	; (8015ce4 <HAL_FMC_MspInit+0x104>)
 8015c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015c12:	f003 0301 	and.w	r3, r3, #1
 8015c16:	603b      	str	r3, [r7, #0]
 8015c18:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8015c1a:	f64f 7383 	movw	r3, #65411	; 0xff83
 8015c1e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015c20:	2302      	movs	r3, #2
 8015c22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015c24:	2300      	movs	r3, #0
 8015c26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015c28:	2303      	movs	r3, #3
 8015c2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8015c2c:	230c      	movs	r3, #12
 8015c2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8015c30:	1d3b      	adds	r3, r7, #4
 8015c32:	4619      	mov	r1, r3
 8015c34:	482c      	ldr	r0, [pc, #176]	; (8015ce8 <HAL_FMC_MspInit+0x108>)
 8015c36:	f7eb fefb 	bl	8001a30 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8015c3a:	f248 1333 	movw	r3, #33075	; 0x8133
 8015c3e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015c40:	2302      	movs	r3, #2
 8015c42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015c44:	2300      	movs	r3, #0
 8015c46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015c48:	2303      	movs	r3, #3
 8015c4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8015c4c:	230c      	movs	r3, #12
 8015c4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8015c50:	1d3b      	adds	r3, r7, #4
 8015c52:	4619      	mov	r1, r3
 8015c54:	4825      	ldr	r0, [pc, #148]	; (8015cec <HAL_FMC_MspInit+0x10c>)
 8015c56:	f7eb feeb 	bl	8001a30 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8015c5a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8015c5e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015c60:	2302      	movs	r3, #2
 8015c62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015c64:	2300      	movs	r3, #0
 8015c66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015c68:	2303      	movs	r3, #3
 8015c6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8015c6c:	230c      	movs	r3, #12
 8015c6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8015c70:	1d3b      	adds	r3, r7, #4
 8015c72:	4619      	mov	r1, r3
 8015c74:	481e      	ldr	r0, [pc, #120]	; (8015cf0 <HAL_FMC_MspInit+0x110>)
 8015c76:	f7eb fedb 	bl	8001a30 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8015c7a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8015c7e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015c80:	2302      	movs	r3, #2
 8015c82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015c84:	2300      	movs	r3, #0
 8015c86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015c88:	2303      	movs	r3, #3
 8015c8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8015c8c:	230c      	movs	r3, #12
 8015c8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8015c90:	1d3b      	adds	r3, r7, #4
 8015c92:	4619      	mov	r1, r3
 8015c94:	4817      	ldr	r0, [pc, #92]	; (8015cf4 <HAL_FMC_MspInit+0x114>)
 8015c96:	f7eb fecb 	bl	8001a30 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8015c9a:	2328      	movs	r3, #40	; 0x28
 8015c9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015c9e:	2302      	movs	r3, #2
 8015ca0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015ca2:	2300      	movs	r3, #0
 8015ca4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015ca6:	2303      	movs	r3, #3
 8015ca8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8015caa:	230c      	movs	r3, #12
 8015cac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8015cae:	1d3b      	adds	r3, r7, #4
 8015cb0:	4619      	mov	r1, r3
 8015cb2:	4811      	ldr	r0, [pc, #68]	; (8015cf8 <HAL_FMC_MspInit+0x118>)
 8015cb4:	f7eb febc 	bl	8001a30 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8015cb8:	2308      	movs	r3, #8
 8015cba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015cbc:	2302      	movs	r3, #2
 8015cbe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015cc0:	2300      	movs	r3, #0
 8015cc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015cc4:	2303      	movs	r3, #3
 8015cc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8015cc8:	230c      	movs	r3, #12
 8015cca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8015ccc:	1d3b      	adds	r3, r7, #4
 8015cce:	4619      	mov	r1, r3
 8015cd0:	480a      	ldr	r0, [pc, #40]	; (8015cfc <HAL_FMC_MspInit+0x11c>)
 8015cd2:	f7eb fead 	bl	8001a30 <HAL_GPIO_Init>
 8015cd6:	e000      	b.n	8015cda <HAL_FMC_MspInit+0xfa>
    return;
 8015cd8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8015cda:	3718      	adds	r7, #24
 8015cdc:	46bd      	mov	sp, r7
 8015cde:	bd80      	pop	{r7, pc}
 8015ce0:	20010438 	.word	0x20010438
 8015ce4:	40023800 	.word	0x40023800
 8015ce8:	40021000 	.word	0x40021000
 8015cec:	40021800 	.word	0x40021800
 8015cf0:	40020c00 	.word	0x40020c00
 8015cf4:	40021400 	.word	0x40021400
 8015cf8:	40021c00 	.word	0x40021c00
 8015cfc:	40020800 	.word	0x40020800

08015d00 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8015d00:	b580      	push	{r7, lr}
 8015d02:	b082      	sub	sp, #8
 8015d04:	af00      	add	r7, sp, #0
 8015d06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8015d08:	f7ff ff6a 	bl	8015be0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8015d0c:	bf00      	nop
 8015d0e:	3708      	adds	r7, #8
 8015d10:	46bd      	mov	sp, r7
 8015d12:	bd80      	pop	{r7, pc}

08015d14 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8015d14:	b580      	push	{r7, lr}
 8015d16:	b08a      	sub	sp, #40	; 0x28
 8015d18:	af00      	add	r7, sp, #0
 8015d1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	681b      	ldr	r3, [r3, #0]
 8015d20:	4a2b      	ldr	r2, [pc, #172]	; (8015dd0 <HAL_SAI_MspInit+0xbc>)
 8015d22:	4293      	cmp	r3, r2
 8015d24:	d124      	bne.n	8015d70 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8015d26:	4b2b      	ldr	r3, [pc, #172]	; (8015dd4 <HAL_SAI_MspInit+0xc0>)
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d10b      	bne.n	8015d46 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8015d2e:	4b2a      	ldr	r3, [pc, #168]	; (8015dd8 <HAL_SAI_MspInit+0xc4>)
 8015d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015d32:	4a29      	ldr	r2, [pc, #164]	; (8015dd8 <HAL_SAI_MspInit+0xc4>)
 8015d34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015d38:	6453      	str	r3, [r2, #68]	; 0x44
 8015d3a:	4b27      	ldr	r3, [pc, #156]	; (8015dd8 <HAL_SAI_MspInit+0xc4>)
 8015d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015d3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015d42:	613b      	str	r3, [r7, #16]
 8015d44:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8015d46:	4b23      	ldr	r3, [pc, #140]	; (8015dd4 <HAL_SAI_MspInit+0xc0>)
 8015d48:	681b      	ldr	r3, [r3, #0]
 8015d4a:	3301      	adds	r3, #1
 8015d4c:	4a21      	ldr	r2, [pc, #132]	; (8015dd4 <HAL_SAI_MspInit+0xc0>)
 8015d4e:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8015d50:	23f0      	movs	r3, #240	; 0xf0
 8015d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015d54:	2302      	movs	r3, #2
 8015d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015d58:	2300      	movs	r3, #0
 8015d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015d5c:	2300      	movs	r3, #0
 8015d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8015d60:	230a      	movs	r3, #10
 8015d62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8015d64:	f107 0314 	add.w	r3, r7, #20
 8015d68:	4619      	mov	r1, r3
 8015d6a:	481c      	ldr	r0, [pc, #112]	; (8015ddc <HAL_SAI_MspInit+0xc8>)
 8015d6c:	f7eb fe60 	bl	8001a30 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	681b      	ldr	r3, [r3, #0]
 8015d74:	4a1a      	ldr	r2, [pc, #104]	; (8015de0 <HAL_SAI_MspInit+0xcc>)
 8015d76:	4293      	cmp	r3, r2
 8015d78:	d125      	bne.n	8015dc6 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8015d7a:	4b16      	ldr	r3, [pc, #88]	; (8015dd4 <HAL_SAI_MspInit+0xc0>)
 8015d7c:	681b      	ldr	r3, [r3, #0]
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d10b      	bne.n	8015d9a <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8015d82:	4b15      	ldr	r3, [pc, #84]	; (8015dd8 <HAL_SAI_MspInit+0xc4>)
 8015d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015d86:	4a14      	ldr	r2, [pc, #80]	; (8015dd8 <HAL_SAI_MspInit+0xc4>)
 8015d88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8015d8e:	4b12      	ldr	r3, [pc, #72]	; (8015dd8 <HAL_SAI_MspInit+0xc4>)
 8015d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015d92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015d96:	60fb      	str	r3, [r7, #12]
 8015d98:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8015d9a:	4b0e      	ldr	r3, [pc, #56]	; (8015dd4 <HAL_SAI_MspInit+0xc0>)
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	3301      	adds	r3, #1
 8015da0:	4a0c      	ldr	r2, [pc, #48]	; (8015dd4 <HAL_SAI_MspInit+0xc0>)
 8015da2:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8015da4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015daa:	2302      	movs	r3, #2
 8015dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015dae:	2300      	movs	r3, #0
 8015db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015db2:	2300      	movs	r3, #0
 8015db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8015db6:	230a      	movs	r3, #10
 8015db8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8015dba:	f107 0314 	add.w	r3, r7, #20
 8015dbe:	4619      	mov	r1, r3
 8015dc0:	4808      	ldr	r0, [pc, #32]	; (8015de4 <HAL_SAI_MspInit+0xd0>)
 8015dc2:	f7eb fe35 	bl	8001a30 <HAL_GPIO_Init>

    }
}
 8015dc6:	bf00      	nop
 8015dc8:	3728      	adds	r7, #40	; 0x28
 8015dca:	46bd      	mov	sp, r7
 8015dcc:	bd80      	pop	{r7, pc}
 8015dce:	bf00      	nop
 8015dd0:	40015c04 	.word	0x40015c04
 8015dd4:	2001043c 	.word	0x2001043c
 8015dd8:	40023800 	.word	0x40023800
 8015ddc:	40022000 	.word	0x40022000
 8015de0:	40015c24 	.word	0x40015c24
 8015de4:	40021800 	.word	0x40021800

08015de8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8015de8:	b580      	push	{r7, lr}
 8015dea:	b08c      	sub	sp, #48	; 0x30
 8015dec:	af00      	add	r7, sp, #0
 8015dee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8015df0:	2300      	movs	r3, #0
 8015df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8015df4:	2300      	movs	r3, #0
 8015df6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8015df8:	2200      	movs	r2, #0
 8015dfa:	6879      	ldr	r1, [r7, #4]
 8015dfc:	2036      	movs	r0, #54	; 0x36
 8015dfe:	f7ea feff 	bl	8000c00 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8015e02:	2036      	movs	r0, #54	; 0x36
 8015e04:	f7ea ff18 	bl	8000c38 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8015e08:	4b1f      	ldr	r3, [pc, #124]	; (8015e88 <HAL_InitTick+0xa0>)
 8015e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e0c:	4a1e      	ldr	r2, [pc, #120]	; (8015e88 <HAL_InitTick+0xa0>)
 8015e0e:	f043 0310 	orr.w	r3, r3, #16
 8015e12:	6413      	str	r3, [r2, #64]	; 0x40
 8015e14:	4b1c      	ldr	r3, [pc, #112]	; (8015e88 <HAL_InitTick+0xa0>)
 8015e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e18:	f003 0310 	and.w	r3, r3, #16
 8015e1c:	60fb      	str	r3, [r7, #12]
 8015e1e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8015e20:	f107 0210 	add.w	r2, r7, #16
 8015e24:	f107 0314 	add.w	r3, r7, #20
 8015e28:	4611      	mov	r1, r2
 8015e2a:	4618      	mov	r0, r3
 8015e2c:	f7ee fe58 	bl	8004ae0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8015e30:	f7ee fe2e 	bl	8004a90 <HAL_RCC_GetPCLK1Freq>
 8015e34:	4603      	mov	r3, r0
 8015e36:	005b      	lsls	r3, r3, #1
 8015e38:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8015e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e3c:	4a13      	ldr	r2, [pc, #76]	; (8015e8c <HAL_InitTick+0xa4>)
 8015e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8015e42:	0c9b      	lsrs	r3, r3, #18
 8015e44:	3b01      	subs	r3, #1
 8015e46:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8015e48:	4b11      	ldr	r3, [pc, #68]	; (8015e90 <HAL_InitTick+0xa8>)
 8015e4a:	4a12      	ldr	r2, [pc, #72]	; (8015e94 <HAL_InitTick+0xac>)
 8015e4c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8015e4e:	4b10      	ldr	r3, [pc, #64]	; (8015e90 <HAL_InitTick+0xa8>)
 8015e50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8015e54:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8015e56:	4a0e      	ldr	r2, [pc, #56]	; (8015e90 <HAL_InitTick+0xa8>)
 8015e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e5a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8015e5c:	4b0c      	ldr	r3, [pc, #48]	; (8015e90 <HAL_InitTick+0xa8>)
 8015e5e:	2200      	movs	r2, #0
 8015e60:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8015e62:	4b0b      	ldr	r3, [pc, #44]	; (8015e90 <HAL_InitTick+0xa8>)
 8015e64:	2200      	movs	r2, #0
 8015e66:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8015e68:	4809      	ldr	r0, [pc, #36]	; (8015e90 <HAL_InitTick+0xa8>)
 8015e6a:	f7f1 fc79 	bl	8007760 <HAL_TIM_Base_Init>
 8015e6e:	4603      	mov	r3, r0
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d104      	bne.n	8015e7e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8015e74:	4806      	ldr	r0, [pc, #24]	; (8015e90 <HAL_InitTick+0xa8>)
 8015e76:	f7f1 fc9f 	bl	80077b8 <HAL_TIM_Base_Start_IT>
 8015e7a:	4603      	mov	r3, r0
 8015e7c:	e000      	b.n	8015e80 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8015e7e:	2301      	movs	r3, #1
}
 8015e80:	4618      	mov	r0, r3
 8015e82:	3730      	adds	r7, #48	; 0x30
 8015e84:	46bd      	mov	sp, r7
 8015e86:	bd80      	pop	{r7, pc}
 8015e88:	40023800 	.word	0x40023800
 8015e8c:	431bde83 	.word	0x431bde83
 8015e90:	200119bc 	.word	0x200119bc
 8015e94:	40001000 	.word	0x40001000

08015e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8015e98:	b480      	push	{r7}
 8015e9a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8015e9c:	bf00      	nop
 8015e9e:	46bd      	mov	sp, r7
 8015ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ea4:	4770      	bx	lr

08015ea6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8015ea6:	b480      	push	{r7}
 8015ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8015eaa:	e7fe      	b.n	8015eaa <HardFault_Handler+0x4>

08015eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8015eac:	b480      	push	{r7}
 8015eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8015eb0:	e7fe      	b.n	8015eb0 <MemManage_Handler+0x4>

08015eb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8015eb2:	b480      	push	{r7}
 8015eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8015eb6:	e7fe      	b.n	8015eb6 <BusFault_Handler+0x4>

08015eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8015eb8:	b480      	push	{r7}
 8015eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8015ebc:	e7fe      	b.n	8015ebc <UsageFault_Handler+0x4>

08015ebe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8015ebe:	b480      	push	{r7}
 8015ec0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8015ec2:	bf00      	nop
 8015ec4:	46bd      	mov	sp, r7
 8015ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eca:	4770      	bx	lr

08015ecc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8015ecc:	b580      	push	{r7, lr}
 8015ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8015ed0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8015ed4:	f7eb ff8a 	bl	8001dec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8015ed8:	bf00      	nop
 8015eda:	bd80      	pop	{r7, pc}

08015edc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8015edc:	b580      	push	{r7, lr}
 8015ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8015ee0:	4802      	ldr	r0, [pc, #8]	; (8015eec <SDMMC1_IRQHandler+0x10>)
 8015ee2:	f7f0 fafb 	bl	80064dc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8015ee6:	bf00      	nop
 8015ee8:	bd80      	pop	{r7, pc}
 8015eea:	bf00      	nop
 8015eec:	20010b68 	.word	0x20010b68

08015ef0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8015ef0:	b580      	push	{r7, lr}
 8015ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8015ef4:	4802      	ldr	r0, [pc, #8]	; (8015f00 <TIM6_DAC_IRQHandler+0x10>)
 8015ef6:	f7f1 fcb4 	bl	8007862 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8015efa:	bf00      	nop
 8015efc:	bd80      	pop	{r7, pc}
 8015efe:	bf00      	nop
 8015f00:	200119bc 	.word	0x200119bc

08015f04 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8015f04:	b580      	push	{r7, lr}
 8015f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8015f08:	4802      	ldr	r0, [pc, #8]	; (8015f14 <DMA2_Stream3_IRQHandler+0x10>)
 8015f0a:	f7eb f92f 	bl	800116c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8015f0e:	bf00      	nop
 8015f10:	bd80      	pop	{r7, pc}
 8015f12:	bf00      	nop
 8015f14:	20011904 	.word	0x20011904

08015f18 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8015f18:	b580      	push	{r7, lr}
 8015f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8015f1c:	4802      	ldr	r0, [pc, #8]	; (8015f28 <OTG_FS_IRQHandler+0x10>)
 8015f1e:	f7ec f9f7 	bl	8002310 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8015f22:	bf00      	nop
 8015f24:	bd80      	pop	{r7, pc}
 8015f26:	bf00      	nop
 8015f28:	20011dd4 	.word	0x20011dd4

08015f2c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8015f2c:	b580      	push	{r7, lr}
 8015f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8015f30:	4802      	ldr	r0, [pc, #8]	; (8015f3c <DMA2_Stream6_IRQHandler+0x10>)
 8015f32:	f7eb f91b 	bl	800116c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8015f36:	bf00      	nop
 8015f38:	bd80      	pop	{r7, pc}
 8015f3a:	bf00      	nop
 8015f3c:	200116fc 	.word	0x200116fc

08015f40 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8015f40:	b580      	push	{r7, lr}
 8015f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8015f44:	4802      	ldr	r0, [pc, #8]	; (8015f50 <USART6_IRQHandler+0x10>)
 8015f46:	f7f2 fd8d 	bl	8008a64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8015f4a:	bf00      	nop
 8015f4c:	bd80      	pop	{r7, pc}
 8015f4e:	bf00      	nop
 8015f50:	20011784 	.word	0x20011784

08015f54 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8015f54:	b580      	push	{r7, lr}
 8015f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8015f58:	4802      	ldr	r0, [pc, #8]	; (8015f64 <LTDC_IRQHandler+0x10>)
 8015f5a:	f7ed fdb5 	bl	8003ac8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8015f5e:	bf00      	nop
 8015f60:	bd80      	pop	{r7, pc}
 8015f62:	bf00      	nop
 8015f64:	20010c6c 	.word	0x20010c6c

08015f68 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8015f68:	b580      	push	{r7, lr}
 8015f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8015f6c:	4802      	ldr	r0, [pc, #8]	; (8015f78 <DMA2D_IRQHandler+0x10>)
 8015f6e:	f7eb fbbd 	bl	80016ec <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8015f72:	bf00      	nop
 8015f74:	bd80      	pop	{r7, pc}
 8015f76:	bf00      	nop
 8015f78:	2001180c 	.word	0x2001180c

08015f7c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8015f7c:	b580      	push	{r7, lr}
 8015f7e:	b084      	sub	sp, #16
 8015f80:	af00      	add	r7, sp, #0
 8015f82:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8015f84:	4b11      	ldr	r3, [pc, #68]	; (8015fcc <_sbrk+0x50>)
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d102      	bne.n	8015f92 <_sbrk+0x16>
		heap_end = &end;
 8015f8c:	4b0f      	ldr	r3, [pc, #60]	; (8015fcc <_sbrk+0x50>)
 8015f8e:	4a10      	ldr	r2, [pc, #64]	; (8015fd0 <_sbrk+0x54>)
 8015f90:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8015f92:	4b0e      	ldr	r3, [pc, #56]	; (8015fcc <_sbrk+0x50>)
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8015f98:	4b0c      	ldr	r3, [pc, #48]	; (8015fcc <_sbrk+0x50>)
 8015f9a:	681a      	ldr	r2, [r3, #0]
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	4413      	add	r3, r2
 8015fa0:	466a      	mov	r2, sp
 8015fa2:	4293      	cmp	r3, r2
 8015fa4:	d907      	bls.n	8015fb6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8015fa6:	f000 fb6d 	bl	8016684 <__errno>
 8015faa:	4603      	mov	r3, r0
 8015fac:	220c      	movs	r2, #12
 8015fae:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8015fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8015fb4:	e006      	b.n	8015fc4 <_sbrk+0x48>
	}

	heap_end += incr;
 8015fb6:	4b05      	ldr	r3, [pc, #20]	; (8015fcc <_sbrk+0x50>)
 8015fb8:	681a      	ldr	r2, [r3, #0]
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	4413      	add	r3, r2
 8015fbe:	4a03      	ldr	r2, [pc, #12]	; (8015fcc <_sbrk+0x50>)
 8015fc0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8015fc2:	68fb      	ldr	r3, [r7, #12]
}
 8015fc4:	4618      	mov	r0, r3
 8015fc6:	3710      	adds	r7, #16
 8015fc8:	46bd      	mov	sp, r7
 8015fca:	bd80      	pop	{r7, pc}
 8015fcc:	20010440 	.word	0x20010440
 8015fd0:	200120a8 	.word	0x200120a8

08015fd4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8015fd4:	b480      	push	{r7}
 8015fd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8015fd8:	4b15      	ldr	r3, [pc, #84]	; (8016030 <SystemInit+0x5c>)
 8015fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015fde:	4a14      	ldr	r2, [pc, #80]	; (8016030 <SystemInit+0x5c>)
 8015fe0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015fe4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8015fe8:	4b12      	ldr	r3, [pc, #72]	; (8016034 <SystemInit+0x60>)
 8015fea:	681b      	ldr	r3, [r3, #0]
 8015fec:	4a11      	ldr	r2, [pc, #68]	; (8016034 <SystemInit+0x60>)
 8015fee:	f043 0301 	orr.w	r3, r3, #1
 8015ff2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8015ff4:	4b0f      	ldr	r3, [pc, #60]	; (8016034 <SystemInit+0x60>)
 8015ff6:	2200      	movs	r2, #0
 8015ff8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8015ffa:	4b0e      	ldr	r3, [pc, #56]	; (8016034 <SystemInit+0x60>)
 8015ffc:	681a      	ldr	r2, [r3, #0]
 8015ffe:	490d      	ldr	r1, [pc, #52]	; (8016034 <SystemInit+0x60>)
 8016000:	4b0d      	ldr	r3, [pc, #52]	; (8016038 <SystemInit+0x64>)
 8016002:	4013      	ands	r3, r2
 8016004:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8016006:	4b0b      	ldr	r3, [pc, #44]	; (8016034 <SystemInit+0x60>)
 8016008:	4a0c      	ldr	r2, [pc, #48]	; (801603c <SystemInit+0x68>)
 801600a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 801600c:	4b09      	ldr	r3, [pc, #36]	; (8016034 <SystemInit+0x60>)
 801600e:	681b      	ldr	r3, [r3, #0]
 8016010:	4a08      	ldr	r2, [pc, #32]	; (8016034 <SystemInit+0x60>)
 8016012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8016016:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8016018:	4b06      	ldr	r3, [pc, #24]	; (8016034 <SystemInit+0x60>)
 801601a:	2200      	movs	r2, #0
 801601c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801601e:	4b04      	ldr	r3, [pc, #16]	; (8016030 <SystemInit+0x5c>)
 8016020:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8016024:	609a      	str	r2, [r3, #8]
#endif
}
 8016026:	bf00      	nop
 8016028:	46bd      	mov	sp, r7
 801602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801602e:	4770      	bx	lr
 8016030:	e000ed00 	.word	0xe000ed00
 8016034:	40023800 	.word	0x40023800
 8016038:	fef6ffff 	.word	0xfef6ffff
 801603c:	24003010 	.word	0x24003010

08016040 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8016040:	b580      	push	{r7, lr}
 8016042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8016044:	2201      	movs	r2, #1
 8016046:	490e      	ldr	r1, [pc, #56]	; (8016080 <MX_USB_HOST_Init+0x40>)
 8016048:	480e      	ldr	r0, [pc, #56]	; (8016084 <MX_USB_HOST_Init+0x44>)
 801604a:	f7f5 fca1 	bl	800b990 <USBH_Init>
 801604e:	4603      	mov	r3, r0
 8016050:	2b00      	cmp	r3, #0
 8016052:	d001      	beq.n	8016058 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8016054:	f7fe fd08 	bl	8014a68 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8016058:	490b      	ldr	r1, [pc, #44]	; (8016088 <MX_USB_HOST_Init+0x48>)
 801605a:	480a      	ldr	r0, [pc, #40]	; (8016084 <MX_USB_HOST_Init+0x44>)
 801605c:	f7f5 fd33 	bl	800bac6 <USBH_RegisterClass>
 8016060:	4603      	mov	r3, r0
 8016062:	2b00      	cmp	r3, #0
 8016064:	d001      	beq.n	801606a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8016066:	f7fe fcff 	bl	8014a68 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801606a:	4806      	ldr	r0, [pc, #24]	; (8016084 <MX_USB_HOST_Init+0x44>)
 801606c:	f7f5 fdb8 	bl	800bbe0 <USBH_Start>
 8016070:	4603      	mov	r3, r0
 8016072:	2b00      	cmp	r3, #0
 8016074:	d001      	beq.n	801607a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8016076:	f7fe fcf7 	bl	8014a68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801607a:	bf00      	nop
 801607c:	bd80      	pop	{r7, pc}
 801607e:	bf00      	nop
 8016080:	0801608d 	.word	0x0801608d
 8016084:	200119fc 	.word	0x200119fc
 8016088:	20000004 	.word	0x20000004

0801608c <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 801608c:	b480      	push	{r7}
 801608e:	b083      	sub	sp, #12
 8016090:	af00      	add	r7, sp, #0
 8016092:	6078      	str	r0, [r7, #4]
 8016094:	460b      	mov	r3, r1
 8016096:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8016098:	78fb      	ldrb	r3, [r7, #3]
 801609a:	3b01      	subs	r3, #1
 801609c:	2b04      	cmp	r3, #4
 801609e:	d819      	bhi.n	80160d4 <USBH_UserProcess+0x48>
 80160a0:	a201      	add	r2, pc, #4	; (adr r2, 80160a8 <USBH_UserProcess+0x1c>)
 80160a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80160a6:	bf00      	nop
 80160a8:	080160d5 	.word	0x080160d5
 80160ac:	080160c5 	.word	0x080160c5
 80160b0:	080160d5 	.word	0x080160d5
 80160b4:	080160cd 	.word	0x080160cd
 80160b8:	080160bd 	.word	0x080160bd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80160bc:	4b09      	ldr	r3, [pc, #36]	; (80160e4 <USBH_UserProcess+0x58>)
 80160be:	2203      	movs	r2, #3
 80160c0:	701a      	strb	r2, [r3, #0]
  break;
 80160c2:	e008      	b.n	80160d6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80160c4:	4b07      	ldr	r3, [pc, #28]	; (80160e4 <USBH_UserProcess+0x58>)
 80160c6:	2202      	movs	r2, #2
 80160c8:	701a      	strb	r2, [r3, #0]
  break;
 80160ca:	e004      	b.n	80160d6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80160cc:	4b05      	ldr	r3, [pc, #20]	; (80160e4 <USBH_UserProcess+0x58>)
 80160ce:	2201      	movs	r2, #1
 80160d0:	701a      	strb	r2, [r3, #0]
  break;
 80160d2:	e000      	b.n	80160d6 <USBH_UserProcess+0x4a>

  default:
  break;
 80160d4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80160d6:	bf00      	nop
 80160d8:	370c      	adds	r7, #12
 80160da:	46bd      	mov	sp, r7
 80160dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160e0:	4770      	bx	lr
 80160e2:	bf00      	nop
 80160e4:	20010444 	.word	0x20010444

080160e8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80160e8:	b580      	push	{r7, lr}
 80160ea:	b08a      	sub	sp, #40	; 0x28
 80160ec:	af00      	add	r7, sp, #0
 80160ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80160f0:	f107 0314 	add.w	r3, r7, #20
 80160f4:	2200      	movs	r2, #0
 80160f6:	601a      	str	r2, [r3, #0]
 80160f8:	605a      	str	r2, [r3, #4]
 80160fa:	609a      	str	r2, [r3, #8]
 80160fc:	60da      	str	r2, [r3, #12]
 80160fe:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8016108:	d13c      	bne.n	8016184 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801610a:	4b20      	ldr	r3, [pc, #128]	; (801618c <HAL_HCD_MspInit+0xa4>)
 801610c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801610e:	4a1f      	ldr	r2, [pc, #124]	; (801618c <HAL_HCD_MspInit+0xa4>)
 8016110:	f043 0301 	orr.w	r3, r3, #1
 8016114:	6313      	str	r3, [r2, #48]	; 0x30
 8016116:	4b1d      	ldr	r3, [pc, #116]	; (801618c <HAL_HCD_MspInit+0xa4>)
 8016118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801611a:	f003 0301 	and.w	r3, r3, #1
 801611e:	613b      	str	r3, [r7, #16]
 8016120:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID 
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8016122:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8016126:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016128:	2302      	movs	r3, #2
 801612a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801612c:	2300      	movs	r3, #0
 801612e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016130:	2303      	movs	r3, #3
 8016132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8016134:	230a      	movs	r3, #10
 8016136:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016138:	f107 0314 	add.w	r3, r7, #20
 801613c:	4619      	mov	r1, r3
 801613e:	4814      	ldr	r0, [pc, #80]	; (8016190 <HAL_HCD_MspInit+0xa8>)
 8016140:	f7eb fc76 	bl	8001a30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8016144:	4b11      	ldr	r3, [pc, #68]	; (801618c <HAL_HCD_MspInit+0xa4>)
 8016146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016148:	4a10      	ldr	r2, [pc, #64]	; (801618c <HAL_HCD_MspInit+0xa4>)
 801614a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801614e:	6353      	str	r3, [r2, #52]	; 0x34
 8016150:	4b0e      	ldr	r3, [pc, #56]	; (801618c <HAL_HCD_MspInit+0xa4>)
 8016152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016158:	60fb      	str	r3, [r7, #12]
 801615a:	68fb      	ldr	r3, [r7, #12]
 801615c:	4b0b      	ldr	r3, [pc, #44]	; (801618c <HAL_HCD_MspInit+0xa4>)
 801615e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016160:	4a0a      	ldr	r2, [pc, #40]	; (801618c <HAL_HCD_MspInit+0xa4>)
 8016162:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016166:	6453      	str	r3, [r2, #68]	; 0x44
 8016168:	4b08      	ldr	r3, [pc, #32]	; (801618c <HAL_HCD_MspInit+0xa4>)
 801616a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801616c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016170:	60bb      	str	r3, [r7, #8]
 8016172:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8016174:	2200      	movs	r2, #0
 8016176:	2105      	movs	r1, #5
 8016178:	2043      	movs	r0, #67	; 0x43
 801617a:	f7ea fd41 	bl	8000c00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801617e:	2043      	movs	r0, #67	; 0x43
 8016180:	f7ea fd5a 	bl	8000c38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8016184:	bf00      	nop
 8016186:	3728      	adds	r7, #40	; 0x28
 8016188:	46bd      	mov	sp, r7
 801618a:	bd80      	pop	{r7, pc}
 801618c:	40023800 	.word	0x40023800
 8016190:	40020000 	.word	0x40020000

08016194 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8016194:	b580      	push	{r7, lr}
 8016196:	b082      	sub	sp, #8
 8016198:	af00      	add	r7, sp, #0
 801619a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80161a2:	4618      	mov	r0, r3
 80161a4:	f7f6 f86f 	bl	800c286 <USBH_LL_IncTimer>
}
 80161a8:	bf00      	nop
 80161aa:	3708      	adds	r7, #8
 80161ac:	46bd      	mov	sp, r7
 80161ae:	bd80      	pop	{r7, pc}

080161b0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80161b0:	b580      	push	{r7, lr}
 80161b2:	b082      	sub	sp, #8
 80161b4:	af00      	add	r7, sp, #0
 80161b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80161be:	4618      	mov	r0, r3
 80161c0:	f7f6 f8b4 	bl	800c32c <USBH_LL_Connect>
}
 80161c4:	bf00      	nop
 80161c6:	3708      	adds	r7, #8
 80161c8:	46bd      	mov	sp, r7
 80161ca:	bd80      	pop	{r7, pc}

080161cc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80161cc:	b580      	push	{r7, lr}
 80161ce:	b082      	sub	sp, #8
 80161d0:	af00      	add	r7, sp, #0
 80161d2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80161da:	4618      	mov	r0, r3
 80161dc:	f7f6 f8da 	bl	800c394 <USBH_LL_Disconnect>
}
 80161e0:	bf00      	nop
 80161e2:	3708      	adds	r7, #8
 80161e4:	46bd      	mov	sp, r7
 80161e6:	bd80      	pop	{r7, pc}

080161e8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80161e8:	b580      	push	{r7, lr}
 80161ea:	b082      	sub	sp, #8
 80161ec:	af00      	add	r7, sp, #0
 80161ee:	6078      	str	r0, [r7, #4]
 80161f0:	460b      	mov	r3, r1
 80161f2:	70fb      	strb	r3, [r7, #3]
 80161f4:	4613      	mov	r3, r2
 80161f6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80161fe:	4618      	mov	r0, r3
 8016200:	f7f6 f918 	bl	800c434 <USBH_LL_NotifyURBChange>
#endif
}
 8016204:	bf00      	nop
 8016206:	3708      	adds	r7, #8
 8016208:	46bd      	mov	sp, r7
 801620a:	bd80      	pop	{r7, pc}

0801620c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801620c:	b580      	push	{r7, lr}
 801620e:	b082      	sub	sp, #8
 8016210:	af00      	add	r7, sp, #0
 8016212:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801621a:	4618      	mov	r0, r3
 801621c:	f7f6 f85d 	bl	800c2da <USBH_LL_PortEnabled>
} 
 8016220:	bf00      	nop
 8016222:	3708      	adds	r7, #8
 8016224:	46bd      	mov	sp, r7
 8016226:	bd80      	pop	{r7, pc}

08016228 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8016228:	b580      	push	{r7, lr}
 801622a:	b082      	sub	sp, #8
 801622c:	af00      	add	r7, sp, #0
 801622e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016236:	4618      	mov	r0, r3
 8016238:	f7f6 f85d 	bl	800c2f6 <USBH_LL_PortDisabled>
} 
 801623c:	bf00      	nop
 801623e:	3708      	adds	r7, #8
 8016240:	46bd      	mov	sp, r7
 8016242:	bd80      	pop	{r7, pc}

08016244 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8016244:	b580      	push	{r7, lr}
 8016246:	b082      	sub	sp, #8
 8016248:	af00      	add	r7, sp, #0
 801624a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8016252:	2b01      	cmp	r3, #1
 8016254:	d12a      	bne.n	80162ac <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8016256:	4a18      	ldr	r2, [pc, #96]	; (80162b8 <USBH_LL_Init+0x74>)
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	4a15      	ldr	r2, [pc, #84]	; (80162b8 <USBH_LL_Init+0x74>)
 8016262:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8016266:	4b14      	ldr	r3, [pc, #80]	; (80162b8 <USBH_LL_Init+0x74>)
 8016268:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801626c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801626e:	4b12      	ldr	r3, [pc, #72]	; (80162b8 <USBH_LL_Init+0x74>)
 8016270:	2208      	movs	r2, #8
 8016272:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8016274:	4b10      	ldr	r3, [pc, #64]	; (80162b8 <USBH_LL_Init+0x74>)
 8016276:	2203      	movs	r2, #3
 8016278:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801627a:	4b0f      	ldr	r3, [pc, #60]	; (80162b8 <USBH_LL_Init+0x74>)
 801627c:	2200      	movs	r2, #0
 801627e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8016280:	4b0d      	ldr	r3, [pc, #52]	; (80162b8 <USBH_LL_Init+0x74>)
 8016282:	2202      	movs	r2, #2
 8016284:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8016286:	4b0c      	ldr	r3, [pc, #48]	; (80162b8 <USBH_LL_Init+0x74>)
 8016288:	2200      	movs	r2, #0
 801628a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 801628c:	480a      	ldr	r0, [pc, #40]	; (80162b8 <USBH_LL_Init+0x74>)
 801628e:	f7eb fdc5 	bl	8001e1c <HAL_HCD_Init>
 8016292:	4603      	mov	r3, r0
 8016294:	2b00      	cmp	r3, #0
 8016296:	d001      	beq.n	801629c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8016298:	f7fe fbe6 	bl	8014a68 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 801629c:	4806      	ldr	r0, [pc, #24]	; (80162b8 <USBH_LL_Init+0x74>)
 801629e:	f7ec f9b5 	bl	800260c <HAL_HCD_GetCurrentFrame>
 80162a2:	4603      	mov	r3, r0
 80162a4:	4619      	mov	r1, r3
 80162a6:	6878      	ldr	r0, [r7, #4]
 80162a8:	f7f5 ffde 	bl	800c268 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80162ac:	2300      	movs	r3, #0
}
 80162ae:	4618      	mov	r0, r3
 80162b0:	3708      	adds	r7, #8
 80162b2:	46bd      	mov	sp, r7
 80162b4:	bd80      	pop	{r7, pc}
 80162b6:	bf00      	nop
 80162b8:	20011dd4 	.word	0x20011dd4

080162bc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80162bc:	b580      	push	{r7, lr}
 80162be:	b084      	sub	sp, #16
 80162c0:	af00      	add	r7, sp, #0
 80162c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80162c4:	2300      	movs	r3, #0
 80162c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80162c8:	2300      	movs	r3, #0
 80162ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80162d2:	4618      	mov	r0, r3
 80162d4:	f7ec f922 	bl	800251c <HAL_HCD_Start>
 80162d8:	4603      	mov	r3, r0
 80162da:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80162dc:	7bfb      	ldrb	r3, [r7, #15]
 80162de:	4618      	mov	r0, r3
 80162e0:	f000 f95e 	bl	80165a0 <USBH_Get_USB_Status>
 80162e4:	4603      	mov	r3, r0
 80162e6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80162e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80162ea:	4618      	mov	r0, r3
 80162ec:	3710      	adds	r7, #16
 80162ee:	46bd      	mov	sp, r7
 80162f0:	bd80      	pop	{r7, pc}

080162f2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80162f2:	b580      	push	{r7, lr}
 80162f4:	b084      	sub	sp, #16
 80162f6:	af00      	add	r7, sp, #0
 80162f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80162fa:	2300      	movs	r3, #0
 80162fc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80162fe:	2300      	movs	r3, #0
 8016300:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8016308:	4618      	mov	r0, r3
 801630a:	f7ec f92a 	bl	8002562 <HAL_HCD_Stop>
 801630e:	4603      	mov	r3, r0
 8016310:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8016312:	7bfb      	ldrb	r3, [r7, #15]
 8016314:	4618      	mov	r0, r3
 8016316:	f000 f943 	bl	80165a0 <USBH_Get_USB_Status>
 801631a:	4603      	mov	r3, r0
 801631c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 801631e:	7bbb      	ldrb	r3, [r7, #14]
}
 8016320:	4618      	mov	r0, r3
 8016322:	3710      	adds	r7, #16
 8016324:	46bd      	mov	sp, r7
 8016326:	bd80      	pop	{r7, pc}

08016328 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8016328:	b580      	push	{r7, lr}
 801632a:	b084      	sub	sp, #16
 801632c:	af00      	add	r7, sp, #0
 801632e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8016330:	2301      	movs	r3, #1
 8016332:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801633a:	4618      	mov	r0, r3
 801633c:	f7ec f974 	bl	8002628 <HAL_HCD_GetCurrentSpeed>
 8016340:	4603      	mov	r3, r0
 8016342:	2b02      	cmp	r3, #2
 8016344:	d00c      	beq.n	8016360 <USBH_LL_GetSpeed+0x38>
 8016346:	2b02      	cmp	r3, #2
 8016348:	d80d      	bhi.n	8016366 <USBH_LL_GetSpeed+0x3e>
 801634a:	2b00      	cmp	r3, #0
 801634c:	d002      	beq.n	8016354 <USBH_LL_GetSpeed+0x2c>
 801634e:	2b01      	cmp	r3, #1
 8016350:	d003      	beq.n	801635a <USBH_LL_GetSpeed+0x32>
 8016352:	e008      	b.n	8016366 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8016354:	2300      	movs	r3, #0
 8016356:	73fb      	strb	r3, [r7, #15]
    break;
 8016358:	e008      	b.n	801636c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801635a:	2301      	movs	r3, #1
 801635c:	73fb      	strb	r3, [r7, #15]
    break;
 801635e:	e005      	b.n	801636c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8016360:	2302      	movs	r3, #2
 8016362:	73fb      	strb	r3, [r7, #15]
    break;
 8016364:	e002      	b.n	801636c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8016366:	2301      	movs	r3, #1
 8016368:	73fb      	strb	r3, [r7, #15]
    break;
 801636a:	bf00      	nop
  }
  return  speed;
 801636c:	7bfb      	ldrb	r3, [r7, #15]
}
 801636e:	4618      	mov	r0, r3
 8016370:	3710      	adds	r7, #16
 8016372:	46bd      	mov	sp, r7
 8016374:	bd80      	pop	{r7, pc}

08016376 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8016376:	b580      	push	{r7, lr}
 8016378:	b084      	sub	sp, #16
 801637a:	af00      	add	r7, sp, #0
 801637c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801637e:	2300      	movs	r3, #0
 8016380:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8016382:	2300      	movs	r3, #0
 8016384:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801638c:	4618      	mov	r0, r3
 801638e:	f7ec f905 	bl	800259c <HAL_HCD_ResetPort>
 8016392:	4603      	mov	r3, r0
 8016394:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8016396:	7bfb      	ldrb	r3, [r7, #15]
 8016398:	4618      	mov	r0, r3
 801639a:	f000 f901 	bl	80165a0 <USBH_Get_USB_Status>
 801639e:	4603      	mov	r3, r0
 80163a0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80163a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80163a4:	4618      	mov	r0, r3
 80163a6:	3710      	adds	r7, #16
 80163a8:	46bd      	mov	sp, r7
 80163aa:	bd80      	pop	{r7, pc}

080163ac <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80163ac:	b580      	push	{r7, lr}
 80163ae:	b082      	sub	sp, #8
 80163b0:	af00      	add	r7, sp, #0
 80163b2:	6078      	str	r0, [r7, #4]
 80163b4:	460b      	mov	r3, r1
 80163b6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80163be:	78fa      	ldrb	r2, [r7, #3]
 80163c0:	4611      	mov	r1, r2
 80163c2:	4618      	mov	r0, r3
 80163c4:	f7ec f90d 	bl	80025e2 <HAL_HCD_HC_GetXferCount>
 80163c8:	4603      	mov	r3, r0
}
 80163ca:	4618      	mov	r0, r3
 80163cc:	3708      	adds	r7, #8
 80163ce:	46bd      	mov	sp, r7
 80163d0:	bd80      	pop	{r7, pc}

080163d2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80163d2:	b590      	push	{r4, r7, lr}
 80163d4:	b089      	sub	sp, #36	; 0x24
 80163d6:	af04      	add	r7, sp, #16
 80163d8:	6078      	str	r0, [r7, #4]
 80163da:	4608      	mov	r0, r1
 80163dc:	4611      	mov	r1, r2
 80163de:	461a      	mov	r2, r3
 80163e0:	4603      	mov	r3, r0
 80163e2:	70fb      	strb	r3, [r7, #3]
 80163e4:	460b      	mov	r3, r1
 80163e6:	70bb      	strb	r3, [r7, #2]
 80163e8:	4613      	mov	r3, r2
 80163ea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80163ec:	2300      	movs	r3, #0
 80163ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80163f0:	2300      	movs	r3, #0
 80163f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80163fa:	787c      	ldrb	r4, [r7, #1]
 80163fc:	78ba      	ldrb	r2, [r7, #2]
 80163fe:	78f9      	ldrb	r1, [r7, #3]
 8016400:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016402:	9302      	str	r3, [sp, #8]
 8016404:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016408:	9301      	str	r3, [sp, #4]
 801640a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801640e:	9300      	str	r3, [sp, #0]
 8016410:	4623      	mov	r3, r4
 8016412:	f7eb fd59 	bl	8001ec8 <HAL_HCD_HC_Init>
 8016416:	4603      	mov	r3, r0
 8016418:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801641a:	7bfb      	ldrb	r3, [r7, #15]
 801641c:	4618      	mov	r0, r3
 801641e:	f000 f8bf 	bl	80165a0 <USBH_Get_USB_Status>
 8016422:	4603      	mov	r3, r0
 8016424:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8016426:	7bbb      	ldrb	r3, [r7, #14]
}
 8016428:	4618      	mov	r0, r3
 801642a:	3714      	adds	r7, #20
 801642c:	46bd      	mov	sp, r7
 801642e:	bd90      	pop	{r4, r7, pc}

08016430 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8016430:	b580      	push	{r7, lr}
 8016432:	b084      	sub	sp, #16
 8016434:	af00      	add	r7, sp, #0
 8016436:	6078      	str	r0, [r7, #4]
 8016438:	460b      	mov	r3, r1
 801643a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801643c:	2300      	movs	r3, #0
 801643e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8016440:	2300      	movs	r3, #0
 8016442:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801644a:	78fa      	ldrb	r2, [r7, #3]
 801644c:	4611      	mov	r1, r2
 801644e:	4618      	mov	r0, r3
 8016450:	f7eb fdd2 	bl	8001ff8 <HAL_HCD_HC_Halt>
 8016454:	4603      	mov	r3, r0
 8016456:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8016458:	7bfb      	ldrb	r3, [r7, #15]
 801645a:	4618      	mov	r0, r3
 801645c:	f000 f8a0 	bl	80165a0 <USBH_Get_USB_Status>
 8016460:	4603      	mov	r3, r0
 8016462:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8016464:	7bbb      	ldrb	r3, [r7, #14]
}
 8016466:	4618      	mov	r0, r3
 8016468:	3710      	adds	r7, #16
 801646a:	46bd      	mov	sp, r7
 801646c:	bd80      	pop	{r7, pc}

0801646e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801646e:	b590      	push	{r4, r7, lr}
 8016470:	b089      	sub	sp, #36	; 0x24
 8016472:	af04      	add	r7, sp, #16
 8016474:	6078      	str	r0, [r7, #4]
 8016476:	4608      	mov	r0, r1
 8016478:	4611      	mov	r1, r2
 801647a:	461a      	mov	r2, r3
 801647c:	4603      	mov	r3, r0
 801647e:	70fb      	strb	r3, [r7, #3]
 8016480:	460b      	mov	r3, r1
 8016482:	70bb      	strb	r3, [r7, #2]
 8016484:	4613      	mov	r3, r2
 8016486:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016488:	2300      	movs	r3, #0
 801648a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801648c:	2300      	movs	r3, #0
 801648e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8016496:	787c      	ldrb	r4, [r7, #1]
 8016498:	78ba      	ldrb	r2, [r7, #2]
 801649a:	78f9      	ldrb	r1, [r7, #3]
 801649c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80164a0:	9303      	str	r3, [sp, #12]
 80164a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80164a4:	9302      	str	r3, [sp, #8]
 80164a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164a8:	9301      	str	r3, [sp, #4]
 80164aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80164ae:	9300      	str	r3, [sp, #0]
 80164b0:	4623      	mov	r3, r4
 80164b2:	f7eb fdc5 	bl	8002040 <HAL_HCD_HC_SubmitRequest>
 80164b6:	4603      	mov	r3, r0
 80164b8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80164ba:	7bfb      	ldrb	r3, [r7, #15]
 80164bc:	4618      	mov	r0, r3
 80164be:	f000 f86f 	bl	80165a0 <USBH_Get_USB_Status>
 80164c2:	4603      	mov	r3, r0
 80164c4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80164c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80164c8:	4618      	mov	r0, r3
 80164ca:	3714      	adds	r7, #20
 80164cc:	46bd      	mov	sp, r7
 80164ce:	bd90      	pop	{r4, r7, pc}

080164d0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80164d0:	b580      	push	{r7, lr}
 80164d2:	b082      	sub	sp, #8
 80164d4:	af00      	add	r7, sp, #0
 80164d6:	6078      	str	r0, [r7, #4]
 80164d8:	460b      	mov	r3, r1
 80164da:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80164e2:	78fa      	ldrb	r2, [r7, #3]
 80164e4:	4611      	mov	r1, r2
 80164e6:	4618      	mov	r0, r3
 80164e8:	f7ec f866 	bl	80025b8 <HAL_HCD_HC_GetURBState>
 80164ec:	4603      	mov	r3, r0
}
 80164ee:	4618      	mov	r0, r3
 80164f0:	3708      	adds	r7, #8
 80164f2:	46bd      	mov	sp, r7
 80164f4:	bd80      	pop	{r7, pc}

080164f6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80164f6:	b580      	push	{r7, lr}
 80164f8:	b082      	sub	sp, #8
 80164fa:	af00      	add	r7, sp, #0
 80164fc:	6078      	str	r0, [r7, #4]
 80164fe:	460b      	mov	r3, r1
 8016500:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8016508:	2b01      	cmp	r3, #1
 801650a:	d103      	bne.n	8016514 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801650c:	78fb      	ldrb	r3, [r7, #3]
 801650e:	4618      	mov	r0, r3
 8016510:	f000 f872 	bl	80165f8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8016514:	20c8      	movs	r0, #200	; 0xc8
 8016516:	f7ea f825 	bl	8000564 <HAL_Delay>
  return USBH_OK;
 801651a:	2300      	movs	r3, #0
}
 801651c:	4618      	mov	r0, r3
 801651e:	3708      	adds	r7, #8
 8016520:	46bd      	mov	sp, r7
 8016522:	bd80      	pop	{r7, pc}

08016524 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8016524:	b480      	push	{r7}
 8016526:	b085      	sub	sp, #20
 8016528:	af00      	add	r7, sp, #0
 801652a:	6078      	str	r0, [r7, #4]
 801652c:	460b      	mov	r3, r1
 801652e:	70fb      	strb	r3, [r7, #3]
 8016530:	4613      	mov	r3, r2
 8016532:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801653a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 801653c:	78fa      	ldrb	r2, [r7, #3]
 801653e:	68f9      	ldr	r1, [r7, #12]
 8016540:	4613      	mov	r3, r2
 8016542:	009b      	lsls	r3, r3, #2
 8016544:	4413      	add	r3, r2
 8016546:	00db      	lsls	r3, r3, #3
 8016548:	440b      	add	r3, r1
 801654a:	333b      	adds	r3, #59	; 0x3b
 801654c:	781b      	ldrb	r3, [r3, #0]
 801654e:	2b00      	cmp	r3, #0
 8016550:	d00a      	beq.n	8016568 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8016552:	78fa      	ldrb	r2, [r7, #3]
 8016554:	68f9      	ldr	r1, [r7, #12]
 8016556:	4613      	mov	r3, r2
 8016558:	009b      	lsls	r3, r3, #2
 801655a:	4413      	add	r3, r2
 801655c:	00db      	lsls	r3, r3, #3
 801655e:	440b      	add	r3, r1
 8016560:	3350      	adds	r3, #80	; 0x50
 8016562:	78ba      	ldrb	r2, [r7, #2]
 8016564:	701a      	strb	r2, [r3, #0]
 8016566:	e009      	b.n	801657c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8016568:	78fa      	ldrb	r2, [r7, #3]
 801656a:	68f9      	ldr	r1, [r7, #12]
 801656c:	4613      	mov	r3, r2
 801656e:	009b      	lsls	r3, r3, #2
 8016570:	4413      	add	r3, r2
 8016572:	00db      	lsls	r3, r3, #3
 8016574:	440b      	add	r3, r1
 8016576:	3351      	adds	r3, #81	; 0x51
 8016578:	78ba      	ldrb	r2, [r7, #2]
 801657a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801657c:	2300      	movs	r3, #0
}
 801657e:	4618      	mov	r0, r3
 8016580:	3714      	adds	r7, #20
 8016582:	46bd      	mov	sp, r7
 8016584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016588:	4770      	bx	lr

0801658a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801658a:	b580      	push	{r7, lr}
 801658c:	b082      	sub	sp, #8
 801658e:	af00      	add	r7, sp, #0
 8016590:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8016592:	6878      	ldr	r0, [r7, #4]
 8016594:	f7e9 ffe6 	bl	8000564 <HAL_Delay>
}
 8016598:	bf00      	nop
 801659a:	3708      	adds	r7, #8
 801659c:	46bd      	mov	sp, r7
 801659e:	bd80      	pop	{r7, pc}

080165a0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80165a0:	b480      	push	{r7}
 80165a2:	b085      	sub	sp, #20
 80165a4:	af00      	add	r7, sp, #0
 80165a6:	4603      	mov	r3, r0
 80165a8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80165aa:	2300      	movs	r3, #0
 80165ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80165ae:	79fb      	ldrb	r3, [r7, #7]
 80165b0:	2b03      	cmp	r3, #3
 80165b2:	d817      	bhi.n	80165e4 <USBH_Get_USB_Status+0x44>
 80165b4:	a201      	add	r2, pc, #4	; (adr r2, 80165bc <USBH_Get_USB_Status+0x1c>)
 80165b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80165ba:	bf00      	nop
 80165bc:	080165cd 	.word	0x080165cd
 80165c0:	080165d3 	.word	0x080165d3
 80165c4:	080165d9 	.word	0x080165d9
 80165c8:	080165df 	.word	0x080165df
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80165cc:	2300      	movs	r3, #0
 80165ce:	73fb      	strb	r3, [r7, #15]
    break;
 80165d0:	e00b      	b.n	80165ea <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80165d2:	2302      	movs	r3, #2
 80165d4:	73fb      	strb	r3, [r7, #15]
    break;
 80165d6:	e008      	b.n	80165ea <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80165d8:	2301      	movs	r3, #1
 80165da:	73fb      	strb	r3, [r7, #15]
    break;
 80165dc:	e005      	b.n	80165ea <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80165de:	2302      	movs	r3, #2
 80165e0:	73fb      	strb	r3, [r7, #15]
    break;
 80165e2:	e002      	b.n	80165ea <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80165e4:	2302      	movs	r3, #2
 80165e6:	73fb      	strb	r3, [r7, #15]
    break;
 80165e8:	bf00      	nop
  }
  return usb_status;
 80165ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80165ec:	4618      	mov	r0, r3
 80165ee:	3714      	adds	r7, #20
 80165f0:	46bd      	mov	sp, r7
 80165f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165f6:	4770      	bx	lr

080165f8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 80165f8:	b580      	push	{r7, lr}
 80165fa:	b084      	sub	sp, #16
 80165fc:	af00      	add	r7, sp, #0
 80165fe:	4603      	mov	r3, r0
 8016600:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8016602:	79fb      	ldrb	r3, [r7, #7]
 8016604:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8016606:	79fb      	ldrb	r3, [r7, #7]
 8016608:	2b00      	cmp	r3, #0
 801660a:	d102      	bne.n	8016612 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 801660c:	2301      	movs	r3, #1
 801660e:	73fb      	strb	r3, [r7, #15]
 8016610:	e001      	b.n	8016616 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8016612:	2300      	movs	r3, #0
 8016614:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8016616:	7bfb      	ldrb	r3, [r7, #15]
 8016618:	461a      	mov	r2, r3
 801661a:	2120      	movs	r1, #32
 801661c:	4803      	ldr	r0, [pc, #12]	; (801662c <MX_DriverVbusFS+0x34>)
 801661e:	f7eb fbcb 	bl	8001db8 <HAL_GPIO_WritePin>
}
 8016622:	bf00      	nop
 8016624:	3710      	adds	r7, #16
 8016626:	46bd      	mov	sp, r7
 8016628:	bd80      	pop	{r7, pc}
 801662a:	bf00      	nop
 801662c:	40020c00 	.word	0x40020c00

08016630 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8016630:	f8df d034 	ldr.w	sp, [pc, #52]	; 8016668 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8016634:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8016636:	e003      	b.n	8016640 <LoopCopyDataInit>

08016638 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8016638:	4b0c      	ldr	r3, [pc, #48]	; (801666c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 801663a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 801663c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801663e:	3104      	adds	r1, #4

08016640 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8016640:	480b      	ldr	r0, [pc, #44]	; (8016670 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8016642:	4b0c      	ldr	r3, [pc, #48]	; (8016674 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8016644:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8016646:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8016648:	d3f6      	bcc.n	8016638 <CopyDataInit>
  ldr  r2, =_sbss
 801664a:	4a0b      	ldr	r2, [pc, #44]	; (8016678 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 801664c:	e002      	b.n	8016654 <LoopFillZerobss>

0801664e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801664e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8016650:	f842 3b04 	str.w	r3, [r2], #4

08016654 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8016654:	4b09      	ldr	r3, [pc, #36]	; (801667c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8016656:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8016658:	d3f9      	bcc.n	801664e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 801665a:	f7ff fcbb 	bl	8015fd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801665e:	f000 f817 	bl	8016690 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8016662:	f7fc fcf3 	bl	801304c <main>
  bx  lr    
 8016666:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8016668:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 801666c:	08016b38 	.word	0x08016b38
  ldr  r0, =_sdata
 8016670:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8016674:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8016678:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 801667c:	200120a8 	.word	0x200120a8

08016680 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8016680:	e7fe      	b.n	8016680 <ADC_IRQHandler>
	...

08016684 <__errno>:
 8016684:	4b01      	ldr	r3, [pc, #4]	; (801668c <__errno+0x8>)
 8016686:	6818      	ldr	r0, [r3, #0]
 8016688:	4770      	bx	lr
 801668a:	bf00      	nop
 801668c:	20000030 	.word	0x20000030

08016690 <__libc_init_array>:
 8016690:	b570      	push	{r4, r5, r6, lr}
 8016692:	4d0d      	ldr	r5, [pc, #52]	; (80166c8 <__libc_init_array+0x38>)
 8016694:	4c0d      	ldr	r4, [pc, #52]	; (80166cc <__libc_init_array+0x3c>)
 8016696:	1b64      	subs	r4, r4, r5
 8016698:	10a4      	asrs	r4, r4, #2
 801669a:	2600      	movs	r6, #0
 801669c:	42a6      	cmp	r6, r4
 801669e:	d109      	bne.n	80166b4 <__libc_init_array+0x24>
 80166a0:	4d0b      	ldr	r5, [pc, #44]	; (80166d0 <__libc_init_array+0x40>)
 80166a2:	4c0c      	ldr	r4, [pc, #48]	; (80166d4 <__libc_init_array+0x44>)
 80166a4:	f000 f938 	bl	8016918 <_init>
 80166a8:	1b64      	subs	r4, r4, r5
 80166aa:	10a4      	asrs	r4, r4, #2
 80166ac:	2600      	movs	r6, #0
 80166ae:	42a6      	cmp	r6, r4
 80166b0:	d105      	bne.n	80166be <__libc_init_array+0x2e>
 80166b2:	bd70      	pop	{r4, r5, r6, pc}
 80166b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80166b8:	4798      	blx	r3
 80166ba:	3601      	adds	r6, #1
 80166bc:	e7ee      	b.n	801669c <__libc_init_array+0xc>
 80166be:	f855 3b04 	ldr.w	r3, [r5], #4
 80166c2:	4798      	blx	r3
 80166c4:	3601      	adds	r6, #1
 80166c6:	e7f2      	b.n	80166ae <__libc_init_array+0x1e>
 80166c8:	08016b30 	.word	0x08016b30
 80166cc:	08016b30 	.word	0x08016b30
 80166d0:	08016b30 	.word	0x08016b30
 80166d4:	08016b34 	.word	0x08016b34

080166d8 <malloc>:
 80166d8:	4b02      	ldr	r3, [pc, #8]	; (80166e4 <malloc+0xc>)
 80166da:	4601      	mov	r1, r0
 80166dc:	6818      	ldr	r0, [r3, #0]
 80166de:	f000 b871 	b.w	80167c4 <_malloc_r>
 80166e2:	bf00      	nop
 80166e4:	20000030 	.word	0x20000030

080166e8 <free>:
 80166e8:	4b02      	ldr	r3, [pc, #8]	; (80166f4 <free+0xc>)
 80166ea:	4601      	mov	r1, r0
 80166ec:	6818      	ldr	r0, [r3, #0]
 80166ee:	f000 b819 	b.w	8016724 <_free_r>
 80166f2:	bf00      	nop
 80166f4:	20000030 	.word	0x20000030

080166f8 <memcpy>:
 80166f8:	440a      	add	r2, r1
 80166fa:	4291      	cmp	r1, r2
 80166fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8016700:	d100      	bne.n	8016704 <memcpy+0xc>
 8016702:	4770      	bx	lr
 8016704:	b510      	push	{r4, lr}
 8016706:	f811 4b01 	ldrb.w	r4, [r1], #1
 801670a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801670e:	4291      	cmp	r1, r2
 8016710:	d1f9      	bne.n	8016706 <memcpy+0xe>
 8016712:	bd10      	pop	{r4, pc}

08016714 <memset>:
 8016714:	4402      	add	r2, r0
 8016716:	4603      	mov	r3, r0
 8016718:	4293      	cmp	r3, r2
 801671a:	d100      	bne.n	801671e <memset+0xa>
 801671c:	4770      	bx	lr
 801671e:	f803 1b01 	strb.w	r1, [r3], #1
 8016722:	e7f9      	b.n	8016718 <memset+0x4>

08016724 <_free_r>:
 8016724:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016726:	2900      	cmp	r1, #0
 8016728:	d048      	beq.n	80167bc <_free_r+0x98>
 801672a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801672e:	9001      	str	r0, [sp, #4]
 8016730:	2b00      	cmp	r3, #0
 8016732:	f1a1 0404 	sub.w	r4, r1, #4
 8016736:	bfb8      	it	lt
 8016738:	18e4      	addlt	r4, r4, r3
 801673a:	f000 f8df 	bl	80168fc <__malloc_lock>
 801673e:	4a20      	ldr	r2, [pc, #128]	; (80167c0 <_free_r+0x9c>)
 8016740:	9801      	ldr	r0, [sp, #4]
 8016742:	6813      	ldr	r3, [r2, #0]
 8016744:	4615      	mov	r5, r2
 8016746:	b933      	cbnz	r3, 8016756 <_free_r+0x32>
 8016748:	6063      	str	r3, [r4, #4]
 801674a:	6014      	str	r4, [r2, #0]
 801674c:	b003      	add	sp, #12
 801674e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016752:	f000 b8d9 	b.w	8016908 <__malloc_unlock>
 8016756:	42a3      	cmp	r3, r4
 8016758:	d90b      	bls.n	8016772 <_free_r+0x4e>
 801675a:	6821      	ldr	r1, [r4, #0]
 801675c:	1862      	adds	r2, r4, r1
 801675e:	4293      	cmp	r3, r2
 8016760:	bf04      	itt	eq
 8016762:	681a      	ldreq	r2, [r3, #0]
 8016764:	685b      	ldreq	r3, [r3, #4]
 8016766:	6063      	str	r3, [r4, #4]
 8016768:	bf04      	itt	eq
 801676a:	1852      	addeq	r2, r2, r1
 801676c:	6022      	streq	r2, [r4, #0]
 801676e:	602c      	str	r4, [r5, #0]
 8016770:	e7ec      	b.n	801674c <_free_r+0x28>
 8016772:	461a      	mov	r2, r3
 8016774:	685b      	ldr	r3, [r3, #4]
 8016776:	b10b      	cbz	r3, 801677c <_free_r+0x58>
 8016778:	42a3      	cmp	r3, r4
 801677a:	d9fa      	bls.n	8016772 <_free_r+0x4e>
 801677c:	6811      	ldr	r1, [r2, #0]
 801677e:	1855      	adds	r5, r2, r1
 8016780:	42a5      	cmp	r5, r4
 8016782:	d10b      	bne.n	801679c <_free_r+0x78>
 8016784:	6824      	ldr	r4, [r4, #0]
 8016786:	4421      	add	r1, r4
 8016788:	1854      	adds	r4, r2, r1
 801678a:	42a3      	cmp	r3, r4
 801678c:	6011      	str	r1, [r2, #0]
 801678e:	d1dd      	bne.n	801674c <_free_r+0x28>
 8016790:	681c      	ldr	r4, [r3, #0]
 8016792:	685b      	ldr	r3, [r3, #4]
 8016794:	6053      	str	r3, [r2, #4]
 8016796:	4421      	add	r1, r4
 8016798:	6011      	str	r1, [r2, #0]
 801679a:	e7d7      	b.n	801674c <_free_r+0x28>
 801679c:	d902      	bls.n	80167a4 <_free_r+0x80>
 801679e:	230c      	movs	r3, #12
 80167a0:	6003      	str	r3, [r0, #0]
 80167a2:	e7d3      	b.n	801674c <_free_r+0x28>
 80167a4:	6825      	ldr	r5, [r4, #0]
 80167a6:	1961      	adds	r1, r4, r5
 80167a8:	428b      	cmp	r3, r1
 80167aa:	bf04      	itt	eq
 80167ac:	6819      	ldreq	r1, [r3, #0]
 80167ae:	685b      	ldreq	r3, [r3, #4]
 80167b0:	6063      	str	r3, [r4, #4]
 80167b2:	bf04      	itt	eq
 80167b4:	1949      	addeq	r1, r1, r5
 80167b6:	6021      	streq	r1, [r4, #0]
 80167b8:	6054      	str	r4, [r2, #4]
 80167ba:	e7c7      	b.n	801674c <_free_r+0x28>
 80167bc:	b003      	add	sp, #12
 80167be:	bd30      	pop	{r4, r5, pc}
 80167c0:	20010448 	.word	0x20010448

080167c4 <_malloc_r>:
 80167c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167c6:	1ccd      	adds	r5, r1, #3
 80167c8:	f025 0503 	bic.w	r5, r5, #3
 80167cc:	3508      	adds	r5, #8
 80167ce:	2d0c      	cmp	r5, #12
 80167d0:	bf38      	it	cc
 80167d2:	250c      	movcc	r5, #12
 80167d4:	2d00      	cmp	r5, #0
 80167d6:	4606      	mov	r6, r0
 80167d8:	db01      	blt.n	80167de <_malloc_r+0x1a>
 80167da:	42a9      	cmp	r1, r5
 80167dc:	d903      	bls.n	80167e6 <_malloc_r+0x22>
 80167de:	230c      	movs	r3, #12
 80167e0:	6033      	str	r3, [r6, #0]
 80167e2:	2000      	movs	r0, #0
 80167e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167e6:	f000 f889 	bl	80168fc <__malloc_lock>
 80167ea:	4921      	ldr	r1, [pc, #132]	; (8016870 <_malloc_r+0xac>)
 80167ec:	680a      	ldr	r2, [r1, #0]
 80167ee:	4614      	mov	r4, r2
 80167f0:	b99c      	cbnz	r4, 801681a <_malloc_r+0x56>
 80167f2:	4f20      	ldr	r7, [pc, #128]	; (8016874 <_malloc_r+0xb0>)
 80167f4:	683b      	ldr	r3, [r7, #0]
 80167f6:	b923      	cbnz	r3, 8016802 <_malloc_r+0x3e>
 80167f8:	4621      	mov	r1, r4
 80167fa:	4630      	mov	r0, r6
 80167fc:	f000 f83c 	bl	8016878 <_sbrk_r>
 8016800:	6038      	str	r0, [r7, #0]
 8016802:	4629      	mov	r1, r5
 8016804:	4630      	mov	r0, r6
 8016806:	f000 f837 	bl	8016878 <_sbrk_r>
 801680a:	1c43      	adds	r3, r0, #1
 801680c:	d123      	bne.n	8016856 <_malloc_r+0x92>
 801680e:	230c      	movs	r3, #12
 8016810:	6033      	str	r3, [r6, #0]
 8016812:	4630      	mov	r0, r6
 8016814:	f000 f878 	bl	8016908 <__malloc_unlock>
 8016818:	e7e3      	b.n	80167e2 <_malloc_r+0x1e>
 801681a:	6823      	ldr	r3, [r4, #0]
 801681c:	1b5b      	subs	r3, r3, r5
 801681e:	d417      	bmi.n	8016850 <_malloc_r+0x8c>
 8016820:	2b0b      	cmp	r3, #11
 8016822:	d903      	bls.n	801682c <_malloc_r+0x68>
 8016824:	6023      	str	r3, [r4, #0]
 8016826:	441c      	add	r4, r3
 8016828:	6025      	str	r5, [r4, #0]
 801682a:	e004      	b.n	8016836 <_malloc_r+0x72>
 801682c:	6863      	ldr	r3, [r4, #4]
 801682e:	42a2      	cmp	r2, r4
 8016830:	bf0c      	ite	eq
 8016832:	600b      	streq	r3, [r1, #0]
 8016834:	6053      	strne	r3, [r2, #4]
 8016836:	4630      	mov	r0, r6
 8016838:	f000 f866 	bl	8016908 <__malloc_unlock>
 801683c:	f104 000b 	add.w	r0, r4, #11
 8016840:	1d23      	adds	r3, r4, #4
 8016842:	f020 0007 	bic.w	r0, r0, #7
 8016846:	1ac2      	subs	r2, r0, r3
 8016848:	d0cc      	beq.n	80167e4 <_malloc_r+0x20>
 801684a:	1a1b      	subs	r3, r3, r0
 801684c:	50a3      	str	r3, [r4, r2]
 801684e:	e7c9      	b.n	80167e4 <_malloc_r+0x20>
 8016850:	4622      	mov	r2, r4
 8016852:	6864      	ldr	r4, [r4, #4]
 8016854:	e7cc      	b.n	80167f0 <_malloc_r+0x2c>
 8016856:	1cc4      	adds	r4, r0, #3
 8016858:	f024 0403 	bic.w	r4, r4, #3
 801685c:	42a0      	cmp	r0, r4
 801685e:	d0e3      	beq.n	8016828 <_malloc_r+0x64>
 8016860:	1a21      	subs	r1, r4, r0
 8016862:	4630      	mov	r0, r6
 8016864:	f000 f808 	bl	8016878 <_sbrk_r>
 8016868:	3001      	adds	r0, #1
 801686a:	d1dd      	bne.n	8016828 <_malloc_r+0x64>
 801686c:	e7cf      	b.n	801680e <_malloc_r+0x4a>
 801686e:	bf00      	nop
 8016870:	20010448 	.word	0x20010448
 8016874:	2001044c 	.word	0x2001044c

08016878 <_sbrk_r>:
 8016878:	b538      	push	{r3, r4, r5, lr}
 801687a:	4d06      	ldr	r5, [pc, #24]	; (8016894 <_sbrk_r+0x1c>)
 801687c:	2300      	movs	r3, #0
 801687e:	4604      	mov	r4, r0
 8016880:	4608      	mov	r0, r1
 8016882:	602b      	str	r3, [r5, #0]
 8016884:	f7ff fb7a 	bl	8015f7c <_sbrk>
 8016888:	1c43      	adds	r3, r0, #1
 801688a:	d102      	bne.n	8016892 <_sbrk_r+0x1a>
 801688c:	682b      	ldr	r3, [r5, #0]
 801688e:	b103      	cbz	r3, 8016892 <_sbrk_r+0x1a>
 8016890:	6023      	str	r3, [r4, #0]
 8016892:	bd38      	pop	{r3, r4, r5, pc}
 8016894:	20012098 	.word	0x20012098

08016898 <strcpy>:
 8016898:	4603      	mov	r3, r0
 801689a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801689e:	f803 2b01 	strb.w	r2, [r3], #1
 80168a2:	2a00      	cmp	r2, #0
 80168a4:	d1f9      	bne.n	801689a <strcpy+0x2>
 80168a6:	4770      	bx	lr

080168a8 <strncpy>:
 80168a8:	b510      	push	{r4, lr}
 80168aa:	3901      	subs	r1, #1
 80168ac:	4603      	mov	r3, r0
 80168ae:	b132      	cbz	r2, 80168be <strncpy+0x16>
 80168b0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80168b4:	f803 4b01 	strb.w	r4, [r3], #1
 80168b8:	3a01      	subs	r2, #1
 80168ba:	2c00      	cmp	r4, #0
 80168bc:	d1f7      	bne.n	80168ae <strncpy+0x6>
 80168be:	441a      	add	r2, r3
 80168c0:	2100      	movs	r1, #0
 80168c2:	4293      	cmp	r3, r2
 80168c4:	d100      	bne.n	80168c8 <strncpy+0x20>
 80168c6:	bd10      	pop	{r4, pc}
 80168c8:	f803 1b01 	strb.w	r1, [r3], #1
 80168cc:	e7f9      	b.n	80168c2 <strncpy+0x1a>

080168ce <strstr>:
 80168ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80168d0:	780c      	ldrb	r4, [r1, #0]
 80168d2:	b164      	cbz	r4, 80168ee <strstr+0x20>
 80168d4:	4603      	mov	r3, r0
 80168d6:	781a      	ldrb	r2, [r3, #0]
 80168d8:	4618      	mov	r0, r3
 80168da:	1c5e      	adds	r6, r3, #1
 80168dc:	b90a      	cbnz	r2, 80168e2 <strstr+0x14>
 80168de:	4610      	mov	r0, r2
 80168e0:	e005      	b.n	80168ee <strstr+0x20>
 80168e2:	4294      	cmp	r4, r2
 80168e4:	d108      	bne.n	80168f8 <strstr+0x2a>
 80168e6:	460d      	mov	r5, r1
 80168e8:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80168ec:	b902      	cbnz	r2, 80168f0 <strstr+0x22>
 80168ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80168f0:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80168f4:	4297      	cmp	r7, r2
 80168f6:	d0f7      	beq.n	80168e8 <strstr+0x1a>
 80168f8:	4633      	mov	r3, r6
 80168fa:	e7ec      	b.n	80168d6 <strstr+0x8>

080168fc <__malloc_lock>:
 80168fc:	4801      	ldr	r0, [pc, #4]	; (8016904 <__malloc_lock+0x8>)
 80168fe:	f000 b809 	b.w	8016914 <__retarget_lock_acquire_recursive>
 8016902:	bf00      	nop
 8016904:	200120a0 	.word	0x200120a0

08016908 <__malloc_unlock>:
 8016908:	4801      	ldr	r0, [pc, #4]	; (8016910 <__malloc_unlock+0x8>)
 801690a:	f000 b804 	b.w	8016916 <__retarget_lock_release_recursive>
 801690e:	bf00      	nop
 8016910:	200120a0 	.word	0x200120a0

08016914 <__retarget_lock_acquire_recursive>:
 8016914:	4770      	bx	lr

08016916 <__retarget_lock_release_recursive>:
 8016916:	4770      	bx	lr

08016918 <_init>:
 8016918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801691a:	bf00      	nop
 801691c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801691e:	bc08      	pop	{r3}
 8016920:	469e      	mov	lr, r3
 8016922:	4770      	bx	lr

08016924 <_fini>:
 8016924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016926:	bf00      	nop
 8016928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801692a:	bc08      	pop	{r3}
 801692c:	469e      	mov	lr, r3
 801692e:	4770      	bx	lr
